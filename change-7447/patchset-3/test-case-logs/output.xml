<?xml version="1.0" encoding="UTF-8"?>
<robot generator="Robot 3.0.2 (Python 2.7.12 on linux2)" generated="20171020 13:01:25.746">
<suite id="s1" source="/tmp/fspcibld/24591/obmc-robot/tests" name="Tests">
<kw type="setup" name="System Driver Data">
<doc>System driver information.</doc>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Clear System Entry From Knownhosts</arg>
</arguments>
<kw name="Clear System Entry From Knownhosts" library="connection_client">
<doc>Delete OPENBMC_HOST entry from known_hosts file.</doc>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>sed '/${OPENBMC_HOST}/d' -i ~/.ssh/known_hosts</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:01:26.848">${cmd} = sed '/9.3.86.161/d' -i ~/.ssh/known_hosts</msg>
<status status="PASS" endtime="20171020 13:01:26.848" starttime="20171020 13:01:26.848"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:01:26.852">Running command 'sed '/9.3.86.161/d' -i ~/.ssh/known_hosts 2&gt;&amp;1'.</msg>
<msg level="INFO" timestamp="20171020 13:01:26.855">${rc} = 2</msg>
<msg level="INFO" timestamp="20171020 13:01:26.855">${output} = sed: can't read /home/fspcibld/.ssh/known_hosts: No such file or directory</msg>
<status status="PASS" endtime="20171020 13:01:26.855" starttime="20171020 13:01:26.849"></status>
</kw>
<status status="PASS" endtime="20171020 13:01:26.855" starttime="20171020 13:01:26.847"></status>
</kw>
<status status="PASS" endtime="20171020 13:01:26.855" starttime="20171020 13:01:26.847"></status>
</kw>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg level="FAIL" timestamp="20171020 13:01:26.860">Dictionary does not contain key 'host'.</msg>
<status status="FAIL" endtime="20171020 13:01:26.860" starttime="20171020 13:01:26.859"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:01:26.860">${has_host} = False</msg>
<status status="PASS" endtime="20171020 13:01:26.860" starttime="20171020 13:01:26.858"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status status="PASS" endtime="20171020 13:01:26.861" starttime="20171020 13:01:26.861"></status>
</kw>
<status status="PASS" endtime="20171020 13:01:26.861" starttime="20171020 13:01:26.860"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<kw name="User input SSH and HTTPs Ports" library="connection_client">
<doc>Update the global SSH and HTTPs port variable for QEMU</doc>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${SSH_PORT}</arg>
</arguments>
<assign>
<var>${port_num}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:01:26.863">${port_num} = 22</msg>
<status status="PASS" endtime="20171020 13:01:26.863" starttime="20171020 13:01:26.863"></status>
</kw>
<kw name="Replace Variables" library="BuiltIn">
<doc>Replaces variables in the given text with their current values.</doc>
<arguments>
<arg>${port_num}</arg>
</arguments>
<assign>
<var>${SSH_PORT}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:01:26.864">${SSH_PORT} = 22</msg>
<status status="PASS" endtime="20171020 13:01:26.864" starttime="20171020 13:01:26.863"></status>
</kw>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${HTTPS_PORT}</arg>
</arguments>
<assign>
<var>${https_num}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:01:26.864">${https_num} = 443</msg>
<status status="PASS" endtime="20171020 13:01:26.864" starttime="20171020 13:01:26.864"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${AUTH_URI}</arg>
<arg>https://${OPENBMC_HOST}:${https_num}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:01:26.865">${AUTH_URI} = https://9.3.86.161:443</msg>
<status status="PASS" endtime="20171020 13:01:26.865" starttime="20171020 13:01:26.865"></status>
</kw>
<status status="PASS" endtime="20171020 13:01:26.865" starttime="20171020 13:01:26.862"></status>
</kw>
<status status="PASS" endtime="20171020 13:01:26.865" starttime="20171020 13:01:26.862"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg level="FAIL" timestamp="20171020 13:01:26.866">Dictionary does not contain key 'port'.</msg>
<status status="FAIL" endtime="20171020 13:01:26.866" starttime="20171020 13:01:26.866"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:01:26.867">${has_port} = False</msg>
<status status="PASS" endtime="20171020 13:01:26.867" starttime="20171020 13:01:26.866"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keywords" library="BuiltIn">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
</arguments>
<status status="PASS" endtime="20171020 13:01:26.869" starttime="20171020 13:01:26.868"></status>
</kw>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status status="PASS" endtime="20171020 13:01:26.870" starttime="20171020 13:01:26.869"></status>
</kw>
<status status="PASS" endtime="20171020 13:01:26.870" starttime="20171020 13:01:26.868"></status>
</kw>
<status status="PASS" endtime="20171020 13:01:26.870" starttime="20171020 13:01:26.867"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:01:26.871">Logging into '9.3.86.161:22' as 'root'.</msg>
<msg level="INFO" timestamp="20171020 13:01:28.617">Read output: root@witherspoon:~#</msg>
<status status="PASS" endtime="20171020 13:01:28.617" starttime="20171020 13:01:26.870"></status>
</kw>
<status status="PASS" endtime="20171020 13:01:28.617" starttime="20171020 13:01:26.857"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Log BMC Driver Details</arg>
</arguments>
<kw name="Log BMC Driver Details">
<doc>Get BMC driver details and log.</doc>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${DRIVER_CMD}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${output}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:01:28.619">Executing command 'cat /etc/os-release | grep ^VERSION_ID='.</msg>
<msg level="INFO" timestamp="20171020 13:01:28.706">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20171020 13:01:28.706">${output} = VERSION_ID="v1.99.10-165-g11ddac1"</msg>
<msg level="INFO" timestamp="20171020 13:01:28.706">${stderr} = </msg>
<status status="PASS" endtime="20171020 13:01:28.706" starttime="20171020 13:01:28.619"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:01:28.707">Length is 0</msg>
<status status="PASS" endtime="20171020 13:01:28.707" starttime="20171020 13:01:28.706"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:01:28.707">VERSION_ID="v1.99.10-165-g11ddac1"</msg>
<status status="PASS" endtime="20171020 13:01:28.707" starttime="20171020 13:01:28.707"></status>
</kw>
<status status="PASS" endtime="20171020 13:01:28.707" starttime="20171020 13:01:28.618"></status>
</kw>
<status status="PASS" endtime="20171020 13:01:28.707" starttime="20171020 13:01:28.618"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Log PNOR Driver Details</arg>
</arguments>
<kw name="Log PNOR Driver Details">
<doc>Get PNOR driver details and log.</doc>
<kw name="Get Host Software Objects Details" library="code_update_utils">
<doc>Return software object details as a list of dictionaries.</doc>
<assign>
<var>${software}</var>
</assign>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>${software}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:01:28.709">${software} = []</msg>
<status status="PASS" endtime="20171020 13:01:28.709" starttime="20171020 13:01:28.709"></status>
</kw>
<kw name="Get Software Objects" library="code_update_utils">
<doc>Get the host software objects and return as a list.</doc>
<arguments>
<arg>${VERSION_PURPOSE_HOST}</arg>
</arguments>
<assign>
<var>${pnor_details}</var>
</assign>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>${host_list}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:01:28.710">${host_list} = []</msg>
<status status="PASS" endtime="20171020 13:01:28.710" starttime="20171020 13:01:28.710"></status>
</kw>
<kw name="Read Properties" library="rest_client">
<arguments>
<arg>${SOFTWARE_VERSION_URI}</arg>
</arguments>
<assign>
<var>${sw_list}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:01:28.714">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171020 13:01:28.715" starttime="20171020 13:01:28.714"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:01:28.716">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171020 13:01:28.716" starttime="20171020 13:01:28.715"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:01:28.716">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171020 13:01:28.716" starttime="20171020 13:01:28.716"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:01:28.717">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171020 13:01:28.717" starttime="20171020 13:01:28.717"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:01:28.907">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171020 13:01:28.907" starttime="20171020 13:01:28.718"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:01:28.908">${status} = PASS</msg>
<msg level="INFO" timestamp="20171020 13:01:28.908">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:01:28.908" starttime="20171020 13:01:28.717"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:01:28.908">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:01:28.909" starttime="20171020 13:01:28.908"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:01:28.909">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:01:28.909" starttime="20171020 13:01:28.909"></status>
</kw>
<status status="PASS" endtime="20171020 13:01:28.909" starttime="20171020 13:01:28.713"></status>
</kw>
<status status="PASS" endtime="20171020 13:01:28.910" starttime="20171020 13:01:28.713"></status>
</kw>
<status status="PASS" endtime="20171020 13:01:28.910" starttime="20171020 13:01:28.712"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:01:28.911">${base_uri} = /xyz/openbmc_project/software/</msg>
<status status="PASS" endtime="20171020 13:01:28.911" starttime="20171020 13:01:28.910"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:01:28.913">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/software/, method:Get, args:{}</msg>
<status status="PASS" endtime="20171020 13:01:28.913" starttime="20171020 13:01:28.912"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:01:28.914">URI:https://9.3.86.161:443/xyz/openbmc_project/software/, method:Get, args:{}</msg>
<status status="PASS" endtime="20171020 13:01:28.914" starttime="20171020 13:01:28.914"></status>
</kw>
<status status="PASS" endtime="20171020 13:01:28.914" starttime="20171020 13:01:28.913"></status>
</kw>
<status status="PASS" endtime="20171020 13:01:28.914" starttime="20171020 13:01:28.911"></status>
</kw>
<status status="PASS" endtime="20171020 13:01:28.914" starttime="20171020 13:01:28.911"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:01:28.980">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/software/, headers=None json=None</msg>
<msg level="INFO" timestamp="20171020 13:01:28.980">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:01:28.980" starttime="20171020 13:01:28.915"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:01:28.982">${msg} = Response code:200, Content:{
  "data": [
    "/xyz/openbmc_project/software/active", 
    "/xyz/openbmc_project/software/7a9ef57c", 
    "/xyz/openbmc_project/software/adf763d5", 
    "/xyz/openbmc_pr...</msg>
<status status="PASS" endtime="20171020 13:01:28.982" starttime="20171020 13:01:28.981"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:01:28.983">Response code:200, Content:{
  "data": [
    "/xyz/openbmc_project/software/active", 
    "/xyz/openbmc_project/software/7a9ef57c", 
    "/xyz/openbmc_project/software/adf763d5", 
    "/xyz/openbmc_project/software/8764baa3", 
    "/xyz/openbmc_project/software/functional", 
    "/xyz/openbmc_project/software/da042ae7"
  ], 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171020 13:01:28.983" starttime="20171020 13:01:28.983"></status>
</kw>
<status status="PASS" endtime="20171020 13:01:28.983" starttime="20171020 13:01:28.982"></status>
</kw>
<status status="PASS" endtime="20171020 13:01:28.983" starttime="20171020 13:01:28.981"></status>
</kw>
<status status="PASS" endtime="20171020 13:01:28.983" starttime="20171020 13:01:28.980"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171020 13:01:28.984">Delete All Sessions</msg>
<status status="PASS" endtime="20171020 13:01:28.984" starttime="20171020 13:01:28.984"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:01:28.984">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:01:28.984" starttime="20171020 13:01:28.711"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:01:28.985">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:01:28.985" starttime="20171020 13:01:28.984"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:01:28.985">To JSON using : content={
  "data": [
    "/xyz/openbmc_project/software/active", 
    "/xyz/openbmc_project/software/7a9ef57c", 
    "/xyz/openbmc_project/software/adf763d5", 
    "/xyz/openbmc_project/software/8764baa3", 
    "/xyz/openbmc_project/software/functional", 
    "/xyz/openbmc_project/software/da042ae7"
  ], 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171020 13:01:28.985">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171020 13:01:28.986">${content} = {u'data': [u'/xyz/openbmc_project/software/active', u'/xyz/openbmc_project/software/7a9ef57c', u'/xyz/openbmc_project/software/adf763d5', u'/xyz/openbmc_project/software/8764baa3', u'/xyz/openbmc_proj...</msg>
<status status="PASS" endtime="20171020 13:01:28.986" starttime="20171020 13:01:28.985"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:01:28.986">${sw_list} = [u'/xyz/openbmc_project/software/active', u'/xyz/openbmc_project/software/7a9ef57c', u'/xyz/openbmc_project/software/adf763d5', u'/xyz/openbmc_project/software/8764baa3', u'/xyz/openbmc_project/softwa...</msg>
<status status="PASS" endtime="20171020 13:01:28.986" starttime="20171020 13:01:28.710"></status>
</kw>
<kw type="for" name="${index} IN [ @{sw_list} ]">
<kw type="foritem" name="${index} = /xyz/openbmc_project/software/active">
<kw name="Read Software Attribute" library="code_update_utils">
<doc>Return software attribute data.</doc>
<arguments>
<arg>${index}</arg>
<arg>Purpose</arg>
</arguments>
<assign>
<var>${attr_purpose}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${software_object}/attr/${attribute_name}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:01:28.990">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171020 13:01:28.990" starttime="20171020 13:01:28.989"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:01:28.990">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171020 13:01:28.991" starttime="20171020 13:01:28.990"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:01:28.991">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171020 13:01:28.991" starttime="20171020 13:01:28.991"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:01:28.992">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171020 13:01:28.992" starttime="20171020 13:01:28.992"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:01:29.196">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171020 13:01:29.196" starttime="20171020 13:01:28.993"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:01:29.196">${status} = PASS</msg>
<msg level="INFO" timestamp="20171020 13:01:29.197">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:01:29.197" starttime="20171020 13:01:28.992"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:01:29.197">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:01:29.197" starttime="20171020 13:01:29.197"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:01:29.198">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:01:29.198" starttime="20171020 13:01:29.198"></status>
</kw>
<status status="PASS" endtime="20171020 13:01:29.198" starttime="20171020 13:01:28.989"></status>
</kw>
<status status="PASS" endtime="20171020 13:01:29.198" starttime="20171020 13:01:28.988"></status>
</kw>
<status status="PASS" endtime="20171020 13:01:29.198" starttime="20171020 13:01:28.987"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:01:29.199">${base_uri} = /xyz/openbmc_project/software/active/attr/Purpose</msg>
<status status="PASS" endtime="20171020 13:01:29.199" starttime="20171020 13:01:29.199"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20171020 13:01:29.200" starttime="20171020 13:01:29.199"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:01:29.255">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/software/active/attr/Purpose, headers=None json=None</msg>
<msg level="INFO" timestamp="20171020 13:01:29.255">${ret} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20171020 13:01:29.255" starttime="20171020 13:01:29.200"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20171020 13:01:29.255" starttime="20171020 13:01:29.255"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171020 13:01:29.256">Delete All Sessions</msg>
<status status="PASS" endtime="20171020 13:01:29.256" starttime="20171020 13:01:29.256"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:01:29.256">${resp} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20171020 13:01:29.256" starttime="20171020 13:01:28.987"></status>
</kw>
<kw name="Return From Keyword If" library="BuiltIn">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>${resp.status_code} != ${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:01:29.257">Returning from the enclosing user keyword.</msg>
<status status="PASS" endtime="20171020 13:01:29.257" starttime="20171020 13:01:29.256"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:01:29.257">${attr_purpose} = None</msg>
<status status="PASS" endtime="20171020 13:01:29.257" starttime="20171020 13:01:28.986"></status>
</kw>
<kw name="Continue For Loop If" library="BuiltIn">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>'${attr_purpose}' != '${version_type}'</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:01:29.258">Continuing for loop from the next iteration.</msg>
<status status="PASS" endtime="20171020 13:01:29.258" starttime="20171020 13:01:29.258"></status>
</kw>
<status status="PASS" endtime="20171020 13:01:29.258" starttime="20171020 13:01:28.986"></status>
</kw>
<kw type="foritem" name="${index} = /xyz/openbmc_project/software/7a9ef57c">
<kw name="Read Software Attribute" library="code_update_utils">
<doc>Return software attribute data.</doc>
<arguments>
<arg>${index}</arg>
<arg>Purpose</arg>
</arguments>
<assign>
<var>${attr_purpose}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${software_object}/attr/${attribute_name}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:01:29.262">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171020 13:01:29.262" starttime="20171020 13:01:29.261"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:01:29.262">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171020 13:01:29.262" starttime="20171020 13:01:29.262"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:01:29.263">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171020 13:01:29.263" starttime="20171020 13:01:29.263"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:01:29.264">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171020 13:01:29.264" starttime="20171020 13:01:29.263"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:01:29.456">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171020 13:01:29.456" starttime="20171020 13:01:29.265"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:01:29.456">${status} = PASS</msg>
<msg level="INFO" timestamp="20171020 13:01:29.457">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:01:29.457" starttime="20171020 13:01:29.264"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:01:29.457">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:01:29.457" starttime="20171020 13:01:29.457"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:01:29.458">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:01:29.458" starttime="20171020 13:01:29.458"></status>
</kw>
<status status="PASS" endtime="20171020 13:01:29.458" starttime="20171020 13:01:29.261"></status>
</kw>
<status status="PASS" endtime="20171020 13:01:29.458" starttime="20171020 13:01:29.260"></status>
</kw>
<status status="PASS" endtime="20171020 13:01:29.458" starttime="20171020 13:01:29.259"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:01:29.459">${base_uri} = /xyz/openbmc_project/software/7a9ef57c/attr/Purpose</msg>
<status status="PASS" endtime="20171020 13:01:29.459" starttime="20171020 13:01:29.459"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20171020 13:01:29.460" starttime="20171020 13:01:29.459"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:01:29.572">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/software/7a9ef57c/attr/Purpose, headers=None json=None</msg>
<msg level="INFO" timestamp="20171020 13:01:29.573">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:01:29.573" starttime="20171020 13:01:29.460"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20171020 13:01:29.573" starttime="20171020 13:01:29.573"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171020 13:01:29.574">Delete All Sessions</msg>
<status status="PASS" endtime="20171020 13:01:29.574" starttime="20171020 13:01:29.574"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:01:29.574">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:01:29.574" starttime="20171020 13:01:29.259"></status>
</kw>
<kw name="Return From Keyword If" library="BuiltIn">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>${resp.status_code} != ${HTTP_OK}</arg>
</arguments>
<status status="PASS" endtime="20171020 13:01:29.575" starttime="20171020 13:01:29.574"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:01:29.575">To JSON using : content={
  "data": "xyz.openbmc_project.Software.Version.VersionPurpose.Host", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171020 13:01:29.575">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171020 13:01:29.575">${content} = {u'data': u'xyz.openbmc_project.Software.Version.VersionPurpose.Host', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20171020 13:01:29.576" starttime="20171020 13:01:29.575"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:01:29.576">${attr_purpose} = xyz.openbmc_project.Software.Version.VersionPurpose.Host</msg>
<status status="PASS" endtime="20171020 13:01:29.576" starttime="20171020 13:01:29.258"></status>
</kw>
<kw name="Continue For Loop If" library="BuiltIn">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>'${attr_purpose}' != '${version_type}'</arg>
</arguments>
<status status="PASS" endtime="20171020 13:01:29.577" starttime="20171020 13:01:29.576"></status>
</kw>
<kw name="Append To List" library="Collections">
<doc>Adds ``values`` to the end of ``list``.</doc>
<arguments>
<arg>${host_list}</arg>
<arg>${index}</arg>
</arguments>
<status status="PASS" endtime="20171020 13:01:29.577" starttime="20171020 13:01:29.577"></status>
</kw>
<status status="PASS" endtime="20171020 13:01:29.577" starttime="20171020 13:01:29.258"></status>
</kw>
<kw type="foritem" name="${index} = /xyz/openbmc_project/software/adf763d5">
<kw name="Read Software Attribute" library="code_update_utils">
<doc>Return software attribute data.</doc>
<arguments>
<arg>${index}</arg>
<arg>Purpose</arg>
</arguments>
<assign>
<var>${attr_purpose}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${software_object}/attr/${attribute_name}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:01:29.581">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171020 13:01:29.581" starttime="20171020 13:01:29.580"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:01:29.582">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171020 13:01:29.582" starttime="20171020 13:01:29.581"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:01:29.582">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171020 13:01:29.582" starttime="20171020 13:01:29.582"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:01:29.583">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171020 13:01:29.583" starttime="20171020 13:01:29.583"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:01:29.800">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171020 13:01:29.801" starttime="20171020 13:01:29.584"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:01:29.801">${status} = PASS</msg>
<msg level="INFO" timestamp="20171020 13:01:29.801">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:01:29.801" starttime="20171020 13:01:29.583"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:01:29.802">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:01:29.802" starttime="20171020 13:01:29.801"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:01:29.802">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:01:29.802" starttime="20171020 13:01:29.802"></status>
</kw>
<status status="PASS" endtime="20171020 13:01:29.803" starttime="20171020 13:01:29.580"></status>
</kw>
<status status="PASS" endtime="20171020 13:01:29.803" starttime="20171020 13:01:29.579"></status>
</kw>
<status status="PASS" endtime="20171020 13:01:29.803" starttime="20171020 13:01:29.578"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:01:29.803">${base_uri} = /xyz/openbmc_project/software/adf763d5/attr/Purpose</msg>
<status status="PASS" endtime="20171020 13:01:29.803" starttime="20171020 13:01:29.803"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20171020 13:01:29.804" starttime="20171020 13:01:29.804"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:01:29.952">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/software/adf763d5/attr/Purpose, headers=None json=None</msg>
<msg level="INFO" timestamp="20171020 13:01:29.952">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:01:29.953" starttime="20171020 13:01:29.805"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20171020 13:01:29.953" starttime="20171020 13:01:29.953"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171020 13:01:29.954">Delete All Sessions</msg>
<status status="PASS" endtime="20171020 13:01:29.954" starttime="20171020 13:01:29.954"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:01:29.954">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:01:29.954" starttime="20171020 13:01:29.578"></status>
</kw>
<kw name="Return From Keyword If" library="BuiltIn">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>${resp.status_code} != ${HTTP_OK}</arg>
</arguments>
<status status="PASS" endtime="20171020 13:01:29.955" starttime="20171020 13:01:29.954"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:01:29.955">To JSON using : content={
  "data": "xyz.openbmc_project.Software.Version.VersionPurpose.BMC", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171020 13:01:29.955">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171020 13:01:29.955">${content} = {u'data': u'xyz.openbmc_project.Software.Version.VersionPurpose.BMC', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20171020 13:01:29.955" starttime="20171020 13:01:29.955"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:01:29.956">${attr_purpose} = xyz.openbmc_project.Software.Version.VersionPurpose.BMC</msg>
<status status="PASS" endtime="20171020 13:01:29.956" starttime="20171020 13:01:29.577"></status>
</kw>
<kw name="Continue For Loop If" library="BuiltIn">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>'${attr_purpose}' != '${version_type}'</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:01:29.956">Continuing for loop from the next iteration.</msg>
<status status="PASS" endtime="20171020 13:01:29.956" starttime="20171020 13:01:29.956"></status>
</kw>
<status status="PASS" endtime="20171020 13:01:29.957" starttime="20171020 13:01:29.577"></status>
</kw>
<kw type="foritem" name="${index} = /xyz/openbmc_project/software/8764baa3">
<kw name="Read Software Attribute" library="code_update_utils">
<doc>Return software attribute data.</doc>
<arguments>
<arg>${index}</arg>
<arg>Purpose</arg>
</arguments>
<assign>
<var>${attr_purpose}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${software_object}/attr/${attribute_name}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:01:29.960">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171020 13:01:29.960" starttime="20171020 13:01:29.960"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:01:29.961">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171020 13:01:29.961" starttime="20171020 13:01:29.961"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:01:29.962">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171020 13:01:29.962" starttime="20171020 13:01:29.961"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:01:29.962">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171020 13:01:29.963" starttime="20171020 13:01:29.962"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:01:30.144">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171020 13:01:30.144" starttime="20171020 13:01:29.963"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:01:30.144">${status} = PASS</msg>
<msg level="INFO" timestamp="20171020 13:01:30.144">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:01:30.144" starttime="20171020 13:01:29.963"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:01:30.145">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:01:30.145" starttime="20171020 13:01:30.145"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:01:30.146">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:01:30.146" starttime="20171020 13:01:30.145"></status>
</kw>
<status status="PASS" endtime="20171020 13:01:30.146" starttime="20171020 13:01:29.959"></status>
</kw>
<status status="PASS" endtime="20171020 13:01:30.146" starttime="20171020 13:01:29.958"></status>
</kw>
<status status="PASS" endtime="20171020 13:01:30.146" starttime="20171020 13:01:29.958"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:01:30.147">${base_uri} = /xyz/openbmc_project/software/8764baa3/attr/Purpose</msg>
<status status="PASS" endtime="20171020 13:01:30.147" starttime="20171020 13:01:30.146"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20171020 13:01:30.147" starttime="20171020 13:01:30.147"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:01:30.277">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/software/8764baa3/attr/Purpose, headers=None json=None</msg>
<msg level="INFO" timestamp="20171020 13:01:30.277">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:01:30.278" starttime="20171020 13:01:30.148"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20171020 13:01:30.278" starttime="20171020 13:01:30.278"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171020 13:01:30.279">Delete All Sessions</msg>
<status status="PASS" endtime="20171020 13:01:30.279" starttime="20171020 13:01:30.279"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:01:30.279">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:01:30.279" starttime="20171020 13:01:29.957"></status>
</kw>
<kw name="Return From Keyword If" library="BuiltIn">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>${resp.status_code} != ${HTTP_OK}</arg>
</arguments>
<status status="PASS" endtime="20171020 13:01:30.280" starttime="20171020 13:01:30.279"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:01:30.280">To JSON using : content={
  "data": "xyz.openbmc_project.Software.Version.VersionPurpose.Host", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171020 13:01:30.280">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171020 13:01:30.280">${content} = {u'data': u'xyz.openbmc_project.Software.Version.VersionPurpose.Host', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20171020 13:01:30.281" starttime="20171020 13:01:30.280"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:01:30.281">${attr_purpose} = xyz.openbmc_project.Software.Version.VersionPurpose.Host</msg>
<status status="PASS" endtime="20171020 13:01:30.281" starttime="20171020 13:01:29.957"></status>
</kw>
<kw name="Continue For Loop If" library="BuiltIn">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>'${attr_purpose}' != '${version_type}'</arg>
</arguments>
<status status="PASS" endtime="20171020 13:01:30.282" starttime="20171020 13:01:30.281"></status>
</kw>
<kw name="Append To List" library="Collections">
<doc>Adds ``values`` to the end of ``list``.</doc>
<arguments>
<arg>${host_list}</arg>
<arg>${index}</arg>
</arguments>
<status status="PASS" endtime="20171020 13:01:30.282" starttime="20171020 13:01:30.282"></status>
</kw>
<status status="PASS" endtime="20171020 13:01:30.282" starttime="20171020 13:01:29.957"></status>
</kw>
<kw type="foritem" name="${index} = /xyz/openbmc_project/software/functional">
<kw name="Read Software Attribute" library="code_update_utils">
<doc>Return software attribute data.</doc>
<arguments>
<arg>${index}</arg>
<arg>Purpose</arg>
</arguments>
<assign>
<var>${attr_purpose}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${software_object}/attr/${attribute_name}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:01:30.287">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171020 13:01:30.288" starttime="20171020 13:01:30.287"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:01:30.288">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171020 13:01:30.288" starttime="20171020 13:01:30.288"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:01:30.289">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171020 13:01:30.289" starttime="20171020 13:01:30.289"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:01:30.290">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171020 13:01:30.290" starttime="20171020 13:01:30.290"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:01:30.503">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171020 13:01:30.504" starttime="20171020 13:01:30.291"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:01:30.504">${status} = PASS</msg>
<msg level="INFO" timestamp="20171020 13:01:30.504">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:01:30.504" starttime="20171020 13:01:30.290"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:01:30.505">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:01:30.505" starttime="20171020 13:01:30.504"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:01:30.505">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:01:30.505" starttime="20171020 13:01:30.505"></status>
</kw>
<status status="PASS" endtime="20171020 13:01:30.505" starttime="20171020 13:01:30.284"></status>
</kw>
<status status="PASS" endtime="20171020 13:01:30.506" starttime="20171020 13:01:30.284"></status>
</kw>
<status status="PASS" endtime="20171020 13:01:30.506" starttime="20171020 13:01:30.283"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:01:30.507">${base_uri} = /xyz/openbmc_project/software/functional/attr/Purpose</msg>
<status status="PASS" endtime="20171020 13:01:30.507" starttime="20171020 13:01:30.506"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20171020 13:01:30.508" starttime="20171020 13:01:30.507"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:01:30.565">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/software/functional/attr/Purpose, headers=None json=None</msg>
<msg level="INFO" timestamp="20171020 13:01:30.565">${ret} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20171020 13:01:30.565" starttime="20171020 13:01:30.508"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20171020 13:01:30.566" starttime="20171020 13:01:30.565"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171020 13:01:30.566">Delete All Sessions</msg>
<status status="PASS" endtime="20171020 13:01:30.566" starttime="20171020 13:01:30.566"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:01:30.566">${resp} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20171020 13:01:30.566" starttime="20171020 13:01:30.283"></status>
</kw>
<kw name="Return From Keyword If" library="BuiltIn">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>${resp.status_code} != ${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:01:30.567">Returning from the enclosing user keyword.</msg>
<status status="PASS" endtime="20171020 13:01:30.567" starttime="20171020 13:01:30.567"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:01:30.567">${attr_purpose} = None</msg>
<status status="PASS" endtime="20171020 13:01:30.567" starttime="20171020 13:01:30.282"></status>
</kw>
<kw name="Continue For Loop If" library="BuiltIn">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>'${attr_purpose}' != '${version_type}'</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:01:30.568">Continuing for loop from the next iteration.</msg>
<status status="PASS" endtime="20171020 13:01:30.568" starttime="20171020 13:01:30.568"></status>
</kw>
<status status="PASS" endtime="20171020 13:01:30.568" starttime="20171020 13:01:30.282"></status>
</kw>
<kw type="foritem" name="${index} = /xyz/openbmc_project/software/da042ae7">
<kw name="Read Software Attribute" library="code_update_utils">
<doc>Return software attribute data.</doc>
<arguments>
<arg>${index}</arg>
<arg>Purpose</arg>
</arguments>
<assign>
<var>${attr_purpose}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${software_object}/attr/${attribute_name}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:01:30.571">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171020 13:01:30.572" starttime="20171020 13:01:30.571"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:01:30.573">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171020 13:01:30.573" starttime="20171020 13:01:30.572"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:01:30.573">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171020 13:01:30.573" starttime="20171020 13:01:30.573"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:01:30.574">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171020 13:01:30.574" starttime="20171020 13:01:30.574"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:01:30.751">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171020 13:01:30.752" starttime="20171020 13:01:30.575"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:01:30.752">${status} = PASS</msg>
<msg level="INFO" timestamp="20171020 13:01:30.752">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:01:30.752" starttime="20171020 13:01:30.575"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:01:30.753">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:01:30.753" starttime="20171020 13:01:30.752"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:01:30.753">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:01:30.753" starttime="20171020 13:01:30.753"></status>
</kw>
<status status="PASS" endtime="20171020 13:01:30.753" starttime="20171020 13:01:30.571"></status>
</kw>
<status status="PASS" endtime="20171020 13:01:30.754" starttime="20171020 13:01:30.570"></status>
</kw>
<status status="PASS" endtime="20171020 13:01:30.754" starttime="20171020 13:01:30.569"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:01:30.754">${base_uri} = /xyz/openbmc_project/software/da042ae7/attr/Purpose</msg>
<status status="PASS" endtime="20171020 13:01:30.754" starttime="20171020 13:01:30.754"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20171020 13:01:30.755" starttime="20171020 13:01:30.755"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:01:30.858">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/software/da042ae7/attr/Purpose, headers=None json=None</msg>
<msg level="INFO" timestamp="20171020 13:01:30.858">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:01:30.858" starttime="20171020 13:01:30.755"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20171020 13:01:30.859" starttime="20171020 13:01:30.858"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171020 13:01:30.859">Delete All Sessions</msg>
<status status="PASS" endtime="20171020 13:01:30.859" starttime="20171020 13:01:30.859"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:01:30.859">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:01:30.859" starttime="20171020 13:01:30.569"></status>
</kw>
<kw name="Return From Keyword If" library="BuiltIn">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>${resp.status_code} != ${HTTP_OK}</arg>
</arguments>
<status status="PASS" endtime="20171020 13:01:30.860" starttime="20171020 13:01:30.860"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:01:30.860">To JSON using : content={
  "data": "xyz.openbmc_project.Software.Version.VersionPurpose.BMC", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171020 13:01:30.861">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171020 13:01:30.861">${content} = {u'data': u'xyz.openbmc_project.Software.Version.VersionPurpose.BMC', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20171020 13:01:30.861" starttime="20171020 13:01:30.860"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:01:30.861">${attr_purpose} = xyz.openbmc_project.Software.Version.VersionPurpose.BMC</msg>
<status status="PASS" endtime="20171020 13:01:30.861" starttime="20171020 13:01:30.568"></status>
</kw>
<kw name="Continue For Loop If" library="BuiltIn">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>'${attr_purpose}' != '${version_type}'</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:01:30.862">Continuing for loop from the next iteration.</msg>
<status status="PASS" endtime="20171020 13:01:30.862" starttime="20171020 13:01:30.861"></status>
</kw>
<status status="PASS" endtime="20171020 13:01:30.862" starttime="20171020 13:01:30.568"></status>
</kw>
<status status="PASS" endtime="20171020 13:01:30.862" starttime="20171020 13:01:28.986"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:01:30.862">${pnor_details} = [u'/xyz/openbmc_project/software/7a9ef57c', u'/xyz/openbmc_project/software/8764baa3']</msg>
<status status="PASS" endtime="20171020 13:01:30.862" starttime="20171020 13:01:28.709"></status>
</kw>
<kw type="for" name="${pnor} IN [ @{pnor_details} ]">
<kw type="foritem" name="${pnor} = /xyz/openbmc_project/software/7a9ef57c">
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${pnor}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:01:30.865">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171020 13:01:30.865" starttime="20171020 13:01:30.865"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:01:30.866">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171020 13:01:30.866" starttime="20171020 13:01:30.866"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:01:30.867">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171020 13:01:30.867" starttime="20171020 13:01:30.866"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:01:30.867">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171020 13:01:30.867" starttime="20171020 13:01:30.867"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:01:31.071">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171020 13:01:31.071" starttime="20171020 13:01:30.868"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:01:31.071">${status} = PASS</msg>
<msg level="INFO" timestamp="20171020 13:01:31.071">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:01:31.071" starttime="20171020 13:01:30.868"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:01:31.072">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:01:31.072" starttime="20171020 13:01:31.072"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:01:31.073">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:01:31.073" starttime="20171020 13:01:31.072"></status>
</kw>
<status status="PASS" endtime="20171020 13:01:31.073" starttime="20171020 13:01:30.864"></status>
</kw>
<status status="PASS" endtime="20171020 13:01:31.073" starttime="20171020 13:01:30.864"></status>
</kw>
<status status="PASS" endtime="20171020 13:01:31.073" starttime="20171020 13:01:30.863"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:01:31.074">${base_uri} = /xyz/openbmc_project/software/7a9ef57c</msg>
<status status="PASS" endtime="20171020 13:01:31.074" starttime="20171020 13:01:31.073"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20171020 13:01:31.074" starttime="20171020 13:01:31.074"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:01:31.260">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/software/7a9ef57c, headers=None json=None</msg>
<msg level="INFO" timestamp="20171020 13:01:31.260">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:01:31.260" starttime="20171020 13:01:31.075"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20171020 13:01:31.260" starttime="20171020 13:01:31.260"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171020 13:01:31.261">Delete All Sessions</msg>
<status status="PASS" endtime="20171020 13:01:31.261" starttime="20171020 13:01:31.261"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:01:31.261">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:01:31.261" starttime="20171020 13:01:30.863"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${json}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:01:31.262">To JSON using : content={
  "data": {
    "Activation": "xyz.openbmc_project.Software.Activation.Activations.Active", 
    "ExtendedVersion": "op-build-57a0c70-dirty,buildroot-2017.08-6-g319c6e1,skiboot-v5.8-90-g398a98123641-pf316294,hostboot-3d6c541,linux-4.13-openpower1-pe0f5c53,petitboot-v1.5.1-pd10dfac,machine-xml-f8aaa73,occ-a43395b,hostboot-binaries-836385d,capp-ucode-9c73e9f,sbe-8d90ab2", 
    "Path": "", 
    "Priority": 1, 
    "Purpose": "xyz.openbmc_project.Software.Version.VersionPurpose.Host", 
    "RequestedActivation": "xyz.openbmc_project.Software.Activation.RequestedActivations.None", 
    "Version": "IBM-witherspoon-sequoia-ibm-OP9_v1.19_1.35", 
    "associations": [
      [
        "inventory", 
        "activation", 
        "/xyz/openbmc_project/inventory/system/chassis"
      ]
    ]
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171020 13:01:31.262">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171020 13:01:31.262">${json} = {u'data': {u'Activation': u'xyz.openbmc_project.Software.Activation.Activations.Active', u'RequestedActivation': u'xyz.openbmc_project.Software.Activation.RequestedActivations.None', u'Priority': 1, u...</msg>
<status status="PASS" endtime="20171020 13:01:31.262" starttime="20171020 13:01:31.262"></status>
</kw>
<kw name="Append To List" library="Collections">
<doc>Adds ``values`` to the end of ``list``.</doc>
<arguments>
<arg>${software}</arg>
<arg>${json["data"]}</arg>
</arguments>
<status status="PASS" endtime="20171020 13:01:31.263" starttime="20171020 13:01:31.263"></status>
</kw>
<status status="PASS" endtime="20171020 13:01:31.263" starttime="20171020 13:01:30.862"></status>
</kw>
<kw type="foritem" name="${pnor} = /xyz/openbmc_project/software/8764baa3">
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${pnor}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:01:31.266">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171020 13:01:31.266" starttime="20171020 13:01:31.265"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:01:31.267">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171020 13:01:31.267" starttime="20171020 13:01:31.266"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:01:31.267">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171020 13:01:31.267" starttime="20171020 13:01:31.267"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:01:31.268">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171020 13:01:31.268" starttime="20171020 13:01:31.268"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:01:31.488">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171020 13:01:31.488" starttime="20171020 13:01:31.269"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:01:31.488">${status} = PASS</msg>
<msg level="INFO" timestamp="20171020 13:01:31.488">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:01:31.488" starttime="20171020 13:01:31.268"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:01:31.489">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:01:31.489" starttime="20171020 13:01:31.488"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:01:31.489">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:01:31.489" starttime="20171020 13:01:31.489"></status>
</kw>
<status status="PASS" endtime="20171020 13:01:31.489" starttime="20171020 13:01:31.265"></status>
</kw>
<status status="PASS" endtime="20171020 13:01:31.490" starttime="20171020 13:01:31.264"></status>
</kw>
<status status="PASS" endtime="20171020 13:01:31.490" starttime="20171020 13:01:31.264"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:01:31.490">${base_uri} = /xyz/openbmc_project/software/8764baa3</msg>
<status status="PASS" endtime="20171020 13:01:31.490" starttime="20171020 13:01:31.490"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20171020 13:01:31.491" starttime="20171020 13:01:31.491"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:01:31.603">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/software/8764baa3, headers=None json=None</msg>
<msg level="INFO" timestamp="20171020 13:01:31.604">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:01:31.604" starttime="20171020 13:01:31.491"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20171020 13:01:31.604" starttime="20171020 13:01:31.604"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171020 13:01:31.605">Delete All Sessions</msg>
<status status="PASS" endtime="20171020 13:01:31.605" starttime="20171020 13:01:31.605"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:01:31.605">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:01:31.605" starttime="20171020 13:01:31.263"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${json}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:01:31.606">To JSON using : content={
  "data": {
    "Activation": "xyz.openbmc_project.Software.Activation.Activations.Active", 
    "ExtendedVersion": "op-build-v1.7-1321-g6eef393-dirty,buildroot-2017.05-163-g8035745,skiboot-v5.8-rc1-pd9d2012,hostboot-c68be97,linux-4.12.8-openpower1-p919e663,petitboot-v1.5.1-p848cad7,machine-xml-c1e49a6-pbb9f626,occ-854999a,hostboot-binaries-67a15fd,capp-ucode-9c73e9f,sbe-4a62126-p180ac2a", 
    "Path": "", 
    "Priority": 0, 
    "Purpose": "xyz.openbmc_project.Software.Version.VersionPurpose.Host", 
    "RequestedActivation": "xyz.openbmc_project.Software.Activation.RequestedActivations.None", 
    "Version": "IBM-witherspoon-sequoia-ibm-OP9_v1.18_1.54", 
    "associations": [
      [
        "inventory", 
        "activation", 
        "/xyz/openbmc_project/inventory/system/chassis"
      ]
    ]
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171020 13:01:31.606">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171020 13:01:31.606">${json} = {u'data': {u'Activation': u'xyz.openbmc_project.Software.Activation.Activations.Active', u'RequestedActivation': u'xyz.openbmc_project.Software.Activation.RequestedActivations.None', u'Priority': 0, u...</msg>
<status status="PASS" endtime="20171020 13:01:31.606" starttime="20171020 13:01:31.605"></status>
</kw>
<kw name="Append To List" library="Collections">
<doc>Adds ``values`` to the end of ``list``.</doc>
<arguments>
<arg>${software}</arg>
<arg>${json["data"]}</arg>
</arguments>
<status status="PASS" endtime="20171020 13:01:31.607" starttime="20171020 13:01:31.606"></status>
</kw>
<status status="PASS" endtime="20171020 13:01:31.607" starttime="20171020 13:01:31.263"></status>
</kw>
<status status="PASS" endtime="20171020 13:01:31.607" starttime="20171020 13:01:30.862"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:01:31.607">${software} = [{u'Activation': u'xyz.openbmc_project.Software.Activation.Activations.Active', u'RequestedActivation': u'xyz.openbmc_project.Software.Activation.RequestedActivations.None', u'Priority': 1, u'Purpose'...</msg>
<status status="PASS" endtime="20171020 13:01:31.607" starttime="20171020 13:01:28.708"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${software}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:01:31.608">[{u'Activation': u'xyz.openbmc_project.Software.Activation.Activations.Active', u'RequestedActivation': u'xyz.openbmc_project.Software.Activation.RequestedActivations.None', u'Priority': 1, u'Purpose': u'xyz.openbmc_project.Software.Version.VersionPurpose.Host', u'Version': u'IBM-witherspoon-sequoia-ibm-OP9_v1.19_1.35', u'Path': u'', u'ExtendedVersion': u'op-build-57a0c70-dirty,buildroot-2017.08-6-g319c6e1,skiboot-v5.8-90-g398a98123641-pf316294,hostboot-3d6c541,linux-4.13-openpower1-pe0f5c53,petitboot-v1.5.1-pd10dfac,machine-xml-f8aaa73,occ-a43395b,hostboot-binaries-836385d,capp-ucode-9c73e9f,sbe-8d90ab2', u'associations': [[u'inventory', u'activation', u'/xyz/openbmc_project/inventory/system/chassis']]}, {u'Activation': u'xyz.openbmc_project.Software.Activation.Activations.Active', u'RequestedActivation': u'xyz.openbmc_project.Software.Activation.RequestedActivations.None', u'Priority': 0, u'Purpose': u'xyz.openbmc_project.Software.Version.VersionPurpose.Host', u'Version': u'IBM-witherspoon-sequoia-ibm-OP9_v1.18_1.54', u'Path': u'', u'ExtendedVersion': u'op-build-v1.7-1321-g6eef393-dirty,buildroot-2017.05-163-g8035745,skiboot-v5.8-rc1-pd9d2012,hostboot-c68be97,linux-4.12.8-openpower1-p919e663,petitboot-v1.5.1-p848cad7,machine-xml-c1e49a6-pbb9f626,occ-854999a,hostboot-binaries-67a15fd,capp-ucode-9c73e9f,sbe-4a62126-p180ac2a', u'associations': [[u'inventory', u'activation', u'/xyz/openbmc_project/inventory/system/chassis']]}]</msg>
<status status="PASS" endtime="20171020 13:01:31.608" starttime="20171020 13:01:31.607"></status>
</kw>
<status status="PASS" endtime="20171020 13:01:31.608" starttime="20171020 13:01:28.708"></status>
</kw>
<status status="PASS" endtime="20171020 13:01:31.608" starttime="20171020 13:01:28.708"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Log BMC Model</arg>
</arguments>
<kw name="Log BMC Model">
<doc>Fetch BMC Model name from system and log.</doc>
<kw name="Get BMC System Model" library="utils">
<doc>Get the BMC model from the device tree.</doc>
<assign>
<var>${bmc_model}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>cat ${devicetree_base} | cut -d " " -f 1</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${bmc_model}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:01:31.626">width=80
host=9.3.86.161
port=22
alias=bmc_connection
term_type=vt100
newline=

prompt=# 
index=1
path_separator=/
height=24
encoding=UTF-8
timeout=25 seconds</msg>
<msg level="INFO" timestamp="20171020 13:01:31.627">Logging into '9.3.86.161:22' as 'root'.</msg>
<msg level="INFO" timestamp="20171020 13:01:32.410">Read output: root@witherspoon:~#</msg>
<msg level="INFO" timestamp="20171020 13:01:32.411">Executing command 'cat /sys/firmware/devicetree/base/model | cut -d " " -f 1'.</msg>
<msg level="INFO" timestamp="20171020 13:01:32.507">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20171020 13:01:32.516">${bmc_model} = Witherspoon</msg>
<msg level="INFO" timestamp="20171020 13:01:32.516">${stderr} = </msg>
<msg level="INFO" timestamp="20171020 13:01:32.516">${rc} = 0</msg>
<status status="PASS" endtime="20171020 13:01:32.516" starttime="20171020 13:01:31.609"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:01:32.517">Length is 0</msg>
<status status="PASS" endtime="20171020 13:01:32.517" starttime="20171020 13:01:32.517"></status>
</kw>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${bmc_model}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:01:32.518">Length is 11</msg>
<status status="PASS" endtime="20171020 13:01:32.518" starttime="20171020 13:01:32.518"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:01:32.518">${bmc_model} = Witherspoon</msg>
<status status="PASS" endtime="20171020 13:01:32.518" starttime="20171020 13:01:31.609"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>BMC Model=${bmc_model}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:01:32.519">BMC Model=Witherspoon</msg>
<status status="PASS" endtime="20171020 13:01:32.519" starttime="20171020 13:01:32.519"></status>
</kw>
<status status="PASS" endtime="20171020 13:01:32.519" starttime="20171020 13:01:31.608"></status>
</kw>
<status status="PASS" endtime="20171020 13:01:32.520" starttime="20171020 13:01:31.608"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Enable Core Dump On BMC</arg>
</arguments>
<kw name="Enable Core Dump On BMC" library="utils">
<doc>Enable core dump collection.</doc>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg level="FAIL" timestamp="20171020 13:01:32.523">Dictionary does not contain key 'host'.</msg>
<status status="FAIL" endtime="20171020 13:01:32.523" starttime="20171020 13:01:32.523"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:01:32.524">${has_host} = False</msg>
<status status="PASS" endtime="20171020 13:01:32.524" starttime="20171020 13:01:32.522"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status status="PASS" endtime="20171020 13:01:32.525" starttime="20171020 13:01:32.525"></status>
</kw>
<status status="PASS" endtime="20171020 13:01:32.526" starttime="20171020 13:01:32.524"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<kw name="User input SSH and HTTPs Ports" library="connection_client">
<doc>Update the global SSH and HTTPs port variable for QEMU</doc>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${SSH_PORT}</arg>
</arguments>
<assign>
<var>${port_num}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:01:32.527">${port_num} = 22</msg>
<status status="PASS" endtime="20171020 13:01:32.527" starttime="20171020 13:01:32.527"></status>
</kw>
<kw name="Replace Variables" library="BuiltIn">
<doc>Replaces variables in the given text with their current values.</doc>
<arguments>
<arg>${port_num}</arg>
</arguments>
<assign>
<var>${SSH_PORT}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:01:32.528">${SSH_PORT} = 22</msg>
<status status="PASS" endtime="20171020 13:01:32.528" starttime="20171020 13:01:32.528"></status>
</kw>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${HTTPS_PORT}</arg>
</arguments>
<assign>
<var>${https_num}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:01:32.529">${https_num} = 443</msg>
<status status="PASS" endtime="20171020 13:01:32.529" starttime="20171020 13:01:32.528"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${AUTH_URI}</arg>
<arg>https://${OPENBMC_HOST}:${https_num}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:01:32.529">${AUTH_URI} = https://9.3.86.161:443</msg>
<status status="PASS" endtime="20171020 13:01:32.530" starttime="20171020 13:01:32.529"></status>
</kw>
<status status="PASS" endtime="20171020 13:01:32.530" starttime="20171020 13:01:32.527"></status>
</kw>
<status status="PASS" endtime="20171020 13:01:32.530" starttime="20171020 13:01:32.526"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg level="FAIL" timestamp="20171020 13:01:32.531">Dictionary does not contain key 'port'.</msg>
<status status="FAIL" endtime="20171020 13:01:32.531" starttime="20171020 13:01:32.530"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:01:32.531">${has_port} = False</msg>
<status status="PASS" endtime="20171020 13:01:32.531" starttime="20171020 13:01:32.530"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keywords" library="BuiltIn">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
</arguments>
<status status="PASS" endtime="20171020 13:01:32.533" starttime="20171020 13:01:32.533"></status>
</kw>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status status="PASS" endtime="20171020 13:01:32.534" starttime="20171020 13:01:32.533"></status>
</kw>
<status status="PASS" endtime="20171020 13:01:32.534" starttime="20171020 13:01:32.532"></status>
</kw>
<status status="PASS" endtime="20171020 13:01:32.534" starttime="20171020 13:01:32.531"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:01:32.534">Logging into '9.3.86.161:22' as 'root'.</msg>
<msg level="INFO" timestamp="20171020 13:01:34.191">Read output: root@witherspoon:~#</msg>
<status status="PASS" endtime="20171020 13:01:34.191" starttime="20171020 13:01:32.534"></status>
</kw>
<status status="PASS" endtime="20171020 13:01:34.191" starttime="20171020 13:01:32.521"></status>
</kw>
<kw name="Execute Command On BMC" library="utils">
<doc>Execute given command on BMC and return output.</doc>
<arguments>
<arg>echo '/tmp/core_%e.%p' | tee /proc/sys/kernel/core_pattern</arg>
</arguments>
<assign>
<var>${core_pattern}</var>
</assign>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${command}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:01:34.192">Executing command 'echo '/tmp/core_%e.%p' | tee /proc/sys/kernel/core_pattern'.</msg>
<msg level="INFO" timestamp="20171020 13:01:34.269">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20171020 13:01:34.269">${stdout} = /tmp/core_%e.%p</msg>
<msg level="INFO" timestamp="20171020 13:01:34.269">${stderr} = </msg>
<status status="PASS" endtime="20171020 13:01:34.269" starttime="20171020 13:01:34.192"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:01:34.270">Length is 0</msg>
<status status="PASS" endtime="20171020 13:01:34.270" starttime="20171020 13:01:34.270"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:01:34.270">${core_pattern} = /tmp/core_%e.%p</msg>
<status status="PASS" endtime="20171020 13:01:34.270" starttime="20171020 13:01:34.191"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${core_pattern}</arg>
<arg>/tmp/core_%e.%p</arg>
</arguments>
<status status="PASS" endtime="20171020 13:01:34.271" starttime="20171020 13:01:34.271"></status>
</kw>
<status status="PASS" endtime="20171020 13:01:34.271" starttime="20171020 13:01:32.520"></status>
</kw>
<status status="PASS" endtime="20171020 13:01:34.271" starttime="20171020 13:01:32.520"></status>
</kw>
<status status="PASS" endtime="20171020 13:01:34.271" starttime="20171020 13:01:26.846"></status>
</kw>
<suite id="s1-s1" source="/tmp/fspcibld/24591/obmc-robot/tests/security" name="Security">
<suite id="s1-s1-s1" source="/tmp/fspcibld/24591/obmc-robot/tests/security/test_ssl.robot" name="Test Ssl">
<test id="s1-s1-s1-t1" name="Test SSL Connection">
<kw name="Initialize OpenBMC" library="rest_client">
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:01:34.311">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=20, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171020 13:01:34.312" starttime="20171020 13:01:34.311"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:01:34.312">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171020 13:01:34.312" starttime="20171020 13:01:34.312"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:01:34.313">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171020 13:01:34.313" starttime="20171020 13:01:34.313"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:01:34.314">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171020 13:01:34.314" starttime="20171020 13:01:34.313"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:01:34.511">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171020 13:01:34.511" starttime="20171020 13:01:34.314"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:01:34.511">${status} = PASS</msg>
<msg level="INFO" timestamp="20171020 13:01:34.511">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:01:34.511" starttime="20171020 13:01:34.314"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:01:34.512">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:01:34.512" starttime="20171020 13:01:34.512"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:01:34.513">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:01:34.513" starttime="20171020 13:01:34.513"></status>
</kw>
<status status="PASS" endtime="20171020 13:01:34.514" starttime="20171020 13:01:34.310"></status>
</kw>
<status status="PASS" endtime="20171020 13:01:34.514" starttime="20171020 13:01:34.309"></status>
</kw>
<status status="PASS" endtime="20171020 13:01:34.514" starttime="20171020 13:01:34.308"></status>
</kw>
<kw type="teardown" name="FFDC On Test Case Fail" library="openbmc_ffdc">
<doc>Generic FFDC entry point. Place holder to hook in</doc>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${TEST_STATUS}' == 'FAIL'</arg>
<arg>FFDC</arg>
</arguments>
<status status="PASS" endtime="20171020 13:01:34.515" starttime="20171020 13:01:34.515"></status>
</kw>
<kw name="Log Test Case Status" library="openbmc_ffdc_methods">
<doc>Test case execution result history.</doc>
<kw name="Get Variable Value" library="BuiltIn">
<doc>Returns variable value or ``default`` if the variable does not exist.</doc>
<arguments>
<arg>${FFDC_DIR_PATH_STYLE}</arg>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${FFDC_DIR_PATH_STYLE}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:01:34.532">${FFDC_DIR_PATH_STYLE} = </msg>
<status status="PASS" endtime="20171020 13:01:34.533" starttime="20171020 13:01:34.516"></status>
</kw>
<kw name="Get Variable Value" library="BuiltIn">
<doc>Returns variable value or ``default`` if the variable does not exist.</doc>
<arguments>
<arg>${FFDC_DIR_PATH}</arg>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${FFDC_DIR_PATH}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:01:34.542">${FFDC_DIR_PATH} = </msg>
<status status="PASS" endtime="20171020 13:01:34.542" starttime="20171020 13:01:34.533"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${FFDC_DIR_PATH}' == '${EMPTY}'</arg>
<arg>Set FFDC Defaults</arg>
</arguments>
<kw name="Set Ffdc Defaults" library="openbmc_ffdc">
<doc>Set a default value for ffdc_dir_path and ffdc_prefix if they don't</doc>
<kw name="Get Current Time Stamp" library="openbmc_ffdc_utils">
<doc>Get the current time stamp data</doc>
<kw name="Get Current Date" library="DateTime">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:01:34.544">${cur_time} = 2017-10-20 13:01:34:543965</msg>
<status status="PASS" endtime="20171020 13:01:34.544" starttime="20171020 13:01:34.544"></status>
</kw>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:01:34.545">${cur_time} = 20171020130134543965</msg>
<status status="PASS" endtime="20171020 13:01:34.545" starttime="20171020 13:01:34.544"></status>
</kw>
<status status="PASS" endtime="20171020 13:01:34.545" starttime="20171020 13:01:34.543"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:01:34.550">${FFDC_TIME} = 20171020130134543965</msg>
<kw name="Get Test Dir and Name" library="openbmc_ffdc_utils">
<doc>SUITE_NAME and TEST_NAME are automatic variables</doc>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${SUITE_NAME}</arg>
</arguments>
<assign>
<var>${suite_name}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:01:34.551">${suite_name} = TestsSecurityTestSsl</msg>
<status status="PASS" endtime="20171020 13:01:34.551" starttime="20171020 13:01:34.551"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${FFDC_TIME}_</arg>
<arg>${suite_name}</arg>
</arguments>
<assign>
<var>${suite_name}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:01:34.552">${suite_name} = 20171020130134543965_TestsSecurityTestSsl</msg>
<status status="PASS" endtime="20171020 13:01:34.552" starttime="20171020 13:01:34.551"></status>
</kw>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${TEST_NAME}</arg>
</arguments>
<assign>
<var>${test_name}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:01:34.552">${test_name} = TestSSLConnection</msg>
<status status="PASS" endtime="20171020 13:01:34.552" starttime="20171020 13:01:34.552"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${FFDC_TIME}_</arg>
<arg>${test_name}</arg>
</arguments>
<assign>
<var>${test_name}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:01:34.553">${test_name} = 20171020130134543965_TestSSLConnection</msg>
<status status="PASS" endtime="20171020 13:01:34.553" starttime="20171020 13:01:34.553"></status>
</kw>
<status status="PASS" endtime="20171020 13:01:34.553" starttime="20171020 13:01:34.550"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:01:34.554">${FFDC_DIR_PATH} = /tmp/fspcibld/24591/obmc-robot/logs/20171020130134543965_TestsSecurityTestSsl/20171020130134543965_TestSSLConnection/</msg>
<msg level="INFO" timestamp="20171020 13:01:34.558">${FFDC_PREFIX} = 20171020130134543965_</msg>
<status status="PASS" endtime="20171020 13:01:34.558" starttime="20171020 13:01:34.543"></status>
</kw>
<status status="PASS" endtime="20171020 13:01:34.559" starttime="20171020 13:01:34.542"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${FFDC_DIR_PATH_STYLE}' == '${1}'</arg>
<arg>Run Keywords</arg>
<arg>Set Global Variable</arg>
<arg>${FFDC_LOG_PATH}</arg>
<arg>${FFDC_DIR_PATH}</arg>
<arg>AND</arg>
<arg>Set Global Variable</arg>
<arg>${TEST_HISTORY}</arg>
<arg>${FFDC_DIR_PATH}test_history.txt</arg>
</arguments>
<status status="PASS" endtime="20171020 13:01:34.559" starttime="20171020 13:01:34.559"></status>
</kw>
<kw name="Create Directory" library="OperatingSystem">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>${FFDC_LOG_PATH}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:01:34.560" html="yes">Created directory '&lt;a href="file:///tmp/fspcibld/24591/obmc-robot/logs"&gt;/tmp/fspcibld/24591/obmc-robot/logs&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171020 13:01:34.560" starttime="20171020 13:01:34.559"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>OperatingSystem.File Should Exist</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<assign>
<var>${exist}</var>
</assign>
<kw name="File Should Exist" library="OperatingSystem">
<doc>Fails unless the given ``path`` points to an existing file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
</arguments>
<msg level="FAIL" timestamp="20171020 13:01:34.561">File '/tmp/fspcibld/24591/obmc-robot/logs/test_history.txt' does not exist.</msg>
<status status="FAIL" endtime="20171020 13:01:34.561" starttime="20171020 13:01:34.561"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:01:34.561">${exist} = False</msg>
<status status="PASS" endtime="20171020 13:01:34.561" starttime="20171020 13:01:34.560"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${exist}' == '${False}'</arg>
<arg>Create File</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<kw name="Create File" library="OperatingSystem">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:01:34.562" html="yes">Created file '&lt;a href="file:///tmp/fspcibld/24591/obmc-robot/logs/test_history.txt"&gt;/tmp/fspcibld/24591/obmc-robot/logs/test_history.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171020 13:01:34.562" starttime="20171020 13:01:34.562"></status>
</kw>
<status status="PASS" endtime="20171020 13:01:34.563" starttime="20171020 13:01:34.562"></status>
</kw>
<kw name="Rpvars" library="gen_robot_print">
<arguments>
<arg>TEST_HISTORY</arg>
</arguments>
<status status="PASS" endtime="20171020 13:01:34.563" starttime="20171020 13:01:34.563"></status>
</kw>
<kw name="Get Current Time Stamp" library="openbmc_ffdc_utils">
<doc>Get the current time stamp data</doc>
<assign>
<var>${cur_time}</var>
</assign>
<kw name="Get Current Date" library="DateTime">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:01:34.564">${cur_time} = 2017-10-20 13:01:34:564053</msg>
<status status="PASS" endtime="20171020 13:01:34.564" starttime="20171020 13:01:34.564"></status>
</kw>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:01:34.565">${cur_time} = 20171020130134564053</msg>
<status status="PASS" endtime="20171020 13:01:34.565" starttime="20171020 13:01:34.564"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:01:34.565">${cur_time} = 20171020130134564053</msg>
<status status="PASS" endtime="20171020 13:01:34.565" starttime="20171020 13:01:34.563"></status>
</kw>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
<arg>${cur_time}:${SUITE_NAME}:${TEST_NAME}:${TEST_STATUS}${\n}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:01:34.566" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/24591/obmc-robot/logs/test_history.txt"&gt;/tmp/fspcibld/24591/obmc-robot/logs/test_history.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171020 13:01:34.566" starttime="20171020 13:01:34.565"></status>
</kw>
<status status="PASS" endtime="20171020 13:01:34.566" starttime="20171020 13:01:34.516"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${TEST_STATUS}' == 'FAIL'</arg>
<arg>Run Keywords</arg>
<arg>Delete Error Logs</arg>
<arg>AND</arg>
<arg>Delete All Dumps</arg>
</arguments>
<status status="PASS" endtime="20171020 13:01:34.567" starttime="20171020 13:01:34.566"></status>
</kw>
<status status="PASS" endtime="20171020 13:01:34.567" starttime="20171020 13:01:34.514"></status>
</kw>
<doc>This testcase is for testing the SSL connection to the
OpenBMC machine.</doc>
<tags>
<tag>Test_SSL_Connection</tag>
</tags>
<status status="PASS" critical="yes" endtime="20171020 13:01:34.567" starttime="20171020 13:01:34.308"></status>
</test>
<kw type="teardown" name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171020 13:01:34.567">Delete All Sessions</msg>
<status status="PASS" endtime="20171020 13:01:34.568" starttime="20171020 13:01:34.567"></status>
</kw>
<doc>This testsuite is for testing SSL connection to OpenBMC</doc>
<status status="PASS" endtime="20171020 13:01:34.568" starttime="20171020 13:01:34.273"></status>
</suite>
<status status="PASS" endtime="20171020 13:01:34.569" starttime="20171020 13:01:34.271"></status>
</suite>
<suite id="s1-s2" source="/tmp/fspcibld/24591/obmc-robot/tests/test_basic_poweron.robot" name="Test Basic Poweron">
<test id="s1-s2-t1" name="Power On Test">
<kw type="setup" name="Start SOL Console Logging" library="utils">
<doc>Start system console log to file.</doc>
<kw name="Create OS Console File Path" library="utils">
<doc>Create OS console file path name and return it.</doc>
<arguments>
<arg>${log_file_path}</arg>
</arguments>
<assign>
<var>${log_file_path}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>/tmp/${OPENBMC_HOST}_os_console.txt</arg>
</arguments>
<assign>
<var>${default_file_path}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:01:34.636">${default_file_path} = /tmp/9.3.86.161_os_console.txt</msg>
<status status="PASS" endtime="20171020 13:01:34.636" starttime="20171020 13:01:34.636"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${log_file_path}' == '${EMPTY}'</arg>
<arg>${default_file_path}</arg>
<arg>${log_file_path}</arg>
</arguments>
<assign>
<var>${log_file_path}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:01:34.637">${log_file_path} = /tmp/9.3.86.161_os_console.txt</msg>
<status status="PASS" endtime="20171020 13:01:34.637" starttime="20171020 13:01:34.637"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:01:34.637">${log_file_path} = /tmp/9.3.86.161_os_console.txt</msg>
<status status="PASS" endtime="20171020 13:01:34.637" starttime="20171020 13:01:34.635"></status>
</kw>
<kw name="Stop SOL Console Logging" library="utils">
<doc>Stop system console logging and return log output.</doc>
<arguments>
<arg>${log_file_path}</arg>
<arg>return_data=${return_data}</arg>
</arguments>
<assign>
<var>${log_output}</var>
</assign>
<kw name="Create OS Console File Path" library="utils">
<doc>Create OS console file path name and return it.</doc>
<arguments>
<arg>${log_file_path}</arg>
</arguments>
<assign>
<var>${log_file_path}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>/tmp/${OPENBMC_HOST}_os_console.txt</arg>
</arguments>
<assign>
<var>${default_file_path}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:01:34.639">${default_file_path} = /tmp/9.3.86.161_os_console.txt</msg>
<status status="PASS" endtime="20171020 13:01:34.639" starttime="20171020 13:01:34.639"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${log_file_path}' == '${EMPTY}'</arg>
<arg>${default_file_path}</arg>
<arg>${log_file_path}</arg>
</arguments>
<assign>
<var>${log_file_path}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:01:34.640">${log_file_path} = /tmp/9.3.86.161_os_console.txt</msg>
<status status="PASS" endtime="20171020 13:01:34.640" starttime="20171020 13:01:34.639"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:01:34.640">${log_file_path} = /tmp/9.3.86.161_os_console.txt</msg>
<status status="PASS" endtime="20171020 13:01:34.640" starttime="20171020 13:01:34.638"></status>
</kw>
<kw name="Get SOL Console Pid" library="utils">
<doc>Get the pid of the active sol conole job.</doc>
<assign>
<var>${os_con_pid}</var>
</assign>
<kw name="Create OS Console Command String" library="utils">
<doc>Return a command string to start OS console logging.</doc>
<assign>
<var>${search_string}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>which ssh_pw 2&gt;/dev/null || find ${EXECDIR} -name 'ssh_pw'</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:01:34.641">${cmd_buf} = which ssh_pw 2&gt;/dev/null || find /tmp/fspcibld/24591/obmc-robot -name 'ssh_pw'</msg>
<status status="PASS" endtime="20171020 13:01:34.641" starttime="20171020 13:01:34.641"></status>
</kw>
<kw name="Rdpissuing" library="gen_robot_print">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status status="PASS" endtime="20171020 13:01:34.642" starttime="20171020 13:01:34.642"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:01:34.646">Running command 'which ssh_pw 2&gt;/dev/null || find /tmp/fspcibld/24591/obmc-robot -name 'ssh_pw''.</msg>
<msg level="INFO" timestamp="20171020 13:01:34.649">${rc} = 0</msg>
<msg level="INFO" timestamp="20171020 13:01:34.649">${output} = /tmp/fspcibld/24591/obmc-robot/.tox/witherspoon/bin/ssh_pw</msg>
<status status="PASS" endtime="20171020 13:01:34.650" starttime="20171020 13:01:34.642"></status>
</kw>
<kw name="Rdpvars" library="gen_robot_print">
<arguments>
<arg>rc</arg>
<arg>output</arg>
</arguments>
<status status="PASS" endtime="20171020 13:01:34.653" starttime="20171020 13:01:34.652"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>0</arg>
<arg>${rc}</arg>
<arg>msg=Could not find ssh_pw.</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:01:34.654">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'int'&gt;</msg>
<status status="PASS" endtime="20171020 13:01:34.654" starttime="20171020 13:01:34.653"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<assign>
<var>${ssh_pw_file_path}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:01:34.655">${ssh_pw_file_path} = /tmp/fspcibld/24591/obmc-robot/.tox/witherspoon/bin/ssh_pw</msg>
<status status="PASS" endtime="20171020 13:01:34.655" starttime="20171020 13:01:34.654"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${ssh_pw_file_path} ${OPENBMC_PASSWORD} -p 2200</arg>
<arg>-o "StrictHostKeyChecking no" ${OPENBMC_USERNAME}@${OPENBMC_HOST}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:01:34.656">${cmd_buf} = /tmp/fspcibld/24591/obmc-robot/.tox/witherspoon/bin/ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.3.86.161</msg>
<status status="PASS" endtime="20171020 13:01:34.656" starttime="20171020 13:01:34.655"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:01:34.657">${search_string} = /tmp/fspcibld/24591/obmc-robot/.tox/witherspoon/bin/ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.3.86.161</msg>
<status status="PASS" endtime="20171020 13:01:34.657" starttime="20171020 13:01:34.641"></status>
</kw>
<kw name="Replace String" library="String">
<doc>Replaces ``search_for`` in the given ``string`` with ``replace_with``.</doc>
<arguments>
<arg>${search_string}</arg>
<arg>"</arg>
<arg>["]?</arg>
</arguments>
<assign>
<var>${search_string}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:01:34.658">${search_string} = /tmp/fspcibld/24591/obmc-robot/.tox/witherspoon/bin/ssh_pw 0penBmc -p 2200 -o ["]?StrictHostKeyChecking no["]? root@9.3.86.161</msg>
<status status="PASS" endtime="20171020 13:01:34.658" starttime="20171020 13:01:34.657"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>echo $(ps -ef | egrep '${search_string}'</arg>
<arg>| egrep -v grep | cut -c10-14)</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:01:34.658">${cmd_buf} = echo $(ps -ef | egrep '/tmp/fspcibld/24591/obmc-robot/.tox/witherspoon/bin/ssh_pw 0penBmc -p 2200 -o ["]?StrictHostKeyChecking no["]? root@9.3.86.161' | egrep -v grep | cut -c10-14)</msg>
<status status="PASS" endtime="20171020 13:01:34.658" starttime="20171020 13:01:34.658"></status>
</kw>
<kw name="Rdpissuing" library="gen_robot_print">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status status="PASS" endtime="20171020 13:01:34.659" starttime="20171020 13:01:34.659"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${os_con_pid}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:01:34.662">Running command 'echo $(ps -ef | egrep '/tmp/fspcibld/24591/obmc-robot/.tox/witherspoon/bin/ssh_pw 0penBmc -p 2200 -o ["]?StrictHostKeyChecking no["]? root@9.3.86.161' | egrep -v grep | cut -c10-14) 2&gt;&amp;1'.</msg>
<msg level="INFO" timestamp="20171020 13:01:34.682">${rc} = 0</msg>
<msg level="INFO" timestamp="20171020 13:01:34.683">${os_con_pid} = </msg>
<status status="PASS" endtime="20171020 13:01:34.684" starttime="20171020 13:01:34.659"></status>
</kw>
<kw name="Rdpvars" library="gen_robot_print">
<arguments>
<arg>os_con_pid</arg>
</arguments>
<status status="PASS" endtime="20171020 13:01:34.696" starttime="20171020 13:01:34.693"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:01:34.699">${os_con_pid} = </msg>
<status status="PASS" endtime="20171020 13:01:34.699" starttime="20171020 13:01:34.640"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>kill -9 ${os_con_pid}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:01:34.700">${cmd_buf} = kill -9 </msg>
<status status="PASS" endtime="20171020 13:01:34.700" starttime="20171020 13:01:34.700"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${os_con_pid}' != '${EMPTY}'</arg>
<arg>Rdpissuing</arg>
<arg>${cmd_buf}</arg>
</arguments>
<status status="PASS" endtime="20171020 13:01:34.704" starttime="20171020 13:01:34.702"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${os_con_pid}' != '${EMPTY}'</arg>
<arg>Run And Return Rc And Output</arg>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:01:34.707">${rc} = None</msg>
<msg level="INFO" timestamp="20171020 13:01:34.707">${output} = None</msg>
<status status="PASS" endtime="20171020 13:01:34.707" starttime="20171020 13:01:34.705"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${os_con_pid}' != '${EMPTY}'</arg>
<arg>Rdpvars</arg>
<arg>rc</arg>
<arg>output</arg>
</arguments>
<status status="PASS" endtime="20171020 13:01:34.708" starttime="20171020 13:01:34.707"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${targ_file_path}' != '${EMPTY}'</arg>
<arg>Run Keyword And Ignore Error</arg>
<arg>Copy File</arg>
<arg>${log_file_path}</arg>
<arg>${targ_file_path}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Copy File</arg>
<arg>${log_file_path}</arg>
<arg>${targ_file_path}</arg>
</arguments>
<kw name="Copy File" library="OperatingSystem">
<doc>Copies the source file into the destination.</doc>
<arguments>
<arg>${log_file_path}</arg>
<arg>${targ_file_path}</arg>
</arguments>
<msg level="FAIL" timestamp="20171020 13:01:34.712">Source file '/tmp/9.3.86.161_os_console.txt' does not exist.</msg>
<status status="FAIL" endtime="20171020 13:01:34.712" starttime="20171020 13:01:34.711"></status>
</kw>
<status status="PASS" endtime="20171020 13:01:34.712" starttime="20171020 13:01:34.710"></status>
</kw>
<status status="PASS" endtime="20171020 13:01:34.712" starttime="20171020 13:01:34.709"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${output}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:01:34.712">${output} = </msg>
<status status="PASS" endtime="20171020 13:01:34.712" starttime="20171020 13:01:34.712"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${debug}^1</arg>
</arguments>
<assign>
<var>${loc_quiet}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:01:34.713">${loc_quiet} = 1</msg>
<status status="PASS" endtime="20171020 13:01:34.713" starttime="20171020 13:01:34.713"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${return_data}' == '${1}'</arg>
<arg>Cmd Fnc</arg>
<arg>cat ${log_file_path} 2&gt;/dev/null</arg>
<arg>quiet=${loc_quiet}</arg>
<arg>print_output=${0}</arg>
<arg>show_err=${0}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<kw name="Cmd Fnc" library="gen_cmd">
<doc>Run the given command in a shell and return the shell return code and the</doc>
<arguments>
<arg>cat ${log_file_path} 2&gt;/dev/null</arg>
<arg>quiet=${loc_quiet}</arg>
<arg>print_output=${0}</arg>
<arg>show_err=${0}</arg>
</arguments>
<status status="PASS" endtime="20171020 13:01:34.775" starttime="20171020 13:01:34.714"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:01:34.783">${rc} = 1</msg>
<msg level="INFO" timestamp="20171020 13:01:34.785">${output} = </msg>
<status status="PASS" endtime="20171020 13:01:34.785" starttime="20171020 13:01:34.713"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:01:34.786">${log_output} = </msg>
<status status="PASS" endtime="20171020 13:01:34.786" starttime="20171020 13:01:34.637"></status>
</kw>
<kw name="Create File" library="OperatingSystem">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${log_file_path}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:01:34.788" html="yes">Created file '&lt;a href="file:///tmp/9.3.86.161_os_console.txt"&gt;/tmp/9.3.86.161_os_console.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171020 13:01:34.788" starttime="20171020 13:01:34.787"></status>
</kw>
<kw name="Create OS Console Command String" library="utils">
<doc>Return a command string to start OS console logging.</doc>
<assign>
<var>${sub_cmd_buf}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>which ssh_pw 2&gt;/dev/null || find ${EXECDIR} -name 'ssh_pw'</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:01:34.790">${cmd_buf} = which ssh_pw 2&gt;/dev/null || find /tmp/fspcibld/24591/obmc-robot -name 'ssh_pw'</msg>
<status status="PASS" endtime="20171020 13:01:34.790" starttime="20171020 13:01:34.789"></status>
</kw>
<kw name="Rdpissuing" library="gen_robot_print">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status status="PASS" endtime="20171020 13:01:34.790" starttime="20171020 13:01:34.790"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:01:34.797">Running command 'which ssh_pw 2&gt;/dev/null || find /tmp/fspcibld/24591/obmc-robot -name 'ssh_pw''.</msg>
<msg level="INFO" timestamp="20171020 13:01:34.818">${rc} = 0</msg>
<msg level="INFO" timestamp="20171020 13:01:34.819">${output} = /tmp/fspcibld/24591/obmc-robot/.tox/witherspoon/bin/ssh_pw</msg>
<status status="PASS" endtime="20171020 13:01:34.820" starttime="20171020 13:01:34.790"></status>
</kw>
<kw name="Rdpvars" library="gen_robot_print">
<arguments>
<arg>rc</arg>
<arg>output</arg>
</arguments>
<status status="PASS" endtime="20171020 13:01:34.835" starttime="20171020 13:01:34.832"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>0</arg>
<arg>${rc}</arg>
<arg>msg=Could not find ssh_pw.</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:01:34.837">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'int'&gt;</msg>
<status status="PASS" endtime="20171020 13:01:34.837" starttime="20171020 13:01:34.836"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<assign>
<var>${ssh_pw_file_path}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:01:34.844">${ssh_pw_file_path} = /tmp/fspcibld/24591/obmc-robot/.tox/witherspoon/bin/ssh_pw</msg>
<status status="PASS" endtime="20171020 13:01:34.844" starttime="20171020 13:01:34.839"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${ssh_pw_file_path} ${OPENBMC_PASSWORD} -p 2200</arg>
<arg>-o "StrictHostKeyChecking no" ${OPENBMC_USERNAME}@${OPENBMC_HOST}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:01:34.848">${cmd_buf} = /tmp/fspcibld/24591/obmc-robot/.tox/witherspoon/bin/ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.3.86.161</msg>
<status status="PASS" endtime="20171020 13:01:34.848" starttime="20171020 13:01:34.845"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:01:34.849">${sub_cmd_buf} = /tmp/fspcibld/24591/obmc-robot/.tox/witherspoon/bin/ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.3.86.161</msg>
<status status="PASS" endtime="20171020 13:01:34.849" starttime="20171020 13:01:34.789"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${sub_cmd_buf} &gt; ${log_file_path} 2&gt;&amp;1 &amp;</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:01:34.851">${cmd_buf} = /tmp/fspcibld/24591/obmc-robot/.tox/witherspoon/bin/ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.3.86.161 &gt; /tmp/9.3.86.161_os_console.txt 2&gt;&amp;1 &amp;</msg>
<status status="PASS" endtime="20171020 13:01:34.851" starttime="20171020 13:01:34.850"></status>
</kw>
<kw name="Rdpissuing" library="gen_robot_print">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status status="PASS" endtime="20171020 13:01:34.852" starttime="20171020 13:01:34.851"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:01:34.865">Running command '/tmp/fspcibld/24591/obmc-robot/.tox/witherspoon/bin/ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.3.86.161 &gt; /tmp/9.3.86.161_os_console.txt 2&gt;&amp;1 &amp;'.</msg>
<msg level="INFO" timestamp="20171020 13:01:34.886">${rc} = 0</msg>
<msg level="INFO" timestamp="20171020 13:01:34.887">${output} = </msg>
<status status="PASS" endtime="20171020 13:01:34.888" starttime="20171020 13:01:34.853"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${rc}</arg>
<arg>${0}</arg>
</arguments>
<status status="PASS" endtime="20171020 13:01:34.904" starttime="20171020 13:01:34.901"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>1</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:01:35.906">Slept 1 second</msg>
<status status="PASS" endtime="20171020 13:01:35.907" starttime="20171020 13:01:34.906"></status>
</kw>
<kw name="Get SOL Console Pid" library="utils">
<doc>Get the pid of the active sol conole job.</doc>
<assign>
<var>${os_con_pid}</var>
</assign>
<kw name="Create OS Console Command String" library="utils">
<doc>Return a command string to start OS console logging.</doc>
<assign>
<var>${search_string}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>which ssh_pw 2&gt;/dev/null || find ${EXECDIR} -name 'ssh_pw'</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:01:35.914">${cmd_buf} = which ssh_pw 2&gt;/dev/null || find /tmp/fspcibld/24591/obmc-robot -name 'ssh_pw'</msg>
<status status="PASS" endtime="20171020 13:01:35.914" starttime="20171020 13:01:35.913"></status>
</kw>
<kw name="Rdpissuing" library="gen_robot_print">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status status="PASS" endtime="20171020 13:01:35.915" starttime="20171020 13:01:35.915"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:01:35.928">Running command 'which ssh_pw 2&gt;/dev/null || find /tmp/fspcibld/24591/obmc-robot -name 'ssh_pw''.</msg>
<msg level="INFO" timestamp="20171020 13:01:35.949">${rc} = 0</msg>
<msg level="INFO" timestamp="20171020 13:01:35.949">${output} = /tmp/fspcibld/24591/obmc-robot/.tox/witherspoon/bin/ssh_pw</msg>
<status status="PASS" endtime="20171020 13:01:35.950" starttime="20171020 13:01:35.916"></status>
</kw>
<kw name="Rdpvars" library="gen_robot_print">
<arguments>
<arg>rc</arg>
<arg>output</arg>
</arguments>
<status status="PASS" endtime="20171020 13:01:35.966" starttime="20171020 13:01:35.962"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>0</arg>
<arg>${rc}</arg>
<arg>msg=Could not find ssh_pw.</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:01:35.968">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'int'&gt;</msg>
<status status="PASS" endtime="20171020 13:01:35.969" starttime="20171020 13:01:35.967"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<assign>
<var>${ssh_pw_file_path}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:01:35.970">${ssh_pw_file_path} = /tmp/fspcibld/24591/obmc-robot/.tox/witherspoon/bin/ssh_pw</msg>
<status status="PASS" endtime="20171020 13:01:35.970" starttime="20171020 13:01:35.970"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${ssh_pw_file_path} ${OPENBMC_PASSWORD} -p 2200</arg>
<arg>-o "StrictHostKeyChecking no" ${OPENBMC_USERNAME}@${OPENBMC_HOST}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:01:35.975">${cmd_buf} = /tmp/fspcibld/24591/obmc-robot/.tox/witherspoon/bin/ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.3.86.161</msg>
<status status="PASS" endtime="20171020 13:01:35.975" starttime="20171020 13:01:35.972"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:01:35.976">${search_string} = /tmp/fspcibld/24591/obmc-robot/.tox/witherspoon/bin/ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.3.86.161</msg>
<status status="PASS" endtime="20171020 13:01:35.976" starttime="20171020 13:01:35.911"></status>
</kw>
<kw name="Replace String" library="String">
<doc>Replaces ``search_for`` in the given ``string`` with ``replace_with``.</doc>
<arguments>
<arg>${search_string}</arg>
<arg>"</arg>
<arg>["]?</arg>
</arguments>
<assign>
<var>${search_string}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:01:35.979">${search_string} = /tmp/fspcibld/24591/obmc-robot/.tox/witherspoon/bin/ssh_pw 0penBmc -p 2200 -o ["]?StrictHostKeyChecking no["]? root@9.3.86.161</msg>
<status status="PASS" endtime="20171020 13:01:35.979" starttime="20171020 13:01:35.977"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>echo $(ps -ef | egrep '${search_string}'</arg>
<arg>| egrep -v grep | cut -c10-14)</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:01:35.980">${cmd_buf} = echo $(ps -ef | egrep '/tmp/fspcibld/24591/obmc-robot/.tox/witherspoon/bin/ssh_pw 0penBmc -p 2200 -o ["]?StrictHostKeyChecking no["]? root@9.3.86.161' | egrep -v grep | cut -c10-14)</msg>
<status status="PASS" endtime="20171020 13:01:35.982" starttime="20171020 13:01:35.979"></status>
</kw>
<kw name="Rdpissuing" library="gen_robot_print">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status status="PASS" endtime="20171020 13:01:35.984" starttime="20171020 13:01:35.983"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${os_con_pid}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:01:35.997">Running command 'echo $(ps -ef | egrep '/tmp/fspcibld/24591/obmc-robot/.tox/witherspoon/bin/ssh_pw 0penBmc -p 2200 -o ["]?StrictHostKeyChecking no["]? root@9.3.86.161' | egrep -v grep | cut -c10-14) 2&gt;&amp;1'.</msg>
<msg level="INFO" timestamp="20171020 13:01:36.012">${rc} = 0</msg>
<msg level="INFO" timestamp="20171020 13:01:36.012">${os_con_pid} = 202</msg>
<status status="PASS" endtime="20171020 13:01:36.012" starttime="20171020 13:01:35.984"></status>
</kw>
<kw name="Rdpvars" library="gen_robot_print">
<arguments>
<arg>os_con_pid</arg>
</arguments>
<status status="PASS" endtime="20171020 13:01:36.015" starttime="20171020 13:01:36.015"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:01:36.016">${os_con_pid} = 202</msg>
<status status="PASS" endtime="20171020 13:01:36.016" starttime="20171020 13:01:35.907"></status>
</kw>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${os_con_pid}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:01:36.016">Length is 3</msg>
<status status="PASS" endtime="20171020 13:01:36.018" starttime="20171020 13:01:36.016"></status>
</kw>
<status status="PASS" endtime="20171020 13:01:36.019" starttime="20171020 13:01:34.635"></status>
</kw>
<kw name="Repeat Keyword" library="BuiltIn">
<doc>Executes the specified keyword multiple times.</doc>
<arguments>
<arg>${LOOP_COUNT} times</arg>
<arg>Host Off And On</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:01:36.020">Repeating keyword, round 1/2.</msg>
<kw name="Host Off And On">
<doc>Verify power off and on.</doc>
<kw name="Initiate Host PowerOff" library="state_manager">
<doc>Initiate host power off.</doc>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=${HOST_POWEROFF_TRANS}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:01:36.022">${args} = {u'data': 'xyz.openbmc_project.State.Host.Transition.Off'}</msg>
<status status="PASS" endtime="20171020 13:01:36.022" starttime="20171020 13:01:36.021"></status>
</kw>
<kw name="Write Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>RequestedHostTransition</arg>
<arg>data=${args}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:01:36.024">${base_uri} = /xyz/openbmc_project/state/host0/</msg>
<status status="PASS" endtime="20171020 13:01:36.024" starttime="20171020 13:01:36.023"></status>
</kw>
<kw name="OpenBMC Put Request" library="rest_client">
<arguments>
<arg>${base_uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:01:36.028">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171020 13:01:36.029" starttime="20171020 13:01:36.028"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:01:36.030">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171020 13:01:36.030" starttime="20171020 13:01:36.030"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:01:36.031">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171020 13:01:36.031" starttime="20171020 13:01:36.031"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:01:36.032">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171020 13:01:36.032" starttime="20171020 13:01:36.032"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:01:36.243">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171020 13:01:36.243" starttime="20171020 13:01:36.034"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:01:36.243">${status} = PASS</msg>
<msg level="INFO" timestamp="20171020 13:01:36.243">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:01:36.243" starttime="20171020 13:01:36.033"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:01:36.244">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:01:36.244" starttime="20171020 13:01:36.243"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:01:36.244">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:01:36.244" starttime="20171020 13:01:36.244"></status>
</kw>
<status status="PASS" endtime="20171020 13:01:36.245" starttime="20171020 13:01:36.027"></status>
</kw>
<status status="PASS" endtime="20171020 13:01:36.245" starttime="20171020 13:01:36.026"></status>
</kw>
<status status="PASS" endtime="20171020 13:01:36.245" starttime="20171020 13:01:36.025"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:01:36.246">${base_uri} = /xyz/openbmc_project/state/host0//attr/RequestedHostTransition</msg>
<status status="PASS" endtime="20171020 13:01:36.246" starttime="20171020 13:01:36.245"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:01:36.247">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171020 13:01:36.247" starttime="20171020 13:01:36.246"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" endtime="20171020 13:01:36.247" starttime="20171020 13:01:36.247"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Put</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:01:36.249">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, method:Put, args:{u'data': {u'data': 'xyz.openbmc_project.State.Host.Transition.Off'}, u'headers': {u'Content-...</msg>
<status status="PASS" endtime="20171020 13:01:36.249" starttime="20171020 13:01:36.248"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:01:36.250">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, method:Put, args:{u'data': {u'data': 'xyz.openbmc_project.State.Host.Transition.Off'}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20171020 13:01:36.250" starttime="20171020 13:01:36.250"></status>
</kw>
<status status="PASS" endtime="20171020 13:01:36.250" starttime="20171020 13:01:36.249"></status>
</kw>
<status status="PASS" endtime="20171020 13:01:36.251" starttime="20171020 13:01:36.247"></status>
</kw>
<kw name="Put Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a PUT request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:01:36.523">Put Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, data={"data": "xyz.openbmc_project.State.Host.Transition.Off"},                     headers={u'Content-Type': u'application/json'}, allow_redirects=True </msg>
<msg level="INFO" timestamp="20171020 13:01:36.523">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:01:36.523" starttime="20171020 13:01:36.251"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:01:36.525">${msg} = Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171020 13:01:36.525" starttime="20171020 13:01:36.524"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:01:36.526">Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171020 13:01:36.526" starttime="20171020 13:01:36.525"></status>
</kw>
<status status="PASS" endtime="20171020 13:01:36.526" starttime="20171020 13:01:36.525"></status>
</kw>
<status status="PASS" endtime="20171020 13:01:36.526" starttime="20171020 13:01:36.524"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171020 13:01:36.526">Delete All Sessions</msg>
<status status="PASS" endtime="20171020 13:01:36.526" starttime="20171020 13:01:36.526"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:01:36.527">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:01:36.527" starttime="20171020 13:01:36.024"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:01:36.527">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:01:36.527" starttime="20171020 13:01:36.527"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${json}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:01:36.528">To JSON using : content={
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171020 13:01:36.528">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171020 13:01:36.528">${json} = {u'data': None, u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20171020 13:01:36.528" starttime="20171020 13:01:36.528"></status>
</kw>
<status status="PASS" endtime="20171020 13:01:36.528" starttime="20171020 13:01:36.022"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${wait}' == '${0}'</arg>
<arg>Return From Keyword</arg>
</arguments>
<status status="PASS" endtime="20171020 13:01:36.529" starttime="20171020 13:01:36.528"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Wait For PowerOff</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Wait For PowerOff" library="state_manager">
<doc>Wait for power off state.</doc>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>6 min</arg>
<arg>10 sec</arg>
<arg>Is Host Off</arg>
</arguments>
<kw name="Is Host Off" library="state_manager">
<doc>Check if host state is "Off".</doc>
<kw name="Is Chassis Off" library="state_manager">
<doc>Check if chassis state is "Off".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:01:36.535">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171020 13:01:36.535" starttime="20171020 13:01:36.534"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:01:36.536">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171020 13:01:36.536" starttime="20171020 13:01:36.536"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:01:36.537">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171020 13:01:36.537" starttime="20171020 13:01:36.536"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:01:36.538">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171020 13:01:36.538" starttime="20171020 13:01:36.537"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:01:37.310">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171020 13:01:37.310" starttime="20171020 13:01:36.539"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:01:37.310">${status} = PASS</msg>
<msg level="INFO" timestamp="20171020 13:01:37.310">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:01:37.310" starttime="20171020 13:01:36.538"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:01:37.311">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:01:37.311" starttime="20171020 13:01:37.310"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:01:37.311">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:01:37.312" starttime="20171020 13:01:37.311"></status>
</kw>
<status status="PASS" endtime="20171020 13:01:37.312" starttime="20171020 13:01:36.534"></status>
</kw>
<status status="PASS" endtime="20171020 13:01:37.312" starttime="20171020 13:01:36.534"></status>
</kw>
<status status="PASS" endtime="20171020 13:01:37.312" starttime="20171020 13:01:36.533"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:01:37.313">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" endtime="20171020 13:01:37.313" starttime="20171020 13:01:37.312"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:01:37.315">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" endtime="20171020 13:01:37.315" starttime="20171020 13:01:37.314"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:01:37.316">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" endtime="20171020 13:01:37.316" starttime="20171020 13:01:37.316"></status>
</kw>
<status status="PASS" endtime="20171020 13:01:37.316" starttime="20171020 13:01:37.315"></status>
</kw>
<status status="PASS" endtime="20171020 13:01:37.316" starttime="20171020 13:01:37.313"></status>
</kw>
<status status="PASS" endtime="20171020 13:01:37.316" starttime="20171020 13:01:37.313"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:01:37.689">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20171020 13:01:37.690">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:01:37.690" starttime="20171020 13:01:37.317"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:01:37.692">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171020 13:01:37.692" starttime="20171020 13:01:37.691"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:01:37.693">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171020 13:01:37.693" starttime="20171020 13:01:37.692"></status>
</kw>
<status status="PASS" endtime="20171020 13:01:37.693" starttime="20171020 13:01:37.692"></status>
</kw>
<status status="PASS" endtime="20171020 13:01:37.693" starttime="20171020 13:01:37.691"></status>
</kw>
<status status="PASS" endtime="20171020 13:01:37.693" starttime="20171020 13:01:37.690"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171020 13:01:37.693">Delete All Sessions</msg>
<status status="PASS" endtime="20171020 13:01:37.693" starttime="20171020 13:01:37.693"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:01:37.694">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:01:37.694" starttime="20171020 13:01:36.532"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:01:37.694">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:01:37.694" starttime="20171020 13:01:37.694"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:01:37.695">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171020 13:01:37.695">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171020 13:01:37.695">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20171020 13:01:37.695" starttime="20171020 13:01:37.695"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:01:37.695">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status status="PASS" endtime="20171020 13:01:37.695" starttime="20171020 13:01:36.531"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:01:37.696">${power_state} = Off</msg>
<status status="PASS" endtime="20171020 13:01:37.696" starttime="20171020 13:01:36.531"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${power_state}</arg>
</arguments>
<status status="PASS" endtime="20171020 13:01:37.696" starttime="20171020 13:01:37.696"></status>
</kw>
<status status="PASS" endtime="20171020 13:01:37.696" starttime="20171020 13:01:36.531"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:01:37.700">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171020 13:01:37.700" starttime="20171020 13:01:37.700"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:01:37.701">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171020 13:01:37.701" starttime="20171020 13:01:37.700"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:01:37.701">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171020 13:01:37.702" starttime="20171020 13:01:37.701"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:01:37.702">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171020 13:01:37.702" starttime="20171020 13:01:37.702"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:01:38.055">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171020 13:01:38.055" starttime="20171020 13:01:37.703"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:01:38.055">${status} = PASS</msg>
<msg level="INFO" timestamp="20171020 13:01:38.055">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:01:38.055" starttime="20171020 13:01:37.702"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:01:38.056">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:01:38.056" starttime="20171020 13:01:38.055"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:01:38.056">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:01:38.057" starttime="20171020 13:01:38.056"></status>
</kw>
<status status="PASS" endtime="20171020 13:01:38.057" starttime="20171020 13:01:37.699"></status>
</kw>
<status status="PASS" endtime="20171020 13:01:38.057" starttime="20171020 13:01:37.699"></status>
</kw>
<status status="PASS" endtime="20171020 13:01:38.057" starttime="20171020 13:01:37.698"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:01:38.058">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" endtime="20171020 13:01:38.058" starttime="20171020 13:01:38.057"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:01:38.060">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" endtime="20171020 13:01:38.060" starttime="20171020 13:01:38.059"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:01:38.061">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" endtime="20171020 13:01:38.061" starttime="20171020 13:01:38.060"></status>
</kw>
<status status="PASS" endtime="20171020 13:01:38.061" starttime="20171020 13:01:38.060"></status>
</kw>
<status status="PASS" endtime="20171020 13:01:38.061" starttime="20171020 13:01:38.058"></status>
</kw>
<status status="PASS" endtime="20171020 13:01:38.061" starttime="20171020 13:01:38.058"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:01:38.268">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20171020 13:01:38.268">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:01:38.268" starttime="20171020 13:01:38.061"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:01:38.270">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171020 13:01:38.270" starttime="20171020 13:01:38.270"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:01:38.271">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171020 13:01:38.271" starttime="20171020 13:01:38.271"></status>
</kw>
<status status="PASS" endtime="20171020 13:01:38.271" starttime="20171020 13:01:38.270"></status>
</kw>
<status status="PASS" endtime="20171020 13:01:38.271" starttime="20171020 13:01:38.269"></status>
</kw>
<status status="PASS" endtime="20171020 13:01:38.272" starttime="20171020 13:01:38.269"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171020 13:01:38.272">Delete All Sessions</msg>
<status status="PASS" endtime="20171020 13:01:38.272" starttime="20171020 13:01:38.272"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:01:38.272">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:01:38.272" starttime="20171020 13:01:37.697"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:01:38.273">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:01:38.273" starttime="20171020 13:01:38.273"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:01:38.273">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171020 13:01:38.274">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171020 13:01:38.274">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20171020 13:01:38.274" starttime="20171020 13:01:38.273"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:01:38.274">${state} = xyz.openbmc_project.State.Host.HostState.Off</msg>
<status status="PASS" endtime="20171020 13:01:38.274" starttime="20171020 13:01:37.697"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:01:38.274">${host_state} = Off</msg>
<status status="PASS" endtime="20171020 13:01:38.274" starttime="20171020 13:01:37.696"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${host_state}</arg>
</arguments>
<status status="PASS" endtime="20171020 13:01:38.275" starttime="20171020 13:01:38.275"></status>
</kw>
<status status="PASS" endtime="20171020 13:01:38.275" starttime="20171020 13:01:36.530"></status>
</kw>
<status status="PASS" endtime="20171020 13:01:38.275" starttime="20171020 13:01:36.530"></status>
</kw>
<status status="PASS" endtime="20171020 13:01:38.275" starttime="20171020 13:01:36.529"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:01:38.275">${status} = True</msg>
<status status="PASS" endtime="20171020 13:01:38.275" starttime="20171020 13:01:36.529"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Hard Power Off</arg>
</arguments>
<status status="PASS" endtime="20171020 13:01:38.276" starttime="20171020 13:01:38.276"></status>
</kw>
<status status="PASS" endtime="20171020 13:01:38.276" starttime="20171020 13:01:36.021"></status>
</kw>
<kw name="Initiate Host Boot" library="state_manager">
<doc>Initiate host power on.</doc>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=${HOST_POWERON_TRANS}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:01:38.277">${args} = {u'data': 'xyz.openbmc_project.State.Host.Transition.On'}</msg>
<status status="PASS" endtime="20171020 13:01:38.277" starttime="20171020 13:01:38.277"></status>
</kw>
<kw name="Write Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>RequestedHostTransition</arg>
<arg>data=${args}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:01:38.278">${base_uri} = /xyz/openbmc_project/state/host0/</msg>
<status status="PASS" endtime="20171020 13:01:38.278" starttime="20171020 13:01:38.278"></status>
</kw>
<kw name="OpenBMC Put Request" library="rest_client">
<arguments>
<arg>${base_uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:01:38.281">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171020 13:01:38.282" starttime="20171020 13:01:38.281"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:01:38.283">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171020 13:01:38.283" starttime="20171020 13:01:38.282"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:01:38.283">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171020 13:01:38.283" starttime="20171020 13:01:38.283"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:01:38.284">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171020 13:01:38.284" starttime="20171020 13:01:38.284"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:01:38.573">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171020 13:01:38.573" starttime="20171020 13:01:38.285"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:01:38.573">${status} = PASS</msg>
<msg level="INFO" timestamp="20171020 13:01:38.573">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:01:38.573" starttime="20171020 13:01:38.284"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:01:38.574">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:01:38.574" starttime="20171020 13:01:38.573"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:01:38.574">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:01:38.575" starttime="20171020 13:01:38.574"></status>
</kw>
<status status="PASS" endtime="20171020 13:01:38.575" starttime="20171020 13:01:38.280"></status>
</kw>
<status status="PASS" endtime="20171020 13:01:38.575" starttime="20171020 13:01:38.280"></status>
</kw>
<status status="PASS" endtime="20171020 13:01:38.575" starttime="20171020 13:01:38.279"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:01:38.575">${base_uri} = /xyz/openbmc_project/state/host0//attr/RequestedHostTransition</msg>
<status status="PASS" endtime="20171020 13:01:38.575" starttime="20171020 13:01:38.575"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:01:38.576">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171020 13:01:38.576" starttime="20171020 13:01:38.576"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" endtime="20171020 13:01:38.577" starttime="20171020 13:01:38.576"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Put</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:01:38.578">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, method:Put, args:{u'data': {u'data': 'xyz.openbmc_project.State.Host.Transition.On'}, u'headers': {u'Content-T...</msg>
<status status="PASS" endtime="20171020 13:01:38.578" starttime="20171020 13:01:38.578"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:01:38.579">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, method:Put, args:{u'data': {u'data': 'xyz.openbmc_project.State.Host.Transition.On'}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20171020 13:01:38.579" starttime="20171020 13:01:38.579"></status>
</kw>
<status status="PASS" endtime="20171020 13:01:38.579" starttime="20171020 13:01:38.578"></status>
</kw>
<status status="PASS" endtime="20171020 13:01:38.580" starttime="20171020 13:01:38.577"></status>
</kw>
<kw name="Put Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a PUT request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:01:38.965">Put Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, data={"data": "xyz.openbmc_project.State.Host.Transition.On"},                     headers={u'Content-Type': u'application/json'}, allow_redirects=True </msg>
<msg level="INFO" timestamp="20171020 13:01:38.965">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:01:38.965" starttime="20171020 13:01:38.580"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:01:38.967">${msg} = Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171020 13:01:38.967" starttime="20171020 13:01:38.966"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:01:38.968">Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171020 13:01:38.968" starttime="20171020 13:01:38.967"></status>
</kw>
<status status="PASS" endtime="20171020 13:01:38.968" starttime="20171020 13:01:38.967"></status>
</kw>
<status status="PASS" endtime="20171020 13:01:38.968" starttime="20171020 13:01:38.966"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171020 13:01:38.968">Delete All Sessions</msg>
<status status="PASS" endtime="20171020 13:01:38.968" starttime="20171020 13:01:38.968"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:01:38.969">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:01:38.969" starttime="20171020 13:01:38.279"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:01:38.969">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:01:38.969" starttime="20171020 13:01:38.969"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${json}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:01:38.970">To JSON using : content={
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171020 13:01:38.970">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171020 13:01:38.970">${json} = {u'data': None, u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20171020 13:01:38.970" starttime="20171020 13:01:38.970"></status>
</kw>
<status status="PASS" endtime="20171020 13:01:38.970" starttime="20171020 13:01:38.277"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${wait}' == '${0}'</arg>
<arg>Return From Keyword</arg>
</arguments>
<status status="PASS" endtime="20171020 13:01:38.971" starttime="20171020 13:01:38.970"></status>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>10 min</arg>
<arg>10 sec</arg>
<arg>Is Host Running</arg>
</arguments>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:01:38.976">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171020 13:01:38.976" starttime="20171020 13:01:38.976"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:01:38.977">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171020 13:01:38.977" starttime="20171020 13:01:38.977"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:01:38.978">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171020 13:01:38.978" starttime="20171020 13:01:38.977"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:01:38.978">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171020 13:01:38.978" starttime="20171020 13:01:38.978"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:01:40.500">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171020 13:01:40.500" starttime="20171020 13:01:38.979"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:01:40.500">${status} = PASS</msg>
<msg level="INFO" timestamp="20171020 13:01:40.500">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:01:40.500" starttime="20171020 13:01:38.979"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:01:40.501">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:01:40.501" starttime="20171020 13:01:40.500"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:01:40.502">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:01:40.502" starttime="20171020 13:01:40.501"></status>
</kw>
<status status="PASS" endtime="20171020 13:01:40.502" starttime="20171020 13:01:38.975"></status>
</kw>
<status status="PASS" endtime="20171020 13:01:40.502" starttime="20171020 13:01:38.975"></status>
</kw>
<status status="PASS" endtime="20171020 13:01:40.502" starttime="20171020 13:01:38.974"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:01:40.503">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" endtime="20171020 13:01:40.503" starttime="20171020 13:01:40.502"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:01:40.507">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" endtime="20171020 13:01:40.507" starttime="20171020 13:01:40.504"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:01:40.508">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" endtime="20171020 13:01:40.508" starttime="20171020 13:01:40.507"></status>
</kw>
<status status="PASS" endtime="20171020 13:01:40.508" starttime="20171020 13:01:40.507"></status>
</kw>
<status status="PASS" endtime="20171020 13:01:40.508" starttime="20171020 13:01:40.503"></status>
</kw>
<status status="PASS" endtime="20171020 13:01:40.508" starttime="20171020 13:01:40.503"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="WARN" timestamp="20171020 13:01:50.521">Retrying (Retry(total=2, connect=None, read=None, redirect=None, status=None)) after connection broken by 'ReadTimeoutError("HTTPSConnectionPool(host='9.3.86.161', port=443): Read timed out. (read timeout=10.0)",)': /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<msg level="INFO" timestamp="20171020 13:01:56.256">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20171020 13:01:56.256">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:01:56.256" starttime="20171020 13:01:40.508"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:01:56.258">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171020 13:01:56.259" starttime="20171020 13:01:56.258"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:01:56.259">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171020 13:01:56.260" starttime="20171020 13:01:56.259"></status>
</kw>
<status status="PASS" endtime="20171020 13:01:56.260" starttime="20171020 13:01:56.259"></status>
</kw>
<status status="PASS" endtime="20171020 13:01:56.260" starttime="20171020 13:01:56.257"></status>
</kw>
<status status="PASS" endtime="20171020 13:01:56.260" starttime="20171020 13:01:56.257"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171020 13:01:56.260">Delete All Sessions</msg>
<status status="PASS" endtime="20171020 13:01:56.260" starttime="20171020 13:01:56.260"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:01:56.260">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:01:56.261" starttime="20171020 13:01:38.973"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:01:56.261">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:01:56.261" starttime="20171020 13:01:56.261"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:01:56.262">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171020 13:01:56.262">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171020 13:01:56.262">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20171020 13:01:56.262" starttime="20171020 13:01:56.262"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:01:56.262">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status status="PASS" endtime="20171020 13:01:56.262" starttime="20171020 13:01:38.973"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:01:56.263">${power_state} = Off</msg>
<status status="PASS" endtime="20171020 13:01:56.263" starttime="20171020 13:01:38.972"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20171020 13:01:56.263">On != Off</msg>
<status status="FAIL" endtime="20171020 13:01:56.263" starttime="20171020 13:01:56.263"></status>
</kw>
<status status="FAIL" endtime="20171020 13:01:56.264" starttime="20171020 13:01:38.972"></status>
</kw>
<status status="FAIL" endtime="20171020 13:01:56.264" starttime="20171020 13:01:38.972"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:02:06.269">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171020 13:02:06.269" starttime="20171020 13:02:06.268"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:02:06.270">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171020 13:02:06.270" starttime="20171020 13:02:06.270"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:02:06.271">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171020 13:02:06.271" starttime="20171020 13:02:06.270"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:02:06.271">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171020 13:02:06.271" starttime="20171020 13:02:06.271"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:02:06.485">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171020 13:02:06.485" starttime="20171020 13:02:06.272"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:02:06.485">${status} = PASS</msg>
<msg level="INFO" timestamp="20171020 13:02:06.485">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:02:06.485" starttime="20171020 13:02:06.272"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:02:06.486">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:02:06.486" starttime="20171020 13:02:06.485"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:02:06.487">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:02:06.487" starttime="20171020 13:02:06.486"></status>
</kw>
<status status="PASS" endtime="20171020 13:02:06.487" starttime="20171020 13:02:06.268"></status>
</kw>
<status status="PASS" endtime="20171020 13:02:06.487" starttime="20171020 13:02:06.267"></status>
</kw>
<status status="PASS" endtime="20171020 13:02:06.487" starttime="20171020 13:02:06.267"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:02:06.488">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" endtime="20171020 13:02:06.488" starttime="20171020 13:02:06.487"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:02:06.490">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" endtime="20171020 13:02:06.490" starttime="20171020 13:02:06.489"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:02:06.491">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" endtime="20171020 13:02:06.491" starttime="20171020 13:02:06.490"></status>
</kw>
<status status="PASS" endtime="20171020 13:02:06.491" starttime="20171020 13:02:06.490"></status>
</kw>
<status status="PASS" endtime="20171020 13:02:06.491" starttime="20171020 13:02:06.488"></status>
</kw>
<status status="PASS" endtime="20171020 13:02:06.491" starttime="20171020 13:02:06.488"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:02:06.557">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20171020 13:02:06.557">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:02:06.557" starttime="20171020 13:02:06.491"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:02:06.559">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171020 13:02:06.559" starttime="20171020 13:02:06.558"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:02:06.560">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171020 13:02:06.560" starttime="20171020 13:02:06.560"></status>
</kw>
<status status="PASS" endtime="20171020 13:02:06.560" starttime="20171020 13:02:06.559"></status>
</kw>
<status status="PASS" endtime="20171020 13:02:06.560" starttime="20171020 13:02:06.558"></status>
</kw>
<status status="PASS" endtime="20171020 13:02:06.560" starttime="20171020 13:02:06.557"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171020 13:02:06.561">Delete All Sessions</msg>
<status status="PASS" endtime="20171020 13:02:06.561" starttime="20171020 13:02:06.560"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:02:06.561">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:02:06.561" starttime="20171020 13:02:06.266"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:02:06.562">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:02:06.562" starttime="20171020 13:02:06.561"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:02:06.562">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171020 13:02:06.562">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171020 13:02:06.562">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20171020 13:02:06.562" starttime="20171020 13:02:06.562"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:02:06.563">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status status="PASS" endtime="20171020 13:02:06.563" starttime="20171020 13:02:06.265"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:02:06.563">${power_state} = On</msg>
<status status="PASS" endtime="20171020 13:02:06.563" starttime="20171020 13:02:06.265"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status status="PASS" endtime="20171020 13:02:06.564" starttime="20171020 13:02:06.563"></status>
</kw>
<status status="PASS" endtime="20171020 13:02:06.564" starttime="20171020 13:02:06.265"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:02:06.568">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171020 13:02:06.568" starttime="20171020 13:02:06.568"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:02:06.569">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171020 13:02:06.569" starttime="20171020 13:02:06.569"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:02:06.569">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171020 13:02:06.570" starttime="20171020 13:02:06.569"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:02:06.570">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171020 13:02:06.570" starttime="20171020 13:02:06.570"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:02:06.792">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171020 13:02:06.792" starttime="20171020 13:02:06.571"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:02:06.792">${status} = PASS</msg>
<msg level="INFO" timestamp="20171020 13:02:06.792">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:02:06.792" starttime="20171020 13:02:06.570"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:02:06.793">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:02:06.793" starttime="20171020 13:02:06.792"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:02:06.793">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:02:06.794" starttime="20171020 13:02:06.793"></status>
</kw>
<status status="PASS" endtime="20171020 13:02:06.794" starttime="20171020 13:02:06.567"></status>
</kw>
<status status="PASS" endtime="20171020 13:02:06.794" starttime="20171020 13:02:06.567"></status>
</kw>
<status status="PASS" endtime="20171020 13:02:06.794" starttime="20171020 13:02:06.566"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:02:06.794">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" endtime="20171020 13:02:06.795" starttime="20171020 13:02:06.794"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:02:06.797">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" endtime="20171020 13:02:06.797" starttime="20171020 13:02:06.796"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:02:06.797">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" endtime="20171020 13:02:06.798" starttime="20171020 13:02:06.797"></status>
</kw>
<status status="PASS" endtime="20171020 13:02:06.798" starttime="20171020 13:02:06.797"></status>
</kw>
<status status="PASS" endtime="20171020 13:02:06.798" starttime="20171020 13:02:06.795"></status>
</kw>
<status status="PASS" endtime="20171020 13:02:06.798" starttime="20171020 13:02:06.795"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:02:06.893">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20171020 13:02:06.893">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:02:06.893" starttime="20171020 13:02:06.798"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:02:06.895">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171020 13:02:06.895" starttime="20171020 13:02:06.895"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:02:06.896">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171020 13:02:06.896" starttime="20171020 13:02:06.896"></status>
</kw>
<status status="PASS" endtime="20171020 13:02:06.896" starttime="20171020 13:02:06.895"></status>
</kw>
<status status="PASS" endtime="20171020 13:02:06.896" starttime="20171020 13:02:06.894"></status>
</kw>
<status status="PASS" endtime="20171020 13:02:06.896" starttime="20171020 13:02:06.893"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171020 13:02:06.897">Delete All Sessions</msg>
<status status="PASS" endtime="20171020 13:02:06.897" starttime="20171020 13:02:06.897"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:02:06.897">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:02:06.897" starttime="20171020 13:02:06.565"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:02:06.898">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:02:06.898" starttime="20171020 13:02:06.897"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:02:06.898">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171020 13:02:06.898">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171020 13:02:06.899">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20171020 13:02:06.899" starttime="20171020 13:02:06.898"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:02:06.899">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status status="PASS" endtime="20171020 13:02:06.899" starttime="20171020 13:02:06.565"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:02:06.899">${host_state} = Running</msg>
<status status="PASS" endtime="20171020 13:02:06.899" starttime="20171020 13:02:06.564"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status status="PASS" endtime="20171020 13:02:06.900" starttime="20171020 13:02:06.899"></status>
</kw>
<kw name="Is OS Booted" library="state_manager">
<doc>Check OS status.</doc>
<kw name="Get Host State Attribute" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>BootProgress</arg>
</arguments>
<assign>
<var>${boot_stage}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>${host_attribute}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:02:06.904">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171020 13:02:06.904" starttime="20171020 13:02:06.903"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:02:06.905">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171020 13:02:06.905" starttime="20171020 13:02:06.904"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:02:06.905">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171020 13:02:06.905" starttime="20171020 13:02:06.905"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:02:06.906">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171020 13:02:06.906" starttime="20171020 13:02:06.906"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:02:07.161">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171020 13:02:07.162" starttime="20171020 13:02:06.907"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:02:07.162">${status} = PASS</msg>
<msg level="INFO" timestamp="20171020 13:02:07.162">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:02:07.162" starttime="20171020 13:02:06.906"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:02:07.163">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:02:07.163" starttime="20171020 13:02:07.162"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:02:07.163">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:02:07.163" starttime="20171020 13:02:07.163"></status>
</kw>
<status status="PASS" endtime="20171020 13:02:07.163" starttime="20171020 13:02:06.903"></status>
</kw>
<status status="PASS" endtime="20171020 13:02:07.163" starttime="20171020 13:02:06.902"></status>
</kw>
<status status="PASS" endtime="20171020 13:02:07.164" starttime="20171020 13:02:06.902"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:02:07.164">${base_uri} = /xyz/openbmc_project/state/host0//attr/BootProgress</msg>
<status status="PASS" endtime="20171020 13:02:07.164" starttime="20171020 13:02:07.164"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:02:07.166">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status status="PASS" endtime="20171020 13:02:07.166" starttime="20171020 13:02:07.166"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:02:07.167">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status status="PASS" endtime="20171020 13:02:07.167" starttime="20171020 13:02:07.167"></status>
</kw>
<status status="PASS" endtime="20171020 13:02:07.168" starttime="20171020 13:02:07.167"></status>
</kw>
<status status="PASS" endtime="20171020 13:02:07.168" starttime="20171020 13:02:07.165"></status>
</kw>
<status status="PASS" endtime="20171020 13:02:07.168" starttime="20171020 13:02:07.165"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:02:07.256">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/BootProgress, headers=None json=None</msg>
<msg level="INFO" timestamp="20171020 13:02:07.256">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:02:07.256" starttime="20171020 13:02:07.168"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:02:07.258">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171020 13:02:07.258" starttime="20171020 13:02:07.257"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:02:07.259">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171020 13:02:07.259" starttime="20171020 13:02:07.258"></status>
</kw>
<status status="PASS" endtime="20171020 13:02:07.259" starttime="20171020 13:02:07.258"></status>
</kw>
<status status="PASS" endtime="20171020 13:02:07.259" starttime="20171020 13:02:07.257"></status>
</kw>
<status status="PASS" endtime="20171020 13:02:07.259" starttime="20171020 13:02:07.256"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171020 13:02:07.259">Delete All Sessions</msg>
<status status="PASS" endtime="20171020 13:02:07.259" starttime="20171020 13:02:07.259"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:02:07.260">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:02:07.260" starttime="20171020 13:02:06.901"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:02:07.260">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:02:07.260" starttime="20171020 13:02:07.260"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:02:07.261">To JSON using : content={
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171020 13:02:07.261">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171020 13:02:07.261">${content} = {u'data': u'xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20171020 13:02:07.261" starttime="20171020 13:02:07.261"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:02:07.261">${state} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified</msg>
<status status="PASS" endtime="20171020 13:02:07.262" starttime="20171020 13:02:06.901"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:02:07.262">${boot_stage} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified</msg>
<status status="PASS" endtime="20171020 13:02:07.262" starttime="20171020 13:02:06.900"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${OS_BOOT_START}</arg>
<arg>${boot_stage}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:02:07.262">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg level="FAIL" timestamp="20171020 13:02:07.262">xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart != xyz.openbmc_project.State.Boot.Progress.ProgressStages.Unspecified</msg>
<status status="FAIL" endtime="20171020 13:02:07.263" starttime="20171020 13:02:07.262"></status>
</kw>
<status status="FAIL" endtime="20171020 13:02:07.263" starttime="20171020 13:02:06.900"></status>
</kw>
<status status="FAIL" endtime="20171020 13:02:07.263" starttime="20171020 13:02:06.264"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:02:17.268">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171020 13:02:17.269" starttime="20171020 13:02:17.268"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:02:17.269">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171020 13:02:17.269" starttime="20171020 13:02:17.269"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:02:17.270">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171020 13:02:17.270" starttime="20171020 13:02:17.269"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:02:17.270">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171020 13:02:17.270" starttime="20171020 13:02:17.270"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:02:17.542">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171020 13:02:17.542" starttime="20171020 13:02:17.271"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:02:17.542">${status} = PASS</msg>
<msg level="INFO" timestamp="20171020 13:02:17.542">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:02:17.542" starttime="20171020 13:02:17.271"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:02:17.543">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:02:17.543" starttime="20171020 13:02:17.543"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:02:17.544">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:02:17.544" starttime="20171020 13:02:17.543"></status>
</kw>
<status status="PASS" endtime="20171020 13:02:17.544" starttime="20171020 13:02:17.267"></status>
</kw>
<status status="PASS" endtime="20171020 13:02:17.544" starttime="20171020 13:02:17.266"></status>
</kw>
<status status="PASS" endtime="20171020 13:02:17.544" starttime="20171020 13:02:17.266"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:02:17.545">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" endtime="20171020 13:02:17.545" starttime="20171020 13:02:17.544"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:02:17.547">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" endtime="20171020 13:02:17.547" starttime="20171020 13:02:17.546"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:02:17.548">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" endtime="20171020 13:02:17.548" starttime="20171020 13:02:17.548"></status>
</kw>
<status status="PASS" endtime="20171020 13:02:17.548" starttime="20171020 13:02:17.547"></status>
</kw>
<status status="PASS" endtime="20171020 13:02:17.548" starttime="20171020 13:02:17.546"></status>
</kw>
<status status="PASS" endtime="20171020 13:02:17.548" starttime="20171020 13:02:17.545"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:02:17.636">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20171020 13:02:17.636">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:02:17.636" starttime="20171020 13:02:17.549"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:02:17.638">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171020 13:02:17.638" starttime="20171020 13:02:17.638"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:02:17.639">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171020 13:02:17.640" starttime="20171020 13:02:17.639"></status>
</kw>
<status status="PASS" endtime="20171020 13:02:17.640" starttime="20171020 13:02:17.638"></status>
</kw>
<status status="PASS" endtime="20171020 13:02:17.640" starttime="20171020 13:02:17.637"></status>
</kw>
<status status="PASS" endtime="20171020 13:02:17.640" starttime="20171020 13:02:17.637"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171020 13:02:17.641">Delete All Sessions</msg>
<status status="PASS" endtime="20171020 13:02:17.641" starttime="20171020 13:02:17.641"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:02:17.641">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:02:17.641" starttime="20171020 13:02:17.265"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:02:17.642">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:02:17.642" starttime="20171020 13:02:17.642"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:02:17.643">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171020 13:02:17.643">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171020 13:02:17.643">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20171020 13:02:17.643" starttime="20171020 13:02:17.643"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:02:17.644">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status status="PASS" endtime="20171020 13:02:17.644" starttime="20171020 13:02:17.265"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:02:17.644">${power_state} = On</msg>
<status status="PASS" endtime="20171020 13:02:17.644" starttime="20171020 13:02:17.264"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status status="PASS" endtime="20171020 13:02:17.645" starttime="20171020 13:02:17.645"></status>
</kw>
<status status="PASS" endtime="20171020 13:02:17.645" starttime="20171020 13:02:17.264"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:02:17.650">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171020 13:02:17.651" starttime="20171020 13:02:17.650"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:02:17.652">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171020 13:02:17.652" starttime="20171020 13:02:17.651"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:02:17.653">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171020 13:02:17.653" starttime="20171020 13:02:17.652"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:02:17.653">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171020 13:02:17.653" starttime="20171020 13:02:17.653"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:02:17.879">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171020 13:02:17.879" starttime="20171020 13:02:17.654"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:02:17.879">${status} = PASS</msg>
<msg level="INFO" timestamp="20171020 13:02:17.879">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:02:17.879" starttime="20171020 13:02:17.654"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:02:17.880">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:02:17.880" starttime="20171020 13:02:17.879"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:02:17.880">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:02:17.880" starttime="20171020 13:02:17.880"></status>
</kw>
<status status="PASS" endtime="20171020 13:02:17.881" starttime="20171020 13:02:17.649"></status>
</kw>
<status status="PASS" endtime="20171020 13:02:17.881" starttime="20171020 13:02:17.649"></status>
</kw>
<status status="PASS" endtime="20171020 13:02:17.881" starttime="20171020 13:02:17.648"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:02:17.881">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" endtime="20171020 13:02:17.881" starttime="20171020 13:02:17.881"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:02:17.884">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" endtime="20171020 13:02:17.884" starttime="20171020 13:02:17.883"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:02:17.885">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" endtime="20171020 13:02:17.885" starttime="20171020 13:02:17.885"></status>
</kw>
<status status="PASS" endtime="20171020 13:02:17.885" starttime="20171020 13:02:17.884"></status>
</kw>
<status status="PASS" endtime="20171020 13:02:17.885" starttime="20171020 13:02:17.882"></status>
</kw>
<status status="PASS" endtime="20171020 13:02:17.885" starttime="20171020 13:02:17.882"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:02:18.021">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20171020 13:02:18.021">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:02:18.021" starttime="20171020 13:02:17.886"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:02:18.023">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171020 13:02:18.023" starttime="20171020 13:02:18.023"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:02:18.024">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171020 13:02:18.024" starttime="20171020 13:02:18.024"></status>
</kw>
<status status="PASS" endtime="20171020 13:02:18.024" starttime="20171020 13:02:18.023"></status>
</kw>
<status status="PASS" endtime="20171020 13:02:18.024" starttime="20171020 13:02:18.022"></status>
</kw>
<status status="PASS" endtime="20171020 13:02:18.024" starttime="20171020 13:02:18.022"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171020 13:02:18.025">Delete All Sessions</msg>
<status status="PASS" endtime="20171020 13:02:18.025" starttime="20171020 13:02:18.025"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:02:18.025">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:02:18.025" starttime="20171020 13:02:17.647"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:02:18.026">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:02:18.026" starttime="20171020 13:02:18.026"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:02:18.027">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171020 13:02:18.027">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171020 13:02:18.027">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20171020 13:02:18.027" starttime="20171020 13:02:18.026"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:02:18.027">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status status="PASS" endtime="20171020 13:02:18.027" starttime="20171020 13:02:17.646"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:02:18.027">${host_state} = Running</msg>
<status status="PASS" endtime="20171020 13:02:18.027" starttime="20171020 13:02:17.645"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status status="PASS" endtime="20171020 13:02:18.028" starttime="20171020 13:02:18.028"></status>
</kw>
<kw name="Is OS Booted" library="state_manager">
<doc>Check OS status.</doc>
<kw name="Get Host State Attribute" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>BootProgress</arg>
</arguments>
<assign>
<var>${boot_stage}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>${host_attribute}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:02:18.032">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171020 13:02:18.032" starttime="20171020 13:02:18.031"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:02:18.033">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171020 13:02:18.033" starttime="20171020 13:02:18.032"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:02:18.033">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171020 13:02:18.033" starttime="20171020 13:02:18.033"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:02:18.034">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171020 13:02:18.034" starttime="20171020 13:02:18.034"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:02:18.436">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171020 13:02:18.436" starttime="20171020 13:02:18.035"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:02:18.436">${status} = PASS</msg>
<msg level="INFO" timestamp="20171020 13:02:18.436">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:02:18.436" starttime="20171020 13:02:18.034"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:02:18.437">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:02:18.437" starttime="20171020 13:02:18.437"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:02:18.438">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:02:18.438" starttime="20171020 13:02:18.437"></status>
</kw>
<status status="PASS" endtime="20171020 13:02:18.438" starttime="20171020 13:02:18.031"></status>
</kw>
<status status="PASS" endtime="20171020 13:02:18.438" starttime="20171020 13:02:18.031"></status>
</kw>
<status status="PASS" endtime="20171020 13:02:18.438" starttime="20171020 13:02:18.030"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:02:18.439">${base_uri} = /xyz/openbmc_project/state/host0//attr/BootProgress</msg>
<status status="PASS" endtime="20171020 13:02:18.439" starttime="20171020 13:02:18.438"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:02:18.441">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status status="PASS" endtime="20171020 13:02:18.441" starttime="20171020 13:02:18.440"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:02:18.442">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status status="PASS" endtime="20171020 13:02:18.443" starttime="20171020 13:02:18.442"></status>
</kw>
<status status="PASS" endtime="20171020 13:02:18.443" starttime="20171020 13:02:18.441"></status>
</kw>
<status status="PASS" endtime="20171020 13:02:18.443" starttime="20171020 13:02:18.439"></status>
</kw>
<status status="PASS" endtime="20171020 13:02:18.443" starttime="20171020 13:02:18.439"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:02:18.611">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/BootProgress, headers=None json=None</msg>
<msg level="INFO" timestamp="20171020 13:02:18.612">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:02:18.612" starttime="20171020 13:02:18.443"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:02:18.613">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171020 13:02:18.613" starttime="20171020 13:02:18.613"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:02:18.614">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171020 13:02:18.614" starttime="20171020 13:02:18.614"></status>
</kw>
<status status="PASS" endtime="20171020 13:02:18.615" starttime="20171020 13:02:18.614"></status>
</kw>
<status status="PASS" endtime="20171020 13:02:18.615" starttime="20171020 13:02:18.612"></status>
</kw>
<status status="PASS" endtime="20171020 13:02:18.615" starttime="20171020 13:02:18.612"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171020 13:02:18.615">Delete All Sessions</msg>
<status status="PASS" endtime="20171020 13:02:18.615" starttime="20171020 13:02:18.615"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:02:18.615">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:02:18.615" starttime="20171020 13:02:18.029"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:02:18.616">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:02:18.616" starttime="20171020 13:02:18.616"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:02:18.617">To JSON using : content={
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171020 13:02:18.617">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171020 13:02:18.617">${content} = {u'data': u'xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20171020 13:02:18.617" starttime="20171020 13:02:18.617"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:02:18.617">${state} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status status="PASS" endtime="20171020 13:02:18.617" starttime="20171020 13:02:18.029"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:02:18.618">${boot_stage} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status status="PASS" endtime="20171020 13:02:18.618" starttime="20171020 13:02:18.028"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${OS_BOOT_START}</arg>
<arg>${boot_stage}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:02:18.618">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg level="FAIL" timestamp="20171020 13:02:18.618">xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart != xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status status="FAIL" endtime="20171020 13:02:18.618" starttime="20171020 13:02:18.618"></status>
</kw>
<status status="FAIL" endtime="20171020 13:02:18.619" starttime="20171020 13:02:18.028"></status>
</kw>
<status status="FAIL" endtime="20171020 13:02:18.619" starttime="20171020 13:02:17.263"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:02:28.624">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171020 13:02:28.625" starttime="20171020 13:02:28.624"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:02:28.625">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171020 13:02:28.625" starttime="20171020 13:02:28.625"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:02:28.626">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171020 13:02:28.626" starttime="20171020 13:02:28.625"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:02:28.626">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171020 13:02:28.626" starttime="20171020 13:02:28.626"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:02:28.809">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171020 13:02:28.810" starttime="20171020 13:02:28.627"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:02:28.810">${status} = PASS</msg>
<msg level="INFO" timestamp="20171020 13:02:28.810">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:02:28.810" starttime="20171020 13:02:28.627"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:02:28.810">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:02:28.810" starttime="20171020 13:02:28.810"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:02:28.811">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:02:28.811" starttime="20171020 13:02:28.811"></status>
</kw>
<status status="PASS" endtime="20171020 13:02:28.811" starttime="20171020 13:02:28.623"></status>
</kw>
<status status="PASS" endtime="20171020 13:02:28.811" starttime="20171020 13:02:28.623"></status>
</kw>
<status status="PASS" endtime="20171020 13:02:28.812" starttime="20171020 13:02:28.622"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:02:28.812">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" endtime="20171020 13:02:28.812" starttime="20171020 13:02:28.812"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:02:28.814">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" endtime="20171020 13:02:28.814" starttime="20171020 13:02:28.814"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:02:28.815">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" endtime="20171020 13:02:28.815" starttime="20171020 13:02:28.815"></status>
</kw>
<status status="PASS" endtime="20171020 13:02:28.815" starttime="20171020 13:02:28.814"></status>
</kw>
<status status="PASS" endtime="20171020 13:02:28.816" starttime="20171020 13:02:28.813"></status>
</kw>
<status status="PASS" endtime="20171020 13:02:28.816" starttime="20171020 13:02:28.812"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:02:28.877">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20171020 13:02:28.877">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:02:28.877" starttime="20171020 13:02:28.816"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:02:28.879">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171020 13:02:28.879" starttime="20171020 13:02:28.879"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:02:28.880">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171020 13:02:28.880" starttime="20171020 13:02:28.880"></status>
</kw>
<status status="PASS" endtime="20171020 13:02:28.880" starttime="20171020 13:02:28.879"></status>
</kw>
<status status="PASS" endtime="20171020 13:02:28.881" starttime="20171020 13:02:28.878"></status>
</kw>
<status status="PASS" endtime="20171020 13:02:28.881" starttime="20171020 13:02:28.877"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171020 13:02:28.881">Delete All Sessions</msg>
<status status="PASS" endtime="20171020 13:02:28.881" starttime="20171020 13:02:28.881"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:02:28.881">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:02:28.881" starttime="20171020 13:02:28.621"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:02:28.882">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:02:28.882" starttime="20171020 13:02:28.882"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:02:28.883">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171020 13:02:28.883">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171020 13:02:28.883">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20171020 13:02:28.883" starttime="20171020 13:02:28.882"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:02:28.883">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status status="PASS" endtime="20171020 13:02:28.883" starttime="20171020 13:02:28.620"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:02:28.883">${power_state} = On</msg>
<status status="PASS" endtime="20171020 13:02:28.883" starttime="20171020 13:02:28.620"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status status="PASS" endtime="20171020 13:02:28.884" starttime="20171020 13:02:28.884"></status>
</kw>
<status status="PASS" endtime="20171020 13:02:28.884" starttime="20171020 13:02:28.620"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:02:28.888">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171020 13:02:28.888" starttime="20171020 13:02:28.887"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:02:28.889">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171020 13:02:28.889" starttime="20171020 13:02:28.888"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:02:28.889">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171020 13:02:28.889" starttime="20171020 13:02:28.889"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:02:28.890">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171020 13:02:28.890" starttime="20171020 13:02:28.890"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:02:29.107">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171020 13:02:29.107" starttime="20171020 13:02:28.891"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:02:29.107">${status} = PASS</msg>
<msg level="INFO" timestamp="20171020 13:02:29.108">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:02:29.108" starttime="20171020 13:02:28.890"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:02:29.108">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:02:29.108" starttime="20171020 13:02:29.108"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:02:29.109">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:02:29.109" starttime="20171020 13:02:29.109"></status>
</kw>
<status status="PASS" endtime="20171020 13:02:29.109" starttime="20171020 13:02:28.887"></status>
</kw>
<status status="PASS" endtime="20171020 13:02:29.109" starttime="20171020 13:02:28.886"></status>
</kw>
<status status="PASS" endtime="20171020 13:02:29.109" starttime="20171020 13:02:28.886"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:02:29.110">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" endtime="20171020 13:02:29.110" starttime="20171020 13:02:29.110"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:02:29.113">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" endtime="20171020 13:02:29.113" starttime="20171020 13:02:29.111"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:02:29.113">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" endtime="20171020 13:02:29.114" starttime="20171020 13:02:29.113"></status>
</kw>
<status status="PASS" endtime="20171020 13:02:29.114" starttime="20171020 13:02:29.113"></status>
</kw>
<status status="PASS" endtime="20171020 13:02:29.114" starttime="20171020 13:02:29.111"></status>
</kw>
<status status="PASS" endtime="20171020 13:02:29.114" starttime="20171020 13:02:29.110"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:02:29.240">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20171020 13:02:29.241">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:02:29.241" starttime="20171020 13:02:29.114"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:02:29.243">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171020 13:02:29.243" starttime="20171020 13:02:29.242"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:02:29.244">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171020 13:02:29.244" starttime="20171020 13:02:29.243"></status>
</kw>
<status status="PASS" endtime="20171020 13:02:29.244" starttime="20171020 13:02:29.243"></status>
</kw>
<status status="PASS" endtime="20171020 13:02:29.244" starttime="20171020 13:02:29.241"></status>
</kw>
<status status="PASS" endtime="20171020 13:02:29.244" starttime="20171020 13:02:29.241"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171020 13:02:29.244">Delete All Sessions</msg>
<status status="PASS" endtime="20171020 13:02:29.244" starttime="20171020 13:02:29.244"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:02:29.245">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:02:29.245" starttime="20171020 13:02:28.885"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:02:29.245">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:02:29.245" starttime="20171020 13:02:29.245"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:02:29.246">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171020 13:02:29.246">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171020 13:02:29.246">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20171020 13:02:29.246" starttime="20171020 13:02:29.246"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:02:29.246">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status status="PASS" endtime="20171020 13:02:29.246" starttime="20171020 13:02:28.885"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:02:29.247">${host_state} = Running</msg>
<status status="PASS" endtime="20171020 13:02:29.247" starttime="20171020 13:02:28.884"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status status="PASS" endtime="20171020 13:02:29.247" starttime="20171020 13:02:29.247"></status>
</kw>
<kw name="Is OS Booted" library="state_manager">
<doc>Check OS status.</doc>
<kw name="Get Host State Attribute" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>BootProgress</arg>
</arguments>
<assign>
<var>${boot_stage}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>${host_attribute}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:02:29.251">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171020 13:02:29.252" starttime="20171020 13:02:29.251"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:02:29.252">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171020 13:02:29.252" starttime="20171020 13:02:29.252"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:02:29.253">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171020 13:02:29.253" starttime="20171020 13:02:29.253"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:02:29.257">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171020 13:02:29.257" starttime="20171020 13:02:29.253"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:02:29.563">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171020 13:02:29.563" starttime="20171020 13:02:29.258"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:02:29.563">${status} = PASS</msg>
<msg level="INFO" timestamp="20171020 13:02:29.563">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:02:29.563" starttime="20171020 13:02:29.257"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:02:29.564">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:02:29.564" starttime="20171020 13:02:29.563"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:02:29.564">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:02:29.565" starttime="20171020 13:02:29.564"></status>
</kw>
<status status="PASS" endtime="20171020 13:02:29.565" starttime="20171020 13:02:29.250"></status>
</kw>
<status status="PASS" endtime="20171020 13:02:29.565" starttime="20171020 13:02:29.250"></status>
</kw>
<status status="PASS" endtime="20171020 13:02:29.565" starttime="20171020 13:02:29.249"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:02:29.565">${base_uri} = /xyz/openbmc_project/state/host0//attr/BootProgress</msg>
<status status="PASS" endtime="20171020 13:02:29.565" starttime="20171020 13:02:29.565"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:02:29.568">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status status="PASS" endtime="20171020 13:02:29.568" starttime="20171020 13:02:29.567"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:02:29.569">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status status="PASS" endtime="20171020 13:02:29.569" starttime="20171020 13:02:29.569"></status>
</kw>
<status status="PASS" endtime="20171020 13:02:29.569" starttime="20171020 13:02:29.568"></status>
</kw>
<status status="PASS" endtime="20171020 13:02:29.569" starttime="20171020 13:02:29.566"></status>
</kw>
<status status="PASS" endtime="20171020 13:02:29.569" starttime="20171020 13:02:29.566"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:02:29.699">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/BootProgress, headers=None json=None</msg>
<msg level="INFO" timestamp="20171020 13:02:29.699">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:02:29.699" starttime="20171020 13:02:29.570"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:02:29.701">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171020 13:02:29.701" starttime="20171020 13:02:29.700"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:02:29.702">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171020 13:02:29.702" starttime="20171020 13:02:29.701"></status>
</kw>
<status status="PASS" endtime="20171020 13:02:29.702" starttime="20171020 13:02:29.701"></status>
</kw>
<status status="PASS" endtime="20171020 13:02:29.702" starttime="20171020 13:02:29.700"></status>
</kw>
<status status="PASS" endtime="20171020 13:02:29.702" starttime="20171020 13:02:29.699"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171020 13:02:29.703">Delete All Sessions</msg>
<status status="PASS" endtime="20171020 13:02:29.703" starttime="20171020 13:02:29.702"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:02:29.703">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:02:29.703" starttime="20171020 13:02:29.249"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:02:29.703">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:02:29.704" starttime="20171020 13:02:29.703"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:02:29.704">To JSON using : content={
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171020 13:02:29.704">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171020 13:02:29.704">${content} = {u'data': u'xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20171020 13:02:29.704" starttime="20171020 13:02:29.704"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:02:29.705">${state} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status status="PASS" endtime="20171020 13:02:29.705" starttime="20171020 13:02:29.248"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:02:29.705">${boot_stage} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status status="PASS" endtime="20171020 13:02:29.705" starttime="20171020 13:02:29.248"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${OS_BOOT_START}</arg>
<arg>${boot_stage}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:02:29.705">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg level="FAIL" timestamp="20171020 13:02:29.706">xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart != xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status status="FAIL" endtime="20171020 13:02:29.706" starttime="20171020 13:02:29.705"></status>
</kw>
<status status="FAIL" endtime="20171020 13:02:29.706" starttime="20171020 13:02:29.247"></status>
</kw>
<status status="FAIL" endtime="20171020 13:02:29.706" starttime="20171020 13:02:28.619"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:02:39.712">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171020 13:02:39.712" starttime="20171020 13:02:39.711"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:02:39.713">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171020 13:02:39.713" starttime="20171020 13:02:39.712"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:02:39.713">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171020 13:02:39.713" starttime="20171020 13:02:39.713"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:02:39.714">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171020 13:02:39.714" starttime="20171020 13:02:39.714"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:02:39.892">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171020 13:02:39.892" starttime="20171020 13:02:39.715"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:02:39.892">${status} = PASS</msg>
<msg level="INFO" timestamp="20171020 13:02:39.892">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:02:39.892" starttime="20171020 13:02:39.714"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:02:39.893">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:02:39.893" starttime="20171020 13:02:39.893"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:02:39.894">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:02:39.894" starttime="20171020 13:02:39.893"></status>
</kw>
<status status="PASS" endtime="20171020 13:02:39.894" starttime="20171020 13:02:39.711"></status>
</kw>
<status status="PASS" endtime="20171020 13:02:39.894" starttime="20171020 13:02:39.710"></status>
</kw>
<status status="PASS" endtime="20171020 13:02:39.894" starttime="20171020 13:02:39.710"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:02:39.895">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" endtime="20171020 13:02:39.895" starttime="20171020 13:02:39.894"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:02:39.897">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" endtime="20171020 13:02:39.897" starttime="20171020 13:02:39.896"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:02:39.898">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" endtime="20171020 13:02:39.898" starttime="20171020 13:02:39.897"></status>
</kw>
<status status="PASS" endtime="20171020 13:02:39.898" starttime="20171020 13:02:39.897"></status>
</kw>
<status status="PASS" endtime="20171020 13:02:39.898" starttime="20171020 13:02:39.895"></status>
</kw>
<status status="PASS" endtime="20171020 13:02:39.898" starttime="20171020 13:02:39.895"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:02:39.959">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20171020 13:02:39.959">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:02:39.959" starttime="20171020 13:02:39.898"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:02:39.961">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171020 13:02:39.962" starttime="20171020 13:02:39.961"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:02:39.962">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171020 13:02:39.963" starttime="20171020 13:02:39.962"></status>
</kw>
<status status="PASS" endtime="20171020 13:02:39.963" starttime="20171020 13:02:39.962"></status>
</kw>
<status status="PASS" endtime="20171020 13:02:39.963" starttime="20171020 13:02:39.960"></status>
</kw>
<status status="PASS" endtime="20171020 13:02:39.963" starttime="20171020 13:02:39.960"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171020 13:02:39.963">Delete All Sessions</msg>
<status status="PASS" endtime="20171020 13:02:39.963" starttime="20171020 13:02:39.963"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:02:39.964">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:02:39.964" starttime="20171020 13:02:39.709"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:02:39.964">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:02:39.964" starttime="20171020 13:02:39.964"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:02:39.965">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171020 13:02:39.965">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171020 13:02:39.965">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20171020 13:02:39.965" starttime="20171020 13:02:39.965"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:02:39.965">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status status="PASS" endtime="20171020 13:02:39.965" starttime="20171020 13:02:39.708"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:02:39.966">${power_state} = On</msg>
<status status="PASS" endtime="20171020 13:02:39.966" starttime="20171020 13:02:39.708"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status status="PASS" endtime="20171020 13:02:39.966" starttime="20171020 13:02:39.966"></status>
</kw>
<status status="PASS" endtime="20171020 13:02:39.966" starttime="20171020 13:02:39.707"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:02:39.970">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171020 13:02:39.970" starttime="20171020 13:02:39.970"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:02:39.971">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171020 13:02:39.971" starttime="20171020 13:02:39.971"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:02:39.971">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171020 13:02:39.972" starttime="20171020 13:02:39.971"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:02:39.972">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171020 13:02:39.972" starttime="20171020 13:02:39.972"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:02:40.148">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171020 13:02:40.148" starttime="20171020 13:02:39.973"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:02:40.148">${status} = PASS</msg>
<msg level="INFO" timestamp="20171020 13:02:40.148">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:02:40.148" starttime="20171020 13:02:39.973"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:02:40.149">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:02:40.149" starttime="20171020 13:02:40.149"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:02:40.150">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:02:40.150" starttime="20171020 13:02:40.149"></status>
</kw>
<status status="PASS" endtime="20171020 13:02:40.150" starttime="20171020 13:02:39.969"></status>
</kw>
<status status="PASS" endtime="20171020 13:02:40.150" starttime="20171020 13:02:39.969"></status>
</kw>
<status status="PASS" endtime="20171020 13:02:40.150" starttime="20171020 13:02:39.968"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:02:40.151">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" endtime="20171020 13:02:40.151" starttime="20171020 13:02:40.150"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:02:40.153">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" endtime="20171020 13:02:40.153" starttime="20171020 13:02:40.152"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:02:40.154">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" endtime="20171020 13:02:40.154" starttime="20171020 13:02:40.154"></status>
</kw>
<status status="PASS" endtime="20171020 13:02:40.155" starttime="20171020 13:02:40.154"></status>
</kw>
<status status="PASS" endtime="20171020 13:02:40.155" starttime="20171020 13:02:40.152"></status>
</kw>
<status status="PASS" endtime="20171020 13:02:40.155" starttime="20171020 13:02:40.151"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:02:40.304">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20171020 13:02:40.304">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:02:40.304" starttime="20171020 13:02:40.155"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:02:40.306">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171020 13:02:40.306" starttime="20171020 13:02:40.306"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:02:40.307">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171020 13:02:40.307" starttime="20171020 13:02:40.307"></status>
</kw>
<status status="PASS" endtime="20171020 13:02:40.307" starttime="20171020 13:02:40.306"></status>
</kw>
<status status="PASS" endtime="20171020 13:02:40.308" starttime="20171020 13:02:40.305"></status>
</kw>
<status status="PASS" endtime="20171020 13:02:40.308" starttime="20171020 13:02:40.305"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171020 13:02:40.308">Delete All Sessions</msg>
<status status="PASS" endtime="20171020 13:02:40.308" starttime="20171020 13:02:40.308"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:02:40.308">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:02:40.308" starttime="20171020 13:02:39.967"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:02:40.309">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:02:40.309" starttime="20171020 13:02:40.309"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:02:40.310">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171020 13:02:40.310">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171020 13:02:40.310">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20171020 13:02:40.310" starttime="20171020 13:02:40.309"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:02:40.310">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status status="PASS" endtime="20171020 13:02:40.310" starttime="20171020 13:02:39.967"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:02:40.310">${host_state} = Running</msg>
<status status="PASS" endtime="20171020 13:02:40.310" starttime="20171020 13:02:39.967"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status status="PASS" endtime="20171020 13:02:40.311" starttime="20171020 13:02:40.311"></status>
</kw>
<kw name="Is OS Booted" library="state_manager">
<doc>Check OS status.</doc>
<kw name="Get Host State Attribute" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>BootProgress</arg>
</arguments>
<assign>
<var>${boot_stage}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>${host_attribute}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:02:40.316">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171020 13:02:40.316" starttime="20171020 13:02:40.316"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:02:40.317">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171020 13:02:40.317" starttime="20171020 13:02:40.317"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:02:40.318">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171020 13:02:40.318" starttime="20171020 13:02:40.317"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:02:40.318">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171020 13:02:40.318" starttime="20171020 13:02:40.318"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:02:40.745">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171020 13:02:40.745" starttime="20171020 13:02:40.320"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:02:40.745">${status} = PASS</msg>
<msg level="INFO" timestamp="20171020 13:02:40.745">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:02:40.745" starttime="20171020 13:02:40.320"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:02:40.746">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:02:40.746" starttime="20171020 13:02:40.746"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:02:40.747">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:02:40.747" starttime="20171020 13:02:40.746"></status>
</kw>
<status status="PASS" endtime="20171020 13:02:40.747" starttime="20171020 13:02:40.315"></status>
</kw>
<status status="PASS" endtime="20171020 13:02:40.747" starttime="20171020 13:02:40.315"></status>
</kw>
<status status="PASS" endtime="20171020 13:02:40.747" starttime="20171020 13:02:40.313"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:02:40.748">${base_uri} = /xyz/openbmc_project/state/host0//attr/BootProgress</msg>
<status status="PASS" endtime="20171020 13:02:40.748" starttime="20171020 13:02:40.747"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:02:40.750">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status status="PASS" endtime="20171020 13:02:40.750" starttime="20171020 13:02:40.749"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:02:40.751">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status status="PASS" endtime="20171020 13:02:40.751" starttime="20171020 13:02:40.750"></status>
</kw>
<status status="PASS" endtime="20171020 13:02:40.751" starttime="20171020 13:02:40.750"></status>
</kw>
<status status="PASS" endtime="20171020 13:02:40.751" starttime="20171020 13:02:40.748"></status>
</kw>
<status status="PASS" endtime="20171020 13:02:40.751" starttime="20171020 13:02:40.748"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:02:40.839">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/BootProgress, headers=None json=None</msg>
<msg level="INFO" timestamp="20171020 13:02:40.839">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:02:40.839" starttime="20171020 13:02:40.751"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:02:40.841">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171020 13:02:40.841" starttime="20171020 13:02:40.840"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:02:40.842">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171020 13:02:40.842" starttime="20171020 13:02:40.842"></status>
</kw>
<status status="PASS" endtime="20171020 13:02:40.842" starttime="20171020 13:02:40.841"></status>
</kw>
<status status="PASS" endtime="20171020 13:02:40.842" starttime="20171020 13:02:40.840"></status>
</kw>
<status status="PASS" endtime="20171020 13:02:40.842" starttime="20171020 13:02:40.839"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171020 13:02:40.843">Delete All Sessions</msg>
<status status="PASS" endtime="20171020 13:02:40.843" starttime="20171020 13:02:40.843"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:02:40.843">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:02:40.843" starttime="20171020 13:02:40.312"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:02:40.844">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:02:40.844" starttime="20171020 13:02:40.843"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:02:40.844">To JSON using : content={
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171020 13:02:40.844">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171020 13:02:40.845">${content} = {u'data': u'xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20171020 13:02:40.845" starttime="20171020 13:02:40.844"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:02:40.845">${state} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status status="PASS" endtime="20171020 13:02:40.845" starttime="20171020 13:02:40.312"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:02:40.845">${boot_stage} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status status="PASS" endtime="20171020 13:02:40.845" starttime="20171020 13:02:40.311"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${OS_BOOT_START}</arg>
<arg>${boot_stage}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:02:40.846">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg level="FAIL" timestamp="20171020 13:02:40.846">xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart != xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status status="FAIL" endtime="20171020 13:02:40.846" starttime="20171020 13:02:40.845"></status>
</kw>
<status status="FAIL" endtime="20171020 13:02:40.846" starttime="20171020 13:02:40.311"></status>
</kw>
<status status="FAIL" endtime="20171020 13:02:40.846" starttime="20171020 13:02:39.707"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:02:50.851">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171020 13:02:50.852" starttime="20171020 13:02:50.851"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:02:50.853">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171020 13:02:50.853" starttime="20171020 13:02:50.852"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:02:50.853">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171020 13:02:50.853" starttime="20171020 13:02:50.853"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:02:50.854">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171020 13:02:50.854" starttime="20171020 13:02:50.853"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:02:51.112">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171020 13:02:51.112" starttime="20171020 13:02:50.855"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:02:51.112">${status} = PASS</msg>
<msg level="INFO" timestamp="20171020 13:02:51.112">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:02:51.112" starttime="20171020 13:02:50.854"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:02:51.113">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:02:51.113" starttime="20171020 13:02:51.112"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:02:51.113">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:02:51.114" starttime="20171020 13:02:51.113"></status>
</kw>
<status status="PASS" endtime="20171020 13:02:51.114" starttime="20171020 13:02:50.851"></status>
</kw>
<status status="PASS" endtime="20171020 13:02:51.114" starttime="20171020 13:02:50.850"></status>
</kw>
<status status="PASS" endtime="20171020 13:02:51.114" starttime="20171020 13:02:50.849"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:02:51.114">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" endtime="20171020 13:02:51.115" starttime="20171020 13:02:51.114"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:02:51.117">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" endtime="20171020 13:02:51.117" starttime="20171020 13:02:51.116"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:02:51.118">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" endtime="20171020 13:02:51.118" starttime="20171020 13:02:51.117"></status>
</kw>
<status status="PASS" endtime="20171020 13:02:51.118" starttime="20171020 13:02:51.117"></status>
</kw>
<status status="PASS" endtime="20171020 13:02:51.118" starttime="20171020 13:02:51.115"></status>
</kw>
<status status="PASS" endtime="20171020 13:02:51.118" starttime="20171020 13:02:51.115"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:02:51.188">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20171020 13:02:51.188">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:02:51.188" starttime="20171020 13:02:51.118"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:02:51.190">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171020 13:02:51.190" starttime="20171020 13:02:51.190"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:02:51.191">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171020 13:02:51.191" starttime="20171020 13:02:51.191"></status>
</kw>
<status status="PASS" endtime="20171020 13:02:51.192" starttime="20171020 13:02:51.191"></status>
</kw>
<status status="PASS" endtime="20171020 13:02:51.192" starttime="20171020 13:02:51.189"></status>
</kw>
<status status="PASS" endtime="20171020 13:02:51.192" starttime="20171020 13:02:51.189"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171020 13:02:51.192">Delete All Sessions</msg>
<status status="PASS" endtime="20171020 13:02:51.192" starttime="20171020 13:02:51.192"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:02:51.193">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:02:51.193" starttime="20171020 13:02:50.848"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:02:51.193">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:02:51.193" starttime="20171020 13:02:51.193"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:02:51.194">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171020 13:02:51.194">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171020 13:02:51.194">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20171020 13:02:51.194" starttime="20171020 13:02:51.193"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:02:51.194">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status status="PASS" endtime="20171020 13:02:51.194" starttime="20171020 13:02:50.848"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:02:51.195">${power_state} = On</msg>
<status status="PASS" endtime="20171020 13:02:51.195" starttime="20171020 13:02:50.847"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status status="PASS" endtime="20171020 13:02:51.195" starttime="20171020 13:02:51.195"></status>
</kw>
<status status="PASS" endtime="20171020 13:02:51.195" starttime="20171020 13:02:50.847"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:02:51.199">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171020 13:02:51.200" starttime="20171020 13:02:51.199"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:02:51.200">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171020 13:02:51.200" starttime="20171020 13:02:51.200"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:02:51.201">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171020 13:02:51.201" starttime="20171020 13:02:51.201"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:02:51.202">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171020 13:02:51.202" starttime="20171020 13:02:51.201"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:02:51.456">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171020 13:02:51.456" starttime="20171020 13:02:51.202"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:02:51.456">${status} = PASS</msg>
<msg level="INFO" timestamp="20171020 13:02:51.456">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:02:51.457" starttime="20171020 13:02:51.202"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:02:51.457">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:02:51.457" starttime="20171020 13:02:51.457"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:02:51.458">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:02:51.458" starttime="20171020 13:02:51.458"></status>
</kw>
<status status="PASS" endtime="20171020 13:02:51.458" starttime="20171020 13:02:51.199"></status>
</kw>
<status status="PASS" endtime="20171020 13:02:51.458" starttime="20171020 13:02:51.198"></status>
</kw>
<status status="PASS" endtime="20171020 13:02:51.458" starttime="20171020 13:02:51.197"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:02:51.459">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" endtime="20171020 13:02:51.459" starttime="20171020 13:02:51.458"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:02:51.461">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" endtime="20171020 13:02:51.461" starttime="20171020 13:02:51.460"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:02:51.462">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" endtime="20171020 13:02:51.462" starttime="20171020 13:02:51.462"></status>
</kw>
<status status="PASS" endtime="20171020 13:02:51.463" starttime="20171020 13:02:51.461"></status>
</kw>
<status status="PASS" endtime="20171020 13:02:51.463" starttime="20171020 13:02:51.460"></status>
</kw>
<status status="PASS" endtime="20171020 13:02:51.463" starttime="20171020 13:02:51.459"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:02:51.649">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20171020 13:02:51.649">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:02:51.649" starttime="20171020 13:02:51.463"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:02:51.651">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171020 13:02:51.651" starttime="20171020 13:02:51.650"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:02:51.652">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171020 13:02:51.652" starttime="20171020 13:02:51.652"></status>
</kw>
<status status="PASS" endtime="20171020 13:02:51.652" starttime="20171020 13:02:51.651"></status>
</kw>
<status status="PASS" endtime="20171020 13:02:51.652" starttime="20171020 13:02:51.650"></status>
</kw>
<status status="PASS" endtime="20171020 13:02:51.652" starttime="20171020 13:02:51.650"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171020 13:02:51.653">Delete All Sessions</msg>
<status status="PASS" endtime="20171020 13:02:51.653" starttime="20171020 13:02:51.653"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:02:51.653">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:02:51.653" starttime="20171020 13:02:51.196"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:02:51.654">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:02:51.654" starttime="20171020 13:02:51.653"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:02:51.654">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171020 13:02:51.654">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171020 13:02:51.655">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20171020 13:02:51.655" starttime="20171020 13:02:51.654"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:02:51.655">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status status="PASS" endtime="20171020 13:02:51.655" starttime="20171020 13:02:51.196"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:02:51.655">${host_state} = Running</msg>
<status status="PASS" endtime="20171020 13:02:51.655" starttime="20171020 13:02:51.195"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status status="PASS" endtime="20171020 13:02:51.656" starttime="20171020 13:02:51.655"></status>
</kw>
<kw name="Is OS Booted" library="state_manager">
<doc>Check OS status.</doc>
<kw name="Get Host State Attribute" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>BootProgress</arg>
</arguments>
<assign>
<var>${boot_stage}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>${host_attribute}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:02:51.660">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171020 13:02:51.660" starttime="20171020 13:02:51.659"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:02:51.661">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171020 13:02:51.661" starttime="20171020 13:02:51.661"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:02:51.662">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171020 13:02:51.662" starttime="20171020 13:02:51.661"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:02:51.662">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171020 13:02:51.662" starttime="20171020 13:02:51.662"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:02:51.900">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171020 13:02:51.900" starttime="20171020 13:02:51.663"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:02:51.900">${status} = PASS</msg>
<msg level="INFO" timestamp="20171020 13:02:51.900">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:02:51.900" starttime="20171020 13:02:51.663"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:02:51.901">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:02:51.901" starttime="20171020 13:02:51.900"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:02:51.902">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:02:51.902" starttime="20171020 13:02:51.901"></status>
</kw>
<status status="PASS" endtime="20171020 13:02:51.902" starttime="20171020 13:02:51.659"></status>
</kw>
<status status="PASS" endtime="20171020 13:02:51.902" starttime="20171020 13:02:51.658"></status>
</kw>
<status status="PASS" endtime="20171020 13:02:51.902" starttime="20171020 13:02:51.658"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:02:51.903">${base_uri} = /xyz/openbmc_project/state/host0//attr/BootProgress</msg>
<status status="PASS" endtime="20171020 13:02:51.903" starttime="20171020 13:02:51.902"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:02:51.905">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status status="PASS" endtime="20171020 13:02:51.905" starttime="20171020 13:02:51.904"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:02:51.906">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status status="PASS" endtime="20171020 13:02:51.906" starttime="20171020 13:02:51.905"></status>
</kw>
<status status="PASS" endtime="20171020 13:02:51.906" starttime="20171020 13:02:51.905"></status>
</kw>
<status status="PASS" endtime="20171020 13:02:51.906" starttime="20171020 13:02:51.903"></status>
</kw>
<status status="PASS" endtime="20171020 13:02:51.906" starttime="20171020 13:02:51.903"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:02:51.993">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/BootProgress, headers=None json=None</msg>
<msg level="INFO" timestamp="20171020 13:02:51.993">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:02:51.993" starttime="20171020 13:02:51.906"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:02:51.995">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171020 13:02:51.995" starttime="20171020 13:02:51.994"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:02:51.996">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171020 13:02:51.996" starttime="20171020 13:02:51.996"></status>
</kw>
<status status="PASS" endtime="20171020 13:02:51.996" starttime="20171020 13:02:51.995"></status>
</kw>
<status status="PASS" endtime="20171020 13:02:51.996" starttime="20171020 13:02:51.994"></status>
</kw>
<status status="PASS" endtime="20171020 13:02:51.996" starttime="20171020 13:02:51.994"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171020 13:02:51.997">Delete All Sessions</msg>
<status status="PASS" endtime="20171020 13:02:51.997" starttime="20171020 13:02:51.997"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:02:51.997">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:02:51.997" starttime="20171020 13:02:51.657"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:02:51.998">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:02:51.998" starttime="20171020 13:02:51.997"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:02:51.998">To JSON using : content={
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171020 13:02:51.998">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171020 13:02:51.998">${content} = {u'data': u'xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20171020 13:02:51.998" starttime="20171020 13:02:51.998"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:02:51.999">${state} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart</msg>
<status status="PASS" endtime="20171020 13:02:51.999" starttime="20171020 13:02:51.657"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:02:51.999">${boot_stage} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart</msg>
<status status="PASS" endtime="20171020 13:02:51.999" starttime="20171020 13:02:51.656"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${OS_BOOT_START}</arg>
<arg>${boot_stage}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:02:51.999">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:02:52.000" starttime="20171020 13:02:51.999"></status>
</kw>
<kw name="Get Host State Attribute" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>OperatingSystemState</arg>
</arguments>
<assign>
<var>${os_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>${host_attribute}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:02:52.005">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171020 13:02:52.006" starttime="20171020 13:02:52.005"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:02:52.006">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171020 13:02:52.006" starttime="20171020 13:02:52.006"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:02:52.007">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171020 13:02:52.007" starttime="20171020 13:02:52.007"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:02:52.008">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171020 13:02:52.008" starttime="20171020 13:02:52.007"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:02:52.205">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171020 13:02:52.205" starttime="20171020 13:02:52.008"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:02:52.205">${status} = PASS</msg>
<msg level="INFO" timestamp="20171020 13:02:52.206">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:02:52.206" starttime="20171020 13:02:52.008"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:02:52.206">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:02:52.207" starttime="20171020 13:02:52.206"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:02:52.207">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:02:52.208" starttime="20171020 13:02:52.207"></status>
</kw>
<status status="PASS" endtime="20171020 13:02:52.208" starttime="20171020 13:02:52.004"></status>
</kw>
<status status="PASS" endtime="20171020 13:02:52.208" starttime="20171020 13:02:52.003"></status>
</kw>
<status status="PASS" endtime="20171020 13:02:52.208" starttime="20171020 13:02:52.002"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:02:52.209">${base_uri} = /xyz/openbmc_project/state/host0//attr/OperatingSystemState</msg>
<status status="PASS" endtime="20171020 13:02:52.209" starttime="20171020 13:02:52.209"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:02:52.212">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/OperatingSystemState, method:Get, args:{}</msg>
<status status="PASS" endtime="20171020 13:02:52.212" starttime="20171020 13:02:52.211"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:02:52.214">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/OperatingSystemState, method:Get, args:{}</msg>
<status status="PASS" endtime="20171020 13:02:52.214" starttime="20171020 13:02:52.213"></status>
</kw>
<status status="PASS" endtime="20171020 13:02:52.214" starttime="20171020 13:02:52.213"></status>
</kw>
<status status="PASS" endtime="20171020 13:02:52.214" starttime="20171020 13:02:52.210"></status>
</kw>
<status status="PASS" endtime="20171020 13:02:52.214" starttime="20171020 13:02:52.210"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:02:52.300">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/OperatingSystemState, headers=None json=None</msg>
<msg level="INFO" timestamp="20171020 13:02:52.300">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:02:52.300" starttime="20171020 13:02:52.214"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:02:52.302">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171020 13:02:52.302" starttime="20171020 13:02:52.302"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:02:52.303">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171020 13:02:52.304" starttime="20171020 13:02:52.303"></status>
</kw>
<status status="PASS" endtime="20171020 13:02:52.304" starttime="20171020 13:02:52.302"></status>
</kw>
<status status="PASS" endtime="20171020 13:02:52.304" starttime="20171020 13:02:52.301"></status>
</kw>
<status status="PASS" endtime="20171020 13:02:52.304" starttime="20171020 13:02:52.301"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171020 13:02:52.304">Delete All Sessions</msg>
<status status="PASS" endtime="20171020 13:02:52.304" starttime="20171020 13:02:52.304"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:02:52.305">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:02:52.305" starttime="20171020 13:02:52.001"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:02:52.305">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:02:52.305" starttime="20171020 13:02:52.305"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:02:52.306">To JSON using : content={
  "data": "xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171020 13:02:52.306">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171020 13:02:52.306">${content} = {u'data': u'xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20171020 13:02:52.306" starttime="20171020 13:02:52.306"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:02:52.307">${state} = xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive</msg>
<status status="PASS" endtime="20171020 13:02:52.307" starttime="20171020 13:02:52.001"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:02:52.307">${os_state} = xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive</msg>
<status status="PASS" endtime="20171020 13:02:52.307" starttime="20171020 13:02:52.000"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${OS_BOOT_COMPLETE}</arg>
<arg>${os_state}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:02:52.307">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg level="FAIL" timestamp="20171020 13:02:52.307">xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.BootComplete != xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive</msg>
<status status="FAIL" endtime="20171020 13:02:52.308" starttime="20171020 13:02:52.307"></status>
</kw>
<status status="FAIL" endtime="20171020 13:02:52.308" starttime="20171020 13:02:51.656"></status>
</kw>
<status status="FAIL" endtime="20171020 13:02:52.308" starttime="20171020 13:02:50.847"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:03:02.313">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171020 13:03:02.313" starttime="20171020 13:03:02.313"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:03:02.314">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171020 13:03:02.314" starttime="20171020 13:03:02.314"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:03:02.314">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171020 13:03:02.315" starttime="20171020 13:03:02.314"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:03:02.315">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171020 13:03:02.315" starttime="20171020 13:03:02.315"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:03:03.585">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171020 13:03:03.585" starttime="20171020 13:03:02.316"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:03:03.585">${status} = PASS</msg>
<msg level="INFO" timestamp="20171020 13:03:03.585">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:03:03.585" starttime="20171020 13:03:02.316"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:03:03.586">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:03:03.586" starttime="20171020 13:03:03.585"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:03:03.586">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:03:03.586" starttime="20171020 13:03:03.586"></status>
</kw>
<status status="PASS" endtime="20171020 13:03:03.587" starttime="20171020 13:03:02.312"></status>
</kw>
<status status="PASS" endtime="20171020 13:03:03.587" starttime="20171020 13:03:02.311"></status>
</kw>
<status status="PASS" endtime="20171020 13:03:03.587" starttime="20171020 13:03:02.311"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:03:03.587">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" endtime="20171020 13:03:03.587" starttime="20171020 13:03:03.587"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:03:03.589">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" endtime="20171020 13:03:03.589" starttime="20171020 13:03:03.589"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:03:03.590">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" endtime="20171020 13:03:03.590" starttime="20171020 13:03:03.590"></status>
</kw>
<status status="PASS" endtime="20171020 13:03:03.591" starttime="20171020 13:03:03.590"></status>
</kw>
<status status="PASS" endtime="20171020 13:03:03.591" starttime="20171020 13:03:03.588"></status>
</kw>
<status status="PASS" endtime="20171020 13:03:03.591" starttime="20171020 13:03:03.588"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:03:07.399">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20171020 13:03:07.399">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:03:07.399" starttime="20171020 13:03:03.591"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:03:07.402">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171020 13:03:07.402" starttime="20171020 13:03:07.401"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:03:07.403">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171020 13:03:07.403" starttime="20171020 13:03:07.403"></status>
</kw>
<status status="PASS" endtime="20171020 13:03:07.403" starttime="20171020 13:03:07.402"></status>
</kw>
<status status="PASS" endtime="20171020 13:03:07.403" starttime="20171020 13:03:07.400"></status>
</kw>
<status status="PASS" endtime="20171020 13:03:07.403" starttime="20171020 13:03:07.400"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171020 13:03:07.404">Delete All Sessions</msg>
<status status="PASS" endtime="20171020 13:03:07.404" starttime="20171020 13:03:07.404"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:03:07.404">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:03:07.404" starttime="20171020 13:03:02.310"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:03:07.405">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:03:07.405" starttime="20171020 13:03:07.405"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:03:07.406">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171020 13:03:07.406">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171020 13:03:07.406">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20171020 13:03:07.406" starttime="20171020 13:03:07.406"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:03:07.407">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status status="PASS" endtime="20171020 13:03:07.407" starttime="20171020 13:03:02.310"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:03:07.407">${power_state} = On</msg>
<status status="PASS" endtime="20171020 13:03:07.407" starttime="20171020 13:03:02.309"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status status="PASS" endtime="20171020 13:03:07.408" starttime="20171020 13:03:07.407"></status>
</kw>
<status status="PASS" endtime="20171020 13:03:07.408" starttime="20171020 13:03:02.309"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:03:07.414">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171020 13:03:07.418" starttime="20171020 13:03:07.414"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:03:07.419">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171020 13:03:07.419" starttime="20171020 13:03:07.418"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:03:07.420">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171020 13:03:07.420" starttime="20171020 13:03:07.419"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:03:07.420">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171020 13:03:07.421" starttime="20171020 13:03:07.420"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:03:08.386">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171020 13:03:08.386" starttime="20171020 13:03:07.421"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:03:08.386">${status} = PASS</msg>
<msg level="INFO" timestamp="20171020 13:03:08.386">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:03:08.386" starttime="20171020 13:03:07.421"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:03:08.387">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:03:08.387" starttime="20171020 13:03:08.387"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:03:08.388">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:03:08.388" starttime="20171020 13:03:08.387"></status>
</kw>
<status status="PASS" endtime="20171020 13:03:08.388" starttime="20171020 13:03:07.413"></status>
</kw>
<status status="PASS" endtime="20171020 13:03:08.388" starttime="20171020 13:03:07.412"></status>
</kw>
<status status="PASS" endtime="20171020 13:03:08.388" starttime="20171020 13:03:07.411"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:03:08.389">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" endtime="20171020 13:03:08.389" starttime="20171020 13:03:08.388"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:03:08.391">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" endtime="20171020 13:03:08.391" starttime="20171020 13:03:08.391"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:03:08.393">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" endtime="20171020 13:03:08.393" starttime="20171020 13:03:08.392"></status>
</kw>
<status status="PASS" endtime="20171020 13:03:08.393" starttime="20171020 13:03:08.392"></status>
</kw>
<status status="PASS" endtime="20171020 13:03:08.393" starttime="20171020 13:03:08.390"></status>
</kw>
<status status="PASS" endtime="20171020 13:03:08.393" starttime="20171020 13:03:08.389"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:03:09.817">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20171020 13:03:09.818">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:03:09.818" starttime="20171020 13:03:08.393"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:03:09.819">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171020 13:03:09.820" starttime="20171020 13:03:09.819"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:03:09.820">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171020 13:03:09.821" starttime="20171020 13:03:09.820"></status>
</kw>
<status status="PASS" endtime="20171020 13:03:09.821" starttime="20171020 13:03:09.820"></status>
</kw>
<status status="PASS" endtime="20171020 13:03:09.821" starttime="20171020 13:03:09.818"></status>
</kw>
<status status="PASS" endtime="20171020 13:03:09.821" starttime="20171020 13:03:09.818"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171020 13:03:09.821">Delete All Sessions</msg>
<status status="PASS" endtime="20171020 13:03:09.821" starttime="20171020 13:03:09.821"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:03:09.822">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:03:09.822" starttime="20171020 13:03:07.410"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:03:09.822">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:03:09.822" starttime="20171020 13:03:09.822"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:03:09.823">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171020 13:03:09.823">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171020 13:03:09.823">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20171020 13:03:09.823" starttime="20171020 13:03:09.823"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:03:09.824">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status status="PASS" endtime="20171020 13:03:09.824" starttime="20171020 13:03:07.409"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:03:09.824">${host_state} = Running</msg>
<status status="PASS" endtime="20171020 13:03:09.824" starttime="20171020 13:03:07.408"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status status="PASS" endtime="20171020 13:03:09.825" starttime="20171020 13:03:09.825"></status>
</kw>
<kw name="Is OS Booted" library="state_manager">
<doc>Check OS status.</doc>
<kw name="Get Host State Attribute" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>BootProgress</arg>
</arguments>
<assign>
<var>${boot_stage}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>${host_attribute}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:03:09.830">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171020 13:03:09.831" starttime="20171020 13:03:09.830"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:03:09.831">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171020 13:03:09.831" starttime="20171020 13:03:09.831"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:03:09.832">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171020 13:03:09.832" starttime="20171020 13:03:09.832"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:03:09.833">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171020 13:03:09.833" starttime="20171020 13:03:09.832"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:03:10.112">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171020 13:03:10.112" starttime="20171020 13:03:09.833"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:03:10.112">${status} = PASS</msg>
<msg level="INFO" timestamp="20171020 13:03:10.112">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:03:10.113" starttime="20171020 13:03:09.833"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:03:10.113">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:03:10.113" starttime="20171020 13:03:10.113"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:03:10.114">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:03:10.114" starttime="20171020 13:03:10.114"></status>
</kw>
<status status="PASS" endtime="20171020 13:03:10.114" starttime="20171020 13:03:09.829"></status>
</kw>
<status status="PASS" endtime="20171020 13:03:10.114" starttime="20171020 13:03:09.829"></status>
</kw>
<status status="PASS" endtime="20171020 13:03:10.115" starttime="20171020 13:03:09.828"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:03:10.115">${base_uri} = /xyz/openbmc_project/state/host0//attr/BootProgress</msg>
<status status="PASS" endtime="20171020 13:03:10.115" starttime="20171020 13:03:10.115"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:03:10.118">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status status="PASS" endtime="20171020 13:03:10.118" starttime="20171020 13:03:10.117"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:03:10.119">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status status="PASS" endtime="20171020 13:03:10.119" starttime="20171020 13:03:10.119"></status>
</kw>
<status status="PASS" endtime="20171020 13:03:10.119" starttime="20171020 13:03:10.118"></status>
</kw>
<status status="PASS" endtime="20171020 13:03:10.119" starttime="20171020 13:03:10.116"></status>
</kw>
<status status="PASS" endtime="20171020 13:03:10.119" starttime="20171020 13:03:10.116"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:03:10.944">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/BootProgress, headers=None json=None</msg>
<msg level="INFO" timestamp="20171020 13:03:10.944">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:03:10.944" starttime="20171020 13:03:10.120"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:03:10.946">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171020 13:03:10.946" starttime="20171020 13:03:10.946"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:03:10.947">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171020 13:03:10.947" starttime="20171020 13:03:10.947"></status>
</kw>
<status status="PASS" endtime="20171020 13:03:10.947" starttime="20171020 13:03:10.946"></status>
</kw>
<status status="PASS" endtime="20171020 13:03:10.947" starttime="20171020 13:03:10.945"></status>
</kw>
<status status="PASS" endtime="20171020 13:03:10.947" starttime="20171020 13:03:10.945"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171020 13:03:10.948">Delete All Sessions</msg>
<status status="PASS" endtime="20171020 13:03:10.948" starttime="20171020 13:03:10.948"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:03:10.948">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:03:10.948" starttime="20171020 13:03:09.828"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:03:10.949">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:03:10.949" starttime="20171020 13:03:10.949"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:03:10.949">To JSON using : content={
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171020 13:03:10.950">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171020 13:03:10.950">${content} = {u'data': u'xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20171020 13:03:10.950" starttime="20171020 13:03:10.949"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:03:10.950">${state} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart</msg>
<status status="PASS" endtime="20171020 13:03:10.950" starttime="20171020 13:03:09.826"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:03:10.950">${boot_stage} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart</msg>
<status status="PASS" endtime="20171020 13:03:10.950" starttime="20171020 13:03:09.826"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${OS_BOOT_START}</arg>
<arg>${boot_stage}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:03:10.951">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:03:10.951" starttime="20171020 13:03:10.950"></status>
</kw>
<kw name="Get Host State Attribute" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>OperatingSystemState</arg>
</arguments>
<assign>
<var>${os_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>${host_attribute}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:03:10.955">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171020 13:03:10.955" starttime="20171020 13:03:10.954"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:03:10.955">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171020 13:03:10.956" starttime="20171020 13:03:10.955"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:03:10.956">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171020 13:03:10.956" starttime="20171020 13:03:10.956"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:03:10.957">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171020 13:03:10.957" starttime="20171020 13:03:10.956"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:03:11.489">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171020 13:03:11.489" starttime="20171020 13:03:10.958"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:03:11.489">${status} = PASS</msg>
<msg level="INFO" timestamp="20171020 13:03:11.489">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:03:11.489" starttime="20171020 13:03:10.957"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:03:11.490">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:03:11.490" starttime="20171020 13:03:11.489"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:03:11.490">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:03:11.490" starttime="20171020 13:03:11.490"></status>
</kw>
<status status="PASS" endtime="20171020 13:03:11.490" starttime="20171020 13:03:10.954"></status>
</kw>
<status status="PASS" endtime="20171020 13:03:11.491" starttime="20171020 13:03:10.953"></status>
</kw>
<status status="PASS" endtime="20171020 13:03:11.491" starttime="20171020 13:03:10.953"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:03:11.491">${base_uri} = /xyz/openbmc_project/state/host0//attr/OperatingSystemState</msg>
<status status="PASS" endtime="20171020 13:03:11.491" starttime="20171020 13:03:11.491"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:03:11.493">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/OperatingSystemState, method:Get, args:{}</msg>
<status status="PASS" endtime="20171020 13:03:11.494" starttime="20171020 13:03:11.493"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:03:11.494">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/OperatingSystemState, method:Get, args:{}</msg>
<status status="PASS" endtime="20171020 13:03:11.495" starttime="20171020 13:03:11.494"></status>
</kw>
<status status="PASS" endtime="20171020 13:03:11.495" starttime="20171020 13:03:11.494"></status>
</kw>
<status status="PASS" endtime="20171020 13:03:11.495" starttime="20171020 13:03:11.492"></status>
</kw>
<status status="PASS" endtime="20171020 13:03:11.495" starttime="20171020 13:03:11.492"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:03:11.750">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/OperatingSystemState, headers=None json=None</msg>
<msg level="INFO" timestamp="20171020 13:03:11.751">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:03:11.751" starttime="20171020 13:03:11.495"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:03:11.753">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171020 13:03:11.753" starttime="20171020 13:03:11.752"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:03:11.753">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171020 13:03:11.754" starttime="20171020 13:03:11.753"></status>
</kw>
<status status="PASS" endtime="20171020 13:03:11.754" starttime="20171020 13:03:11.753"></status>
</kw>
<status status="PASS" endtime="20171020 13:03:11.754" starttime="20171020 13:03:11.751"></status>
</kw>
<status status="PASS" endtime="20171020 13:03:11.754" starttime="20171020 13:03:11.751"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171020 13:03:11.754">Delete All Sessions</msg>
<status status="PASS" endtime="20171020 13:03:11.754" starttime="20171020 13:03:11.754"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:03:11.755">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:03:11.755" starttime="20171020 13:03:10.952"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:03:11.755">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:03:11.755" starttime="20171020 13:03:11.755"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:03:11.756">To JSON using : content={
  "data": "xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171020 13:03:11.756">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171020 13:03:11.756">${content} = {u'data': u'xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20171020 13:03:11.756" starttime="20171020 13:03:11.756"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:03:11.756">${state} = xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive</msg>
<status status="PASS" endtime="20171020 13:03:11.756" starttime="20171020 13:03:10.951"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:03:11.756">${os_state} = xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive</msg>
<status status="PASS" endtime="20171020 13:03:11.757" starttime="20171020 13:03:10.951"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${OS_BOOT_COMPLETE}</arg>
<arg>${os_state}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:03:11.757">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg level="FAIL" timestamp="20171020 13:03:11.757">xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.BootComplete != xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive</msg>
<status status="FAIL" endtime="20171020 13:03:11.757" starttime="20171020 13:03:11.757"></status>
</kw>
<status status="FAIL" endtime="20171020 13:03:11.757" starttime="20171020 13:03:09.825"></status>
</kw>
<status status="FAIL" endtime="20171020 13:03:11.758" starttime="20171020 13:03:02.308"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:03:21.764">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171020 13:03:21.765" starttime="20171020 13:03:21.764"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:03:21.765">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171020 13:03:21.765" starttime="20171020 13:03:21.765"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:03:21.766">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171020 13:03:21.766" starttime="20171020 13:03:21.766"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:03:21.767">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171020 13:03:21.767" starttime="20171020 13:03:21.767"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:03:21.943">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171020 13:03:21.943" starttime="20171020 13:03:21.768"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:03:21.943">${status} = PASS</msg>
<msg level="INFO" timestamp="20171020 13:03:21.943">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:03:21.943" starttime="20171020 13:03:21.767"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:03:21.944">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:03:21.944" starttime="20171020 13:03:21.944"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:03:21.945">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:03:21.945" starttime="20171020 13:03:21.945"></status>
</kw>
<status status="PASS" endtime="20171020 13:03:21.945" starttime="20171020 13:03:21.763"></status>
</kw>
<status status="PASS" endtime="20171020 13:03:21.946" starttime="20171020 13:03:21.762"></status>
</kw>
<status status="PASS" endtime="20171020 13:03:21.946" starttime="20171020 13:03:21.761"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:03:21.947">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" endtime="20171020 13:03:21.947" starttime="20171020 13:03:21.946"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:03:21.950">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" endtime="20171020 13:03:21.950" starttime="20171020 13:03:21.949"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:03:21.951">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" endtime="20171020 13:03:21.951" starttime="20171020 13:03:21.951"></status>
</kw>
<status status="PASS" endtime="20171020 13:03:21.951" starttime="20171020 13:03:21.950"></status>
</kw>
<status status="PASS" endtime="20171020 13:03:21.951" starttime="20171020 13:03:21.948"></status>
</kw>
<status status="PASS" endtime="20171020 13:03:21.952" starttime="20171020 13:03:21.947"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:03:22.035">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20171020 13:03:22.035">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:03:22.035" starttime="20171020 13:03:21.952"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:03:22.037">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171020 13:03:22.037" starttime="20171020 13:03:22.036"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:03:22.038">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171020 13:03:22.038" starttime="20171020 13:03:22.038"></status>
</kw>
<status status="PASS" endtime="20171020 13:03:22.038" starttime="20171020 13:03:22.037"></status>
</kw>
<status status="PASS" endtime="20171020 13:03:22.038" starttime="20171020 13:03:22.036"></status>
</kw>
<status status="PASS" endtime="20171020 13:03:22.039" starttime="20171020 13:03:22.035"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171020 13:03:22.039">Delete All Sessions</msg>
<status status="PASS" endtime="20171020 13:03:22.039" starttime="20171020 13:03:22.039"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:03:22.039">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:03:22.039" starttime="20171020 13:03:21.760"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:03:22.040">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:03:22.040" starttime="20171020 13:03:22.040"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:03:22.040">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171020 13:03:22.041">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171020 13:03:22.041">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20171020 13:03:22.041" starttime="20171020 13:03:22.040"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:03:22.041">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status status="PASS" endtime="20171020 13:03:22.041" starttime="20171020 13:03:21.760"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:03:22.041">${power_state} = On</msg>
<status status="PASS" endtime="20171020 13:03:22.041" starttime="20171020 13:03:21.759"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status status="PASS" endtime="20171020 13:03:22.042" starttime="20171020 13:03:22.042"></status>
</kw>
<status status="PASS" endtime="20171020 13:03:22.042" starttime="20171020 13:03:21.759"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:03:22.046">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171020 13:03:22.046" starttime="20171020 13:03:22.045"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:03:22.047">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171020 13:03:22.047" starttime="20171020 13:03:22.046"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:03:22.047">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171020 13:03:22.047" starttime="20171020 13:03:22.047"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:03:22.048">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171020 13:03:22.048" starttime="20171020 13:03:22.047"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:03:22.454">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171020 13:03:22.454" starttime="20171020 13:03:22.049"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:03:22.454">${status} = PASS</msg>
<msg level="INFO" timestamp="20171020 13:03:22.454">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:03:22.454" starttime="20171020 13:03:22.048"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:03:22.455">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:03:22.455" starttime="20171020 13:03:22.454"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:03:22.456">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:03:22.456" starttime="20171020 13:03:22.455"></status>
</kw>
<status status="PASS" endtime="20171020 13:03:22.456" starttime="20171020 13:03:22.045"></status>
</kw>
<status status="PASS" endtime="20171020 13:03:22.456" starttime="20171020 13:03:22.044"></status>
</kw>
<status status="PASS" endtime="20171020 13:03:22.456" starttime="20171020 13:03:22.044"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:03:22.457">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" endtime="20171020 13:03:22.457" starttime="20171020 13:03:22.456"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:03:22.459">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" endtime="20171020 13:03:22.459" starttime="20171020 13:03:22.458"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:03:22.460">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" endtime="20171020 13:03:22.460" starttime="20171020 13:03:22.460"></status>
</kw>
<status status="PASS" endtime="20171020 13:03:22.460" starttime="20171020 13:03:22.459"></status>
</kw>
<status status="PASS" endtime="20171020 13:03:22.460" starttime="20171020 13:03:22.457"></status>
</kw>
<status status="PASS" endtime="20171020 13:03:22.460" starttime="20171020 13:03:22.457"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:03:22.765">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20171020 13:03:22.765">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:03:22.765" starttime="20171020 13:03:22.461"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:03:22.767">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171020 13:03:22.767" starttime="20171020 13:03:22.766"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:03:22.768">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171020 13:03:22.768" starttime="20171020 13:03:22.768"></status>
</kw>
<status status="PASS" endtime="20171020 13:03:22.768" starttime="20171020 13:03:22.767"></status>
</kw>
<status status="PASS" endtime="20171020 13:03:22.768" starttime="20171020 13:03:22.766"></status>
</kw>
<status status="PASS" endtime="20171020 13:03:22.769" starttime="20171020 13:03:22.765"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171020 13:03:22.769">Delete All Sessions</msg>
<status status="PASS" endtime="20171020 13:03:22.769" starttime="20171020 13:03:22.769"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:03:22.769">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:03:22.769" starttime="20171020 13:03:22.043"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:03:22.770">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:03:22.770" starttime="20171020 13:03:22.770"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:03:22.770">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171020 13:03:22.771">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171020 13:03:22.771">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20171020 13:03:22.771" starttime="20171020 13:03:22.770"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:03:22.771">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status status="PASS" endtime="20171020 13:03:22.771" starttime="20171020 13:03:22.043"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:03:22.771">${host_state} = Running</msg>
<status status="PASS" endtime="20171020 13:03:22.771" starttime="20171020 13:03:22.042"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status status="PASS" endtime="20171020 13:03:22.772" starttime="20171020 13:03:22.772"></status>
</kw>
<kw name="Is OS Booted" library="state_manager">
<doc>Check OS status.</doc>
<kw name="Get Host State Attribute" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>BootProgress</arg>
</arguments>
<assign>
<var>${boot_stage}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>${host_attribute}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:03:22.776">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171020 13:03:22.777" starttime="20171020 13:03:22.776"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:03:22.778">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171020 13:03:22.778" starttime="20171020 13:03:22.777"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:03:22.779">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171020 13:03:22.779" starttime="20171020 13:03:22.778"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:03:22.780">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171020 13:03:22.780" starttime="20171020 13:03:22.779"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:03:23.135">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171020 13:03:23.135" starttime="20171020 13:03:22.781"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:03:23.136">${status} = PASS</msg>
<msg level="INFO" timestamp="20171020 13:03:23.136">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:03:23.136" starttime="20171020 13:03:22.780"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:03:23.136">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:03:23.136" starttime="20171020 13:03:23.136"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:03:23.137">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:03:23.137" starttime="20171020 13:03:23.137"></status>
</kw>
<status status="PASS" endtime="20171020 13:03:23.137" starttime="20171020 13:03:22.775"></status>
</kw>
<status status="PASS" endtime="20171020 13:03:23.137" starttime="20171020 13:03:22.775"></status>
</kw>
<status status="PASS" endtime="20171020 13:03:23.137" starttime="20171020 13:03:22.774"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:03:23.138">${base_uri} = /xyz/openbmc_project/state/host0//attr/BootProgress</msg>
<status status="PASS" endtime="20171020 13:03:23.138" starttime="20171020 13:03:23.138"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:03:23.140">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status status="PASS" endtime="20171020 13:03:23.140" starttime="20171020 13:03:23.140"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:03:23.141">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status status="PASS" endtime="20171020 13:03:23.141" starttime="20171020 13:03:23.141"></status>
</kw>
<status status="PASS" endtime="20171020 13:03:23.142" starttime="20171020 13:03:23.141"></status>
</kw>
<status status="PASS" endtime="20171020 13:03:23.142" starttime="20171020 13:03:23.139"></status>
</kw>
<status status="PASS" endtime="20171020 13:03:23.142" starttime="20171020 13:03:23.138"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:03:23.228">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/BootProgress, headers=None json=None</msg>
<msg level="INFO" timestamp="20171020 13:03:23.229">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:03:23.229" starttime="20171020 13:03:23.142"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:03:23.231">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171020 13:03:23.231" starttime="20171020 13:03:23.230"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:03:23.232">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171020 13:03:23.232" starttime="20171020 13:03:23.231"></status>
</kw>
<status status="PASS" endtime="20171020 13:03:23.232" starttime="20171020 13:03:23.231"></status>
</kw>
<status status="PASS" endtime="20171020 13:03:23.232" starttime="20171020 13:03:23.230"></status>
</kw>
<status status="PASS" endtime="20171020 13:03:23.232" starttime="20171020 13:03:23.229"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171020 13:03:23.233">Delete All Sessions</msg>
<status status="PASS" endtime="20171020 13:03:23.233" starttime="20171020 13:03:23.232"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:03:23.233">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:03:23.233" starttime="20171020 13:03:22.773"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:03:23.233">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:03:23.234" starttime="20171020 13:03:23.233"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:03:23.234">To JSON using : content={
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171020 13:03:23.234">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171020 13:03:23.234">${content} = {u'data': u'xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20171020 13:03:23.235" starttime="20171020 13:03:23.234"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:03:23.235">${state} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status status="PASS" endtime="20171020 13:03:23.235" starttime="20171020 13:03:22.773"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:03:23.235">${boot_stage} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status status="PASS" endtime="20171020 13:03:23.235" starttime="20171020 13:03:22.772"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${OS_BOOT_START}</arg>
<arg>${boot_stage}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:03:23.236">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg level="FAIL" timestamp="20171020 13:03:23.236">xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart != xyz.openbmc_project.State.Boot.Progress.ProgressStages.MotherboardInit</msg>
<status status="FAIL" endtime="20171020 13:03:23.236" starttime="20171020 13:03:23.235"></status>
</kw>
<status status="FAIL" endtime="20171020 13:03:23.236" starttime="20171020 13:03:22.772"></status>
</kw>
<status status="FAIL" endtime="20171020 13:03:23.236" starttime="20171020 13:03:21.758"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:03:33.243">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171020 13:03:33.244" starttime="20171020 13:03:33.243"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:03:33.244">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171020 13:03:33.244" starttime="20171020 13:03:33.244"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:03:33.245">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171020 13:03:33.245" starttime="20171020 13:03:33.245"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:03:33.246">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171020 13:03:33.246" starttime="20171020 13:03:33.245"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:03:34.147">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171020 13:03:34.147" starttime="20171020 13:03:33.247"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:03:34.147">${status} = PASS</msg>
<msg level="INFO" timestamp="20171020 13:03:34.147">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:03:34.147" starttime="20171020 13:03:33.246"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:03:34.148">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:03:34.148" starttime="20171020 13:03:34.147"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:03:34.148">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:03:34.148" starttime="20171020 13:03:34.148"></status>
</kw>
<status status="PASS" endtime="20171020 13:03:34.149" starttime="20171020 13:03:33.242"></status>
</kw>
<status status="PASS" endtime="20171020 13:03:34.149" starttime="20171020 13:03:33.242"></status>
</kw>
<status status="PASS" endtime="20171020 13:03:34.149" starttime="20171020 13:03:33.241"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:03:34.149">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" endtime="20171020 13:03:34.149" starttime="20171020 13:03:34.149"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:03:34.151">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" endtime="20171020 13:03:34.151" starttime="20171020 13:03:34.151"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:03:34.152">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" endtime="20171020 13:03:34.153" starttime="20171020 13:03:34.152"></status>
</kw>
<status status="PASS" endtime="20171020 13:03:34.153" starttime="20171020 13:03:34.152"></status>
</kw>
<status status="PASS" endtime="20171020 13:03:34.153" starttime="20171020 13:03:34.150"></status>
</kw>
<status status="PASS" endtime="20171020 13:03:34.153" starttime="20171020 13:03:34.150"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:03:35.113">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20171020 13:03:35.113">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:03:35.113" starttime="20171020 13:03:34.153"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:03:35.115">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171020 13:03:35.115" starttime="20171020 13:03:35.114"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:03:35.116">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171020 13:03:35.116" starttime="20171020 13:03:35.116"></status>
</kw>
<status status="PASS" endtime="20171020 13:03:35.116" starttime="20171020 13:03:35.115"></status>
</kw>
<status status="PASS" endtime="20171020 13:03:35.117" starttime="20171020 13:03:35.114"></status>
</kw>
<status status="PASS" endtime="20171020 13:03:35.117" starttime="20171020 13:03:35.113"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171020 13:03:35.117">Delete All Sessions</msg>
<status status="PASS" endtime="20171020 13:03:35.117" starttime="20171020 13:03:35.117"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:03:35.117">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:03:35.118" starttime="20171020 13:03:33.239"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:03:35.118">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:03:35.118" starttime="20171020 13:03:35.118"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:03:35.119">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171020 13:03:35.119">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171020 13:03:35.119">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20171020 13:03:35.119" starttime="20171020 13:03:35.119"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:03:35.119">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status status="PASS" endtime="20171020 13:03:35.119" starttime="20171020 13:03:33.238"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:03:35.120">${power_state} = On</msg>
<status status="PASS" endtime="20171020 13:03:35.120" starttime="20171020 13:03:33.238"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status status="PASS" endtime="20171020 13:03:35.120" starttime="20171020 13:03:35.120"></status>
</kw>
<status status="PASS" endtime="20171020 13:03:35.121" starttime="20171020 13:03:33.238"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:03:35.124">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171020 13:03:35.125" starttime="20171020 13:03:35.124"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:03:35.125">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171020 13:03:35.125" starttime="20171020 13:03:35.125"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:03:35.126">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171020 13:03:35.126" starttime="20171020 13:03:35.125"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:03:35.126">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171020 13:03:35.126" starttime="20171020 13:03:35.126"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:03:36.407">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171020 13:03:36.407" starttime="20171020 13:03:35.127"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:03:36.407">${status} = PASS</msg>
<msg level="INFO" timestamp="20171020 13:03:36.407">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:03:36.408" starttime="20171020 13:03:35.127"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:03:36.408">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:03:36.408" starttime="20171020 13:03:36.408"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:03:36.409">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:03:36.409" starttime="20171020 13:03:36.409"></status>
</kw>
<status status="PASS" endtime="20171020 13:03:36.409" starttime="20171020 13:03:35.123"></status>
</kw>
<status status="PASS" endtime="20171020 13:03:36.409" starttime="20171020 13:03:35.123"></status>
</kw>
<status status="PASS" endtime="20171020 13:03:36.409" starttime="20171020 13:03:35.122"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:03:36.410">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" endtime="20171020 13:03:36.410" starttime="20171020 13:03:36.410"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:03:36.413">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" endtime="20171020 13:03:36.413" starttime="20171020 13:03:36.412"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:03:36.414">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" endtime="20171020 13:03:36.414" starttime="20171020 13:03:36.414"></status>
</kw>
<status status="PASS" endtime="20171020 13:03:36.414" starttime="20171020 13:03:36.413"></status>
</kw>
<status status="PASS" endtime="20171020 13:03:36.414" starttime="20171020 13:03:36.411"></status>
</kw>
<status status="PASS" endtime="20171020 13:03:36.414" starttime="20171020 13:03:36.410"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:03:36.509">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20171020 13:03:36.509">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:03:36.509" starttime="20171020 13:03:36.415"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:03:36.511">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171020 13:03:36.511" starttime="20171020 13:03:36.510"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:03:36.512">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171020 13:03:36.512" starttime="20171020 13:03:36.512"></status>
</kw>
<status status="PASS" endtime="20171020 13:03:36.512" starttime="20171020 13:03:36.511"></status>
</kw>
<status status="PASS" endtime="20171020 13:03:36.512" starttime="20171020 13:03:36.510"></status>
</kw>
<status status="PASS" endtime="20171020 13:03:36.512" starttime="20171020 13:03:36.509"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171020 13:03:36.513">Delete All Sessions</msg>
<status status="PASS" endtime="20171020 13:03:36.513" starttime="20171020 13:03:36.512"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:03:36.513">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:03:36.513" starttime="20171020 13:03:35.122"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:03:36.514">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:03:36.514" starttime="20171020 13:03:36.513"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:03:36.514">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171020 13:03:36.514">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171020 13:03:36.514">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20171020 13:03:36.514" starttime="20171020 13:03:36.514"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:03:36.515">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status status="PASS" endtime="20171020 13:03:36.515" starttime="20171020 13:03:35.121"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:03:36.515">${host_state} = Running</msg>
<status status="PASS" endtime="20171020 13:03:36.515" starttime="20171020 13:03:35.121"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status status="PASS" endtime="20171020 13:03:36.516" starttime="20171020 13:03:36.515"></status>
</kw>
<kw name="Is OS Booted" library="state_manager">
<doc>Check OS status.</doc>
<kw name="Get Host State Attribute" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>BootProgress</arg>
</arguments>
<assign>
<var>${boot_stage}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>${host_attribute}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:03:36.520">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171020 13:03:36.520" starttime="20171020 13:03:36.519"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:03:36.521">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171020 13:03:36.521" starttime="20171020 13:03:36.520"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:03:36.521">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171020 13:03:36.521" starttime="20171020 13:03:36.521"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:03:36.522">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171020 13:03:36.522" starttime="20171020 13:03:36.522"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:03:38.076">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171020 13:03:38.076" starttime="20171020 13:03:36.523"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:03:38.076">${status} = PASS</msg>
<msg level="INFO" timestamp="20171020 13:03:38.076">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:03:38.076" starttime="20171020 13:03:36.522"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:03:38.077">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:03:38.077" starttime="20171020 13:03:38.077"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:03:38.078">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:03:38.078" starttime="20171020 13:03:38.077"></status>
</kw>
<status status="PASS" endtime="20171020 13:03:38.078" starttime="20171020 13:03:36.519"></status>
</kw>
<status status="PASS" endtime="20171020 13:03:38.078" starttime="20171020 13:03:36.518"></status>
</kw>
<status status="PASS" endtime="20171020 13:03:38.078" starttime="20171020 13:03:36.518"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:03:38.079">${base_uri} = /xyz/openbmc_project/state/host0//attr/BootProgress</msg>
<status status="PASS" endtime="20171020 13:03:38.079" starttime="20171020 13:03:38.078"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:03:38.081">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status status="PASS" endtime="20171020 13:03:38.081" starttime="20171020 13:03:38.080"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:03:38.082">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status status="PASS" endtime="20171020 13:03:38.082" starttime="20171020 13:03:38.082"></status>
</kw>
<status status="PASS" endtime="20171020 13:03:38.082" starttime="20171020 13:03:38.081"></status>
</kw>
<status status="PASS" endtime="20171020 13:03:38.082" starttime="20171020 13:03:38.080"></status>
</kw>
<status status="PASS" endtime="20171020 13:03:38.082" starttime="20171020 13:03:38.079"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:03:38.817">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/BootProgress, headers=None json=None</msg>
<msg level="INFO" timestamp="20171020 13:03:38.817">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:03:38.817" starttime="20171020 13:03:38.083"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:03:38.819">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171020 13:03:38.819" starttime="20171020 13:03:38.818"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:03:38.820">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171020 13:03:38.820" starttime="20171020 13:03:38.819"></status>
</kw>
<status status="PASS" endtime="20171020 13:03:38.820" starttime="20171020 13:03:38.819"></status>
</kw>
<status status="PASS" endtime="20171020 13:03:38.820" starttime="20171020 13:03:38.818"></status>
</kw>
<status status="PASS" endtime="20171020 13:03:38.820" starttime="20171020 13:03:38.817"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171020 13:03:38.820">Delete All Sessions</msg>
<status status="PASS" endtime="20171020 13:03:38.820" starttime="20171020 13:03:38.820"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:03:38.821">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:03:38.821" starttime="20171020 13:03:36.517"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:03:38.821">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:03:38.822" starttime="20171020 13:03:38.821"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:03:38.822">To JSON using : content={
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171020 13:03:38.822">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171020 13:03:38.822">${content} = {u'data': u'xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20171020 13:03:38.822" starttime="20171020 13:03:38.822"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:03:38.823">${state} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart</msg>
<status status="PASS" endtime="20171020 13:03:38.823" starttime="20171020 13:03:36.517"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:03:38.823">${boot_stage} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart</msg>
<status status="PASS" endtime="20171020 13:03:38.823" starttime="20171020 13:03:36.516"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${OS_BOOT_START}</arg>
<arg>${boot_stage}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:03:38.823">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:03:38.823" starttime="20171020 13:03:38.823"></status>
</kw>
<kw name="Get Host State Attribute" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>OperatingSystemState</arg>
</arguments>
<assign>
<var>${os_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>${host_attribute}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:03:38.830">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171020 13:03:38.830" starttime="20171020 13:03:38.829"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:03:38.831">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171020 13:03:38.831" starttime="20171020 13:03:38.830"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:03:38.831">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171020 13:03:38.831" starttime="20171020 13:03:38.831"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:03:38.832">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171020 13:03:38.832" starttime="20171020 13:03:38.832"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:03:40.027">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171020 13:03:40.027" starttime="20171020 13:03:38.833"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:03:40.027">${status} = PASS</msg>
<msg level="INFO" timestamp="20171020 13:03:40.027">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:03:40.027" starttime="20171020 13:03:38.832"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:03:40.028">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:03:40.028" starttime="20171020 13:03:40.028"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:03:40.029">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:03:40.029" starttime="20171020 13:03:40.028"></status>
</kw>
<status status="PASS" endtime="20171020 13:03:40.029" starttime="20171020 13:03:38.826"></status>
</kw>
<status status="PASS" endtime="20171020 13:03:40.029" starttime="20171020 13:03:38.826"></status>
</kw>
<status status="PASS" endtime="20171020 13:03:40.029" starttime="20171020 13:03:38.825"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:03:40.030">${base_uri} = /xyz/openbmc_project/state/host0//attr/OperatingSystemState</msg>
<status status="PASS" endtime="20171020 13:03:40.030" starttime="20171020 13:03:40.029"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:03:40.032">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/OperatingSystemState, method:Get, args:{}</msg>
<status status="PASS" endtime="20171020 13:03:40.032" starttime="20171020 13:03:40.031"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:03:40.033">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/OperatingSystemState, method:Get, args:{}</msg>
<status status="PASS" endtime="20171020 13:03:40.033" starttime="20171020 13:03:40.032"></status>
</kw>
<status status="PASS" endtime="20171020 13:03:40.033" starttime="20171020 13:03:40.032"></status>
</kw>
<status status="PASS" endtime="20171020 13:03:40.033" starttime="20171020 13:03:40.030"></status>
</kw>
<status status="PASS" endtime="20171020 13:03:40.033" starttime="20171020 13:03:40.030"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:03:43.436">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/OperatingSystemState, headers=None json=None</msg>
<msg level="INFO" timestamp="20171020 13:03:43.437">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:03:43.437" starttime="20171020 13:03:40.033"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:03:43.438">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171020 13:03:43.439" starttime="20171020 13:03:43.438"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:03:43.440">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171020 13:03:43.440" starttime="20171020 13:03:43.439"></status>
</kw>
<status status="PASS" endtime="20171020 13:03:43.440" starttime="20171020 13:03:43.439"></status>
</kw>
<status status="PASS" endtime="20171020 13:03:43.440" starttime="20171020 13:03:43.437"></status>
</kw>
<status status="PASS" endtime="20171020 13:03:43.440" starttime="20171020 13:03:43.437"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171020 13:03:43.441">Delete All Sessions</msg>
<status status="PASS" endtime="20171020 13:03:43.441" starttime="20171020 13:03:43.440"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:03:43.441">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:03:43.441" starttime="20171020 13:03:38.825"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:03:43.441">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:03:43.442" starttime="20171020 13:03:43.441"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:03:43.442">To JSON using : content={
  "data": "xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171020 13:03:43.442">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171020 13:03:43.442">${content} = {u'data': u'xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20171020 13:03:43.442" starttime="20171020 13:03:43.442"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:03:43.443">${state} = xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive</msg>
<status status="PASS" endtime="20171020 13:03:43.443" starttime="20171020 13:03:38.824"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:03:43.443">${os_state} = xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive</msg>
<status status="PASS" endtime="20171020 13:03:43.443" starttime="20171020 13:03:38.824"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${OS_BOOT_COMPLETE}</arg>
<arg>${os_state}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:03:43.443">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg level="FAIL" timestamp="20171020 13:03:43.444">xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.BootComplete != xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive</msg>
<status status="FAIL" endtime="20171020 13:03:43.444" starttime="20171020 13:03:43.443"></status>
</kw>
<status status="FAIL" endtime="20171020 13:03:43.444" starttime="20171020 13:03:36.516"></status>
</kw>
<status status="FAIL" endtime="20171020 13:03:43.444" starttime="20171020 13:03:33.237"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:03:53.454">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171020 13:03:53.454" starttime="20171020 13:03:53.453"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:03:53.455">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171020 13:03:53.455" starttime="20171020 13:03:53.454"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:03:53.455">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171020 13:03:53.455" starttime="20171020 13:03:53.455"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:03:53.456">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171020 13:03:53.456" starttime="20171020 13:03:53.456"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:03:54.029">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171020 13:03:54.029" starttime="20171020 13:03:53.457"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:03:54.029">${status} = PASS</msg>
<msg level="INFO" timestamp="20171020 13:03:54.029">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:03:54.030" starttime="20171020 13:03:53.456"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:03:54.030">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:03:54.030" starttime="20171020 13:03:54.030"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:03:54.031">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:03:54.031" starttime="20171020 13:03:54.031"></status>
</kw>
<status status="PASS" endtime="20171020 13:03:54.031" starttime="20171020 13:03:53.453"></status>
</kw>
<status status="PASS" endtime="20171020 13:03:54.031" starttime="20171020 13:03:53.451"></status>
</kw>
<status status="PASS" endtime="20171020 13:03:54.031" starttime="20171020 13:03:53.450"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:03:54.032">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" endtime="20171020 13:03:54.032" starttime="20171020 13:03:54.032"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:03:54.036">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" endtime="20171020 13:03:54.036" starttime="20171020 13:03:54.033"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:03:54.037">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" endtime="20171020 13:03:54.037" starttime="20171020 13:03:54.037"></status>
</kw>
<status status="PASS" endtime="20171020 13:03:54.037" starttime="20171020 13:03:54.036"></status>
</kw>
<status status="PASS" endtime="20171020 13:03:54.037" starttime="20171020 13:03:54.033"></status>
</kw>
<status status="PASS" endtime="20171020 13:03:54.037" starttime="20171020 13:03:54.032"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:03:59.465">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20171020 13:03:59.465">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:03:59.465" starttime="20171020 13:03:54.038"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:03:59.468">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171020 13:03:59.468" starttime="20171020 13:03:59.467"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:03:59.469">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171020 13:03:59.470" starttime="20171020 13:03:59.469"></status>
</kw>
<status status="PASS" endtime="20171020 13:03:59.470" starttime="20171020 13:03:59.468"></status>
</kw>
<status status="PASS" endtime="20171020 13:03:59.470" starttime="20171020 13:03:59.467"></status>
</kw>
<status status="PASS" endtime="20171020 13:03:59.470" starttime="20171020 13:03:59.466"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171020 13:03:59.470">Delete All Sessions</msg>
<status status="PASS" endtime="20171020 13:03:59.470" starttime="20171020 13:03:59.470"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:03:59.471">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:03:59.471" starttime="20171020 13:03:53.449"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:03:59.471">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:03:59.471" starttime="20171020 13:03:59.471"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:03:59.472">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171020 13:03:59.472">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171020 13:03:59.472">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20171020 13:03:59.472" starttime="20171020 13:03:59.472"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:03:59.472">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status status="PASS" endtime="20171020 13:03:59.472" starttime="20171020 13:03:53.449"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:03:59.473">${power_state} = On</msg>
<status status="PASS" endtime="20171020 13:03:59.473" starttime="20171020 13:03:53.448"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status status="PASS" endtime="20171020 13:03:59.473" starttime="20171020 13:03:59.473"></status>
</kw>
<status status="PASS" endtime="20171020 13:03:59.473" starttime="20171020 13:03:53.448"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:03:59.477">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171020 13:03:59.478" starttime="20171020 13:03:59.477"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:03:59.479">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171020 13:03:59.479" starttime="20171020 13:03:59.478"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:03:59.479">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171020 13:03:59.479" starttime="20171020 13:03:59.479"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:03:59.480">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171020 13:03:59.480" starttime="20171020 13:03:59.480"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:04:01.045">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171020 13:04:01.045" starttime="20171020 13:03:59.481"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:04:01.045">${status} = PASS</msg>
<msg level="INFO" timestamp="20171020 13:04:01.045">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:04:01.045" starttime="20171020 13:03:59.480"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:04:01.046">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:04:01.046" starttime="20171020 13:04:01.045"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:04:01.047">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:04:01.047" starttime="20171020 13:04:01.046"></status>
</kw>
<status status="PASS" endtime="20171020 13:04:01.047" starttime="20171020 13:03:59.476"></status>
</kw>
<status status="PASS" endtime="20171020 13:04:01.047" starttime="20171020 13:03:59.476"></status>
</kw>
<status status="PASS" endtime="20171020 13:04:01.047" starttime="20171020 13:03:59.475"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:04:01.048">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" endtime="20171020 13:04:01.048" starttime="20171020 13:04:01.047"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:04:01.050">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" endtime="20171020 13:04:01.050" starttime="20171020 13:04:01.049"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:04:01.051">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" endtime="20171020 13:04:01.051" starttime="20171020 13:04:01.050"></status>
</kw>
<status status="PASS" endtime="20171020 13:04:01.051" starttime="20171020 13:04:01.050"></status>
</kw>
<status status="PASS" endtime="20171020 13:04:01.051" starttime="20171020 13:04:01.048"></status>
</kw>
<status status="PASS" endtime="20171020 13:04:01.051" starttime="20171020 13:04:01.048"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:04:04.687">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20171020 13:04:04.688">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:04:04.688" starttime="20171020 13:04:01.051"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:04:04.690">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171020 13:04:04.690" starttime="20171020 13:04:04.690"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:04:04.691">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171020 13:04:04.691" starttime="20171020 13:04:04.691"></status>
</kw>
<status status="PASS" endtime="20171020 13:04:04.691" starttime="20171020 13:04:04.690"></status>
</kw>
<status status="PASS" endtime="20171020 13:04:04.691" starttime="20171020 13:04:04.689"></status>
</kw>
<status status="PASS" endtime="20171020 13:04:04.691" starttime="20171020 13:04:04.688"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171020 13:04:04.692">Delete All Sessions</msg>
<status status="PASS" endtime="20171020 13:04:04.692" starttime="20171020 13:04:04.692"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:04:04.692">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:04:04.692" starttime="20171020 13:03:59.475"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:04:04.693">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:04:04.693" starttime="20171020 13:04:04.692"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:04:04.693">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171020 13:04:04.694">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171020 13:04:04.694">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20171020 13:04:04.694" starttime="20171020 13:04:04.693"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:04:04.694">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status status="PASS" endtime="20171020 13:04:04.694" starttime="20171020 13:03:59.474"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:04:04.694">${host_state} = Running</msg>
<status status="PASS" endtime="20171020 13:04:04.694" starttime="20171020 13:03:59.474"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status status="PASS" endtime="20171020 13:04:04.695" starttime="20171020 13:04:04.695"></status>
</kw>
<kw name="Is OS Booted" library="state_manager">
<doc>Check OS status.</doc>
<kw name="Get Host State Attribute" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>BootProgress</arg>
</arguments>
<assign>
<var>${boot_stage}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>${host_attribute}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:04:04.700">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171020 13:04:04.701" starttime="20171020 13:04:04.700"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:04:04.701">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171020 13:04:04.701" starttime="20171020 13:04:04.701"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:04:04.702">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171020 13:04:04.702" starttime="20171020 13:04:04.702"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:04:04.703">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171020 13:04:04.703" starttime="20171020 13:04:04.702"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:04:05.527">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171020 13:04:05.527" starttime="20171020 13:04:04.703"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:04:05.527">${status} = PASS</msg>
<msg level="INFO" timestamp="20171020 13:04:05.527">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:04:05.527" starttime="20171020 13:04:04.703"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:04:05.528">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:04:05.528" starttime="20171020 13:04:05.528"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:04:05.529">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:04:05.529" starttime="20171020 13:04:05.528"></status>
</kw>
<status status="PASS" endtime="20171020 13:04:05.529" starttime="20171020 13:04:04.699"></status>
</kw>
<status status="PASS" endtime="20171020 13:04:05.529" starttime="20171020 13:04:04.699"></status>
</kw>
<status status="PASS" endtime="20171020 13:04:05.529" starttime="20171020 13:04:04.698"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:04:05.530">${base_uri} = /xyz/openbmc_project/state/host0//attr/BootProgress</msg>
<status status="PASS" endtime="20171020 13:04:05.530" starttime="20171020 13:04:05.529"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:04:05.532">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status status="PASS" endtime="20171020 13:04:05.532" starttime="20171020 13:04:05.532"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:04:05.533">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status status="PASS" endtime="20171020 13:04:05.533" starttime="20171020 13:04:05.533"></status>
</kw>
<status status="PASS" endtime="20171020 13:04:05.534" starttime="20171020 13:04:05.532"></status>
</kw>
<status status="PASS" endtime="20171020 13:04:05.534" starttime="20171020 13:04:05.531"></status>
</kw>
<status status="PASS" endtime="20171020 13:04:05.534" starttime="20171020 13:04:05.530"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:04:07.640">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/BootProgress, headers=None json=None</msg>
<msg level="INFO" timestamp="20171020 13:04:07.640">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:04:07.640" starttime="20171020 13:04:05.534"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:04:07.642">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171020 13:04:07.642" starttime="20171020 13:04:07.642"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:04:07.643">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171020 13:04:07.643" starttime="20171020 13:04:07.643"></status>
</kw>
<status status="PASS" endtime="20171020 13:04:07.643" starttime="20171020 13:04:07.642"></status>
</kw>
<status status="PASS" endtime="20171020 13:04:07.644" starttime="20171020 13:04:07.641"></status>
</kw>
<status status="PASS" endtime="20171020 13:04:07.644" starttime="20171020 13:04:07.641"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171020 13:04:07.644">Delete All Sessions</msg>
<status status="PASS" endtime="20171020 13:04:07.644" starttime="20171020 13:04:07.644"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:04:07.644">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:04:07.645" starttime="20171020 13:04:04.697"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:04:07.645">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:04:07.645" starttime="20171020 13:04:07.645"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:04:07.646">To JSON using : content={
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171020 13:04:07.646">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171020 13:04:07.646">${content} = {u'data': u'xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20171020 13:04:07.646" starttime="20171020 13:04:07.646"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:04:07.646">${state} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart</msg>
<status status="PASS" endtime="20171020 13:04:07.646" starttime="20171020 13:04:04.696"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:04:07.647">${boot_stage} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart</msg>
<status status="PASS" endtime="20171020 13:04:07.647" starttime="20171020 13:04:04.696"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${OS_BOOT_START}</arg>
<arg>${boot_stage}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:04:07.647">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:04:07.647" starttime="20171020 13:04:07.647"></status>
</kw>
<kw name="Get Host State Attribute" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>OperatingSystemState</arg>
</arguments>
<assign>
<var>${os_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>${host_attribute}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:04:07.651">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171020 13:04:07.652" starttime="20171020 13:04:07.651"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:04:07.652">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171020 13:04:07.652" starttime="20171020 13:04:07.652"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:04:07.653">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171020 13:04:07.653" starttime="20171020 13:04:07.652"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:04:07.654">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171020 13:04:07.654" starttime="20171020 13:04:07.653"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:04:08.615">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171020 13:04:08.615" starttime="20171020 13:04:07.654"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:04:08.615">${status} = PASS</msg>
<msg level="INFO" timestamp="20171020 13:04:08.615">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:04:08.615" starttime="20171020 13:04:07.654"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:04:08.616">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:04:08.616" starttime="20171020 13:04:08.616"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:04:08.618">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:04:08.618" starttime="20171020 13:04:08.617"></status>
</kw>
<status status="PASS" endtime="20171020 13:04:08.618" starttime="20171020 13:04:07.650"></status>
</kw>
<status status="PASS" endtime="20171020 13:04:08.618" starttime="20171020 13:04:07.650"></status>
</kw>
<status status="PASS" endtime="20171020 13:04:08.618" starttime="20171020 13:04:07.649"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:04:08.619">${base_uri} = /xyz/openbmc_project/state/host0//attr/OperatingSystemState</msg>
<status status="PASS" endtime="20171020 13:04:08.619" starttime="20171020 13:04:08.618"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:04:08.622">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/OperatingSystemState, method:Get, args:{}</msg>
<status status="PASS" endtime="20171020 13:04:08.622" starttime="20171020 13:04:08.621"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:04:08.624">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/OperatingSystemState, method:Get, args:{}</msg>
<status status="PASS" endtime="20171020 13:04:08.624" starttime="20171020 13:04:08.623"></status>
</kw>
<status status="PASS" endtime="20171020 13:04:08.624" starttime="20171020 13:04:08.623"></status>
</kw>
<status status="PASS" endtime="20171020 13:04:08.624" starttime="20171020 13:04:08.620"></status>
</kw>
<status status="PASS" endtime="20171020 13:04:08.624" starttime="20171020 13:04:08.620"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:04:10.387">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/OperatingSystemState, headers=None json=None</msg>
<msg level="INFO" timestamp="20171020 13:04:10.388">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:04:10.388" starttime="20171020 13:04:08.624"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:04:10.390">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171020 13:04:10.390" starttime="20171020 13:04:10.390"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:04:10.391">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171020 13:04:10.391" starttime="20171020 13:04:10.391"></status>
</kw>
<status status="PASS" endtime="20171020 13:04:10.391" starttime="20171020 13:04:10.390"></status>
</kw>
<status status="PASS" endtime="20171020 13:04:10.391" starttime="20171020 13:04:10.389"></status>
</kw>
<status status="PASS" endtime="20171020 13:04:10.392" starttime="20171020 13:04:10.389"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171020 13:04:10.392">Delete All Sessions</msg>
<status status="PASS" endtime="20171020 13:04:10.392" starttime="20171020 13:04:10.392"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:04:10.392">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:04:10.392" starttime="20171020 13:04:07.648"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:04:10.393">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:04:10.393" starttime="20171020 13:04:10.393"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:04:10.394">To JSON using : content={
  "data": "xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171020 13:04:10.394">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171020 13:04:10.394">${content} = {u'data': u'xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20171020 13:04:10.394" starttime="20171020 13:04:10.393"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:04:10.394">${state} = xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive</msg>
<status status="PASS" endtime="20171020 13:04:10.394" starttime="20171020 13:04:07.648"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:04:10.394">${os_state} = xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive</msg>
<status status="PASS" endtime="20171020 13:04:10.394" starttime="20171020 13:04:07.647"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${OS_BOOT_COMPLETE}</arg>
<arg>${os_state}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:04:10.395">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg level="FAIL" timestamp="20171020 13:04:10.395">xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.BootComplete != xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive</msg>
<status status="FAIL" endtime="20171020 13:04:10.395" starttime="20171020 13:04:10.395"></status>
</kw>
<status status="FAIL" endtime="20171020 13:04:10.395" starttime="20171020 13:04:04.695"></status>
</kw>
<status status="FAIL" endtime="20171020 13:04:10.396" starttime="20171020 13:03:53.446"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:04:20.404">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171020 13:04:20.405" starttime="20171020 13:04:20.404"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:04:20.405">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171020 13:04:20.405" starttime="20171020 13:04:20.405"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:04:20.406">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171020 13:04:20.406" starttime="20171020 13:04:20.406"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:04:20.407">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171020 13:04:20.407" starttime="20171020 13:04:20.406"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:04:20.789">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171020 13:04:20.789" starttime="20171020 13:04:20.407"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:04:20.789">${status} = PASS</msg>
<msg level="INFO" timestamp="20171020 13:04:20.789">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:04:20.789" starttime="20171020 13:04:20.407"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:04:20.790">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:04:20.790" starttime="20171020 13:04:20.790"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:04:20.791">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:04:20.791" starttime="20171020 13:04:20.790"></status>
</kw>
<status status="PASS" endtime="20171020 13:04:20.791" starttime="20171020 13:04:20.403"></status>
</kw>
<status status="PASS" endtime="20171020 13:04:20.791" starttime="20171020 13:04:20.402"></status>
</kw>
<status status="PASS" endtime="20171020 13:04:20.791" starttime="20171020 13:04:20.401"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:04:20.792">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" endtime="20171020 13:04:20.792" starttime="20171020 13:04:20.791"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:04:20.795">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" endtime="20171020 13:04:20.795" starttime="20171020 13:04:20.793"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:04:20.796">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" endtime="20171020 13:04:20.796" starttime="20171020 13:04:20.796"></status>
</kw>
<status status="PASS" endtime="20171020 13:04:20.796" starttime="20171020 13:04:20.795"></status>
</kw>
<status status="PASS" endtime="20171020 13:04:20.796" starttime="20171020 13:04:20.792"></status>
</kw>
<status status="PASS" endtime="20171020 13:04:20.796" starttime="20171020 13:04:20.792"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:04:21.077">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20171020 13:04:21.077">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:04:21.077" starttime="20171020 13:04:20.796"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:04:21.079">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171020 13:04:21.079" starttime="20171020 13:04:21.078"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:04:21.080">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171020 13:04:21.080" starttime="20171020 13:04:21.080"></status>
</kw>
<status status="PASS" endtime="20171020 13:04:21.081" starttime="20171020 13:04:21.079"></status>
</kw>
<status status="PASS" endtime="20171020 13:04:21.081" starttime="20171020 13:04:21.078"></status>
</kw>
<status status="PASS" endtime="20171020 13:04:21.081" starttime="20171020 13:04:21.077"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171020 13:04:21.081">Delete All Sessions</msg>
<status status="PASS" endtime="20171020 13:04:21.081" starttime="20171020 13:04:21.081"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:04:21.081">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:04:21.081" starttime="20171020 13:04:20.401"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:04:21.082">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:04:21.082" starttime="20171020 13:04:21.082"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:04:21.083">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171020 13:04:21.083">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171020 13:04:21.083">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20171020 13:04:21.083" starttime="20171020 13:04:21.082"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:04:21.083">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status status="PASS" endtime="20171020 13:04:21.083" starttime="20171020 13:04:20.400"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:04:21.084">${power_state} = On</msg>
<status status="PASS" endtime="20171020 13:04:21.084" starttime="20171020 13:04:20.399"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status status="PASS" endtime="20171020 13:04:21.084" starttime="20171020 13:04:21.084"></status>
</kw>
<status status="PASS" endtime="20171020 13:04:21.084" starttime="20171020 13:04:20.398"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:04:21.088">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171020 13:04:21.088" starttime="20171020 13:04:21.087"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:04:21.089">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171020 13:04:21.089" starttime="20171020 13:04:21.088"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:04:21.089">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171020 13:04:21.090" starttime="20171020 13:04:21.089"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:04:21.090">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171020 13:04:21.090" starttime="20171020 13:04:21.090"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:04:21.722">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171020 13:04:21.723" starttime="20171020 13:04:21.091"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:04:21.723">${status} = PASS</msg>
<msg level="INFO" timestamp="20171020 13:04:21.723">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:04:21.723" starttime="20171020 13:04:21.091"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:04:21.723">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:04:21.724" starttime="20171020 13:04:21.723"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:04:21.724">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:04:21.724" starttime="20171020 13:04:21.724"></status>
</kw>
<status status="PASS" endtime="20171020 13:04:21.724" starttime="20171020 13:04:21.087"></status>
</kw>
<status status="PASS" endtime="20171020 13:04:21.725" starttime="20171020 13:04:21.087"></status>
</kw>
<status status="PASS" endtime="20171020 13:04:21.725" starttime="20171020 13:04:21.086"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:04:21.725">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" endtime="20171020 13:04:21.725" starttime="20171020 13:04:21.725"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:04:21.728">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" endtime="20171020 13:04:21.728" starttime="20171020 13:04:21.727"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:04:21.729">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" endtime="20171020 13:04:21.729" starttime="20171020 13:04:21.728"></status>
</kw>
<status status="PASS" endtime="20171020 13:04:21.729" starttime="20171020 13:04:21.728"></status>
</kw>
<status status="PASS" endtime="20171020 13:04:21.729" starttime="20171020 13:04:21.726"></status>
</kw>
<status status="PASS" endtime="20171020 13:04:21.729" starttime="20171020 13:04:21.726"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:04:22.132">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20171020 13:04:22.132">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:04:22.132" starttime="20171020 13:04:21.729"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:04:22.135">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171020 13:04:22.135" starttime="20171020 13:04:22.134"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:04:22.136">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171020 13:04:22.136" starttime="20171020 13:04:22.136"></status>
</kw>
<status status="PASS" endtime="20171020 13:04:22.136" starttime="20171020 13:04:22.135"></status>
</kw>
<status status="PASS" endtime="20171020 13:04:22.137" starttime="20171020 13:04:22.133"></status>
</kw>
<status status="PASS" endtime="20171020 13:04:22.137" starttime="20171020 13:04:22.132"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171020 13:04:22.137">Delete All Sessions</msg>
<status status="PASS" endtime="20171020 13:04:22.137" starttime="20171020 13:04:22.137"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:04:22.137">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:04:22.137" starttime="20171020 13:04:21.085"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:04:22.138">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:04:22.138" starttime="20171020 13:04:22.138"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:04:22.139">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171020 13:04:22.139">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171020 13:04:22.139">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20171020 13:04:22.139" starttime="20171020 13:04:22.138"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:04:22.139">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status status="PASS" endtime="20171020 13:04:22.139" starttime="20171020 13:04:21.085"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:04:22.139">${host_state} = Running</msg>
<status status="PASS" endtime="20171020 13:04:22.139" starttime="20171020 13:04:21.084"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status status="PASS" endtime="20171020 13:04:22.140" starttime="20171020 13:04:22.140"></status>
</kw>
<kw name="Is OS Booted" library="state_manager">
<doc>Check OS status.</doc>
<kw name="Get Host State Attribute" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>BootProgress</arg>
</arguments>
<assign>
<var>${boot_stage}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>${host_attribute}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:04:22.145">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171020 13:04:22.146" starttime="20171020 13:04:22.145"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:04:22.147">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171020 13:04:22.147" starttime="20171020 13:04:22.146"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:04:22.148">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171020 13:04:22.148" starttime="20171020 13:04:22.147"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:04:22.149">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171020 13:04:22.149" starttime="20171020 13:04:22.148"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:04:23.645">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171020 13:04:23.646" starttime="20171020 13:04:22.150"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:04:23.646">${status} = PASS</msg>
<msg level="INFO" timestamp="20171020 13:04:23.646">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:04:23.646" starttime="20171020 13:04:22.149"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:04:23.647">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:04:23.647" starttime="20171020 13:04:23.646"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:04:23.647">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:04:23.647" starttime="20171020 13:04:23.647"></status>
</kw>
<status status="PASS" endtime="20171020 13:04:23.647" starttime="20171020 13:04:22.144"></status>
</kw>
<status status="PASS" endtime="20171020 13:04:23.648" starttime="20171020 13:04:22.144"></status>
</kw>
<status status="PASS" endtime="20171020 13:04:23.648" starttime="20171020 13:04:22.143"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:04:23.648">${base_uri} = /xyz/openbmc_project/state/host0//attr/BootProgress</msg>
<status status="PASS" endtime="20171020 13:04:23.648" starttime="20171020 13:04:23.648"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:04:23.651">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status status="PASS" endtime="20171020 13:04:23.651" starttime="20171020 13:04:23.650"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:04:23.652">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status status="PASS" endtime="20171020 13:04:23.652" starttime="20171020 13:04:23.652"></status>
</kw>
<status status="PASS" endtime="20171020 13:04:23.652" starttime="20171020 13:04:23.651"></status>
</kw>
<status status="PASS" endtime="20171020 13:04:23.652" starttime="20171020 13:04:23.649"></status>
</kw>
<status status="PASS" endtime="20171020 13:04:23.652" starttime="20171020 13:04:23.649"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:04:24.053">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/BootProgress, headers=None json=None</msg>
<msg level="INFO" timestamp="20171020 13:04:24.053">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:04:24.053" starttime="20171020 13:04:23.653"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:04:24.055">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171020 13:04:24.055" starttime="20171020 13:04:24.054"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:04:24.056">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171020 13:04:24.056" starttime="20171020 13:04:24.056"></status>
</kw>
<status status="PASS" endtime="20171020 13:04:24.056" starttime="20171020 13:04:24.055"></status>
</kw>
<status status="PASS" endtime="20171020 13:04:24.056" starttime="20171020 13:04:24.054"></status>
</kw>
<status status="PASS" endtime="20171020 13:04:24.056" starttime="20171020 13:04:24.053"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171020 13:04:24.057">Delete All Sessions</msg>
<status status="PASS" endtime="20171020 13:04:24.057" starttime="20171020 13:04:24.057"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:04:24.057">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:04:24.057" starttime="20171020 13:04:22.142"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:04:24.058">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:04:24.058" starttime="20171020 13:04:24.057"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:04:24.058">To JSON using : content={
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171020 13:04:24.058">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171020 13:04:24.058">${content} = {u'data': u'xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20171020 13:04:24.058" starttime="20171020 13:04:24.058"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:04:24.059">${state} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart</msg>
<status status="PASS" endtime="20171020 13:04:24.059" starttime="20171020 13:04:22.141"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:04:24.059">${boot_stage} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart</msg>
<status status="PASS" endtime="20171020 13:04:24.059" starttime="20171020 13:04:22.140"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${OS_BOOT_START}</arg>
<arg>${boot_stage}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:04:24.060">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:04:24.060" starttime="20171020 13:04:24.059"></status>
</kw>
<kw name="Get Host State Attribute" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>OperatingSystemState</arg>
</arguments>
<assign>
<var>${os_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>${host_attribute}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:04:24.065">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171020 13:04:24.065" starttime="20171020 13:04:24.065"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:04:24.066">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171020 13:04:24.066" starttime="20171020 13:04:24.066"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:04:24.067">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171020 13:04:24.067" starttime="20171020 13:04:24.066"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:04:24.067">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171020 13:04:24.067" starttime="20171020 13:04:24.067"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:04:25.437">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171020 13:04:25.437" starttime="20171020 13:04:24.068"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:04:25.437">${status} = PASS</msg>
<msg level="INFO" timestamp="20171020 13:04:25.437">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:04:25.437" starttime="20171020 13:04:24.068"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:04:25.438">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:04:25.438" starttime="20171020 13:04:25.437"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:04:25.438">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:04:25.439" starttime="20171020 13:04:25.438"></status>
</kw>
<status status="PASS" endtime="20171020 13:04:25.439" starttime="20171020 13:04:24.063"></status>
</kw>
<status status="PASS" endtime="20171020 13:04:25.439" starttime="20171020 13:04:24.063"></status>
</kw>
<status status="PASS" endtime="20171020 13:04:25.439" starttime="20171020 13:04:24.062"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:04:25.439">${base_uri} = /xyz/openbmc_project/state/host0//attr/OperatingSystemState</msg>
<status status="PASS" endtime="20171020 13:04:25.440" starttime="20171020 13:04:25.439"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:04:25.442">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/OperatingSystemState, method:Get, args:{}</msg>
<status status="PASS" endtime="20171020 13:04:25.442" starttime="20171020 13:04:25.441"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:04:25.444">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/OperatingSystemState, method:Get, args:{}</msg>
<status status="PASS" endtime="20171020 13:04:25.444" starttime="20171020 13:04:25.443"></status>
</kw>
<status status="PASS" endtime="20171020 13:04:25.444" starttime="20171020 13:04:25.442"></status>
</kw>
<status status="PASS" endtime="20171020 13:04:25.444" starttime="20171020 13:04:25.440"></status>
</kw>
<status status="PASS" endtime="20171020 13:04:25.444" starttime="20171020 13:04:25.440"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:04:25.735">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/OperatingSystemState, headers=None json=None</msg>
<msg level="INFO" timestamp="20171020 13:04:25.735">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:04:25.735" starttime="20171020 13:04:25.444"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:04:25.737">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171020 13:04:25.737" starttime="20171020 13:04:25.737"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:04:25.741">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171020 13:04:25.741" starttime="20171020 13:04:25.738"></status>
</kw>
<status status="PASS" endtime="20171020 13:04:25.741" starttime="20171020 13:04:25.738"></status>
</kw>
<status status="PASS" endtime="20171020 13:04:25.741" starttime="20171020 13:04:25.736"></status>
</kw>
<status status="PASS" endtime="20171020 13:04:25.741" starttime="20171020 13:04:25.736"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171020 13:04:25.742">Delete All Sessions</msg>
<status status="PASS" endtime="20171020 13:04:25.742" starttime="20171020 13:04:25.742"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:04:25.742">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:04:25.742" starttime="20171020 13:04:24.061"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:04:25.743">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:04:25.743" starttime="20171020 13:04:25.742"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:04:25.743">To JSON using : content={
  "data": "xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171020 13:04:25.744">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171020 13:04:25.744">${content} = {u'data': u'xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20171020 13:04:25.744" starttime="20171020 13:04:25.743"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:04:25.744">${state} = xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive</msg>
<status status="PASS" endtime="20171020 13:04:25.744" starttime="20171020 13:04:24.060"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:04:25.744">${os_state} = xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive</msg>
<status status="PASS" endtime="20171020 13:04:25.744" starttime="20171020 13:04:24.060"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${OS_BOOT_COMPLETE}</arg>
<arg>${os_state}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:04:25.745">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg level="FAIL" timestamp="20171020 13:04:25.746">xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.BootComplete != xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive</msg>
<status status="FAIL" endtime="20171020 13:04:25.746" starttime="20171020 13:04:25.745"></status>
</kw>
<status status="FAIL" endtime="20171020 13:04:25.746" starttime="20171020 13:04:22.140"></status>
</kw>
<status status="FAIL" endtime="20171020 13:04:25.746" starttime="20171020 13:04:20.396"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:04:35.757">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171020 13:04:35.757" starttime="20171020 13:04:35.756"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:04:35.758">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171020 13:04:35.758" starttime="20171020 13:04:35.757"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:04:35.758">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171020 13:04:35.759" starttime="20171020 13:04:35.758"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:04:35.759">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171020 13:04:35.759" starttime="20171020 13:04:35.759"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:04:36.679">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171020 13:04:36.679" starttime="20171020 13:04:35.760"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:04:36.679">${status} = PASS</msg>
<msg level="INFO" timestamp="20171020 13:04:36.679">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:04:36.679" starttime="20171020 13:04:35.760"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:04:36.680">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:04:36.680" starttime="20171020 13:04:36.679"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:04:36.681">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:04:36.681" starttime="20171020 13:04:36.680"></status>
</kw>
<status status="PASS" endtime="20171020 13:04:36.681" starttime="20171020 13:04:35.755"></status>
</kw>
<status status="PASS" endtime="20171020 13:04:36.681" starttime="20171020 13:04:35.754"></status>
</kw>
<status status="PASS" endtime="20171020 13:04:36.681" starttime="20171020 13:04:35.753"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:04:36.682">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" endtime="20171020 13:04:36.682" starttime="20171020 13:04:36.682"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:04:36.686">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" endtime="20171020 13:04:36.686" starttime="20171020 13:04:36.685"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:04:36.687">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" endtime="20171020 13:04:36.687" starttime="20171020 13:04:36.687"></status>
</kw>
<status status="PASS" endtime="20171020 13:04:36.687" starttime="20171020 13:04:36.686"></status>
</kw>
<status status="PASS" endtime="20171020 13:04:36.688" starttime="20171020 13:04:36.684"></status>
</kw>
<status status="PASS" endtime="20171020 13:04:36.688" starttime="20171020 13:04:36.683"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:04:36.834">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20171020 13:04:36.834">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:04:36.834" starttime="20171020 13:04:36.688"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:04:36.836">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171020 13:04:36.836" starttime="20171020 13:04:36.835"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:04:36.837">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171020 13:04:36.837" starttime="20171020 13:04:36.837"></status>
</kw>
<status status="PASS" endtime="20171020 13:04:36.837" starttime="20171020 13:04:36.836"></status>
</kw>
<status status="PASS" endtime="20171020 13:04:36.837" starttime="20171020 13:04:36.835"></status>
</kw>
<status status="PASS" endtime="20171020 13:04:36.837" starttime="20171020 13:04:36.834"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171020 13:04:36.838">Delete All Sessions</msg>
<status status="PASS" endtime="20171020 13:04:36.838" starttime="20171020 13:04:36.838"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:04:36.838">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:04:36.838" starttime="20171020 13:04:35.753"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:04:36.839">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:04:36.839" starttime="20171020 13:04:36.838"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:04:36.839">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171020 13:04:36.839">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171020 13:04:36.839">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20171020 13:04:36.839" starttime="20171020 13:04:36.839"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:04:36.840">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status status="PASS" endtime="20171020 13:04:36.840" starttime="20171020 13:04:35.752"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:04:36.840">${power_state} = On</msg>
<status status="PASS" endtime="20171020 13:04:36.840" starttime="20171020 13:04:35.751"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status status="PASS" endtime="20171020 13:04:36.841" starttime="20171020 13:04:36.840"></status>
</kw>
<status status="PASS" endtime="20171020 13:04:36.841" starttime="20171020 13:04:35.751"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:04:36.845">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171020 13:04:36.845" starttime="20171020 13:04:36.844"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:04:36.846">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171020 13:04:36.846" starttime="20171020 13:04:36.846"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:04:36.847">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171020 13:04:36.847" starttime="20171020 13:04:36.846"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:04:36.848">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171020 13:04:36.848" starttime="20171020 13:04:36.847"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:04:37.511">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171020 13:04:37.512" starttime="20171020 13:04:36.848"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:04:37.512">${status} = PASS</msg>
<msg level="INFO" timestamp="20171020 13:04:37.512">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:04:37.512" starttime="20171020 13:04:36.848"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:04:37.513">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:04:37.513" starttime="20171020 13:04:37.512"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:04:37.513">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:04:37.514" starttime="20171020 13:04:37.513"></status>
</kw>
<status status="PASS" endtime="20171020 13:04:37.514" starttime="20171020 13:04:36.844"></status>
</kw>
<status status="PASS" endtime="20171020 13:04:37.514" starttime="20171020 13:04:36.843"></status>
</kw>
<status status="PASS" endtime="20171020 13:04:37.514" starttime="20171020 13:04:36.842"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:04:37.514">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" endtime="20171020 13:04:37.515" starttime="20171020 13:04:37.514"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:04:37.517">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" endtime="20171020 13:04:37.517" starttime="20171020 13:04:37.516"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:04:37.518">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" endtime="20171020 13:04:37.518" starttime="20171020 13:04:37.518"></status>
</kw>
<status status="PASS" endtime="20171020 13:04:37.518" starttime="20171020 13:04:37.517"></status>
</kw>
<status status="PASS" endtime="20171020 13:04:37.518" starttime="20171020 13:04:37.515"></status>
</kw>
<status status="PASS" endtime="20171020 13:04:37.518" starttime="20171020 13:04:37.515"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:04:37.797">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20171020 13:04:37.797">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:04:37.797" starttime="20171020 13:04:37.518"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:04:37.799">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171020 13:04:37.799" starttime="20171020 13:04:37.799"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:04:37.800">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171020 13:04:37.800" starttime="20171020 13:04:37.800"></status>
</kw>
<status status="PASS" endtime="20171020 13:04:37.800" starttime="20171020 13:04:37.799"></status>
</kw>
<status status="PASS" endtime="20171020 13:04:37.801" starttime="20171020 13:04:37.798"></status>
</kw>
<status status="PASS" endtime="20171020 13:04:37.801" starttime="20171020 13:04:37.797"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171020 13:04:37.801">Delete All Sessions</msg>
<status status="PASS" endtime="20171020 13:04:37.801" starttime="20171020 13:04:37.801"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:04:37.801">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:04:37.801" starttime="20171020 13:04:36.842"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:04:37.802">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:04:37.802" starttime="20171020 13:04:37.802"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:04:37.803">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171020 13:04:37.803">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171020 13:04:37.803">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20171020 13:04:37.803" starttime="20171020 13:04:37.802"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:04:37.803">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status status="PASS" endtime="20171020 13:04:37.803" starttime="20171020 13:04:36.841"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:04:37.803">${host_state} = Running</msg>
<status status="PASS" endtime="20171020 13:04:37.803" starttime="20171020 13:04:36.841"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status status="PASS" endtime="20171020 13:04:37.804" starttime="20171020 13:04:37.804"></status>
</kw>
<kw name="Is OS Booted" library="state_manager">
<doc>Check OS status.</doc>
<kw name="Get Host State Attribute" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>BootProgress</arg>
</arguments>
<assign>
<var>${boot_stage}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>${host_attribute}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:04:37.809">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171020 13:04:37.809" starttime="20171020 13:04:37.808"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:04:37.810">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171020 13:04:37.810" starttime="20171020 13:04:37.809"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:04:37.810">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171020 13:04:37.810" starttime="20171020 13:04:37.810"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:04:37.811">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171020 13:04:37.811" starttime="20171020 13:04:37.811"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:04:38.806">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171020 13:04:38.806" starttime="20171020 13:04:37.812"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:04:38.806">${status} = PASS</msg>
<msg level="INFO" timestamp="20171020 13:04:38.807">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:04:38.807" starttime="20171020 13:04:37.811"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:04:38.807">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:04:38.807" starttime="20171020 13:04:38.807"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:04:38.808">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:04:38.808" starttime="20171020 13:04:38.808"></status>
</kw>
<status status="PASS" endtime="20171020 13:04:38.808" starttime="20171020 13:04:37.808"></status>
</kw>
<status status="PASS" endtime="20171020 13:04:38.808" starttime="20171020 13:04:37.808"></status>
</kw>
<status status="PASS" endtime="20171020 13:04:38.808" starttime="20171020 13:04:37.807"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:04:38.809">${base_uri} = /xyz/openbmc_project/state/host0//attr/BootProgress</msg>
<status status="PASS" endtime="20171020 13:04:38.809" starttime="20171020 13:04:38.809"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:04:38.811">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status status="PASS" endtime="20171020 13:04:38.811" starttime="20171020 13:04:38.811"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:04:38.812">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status status="PASS" endtime="20171020 13:04:38.812" starttime="20171020 13:04:38.812"></status>
</kw>
<status status="PASS" endtime="20171020 13:04:38.812" starttime="20171020 13:04:38.811"></status>
</kw>
<status status="PASS" endtime="20171020 13:04:38.813" starttime="20171020 13:04:38.810"></status>
</kw>
<status status="PASS" endtime="20171020 13:04:38.813" starttime="20171020 13:04:38.809"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:04:39.178">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/BootProgress, headers=None json=None</msg>
<msg level="INFO" timestamp="20171020 13:04:39.179">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:04:39.179" starttime="20171020 13:04:38.813"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:04:39.181">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171020 13:04:39.181" starttime="20171020 13:04:39.180"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:04:39.181">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171020 13:04:39.182" starttime="20171020 13:04:39.181"></status>
</kw>
<status status="PASS" endtime="20171020 13:04:39.182" starttime="20171020 13:04:39.181"></status>
</kw>
<status status="PASS" endtime="20171020 13:04:39.182" starttime="20171020 13:04:39.180"></status>
</kw>
<status status="PASS" endtime="20171020 13:04:39.182" starttime="20171020 13:04:39.179"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171020 13:04:39.182">Delete All Sessions</msg>
<status status="PASS" endtime="20171020 13:04:39.182" starttime="20171020 13:04:39.182"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:04:39.182">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:04:39.183" starttime="20171020 13:04:37.806"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:04:39.183">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:04:39.183" starttime="20171020 13:04:39.183"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:04:39.184">To JSON using : content={
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171020 13:04:39.184">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171020 13:04:39.184">${content} = {u'data': u'xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20171020 13:04:39.184" starttime="20171020 13:04:39.183"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:04:39.184">${state} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart</msg>
<status status="PASS" endtime="20171020 13:04:39.184" starttime="20171020 13:04:37.805"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:04:39.185">${boot_stage} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart</msg>
<status status="PASS" endtime="20171020 13:04:39.185" starttime="20171020 13:04:37.805"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${OS_BOOT_START}</arg>
<arg>${boot_stage}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:04:39.185">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:04:39.185" starttime="20171020 13:04:39.185"></status>
</kw>
<kw name="Get Host State Attribute" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>OperatingSystemState</arg>
</arguments>
<assign>
<var>${os_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>${host_attribute}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:04:39.189">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171020 13:04:39.190" starttime="20171020 13:04:39.189"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:04:39.190">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171020 13:04:39.190" starttime="20171020 13:04:39.190"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:04:39.191">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171020 13:04:39.191" starttime="20171020 13:04:39.190"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:04:39.192">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171020 13:04:39.192" starttime="20171020 13:04:39.191"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:04:40.368">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171020 13:04:40.368" starttime="20171020 13:04:39.193"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:04:40.368">${status} = PASS</msg>
<msg level="INFO" timestamp="20171020 13:04:40.368">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:04:40.368" starttime="20171020 13:04:39.192"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:04:40.369">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:04:40.369" starttime="20171020 13:04:40.369"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:04:40.370">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:04:40.370" starttime="20171020 13:04:40.369"></status>
</kw>
<status status="PASS" endtime="20171020 13:04:40.370" starttime="20171020 13:04:39.188"></status>
</kw>
<status status="PASS" endtime="20171020 13:04:40.370" starttime="20171020 13:04:39.188"></status>
</kw>
<status status="PASS" endtime="20171020 13:04:40.371" starttime="20171020 13:04:39.187"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:04:40.371">${base_uri} = /xyz/openbmc_project/state/host0//attr/OperatingSystemState</msg>
<status status="PASS" endtime="20171020 13:04:40.371" starttime="20171020 13:04:40.371"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:04:40.375">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/OperatingSystemState, method:Get, args:{}</msg>
<status status="PASS" endtime="20171020 13:04:40.375" starttime="20171020 13:04:40.373"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:04:40.376">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/OperatingSystemState, method:Get, args:{}</msg>
<status status="PASS" endtime="20171020 13:04:40.376" starttime="20171020 13:04:40.376"></status>
</kw>
<status status="PASS" endtime="20171020 13:04:40.376" starttime="20171020 13:04:40.375"></status>
</kw>
<status status="PASS" endtime="20171020 13:04:40.376" starttime="20171020 13:04:40.373"></status>
</kw>
<status status="PASS" endtime="20171020 13:04:40.376" starttime="20171020 13:04:40.372"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:04:40.965">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/OperatingSystemState, headers=None json=None</msg>
<msg level="INFO" timestamp="20171020 13:04:40.965">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:04:40.966" starttime="20171020 13:04:40.376"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:04:40.967">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171020 13:04:40.967" starttime="20171020 13:04:40.967"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:04:40.968">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171020 13:04:40.968" starttime="20171020 13:04:40.968"></status>
</kw>
<status status="PASS" endtime="20171020 13:04:40.969" starttime="20171020 13:04:40.968"></status>
</kw>
<status status="PASS" endtime="20171020 13:04:40.969" starttime="20171020 13:04:40.966"></status>
</kw>
<status status="PASS" endtime="20171020 13:04:40.969" starttime="20171020 13:04:40.966"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171020 13:04:40.969">Delete All Sessions</msg>
<status status="PASS" endtime="20171020 13:04:40.969" starttime="20171020 13:04:40.969"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:04:40.969">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:04:40.969" starttime="20171020 13:04:39.186"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:04:40.970">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:04:40.970" starttime="20171020 13:04:40.970"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:04:40.971">To JSON using : content={
  "data": "xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171020 13:04:40.971">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171020 13:04:40.971">${content} = {u'data': u'xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20171020 13:04:40.971" starttime="20171020 13:04:40.970"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:04:40.971">${state} = xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive</msg>
<status status="PASS" endtime="20171020 13:04:40.971" starttime="20171020 13:04:39.186"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:04:40.971">${os_state} = xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive</msg>
<status status="PASS" endtime="20171020 13:04:40.971" starttime="20171020 13:04:39.185"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${OS_BOOT_COMPLETE}</arg>
<arg>${os_state}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:04:40.972">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg level="FAIL" timestamp="20171020 13:04:40.972">xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.BootComplete != xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive</msg>
<status status="FAIL" endtime="20171020 13:04:40.972" starttime="20171020 13:04:40.972"></status>
</kw>
<status status="FAIL" endtime="20171020 13:04:40.973" starttime="20171020 13:04:37.805"></status>
</kw>
<status status="FAIL" endtime="20171020 13:04:40.973" starttime="20171020 13:04:35.748"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:04:50.979">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171020 13:04:50.979" starttime="20171020 13:04:50.978"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:04:50.980">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171020 13:04:50.980" starttime="20171020 13:04:50.979"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:04:50.980">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171020 13:04:50.980" starttime="20171020 13:04:50.980"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:04:50.981">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171020 13:04:50.981" starttime="20171020 13:04:50.981"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:04:51.853">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171020 13:04:51.853" starttime="20171020 13:04:50.982"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:04:51.853">${status} = PASS</msg>
<msg level="INFO" timestamp="20171020 13:04:51.853">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:04:51.853" starttime="20171020 13:04:50.981"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:04:51.854">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:04:51.854" starttime="20171020 13:04:51.854"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:04:51.855">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:04:51.855" starttime="20171020 13:04:51.855"></status>
</kw>
<status status="PASS" endtime="20171020 13:04:51.856" starttime="20171020 13:04:50.977"></status>
</kw>
<status status="PASS" endtime="20171020 13:04:51.856" starttime="20171020 13:04:50.977"></status>
</kw>
<status status="PASS" endtime="20171020 13:04:51.856" starttime="20171020 13:04:50.976"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:04:51.857">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" endtime="20171020 13:04:51.857" starttime="20171020 13:04:51.856"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:04:51.860">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" endtime="20171020 13:04:51.860" starttime="20171020 13:04:51.859"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:04:51.861">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" endtime="20171020 13:04:51.861" starttime="20171020 13:04:51.861"></status>
</kw>
<status status="PASS" endtime="20171020 13:04:51.861" starttime="20171020 13:04:51.860"></status>
</kw>
<status status="PASS" endtime="20171020 13:04:51.862" starttime="20171020 13:04:51.858"></status>
</kw>
<status status="PASS" endtime="20171020 13:04:51.862" starttime="20171020 13:04:51.857"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:04:51.926">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20171020 13:04:51.926">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:04:51.927" starttime="20171020 13:04:51.862"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:04:51.928">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171020 13:04:51.928" starttime="20171020 13:04:51.928"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:04:51.930">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171020 13:04:51.930" starttime="20171020 13:04:51.929"></status>
</kw>
<status status="PASS" endtime="20171020 13:04:51.930" starttime="20171020 13:04:51.929"></status>
</kw>
<status status="PASS" endtime="20171020 13:04:51.930" starttime="20171020 13:04:51.927"></status>
</kw>
<status status="PASS" endtime="20171020 13:04:51.930" starttime="20171020 13:04:51.927"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171020 13:04:51.931">Delete All Sessions</msg>
<status status="PASS" endtime="20171020 13:04:51.931" starttime="20171020 13:04:51.930"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:04:51.931">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:04:51.931" starttime="20171020 13:04:50.975"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:04:51.932">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:04:51.932" starttime="20171020 13:04:51.931"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:04:51.932">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171020 13:04:51.932">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171020 13:04:51.932">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20171020 13:04:51.932" starttime="20171020 13:04:51.932"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:04:51.933">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status status="PASS" endtime="20171020 13:04:51.933" starttime="20171020 13:04:50.975"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:04:51.933">${power_state} = On</msg>
<status status="PASS" endtime="20171020 13:04:51.933" starttime="20171020 13:04:50.974"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status status="PASS" endtime="20171020 13:04:51.934" starttime="20171020 13:04:51.933"></status>
</kw>
<status status="PASS" endtime="20171020 13:04:51.934" starttime="20171020 13:04:50.974"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:04:51.937">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171020 13:04:51.938" starttime="20171020 13:04:51.937"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:04:51.938">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171020 13:04:51.938" starttime="20171020 13:04:51.938"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:04:51.939">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171020 13:04:51.939" starttime="20171020 13:04:51.938"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:04:51.939">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171020 13:04:51.940" starttime="20171020 13:04:51.939"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:04:53.118">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171020 13:04:53.120" starttime="20171020 13:04:51.940"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:04:53.120">${status} = PASS</msg>
<msg level="INFO" timestamp="20171020 13:04:53.120">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:04:53.121" starttime="20171020 13:04:51.940"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:04:53.123">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:04:53.123" starttime="20171020 13:04:53.122"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:04:53.125">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:04:53.125" starttime="20171020 13:04:53.124"></status>
</kw>
<status status="PASS" endtime="20171020 13:04:53.126" starttime="20171020 13:04:51.936"></status>
</kw>
<status status="PASS" endtime="20171020 13:04:53.127" starttime="20171020 13:04:51.936"></status>
</kw>
<status status="PASS" endtime="20171020 13:04:53.128" starttime="20171020 13:04:51.935"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:04:53.130">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" endtime="20171020 13:04:53.130" starttime="20171020 13:04:53.129"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:04:53.139">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" endtime="20171020 13:04:53.140" starttime="20171020 13:04:53.136"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:04:53.144">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" endtime="20171020 13:04:53.145" starttime="20171020 13:04:53.143"></status>
</kw>
<status status="PASS" endtime="20171020 13:04:53.145" starttime="20171020 13:04:53.140"></status>
</kw>
<status status="PASS" endtime="20171020 13:04:53.145" starttime="20171020 13:04:53.133"></status>
</kw>
<status status="PASS" endtime="20171020 13:04:53.146" starttime="20171020 13:04:53.131"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:04:53.940">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20171020 13:04:53.941">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:04:53.941" starttime="20171020 13:04:53.146"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:04:53.943">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171020 13:04:53.943" starttime="20171020 13:04:53.942"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:04:53.944">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171020 13:04:53.944" starttime="20171020 13:04:53.944"></status>
</kw>
<status status="PASS" endtime="20171020 13:04:53.944" starttime="20171020 13:04:53.943"></status>
</kw>
<status status="PASS" endtime="20171020 13:04:53.945" starttime="20171020 13:04:53.942"></status>
</kw>
<status status="PASS" endtime="20171020 13:04:53.945" starttime="20171020 13:04:53.941"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171020 13:04:53.945">Delete All Sessions</msg>
<status status="PASS" endtime="20171020 13:04:53.945" starttime="20171020 13:04:53.945"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:04:53.945">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:04:53.946" starttime="20171020 13:04:51.935"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:04:53.946">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:04:53.946" starttime="20171020 13:04:53.946"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:04:53.947">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171020 13:04:53.947">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171020 13:04:53.947">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20171020 13:04:53.947" starttime="20171020 13:04:53.947"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:04:53.947">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status status="PASS" endtime="20171020 13:04:53.947" starttime="20171020 13:04:51.934"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:04:53.948">${host_state} = Running</msg>
<status status="PASS" endtime="20171020 13:04:53.948" starttime="20171020 13:04:51.934"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status status="PASS" endtime="20171020 13:04:53.948" starttime="20171020 13:04:53.948"></status>
</kw>
<kw name="Is OS Booted" library="state_manager">
<doc>Check OS status.</doc>
<kw name="Get Host State Attribute" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>BootProgress</arg>
</arguments>
<assign>
<var>${boot_stage}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>${host_attribute}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:04:53.953">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171020 13:04:53.953" starttime="20171020 13:04:53.952"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:04:53.954">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171020 13:04:53.954" starttime="20171020 13:04:53.953"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:04:53.954">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171020 13:04:53.954" starttime="20171020 13:04:53.954"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:04:53.955">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171020 13:04:53.955" starttime="20171020 13:04:53.955"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:04:55.061">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171020 13:04:55.061" starttime="20171020 13:04:53.956"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:04:55.061">${status} = PASS</msg>
<msg level="INFO" timestamp="20171020 13:04:55.061">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:04:55.061" starttime="20171020 13:04:53.955"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:04:55.062">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:04:55.062" starttime="20171020 13:04:55.062"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:04:55.063">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:04:55.063" starttime="20171020 13:04:55.062"></status>
</kw>
<status status="PASS" endtime="20171020 13:04:55.063" starttime="20171020 13:04:53.952"></status>
</kw>
<status status="PASS" endtime="20171020 13:04:55.063" starttime="20171020 13:04:53.951"></status>
</kw>
<status status="PASS" endtime="20171020 13:04:55.063" starttime="20171020 13:04:53.951"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:04:55.064">${base_uri} = /xyz/openbmc_project/state/host0//attr/BootProgress</msg>
<status status="PASS" endtime="20171020 13:04:55.064" starttime="20171020 13:04:55.063"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:04:55.066">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status status="PASS" endtime="20171020 13:04:55.066" starttime="20171020 13:04:55.065"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:04:55.067">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status status="PASS" endtime="20171020 13:04:55.067" starttime="20171020 13:04:55.067"></status>
</kw>
<status status="PASS" endtime="20171020 13:04:55.067" starttime="20171020 13:04:55.066"></status>
</kw>
<status status="PASS" endtime="20171020 13:04:55.067" starttime="20171020 13:04:55.064"></status>
</kw>
<status status="PASS" endtime="20171020 13:04:55.067" starttime="20171020 13:04:55.064"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:04:55.681">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/BootProgress, headers=None json=None</msg>
<msg level="INFO" timestamp="20171020 13:04:55.681">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:04:55.681" starttime="20171020 13:04:55.067"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:04:55.683">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171020 13:04:55.683" starttime="20171020 13:04:55.682"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:04:55.684">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171020 13:04:55.684" starttime="20171020 13:04:55.684"></status>
</kw>
<status status="PASS" endtime="20171020 13:04:55.684" starttime="20171020 13:04:55.683"></status>
</kw>
<status status="PASS" endtime="20171020 13:04:55.684" starttime="20171020 13:04:55.682"></status>
</kw>
<status status="PASS" endtime="20171020 13:04:55.685" starttime="20171020 13:04:55.681"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171020 13:04:55.685">Delete All Sessions</msg>
<status status="PASS" endtime="20171020 13:04:55.685" starttime="20171020 13:04:55.685"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:04:55.685">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:04:55.685" starttime="20171020 13:04:53.950"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:04:55.686">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:04:55.686" starttime="20171020 13:04:55.686"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:04:55.686">To JSON using : content={
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171020 13:04:55.687">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171020 13:04:55.687">${content} = {u'data': u'xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20171020 13:04:55.687" starttime="20171020 13:04:55.686"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:04:55.687">${state} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart</msg>
<status status="PASS" endtime="20171020 13:04:55.687" starttime="20171020 13:04:53.949"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:04:55.687">${boot_stage} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart</msg>
<status status="PASS" endtime="20171020 13:04:55.687" starttime="20171020 13:04:53.949"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${OS_BOOT_START}</arg>
<arg>${boot_stage}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:04:55.688">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:04:55.688" starttime="20171020 13:04:55.687"></status>
</kw>
<kw name="Get Host State Attribute" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>OperatingSystemState</arg>
</arguments>
<assign>
<var>${os_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>${host_attribute}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:04:55.692">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171020 13:04:55.692" starttime="20171020 13:04:55.692"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:04:55.693">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171020 13:04:55.693" starttime="20171020 13:04:55.692"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:04:55.693">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171020 13:04:55.693" starttime="20171020 13:04:55.693"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:04:55.694">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171020 13:04:55.694" starttime="20171020 13:04:55.694"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:04:56.652">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171020 13:04:56.652" starttime="20171020 13:04:55.695"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:04:56.652">${status} = PASS</msg>
<msg level="INFO" timestamp="20171020 13:04:56.652">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:04:56.652" starttime="20171020 13:04:55.694"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:04:56.653">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:04:56.653" starttime="20171020 13:04:56.652"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:04:56.654">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:04:56.654" starttime="20171020 13:04:56.653"></status>
</kw>
<status status="PASS" endtime="20171020 13:04:56.654" starttime="20171020 13:04:55.691"></status>
</kw>
<status status="PASS" endtime="20171020 13:04:56.654" starttime="20171020 13:04:55.690"></status>
</kw>
<status status="PASS" endtime="20171020 13:04:56.654" starttime="20171020 13:04:55.690"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:04:56.655">${base_uri} = /xyz/openbmc_project/state/host0//attr/OperatingSystemState</msg>
<status status="PASS" endtime="20171020 13:04:56.655" starttime="20171020 13:04:56.654"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:04:56.657">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/OperatingSystemState, method:Get, args:{}</msg>
<status status="PASS" endtime="20171020 13:04:56.657" starttime="20171020 13:04:56.656"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:04:56.658">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/OperatingSystemState, method:Get, args:{}</msg>
<status status="PASS" endtime="20171020 13:04:56.658" starttime="20171020 13:04:56.658"></status>
</kw>
<status status="PASS" endtime="20171020 13:04:56.658" starttime="20171020 13:04:56.657"></status>
</kw>
<status status="PASS" endtime="20171020 13:04:56.658" starttime="20171020 13:04:56.655"></status>
</kw>
<status status="PASS" endtime="20171020 13:04:56.658" starttime="20171020 13:04:56.655"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:04:57.412">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/OperatingSystemState, headers=None json=None</msg>
<msg level="INFO" timestamp="20171020 13:04:57.413">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:04:57.413" starttime="20171020 13:04:56.658"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:04:57.414">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171020 13:04:57.415" starttime="20171020 13:04:57.414"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:04:57.416">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171020 13:04:57.416" starttime="20171020 13:04:57.415"></status>
</kw>
<status status="PASS" endtime="20171020 13:04:57.416" starttime="20171020 13:04:57.415"></status>
</kw>
<status status="PASS" endtime="20171020 13:04:57.416" starttime="20171020 13:04:57.413"></status>
</kw>
<status status="PASS" endtime="20171020 13:04:57.416" starttime="20171020 13:04:57.413"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171020 13:04:57.417">Delete All Sessions</msg>
<status status="PASS" endtime="20171020 13:04:57.417" starttime="20171020 13:04:57.417"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:04:57.417">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:04:57.417" starttime="20171020 13:04:55.689"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:04:57.418">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:04:57.418" starttime="20171020 13:04:57.418"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:04:57.419">To JSON using : content={
  "data": "xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171020 13:04:57.419">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171020 13:04:57.420">${content} = {u'data': u'xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20171020 13:04:57.420" starttime="20171020 13:04:57.419"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:04:57.420">${state} = xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive</msg>
<status status="PASS" endtime="20171020 13:04:57.420" starttime="20171020 13:04:55.688"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:04:57.420">${os_state} = xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive</msg>
<status status="PASS" endtime="20171020 13:04:57.420" starttime="20171020 13:04:55.688"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${OS_BOOT_COMPLETE}</arg>
<arg>${os_state}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:04:57.421">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg level="FAIL" timestamp="20171020 13:04:57.421">xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.BootComplete != xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive</msg>
<status status="FAIL" endtime="20171020 13:04:57.422" starttime="20171020 13:04:57.421"></status>
</kw>
<status status="FAIL" endtime="20171020 13:04:57.422" starttime="20171020 13:04:53.949"></status>
</kw>
<status status="FAIL" endtime="20171020 13:04:57.422" starttime="20171020 13:04:50.973"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:05:07.428">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171020 13:05:07.429" starttime="20171020 13:05:07.428"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:05:07.429">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171020 13:05:07.430" starttime="20171020 13:05:07.429"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:05:07.430">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171020 13:05:07.430" starttime="20171020 13:05:07.430"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:05:07.431">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171020 13:05:07.431" starttime="20171020 13:05:07.430"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:05:08.072">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171020 13:05:08.072" starttime="20171020 13:05:07.432"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:05:08.072">${status} = PASS</msg>
<msg level="INFO" timestamp="20171020 13:05:08.072">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:05:08.073" starttime="20171020 13:05:07.431"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:05:08.073">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:05:08.073" starttime="20171020 13:05:08.073"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:05:08.074">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:05:08.074" starttime="20171020 13:05:08.074"></status>
</kw>
<status status="PASS" endtime="20171020 13:05:08.074" starttime="20171020 13:05:07.428"></status>
</kw>
<status status="PASS" endtime="20171020 13:05:08.074" starttime="20171020 13:05:07.427"></status>
</kw>
<status status="PASS" endtime="20171020 13:05:08.074" starttime="20171020 13:05:07.426"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:05:08.075">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" endtime="20171020 13:05:08.075" starttime="20171020 13:05:08.075"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:05:08.077">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" endtime="20171020 13:05:08.077" starttime="20171020 13:05:08.076"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:05:08.078">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" endtime="20171020 13:05:08.078" starttime="20171020 13:05:08.078"></status>
</kw>
<status status="PASS" endtime="20171020 13:05:08.078" starttime="20171020 13:05:08.077"></status>
</kw>
<status status="PASS" endtime="20171020 13:05:08.079" starttime="20171020 13:05:08.076"></status>
</kw>
<status status="PASS" endtime="20171020 13:05:08.079" starttime="20171020 13:05:08.075"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:05:09.474">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20171020 13:05:09.474">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:05:09.474" starttime="20171020 13:05:08.079"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:05:09.476">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171020 13:05:09.476" starttime="20171020 13:05:09.476"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:05:09.477">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171020 13:05:09.477" starttime="20171020 13:05:09.477"></status>
</kw>
<status status="PASS" endtime="20171020 13:05:09.477" starttime="20171020 13:05:09.476"></status>
</kw>
<status status="PASS" endtime="20171020 13:05:09.478" starttime="20171020 13:05:09.475"></status>
</kw>
<status status="PASS" endtime="20171020 13:05:09.478" starttime="20171020 13:05:09.475"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171020 13:05:09.478">Delete All Sessions</msg>
<status status="PASS" endtime="20171020 13:05:09.478" starttime="20171020 13:05:09.478"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:05:09.478">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:05:09.478" starttime="20171020 13:05:07.426"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:05:09.479">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:05:09.479" starttime="20171020 13:05:09.479"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:05:09.480">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171020 13:05:09.480">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171020 13:05:09.480">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20171020 13:05:09.480" starttime="20171020 13:05:09.479"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:05:09.480">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status status="PASS" endtime="20171020 13:05:09.480" starttime="20171020 13:05:07.425"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:05:09.480">${power_state} = On</msg>
<status status="PASS" endtime="20171020 13:05:09.480" starttime="20171020 13:05:07.425"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status status="PASS" endtime="20171020 13:05:09.481" starttime="20171020 13:05:09.481"></status>
</kw>
<status status="PASS" endtime="20171020 13:05:09.481" starttime="20171020 13:05:07.424"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:05:09.485">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171020 13:05:09.486" starttime="20171020 13:05:09.485"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:05:09.486">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171020 13:05:09.486" starttime="20171020 13:05:09.486"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:05:09.487">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171020 13:05:09.487" starttime="20171020 13:05:09.487"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:05:09.488">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171020 13:05:09.488" starttime="20171020 13:05:09.487"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:05:11.626">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171020 13:05:11.626" starttime="20171020 13:05:09.488"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:05:11.626">${status} = PASS</msg>
<msg level="INFO" timestamp="20171020 13:05:11.626">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:05:11.626" starttime="20171020 13:05:09.488"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:05:11.627">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:05:11.627" starttime="20171020 13:05:11.626"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:05:11.627">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:05:11.628" starttime="20171020 13:05:11.627"></status>
</kw>
<status status="PASS" endtime="20171020 13:05:11.628" starttime="20171020 13:05:09.484"></status>
</kw>
<status status="PASS" endtime="20171020 13:05:11.628" starttime="20171020 13:05:09.483"></status>
</kw>
<status status="PASS" endtime="20171020 13:05:11.628" starttime="20171020 13:05:09.483"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:05:11.629">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" endtime="20171020 13:05:11.629" starttime="20171020 13:05:11.628"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:05:11.631">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" endtime="20171020 13:05:11.631" starttime="20171020 13:05:11.630"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:05:11.632">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" endtime="20171020 13:05:11.632" starttime="20171020 13:05:11.632"></status>
</kw>
<status status="PASS" endtime="20171020 13:05:11.632" starttime="20171020 13:05:11.631"></status>
</kw>
<status status="PASS" endtime="20171020 13:05:11.632" starttime="20171020 13:05:11.629"></status>
</kw>
<status status="PASS" endtime="20171020 13:05:11.633" starttime="20171020 13:05:11.629"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:05:12.693">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20171020 13:05:12.694">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:05:12.694" starttime="20171020 13:05:11.633"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:05:12.696">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171020 13:05:12.696" starttime="20171020 13:05:12.695"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:05:12.697">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171020 13:05:12.697" starttime="20171020 13:05:12.697"></status>
</kw>
<status status="PASS" endtime="20171020 13:05:12.697" starttime="20171020 13:05:12.696"></status>
</kw>
<status status="PASS" endtime="20171020 13:05:12.697" starttime="20171020 13:05:12.695"></status>
</kw>
<status status="PASS" endtime="20171020 13:05:12.697" starttime="20171020 13:05:12.694"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171020 13:05:12.698">Delete All Sessions</msg>
<status status="PASS" endtime="20171020 13:05:12.698" starttime="20171020 13:05:12.698"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:05:12.698">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:05:12.698" starttime="20171020 13:05:09.482"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:05:12.699">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:05:12.699" starttime="20171020 13:05:12.698"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:05:12.699">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171020 13:05:12.699">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171020 13:05:12.699">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20171020 13:05:12.700" starttime="20171020 13:05:12.699"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:05:12.700">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status status="PASS" endtime="20171020 13:05:12.700" starttime="20171020 13:05:09.482"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:05:12.700">${host_state} = Running</msg>
<status status="PASS" endtime="20171020 13:05:12.700" starttime="20171020 13:05:09.481"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status status="PASS" endtime="20171020 13:05:12.701" starttime="20171020 13:05:12.700"></status>
</kw>
<kw name="Is OS Booted" library="state_manager">
<doc>Check OS status.</doc>
<kw name="Get Host State Attribute" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>BootProgress</arg>
</arguments>
<assign>
<var>${boot_stage}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>${host_attribute}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:05:12.705">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171020 13:05:12.705" starttime="20171020 13:05:12.705"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:05:12.706">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171020 13:05:12.706" starttime="20171020 13:05:12.706"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:05:12.707">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171020 13:05:12.707" starttime="20171020 13:05:12.706"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:05:12.707">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171020 13:05:12.707" starttime="20171020 13:05:12.707"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:05:12.970">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171020 13:05:12.970" starttime="20171020 13:05:12.708"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:05:12.970">${status} = PASS</msg>
<msg level="INFO" timestamp="20171020 13:05:12.970">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:05:12.970" starttime="20171020 13:05:12.708"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:05:12.971">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:05:12.971" starttime="20171020 13:05:12.970"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:05:12.971">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:05:12.972" starttime="20171020 13:05:12.971"></status>
</kw>
<status status="PASS" endtime="20171020 13:05:12.972" starttime="20171020 13:05:12.704"></status>
</kw>
<status status="PASS" endtime="20171020 13:05:12.972" starttime="20171020 13:05:12.704"></status>
</kw>
<status status="PASS" endtime="20171020 13:05:12.972" starttime="20171020 13:05:12.703"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:05:12.972">${base_uri} = /xyz/openbmc_project/state/host0//attr/BootProgress</msg>
<status status="PASS" endtime="20171020 13:05:12.973" starttime="20171020 13:05:12.972"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:05:12.975">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status status="PASS" endtime="20171020 13:05:12.975" starttime="20171020 13:05:12.974"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:05:12.976">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status status="PASS" endtime="20171020 13:05:12.976" starttime="20171020 13:05:12.975"></status>
</kw>
<status status="PASS" endtime="20171020 13:05:12.976" starttime="20171020 13:05:12.975"></status>
</kw>
<status status="PASS" endtime="20171020 13:05:12.976" starttime="20171020 13:05:12.973"></status>
</kw>
<status status="PASS" endtime="20171020 13:05:12.976" starttime="20171020 13:05:12.973"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:05:13.090">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/BootProgress, headers=None json=None</msg>
<msg level="INFO" timestamp="20171020 13:05:13.090">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:05:13.090" starttime="20171020 13:05:12.976"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:05:13.092">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171020 13:05:13.092" starttime="20171020 13:05:13.091"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:05:13.093">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171020 13:05:13.093" starttime="20171020 13:05:13.092"></status>
</kw>
<status status="PASS" endtime="20171020 13:05:13.093" starttime="20171020 13:05:13.092"></status>
</kw>
<status status="PASS" endtime="20171020 13:05:13.093" starttime="20171020 13:05:13.091"></status>
</kw>
<status status="PASS" endtime="20171020 13:05:13.093" starttime="20171020 13:05:13.090"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171020 13:05:13.093">Delete All Sessions</msg>
<status status="PASS" endtime="20171020 13:05:13.093" starttime="20171020 13:05:13.093"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:05:13.094">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:05:13.094" starttime="20171020 13:05:12.702"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:05:13.095">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:05:13.095" starttime="20171020 13:05:13.094"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:05:13.095">To JSON using : content={
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171020 13:05:13.095">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171020 13:05:13.095">${content} = {u'data': u'xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20171020 13:05:13.095" starttime="20171020 13:05:13.095"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:05:13.096">${state} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart</msg>
<status status="PASS" endtime="20171020 13:05:13.096" starttime="20171020 13:05:12.702"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:05:13.096">${boot_stage} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart</msg>
<status status="PASS" endtime="20171020 13:05:13.096" starttime="20171020 13:05:12.701"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${OS_BOOT_START}</arg>
<arg>${boot_stage}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:05:13.096">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:05:13.097" starttime="20171020 13:05:13.096"></status>
</kw>
<kw name="Get Host State Attribute" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>OperatingSystemState</arg>
</arguments>
<assign>
<var>${os_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>${host_attribute}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:05:13.100">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171020 13:05:13.100" starttime="20171020 13:05:13.100"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:05:13.101">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171020 13:05:13.101" starttime="20171020 13:05:13.101"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:05:13.102">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171020 13:05:13.102" starttime="20171020 13:05:13.101"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:05:13.102">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171020 13:05:13.102" starttime="20171020 13:05:13.102"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:05:13.336">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171020 13:05:13.336" starttime="20171020 13:05:13.103"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:05:13.336">${status} = PASS</msg>
<msg level="INFO" timestamp="20171020 13:05:13.336">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:05:13.336" starttime="20171020 13:05:13.103"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:05:13.337">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:05:13.337" starttime="20171020 13:05:13.336"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:05:13.337">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:05:13.337" starttime="20171020 13:05:13.337"></status>
</kw>
<status status="PASS" endtime="20171020 13:05:13.337" starttime="20171020 13:05:13.099"></status>
</kw>
<status status="PASS" endtime="20171020 13:05:13.338" starttime="20171020 13:05:13.099"></status>
</kw>
<status status="PASS" endtime="20171020 13:05:13.338" starttime="20171020 13:05:13.098"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:05:13.338">${base_uri} = /xyz/openbmc_project/state/host0//attr/OperatingSystemState</msg>
<status status="PASS" endtime="20171020 13:05:13.338" starttime="20171020 13:05:13.338"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:05:13.340">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/OperatingSystemState, method:Get, args:{}</msg>
<status status="PASS" endtime="20171020 13:05:13.340" starttime="20171020 13:05:13.340"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:05:13.341">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/OperatingSystemState, method:Get, args:{}</msg>
<status status="PASS" endtime="20171020 13:05:13.341" starttime="20171020 13:05:13.341"></status>
</kw>
<status status="PASS" endtime="20171020 13:05:13.342" starttime="20171020 13:05:13.340"></status>
</kw>
<status status="PASS" endtime="20171020 13:05:13.342" starttime="20171020 13:05:13.339"></status>
</kw>
<status status="PASS" endtime="20171020 13:05:13.342" starttime="20171020 13:05:13.339"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:05:13.433">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/OperatingSystemState, headers=None json=None</msg>
<msg level="INFO" timestamp="20171020 13:05:13.433">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:05:13.433" starttime="20171020 13:05:13.342"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:05:13.435">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171020 13:05:13.435" starttime="20171020 13:05:13.434"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:05:13.436">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171020 13:05:13.437" starttime="20171020 13:05:13.436"></status>
</kw>
<status status="PASS" endtime="20171020 13:05:13.437" starttime="20171020 13:05:13.435"></status>
</kw>
<status status="PASS" endtime="20171020 13:05:13.437" starttime="20171020 13:05:13.434"></status>
</kw>
<status status="PASS" endtime="20171020 13:05:13.437" starttime="20171020 13:05:13.433"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171020 13:05:13.437">Delete All Sessions</msg>
<status status="PASS" endtime="20171020 13:05:13.437" starttime="20171020 13:05:13.437"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:05:13.438">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:05:13.438" starttime="20171020 13:05:13.098"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:05:13.438">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:05:13.438" starttime="20171020 13:05:13.438"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:05:13.439">To JSON using : content={
  "data": "xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171020 13:05:13.439">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171020 13:05:13.439">${content} = {u'data': u'xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20171020 13:05:13.439" starttime="20171020 13:05:13.439"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:05:13.439">${state} = xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive</msg>
<status status="PASS" endtime="20171020 13:05:13.439" starttime="20171020 13:05:13.097"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:05:13.440">${os_state} = xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive</msg>
<status status="PASS" endtime="20171020 13:05:13.440" starttime="20171020 13:05:13.097"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${OS_BOOT_COMPLETE}</arg>
<arg>${os_state}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:05:13.440">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg level="FAIL" timestamp="20171020 13:05:13.440">xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.BootComplete != xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive</msg>
<status status="FAIL" endtime="20171020 13:05:13.440" starttime="20171020 13:05:13.440"></status>
</kw>
<status status="FAIL" endtime="20171020 13:05:13.441" starttime="20171020 13:05:12.701"></status>
</kw>
<status status="FAIL" endtime="20171020 13:05:13.441" starttime="20171020 13:05:07.423"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:05:23.446">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171020 13:05:23.447" starttime="20171020 13:05:23.446"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:05:23.447">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171020 13:05:23.447" starttime="20171020 13:05:23.447"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:05:23.448">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171020 13:05:23.448" starttime="20171020 13:05:23.448"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:05:23.449">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171020 13:05:23.449" starttime="20171020 13:05:23.448"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:05:23.752">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171020 13:05:23.752" starttime="20171020 13:05:23.450"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:05:23.752">${status} = PASS</msg>
<msg level="INFO" timestamp="20171020 13:05:23.752">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:05:23.752" starttime="20171020 13:05:23.449"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:05:23.753">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:05:23.753" starttime="20171020 13:05:23.752"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:05:23.753">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:05:23.753" starttime="20171020 13:05:23.753"></status>
</kw>
<status status="PASS" endtime="20171020 13:05:23.754" starttime="20171020 13:05:23.445"></status>
</kw>
<status status="PASS" endtime="20171020 13:05:23.754" starttime="20171020 13:05:23.445"></status>
</kw>
<status status="PASS" endtime="20171020 13:05:23.754" starttime="20171020 13:05:23.444"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:05:23.755">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" endtime="20171020 13:05:23.755" starttime="20171020 13:05:23.754"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:05:23.757">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" endtime="20171020 13:05:23.758" starttime="20171020 13:05:23.756"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:05:23.759">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" endtime="20171020 13:05:23.759" starttime="20171020 13:05:23.759"></status>
</kw>
<status status="PASS" endtime="20171020 13:05:23.759" starttime="20171020 13:05:23.758"></status>
</kw>
<status status="PASS" endtime="20171020 13:05:23.759" starttime="20171020 13:05:23.756"></status>
</kw>
<status status="PASS" endtime="20171020 13:05:23.759" starttime="20171020 13:05:23.755"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:05:24.023">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20171020 13:05:24.023">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:05:24.023" starttime="20171020 13:05:23.760"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:05:24.025">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171020 13:05:24.025" starttime="20171020 13:05:24.024"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:05:24.026">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171020 13:05:24.026" starttime="20171020 13:05:24.025"></status>
</kw>
<status status="PASS" endtime="20171020 13:05:24.026" starttime="20171020 13:05:24.025"></status>
</kw>
<status status="PASS" endtime="20171020 13:05:24.026" starttime="20171020 13:05:24.024"></status>
</kw>
<status status="PASS" endtime="20171020 13:05:24.026" starttime="20171020 13:05:24.023"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171020 13:05:24.027">Delete All Sessions</msg>
<status status="PASS" endtime="20171020 13:05:24.027" starttime="20171020 13:05:24.027"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:05:24.027">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:05:24.027" starttime="20171020 13:05:23.443"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:05:24.028">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:05:24.028" starttime="20171020 13:05:24.027"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:05:24.028">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171020 13:05:24.028">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171020 13:05:24.029">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20171020 13:05:24.029" starttime="20171020 13:05:24.028"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:05:24.029">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status status="PASS" endtime="20171020 13:05:24.029" starttime="20171020 13:05:23.443"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:05:24.029">${power_state} = On</msg>
<status status="PASS" endtime="20171020 13:05:24.029" starttime="20171020 13:05:23.442"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status status="PASS" endtime="20171020 13:05:24.030" starttime="20171020 13:05:24.029"></status>
</kw>
<status status="PASS" endtime="20171020 13:05:24.030" starttime="20171020 13:05:23.442"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:05:24.034">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171020 13:05:24.034" starttime="20171020 13:05:24.034"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:05:24.035">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171020 13:05:24.035" starttime="20171020 13:05:24.035"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:05:24.035">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171020 13:05:24.036" starttime="20171020 13:05:24.035"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:05:24.036">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171020 13:05:24.036" starttime="20171020 13:05:24.036"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:05:24.299">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171020 13:05:24.299" starttime="20171020 13:05:24.037"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:05:24.299">${status} = PASS</msg>
<msg level="INFO" timestamp="20171020 13:05:24.299">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:05:24.299" starttime="20171020 13:05:24.036"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:05:24.300">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:05:24.300" starttime="20171020 13:05:24.300"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:05:24.301">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:05:24.301" starttime="20171020 13:05:24.300"></status>
</kw>
<status status="PASS" endtime="20171020 13:05:24.301" starttime="20171020 13:05:24.033"></status>
</kw>
<status status="PASS" endtime="20171020 13:05:24.301" starttime="20171020 13:05:24.032"></status>
</kw>
<status status="PASS" endtime="20171020 13:05:24.301" starttime="20171020 13:05:24.032"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:05:24.302">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" endtime="20171020 13:05:24.302" starttime="20171020 13:05:24.301"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:05:24.304">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" endtime="20171020 13:05:24.304" starttime="20171020 13:05:24.303"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:05:24.305">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" endtime="20171020 13:05:24.305" starttime="20171020 13:05:24.305"></status>
</kw>
<status status="PASS" endtime="20171020 13:05:24.306" starttime="20171020 13:05:24.305"></status>
</kw>
<status status="PASS" endtime="20171020 13:05:24.306" starttime="20171020 13:05:24.303"></status>
</kw>
<status status="PASS" endtime="20171020 13:05:24.306" starttime="20171020 13:05:24.302"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:05:24.395">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20171020 13:05:24.395">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:05:24.395" starttime="20171020 13:05:24.306"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:05:24.397">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171020 13:05:24.397" starttime="20171020 13:05:24.396"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:05:24.398">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171020 13:05:24.398" starttime="20171020 13:05:24.397"></status>
</kw>
<status status="PASS" endtime="20171020 13:05:24.398" starttime="20171020 13:05:24.397"></status>
</kw>
<status status="PASS" endtime="20171020 13:05:24.398" starttime="20171020 13:05:24.396"></status>
</kw>
<status status="PASS" endtime="20171020 13:05:24.398" starttime="20171020 13:05:24.395"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171020 13:05:24.398">Delete All Sessions</msg>
<status status="PASS" endtime="20171020 13:05:24.399" starttime="20171020 13:05:24.398"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:05:24.399">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:05:24.399" starttime="20171020 13:05:24.031"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:05:24.399">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:05:24.399" starttime="20171020 13:05:24.399"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:05:24.400">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171020 13:05:24.400">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171020 13:05:24.400">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20171020 13:05:24.400" starttime="20171020 13:05:24.400"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:05:24.400">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status status="PASS" endtime="20171020 13:05:24.401" starttime="20171020 13:05:24.030"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:05:24.401">${host_state} = Running</msg>
<status status="PASS" endtime="20171020 13:05:24.401" starttime="20171020 13:05:24.030"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status status="PASS" endtime="20171020 13:05:24.401" starttime="20171020 13:05:24.401"></status>
</kw>
<kw name="Is OS Booted" library="state_manager">
<doc>Check OS status.</doc>
<kw name="Get Host State Attribute" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>BootProgress</arg>
</arguments>
<assign>
<var>${boot_stage}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>${host_attribute}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:05:24.406">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171020 13:05:24.406" starttime="20171020 13:05:24.405"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:05:24.407">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171020 13:05:24.407" starttime="20171020 13:05:24.406"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:05:24.407">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171020 13:05:24.407" starttime="20171020 13:05:24.407"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:05:24.408">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171020 13:05:24.408" starttime="20171020 13:05:24.408"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:05:24.678">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171020 13:05:24.678" starttime="20171020 13:05:24.409"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:05:24.678">${status} = PASS</msg>
<msg level="INFO" timestamp="20171020 13:05:24.678">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:05:24.678" starttime="20171020 13:05:24.408"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:05:24.679">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:05:24.679" starttime="20171020 13:05:24.679"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:05:24.680">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:05:24.680" starttime="20171020 13:05:24.680"></status>
</kw>
<status status="PASS" endtime="20171020 13:05:24.680" starttime="20171020 13:05:24.405"></status>
</kw>
<status status="PASS" endtime="20171020 13:05:24.680" starttime="20171020 13:05:24.404"></status>
</kw>
<status status="PASS" endtime="20171020 13:05:24.680" starttime="20171020 13:05:24.404"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:05:24.681">${base_uri} = /xyz/openbmc_project/state/host0//attr/BootProgress</msg>
<status status="PASS" endtime="20171020 13:05:24.681" starttime="20171020 13:05:24.681"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:05:24.683">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status status="PASS" endtime="20171020 13:05:24.683" starttime="20171020 13:05:24.682"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:05:24.684">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status status="PASS" endtime="20171020 13:05:24.684" starttime="20171020 13:05:24.684"></status>
</kw>
<status status="PASS" endtime="20171020 13:05:24.684" starttime="20171020 13:05:24.683"></status>
</kw>
<status status="PASS" endtime="20171020 13:05:24.684" starttime="20171020 13:05:24.682"></status>
</kw>
<status status="PASS" endtime="20171020 13:05:24.684" starttime="20171020 13:05:24.681"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:05:24.858">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/BootProgress, headers=None json=None</msg>
<msg level="INFO" timestamp="20171020 13:05:24.858">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:05:24.858" starttime="20171020 13:05:24.685"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:05:24.860">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171020 13:05:24.860" starttime="20171020 13:05:24.859"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:05:24.861">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171020 13:05:24.861" starttime="20171020 13:05:24.861"></status>
</kw>
<status status="PASS" endtime="20171020 13:05:24.861" starttime="20171020 13:05:24.860"></status>
</kw>
<status status="PASS" endtime="20171020 13:05:24.861" starttime="20171020 13:05:24.859"></status>
</kw>
<status status="PASS" endtime="20171020 13:05:24.862" starttime="20171020 13:05:24.858"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171020 13:05:24.862">Delete All Sessions</msg>
<status status="PASS" endtime="20171020 13:05:24.862" starttime="20171020 13:05:24.862"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:05:24.862">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:05:24.862" starttime="20171020 13:05:24.403"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:05:24.863">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:05:24.863" starttime="20171020 13:05:24.863"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:05:24.863">To JSON using : content={
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171020 13:05:24.864">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171020 13:05:24.864">${content} = {u'data': u'xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20171020 13:05:24.864" starttime="20171020 13:05:24.863"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:05:24.864">${state} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart</msg>
<status status="PASS" endtime="20171020 13:05:24.864" starttime="20171020 13:05:24.402"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:05:24.864">${boot_stage} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart</msg>
<status status="PASS" endtime="20171020 13:05:24.864" starttime="20171020 13:05:24.402"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${OS_BOOT_START}</arg>
<arg>${boot_stage}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:05:24.865">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:05:24.865" starttime="20171020 13:05:24.865"></status>
</kw>
<kw name="Get Host State Attribute" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>OperatingSystemState</arg>
</arguments>
<assign>
<var>${os_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>${host_attribute}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:05:24.869">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171020 13:05:24.869" starttime="20171020 13:05:24.869"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:05:24.870">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171020 13:05:24.870" starttime="20171020 13:05:24.870"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:05:24.871">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171020 13:05:24.871" starttime="20171020 13:05:24.870"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:05:24.871">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171020 13:05:24.871" starttime="20171020 13:05:24.871"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:05:25.186">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171020 13:05:25.186" starttime="20171020 13:05:24.872"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:05:25.187">${status} = PASS</msg>
<msg level="INFO" timestamp="20171020 13:05:25.187">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:05:25.187" starttime="20171020 13:05:24.872"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:05:25.187">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:05:25.187" starttime="20171020 13:05:25.187"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:05:25.188">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:05:25.188" starttime="20171020 13:05:25.188"></status>
</kw>
<status status="PASS" endtime="20171020 13:05:25.188" starttime="20171020 13:05:24.868"></status>
</kw>
<status status="PASS" endtime="20171020 13:05:25.188" starttime="20171020 13:05:24.867"></status>
</kw>
<status status="PASS" endtime="20171020 13:05:25.188" starttime="20171020 13:05:24.867"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:05:25.189">${base_uri} = /xyz/openbmc_project/state/host0//attr/OperatingSystemState</msg>
<status status="PASS" endtime="20171020 13:05:25.189" starttime="20171020 13:05:25.189"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:05:25.191">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/OperatingSystemState, method:Get, args:{}</msg>
<status status="PASS" endtime="20171020 13:05:25.191" starttime="20171020 13:05:25.190"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:05:25.192">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/OperatingSystemState, method:Get, args:{}</msg>
<status status="PASS" endtime="20171020 13:05:25.192" starttime="20171020 13:05:25.192"></status>
</kw>
<status status="PASS" endtime="20171020 13:05:25.192" starttime="20171020 13:05:25.191"></status>
</kw>
<status status="PASS" endtime="20171020 13:05:25.192" starttime="20171020 13:05:25.190"></status>
</kw>
<status status="PASS" endtime="20171020 13:05:25.192" starttime="20171020 13:05:25.189"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:05:25.405">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/OperatingSystemState, headers=None json=None</msg>
<msg level="INFO" timestamp="20171020 13:05:25.405">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:05:25.405" starttime="20171020 13:05:25.193"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:05:25.407">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171020 13:05:25.407" starttime="20171020 13:05:25.406"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:05:25.408">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171020 13:05:25.408" starttime="20171020 13:05:25.407"></status>
</kw>
<status status="PASS" endtime="20171020 13:05:25.408" starttime="20171020 13:05:25.407"></status>
</kw>
<status status="PASS" endtime="20171020 13:05:25.408" starttime="20171020 13:05:25.406"></status>
</kw>
<status status="PASS" endtime="20171020 13:05:25.408" starttime="20171020 13:05:25.405"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171020 13:05:25.409">Delete All Sessions</msg>
<status status="PASS" endtime="20171020 13:05:25.409" starttime="20171020 13:05:25.408"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:05:25.409">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:05:25.409" starttime="20171020 13:05:24.866"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:05:25.410">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:05:25.410" starttime="20171020 13:05:25.409"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:05:25.410">To JSON using : content={
  "data": "xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171020 13:05:25.410">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171020 13:05:25.410">${content} = {u'data': u'xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20171020 13:05:25.410" starttime="20171020 13:05:25.410"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:05:25.411">${state} = xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive</msg>
<status status="PASS" endtime="20171020 13:05:25.411" starttime="20171020 13:05:24.866"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:05:25.411">${os_state} = xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive</msg>
<status status="PASS" endtime="20171020 13:05:25.411" starttime="20171020 13:05:24.865"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${OS_BOOT_COMPLETE}</arg>
<arg>${os_state}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:05:25.411">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg level="FAIL" timestamp="20171020 13:05:25.412">xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.BootComplete != xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive</msg>
<status status="FAIL" endtime="20171020 13:05:25.412" starttime="20171020 13:05:25.411"></status>
</kw>
<status status="FAIL" endtime="20171020 13:05:25.412" starttime="20171020 13:05:24.402"></status>
</kw>
<status status="FAIL" endtime="20171020 13:05:25.412" starttime="20171020 13:05:23.441"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:05:35.417">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171020 13:05:35.417" starttime="20171020 13:05:35.417"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:05:35.418">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171020 13:05:35.418" starttime="20171020 13:05:35.418"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:05:35.418">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171020 13:05:35.419" starttime="20171020 13:05:35.418"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:05:35.419">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171020 13:05:35.419" starttime="20171020 13:05:35.419"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:05:35.597">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171020 13:05:35.597" starttime="20171020 13:05:35.420"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:05:35.597">${status} = PASS</msg>
<msg level="INFO" timestamp="20171020 13:05:35.597">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:05:35.597" starttime="20171020 13:05:35.420"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:05:35.598">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:05:35.598" starttime="20171020 13:05:35.597"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:05:35.598">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:05:35.598" starttime="20171020 13:05:35.598"></status>
</kw>
<status status="PASS" endtime="20171020 13:05:35.599" starttime="20171020 13:05:35.416"></status>
</kw>
<status status="PASS" endtime="20171020 13:05:35.599" starttime="20171020 13:05:35.416"></status>
</kw>
<status status="PASS" endtime="20171020 13:05:35.599" starttime="20171020 13:05:35.415"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:05:35.599">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" endtime="20171020 13:05:35.599" starttime="20171020 13:05:35.599"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:05:35.601">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" endtime="20171020 13:05:35.601" starttime="20171020 13:05:35.601"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:05:35.602">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" endtime="20171020 13:05:35.602" starttime="20171020 13:05:35.602"></status>
</kw>
<status status="PASS" endtime="20171020 13:05:35.603" starttime="20171020 13:05:35.602"></status>
</kw>
<status status="PASS" endtime="20171020 13:05:35.603" starttime="20171020 13:05:35.600"></status>
</kw>
<status status="PASS" endtime="20171020 13:05:35.603" starttime="20171020 13:05:35.600"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:05:35.666">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20171020 13:05:35.666">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:05:35.666" starttime="20171020 13:05:35.603"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:05:35.668">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171020 13:05:35.668" starttime="20171020 13:05:35.667"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:05:35.669">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171020 13:05:35.669" starttime="20171020 13:05:35.668"></status>
</kw>
<status status="PASS" endtime="20171020 13:05:35.669" starttime="20171020 13:05:35.668"></status>
</kw>
<status status="PASS" endtime="20171020 13:05:35.669" starttime="20171020 13:05:35.667"></status>
</kw>
<status status="PASS" endtime="20171020 13:05:35.669" starttime="20171020 13:05:35.666"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171020 13:05:35.669">Delete All Sessions</msg>
<status status="PASS" endtime="20171020 13:05:35.669" starttime="20171020 13:05:35.669"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:05:35.670">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:05:35.670" starttime="20171020 13:05:35.414"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:05:35.670">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:05:35.670" starttime="20171020 13:05:35.670"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:05:35.671">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171020 13:05:35.671">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171020 13:05:35.671">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20171020 13:05:35.671" starttime="20171020 13:05:35.671"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:05:35.671">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status status="PASS" endtime="20171020 13:05:35.671" starttime="20171020 13:05:35.414"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:05:35.672">${power_state} = On</msg>
<status status="PASS" endtime="20171020 13:05:35.672" starttime="20171020 13:05:35.413"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status status="PASS" endtime="20171020 13:05:35.672" starttime="20171020 13:05:35.672"></status>
</kw>
<status status="PASS" endtime="20171020 13:05:35.672" starttime="20171020 13:05:35.413"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:05:35.677">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171020 13:05:35.680" starttime="20171020 13:05:35.677"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:05:35.681">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171020 13:05:35.681" starttime="20171020 13:05:35.681"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:05:35.682">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171020 13:05:35.682" starttime="20171020 13:05:35.682"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:05:35.683">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171020 13:05:35.683" starttime="20171020 13:05:35.682"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:05:35.968">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171020 13:05:35.968" starttime="20171020 13:05:35.684"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:05:35.968">${status} = PASS</msg>
<msg level="INFO" timestamp="20171020 13:05:35.968">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:05:35.969" starttime="20171020 13:05:35.683"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:05:35.969">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:05:35.969" starttime="20171020 13:05:35.969"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:05:35.970">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:05:35.970" starttime="20171020 13:05:35.969"></status>
</kw>
<status status="PASS" endtime="20171020 13:05:35.970" starttime="20171020 13:05:35.676"></status>
</kw>
<status status="PASS" endtime="20171020 13:05:35.970" starttime="20171020 13:05:35.675"></status>
</kw>
<status status="PASS" endtime="20171020 13:05:35.970" starttime="20171020 13:05:35.674"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:05:35.971">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" endtime="20171020 13:05:35.971" starttime="20171020 13:05:35.970"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:05:35.973">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" endtime="20171020 13:05:35.973" starttime="20171020 13:05:35.972"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:05:35.974">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" endtime="20171020 13:05:35.974" starttime="20171020 13:05:35.974"></status>
</kw>
<status status="PASS" endtime="20171020 13:05:35.974" starttime="20171020 13:05:35.973"></status>
</kw>
<status status="PASS" endtime="20171020 13:05:35.974" starttime="20171020 13:05:35.972"></status>
</kw>
<status status="PASS" endtime="20171020 13:05:35.974" starttime="20171020 13:05:35.971"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:05:36.064">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20171020 13:05:36.064">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:05:36.064" starttime="20171020 13:05:35.975"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:05:36.067">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171020 13:05:36.067" starttime="20171020 13:05:36.066"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:05:36.068">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171020 13:05:36.068" starttime="20171020 13:05:36.068"></status>
</kw>
<status status="PASS" endtime="20171020 13:05:36.068" starttime="20171020 13:05:36.067"></status>
</kw>
<status status="PASS" endtime="20171020 13:05:36.069" starttime="20171020 13:05:36.065"></status>
</kw>
<status status="PASS" endtime="20171020 13:05:36.069" starttime="20171020 13:05:36.065"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171020 13:05:36.069">Delete All Sessions</msg>
<status status="PASS" endtime="20171020 13:05:36.069" starttime="20171020 13:05:36.069"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:05:36.069">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:05:36.069" starttime="20171020 13:05:35.673"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:05:36.070">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:05:36.070" starttime="20171020 13:05:36.070"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:05:36.071">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171020 13:05:36.071">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171020 13:05:36.071">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20171020 13:05:36.071" starttime="20171020 13:05:36.070"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:05:36.071">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status status="PASS" endtime="20171020 13:05:36.071" starttime="20171020 13:05:35.673"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:05:36.071">${host_state} = Running</msg>
<status status="PASS" endtime="20171020 13:05:36.071" starttime="20171020 13:05:35.673"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status status="PASS" endtime="20171020 13:05:36.072" starttime="20171020 13:05:36.072"></status>
</kw>
<kw name="Is OS Booted" library="state_manager">
<doc>Check OS status.</doc>
<kw name="Get Host State Attribute" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>BootProgress</arg>
</arguments>
<assign>
<var>${boot_stage}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>${host_attribute}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:05:36.076">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171020 13:05:36.077" starttime="20171020 13:05:36.076"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:05:36.077">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171020 13:05:36.077" starttime="20171020 13:05:36.077"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:05:36.078">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171020 13:05:36.078" starttime="20171020 13:05:36.078"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:05:36.079">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171020 13:05:36.079" starttime="20171020 13:05:36.078"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:05:36.344">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171020 13:05:36.344" starttime="20171020 13:05:36.079"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:05:36.344">${status} = PASS</msg>
<msg level="INFO" timestamp="20171020 13:05:36.344">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:05:36.344" starttime="20171020 13:05:36.079"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:05:36.345">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:05:36.345" starttime="20171020 13:05:36.344"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:05:36.346">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:05:36.346" starttime="20171020 13:05:36.345"></status>
</kw>
<status status="PASS" endtime="20171020 13:05:36.346" starttime="20171020 13:05:36.076"></status>
</kw>
<status status="PASS" endtime="20171020 13:05:36.346" starttime="20171020 13:05:36.075"></status>
</kw>
<status status="PASS" endtime="20171020 13:05:36.346" starttime="20171020 13:05:36.074"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:05:36.347">${base_uri} = /xyz/openbmc_project/state/host0//attr/BootProgress</msg>
<status status="PASS" endtime="20171020 13:05:36.347" starttime="20171020 13:05:36.346"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:05:36.349">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status status="PASS" endtime="20171020 13:05:36.349" starttime="20171020 13:05:36.348"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:05:36.350">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status status="PASS" endtime="20171020 13:05:36.350" starttime="20171020 13:05:36.349"></status>
</kw>
<status status="PASS" endtime="20171020 13:05:36.350" starttime="20171020 13:05:36.349"></status>
</kw>
<status status="PASS" endtime="20171020 13:05:36.350" starttime="20171020 13:05:36.347"></status>
</kw>
<status status="PASS" endtime="20171020 13:05:36.350" starttime="20171020 13:05:36.347"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:05:36.441">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/BootProgress, headers=None json=None</msg>
<msg level="INFO" timestamp="20171020 13:05:36.441">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:05:36.441" starttime="20171020 13:05:36.350"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:05:36.443">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171020 13:05:36.443" starttime="20171020 13:05:36.442"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:05:36.443">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171020 13:05:36.444" starttime="20171020 13:05:36.443"></status>
</kw>
<status status="PASS" endtime="20171020 13:05:36.444" starttime="20171020 13:05:36.443"></status>
</kw>
<status status="PASS" endtime="20171020 13:05:36.444" starttime="20171020 13:05:36.442"></status>
</kw>
<status status="PASS" endtime="20171020 13:05:36.444" starttime="20171020 13:05:36.441"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171020 13:05:36.444">Delete All Sessions</msg>
<status status="PASS" endtime="20171020 13:05:36.444" starttime="20171020 13:05:36.444"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:05:36.445">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:05:36.445" starttime="20171020 13:05:36.074"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:05:36.445">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:05:36.445" starttime="20171020 13:05:36.445"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:05:36.446">To JSON using : content={
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171020 13:05:36.446">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171020 13:05:36.446">${content} = {u'data': u'xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20171020 13:05:36.446" starttime="20171020 13:05:36.446"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:05:36.446">${state} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart</msg>
<status status="PASS" endtime="20171020 13:05:36.446" starttime="20171020 13:05:36.073"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:05:36.447">${boot_stage} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart</msg>
<status status="PASS" endtime="20171020 13:05:36.447" starttime="20171020 13:05:36.073"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${OS_BOOT_START}</arg>
<arg>${boot_stage}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:05:36.447">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:05:36.447" starttime="20171020 13:05:36.447"></status>
</kw>
<kw name="Get Host State Attribute" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>OperatingSystemState</arg>
</arguments>
<assign>
<var>${os_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>${host_attribute}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:05:36.451">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171020 13:05:36.451" starttime="20171020 13:05:36.451"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:05:36.452">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171020 13:05:36.452" starttime="20171020 13:05:36.452"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:05:36.453">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171020 13:05:36.453" starttime="20171020 13:05:36.452"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:05:36.453">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171020 13:05:36.453" starttime="20171020 13:05:36.453"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:05:36.633">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171020 13:05:36.633" starttime="20171020 13:05:36.454"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:05:36.633">${status} = PASS</msg>
<msg level="INFO" timestamp="20171020 13:05:36.633">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:05:36.633" starttime="20171020 13:05:36.454"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:05:36.634">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:05:36.634" starttime="20171020 13:05:36.634"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:05:36.635">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:05:36.635" starttime="20171020 13:05:36.634"></status>
</kw>
<status status="PASS" endtime="20171020 13:05:36.635" starttime="20171020 13:05:36.450"></status>
</kw>
<status status="PASS" endtime="20171020 13:05:36.635" starttime="20171020 13:05:36.450"></status>
</kw>
<status status="PASS" endtime="20171020 13:05:36.635" starttime="20171020 13:05:36.449"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:05:36.636">${base_uri} = /xyz/openbmc_project/state/host0//attr/OperatingSystemState</msg>
<status status="PASS" endtime="20171020 13:05:36.636" starttime="20171020 13:05:36.635"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:05:36.638">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/OperatingSystemState, method:Get, args:{}</msg>
<status status="PASS" endtime="20171020 13:05:36.638" starttime="20171020 13:05:36.637"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:05:36.639">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/OperatingSystemState, method:Get, args:{}</msg>
<status status="PASS" endtime="20171020 13:05:36.639" starttime="20171020 13:05:36.639"></status>
</kw>
<status status="PASS" endtime="20171020 13:05:36.639" starttime="20171020 13:05:36.638"></status>
</kw>
<status status="PASS" endtime="20171020 13:05:36.639" starttime="20171020 13:05:36.636"></status>
</kw>
<status status="PASS" endtime="20171020 13:05:36.639" starttime="20171020 13:05:36.636"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:05:36.792">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/OperatingSystemState, headers=None json=None</msg>
<msg level="INFO" timestamp="20171020 13:05:36.792">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:05:36.792" starttime="20171020 13:05:36.639"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:05:36.794">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171020 13:05:36.794" starttime="20171020 13:05:36.793"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:05:36.795">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171020 13:05:36.795" starttime="20171020 13:05:36.795"></status>
</kw>
<status status="PASS" endtime="20171020 13:05:36.795" starttime="20171020 13:05:36.794"></status>
</kw>
<status status="PASS" endtime="20171020 13:05:36.795" starttime="20171020 13:05:36.793"></status>
</kw>
<status status="PASS" endtime="20171020 13:05:36.795" starttime="20171020 13:05:36.792"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171020 13:05:36.796">Delete All Sessions</msg>
<status status="PASS" endtime="20171020 13:05:36.796" starttime="20171020 13:05:36.796"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:05:36.796">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:05:36.796" starttime="20171020 13:05:36.449"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:05:36.797">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:05:36.797" starttime="20171020 13:05:36.796"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:05:36.797">To JSON using : content={
  "data": "xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171020 13:05:36.797">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171020 13:05:36.797">${content} = {u'data': u'xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20171020 13:05:36.797" starttime="20171020 13:05:36.797"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:05:36.798">${state} = xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive</msg>
<status status="PASS" endtime="20171020 13:05:36.798" starttime="20171020 13:05:36.448"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:05:36.798">${os_state} = xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive</msg>
<status status="PASS" endtime="20171020 13:05:36.798" starttime="20171020 13:05:36.448"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${OS_BOOT_COMPLETE}</arg>
<arg>${os_state}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:05:36.799">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg level="FAIL" timestamp="20171020 13:05:36.799">xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.BootComplete != xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive</msg>
<status status="FAIL" endtime="20171020 13:05:36.799" starttime="20171020 13:05:36.798"></status>
</kw>
<status status="FAIL" endtime="20171020 13:05:36.799" starttime="20171020 13:05:36.072"></status>
</kw>
<status status="FAIL" endtime="20171020 13:05:36.799" starttime="20171020 13:05:35.412"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:05:46.805">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171020 13:05:46.805" starttime="20171020 13:05:46.804"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:05:46.806">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171020 13:05:46.806" starttime="20171020 13:05:46.805"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:05:46.806">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171020 13:05:46.806" starttime="20171020 13:05:46.806"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:05:46.807">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171020 13:05:46.807" starttime="20171020 13:05:46.807"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:05:47.064">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171020 13:05:47.064" starttime="20171020 13:05:46.808"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:05:47.065">${status} = PASS</msg>
<msg level="INFO" timestamp="20171020 13:05:47.065">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:05:47.065" starttime="20171020 13:05:46.807"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:05:47.065">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:05:47.065" starttime="20171020 13:05:47.065"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:05:47.066">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:05:47.066" starttime="20171020 13:05:47.066"></status>
</kw>
<status status="PASS" endtime="20171020 13:05:47.066" starttime="20171020 13:05:46.803"></status>
</kw>
<status status="PASS" endtime="20171020 13:05:47.066" starttime="20171020 13:05:46.803"></status>
</kw>
<status status="PASS" endtime="20171020 13:05:47.066" starttime="20171020 13:05:46.802"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:05:47.067">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" endtime="20171020 13:05:47.067" starttime="20171020 13:05:47.067"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:05:47.069">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" endtime="20171020 13:05:47.069" starttime="20171020 13:05:47.069"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:05:47.070">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" endtime="20171020 13:05:47.070" starttime="20171020 13:05:47.070"></status>
</kw>
<status status="PASS" endtime="20171020 13:05:47.070" starttime="20171020 13:05:47.069"></status>
</kw>
<status status="PASS" endtime="20171020 13:05:47.070" starttime="20171020 13:05:47.068"></status>
</kw>
<status status="PASS" endtime="20171020 13:05:47.071" starttime="20171020 13:05:47.067"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:05:47.149">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20171020 13:05:47.149">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:05:47.149" starttime="20171020 13:05:47.071"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:05:47.152">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171020 13:05:47.152" starttime="20171020 13:05:47.151"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:05:47.153">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171020 13:05:47.153" starttime="20171020 13:05:47.153"></status>
</kw>
<status status="PASS" endtime="20171020 13:05:47.154" starttime="20171020 13:05:47.152"></status>
</kw>
<status status="PASS" endtime="20171020 13:05:47.154" starttime="20171020 13:05:47.151"></status>
</kw>
<status status="PASS" endtime="20171020 13:05:47.154" starttime="20171020 13:05:47.150"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171020 13:05:47.154">Delete All Sessions</msg>
<status status="PASS" endtime="20171020 13:05:47.154" starttime="20171020 13:05:47.154"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:05:47.154">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:05:47.154" starttime="20171020 13:05:46.801"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:05:47.155">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:05:47.155" starttime="20171020 13:05:47.155"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:05:47.156">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171020 13:05:47.156">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171020 13:05:47.156">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20171020 13:05:47.156" starttime="20171020 13:05:47.155"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:05:47.156">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status status="PASS" endtime="20171020 13:05:47.156" starttime="20171020 13:05:46.801"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:05:47.157">${power_state} = On</msg>
<status status="PASS" endtime="20171020 13:05:47.157" starttime="20171020 13:05:46.800"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status status="PASS" endtime="20171020 13:05:47.157" starttime="20171020 13:05:47.157"></status>
</kw>
<status status="PASS" endtime="20171020 13:05:47.157" starttime="20171020 13:05:46.800"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:05:47.161">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171020 13:05:47.161" starttime="20171020 13:05:47.160"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:05:47.162">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171020 13:05:47.162" starttime="20171020 13:05:47.161"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:05:47.162">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171020 13:05:47.162" starttime="20171020 13:05:47.162"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:05:47.163">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171020 13:05:47.163" starttime="20171020 13:05:47.163"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:05:47.453">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171020 13:05:47.453" starttime="20171020 13:05:47.164"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:05:47.453">${status} = PASS</msg>
<msg level="INFO" timestamp="20171020 13:05:47.454">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:05:47.454" starttime="20171020 13:05:47.163"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:05:47.454">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:05:47.454" starttime="20171020 13:05:47.454"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:05:47.455">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:05:47.455" starttime="20171020 13:05:47.455"></status>
</kw>
<status status="PASS" endtime="20171020 13:05:47.455" starttime="20171020 13:05:47.160"></status>
</kw>
<status status="PASS" endtime="20171020 13:05:47.455" starttime="20171020 13:05:47.159"></status>
</kw>
<status status="PASS" endtime="20171020 13:05:47.456" starttime="20171020 13:05:47.159"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:05:47.456">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" endtime="20171020 13:05:47.456" starttime="20171020 13:05:47.456"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:05:47.459">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" endtime="20171020 13:05:47.459" starttime="20171020 13:05:47.458"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:05:47.459">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" endtime="20171020 13:05:47.460" starttime="20171020 13:05:47.459"></status>
</kw>
<status status="PASS" endtime="20171020 13:05:47.460" starttime="20171020 13:05:47.459"></status>
</kw>
<status status="PASS" endtime="20171020 13:05:47.460" starttime="20171020 13:05:47.457"></status>
</kw>
<status status="PASS" endtime="20171020 13:05:47.460" starttime="20171020 13:05:47.456"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:05:47.549">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20171020 13:05:47.549">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:05:47.549" starttime="20171020 13:05:47.460"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:05:47.551">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171020 13:05:47.551" starttime="20171020 13:05:47.550"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:05:47.552">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171020 13:05:47.552" starttime="20171020 13:05:47.552"></status>
</kw>
<status status="PASS" endtime="20171020 13:05:47.552" starttime="20171020 13:05:47.551"></status>
</kw>
<status status="PASS" endtime="20171020 13:05:47.552" starttime="20171020 13:05:47.550"></status>
</kw>
<status status="PASS" endtime="20171020 13:05:47.552" starttime="20171020 13:05:47.550"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171020 13:05:47.553">Delete All Sessions</msg>
<status status="PASS" endtime="20171020 13:05:47.553" starttime="20171020 13:05:47.553"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:05:47.553">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:05:47.553" starttime="20171020 13:05:47.158"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:05:47.554">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:05:47.554" starttime="20171020 13:05:47.553"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:05:47.554">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171020 13:05:47.554">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171020 13:05:47.554">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20171020 13:05:47.554" starttime="20171020 13:05:47.554"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:05:47.555">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status status="PASS" endtime="20171020 13:05:47.555" starttime="20171020 13:05:47.158"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:05:47.555">${host_state} = Running</msg>
<status status="PASS" endtime="20171020 13:05:47.555" starttime="20171020 13:05:47.157"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status status="PASS" endtime="20171020 13:05:47.556" starttime="20171020 13:05:47.555"></status>
</kw>
<kw name="Is OS Booted" library="state_manager">
<doc>Check OS status.</doc>
<kw name="Get Host State Attribute" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>BootProgress</arg>
</arguments>
<assign>
<var>${boot_stage}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>${host_attribute}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:05:47.560">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171020 13:05:47.560" starttime="20171020 13:05:47.559"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:05:47.561">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171020 13:05:47.561" starttime="20171020 13:05:47.560"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:05:47.561">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171020 13:05:47.561" starttime="20171020 13:05:47.561"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:05:47.562">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171020 13:05:47.562" starttime="20171020 13:05:47.562"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:05:47.745">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171020 13:05:47.745" starttime="20171020 13:05:47.563"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:05:47.745">${status} = PASS</msg>
<msg level="INFO" timestamp="20171020 13:05:47.746">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:05:47.746" starttime="20171020 13:05:47.562"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:05:47.746">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:05:47.746" starttime="20171020 13:05:47.746"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:05:47.747">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:05:47.747" starttime="20171020 13:05:47.747"></status>
</kw>
<status status="PASS" endtime="20171020 13:05:47.747" starttime="20171020 13:05:47.559"></status>
</kw>
<status status="PASS" endtime="20171020 13:05:47.747" starttime="20171020 13:05:47.558"></status>
</kw>
<status status="PASS" endtime="20171020 13:05:47.747" starttime="20171020 13:05:47.558"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:05:47.748">${base_uri} = /xyz/openbmc_project/state/host0//attr/BootProgress</msg>
<status status="PASS" endtime="20171020 13:05:47.748" starttime="20171020 13:05:47.748"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:05:47.750">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status status="PASS" endtime="20171020 13:05:47.750" starttime="20171020 13:05:47.749"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:05:47.751">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status status="PASS" endtime="20171020 13:05:47.751" starttime="20171020 13:05:47.751"></status>
</kw>
<status status="PASS" endtime="20171020 13:05:47.751" starttime="20171020 13:05:47.750"></status>
</kw>
<status status="PASS" endtime="20171020 13:05:47.751" starttime="20171020 13:05:47.749"></status>
</kw>
<status status="PASS" endtime="20171020 13:05:47.751" starttime="20171020 13:05:47.748"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:05:48.051">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/BootProgress, headers=None json=None</msg>
<msg level="INFO" timestamp="20171020 13:05:48.052">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:05:48.052" starttime="20171020 13:05:47.752"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:05:48.054">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171020 13:05:48.054" starttime="20171020 13:05:48.053"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:05:48.054">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171020 13:05:48.055" starttime="20171020 13:05:48.054"></status>
</kw>
<status status="PASS" endtime="20171020 13:05:48.055" starttime="20171020 13:05:48.054"></status>
</kw>
<status status="PASS" endtime="20171020 13:05:48.055" starttime="20171020 13:05:48.053"></status>
</kw>
<status status="PASS" endtime="20171020 13:05:48.055" starttime="20171020 13:05:48.052"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171020 13:05:48.055">Delete All Sessions</msg>
<status status="PASS" endtime="20171020 13:05:48.055" starttime="20171020 13:05:48.055"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:05:48.056">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:05:48.056" starttime="20171020 13:05:47.557"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:05:48.056">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:05:48.056" starttime="20171020 13:05:48.056"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:05:48.057">To JSON using : content={
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171020 13:05:48.057">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171020 13:05:48.057">${content} = {u'data': u'xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20171020 13:05:48.057" starttime="20171020 13:05:48.057"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:05:48.057">${state} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart</msg>
<status status="PASS" endtime="20171020 13:05:48.057" starttime="20171020 13:05:47.557"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:05:48.058">${boot_stage} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart</msg>
<status status="PASS" endtime="20171020 13:05:48.058" starttime="20171020 13:05:47.556"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${OS_BOOT_START}</arg>
<arg>${boot_stage}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:05:48.058">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:05:48.058" starttime="20171020 13:05:48.058"></status>
</kw>
<kw name="Get Host State Attribute" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>OperatingSystemState</arg>
</arguments>
<assign>
<var>${os_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>${host_attribute}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:05:48.062">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171020 13:05:48.063" starttime="20171020 13:05:48.062"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:05:48.063">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171020 13:05:48.063" starttime="20171020 13:05:48.063"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:05:48.064">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171020 13:05:48.064" starttime="20171020 13:05:48.064"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:05:48.065">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171020 13:05:48.065" starttime="20171020 13:05:48.064"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:05:48.314">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171020 13:05:48.314" starttime="20171020 13:05:48.066"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:05:48.314">${status} = PASS</msg>
<msg level="INFO" timestamp="20171020 13:05:48.314">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:05:48.314" starttime="20171020 13:05:48.065"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:05:48.315">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:05:48.315" starttime="20171020 13:05:48.315"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:05:48.316">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:05:48.316" starttime="20171020 13:05:48.315"></status>
</kw>
<status status="PASS" endtime="20171020 13:05:48.316" starttime="20171020 13:05:48.061"></status>
</kw>
<status status="PASS" endtime="20171020 13:05:48.316" starttime="20171020 13:05:48.061"></status>
</kw>
<status status="PASS" endtime="20171020 13:05:48.316" starttime="20171020 13:05:48.060"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:05:48.317">${base_uri} = /xyz/openbmc_project/state/host0//attr/OperatingSystemState</msg>
<status status="PASS" endtime="20171020 13:05:48.317" starttime="20171020 13:05:48.316"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:05:48.319">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/OperatingSystemState, method:Get, args:{}</msg>
<status status="PASS" endtime="20171020 13:05:48.319" starttime="20171020 13:05:48.318"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:05:48.320">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/OperatingSystemState, method:Get, args:{}</msg>
<status status="PASS" endtime="20171020 13:05:48.320" starttime="20171020 13:05:48.319"></status>
</kw>
<status status="PASS" endtime="20171020 13:05:48.320" starttime="20171020 13:05:48.319"></status>
</kw>
<status status="PASS" endtime="20171020 13:05:48.320" starttime="20171020 13:05:48.317"></status>
</kw>
<status status="PASS" endtime="20171020 13:05:48.320" starttime="20171020 13:05:48.317"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:05:48.482">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/OperatingSystemState, headers=None json=None</msg>
<msg level="INFO" timestamp="20171020 13:05:48.482">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:05:48.482" starttime="20171020 13:05:48.320"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:05:48.484">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171020 13:05:48.484" starttime="20171020 13:05:48.484"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:05:48.486">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171020 13:05:48.486" starttime="20171020 13:05:48.485"></status>
</kw>
<status status="PASS" endtime="20171020 13:05:48.486" starttime="20171020 13:05:48.484"></status>
</kw>
<status status="PASS" endtime="20171020 13:05:48.486" starttime="20171020 13:05:48.483"></status>
</kw>
<status status="PASS" endtime="20171020 13:05:48.487" starttime="20171020 13:05:48.483"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171020 13:05:48.487">Delete All Sessions</msg>
<status status="PASS" endtime="20171020 13:05:48.487" starttime="20171020 13:05:48.487"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:05:48.488">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:05:48.488" starttime="20171020 13:05:48.059"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:05:48.489">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:05:48.489" starttime="20171020 13:05:48.488"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:05:48.490">To JSON using : content={
  "data": "xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171020 13:05:48.490">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171020 13:05:48.490">${content} = {u'data': u'xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20171020 13:05:48.490" starttime="20171020 13:05:48.489"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:05:48.490">${state} = xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive</msg>
<status status="PASS" endtime="20171020 13:05:48.490" starttime="20171020 13:05:48.059"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:05:48.490">${os_state} = xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive</msg>
<status status="PASS" endtime="20171020 13:05:48.491" starttime="20171020 13:05:48.058"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${OS_BOOT_COMPLETE}</arg>
<arg>${os_state}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:05:48.491">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg level="FAIL" timestamp="20171020 13:05:48.491">xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.BootComplete != xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive</msg>
<status status="FAIL" endtime="20171020 13:05:48.491" starttime="20171020 13:05:48.491"></status>
</kw>
<status status="FAIL" endtime="20171020 13:05:48.492" starttime="20171020 13:05:47.556"></status>
</kw>
<status status="FAIL" endtime="20171020 13:05:48.492" starttime="20171020 13:05:46.799"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:05:58.498">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171020 13:05:58.499" starttime="20171020 13:05:58.498"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:05:58.499">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171020 13:05:58.499" starttime="20171020 13:05:58.499"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:05:58.500">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171020 13:05:58.500" starttime="20171020 13:05:58.500"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:05:58.501">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171020 13:05:58.501" starttime="20171020 13:05:58.501"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:05:58.681">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171020 13:05:58.681" starttime="20171020 13:05:58.503"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:05:58.681">${status} = PASS</msg>
<msg level="INFO" timestamp="20171020 13:05:58.681">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:05:58.681" starttime="20171020 13:05:58.502"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:05:58.682">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:05:58.682" starttime="20171020 13:05:58.682"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:05:58.683">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:05:58.683" starttime="20171020 13:05:58.682"></status>
</kw>
<status status="PASS" endtime="20171020 13:05:58.683" starttime="20171020 13:05:58.497"></status>
</kw>
<status status="PASS" endtime="20171020 13:05:58.683" starttime="20171020 13:05:58.497"></status>
</kw>
<status status="PASS" endtime="20171020 13:05:58.683" starttime="20171020 13:05:58.496"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:05:58.684">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" endtime="20171020 13:05:58.684" starttime="20171020 13:05:58.683"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:05:58.686">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" endtime="20171020 13:05:58.686" starttime="20171020 13:05:58.685"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:05:58.687">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" endtime="20171020 13:05:58.687" starttime="20171020 13:05:58.687"></status>
</kw>
<status status="PASS" endtime="20171020 13:05:58.687" starttime="20171020 13:05:58.686"></status>
</kw>
<status status="PASS" endtime="20171020 13:05:58.687" starttime="20171020 13:05:58.684"></status>
</kw>
<status status="PASS" endtime="20171020 13:05:58.687" starttime="20171020 13:05:58.684"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:05:58.751">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20171020 13:05:58.751">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:05:58.751" starttime="20171020 13:05:58.687"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:05:58.753">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171020 13:05:58.753" starttime="20171020 13:05:58.752"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:05:58.754">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171020 13:05:58.754" starttime="20171020 13:05:58.754"></status>
</kw>
<status status="PASS" endtime="20171020 13:05:58.754" starttime="20171020 13:05:58.753"></status>
</kw>
<status status="PASS" endtime="20171020 13:05:58.754" starttime="20171020 13:05:58.752"></status>
</kw>
<status status="PASS" endtime="20171020 13:05:58.754" starttime="20171020 13:05:58.752"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171020 13:05:58.755">Delete All Sessions</msg>
<status status="PASS" endtime="20171020 13:05:58.755" starttime="20171020 13:05:58.755"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:05:58.755">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:05:58.755" starttime="20171020 13:05:58.496"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:05:58.756">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:05:58.756" starttime="20171020 13:05:58.755"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:05:58.756">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171020 13:05:58.756">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171020 13:05:58.756">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20171020 13:05:58.756" starttime="20171020 13:05:58.756"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:05:58.757">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status status="PASS" endtime="20171020 13:05:58.757" starttime="20171020 13:05:58.495"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:05:58.757">${power_state} = On</msg>
<status status="PASS" endtime="20171020 13:05:58.757" starttime="20171020 13:05:58.494"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status status="PASS" endtime="20171020 13:05:58.758" starttime="20171020 13:05:58.757"></status>
</kw>
<status status="PASS" endtime="20171020 13:05:58.758" starttime="20171020 13:05:58.493"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:05:58.761">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171020 13:05:58.762" starttime="20171020 13:05:58.761"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:05:58.763">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171020 13:05:58.763" starttime="20171020 13:05:58.762"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:05:58.763">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171020 13:05:58.763" starttime="20171020 13:05:58.763"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:05:58.764">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171020 13:05:58.764" starttime="20171020 13:05:58.763"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:05:59.142">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171020 13:05:59.142" starttime="20171020 13:05:58.765"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:05:59.142">${status} = PASS</msg>
<msg level="INFO" timestamp="20171020 13:05:59.142">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:05:59.142" starttime="20171020 13:05:58.764"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:05:59.143">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:05:59.143" starttime="20171020 13:05:59.143"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:05:59.144">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:05:59.144" starttime="20171020 13:05:59.143"></status>
</kw>
<status status="PASS" endtime="20171020 13:05:59.144" starttime="20171020 13:05:58.760"></status>
</kw>
<status status="PASS" endtime="20171020 13:05:59.144" starttime="20171020 13:05:58.760"></status>
</kw>
<status status="PASS" endtime="20171020 13:05:59.144" starttime="20171020 13:05:58.759"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:05:59.145">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" endtime="20171020 13:05:59.145" starttime="20171020 13:05:59.144"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:05:59.147">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" endtime="20171020 13:05:59.147" starttime="20171020 13:05:59.146"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:05:59.148">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" endtime="20171020 13:05:59.148" starttime="20171020 13:05:59.147"></status>
</kw>
<status status="PASS" endtime="20171020 13:05:59.148" starttime="20171020 13:05:59.147"></status>
</kw>
<status status="PASS" endtime="20171020 13:05:59.148" starttime="20171020 13:05:59.145"></status>
</kw>
<status status="PASS" endtime="20171020 13:05:59.148" starttime="20171020 13:05:59.145"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:05:59.238">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20171020 13:05:59.238">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:05:59.238" starttime="20171020 13:05:59.148"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:05:59.240">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171020 13:05:59.240" starttime="20171020 13:05:59.239"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:05:59.241">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171020 13:05:59.241" starttime="20171020 13:05:59.240"></status>
</kw>
<status status="PASS" endtime="20171020 13:05:59.241" starttime="20171020 13:05:59.240"></status>
</kw>
<status status="PASS" endtime="20171020 13:05:59.241" starttime="20171020 13:05:59.239"></status>
</kw>
<status status="PASS" endtime="20171020 13:05:59.241" starttime="20171020 13:05:59.238"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171020 13:05:59.241">Delete All Sessions</msg>
<status status="PASS" endtime="20171020 13:05:59.242" starttime="20171020 13:05:59.241"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:05:59.242">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:05:59.242" starttime="20171020 13:05:58.759"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:05:59.242">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:05:59.242" starttime="20171020 13:05:59.242"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:05:59.243">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171020 13:05:59.243">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171020 13:05:59.243">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20171020 13:05:59.243" starttime="20171020 13:05:59.243"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:05:59.243">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status status="PASS" endtime="20171020 13:05:59.243" starttime="20171020 13:05:58.758"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:05:59.244">${host_state} = Running</msg>
<status status="PASS" endtime="20171020 13:05:59.244" starttime="20171020 13:05:58.758"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status status="PASS" endtime="20171020 13:05:59.244" starttime="20171020 13:05:59.244"></status>
</kw>
<kw name="Is OS Booted" library="state_manager">
<doc>Check OS status.</doc>
<kw name="Get Host State Attribute" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>BootProgress</arg>
</arguments>
<assign>
<var>${boot_stage}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>${host_attribute}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:05:59.252">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171020 13:05:59.253" starttime="20171020 13:05:59.252"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:05:59.253">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171020 13:05:59.253" starttime="20171020 13:05:59.253"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:05:59.254">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171020 13:05:59.254" starttime="20171020 13:05:59.254"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:05:59.255">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171020 13:05:59.255" starttime="20171020 13:05:59.254"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:05:59.452">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171020 13:05:59.453" starttime="20171020 13:05:59.255"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:05:59.453">${status} = PASS</msg>
<msg level="INFO" timestamp="20171020 13:05:59.453">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:05:59.453" starttime="20171020 13:05:59.255"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:05:59.453">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:05:59.453" starttime="20171020 13:05:59.453"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:05:59.454">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:05:59.454" starttime="20171020 13:05:59.454"></status>
</kw>
<status status="PASS" endtime="20171020 13:05:59.454" starttime="20171020 13:05:59.251"></status>
</kw>
<status status="PASS" endtime="20171020 13:05:59.454" starttime="20171020 13:05:59.251"></status>
</kw>
<status status="PASS" endtime="20171020 13:05:59.454" starttime="20171020 13:05:59.250"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:05:59.455">${base_uri} = /xyz/openbmc_project/state/host0//attr/BootProgress</msg>
<status status="PASS" endtime="20171020 13:05:59.455" starttime="20171020 13:05:59.455"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:05:59.457">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status status="PASS" endtime="20171020 13:05:59.457" starttime="20171020 13:05:59.456"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:05:59.458">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status status="PASS" endtime="20171020 13:05:59.458" starttime="20171020 13:05:59.458"></status>
</kw>
<status status="PASS" endtime="20171020 13:05:59.458" starttime="20171020 13:05:59.457"></status>
</kw>
<status status="PASS" endtime="20171020 13:05:59.458" starttime="20171020 13:05:59.456"></status>
</kw>
<status status="PASS" endtime="20171020 13:05:59.458" starttime="20171020 13:05:59.455"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:05:59.619">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/BootProgress, headers=None json=None</msg>
<msg level="INFO" timestamp="20171020 13:05:59.619">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:05:59.619" starttime="20171020 13:05:59.459"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:05:59.621">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171020 13:05:59.621" starttime="20171020 13:05:59.621"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:05:59.622">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171020 13:05:59.622" starttime="20171020 13:05:59.622"></status>
</kw>
<status status="PASS" endtime="20171020 13:05:59.622" starttime="20171020 13:05:59.621"></status>
</kw>
<status status="PASS" endtime="20171020 13:05:59.622" starttime="20171020 13:05:59.620"></status>
</kw>
<status status="PASS" endtime="20171020 13:05:59.622" starttime="20171020 13:05:59.620"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171020 13:05:59.623">Delete All Sessions</msg>
<status status="PASS" endtime="20171020 13:05:59.623" starttime="20171020 13:05:59.623"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:05:59.623">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:05:59.623" starttime="20171020 13:05:59.250"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:05:59.624">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:05:59.624" starttime="20171020 13:05:59.623"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:05:59.624">To JSON using : content={
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171020 13:05:59.624">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171020 13:05:59.625">${content} = {u'data': u'xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20171020 13:05:59.625" starttime="20171020 13:05:59.624"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:05:59.625">${state} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart</msg>
<status status="PASS" endtime="20171020 13:05:59.625" starttime="20171020 13:05:59.245"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:05:59.625">${boot_stage} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart</msg>
<status status="PASS" endtime="20171020 13:05:59.625" starttime="20171020 13:05:59.245"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${OS_BOOT_START}</arg>
<arg>${boot_stage}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:05:59.626">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:05:59.626" starttime="20171020 13:05:59.625"></status>
</kw>
<kw name="Get Host State Attribute" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>OperatingSystemState</arg>
</arguments>
<assign>
<var>${os_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>${host_attribute}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:05:59.629">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171020 13:05:59.630" starttime="20171020 13:05:59.629"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:05:59.630">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171020 13:05:59.630" starttime="20171020 13:05:59.630"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:05:59.631">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171020 13:05:59.631" starttime="20171020 13:05:59.631"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:05:59.632">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171020 13:05:59.632" starttime="20171020 13:05:59.631"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:05:59.838">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171020 13:05:59.838" starttime="20171020 13:05:59.632"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:05:59.838">${status} = PASS</msg>
<msg level="INFO" timestamp="20171020 13:05:59.838">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:05:59.838" starttime="20171020 13:05:59.632"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:05:59.839">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:05:59.839" starttime="20171020 13:05:59.839"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:05:59.840">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:05:59.840" starttime="20171020 13:05:59.839"></status>
</kw>
<status status="PASS" endtime="20171020 13:05:59.840" starttime="20171020 13:05:59.629"></status>
</kw>
<status status="PASS" endtime="20171020 13:05:59.840" starttime="20171020 13:05:59.628"></status>
</kw>
<status status="PASS" endtime="20171020 13:05:59.840" starttime="20171020 13:05:59.628"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:05:59.841">${base_uri} = /xyz/openbmc_project/state/host0//attr/OperatingSystemState</msg>
<status status="PASS" endtime="20171020 13:05:59.841" starttime="20171020 13:05:59.840"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:05:59.843">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/OperatingSystemState, method:Get, args:{}</msg>
<status status="PASS" endtime="20171020 13:05:59.843" starttime="20171020 13:05:59.842"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:05:59.844">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/OperatingSystemState, method:Get, args:{}</msg>
<status status="PASS" endtime="20171020 13:05:59.844" starttime="20171020 13:05:59.843"></status>
</kw>
<status status="PASS" endtime="20171020 13:05:59.844" starttime="20171020 13:05:59.843"></status>
</kw>
<status status="PASS" endtime="20171020 13:05:59.844" starttime="20171020 13:05:59.841"></status>
</kw>
<status status="PASS" endtime="20171020 13:05:59.844" starttime="20171020 13:05:59.841"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:05:59.999">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/OperatingSystemState, headers=None json=None</msg>
<msg level="INFO" timestamp="20171020 13:05:59.999">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:05:59.999" starttime="20171020 13:05:59.844"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:06:00.001">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171020 13:06:00.001" starttime="20171020 13:06:00.001"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:06:00.002">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171020 13:06:00.002" starttime="20171020 13:06:00.002"></status>
</kw>
<status status="PASS" endtime="20171020 13:06:00.002" starttime="20171020 13:06:00.001"></status>
</kw>
<status status="PASS" endtime="20171020 13:06:00.002" starttime="20171020 13:06:00.000"></status>
</kw>
<status status="PASS" endtime="20171020 13:06:00.002" starttime="20171020 13:06:00.000"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171020 13:06:00.003">Delete All Sessions</msg>
<status status="PASS" endtime="20171020 13:06:00.003" starttime="20171020 13:06:00.003"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:06:00.003">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:06:00.003" starttime="20171020 13:05:59.627"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:06:00.004">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:06:00.004" starttime="20171020 13:06:00.003"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:06:00.004">To JSON using : content={
  "data": "xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171020 13:06:00.004">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171020 13:06:00.004">${content} = {u'data': u'xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20171020 13:06:00.005" starttime="20171020 13:06:00.004"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:06:00.005">${state} = xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive</msg>
<status status="PASS" endtime="20171020 13:06:00.005" starttime="20171020 13:05:59.626"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:06:00.005">${os_state} = xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive</msg>
<status status="PASS" endtime="20171020 13:06:00.005" starttime="20171020 13:05:59.626"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${OS_BOOT_COMPLETE}</arg>
<arg>${os_state}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:06:00.006">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg level="FAIL" timestamp="20171020 13:06:00.006">xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.BootComplete != xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive</msg>
<status status="FAIL" endtime="20171020 13:06:00.006" starttime="20171020 13:06:00.006"></status>
</kw>
<status status="FAIL" endtime="20171020 13:06:00.007" starttime="20171020 13:05:59.244"></status>
</kw>
<status status="FAIL" endtime="20171020 13:06:00.007" starttime="20171020 13:05:58.492"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:06:10.012">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171020 13:06:10.013" starttime="20171020 13:06:10.012"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:06:10.013">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171020 13:06:10.013" starttime="20171020 13:06:10.013"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:06:10.014">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171020 13:06:10.014" starttime="20171020 13:06:10.013"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:06:10.014">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171020 13:06:10.014" starttime="20171020 13:06:10.014"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:06:10.231">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171020 13:06:10.231" starttime="20171020 13:06:10.015"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:06:10.232">${status} = PASS</msg>
<msg level="INFO" timestamp="20171020 13:06:10.232">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:06:10.232" starttime="20171020 13:06:10.015"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:06:10.232">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:06:10.232" starttime="20171020 13:06:10.232"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:06:10.233">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:06:10.233" starttime="20171020 13:06:10.233"></status>
</kw>
<status status="PASS" endtime="20171020 13:06:10.233" starttime="20171020 13:06:10.011"></status>
</kw>
<status status="PASS" endtime="20171020 13:06:10.233" starttime="20171020 13:06:10.010"></status>
</kw>
<status status="PASS" endtime="20171020 13:06:10.233" starttime="20171020 13:06:10.010"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:06:10.234">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" endtime="20171020 13:06:10.234" starttime="20171020 13:06:10.234"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:06:10.236">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" endtime="20171020 13:06:10.236" starttime="20171020 13:06:10.235"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:06:10.237">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" endtime="20171020 13:06:10.237" starttime="20171020 13:06:10.237"></status>
</kw>
<status status="PASS" endtime="20171020 13:06:10.237" starttime="20171020 13:06:10.236"></status>
</kw>
<status status="PASS" endtime="20171020 13:06:10.237" starttime="20171020 13:06:10.235"></status>
</kw>
<status status="PASS" endtime="20171020 13:06:10.237" starttime="20171020 13:06:10.234"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:06:10.323">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20171020 13:06:10.324">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:06:10.324" starttime="20171020 13:06:10.238"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:06:10.326">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171020 13:06:10.326" starttime="20171020 13:06:10.325"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:06:10.327">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171020 13:06:10.328" starttime="20171020 13:06:10.327"></status>
</kw>
<status status="PASS" endtime="20171020 13:06:10.328" starttime="20171020 13:06:10.326"></status>
</kw>
<status status="PASS" endtime="20171020 13:06:10.328" starttime="20171020 13:06:10.324"></status>
</kw>
<status status="PASS" endtime="20171020 13:06:10.328" starttime="20171020 13:06:10.324"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171020 13:06:10.328">Delete All Sessions</msg>
<status status="PASS" endtime="20171020 13:06:10.328" starttime="20171020 13:06:10.328"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:06:10.328">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:06:10.329" starttime="20171020 13:06:10.009"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:06:10.329">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:06:10.329" starttime="20171020 13:06:10.329"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:06:10.330">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171020 13:06:10.330">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171020 13:06:10.330">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20171020 13:06:10.330" starttime="20171020 13:06:10.329"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:06:10.330">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status status="PASS" endtime="20171020 13:06:10.330" starttime="20171020 13:06:10.009"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:06:10.331">${power_state} = On</msg>
<status status="PASS" endtime="20171020 13:06:10.331" starttime="20171020 13:06:10.008"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status status="PASS" endtime="20171020 13:06:10.331" starttime="20171020 13:06:10.331"></status>
</kw>
<status status="PASS" endtime="20171020 13:06:10.331" starttime="20171020 13:06:10.008"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:06:10.335">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171020 13:06:10.335" starttime="20171020 13:06:10.334"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:06:10.336">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171020 13:06:10.336" starttime="20171020 13:06:10.335"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:06:10.336">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171020 13:06:10.336" starttime="20171020 13:06:10.336"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:06:10.337">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171020 13:06:10.337" starttime="20171020 13:06:10.337"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:06:10.580">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171020 13:06:10.580" starttime="20171020 13:06:10.338"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:06:10.580">${status} = PASS</msg>
<msg level="INFO" timestamp="20171020 13:06:10.580">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:06:10.580" starttime="20171020 13:06:10.337"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:06:10.581">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:06:10.581" starttime="20171020 13:06:10.581"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:06:10.582">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:06:10.582" starttime="20171020 13:06:10.581"></status>
</kw>
<status status="PASS" endtime="20171020 13:06:10.582" starttime="20171020 13:06:10.334"></status>
</kw>
<status status="PASS" endtime="20171020 13:06:10.582" starttime="20171020 13:06:10.334"></status>
</kw>
<status status="PASS" endtime="20171020 13:06:10.582" starttime="20171020 13:06:10.333"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:06:10.582">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" endtime="20171020 13:06:10.583" starttime="20171020 13:06:10.582"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:06:10.585">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" endtime="20171020 13:06:10.585" starttime="20171020 13:06:10.584"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:06:10.586">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" endtime="20171020 13:06:10.586" starttime="20171020 13:06:10.586"></status>
</kw>
<status status="PASS" endtime="20171020 13:06:10.586" starttime="20171020 13:06:10.585"></status>
</kw>
<status status="PASS" endtime="20171020 13:06:10.586" starttime="20171020 13:06:10.583"></status>
</kw>
<status status="PASS" endtime="20171020 13:06:10.586" starttime="20171020 13:06:10.583"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:06:10.727">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20171020 13:06:10.727">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:06:10.727" starttime="20171020 13:06:10.587"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:06:10.729">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171020 13:06:10.729" starttime="20171020 13:06:10.728"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:06:10.730">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171020 13:06:10.730" starttime="20171020 13:06:10.730"></status>
</kw>
<status status="PASS" endtime="20171020 13:06:10.730" starttime="20171020 13:06:10.729"></status>
</kw>
<status status="PASS" endtime="20171020 13:06:10.730" starttime="20171020 13:06:10.727"></status>
</kw>
<status status="PASS" endtime="20171020 13:06:10.730" starttime="20171020 13:06:10.727"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171020 13:06:10.731">Delete All Sessions</msg>
<status status="PASS" endtime="20171020 13:06:10.731" starttime="20171020 13:06:10.731"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:06:10.731">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:06:10.731" starttime="20171020 13:06:10.332"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:06:10.732">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:06:10.732" starttime="20171020 13:06:10.731"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:06:10.732">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171020 13:06:10.732">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171020 13:06:10.733">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20171020 13:06:10.733" starttime="20171020 13:06:10.732"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:06:10.733">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status status="PASS" endtime="20171020 13:06:10.733" starttime="20171020 13:06:10.332"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:06:10.733">${host_state} = Running</msg>
<status status="PASS" endtime="20171020 13:06:10.733" starttime="20171020 13:06:10.331"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status status="PASS" endtime="20171020 13:06:10.734" starttime="20171020 13:06:10.733"></status>
</kw>
<kw name="Is OS Booted" library="state_manager">
<doc>Check OS status.</doc>
<kw name="Get Host State Attribute" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>BootProgress</arg>
</arguments>
<assign>
<var>${boot_stage}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>${host_attribute}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:06:10.738">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171020 13:06:10.738" starttime="20171020 13:06:10.737"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:06:10.739">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171020 13:06:10.739" starttime="20171020 13:06:10.738"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:06:10.739">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171020 13:06:10.739" starttime="20171020 13:06:10.739"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:06:10.740">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171020 13:06:10.740" starttime="20171020 13:06:10.740"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:06:11.033">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171020 13:06:11.033" starttime="20171020 13:06:10.741"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:06:11.033">${status} = PASS</msg>
<msg level="INFO" timestamp="20171020 13:06:11.033">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:06:11.033" starttime="20171020 13:06:10.740"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:06:11.034">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:06:11.034" starttime="20171020 13:06:11.033"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:06:11.034">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:06:11.034" starttime="20171020 13:06:11.034"></status>
</kw>
<status status="PASS" endtime="20171020 13:06:11.034" starttime="20171020 13:06:10.737"></status>
</kw>
<status status="PASS" endtime="20171020 13:06:11.035" starttime="20171020 13:06:10.736"></status>
</kw>
<status status="PASS" endtime="20171020 13:06:11.035" starttime="20171020 13:06:10.736"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:06:11.035">${base_uri} = /xyz/openbmc_project/state/host0//attr/BootProgress</msg>
<status status="PASS" endtime="20171020 13:06:11.035" starttime="20171020 13:06:11.035"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:06:11.037">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status status="PASS" endtime="20171020 13:06:11.037" starttime="20171020 13:06:11.037"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:06:11.038">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status status="PASS" endtime="20171020 13:06:11.038" starttime="20171020 13:06:11.038"></status>
</kw>
<status status="PASS" endtime="20171020 13:06:11.038" starttime="20171020 13:06:11.038"></status>
</kw>
<status status="PASS" endtime="20171020 13:06:11.039" starttime="20171020 13:06:11.036"></status>
</kw>
<status status="PASS" endtime="20171020 13:06:11.039" starttime="20171020 13:06:11.036"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:06:11.229">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/BootProgress, headers=None json=None</msg>
<msg level="INFO" timestamp="20171020 13:06:11.229">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:06:11.229" starttime="20171020 13:06:11.039"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:06:11.231">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171020 13:06:11.231" starttime="20171020 13:06:11.230"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:06:11.232">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171020 13:06:11.232" starttime="20171020 13:06:11.232"></status>
</kw>
<status status="PASS" endtime="20171020 13:06:11.232" starttime="20171020 13:06:11.231"></status>
</kw>
<status status="PASS" endtime="20171020 13:06:11.232" starttime="20171020 13:06:11.230"></status>
</kw>
<status status="PASS" endtime="20171020 13:06:11.232" starttime="20171020 13:06:11.229"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171020 13:06:11.233">Delete All Sessions</msg>
<status status="PASS" endtime="20171020 13:06:11.233" starttime="20171020 13:06:11.232"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:06:11.233">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:06:11.233" starttime="20171020 13:06:10.735"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:06:11.233">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:06:11.234" starttime="20171020 13:06:11.233"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:06:11.234">To JSON using : content={
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171020 13:06:11.234">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171020 13:06:11.234">${content} = {u'data': u'xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20171020 13:06:11.234" starttime="20171020 13:06:11.234"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:06:11.235">${state} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart</msg>
<status status="PASS" endtime="20171020 13:06:11.235" starttime="20171020 13:06:10.735"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:06:11.235">${boot_stage} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart</msg>
<status status="PASS" endtime="20171020 13:06:11.235" starttime="20171020 13:06:10.734"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${OS_BOOT_START}</arg>
<arg>${boot_stage}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:06:11.236">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:06:11.236" starttime="20171020 13:06:11.235"></status>
</kw>
<kw name="Get Host State Attribute" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>OperatingSystemState</arg>
</arguments>
<assign>
<var>${os_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>${host_attribute}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:06:11.240">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171020 13:06:11.240" starttime="20171020 13:06:11.239"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:06:11.240">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171020 13:06:11.241" starttime="20171020 13:06:11.240"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:06:11.241">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171020 13:06:11.241" starttime="20171020 13:06:11.241"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:06:11.242">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171020 13:06:11.242" starttime="20171020 13:06:11.241"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:06:11.595">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171020 13:06:11.595" starttime="20171020 13:06:11.243"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:06:11.595">${status} = PASS</msg>
<msg level="INFO" timestamp="20171020 13:06:11.595">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:06:11.595" starttime="20171020 13:06:11.242"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:06:11.596">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:06:11.596" starttime="20171020 13:06:11.596"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:06:11.597">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:06:11.597" starttime="20171020 13:06:11.596"></status>
</kw>
<status status="PASS" endtime="20171020 13:06:11.597" starttime="20171020 13:06:11.238"></status>
</kw>
<status status="PASS" endtime="20171020 13:06:11.597" starttime="20171020 13:06:11.238"></status>
</kw>
<status status="PASS" endtime="20171020 13:06:11.597" starttime="20171020 13:06:11.237"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:06:11.598">${base_uri} = /xyz/openbmc_project/state/host0//attr/OperatingSystemState</msg>
<status status="PASS" endtime="20171020 13:06:11.598" starttime="20171020 13:06:11.597"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:06:11.600">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/OperatingSystemState, method:Get, args:{}</msg>
<status status="PASS" endtime="20171020 13:06:11.600" starttime="20171020 13:06:11.599"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:06:11.601">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/OperatingSystemState, method:Get, args:{}</msg>
<status status="PASS" endtime="20171020 13:06:11.601" starttime="20171020 13:06:11.600"></status>
</kw>
<status status="PASS" endtime="20171020 13:06:11.601" starttime="20171020 13:06:11.600"></status>
</kw>
<status status="PASS" endtime="20171020 13:06:11.601" starttime="20171020 13:06:11.598"></status>
</kw>
<status status="PASS" endtime="20171020 13:06:11.601" starttime="20171020 13:06:11.598"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:06:11.691">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/OperatingSystemState, headers=None json=None</msg>
<msg level="INFO" timestamp="20171020 13:06:11.691">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:06:11.691" starttime="20171020 13:06:11.601"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:06:11.693">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171020 13:06:11.693" starttime="20171020 13:06:11.692"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:06:11.694">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171020 13:06:11.694" starttime="20171020 13:06:11.693"></status>
</kw>
<status status="PASS" endtime="20171020 13:06:11.694" starttime="20171020 13:06:11.693"></status>
</kw>
<status status="PASS" endtime="20171020 13:06:11.694" starttime="20171020 13:06:11.692"></status>
</kw>
<status status="PASS" endtime="20171020 13:06:11.694" starttime="20171020 13:06:11.691"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171020 13:06:11.695">Delete All Sessions</msg>
<status status="PASS" endtime="20171020 13:06:11.695" starttime="20171020 13:06:11.695"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:06:11.695">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:06:11.695" starttime="20171020 13:06:11.237"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:06:11.696">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:06:11.696" starttime="20171020 13:06:11.695"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:06:11.696">To JSON using : content={
  "data": "xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171020 13:06:11.696">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171020 13:06:11.697">${content} = {u'data': u'xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20171020 13:06:11.697" starttime="20171020 13:06:11.696"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:06:11.697">${state} = xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive</msg>
<status status="PASS" endtime="20171020 13:06:11.697" starttime="20171020 13:06:11.236"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:06:11.697">${os_state} = xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive</msg>
<status status="PASS" endtime="20171020 13:06:11.697" starttime="20171020 13:06:11.236"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${OS_BOOT_COMPLETE}</arg>
<arg>${os_state}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:06:11.698">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg level="FAIL" timestamp="20171020 13:06:11.698">xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.BootComplete != xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive</msg>
<status status="FAIL" endtime="20171020 13:06:11.698" starttime="20171020 13:06:11.697"></status>
</kw>
<status status="FAIL" endtime="20171020 13:06:11.698" starttime="20171020 13:06:10.734"></status>
</kw>
<status status="FAIL" endtime="20171020 13:06:11.698" starttime="20171020 13:06:10.007"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:06:21.703">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171020 13:06:21.704" starttime="20171020 13:06:21.703"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:06:21.704">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171020 13:06:21.704" starttime="20171020 13:06:21.704"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:06:21.705">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171020 13:06:21.705" starttime="20171020 13:06:21.704"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:06:21.705">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171020 13:06:21.705" starttime="20171020 13:06:21.705"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:06:22.102">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171020 13:06:22.103" starttime="20171020 13:06:21.706"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:06:22.103">${status} = PASS</msg>
<msg level="INFO" timestamp="20171020 13:06:22.103">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:06:22.103" starttime="20171020 13:06:21.706"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:06:22.103">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:06:22.103" starttime="20171020 13:06:22.103"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:06:22.104">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:06:22.104" starttime="20171020 13:06:22.104"></status>
</kw>
<status status="PASS" endtime="20171020 13:06:22.104" starttime="20171020 13:06:21.702"></status>
</kw>
<status status="PASS" endtime="20171020 13:06:22.104" starttime="20171020 13:06:21.702"></status>
</kw>
<status status="PASS" endtime="20171020 13:06:22.104" starttime="20171020 13:06:21.701"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:06:22.105">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" endtime="20171020 13:06:22.105" starttime="20171020 13:06:22.105"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:06:22.107">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" endtime="20171020 13:06:22.107" starttime="20171020 13:06:22.107"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:06:22.108">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" endtime="20171020 13:06:22.108" starttime="20171020 13:06:22.108"></status>
</kw>
<status status="PASS" endtime="20171020 13:06:22.108" starttime="20171020 13:06:22.107"></status>
</kw>
<status status="PASS" endtime="20171020 13:06:22.109" starttime="20171020 13:06:22.106"></status>
</kw>
<status status="PASS" endtime="20171020 13:06:22.109" starttime="20171020 13:06:22.105"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:06:22.172">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20171020 13:06:22.173">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:06:22.173" starttime="20171020 13:06:22.109"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:06:22.174">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171020 13:06:22.174" starttime="20171020 13:06:22.174"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:06:22.175">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171020 13:06:22.175" starttime="20171020 13:06:22.175"></status>
</kw>
<status status="PASS" endtime="20171020 13:06:22.176" starttime="20171020 13:06:22.174"></status>
</kw>
<status status="PASS" endtime="20171020 13:06:22.176" starttime="20171020 13:06:22.173"></status>
</kw>
<status status="PASS" endtime="20171020 13:06:22.176" starttime="20171020 13:06:22.173"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171020 13:06:22.176">Delete All Sessions</msg>
<status status="PASS" endtime="20171020 13:06:22.176" starttime="20171020 13:06:22.176"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:06:22.176">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:06:22.176" starttime="20171020 13:06:21.701"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:06:22.177">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:06:22.177" starttime="20171020 13:06:22.177"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:06:22.178">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171020 13:06:22.178">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171020 13:06:22.178">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20171020 13:06:22.178" starttime="20171020 13:06:22.177"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:06:22.178">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status status="PASS" endtime="20171020 13:06:22.178" starttime="20171020 13:06:21.700"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:06:22.178">${power_state} = On</msg>
<status status="PASS" endtime="20171020 13:06:22.179" starttime="20171020 13:06:21.699"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status status="PASS" endtime="20171020 13:06:22.179" starttime="20171020 13:06:22.179"></status>
</kw>
<status status="PASS" endtime="20171020 13:06:22.179" starttime="20171020 13:06:21.699"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:06:22.183">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171020 13:06:22.183" starttime="20171020 13:06:22.182"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:06:22.184">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171020 13:06:22.184" starttime="20171020 13:06:22.184"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:06:22.185">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171020 13:06:22.185" starttime="20171020 13:06:22.184"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:06:22.185">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171020 13:06:22.185" starttime="20171020 13:06:22.185"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:06:22.441">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171020 13:06:22.441" starttime="20171020 13:06:22.186"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:06:22.441">${status} = PASS</msg>
<msg level="INFO" timestamp="20171020 13:06:22.441">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:06:22.441" starttime="20171020 13:06:22.186"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:06:22.442">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:06:22.442" starttime="20171020 13:06:22.442"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:06:22.443">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:06:22.443" starttime="20171020 13:06:22.442"></status>
</kw>
<status status="PASS" endtime="20171020 13:06:22.443" starttime="20171020 13:06:22.182"></status>
</kw>
<status status="PASS" endtime="20171020 13:06:22.443" starttime="20171020 13:06:22.181"></status>
</kw>
<status status="PASS" endtime="20171020 13:06:22.443" starttime="20171020 13:06:22.181"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:06:22.444">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" endtime="20171020 13:06:22.444" starttime="20171020 13:06:22.443"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:06:22.446">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" endtime="20171020 13:06:22.446" starttime="20171020 13:06:22.445"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:06:22.448">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" endtime="20171020 13:06:22.448" starttime="20171020 13:06:22.447"></status>
</kw>
<status status="PASS" endtime="20171020 13:06:22.448" starttime="20171020 13:06:22.446"></status>
</kw>
<status status="PASS" endtime="20171020 13:06:22.448" starttime="20171020 13:06:22.444"></status>
</kw>
<status status="PASS" endtime="20171020 13:06:22.448" starttime="20171020 13:06:22.444"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:06:22.537">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20171020 13:06:22.537">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:06:22.537" starttime="20171020 13:06:22.448"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:06:22.539">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171020 13:06:22.539" starttime="20171020 13:06:22.539"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:06:22.540">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171020 13:06:22.540" starttime="20171020 13:06:22.540"></status>
</kw>
<status status="PASS" endtime="20171020 13:06:22.540" starttime="20171020 13:06:22.539"></status>
</kw>
<status status="PASS" endtime="20171020 13:06:22.540" starttime="20171020 13:06:22.538"></status>
</kw>
<status status="PASS" endtime="20171020 13:06:22.540" starttime="20171020 13:06:22.538"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171020 13:06:22.541">Delete All Sessions</msg>
<status status="PASS" endtime="20171020 13:06:22.541" starttime="20171020 13:06:22.541"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:06:22.541">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:06:22.541" starttime="20171020 13:06:22.180"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:06:22.542">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:06:22.542" starttime="20171020 13:06:22.541"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:06:22.542">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171020 13:06:22.542">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171020 13:06:22.543">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20171020 13:06:22.543" starttime="20171020 13:06:22.542"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:06:22.543">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status status="PASS" endtime="20171020 13:06:22.543" starttime="20171020 13:06:22.180"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:06:22.543">${host_state} = Running</msg>
<status status="PASS" endtime="20171020 13:06:22.543" starttime="20171020 13:06:22.179"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status status="PASS" endtime="20171020 13:06:22.544" starttime="20171020 13:06:22.543"></status>
</kw>
<kw name="Is OS Booted" library="state_manager">
<doc>Check OS status.</doc>
<kw name="Get Host State Attribute" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>BootProgress</arg>
</arguments>
<assign>
<var>${boot_stage}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>${host_attribute}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:06:22.548">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171020 13:06:22.549" starttime="20171020 13:06:22.548"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:06:22.550">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171020 13:06:22.550" starttime="20171020 13:06:22.549"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:06:22.550">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171020 13:06:22.551" starttime="20171020 13:06:22.550"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:06:22.551">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171020 13:06:22.552" starttime="20171020 13:06:22.551"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:06:22.782">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171020 13:06:22.782" starttime="20171020 13:06:22.553"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:06:22.782">${status} = PASS</msg>
<msg level="INFO" timestamp="20171020 13:06:22.782">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:06:22.782" starttime="20171020 13:06:22.552"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:06:22.783">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:06:22.783" starttime="20171020 13:06:22.782"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:06:22.783">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:06:22.783" starttime="20171020 13:06:22.783"></status>
</kw>
<status status="PASS" endtime="20171020 13:06:22.784" starttime="20171020 13:06:22.547"></status>
</kw>
<status status="PASS" endtime="20171020 13:06:22.784" starttime="20171020 13:06:22.547"></status>
</kw>
<status status="PASS" endtime="20171020 13:06:22.784" starttime="20171020 13:06:22.546"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:06:22.784">${base_uri} = /xyz/openbmc_project/state/host0//attr/BootProgress</msg>
<status status="PASS" endtime="20171020 13:06:22.784" starttime="20171020 13:06:22.784"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:06:22.786">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status status="PASS" endtime="20171020 13:06:22.787" starttime="20171020 13:06:22.786"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:06:22.787">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status status="PASS" endtime="20171020 13:06:22.787" starttime="20171020 13:06:22.787"></status>
</kw>
<status status="PASS" endtime="20171020 13:06:22.788" starttime="20171020 13:06:22.787"></status>
</kw>
<status status="PASS" endtime="20171020 13:06:22.788" starttime="20171020 13:06:22.785"></status>
</kw>
<status status="PASS" endtime="20171020 13:06:22.788" starttime="20171020 13:06:22.785"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:06:22.884">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/BootProgress, headers=None json=None</msg>
<msg level="INFO" timestamp="20171020 13:06:22.884">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:06:22.884" starttime="20171020 13:06:22.788"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:06:22.886">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171020 13:06:22.886" starttime="20171020 13:06:22.885"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:06:22.887">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171020 13:06:22.887" starttime="20171020 13:06:22.886"></status>
</kw>
<status status="PASS" endtime="20171020 13:06:22.887" starttime="20171020 13:06:22.886"></status>
</kw>
<status status="PASS" endtime="20171020 13:06:22.887" starttime="20171020 13:06:22.885"></status>
</kw>
<status status="PASS" endtime="20171020 13:06:22.887" starttime="20171020 13:06:22.884"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171020 13:06:22.887">Delete All Sessions</msg>
<status status="PASS" endtime="20171020 13:06:22.887" starttime="20171020 13:06:22.887"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:06:22.888">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:06:22.888" starttime="20171020 13:06:22.545"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:06:22.888">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:06:22.888" starttime="20171020 13:06:22.888"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:06:22.889">To JSON using : content={
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171020 13:06:22.889">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171020 13:06:22.889">${content} = {u'data': u'xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20171020 13:06:22.889" starttime="20171020 13:06:22.889"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:06:22.889">${state} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart</msg>
<status status="PASS" endtime="20171020 13:06:22.889" starttime="20171020 13:06:22.545"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:06:22.890">${boot_stage} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart</msg>
<status status="PASS" endtime="20171020 13:06:22.890" starttime="20171020 13:06:22.544"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${OS_BOOT_START}</arg>
<arg>${boot_stage}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:06:22.890">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:06:22.890" starttime="20171020 13:06:22.890"></status>
</kw>
<kw name="Get Host State Attribute" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>OperatingSystemState</arg>
</arguments>
<assign>
<var>${os_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>${host_attribute}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:06:22.894">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171020 13:06:22.895" starttime="20171020 13:06:22.894"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:06:22.895">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171020 13:06:22.895" starttime="20171020 13:06:22.895"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:06:22.896">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171020 13:06:22.896" starttime="20171020 13:06:22.896"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:06:22.897">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171020 13:06:22.897" starttime="20171020 13:06:22.896"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:06:23.183">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171020 13:06:23.183" starttime="20171020 13:06:22.897"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:06:23.183">${status} = PASS</msg>
<msg level="INFO" timestamp="20171020 13:06:23.183">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:06:23.183" starttime="20171020 13:06:22.897"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:06:23.184">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:06:23.184" starttime="20171020 13:06:23.183"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:06:23.184">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:06:23.185" starttime="20171020 13:06:23.184"></status>
</kw>
<status status="PASS" endtime="20171020 13:06:23.185" starttime="20171020 13:06:22.893"></status>
</kw>
<status status="PASS" endtime="20171020 13:06:23.185" starttime="20171020 13:06:22.893"></status>
</kw>
<status status="PASS" endtime="20171020 13:06:23.185" starttime="20171020 13:06:22.892"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:06:23.185">${base_uri} = /xyz/openbmc_project/state/host0//attr/OperatingSystemState</msg>
<status status="PASS" endtime="20171020 13:06:23.186" starttime="20171020 13:06:23.185"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:06:23.188">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/OperatingSystemState, method:Get, args:{}</msg>
<status status="PASS" endtime="20171020 13:06:23.188" starttime="20171020 13:06:23.187"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:06:23.188">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/OperatingSystemState, method:Get, args:{}</msg>
<status status="PASS" endtime="20171020 13:06:23.189" starttime="20171020 13:06:23.188"></status>
</kw>
<status status="PASS" endtime="20171020 13:06:23.189" starttime="20171020 13:06:23.188"></status>
</kw>
<status status="PASS" endtime="20171020 13:06:23.189" starttime="20171020 13:06:23.186"></status>
</kw>
<status status="PASS" endtime="20171020 13:06:23.189" starttime="20171020 13:06:23.186"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:06:23.324">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/OperatingSystemState, headers=None json=None</msg>
<msg level="INFO" timestamp="20171020 13:06:23.324">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:06:23.324" starttime="20171020 13:06:23.189"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:06:23.326">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171020 13:06:23.326" starttime="20171020 13:06:23.325"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:06:23.327">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171020 13:06:23.327" starttime="20171020 13:06:23.327"></status>
</kw>
<status status="PASS" endtime="20171020 13:06:23.327" starttime="20171020 13:06:23.326"></status>
</kw>
<status status="PASS" endtime="20171020 13:06:23.327" starttime="20171020 13:06:23.325"></status>
</kw>
<status status="PASS" endtime="20171020 13:06:23.327" starttime="20171020 13:06:23.325"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171020 13:06:23.328">Delete All Sessions</msg>
<status status="PASS" endtime="20171020 13:06:23.328" starttime="20171020 13:06:23.328"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:06:23.328">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:06:23.328" starttime="20171020 13:06:22.892"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:06:23.329">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:06:23.329" starttime="20171020 13:06:23.328"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:06:23.329">To JSON using : content={
  "data": "xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171020 13:06:23.329">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171020 13:06:23.329">${content} = {u'data': u'xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20171020 13:06:23.329" starttime="20171020 13:06:23.329"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:06:23.330">${state} = xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive</msg>
<status status="PASS" endtime="20171020 13:06:23.330" starttime="20171020 13:06:22.891"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:06:23.330">${os_state} = xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive</msg>
<status status="PASS" endtime="20171020 13:06:23.330" starttime="20171020 13:06:22.891"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${OS_BOOT_COMPLETE}</arg>
<arg>${os_state}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:06:23.330">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg level="FAIL" timestamp="20171020 13:06:23.331">xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.BootComplete != xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive</msg>
<status status="FAIL" endtime="20171020 13:06:23.331" starttime="20171020 13:06:23.330"></status>
</kw>
<status status="FAIL" endtime="20171020 13:06:23.331" starttime="20171020 13:06:22.544"></status>
</kw>
<status status="FAIL" endtime="20171020 13:06:23.331" starttime="20171020 13:06:21.699"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:06:33.337">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171020 13:06:33.337" starttime="20171020 13:06:33.336"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:06:33.338">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171020 13:06:33.338" starttime="20171020 13:06:33.337"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:06:33.338">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171020 13:06:33.338" starttime="20171020 13:06:33.338"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:06:33.339">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171020 13:06:33.339" starttime="20171020 13:06:33.339"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:06:33.671">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171020 13:06:33.671" starttime="20171020 13:06:33.340"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:06:33.671">${status} = PASS</msg>
<msg level="INFO" timestamp="20171020 13:06:33.671">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:06:33.671" starttime="20171020 13:06:33.339"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:06:33.672">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:06:33.672" starttime="20171020 13:06:33.672"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:06:33.673">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:06:33.673" starttime="20171020 13:06:33.672"></status>
</kw>
<status status="PASS" endtime="20171020 13:06:33.673" starttime="20171020 13:06:33.335"></status>
</kw>
<status status="PASS" endtime="20171020 13:06:33.673" starttime="20171020 13:06:33.335"></status>
</kw>
<status status="PASS" endtime="20171020 13:06:33.673" starttime="20171020 13:06:33.334"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:06:33.674">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" endtime="20171020 13:06:33.674" starttime="20171020 13:06:33.673"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:06:33.676">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" endtime="20171020 13:06:33.676" starttime="20171020 13:06:33.675"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:06:33.677">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" endtime="20171020 13:06:33.677" starttime="20171020 13:06:33.677"></status>
</kw>
<status status="PASS" endtime="20171020 13:06:33.677" starttime="20171020 13:06:33.676"></status>
</kw>
<status status="PASS" endtime="20171020 13:06:33.677" starttime="20171020 13:06:33.674"></status>
</kw>
<status status="PASS" endtime="20171020 13:06:33.677" starttime="20171020 13:06:33.674"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:06:33.741">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20171020 13:06:33.741">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:06:33.741" starttime="20171020 13:06:33.678"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:06:33.743">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171020 13:06:33.743" starttime="20171020 13:06:33.743"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:06:33.744">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171020 13:06:33.744" starttime="20171020 13:06:33.744"></status>
</kw>
<status status="PASS" endtime="20171020 13:06:33.745" starttime="20171020 13:06:33.743"></status>
</kw>
<status status="PASS" endtime="20171020 13:06:33.745" starttime="20171020 13:06:33.742"></status>
</kw>
<status status="PASS" endtime="20171020 13:06:33.745" starttime="20171020 13:06:33.742"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171020 13:06:33.745">Delete All Sessions</msg>
<status status="PASS" endtime="20171020 13:06:33.745" starttime="20171020 13:06:33.745"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:06:33.745">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:06:33.745" starttime="20171020 13:06:33.333"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:06:33.746">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:06:33.746" starttime="20171020 13:06:33.746"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:06:33.747">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171020 13:06:33.747">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171020 13:06:33.747">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20171020 13:06:33.747" starttime="20171020 13:06:33.746"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:06:33.747">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status status="PASS" endtime="20171020 13:06:33.747" starttime="20171020 13:06:33.333"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:06:33.748">${power_state} = On</msg>
<status status="PASS" endtime="20171020 13:06:33.748" starttime="20171020 13:06:33.332"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status status="PASS" endtime="20171020 13:06:33.748" starttime="20171020 13:06:33.748"></status>
</kw>
<status status="PASS" endtime="20171020 13:06:33.748" starttime="20171020 13:06:33.332"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:06:33.752">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171020 13:06:33.753" starttime="20171020 13:06:33.752"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:06:33.753">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171020 13:06:33.753" starttime="20171020 13:06:33.753"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:06:33.754">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171020 13:06:33.754" starttime="20171020 13:06:33.753"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:06:33.755">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171020 13:06:33.755" starttime="20171020 13:06:33.754"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:06:33.966">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171020 13:06:33.967" starttime="20171020 13:06:33.756"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:06:33.967">${status} = PASS</msg>
<msg level="INFO" timestamp="20171020 13:06:33.967">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:06:33.967" starttime="20171020 13:06:33.755"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:06:33.967">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:06:33.968" starttime="20171020 13:06:33.967"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:06:33.969">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:06:33.969" starttime="20171020 13:06:33.968"></status>
</kw>
<status status="PASS" endtime="20171020 13:06:33.969" starttime="20171020 13:06:33.751"></status>
</kw>
<status status="PASS" endtime="20171020 13:06:33.969" starttime="20171020 13:06:33.751"></status>
</kw>
<status status="PASS" endtime="20171020 13:06:33.969" starttime="20171020 13:06:33.750"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:06:33.970">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" endtime="20171020 13:06:33.970" starttime="20171020 13:06:33.969"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:06:33.973">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" endtime="20171020 13:06:33.973" starttime="20171020 13:06:33.972"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:06:33.975">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" endtime="20171020 13:06:33.975" starttime="20171020 13:06:33.974"></status>
</kw>
<status status="PASS" endtime="20171020 13:06:33.975" starttime="20171020 13:06:33.974"></status>
</kw>
<status status="PASS" endtime="20171020 13:06:33.975" starttime="20171020 13:06:33.971"></status>
</kw>
<status status="PASS" endtime="20171020 13:06:33.975" starttime="20171020 13:06:33.970"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:06:34.064">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20171020 13:06:34.065">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:06:34.065" starttime="20171020 13:06:33.975"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:06:34.067">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171020 13:06:34.067" starttime="20171020 13:06:34.066"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:06:34.067">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171020 13:06:34.068" starttime="20171020 13:06:34.067"></status>
</kw>
<status status="PASS" endtime="20171020 13:06:34.068" starttime="20171020 13:06:34.067"></status>
</kw>
<status status="PASS" endtime="20171020 13:06:34.068" starttime="20171020 13:06:34.065"></status>
</kw>
<status status="PASS" endtime="20171020 13:06:34.068" starttime="20171020 13:06:34.065"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171020 13:06:34.068">Delete All Sessions</msg>
<status status="PASS" endtime="20171020 13:06:34.068" starttime="20171020 13:06:34.068"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:06:34.069">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:06:34.069" starttime="20171020 13:06:33.750"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:06:34.069">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:06:34.069" starttime="20171020 13:06:34.069"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:06:34.070">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171020 13:06:34.070">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171020 13:06:34.070">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20171020 13:06:34.070" starttime="20171020 13:06:34.070"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:06:34.070">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status status="PASS" endtime="20171020 13:06:34.070" starttime="20171020 13:06:33.749"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:06:34.071">${host_state} = Running</msg>
<status status="PASS" endtime="20171020 13:06:34.071" starttime="20171020 13:06:33.749"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status status="PASS" endtime="20171020 13:06:34.071" starttime="20171020 13:06:34.071"></status>
</kw>
<kw name="Is OS Booted" library="state_manager">
<doc>Check OS status.</doc>
<kw name="Get Host State Attribute" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>BootProgress</arg>
</arguments>
<assign>
<var>${boot_stage}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>${host_attribute}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:06:34.075">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171020 13:06:34.076" starttime="20171020 13:06:34.075"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:06:34.077">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171020 13:06:34.077" starttime="20171020 13:06:34.076"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:06:34.078">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171020 13:06:34.078" starttime="20171020 13:06:34.077"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:06:34.079">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171020 13:06:34.079" starttime="20171020 13:06:34.078"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:06:34.257">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171020 13:06:34.257" starttime="20171020 13:06:34.080"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:06:34.258">${status} = PASS</msg>
<msg level="INFO" timestamp="20171020 13:06:34.258">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:06:34.258" starttime="20171020 13:06:34.079"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:06:34.258">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:06:34.258" starttime="20171020 13:06:34.258"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:06:34.259">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:06:34.259" starttime="20171020 13:06:34.259"></status>
</kw>
<status status="PASS" endtime="20171020 13:06:34.259" starttime="20171020 13:06:34.074"></status>
</kw>
<status status="PASS" endtime="20171020 13:06:34.259" starttime="20171020 13:06:34.074"></status>
</kw>
<status status="PASS" endtime="20171020 13:06:34.259" starttime="20171020 13:06:34.073"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:06:34.260">${base_uri} = /xyz/openbmc_project/state/host0//attr/BootProgress</msg>
<status status="PASS" endtime="20171020 13:06:34.260" starttime="20171020 13:06:34.260"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:06:34.262">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status status="PASS" endtime="20171020 13:06:34.262" starttime="20171020 13:06:34.261"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:06:34.263">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status status="PASS" endtime="20171020 13:06:34.263" starttime="20171020 13:06:34.263"></status>
</kw>
<status status="PASS" endtime="20171020 13:06:34.263" starttime="20171020 13:06:34.262"></status>
</kw>
<status status="PASS" endtime="20171020 13:06:34.263" starttime="20171020 13:06:34.261"></status>
</kw>
<status status="PASS" endtime="20171020 13:06:34.264" starttime="20171020 13:06:34.260"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:06:34.354">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/BootProgress, headers=None json=None</msg>
<msg level="INFO" timestamp="20171020 13:06:34.354">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:06:34.354" starttime="20171020 13:06:34.264"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:06:34.356">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171020 13:06:34.356" starttime="20171020 13:06:34.355"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:06:34.357">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171020 13:06:34.358" starttime="20171020 13:06:34.357"></status>
</kw>
<status status="PASS" endtime="20171020 13:06:34.358" starttime="20171020 13:06:34.356"></status>
</kw>
<status status="PASS" endtime="20171020 13:06:34.358" starttime="20171020 13:06:34.355"></status>
</kw>
<status status="PASS" endtime="20171020 13:06:34.358" starttime="20171020 13:06:34.354"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171020 13:06:34.358">Delete All Sessions</msg>
<status status="PASS" endtime="20171020 13:06:34.358" starttime="20171020 13:06:34.358"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:06:34.359">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:06:34.359" starttime="20171020 13:06:34.073"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:06:34.359">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:06:34.359" starttime="20171020 13:06:34.359"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:06:34.360">To JSON using : content={
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171020 13:06:34.360">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171020 13:06:34.360">${content} = {u'data': u'xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20171020 13:06:34.360" starttime="20171020 13:06:34.359"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:06:34.360">${state} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart</msg>
<status status="PASS" endtime="20171020 13:06:34.360" starttime="20171020 13:06:34.072"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:06:34.360">${boot_stage} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart</msg>
<status status="PASS" endtime="20171020 13:06:34.361" starttime="20171020 13:06:34.072"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${OS_BOOT_START}</arg>
<arg>${boot_stage}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:06:34.361">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:06:34.361" starttime="20171020 13:06:34.361"></status>
</kw>
<kw name="Get Host State Attribute" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>OperatingSystemState</arg>
</arguments>
<assign>
<var>${os_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>${host_attribute}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:06:34.365">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171020 13:06:34.365" starttime="20171020 13:06:34.365"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:06:34.366">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171020 13:06:34.366" starttime="20171020 13:06:34.366"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:06:34.367">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171020 13:06:34.367" starttime="20171020 13:06:34.367"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:06:34.368">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171020 13:06:34.368" starttime="20171020 13:06:34.367"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:06:34.660">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171020 13:06:34.660" starttime="20171020 13:06:34.368"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:06:34.660">${status} = PASS</msg>
<msg level="INFO" timestamp="20171020 13:06:34.660">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:06:34.660" starttime="20171020 13:06:34.368"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:06:34.661">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:06:34.661" starttime="20171020 13:06:34.660"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:06:34.661">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:06:34.661" starttime="20171020 13:06:34.661"></status>
</kw>
<status status="PASS" endtime="20171020 13:06:34.662" starttime="20171020 13:06:34.364"></status>
</kw>
<status status="PASS" endtime="20171020 13:06:34.662" starttime="20171020 13:06:34.363"></status>
</kw>
<status status="PASS" endtime="20171020 13:06:34.662" starttime="20171020 13:06:34.363"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:06:34.662">${base_uri} = /xyz/openbmc_project/state/host0//attr/OperatingSystemState</msg>
<status status="PASS" endtime="20171020 13:06:34.662" starttime="20171020 13:06:34.662"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:06:34.664">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/OperatingSystemState, method:Get, args:{}</msg>
<status status="PASS" endtime="20171020 13:06:34.665" starttime="20171020 13:06:34.664"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:06:34.665">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/OperatingSystemState, method:Get, args:{}</msg>
<status status="PASS" endtime="20171020 13:06:34.665" starttime="20171020 13:06:34.665"></status>
</kw>
<status status="PASS" endtime="20171020 13:06:34.666" starttime="20171020 13:06:34.665"></status>
</kw>
<status status="PASS" endtime="20171020 13:06:34.666" starttime="20171020 13:06:34.663"></status>
</kw>
<status status="PASS" endtime="20171020 13:06:34.666" starttime="20171020 13:06:34.663"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:06:34.756">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/OperatingSystemState, headers=None json=None</msg>
<msg level="INFO" timestamp="20171020 13:06:34.756">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:06:34.756" starttime="20171020 13:06:34.666"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:06:34.758">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171020 13:06:34.758" starttime="20171020 13:06:34.757"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:06:34.759">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171020 13:06:34.759" starttime="20171020 13:06:34.758"></status>
</kw>
<status status="PASS" endtime="20171020 13:06:34.759" starttime="20171020 13:06:34.758"></status>
</kw>
<status status="PASS" endtime="20171020 13:06:34.760" starttime="20171020 13:06:34.757"></status>
</kw>
<status status="PASS" endtime="20171020 13:06:34.760" starttime="20171020 13:06:34.756"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171020 13:06:34.760">Delete All Sessions</msg>
<status status="PASS" endtime="20171020 13:06:34.760" starttime="20171020 13:06:34.760"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:06:34.761">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:06:34.761" starttime="20171020 13:06:34.362"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:06:34.761">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:06:34.761" starttime="20171020 13:06:34.761"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:06:34.762">To JSON using : content={
  "data": "xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171020 13:06:34.762">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171020 13:06:34.762">${content} = {u'data': u'xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20171020 13:06:34.762" starttime="20171020 13:06:34.762"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:06:34.762">${state} = xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive</msg>
<status status="PASS" endtime="20171020 13:06:34.762" starttime="20171020 13:06:34.362"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:06:34.763">${os_state} = xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive</msg>
<status status="PASS" endtime="20171020 13:06:34.763" starttime="20171020 13:06:34.361"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${OS_BOOT_COMPLETE}</arg>
<arg>${os_state}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:06:34.763">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg level="FAIL" timestamp="20171020 13:06:34.763">xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.BootComplete != xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive</msg>
<status status="FAIL" endtime="20171020 13:06:34.763" starttime="20171020 13:06:34.763"></status>
</kw>
<status status="FAIL" endtime="20171020 13:06:34.763" starttime="20171020 13:06:34.071"></status>
</kw>
<status status="FAIL" endtime="20171020 13:06:34.764" starttime="20171020 13:06:33.332"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:06:44.769">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171020 13:06:44.769" starttime="20171020 13:06:44.768"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:06:44.770">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171020 13:06:44.770" starttime="20171020 13:06:44.770"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:06:44.771">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171020 13:06:44.771" starttime="20171020 13:06:44.770"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:06:44.771">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171020 13:06:44.771" starttime="20171020 13:06:44.771"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:06:44.949">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171020 13:06:44.949" starttime="20171020 13:06:44.772"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:06:44.949">${status} = PASS</msg>
<msg level="INFO" timestamp="20171020 13:06:44.949">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:06:44.949" starttime="20171020 13:06:44.772"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:06:44.950">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:06:44.950" starttime="20171020 13:06:44.949"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:06:44.950">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:06:44.950" starttime="20171020 13:06:44.950"></status>
</kw>
<status status="PASS" endtime="20171020 13:06:44.951" starttime="20171020 13:06:44.768"></status>
</kw>
<status status="PASS" endtime="20171020 13:06:44.951" starttime="20171020 13:06:44.767"></status>
</kw>
<status status="PASS" endtime="20171020 13:06:44.951" starttime="20171020 13:06:44.767"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:06:44.951">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" endtime="20171020 13:06:44.951" starttime="20171020 13:06:44.951"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:06:44.953">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" endtime="20171020 13:06:44.953" starttime="20171020 13:06:44.953"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:06:44.954">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" endtime="20171020 13:06:44.954" starttime="20171020 13:06:44.954"></status>
</kw>
<status status="PASS" endtime="20171020 13:06:44.955" starttime="20171020 13:06:44.954"></status>
</kw>
<status status="PASS" endtime="20171020 13:06:44.955" starttime="20171020 13:06:44.952"></status>
</kw>
<status status="PASS" endtime="20171020 13:06:44.955" starttime="20171020 13:06:44.952"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:06:45.074">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20171020 13:06:45.074">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:06:45.075" starttime="20171020 13:06:44.955"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:06:45.076">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171020 13:06:45.076" starttime="20171020 13:06:45.076"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:06:45.077">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171020 13:06:45.077" starttime="20171020 13:06:45.077"></status>
</kw>
<status status="PASS" endtime="20171020 13:06:45.078" starttime="20171020 13:06:45.077"></status>
</kw>
<status status="PASS" endtime="20171020 13:06:45.078" starttime="20171020 13:06:45.075"></status>
</kw>
<status status="PASS" endtime="20171020 13:06:45.078" starttime="20171020 13:06:45.075"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171020 13:06:45.078">Delete All Sessions</msg>
<status status="PASS" endtime="20171020 13:06:45.078" starttime="20171020 13:06:45.078"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:06:45.078">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:06:45.078" starttime="20171020 13:06:44.766"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:06:45.079">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:06:45.079" starttime="20171020 13:06:45.079"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:06:45.080">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171020 13:06:45.080">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171020 13:06:45.080">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20171020 13:06:45.080" starttime="20171020 13:06:45.079"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:06:45.080">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status status="PASS" endtime="20171020 13:06:45.080" starttime="20171020 13:06:44.765"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:06:45.080">${power_state} = On</msg>
<status status="PASS" endtime="20171020 13:06:45.080" starttime="20171020 13:06:44.765"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status status="PASS" endtime="20171020 13:06:45.081" starttime="20171020 13:06:45.081"></status>
</kw>
<status status="PASS" endtime="20171020 13:06:45.081" starttime="20171020 13:06:44.765"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:06:45.085">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171020 13:06:45.085" starttime="20171020 13:06:45.084"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:06:45.086">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171020 13:06:45.086" starttime="20171020 13:06:45.086"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:06:45.087">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171020 13:06:45.087" starttime="20171020 13:06:45.086"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:06:45.087">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171020 13:06:45.087" starttime="20171020 13:06:45.087"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:06:45.300">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171020 13:06:45.300" starttime="20171020 13:06:45.088"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:06:45.300">${status} = PASS</msg>
<msg level="INFO" timestamp="20171020 13:06:45.300">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:06:45.300" starttime="20171020 13:06:45.088"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:06:45.301">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:06:45.301" starttime="20171020 13:06:45.301"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:06:45.302">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:06:45.302" starttime="20171020 13:06:45.301"></status>
</kw>
<status status="PASS" endtime="20171020 13:06:45.302" starttime="20171020 13:06:45.084"></status>
</kw>
<status status="PASS" endtime="20171020 13:06:45.302" starttime="20171020 13:06:45.083"></status>
</kw>
<status status="PASS" endtime="20171020 13:06:45.302" starttime="20171020 13:06:45.083"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:06:45.303">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" endtime="20171020 13:06:45.303" starttime="20171020 13:06:45.302"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:06:45.305">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" endtime="20171020 13:06:45.305" starttime="20171020 13:06:45.304"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:06:45.306">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" endtime="20171020 13:06:45.306" starttime="20171020 13:06:45.306"></status>
</kw>
<status status="PASS" endtime="20171020 13:06:45.306" starttime="20171020 13:06:45.305"></status>
</kw>
<status status="PASS" endtime="20171020 13:06:45.306" starttime="20171020 13:06:45.304"></status>
</kw>
<status status="PASS" endtime="20171020 13:06:45.306" starttime="20171020 13:06:45.303"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:06:45.396">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20171020 13:06:45.397">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:06:45.397" starttime="20171020 13:06:45.307"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:06:45.399">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171020 13:06:45.399" starttime="20171020 13:06:45.398"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:06:45.400">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171020 13:06:45.400" starttime="20171020 13:06:45.399"></status>
</kw>
<status status="PASS" endtime="20171020 13:06:45.400" starttime="20171020 13:06:45.399"></status>
</kw>
<status status="PASS" endtime="20171020 13:06:45.400" starttime="20171020 13:06:45.397"></status>
</kw>
<status status="PASS" endtime="20171020 13:06:45.400" starttime="20171020 13:06:45.397"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171020 13:06:45.400">Delete All Sessions</msg>
<status status="PASS" endtime="20171020 13:06:45.400" starttime="20171020 13:06:45.400"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:06:45.401">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:06:45.401" starttime="20171020 13:06:45.082"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:06:45.401">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:06:45.401" starttime="20171020 13:06:45.401"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:06:45.402">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171020 13:06:45.402">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171020 13:06:45.402">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20171020 13:06:45.402" starttime="20171020 13:06:45.402"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:06:45.402">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status status="PASS" endtime="20171020 13:06:45.402" starttime="20171020 13:06:45.082"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:06:45.403">${host_state} = Running</msg>
<status status="PASS" endtime="20171020 13:06:45.403" starttime="20171020 13:06:45.081"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status status="PASS" endtime="20171020 13:06:45.403" starttime="20171020 13:06:45.403"></status>
</kw>
<kw name="Is OS Booted" library="state_manager">
<doc>Check OS status.</doc>
<kw name="Get Host State Attribute" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>BootProgress</arg>
</arguments>
<assign>
<var>${boot_stage}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>${host_attribute}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:06:45.408">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171020 13:06:45.408" starttime="20171020 13:06:45.408"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:06:45.409">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171020 13:06:45.409" starttime="20171020 13:06:45.409"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:06:45.409">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171020 13:06:45.410" starttime="20171020 13:06:45.409"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:06:45.410">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171020 13:06:45.410" starttime="20171020 13:06:45.410"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:06:45.587">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171020 13:06:45.587" starttime="20171020 13:06:45.411"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:06:45.587">${status} = PASS</msg>
<msg level="INFO" timestamp="20171020 13:06:45.587">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:06:45.587" starttime="20171020 13:06:45.410"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:06:45.588">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:06:45.588" starttime="20171020 13:06:45.587"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:06:45.589">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:06:45.589" starttime="20171020 13:06:45.588"></status>
</kw>
<status status="PASS" endtime="20171020 13:06:45.589" starttime="20171020 13:06:45.407"></status>
</kw>
<status status="PASS" endtime="20171020 13:06:45.589" starttime="20171020 13:06:45.406"></status>
</kw>
<status status="PASS" endtime="20171020 13:06:45.589" starttime="20171020 13:06:45.406"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:06:45.590">${base_uri} = /xyz/openbmc_project/state/host0//attr/BootProgress</msg>
<status status="PASS" endtime="20171020 13:06:45.590" starttime="20171020 13:06:45.589"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:06:45.592">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status status="PASS" endtime="20171020 13:06:45.592" starttime="20171020 13:06:45.591"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:06:45.593">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status status="PASS" endtime="20171020 13:06:45.593" starttime="20171020 13:06:45.592"></status>
</kw>
<status status="PASS" endtime="20171020 13:06:45.593" starttime="20171020 13:06:45.592"></status>
</kw>
<status status="PASS" endtime="20171020 13:06:45.593" starttime="20171020 13:06:45.590"></status>
</kw>
<status status="PASS" endtime="20171020 13:06:45.593" starttime="20171020 13:06:45.590"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:06:45.782">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/BootProgress, headers=None json=None</msg>
<msg level="INFO" timestamp="20171020 13:06:45.782">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:06:45.782" starttime="20171020 13:06:45.593"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:06:45.784">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171020 13:06:45.784" starttime="20171020 13:06:45.783"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:06:45.785">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171020 13:06:45.785" starttime="20171020 13:06:45.785"></status>
</kw>
<status status="PASS" endtime="20171020 13:06:45.785" starttime="20171020 13:06:45.784"></status>
</kw>
<status status="PASS" endtime="20171020 13:06:45.785" starttime="20171020 13:06:45.783"></status>
</kw>
<status status="PASS" endtime="20171020 13:06:45.785" starttime="20171020 13:06:45.783"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171020 13:06:45.786">Delete All Sessions</msg>
<status status="PASS" endtime="20171020 13:06:45.786" starttime="20171020 13:06:45.786"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:06:45.786">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:06:45.786" starttime="20171020 13:06:45.405"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:06:45.787">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:06:45.787" starttime="20171020 13:06:45.786"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:06:45.787">To JSON using : content={
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171020 13:06:45.787">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171020 13:06:45.787">${content} = {u'data': u'xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20171020 13:06:45.788" starttime="20171020 13:06:45.787"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:06:45.788">${state} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart</msg>
<status status="PASS" endtime="20171020 13:06:45.788" starttime="20171020 13:06:45.404"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:06:45.788">${boot_stage} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart</msg>
<status status="PASS" endtime="20171020 13:06:45.788" starttime="20171020 13:06:45.404"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${OS_BOOT_START}</arg>
<arg>${boot_stage}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:06:45.789">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:06:45.789" starttime="20171020 13:06:45.789"></status>
</kw>
<kw name="Get Host State Attribute" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>OperatingSystemState</arg>
</arguments>
<assign>
<var>${os_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>${host_attribute}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:06:45.793">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171020 13:06:45.793" starttime="20171020 13:06:45.793"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:06:45.794">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171020 13:06:45.794" starttime="20171020 13:06:45.794"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:06:45.795">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171020 13:06:45.795" starttime="20171020 13:06:45.794"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:06:45.795">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171020 13:06:45.795" starttime="20171020 13:06:45.795"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:06:46.037">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171020 13:06:46.037" starttime="20171020 13:06:45.796"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:06:46.037">${status} = PASS</msg>
<msg level="INFO" timestamp="20171020 13:06:46.037">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:06:46.037" starttime="20171020 13:06:45.796"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:06:46.038">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:06:46.038" starttime="20171020 13:06:46.037"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:06:46.038">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:06:46.038" starttime="20171020 13:06:46.038"></status>
</kw>
<status status="PASS" endtime="20171020 13:06:46.039" starttime="20171020 13:06:45.792"></status>
</kw>
<status status="PASS" endtime="20171020 13:06:46.039" starttime="20171020 13:06:45.792"></status>
</kw>
<status status="PASS" endtime="20171020 13:06:46.039" starttime="20171020 13:06:45.791"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:06:46.039">${base_uri} = /xyz/openbmc_project/state/host0//attr/OperatingSystemState</msg>
<status status="PASS" endtime="20171020 13:06:46.039" starttime="20171020 13:06:46.039"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:06:46.041">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/OperatingSystemState, method:Get, args:{}</msg>
<status status="PASS" endtime="20171020 13:06:46.041" starttime="20171020 13:06:46.041"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:06:46.042">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/OperatingSystemState, method:Get, args:{}</msg>
<status status="PASS" endtime="20171020 13:06:46.042" starttime="20171020 13:06:46.042"></status>
</kw>
<status status="PASS" endtime="20171020 13:06:46.043" starttime="20171020 13:06:46.042"></status>
</kw>
<status status="PASS" endtime="20171020 13:06:46.043" starttime="20171020 13:06:46.040"></status>
</kw>
<status status="PASS" endtime="20171020 13:06:46.043" starttime="20171020 13:06:46.040"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:06:46.196">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/OperatingSystemState, headers=None json=None</msg>
<msg level="INFO" timestamp="20171020 13:06:46.196">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:06:46.196" starttime="20171020 13:06:46.043"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:06:46.199">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171020 13:06:46.199" starttime="20171020 13:06:46.198"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:06:46.200">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171020 13:06:46.200" starttime="20171020 13:06:46.200"></status>
</kw>
<status status="PASS" endtime="20171020 13:06:46.200" starttime="20171020 13:06:46.199"></status>
</kw>
<status status="PASS" endtime="20171020 13:06:46.200" starttime="20171020 13:06:46.197"></status>
</kw>
<status status="PASS" endtime="20171020 13:06:46.200" starttime="20171020 13:06:46.197"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171020 13:06:46.201">Delete All Sessions</msg>
<status status="PASS" endtime="20171020 13:06:46.201" starttime="20171020 13:06:46.201"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:06:46.201">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:06:46.201" starttime="20171020 13:06:45.791"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:06:46.202">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:06:46.202" starttime="20171020 13:06:46.201"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:06:46.202">To JSON using : content={
  "data": "xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171020 13:06:46.202">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171020 13:06:46.203">${content} = {u'data': u'xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20171020 13:06:46.203" starttime="20171020 13:06:46.202"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:06:46.203">${state} = xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive</msg>
<status status="PASS" endtime="20171020 13:06:46.203" starttime="20171020 13:06:45.790"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:06:46.203">${os_state} = xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive</msg>
<status status="PASS" endtime="20171020 13:06:46.203" starttime="20171020 13:06:45.790"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${OS_BOOT_COMPLETE}</arg>
<arg>${os_state}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:06:46.204">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg level="FAIL" timestamp="20171020 13:06:46.204">xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.BootComplete != xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive</msg>
<status status="FAIL" endtime="20171020 13:06:46.204" starttime="20171020 13:06:46.203"></status>
</kw>
<status status="FAIL" endtime="20171020 13:06:46.204" starttime="20171020 13:06:45.403"></status>
</kw>
<status status="FAIL" endtime="20171020 13:06:46.204" starttime="20171020 13:06:44.764"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:06:56.210">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171020 13:06:56.210" starttime="20171020 13:06:56.210"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:06:56.211">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171020 13:06:56.211" starttime="20171020 13:06:56.211"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:06:56.212">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171020 13:06:56.212" starttime="20171020 13:06:56.211"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:06:56.213">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171020 13:06:56.213" starttime="20171020 13:06:56.212"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:06:56.395">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171020 13:06:56.395" starttime="20171020 13:06:56.214"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:06:56.395">${status} = PASS</msg>
<msg level="INFO" timestamp="20171020 13:06:56.395">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:06:56.395" starttime="20171020 13:06:56.213"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:06:56.395">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:06:56.396" starttime="20171020 13:06:56.395"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:06:56.396">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:06:56.396" starttime="20171020 13:06:56.396"></status>
</kw>
<status status="PASS" endtime="20171020 13:06:56.396" starttime="20171020 13:06:56.209"></status>
</kw>
<status status="PASS" endtime="20171020 13:06:56.397" starttime="20171020 13:06:56.208"></status>
</kw>
<status status="PASS" endtime="20171020 13:06:56.397" starttime="20171020 13:06:56.207"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:06:56.397">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" endtime="20171020 13:06:56.397" starttime="20171020 13:06:56.397"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:06:56.399">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" endtime="20171020 13:06:56.399" starttime="20171020 13:06:56.399"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:06:56.400">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" endtime="20171020 13:06:56.400" starttime="20171020 13:06:56.400"></status>
</kw>
<status status="PASS" endtime="20171020 13:06:56.400" starttime="20171020 13:06:56.400"></status>
</kw>
<status status="PASS" endtime="20171020 13:06:56.401" starttime="20171020 13:06:56.398"></status>
</kw>
<status status="PASS" endtime="20171020 13:06:56.401" starttime="20171020 13:06:56.398"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:06:56.464">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20171020 13:06:56.465">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:06:56.465" starttime="20171020 13:06:56.401"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:06:56.466">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171020 13:06:56.466" starttime="20171020 13:06:56.466"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:06:56.468">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171020 13:06:56.468" starttime="20171020 13:06:56.467"></status>
</kw>
<status status="PASS" endtime="20171020 13:06:56.468" starttime="20171020 13:06:56.467"></status>
</kw>
<status status="PASS" endtime="20171020 13:06:56.468" starttime="20171020 13:06:56.465"></status>
</kw>
<status status="PASS" endtime="20171020 13:06:56.468" starttime="20171020 13:06:56.465"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171020 13:06:56.468">Delete All Sessions</msg>
<status status="PASS" endtime="20171020 13:06:56.469" starttime="20171020 13:06:56.468"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:06:56.469">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:06:56.469" starttime="20171020 13:06:56.207"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:06:56.469">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:06:56.470" starttime="20171020 13:06:56.469"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:06:56.470">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171020 13:06:56.470">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171020 13:06:56.470">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20171020 13:06:56.470" starttime="20171020 13:06:56.470"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:06:56.471">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status status="PASS" endtime="20171020 13:06:56.471" starttime="20171020 13:06:56.206"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:06:56.471">${power_state} = On</msg>
<status status="PASS" endtime="20171020 13:06:56.471" starttime="20171020 13:06:56.206"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status status="PASS" endtime="20171020 13:06:56.471" starttime="20171020 13:06:56.471"></status>
</kw>
<status status="PASS" endtime="20171020 13:06:56.472" starttime="20171020 13:06:56.205"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:06:56.475">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171020 13:06:56.475" starttime="20171020 13:06:56.475"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:06:56.476">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171020 13:06:56.476" starttime="20171020 13:06:56.476"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:06:56.477">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171020 13:06:56.477" starttime="20171020 13:06:56.476"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:06:56.477">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171020 13:06:56.477" starttime="20171020 13:06:56.477"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:06:56.764">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171020 13:06:56.764" starttime="20171020 13:06:56.478"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:06:56.764">${status} = PASS</msg>
<msg level="INFO" timestamp="20171020 13:06:56.765">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:06:56.765" starttime="20171020 13:06:56.478"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:06:56.765">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:06:56.765" starttime="20171020 13:06:56.765"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:06:56.766">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:06:56.766" starttime="20171020 13:06:56.766"></status>
</kw>
<status status="PASS" endtime="20171020 13:06:56.766" starttime="20171020 13:06:56.474"></status>
</kw>
<status status="PASS" endtime="20171020 13:06:56.766" starttime="20171020 13:06:56.474"></status>
</kw>
<status status="PASS" endtime="20171020 13:06:56.766" starttime="20171020 13:06:56.473"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:06:56.767">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" endtime="20171020 13:06:56.767" starttime="20171020 13:06:56.767"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:06:56.770">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" endtime="20171020 13:06:56.770" starttime="20171020 13:06:56.769"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:06:56.771">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" endtime="20171020 13:06:56.771" starttime="20171020 13:06:56.770"></status>
</kw>
<status status="PASS" endtime="20171020 13:06:56.771" starttime="20171020 13:06:56.770"></status>
</kw>
<status status="PASS" endtime="20171020 13:06:56.771" starttime="20171020 13:06:56.768"></status>
</kw>
<status status="PASS" endtime="20171020 13:06:56.771" starttime="20171020 13:06:56.767"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:06:56.961">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20171020 13:06:56.961">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:06:56.961" starttime="20171020 13:06:56.771"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:06:56.963">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171020 13:06:56.963" starttime="20171020 13:06:56.963"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:06:56.964">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171020 13:06:56.964" starttime="20171020 13:06:56.964"></status>
</kw>
<status status="PASS" endtime="20171020 13:06:56.964" starttime="20171020 13:06:56.963"></status>
</kw>
<status status="PASS" endtime="20171020 13:06:56.964" starttime="20171020 13:06:56.962"></status>
</kw>
<status status="PASS" endtime="20171020 13:06:56.964" starttime="20171020 13:06:56.962"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171020 13:06:56.965">Delete All Sessions</msg>
<status status="PASS" endtime="20171020 13:06:56.965" starttime="20171020 13:06:56.965"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:06:56.965">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:06:56.965" starttime="20171020 13:06:56.473"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:06:56.966">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:06:56.966" starttime="20171020 13:06:56.965"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:06:56.967">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171020 13:06:56.967">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171020 13:06:56.967">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20171020 13:06:56.967" starttime="20171020 13:06:56.966"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:06:56.967">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status status="PASS" endtime="20171020 13:06:56.967" starttime="20171020 13:06:56.472"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:06:56.967">${host_state} = Running</msg>
<status status="PASS" endtime="20171020 13:06:56.967" starttime="20171020 13:06:56.472"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status status="PASS" endtime="20171020 13:06:56.968" starttime="20171020 13:06:56.968"></status>
</kw>
<kw name="Is OS Booted" library="state_manager">
<doc>Check OS status.</doc>
<kw name="Get Host State Attribute" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>BootProgress</arg>
</arguments>
<assign>
<var>${boot_stage}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>${host_attribute}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:06:56.972">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171020 13:06:56.972" starttime="20171020 13:06:56.971"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:06:56.973">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171020 13:06:56.973" starttime="20171020 13:06:56.972"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:06:56.973">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171020 13:06:56.973" starttime="20171020 13:06:56.973"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:06:56.974">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171020 13:06:56.974" starttime="20171020 13:06:56.974"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:06:57.153">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171020 13:06:57.153" starttime="20171020 13:06:56.975"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:06:57.153">${status} = PASS</msg>
<msg level="INFO" timestamp="20171020 13:06:57.153">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:06:57.153" starttime="20171020 13:06:56.974"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:06:57.154">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:06:57.154" starttime="20171020 13:06:57.154"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:06:57.155">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:06:57.155" starttime="20171020 13:06:57.154"></status>
</kw>
<status status="PASS" endtime="20171020 13:06:57.155" starttime="20171020 13:06:56.971"></status>
</kw>
<status status="PASS" endtime="20171020 13:06:57.155" starttime="20171020 13:06:56.971"></status>
</kw>
<status status="PASS" endtime="20171020 13:06:57.155" starttime="20171020 13:06:56.970"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:06:57.156">${base_uri} = /xyz/openbmc_project/state/host0//attr/BootProgress</msg>
<status status="PASS" endtime="20171020 13:06:57.156" starttime="20171020 13:06:57.155"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:06:57.158">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status status="PASS" endtime="20171020 13:06:57.158" starttime="20171020 13:06:57.157"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:06:57.159">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status status="PASS" endtime="20171020 13:06:57.159" starttime="20171020 13:06:57.159"></status>
</kw>
<status status="PASS" endtime="20171020 13:06:57.159" starttime="20171020 13:06:57.158"></status>
</kw>
<status status="PASS" endtime="20171020 13:06:57.159" starttime="20171020 13:06:57.157"></status>
</kw>
<status status="PASS" endtime="20171020 13:06:57.159" starttime="20171020 13:06:57.156"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:06:57.249">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/BootProgress, headers=None json=None</msg>
<msg level="INFO" timestamp="20171020 13:06:57.250">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:06:57.250" starttime="20171020 13:06:57.160"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:06:57.251">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171020 13:06:57.251" starttime="20171020 13:06:57.251"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:06:57.252">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171020 13:06:57.252" starttime="20171020 13:06:57.252"></status>
</kw>
<status status="PASS" endtime="20171020 13:06:57.253" starttime="20171020 13:06:57.252"></status>
</kw>
<status status="PASS" endtime="20171020 13:06:57.253" starttime="20171020 13:06:57.250"></status>
</kw>
<status status="PASS" endtime="20171020 13:06:57.253" starttime="20171020 13:06:57.250"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171020 13:06:57.253">Delete All Sessions</msg>
<status status="PASS" endtime="20171020 13:06:57.253" starttime="20171020 13:06:57.253"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:06:57.254">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:06:57.254" starttime="20171020 13:06:56.969"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:06:57.254">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:06:57.254" starttime="20171020 13:06:57.254"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:06:57.255">To JSON using : content={
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171020 13:06:57.255">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171020 13:06:57.255">${content} = {u'data': u'xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20171020 13:06:57.255" starttime="20171020 13:06:57.254"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:06:57.255">${state} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart</msg>
<status status="PASS" endtime="20171020 13:06:57.256" starttime="20171020 13:06:56.969"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:06:57.256">${boot_stage} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart</msg>
<status status="PASS" endtime="20171020 13:06:57.256" starttime="20171020 13:06:56.968"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${OS_BOOT_START}</arg>
<arg>${boot_stage}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:06:57.256">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:06:57.256" starttime="20171020 13:06:57.256"></status>
</kw>
<kw name="Get Host State Attribute" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>OperatingSystemState</arg>
</arguments>
<assign>
<var>${os_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>${host_attribute}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:06:57.260">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171020 13:06:57.261" starttime="20171020 13:06:57.260"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:06:57.261">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171020 13:06:57.261" starttime="20171020 13:06:57.261"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:06:57.262">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171020 13:06:57.262" starttime="20171020 13:06:57.262"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:06:57.263">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171020 13:06:57.263" starttime="20171020 13:06:57.262"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:06:57.539">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171020 13:06:57.540" starttime="20171020 13:06:57.263"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:06:57.540">${status} = PASS</msg>
<msg level="INFO" timestamp="20171020 13:06:57.540">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:06:57.540" starttime="20171020 13:06:57.263"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:06:57.540">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:06:57.540" starttime="20171020 13:06:57.540"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:06:57.541">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:06:57.541" starttime="20171020 13:06:57.541"></status>
</kw>
<status status="PASS" endtime="20171020 13:06:57.541" starttime="20171020 13:06:57.259"></status>
</kw>
<status status="PASS" endtime="20171020 13:06:57.541" starttime="20171020 13:06:57.259"></status>
</kw>
<status status="PASS" endtime="20171020 13:06:57.541" starttime="20171020 13:06:57.258"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:06:57.542">${base_uri} = /xyz/openbmc_project/state/host0//attr/OperatingSystemState</msg>
<status status="PASS" endtime="20171020 13:06:57.542" starttime="20171020 13:06:57.542"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:06:57.545">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/OperatingSystemState, method:Get, args:{}</msg>
<status status="PASS" endtime="20171020 13:06:57.545" starttime="20171020 13:06:57.544"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:06:57.545">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/OperatingSystemState, method:Get, args:{}</msg>
<status status="PASS" endtime="20171020 13:06:57.546" starttime="20171020 13:06:57.545"></status>
</kw>
<status status="PASS" endtime="20171020 13:06:57.546" starttime="20171020 13:06:57.545"></status>
</kw>
<status status="PASS" endtime="20171020 13:06:57.546" starttime="20171020 13:06:57.543"></status>
</kw>
<status status="PASS" endtime="20171020 13:06:57.546" starttime="20171020 13:06:57.542"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:06:57.636">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/OperatingSystemState, headers=None json=None</msg>
<msg level="INFO" timestamp="20171020 13:06:57.636">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:06:57.636" starttime="20171020 13:06:57.546"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:06:57.638">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171020 13:06:57.638" starttime="20171020 13:06:57.638"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:06:57.639">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171020 13:06:57.640" starttime="20171020 13:06:57.639"></status>
</kw>
<status status="PASS" endtime="20171020 13:06:57.640" starttime="20171020 13:06:57.638"></status>
</kw>
<status status="PASS" endtime="20171020 13:06:57.640" starttime="20171020 13:06:57.637"></status>
</kw>
<status status="PASS" endtime="20171020 13:06:57.640" starttime="20171020 13:06:57.636"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171020 13:06:57.640">Delete All Sessions</msg>
<status status="PASS" endtime="20171020 13:06:57.640" starttime="20171020 13:06:57.640"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:06:57.641">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:06:57.641" starttime="20171020 13:06:57.258"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:06:57.641">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:06:57.641" starttime="20171020 13:06:57.641"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:06:57.642">To JSON using : content={
  "data": "xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171020 13:06:57.642">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171020 13:06:57.642">${content} = {u'data': u'xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20171020 13:06:57.642" starttime="20171020 13:06:57.642"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:06:57.642">${state} = xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive</msg>
<status status="PASS" endtime="20171020 13:06:57.642" starttime="20171020 13:06:57.257"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:06:57.643">${os_state} = xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive</msg>
<status status="PASS" endtime="20171020 13:06:57.643" starttime="20171020 13:06:57.257"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${OS_BOOT_COMPLETE}</arg>
<arg>${os_state}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:06:57.643">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg level="FAIL" timestamp="20171020 13:06:57.643">xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.BootComplete != xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive</msg>
<status status="FAIL" endtime="20171020 13:06:57.643" starttime="20171020 13:06:57.643"></status>
</kw>
<status status="FAIL" endtime="20171020 13:06:57.644" starttime="20171020 13:06:56.968"></status>
</kw>
<status status="FAIL" endtime="20171020 13:06:57.644" starttime="20171020 13:06:56.205"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:07:07.649">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171020 13:07:07.650" starttime="20171020 13:07:07.649"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:07:07.650">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171020 13:07:07.650" starttime="20171020 13:07:07.650"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:07:07.651">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171020 13:07:07.651" starttime="20171020 13:07:07.651"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:07:07.652">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171020 13:07:07.652" starttime="20171020 13:07:07.651"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:07:08.262">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171020 13:07:08.262" starttime="20171020 13:07:07.652"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:07:08.263">${status} = PASS</msg>
<msg level="INFO" timestamp="20171020 13:07:08.263">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:07:08.263" starttime="20171020 13:07:07.652"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:07:08.263">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:07:08.264" starttime="20171020 13:07:08.263"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:07:08.264">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:07:08.264" starttime="20171020 13:07:08.264"></status>
</kw>
<status status="PASS" endtime="20171020 13:07:08.264" starttime="20171020 13:07:07.649"></status>
</kw>
<status status="PASS" endtime="20171020 13:07:08.264" starttime="20171020 13:07:07.648"></status>
</kw>
<status status="PASS" endtime="20171020 13:07:08.265" starttime="20171020 13:07:07.647"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:07:08.265">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" endtime="20171020 13:07:08.265" starttime="20171020 13:07:08.265"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:07:08.267">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" endtime="20171020 13:07:08.267" starttime="20171020 13:07:08.267"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:07:08.268">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" endtime="20171020 13:07:08.268" starttime="20171020 13:07:08.268"></status>
</kw>
<status status="PASS" endtime="20171020 13:07:08.269" starttime="20171020 13:07:08.268"></status>
</kw>
<status status="PASS" endtime="20171020 13:07:08.269" starttime="20171020 13:07:08.266"></status>
</kw>
<status status="PASS" endtime="20171020 13:07:08.269" starttime="20171020 13:07:08.266"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:07:08.333">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20171020 13:07:08.333">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:07:08.333" starttime="20171020 13:07:08.269"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:07:08.335">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171020 13:07:08.335" starttime="20171020 13:07:08.334"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:07:08.336">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171020 13:07:08.336" starttime="20171020 13:07:08.336"></status>
</kw>
<status status="PASS" endtime="20171020 13:07:08.336" starttime="20171020 13:07:08.335"></status>
</kw>
<status status="PASS" endtime="20171020 13:07:08.336" starttime="20171020 13:07:08.334"></status>
</kw>
<status status="PASS" endtime="20171020 13:07:08.336" starttime="20171020 13:07:08.333"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171020 13:07:08.337">Delete All Sessions</msg>
<status status="PASS" endtime="20171020 13:07:08.337" starttime="20171020 13:07:08.337"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:07:08.337">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:07:08.337" starttime="20171020 13:07:07.647"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:07:08.338">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:07:08.338" starttime="20171020 13:07:08.337"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:07:08.338">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171020 13:07:08.338">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171020 13:07:08.338">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20171020 13:07:08.338" starttime="20171020 13:07:08.338"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:07:08.339">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status status="PASS" endtime="20171020 13:07:08.339" starttime="20171020 13:07:07.646"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:07:08.339">${power_state} = On</msg>
<status status="PASS" endtime="20171020 13:07:08.339" starttime="20171020 13:07:07.645"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status status="PASS" endtime="20171020 13:07:08.340" starttime="20171020 13:07:08.339"></status>
</kw>
<status status="PASS" endtime="20171020 13:07:08.340" starttime="20171020 13:07:07.645"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:07:08.343">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171020 13:07:08.344" starttime="20171020 13:07:08.343"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:07:08.345">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171020 13:07:08.345" starttime="20171020 13:07:08.344"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:07:08.345">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171020 13:07:08.345" starttime="20171020 13:07:08.345"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:07:08.346">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171020 13:07:08.346" starttime="20171020 13:07:08.345"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:07:08.672">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171020 13:07:08.672" starttime="20171020 13:07:08.347"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:07:08.672">${status} = PASS</msg>
<msg level="INFO" timestamp="20171020 13:07:08.673">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:07:08.673" starttime="20171020 13:07:08.346"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:07:08.673">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:07:08.673" starttime="20171020 13:07:08.673"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:07:08.674">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:07:08.674" starttime="20171020 13:07:08.674"></status>
</kw>
<status status="PASS" endtime="20171020 13:07:08.674" starttime="20171020 13:07:08.342"></status>
</kw>
<status status="PASS" endtime="20171020 13:07:08.674" starttime="20171020 13:07:08.342"></status>
</kw>
<status status="PASS" endtime="20171020 13:07:08.674" starttime="20171020 13:07:08.341"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:07:08.675">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" endtime="20171020 13:07:08.675" starttime="20171020 13:07:08.675"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:07:08.677">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" endtime="20171020 13:07:08.677" starttime="20171020 13:07:08.676"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:07:08.678">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" endtime="20171020 13:07:08.678" starttime="20171020 13:07:08.678"></status>
</kw>
<status status="PASS" endtime="20171020 13:07:08.678" starttime="20171020 13:07:08.677"></status>
</kw>
<status status="PASS" endtime="20171020 13:07:08.678" starttime="20171020 13:07:08.676"></status>
</kw>
<status status="PASS" endtime="20171020 13:07:08.678" starttime="20171020 13:07:08.675"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:07:08.816">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20171020 13:07:08.817">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:07:08.817" starttime="20171020 13:07:08.679"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:07:08.818">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171020 13:07:08.818" starttime="20171020 13:07:08.818"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:07:08.819">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171020 13:07:08.819" starttime="20171020 13:07:08.819"></status>
</kw>
<status status="PASS" endtime="20171020 13:07:08.820" starttime="20171020 13:07:08.819"></status>
</kw>
<status status="PASS" endtime="20171020 13:07:08.820" starttime="20171020 13:07:08.817"></status>
</kw>
<status status="PASS" endtime="20171020 13:07:08.820" starttime="20171020 13:07:08.817"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171020 13:07:08.820">Delete All Sessions</msg>
<status status="PASS" endtime="20171020 13:07:08.820" starttime="20171020 13:07:08.820"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:07:08.820">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:07:08.820" starttime="20171020 13:07:08.341"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:07:08.821">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:07:08.821" starttime="20171020 13:07:08.821"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:07:08.822">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171020 13:07:08.822">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171020 13:07:08.822">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20171020 13:07:08.822" starttime="20171020 13:07:08.821"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:07:08.822">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status status="PASS" endtime="20171020 13:07:08.822" starttime="20171020 13:07:08.340"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:07:08.822">${host_state} = Running</msg>
<status status="PASS" endtime="20171020 13:07:08.823" starttime="20171020 13:07:08.340"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status status="PASS" endtime="20171020 13:07:08.823" starttime="20171020 13:07:08.823"></status>
</kw>
<kw name="Is OS Booted" library="state_manager">
<doc>Check OS status.</doc>
<kw name="Get Host State Attribute" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>BootProgress</arg>
</arguments>
<assign>
<var>${boot_stage}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>${host_attribute}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:07:08.828">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171020 13:07:08.829" starttime="20171020 13:07:08.828"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:07:08.829">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171020 13:07:08.829" starttime="20171020 13:07:08.829"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:07:08.830">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171020 13:07:08.830" starttime="20171020 13:07:08.830"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:07:08.831">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171020 13:07:08.831" starttime="20171020 13:07:08.831"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:07:09.072">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171020 13:07:09.072" starttime="20171020 13:07:08.832"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:07:09.073">${status} = PASS</msg>
<msg level="INFO" timestamp="20171020 13:07:09.073">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:07:09.073" starttime="20171020 13:07:08.832"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:07:09.073">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:07:09.073" starttime="20171020 13:07:09.073"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:07:09.074">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:07:09.074" starttime="20171020 13:07:09.074"></status>
</kw>
<status status="PASS" endtime="20171020 13:07:09.074" starttime="20171020 13:07:08.827"></status>
</kw>
<status status="PASS" endtime="20171020 13:07:09.074" starttime="20171020 13:07:08.827"></status>
</kw>
<status status="PASS" endtime="20171020 13:07:09.074" starttime="20171020 13:07:08.826"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:07:09.075">${base_uri} = /xyz/openbmc_project/state/host0//attr/BootProgress</msg>
<status status="PASS" endtime="20171020 13:07:09.075" starttime="20171020 13:07:09.075"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:07:09.077">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status status="PASS" endtime="20171020 13:07:09.077" starttime="20171020 13:07:09.077"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:07:09.078">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status status="PASS" endtime="20171020 13:07:09.078" starttime="20171020 13:07:09.078"></status>
</kw>
<status status="PASS" endtime="20171020 13:07:09.078" starttime="20171020 13:07:09.077"></status>
</kw>
<status status="PASS" endtime="20171020 13:07:09.078" starttime="20171020 13:07:09.076"></status>
</kw>
<status status="PASS" endtime="20171020 13:07:09.079" starttime="20171020 13:07:09.075"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:07:09.356">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/BootProgress, headers=None json=None</msg>
<msg level="INFO" timestamp="20171020 13:07:09.356">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:07:09.356" starttime="20171020 13:07:09.079"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:07:09.358">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171020 13:07:09.358" starttime="20171020 13:07:09.357"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:07:09.359">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171020 13:07:09.359" starttime="20171020 13:07:09.359"></status>
</kw>
<status status="PASS" endtime="20171020 13:07:09.359" starttime="20171020 13:07:09.358"></status>
</kw>
<status status="PASS" endtime="20171020 13:07:09.359" starttime="20171020 13:07:09.357"></status>
</kw>
<status status="PASS" endtime="20171020 13:07:09.359" starttime="20171020 13:07:09.357"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171020 13:07:09.360">Delete All Sessions</msg>
<status status="PASS" endtime="20171020 13:07:09.360" starttime="20171020 13:07:09.360"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:07:09.360">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:07:09.360" starttime="20171020 13:07:08.825"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:07:09.361">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:07:09.361" starttime="20171020 13:07:09.360"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:07:09.361">To JSON using : content={
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171020 13:07:09.361">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171020 13:07:09.361">${content} = {u'data': u'xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20171020 13:07:09.361" starttime="20171020 13:07:09.361"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:07:09.362">${state} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart</msg>
<status status="PASS" endtime="20171020 13:07:09.362" starttime="20171020 13:07:08.824"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:07:09.362">${boot_stage} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart</msg>
<status status="PASS" endtime="20171020 13:07:09.362" starttime="20171020 13:07:08.824"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${OS_BOOT_START}</arg>
<arg>${boot_stage}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:07:09.363">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:07:09.363" starttime="20171020 13:07:09.362"></status>
</kw>
<kw name="Get Host State Attribute" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>OperatingSystemState</arg>
</arguments>
<assign>
<var>${os_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>${host_attribute}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:07:09.366">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171020 13:07:09.367" starttime="20171020 13:07:09.366"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:07:09.367">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171020 13:07:09.367" starttime="20171020 13:07:09.367"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:07:09.368">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171020 13:07:09.368" starttime="20171020 13:07:09.367"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:07:09.369">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171020 13:07:09.369" starttime="20171020 13:07:09.368"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:07:09.640">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171020 13:07:09.640" starttime="20171020 13:07:09.369"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:07:09.641">${status} = PASS</msg>
<msg level="INFO" timestamp="20171020 13:07:09.641">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:07:09.641" starttime="20171020 13:07:09.369"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:07:09.641">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:07:09.641" starttime="20171020 13:07:09.641"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:07:09.642">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:07:09.642" starttime="20171020 13:07:09.642"></status>
</kw>
<status status="PASS" endtime="20171020 13:07:09.642" starttime="20171020 13:07:09.365"></status>
</kw>
<status status="PASS" endtime="20171020 13:07:09.642" starttime="20171020 13:07:09.365"></status>
</kw>
<status status="PASS" endtime="20171020 13:07:09.642" starttime="20171020 13:07:09.364"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:07:09.643">${base_uri} = /xyz/openbmc_project/state/host0//attr/OperatingSystemState</msg>
<status status="PASS" endtime="20171020 13:07:09.643" starttime="20171020 13:07:09.643"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:07:09.645">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/OperatingSystemState, method:Get, args:{}</msg>
<status status="PASS" endtime="20171020 13:07:09.645" starttime="20171020 13:07:09.644"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:07:09.646">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/OperatingSystemState, method:Get, args:{}</msg>
<status status="PASS" endtime="20171020 13:07:09.646" starttime="20171020 13:07:09.646"></status>
</kw>
<status status="PASS" endtime="20171020 13:07:09.646" starttime="20171020 13:07:09.645"></status>
</kw>
<status status="PASS" endtime="20171020 13:07:09.646" starttime="20171020 13:07:09.644"></status>
</kw>
<status status="PASS" endtime="20171020 13:07:09.646" starttime="20171020 13:07:09.643"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:07:09.736">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/OperatingSystemState, headers=None json=None</msg>
<msg level="INFO" timestamp="20171020 13:07:09.736">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:07:09.737" starttime="20171020 13:07:09.647"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:07:09.738">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171020 13:07:09.738" starttime="20171020 13:07:09.738"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:07:09.739">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171020 13:07:09.739" starttime="20171020 13:07:09.739"></status>
</kw>
<status status="PASS" endtime="20171020 13:07:09.739" starttime="20171020 13:07:09.738"></status>
</kw>
<status status="PASS" endtime="20171020 13:07:09.740" starttime="20171020 13:07:09.737"></status>
</kw>
<status status="PASS" endtime="20171020 13:07:09.740" starttime="20171020 13:07:09.737"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171020 13:07:09.740">Delete All Sessions</msg>
<status status="PASS" endtime="20171020 13:07:09.740" starttime="20171020 13:07:09.740"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:07:09.740">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:07:09.740" starttime="20171020 13:07:09.364"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:07:09.741">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:07:09.741" starttime="20171020 13:07:09.741"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:07:09.742">To JSON using : content={
  "data": "xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171020 13:07:09.742">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171020 13:07:09.742">${content} = {u'data': u'xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20171020 13:07:09.742" starttime="20171020 13:07:09.741"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:07:09.742">${state} = xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive</msg>
<status status="PASS" endtime="20171020 13:07:09.742" starttime="20171020 13:07:09.363"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:07:09.742">${os_state} = xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive</msg>
<status status="PASS" endtime="20171020 13:07:09.743" starttime="20171020 13:07:09.363"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${OS_BOOT_COMPLETE}</arg>
<arg>${os_state}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:07:09.743">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg level="FAIL" timestamp="20171020 13:07:09.743">xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.BootComplete != xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive</msg>
<status status="FAIL" endtime="20171020 13:07:09.743" starttime="20171020 13:07:09.743"></status>
</kw>
<status status="FAIL" endtime="20171020 13:07:09.743" starttime="20171020 13:07:08.823"></status>
</kw>
<status status="FAIL" endtime="20171020 13:07:09.744" starttime="20171020 13:07:07.644"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:07:19.753">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171020 13:07:19.753" starttime="20171020 13:07:19.752"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:07:19.754">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171020 13:07:19.754" starttime="20171020 13:07:19.754"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:07:19.755">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171020 13:07:19.755" starttime="20171020 13:07:19.755"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:07:19.756">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171020 13:07:19.756" starttime="20171020 13:07:19.756"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:07:20.016">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171020 13:07:20.016" starttime="20171020 13:07:19.757"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:07:20.016">${status} = PASS</msg>
<msg level="INFO" timestamp="20171020 13:07:20.016">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:07:20.017" starttime="20171020 13:07:19.757"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:07:20.018">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:07:20.018" starttime="20171020 13:07:20.017"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:07:20.019">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:07:20.019" starttime="20171020 13:07:20.018"></status>
</kw>
<status status="PASS" endtime="20171020 13:07:20.019" starttime="20171020 13:07:19.748"></status>
</kw>
<status status="PASS" endtime="20171020 13:07:20.019" starttime="20171020 13:07:19.748"></status>
</kw>
<status status="PASS" endtime="20171020 13:07:20.019" starttime="20171020 13:07:19.747"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:07:20.020">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" endtime="20171020 13:07:20.020" starttime="20171020 13:07:20.020"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:07:20.022">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" endtime="20171020 13:07:20.023" starttime="20171020 13:07:20.022"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:07:20.023">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" endtime="20171020 13:07:20.024" starttime="20171020 13:07:20.023"></status>
</kw>
<status status="PASS" endtime="20171020 13:07:20.024" starttime="20171020 13:07:20.023"></status>
</kw>
<status status="PASS" endtime="20171020 13:07:20.024" starttime="20171020 13:07:20.021"></status>
</kw>
<status status="PASS" endtime="20171020 13:07:20.024" starttime="20171020 13:07:20.021"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:07:20.137">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20171020 13:07:20.137">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:07:20.137" starttime="20171020 13:07:20.024"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:07:20.139">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171020 13:07:20.139" starttime="20171020 13:07:20.139"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:07:20.140">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171020 13:07:20.141" starttime="20171020 13:07:20.140"></status>
</kw>
<status status="PASS" endtime="20171020 13:07:20.141" starttime="20171020 13:07:20.139"></status>
</kw>
<status status="PASS" endtime="20171020 13:07:20.141" starttime="20171020 13:07:20.138"></status>
</kw>
<status status="PASS" endtime="20171020 13:07:20.141" starttime="20171020 13:07:20.138"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171020 13:07:20.141">Delete All Sessions</msg>
<status status="PASS" endtime="20171020 13:07:20.141" starttime="20171020 13:07:20.141"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:07:20.142">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:07:20.142" starttime="20171020 13:07:19.746"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:07:20.142">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:07:20.142" starttime="20171020 13:07:20.142"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:07:20.143">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171020 13:07:20.143">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171020 13:07:20.143">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20171020 13:07:20.143" starttime="20171020 13:07:20.142"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:07:20.143">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status status="PASS" endtime="20171020 13:07:20.143" starttime="20171020 13:07:19.745"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:07:20.145">${power_state} = On</msg>
<status status="PASS" endtime="20171020 13:07:20.145" starttime="20171020 13:07:19.745"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status status="PASS" endtime="20171020 13:07:20.145" starttime="20171020 13:07:20.145"></status>
</kw>
<status status="PASS" endtime="20171020 13:07:20.145" starttime="20171020 13:07:19.745"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:07:20.149">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171020 13:07:20.150" starttime="20171020 13:07:20.149"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:07:20.150">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171020 13:07:20.150" starttime="20171020 13:07:20.150"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:07:20.151">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171020 13:07:20.151" starttime="20171020 13:07:20.150"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:07:20.151">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171020 13:07:20.152" starttime="20171020 13:07:20.151"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:07:20.330">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171020 13:07:20.330" starttime="20171020 13:07:20.152"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:07:20.330">${status} = PASS</msg>
<msg level="INFO" timestamp="20171020 13:07:20.330">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:07:20.330" starttime="20171020 13:07:20.152"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:07:20.331">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:07:20.331" starttime="20171020 13:07:20.330"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:07:20.331">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:07:20.332" starttime="20171020 13:07:20.331"></status>
</kw>
<status status="PASS" endtime="20171020 13:07:20.332" starttime="20171020 13:07:20.148"></status>
</kw>
<status status="PASS" endtime="20171020 13:07:20.332" starttime="20171020 13:07:20.148"></status>
</kw>
<status status="PASS" endtime="20171020 13:07:20.332" starttime="20171020 13:07:20.147"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:07:20.332">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" endtime="20171020 13:07:20.333" starttime="20171020 13:07:20.332"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:07:20.335">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" endtime="20171020 13:07:20.335" starttime="20171020 13:07:20.334"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:07:20.336">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" endtime="20171020 13:07:20.336" starttime="20171020 13:07:20.336"></status>
</kw>
<status status="PASS" endtime="20171020 13:07:20.336" starttime="20171020 13:07:20.335"></status>
</kw>
<status status="PASS" endtime="20171020 13:07:20.336" starttime="20171020 13:07:20.333"></status>
</kw>
<status status="PASS" endtime="20171020 13:07:20.336" starttime="20171020 13:07:20.333"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:07:20.476">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20171020 13:07:20.476">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:07:20.476" starttime="20171020 13:07:20.337"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:07:20.478">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171020 13:07:20.478" starttime="20171020 13:07:20.478"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:07:20.479">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171020 13:07:20.479" starttime="20171020 13:07:20.479"></status>
</kw>
<status status="PASS" endtime="20171020 13:07:20.479" starttime="20171020 13:07:20.478"></status>
</kw>
<status status="PASS" endtime="20171020 13:07:20.480" starttime="20171020 13:07:20.477"></status>
</kw>
<status status="PASS" endtime="20171020 13:07:20.480" starttime="20171020 13:07:20.477"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171020 13:07:20.480">Delete All Sessions</msg>
<status status="PASS" endtime="20171020 13:07:20.480" starttime="20171020 13:07:20.480"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:07:20.480">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:07:20.480" starttime="20171020 13:07:20.146"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:07:20.481">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:07:20.481" starttime="20171020 13:07:20.481"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:07:20.482">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171020 13:07:20.482">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171020 13:07:20.482">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20171020 13:07:20.482" starttime="20171020 13:07:20.481"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:07:20.482">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status status="PASS" endtime="20171020 13:07:20.482" starttime="20171020 13:07:20.146"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:07:20.482">${host_state} = Running</msg>
<status status="PASS" endtime="20171020 13:07:20.482" starttime="20171020 13:07:20.145"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status status="PASS" endtime="20171020 13:07:20.483" starttime="20171020 13:07:20.483"></status>
</kw>
<kw name="Is OS Booted" library="state_manager">
<doc>Check OS status.</doc>
<kw name="Get Host State Attribute" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>BootProgress</arg>
</arguments>
<assign>
<var>${boot_stage}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>${host_attribute}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:07:20.487">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171020 13:07:20.487" starttime="20171020 13:07:20.487"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:07:20.488">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171020 13:07:20.488" starttime="20171020 13:07:20.488"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:07:20.489">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171020 13:07:20.489" starttime="20171020 13:07:20.488"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:07:20.489">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171020 13:07:20.489" starttime="20171020 13:07:20.489"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:07:20.669">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171020 13:07:20.669" starttime="20171020 13:07:20.490"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:07:20.669">${status} = PASS</msg>
<msg level="INFO" timestamp="20171020 13:07:20.669">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:07:20.669" starttime="20171020 13:07:20.489"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:07:20.670">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:07:20.670" starttime="20171020 13:07:20.670"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:07:20.671">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:07:20.671" starttime="20171020 13:07:20.670"></status>
</kw>
<status status="PASS" endtime="20171020 13:07:20.671" starttime="20171020 13:07:20.486"></status>
</kw>
<status status="PASS" endtime="20171020 13:07:20.671" starttime="20171020 13:07:20.486"></status>
</kw>
<status status="PASS" endtime="20171020 13:07:20.671" starttime="20171020 13:07:20.485"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:07:20.672">${base_uri} = /xyz/openbmc_project/state/host0//attr/BootProgress</msg>
<status status="PASS" endtime="20171020 13:07:20.672" starttime="20171020 13:07:20.671"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:07:20.674">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status status="PASS" endtime="20171020 13:07:20.674" starttime="20171020 13:07:20.673"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:07:20.675">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status status="PASS" endtime="20171020 13:07:20.675" starttime="20171020 13:07:20.675"></status>
</kw>
<status status="PASS" endtime="20171020 13:07:20.675" starttime="20171020 13:07:20.674"></status>
</kw>
<status status="PASS" endtime="20171020 13:07:20.675" starttime="20171020 13:07:20.672"></status>
</kw>
<status status="PASS" endtime="20171020 13:07:20.675" starttime="20171020 13:07:20.672"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:07:20.842">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/BootProgress, headers=None json=None</msg>
<msg level="INFO" timestamp="20171020 13:07:20.842">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:07:20.842" starttime="20171020 13:07:20.675"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:07:20.844">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171020 13:07:20.844" starttime="20171020 13:07:20.843"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:07:20.845">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171020 13:07:20.845" starttime="20171020 13:07:20.845"></status>
</kw>
<status status="PASS" endtime="20171020 13:07:20.845" starttime="20171020 13:07:20.844"></status>
</kw>
<status status="PASS" endtime="20171020 13:07:20.845" starttime="20171020 13:07:20.843"></status>
</kw>
<status status="PASS" endtime="20171020 13:07:20.845" starttime="20171020 13:07:20.842"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171020 13:07:20.846">Delete All Sessions</msg>
<status status="PASS" endtime="20171020 13:07:20.846" starttime="20171020 13:07:20.845"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:07:20.846">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:07:20.846" starttime="20171020 13:07:20.484"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:07:20.847">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:07:20.847" starttime="20171020 13:07:20.846"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:07:20.847">To JSON using : content={
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171020 13:07:20.847">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171020 13:07:20.847">${content} = {u'data': u'xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20171020 13:07:20.847" starttime="20171020 13:07:20.847"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:07:20.848">${state} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart</msg>
<status status="PASS" endtime="20171020 13:07:20.848" starttime="20171020 13:07:20.484"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:07:20.848">${boot_stage} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart</msg>
<status status="PASS" endtime="20171020 13:07:20.848" starttime="20171020 13:07:20.483"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${OS_BOOT_START}</arg>
<arg>${boot_stage}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:07:20.848">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:07:20.849" starttime="20171020 13:07:20.848"></status>
</kw>
<kw name="Get Host State Attribute" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>OperatingSystemState</arg>
</arguments>
<assign>
<var>${os_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>${host_attribute}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:07:20.853">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171020 13:07:20.853" starttime="20171020 13:07:20.852"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:07:20.854">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171020 13:07:20.854" starttime="20171020 13:07:20.853"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:07:20.854">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171020 13:07:20.854" starttime="20171020 13:07:20.854"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:07:20.855">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171020 13:07:20.855" starttime="20171020 13:07:20.854"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:07:21.093">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171020 13:07:21.093" starttime="20171020 13:07:20.856"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:07:21.093">${status} = PASS</msg>
<msg level="INFO" timestamp="20171020 13:07:21.093">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:07:21.094" starttime="20171020 13:07:20.855"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:07:21.094">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:07:21.094" starttime="20171020 13:07:21.094"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:07:21.095">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:07:21.095" starttime="20171020 13:07:21.094"></status>
</kw>
<status status="PASS" endtime="20171020 13:07:21.095" starttime="20171020 13:07:20.851"></status>
</kw>
<status status="PASS" endtime="20171020 13:07:21.095" starttime="20171020 13:07:20.851"></status>
</kw>
<status status="PASS" endtime="20171020 13:07:21.095" starttime="20171020 13:07:20.850"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:07:21.096">${base_uri} = /xyz/openbmc_project/state/host0//attr/OperatingSystemState</msg>
<status status="PASS" endtime="20171020 13:07:21.096" starttime="20171020 13:07:21.096"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:07:21.098">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/OperatingSystemState, method:Get, args:{}</msg>
<status status="PASS" endtime="20171020 13:07:21.098" starttime="20171020 13:07:21.097"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:07:21.099">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/OperatingSystemState, method:Get, args:{}</msg>
<status status="PASS" endtime="20171020 13:07:21.099" starttime="20171020 13:07:21.099"></status>
</kw>
<status status="PASS" endtime="20171020 13:07:21.099" starttime="20171020 13:07:21.098"></status>
</kw>
<status status="PASS" endtime="20171020 13:07:21.099" starttime="20171020 13:07:21.097"></status>
</kw>
<status status="PASS" endtime="20171020 13:07:21.099" starttime="20171020 13:07:21.096"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:07:21.329">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/OperatingSystemState, headers=None json=None</msg>
<msg level="INFO" timestamp="20171020 13:07:21.329">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:07:21.329" starttime="20171020 13:07:21.100"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:07:21.331">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171020 13:07:21.331" starttime="20171020 13:07:21.331"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:07:21.332">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171020 13:07:21.333" starttime="20171020 13:07:21.332"></status>
</kw>
<status status="PASS" endtime="20171020 13:07:21.333" starttime="20171020 13:07:21.331"></status>
</kw>
<status status="PASS" endtime="20171020 13:07:21.333" starttime="20171020 13:07:21.330"></status>
</kw>
<status status="PASS" endtime="20171020 13:07:21.333" starttime="20171020 13:07:21.330"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171020 13:07:21.333">Delete All Sessions</msg>
<status status="PASS" endtime="20171020 13:07:21.333" starttime="20171020 13:07:21.333"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:07:21.334">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:07:21.334" starttime="20171020 13:07:20.850"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:07:21.334">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:07:21.334" starttime="20171020 13:07:21.334"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:07:21.335">To JSON using : content={
  "data": "xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171020 13:07:21.335">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171020 13:07:21.335">${content} = {u'data': u'xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20171020 13:07:21.335" starttime="20171020 13:07:21.335"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:07:21.335">${state} = xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive</msg>
<status status="PASS" endtime="20171020 13:07:21.335" starttime="20171020 13:07:20.849"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:07:21.336">${os_state} = xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive</msg>
<status status="PASS" endtime="20171020 13:07:21.336" starttime="20171020 13:07:20.849"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${OS_BOOT_COMPLETE}</arg>
<arg>${os_state}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:07:21.336">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg level="FAIL" timestamp="20171020 13:07:21.336">xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.BootComplete != xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive</msg>
<status status="FAIL" endtime="20171020 13:07:21.336" starttime="20171020 13:07:21.336"></status>
</kw>
<status status="FAIL" endtime="20171020 13:07:21.337" starttime="20171020 13:07:20.483"></status>
</kw>
<status status="FAIL" endtime="20171020 13:07:21.337" starttime="20171020 13:07:19.744"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:07:31.342">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171020 13:07:31.342" starttime="20171020 13:07:31.341"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:07:31.343">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171020 13:07:31.343" starttime="20171020 13:07:31.342"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:07:31.343">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171020 13:07:31.343" starttime="20171020 13:07:31.343"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:07:31.344">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171020 13:07:31.344" starttime="20171020 13:07:31.344"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:07:31.667">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171020 13:07:31.667" starttime="20171020 13:07:31.345"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:07:31.667">${status} = PASS</msg>
<msg level="INFO" timestamp="20171020 13:07:31.667">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:07:31.667" starttime="20171020 13:07:31.344"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:07:31.668">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:07:31.668" starttime="20171020 13:07:31.668"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:07:31.669">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:07:31.669" starttime="20171020 13:07:31.668"></status>
</kw>
<status status="PASS" endtime="20171020 13:07:31.669" starttime="20171020 13:07:31.341"></status>
</kw>
<status status="PASS" endtime="20171020 13:07:31.669" starttime="20171020 13:07:31.341"></status>
</kw>
<status status="PASS" endtime="20171020 13:07:31.669" starttime="20171020 13:07:31.340"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:07:31.670">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" endtime="20171020 13:07:31.670" starttime="20171020 13:07:31.669"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:07:31.672">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" endtime="20171020 13:07:31.672" starttime="20171020 13:07:31.671"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:07:31.673">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" endtime="20171020 13:07:31.673" starttime="20171020 13:07:31.673"></status>
</kw>
<status status="PASS" endtime="20171020 13:07:31.673" starttime="20171020 13:07:31.672"></status>
</kw>
<status status="PASS" endtime="20171020 13:07:31.673" starttime="20171020 13:07:31.671"></status>
</kw>
<status status="PASS" endtime="20171020 13:07:31.673" starttime="20171020 13:07:31.670"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:07:31.814">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20171020 13:07:31.814">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:07:31.814" starttime="20171020 13:07:31.674"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:07:31.816">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171020 13:07:31.816" starttime="20171020 13:07:31.816"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:07:31.817">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171020 13:07:31.817" starttime="20171020 13:07:31.817"></status>
</kw>
<status status="PASS" endtime="20171020 13:07:31.818" starttime="20171020 13:07:31.817"></status>
</kw>
<status status="PASS" endtime="20171020 13:07:31.818" starttime="20171020 13:07:31.815"></status>
</kw>
<status status="PASS" endtime="20171020 13:07:31.818" starttime="20171020 13:07:31.815"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171020 13:07:31.818">Delete All Sessions</msg>
<status status="PASS" endtime="20171020 13:07:31.818" starttime="20171020 13:07:31.818"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:07:31.818">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:07:31.818" starttime="20171020 13:07:31.339"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:07:31.819">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:07:31.819" starttime="20171020 13:07:31.819"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:07:31.820">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171020 13:07:31.820">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171020 13:07:31.820">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20171020 13:07:31.820" starttime="20171020 13:07:31.819"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:07:31.820">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status status="PASS" endtime="20171020 13:07:31.820" starttime="20171020 13:07:31.339"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:07:31.821">${power_state} = On</msg>
<status status="PASS" endtime="20171020 13:07:31.821" starttime="20171020 13:07:31.338"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status status="PASS" endtime="20171020 13:07:31.821" starttime="20171020 13:07:31.821"></status>
</kw>
<status status="PASS" endtime="20171020 13:07:31.821" starttime="20171020 13:07:31.338"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:07:31.825">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171020 13:07:31.826" starttime="20171020 13:07:31.825"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:07:31.826">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171020 13:07:31.826" starttime="20171020 13:07:31.826"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:07:31.827">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171020 13:07:31.827" starttime="20171020 13:07:31.826"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:07:31.828">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171020 13:07:31.828" starttime="20171020 13:07:31.827"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:07:32.317">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171020 13:07:32.317" starttime="20171020 13:07:31.828"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:07:32.317">${status} = PASS</msg>
<msg level="INFO" timestamp="20171020 13:07:32.317">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:07:32.317" starttime="20171020 13:07:31.828"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:07:32.318">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:07:32.318" starttime="20171020 13:07:32.318"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:07:32.319">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:07:32.319" starttime="20171020 13:07:32.318"></status>
</kw>
<status status="PASS" endtime="20171020 13:07:32.319" starttime="20171020 13:07:31.824"></status>
</kw>
<status status="PASS" endtime="20171020 13:07:32.319" starttime="20171020 13:07:31.824"></status>
</kw>
<status status="PASS" endtime="20171020 13:07:32.319" starttime="20171020 13:07:31.823"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:07:32.320">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" endtime="20171020 13:07:32.320" starttime="20171020 13:07:32.319"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:07:32.322">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" endtime="20171020 13:07:32.322" starttime="20171020 13:07:32.321"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:07:32.323">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" endtime="20171020 13:07:32.323" starttime="20171020 13:07:32.322"></status>
</kw>
<status status="PASS" endtime="20171020 13:07:32.323" starttime="20171020 13:07:32.322"></status>
</kw>
<status status="PASS" endtime="20171020 13:07:32.323" starttime="20171020 13:07:32.320"></status>
</kw>
<status status="PASS" endtime="20171020 13:07:32.323" starttime="20171020 13:07:32.320"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:07:32.461">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20171020 13:07:32.461">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:07:32.461" starttime="20171020 13:07:32.324"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:07:32.463">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171020 13:07:32.463" starttime="20171020 13:07:32.463"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:07:32.464">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171020 13:07:32.464" starttime="20171020 13:07:32.464"></status>
</kw>
<status status="PASS" endtime="20171020 13:07:32.464" starttime="20171020 13:07:32.463"></status>
</kw>
<status status="PASS" endtime="20171020 13:07:32.464" starttime="20171020 13:07:32.462"></status>
</kw>
<status status="PASS" endtime="20171020 13:07:32.464" starttime="20171020 13:07:32.462"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171020 13:07:32.465">Delete All Sessions</msg>
<status status="PASS" endtime="20171020 13:07:32.465" starttime="20171020 13:07:32.465"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:07:32.465">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:07:32.465" starttime="20171020 13:07:31.822"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:07:32.466">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:07:32.466" starttime="20171020 13:07:32.465"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:07:32.466">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171020 13:07:32.466">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171020 13:07:32.466">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20171020 13:07:32.467" starttime="20171020 13:07:32.466"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:07:32.467">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status status="PASS" endtime="20171020 13:07:32.467" starttime="20171020 13:07:31.822"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:07:32.467">${host_state} = Running</msg>
<status status="PASS" endtime="20171020 13:07:32.467" starttime="20171020 13:07:31.821"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status status="PASS" endtime="20171020 13:07:32.468" starttime="20171020 13:07:32.467"></status>
</kw>
<kw name="Is OS Booted" library="state_manager">
<doc>Check OS status.</doc>
<kw name="Get Host State Attribute" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>BootProgress</arg>
</arguments>
<assign>
<var>${boot_stage}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>${host_attribute}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:07:32.472">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171020 13:07:32.472" starttime="20171020 13:07:32.472"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:07:32.473">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171020 13:07:32.473" starttime="20171020 13:07:32.473"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:07:32.474">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171020 13:07:32.474" starttime="20171020 13:07:32.473"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:07:32.474">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171020 13:07:32.474" starttime="20171020 13:07:32.474"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:07:32.731">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171020 13:07:32.731" starttime="20171020 13:07:32.475"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:07:32.731">${status} = PASS</msg>
<msg level="INFO" timestamp="20171020 13:07:32.731">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:07:32.731" starttime="20171020 13:07:32.475"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:07:32.732">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:07:32.732" starttime="20171020 13:07:32.732"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:07:32.733">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:07:32.733" starttime="20171020 13:07:32.732"></status>
</kw>
<status status="PASS" endtime="20171020 13:07:32.733" starttime="20171020 13:07:32.471"></status>
</kw>
<status status="PASS" endtime="20171020 13:07:32.733" starttime="20171020 13:07:32.471"></status>
</kw>
<status status="PASS" endtime="20171020 13:07:32.733" starttime="20171020 13:07:32.470"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:07:32.734">${base_uri} = /xyz/openbmc_project/state/host0//attr/BootProgress</msg>
<status status="PASS" endtime="20171020 13:07:32.734" starttime="20171020 13:07:32.733"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:07:32.736">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status status="PASS" endtime="20171020 13:07:32.736" starttime="20171020 13:07:32.735"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:07:32.737">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status status="PASS" endtime="20171020 13:07:32.737" starttime="20171020 13:07:32.737"></status>
</kw>
<status status="PASS" endtime="20171020 13:07:32.737" starttime="20171020 13:07:32.736"></status>
</kw>
<status status="PASS" endtime="20171020 13:07:32.737" starttime="20171020 13:07:32.734"></status>
</kw>
<status status="PASS" endtime="20171020 13:07:32.737" starttime="20171020 13:07:32.734"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:07:32.829">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/BootProgress, headers=None json=None</msg>
<msg level="INFO" timestamp="20171020 13:07:32.829">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:07:32.829" starttime="20171020 13:07:32.738"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:07:32.831">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171020 13:07:32.831" starttime="20171020 13:07:32.830"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:07:32.832">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171020 13:07:32.832" starttime="20171020 13:07:32.831"></status>
</kw>
<status status="PASS" endtime="20171020 13:07:32.832" starttime="20171020 13:07:32.831"></status>
</kw>
<status status="PASS" endtime="20171020 13:07:32.832" starttime="20171020 13:07:32.830"></status>
</kw>
<status status="PASS" endtime="20171020 13:07:32.832" starttime="20171020 13:07:32.829"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171020 13:07:32.832">Delete All Sessions</msg>
<status status="PASS" endtime="20171020 13:07:32.833" starttime="20171020 13:07:32.832"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:07:32.833">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:07:32.833" starttime="20171020 13:07:32.469"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:07:32.833">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:07:32.833" starttime="20171020 13:07:32.833"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:07:32.834">To JSON using : content={
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171020 13:07:32.834">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171020 13:07:32.834">${content} = {u'data': u'xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20171020 13:07:32.834" starttime="20171020 13:07:32.834"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:07:32.835">${state} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart</msg>
<status status="PASS" endtime="20171020 13:07:32.835" starttime="20171020 13:07:32.469"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:07:32.835">${boot_stage} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart</msg>
<status status="PASS" endtime="20171020 13:07:32.835" starttime="20171020 13:07:32.468"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${OS_BOOT_START}</arg>
<arg>${boot_stage}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:07:32.835">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:07:32.836" starttime="20171020 13:07:32.835"></status>
</kw>
<kw name="Get Host State Attribute" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>OperatingSystemState</arg>
</arguments>
<assign>
<var>${os_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>${host_attribute}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:07:32.840">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171020 13:07:32.840" starttime="20171020 13:07:32.839"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:07:32.841">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171020 13:07:32.841" starttime="20171020 13:07:32.840"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:07:32.841">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171020 13:07:32.841" starttime="20171020 13:07:32.841"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:07:32.842">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171020 13:07:32.842" starttime="20171020 13:07:32.842"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:07:33.337">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171020 13:07:33.337" starttime="20171020 13:07:32.843"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:07:33.337">${status} = PASS</msg>
<msg level="INFO" timestamp="20171020 13:07:33.337">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:07:33.337" starttime="20171020 13:07:32.842"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:07:33.338">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:07:33.338" starttime="20171020 13:07:33.337"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:07:33.338">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:07:33.339" starttime="20171020 13:07:33.338"></status>
</kw>
<status status="PASS" endtime="20171020 13:07:33.339" starttime="20171020 13:07:32.838"></status>
</kw>
<status status="PASS" endtime="20171020 13:07:33.339" starttime="20171020 13:07:32.838"></status>
</kw>
<status status="PASS" endtime="20171020 13:07:33.339" starttime="20171020 13:07:32.837"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:07:33.339">${base_uri} = /xyz/openbmc_project/state/host0//attr/OperatingSystemState</msg>
<status status="PASS" endtime="20171020 13:07:33.339" starttime="20171020 13:07:33.339"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:07:33.342">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/OperatingSystemState, method:Get, args:{}</msg>
<status status="PASS" endtime="20171020 13:07:33.342" starttime="20171020 13:07:33.341"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:07:33.343">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/OperatingSystemState, method:Get, args:{}</msg>
<status status="PASS" endtime="20171020 13:07:33.343" starttime="20171020 13:07:33.342"></status>
</kw>
<status status="PASS" endtime="20171020 13:07:33.343" starttime="20171020 13:07:33.342"></status>
</kw>
<status status="PASS" endtime="20171020 13:07:33.343" starttime="20171020 13:07:33.340"></status>
</kw>
<status status="PASS" endtime="20171020 13:07:33.343" starttime="20171020 13:07:33.340"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:07:33.529">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/OperatingSystemState, headers=None json=None</msg>
<msg level="INFO" timestamp="20171020 13:07:33.529">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:07:33.529" starttime="20171020 13:07:33.343"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:07:33.531">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171020 13:07:33.531" starttime="20171020 13:07:33.531"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:07:33.532">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171020 13:07:33.532" starttime="20171020 13:07:33.532"></status>
</kw>
<status status="PASS" endtime="20171020 13:07:33.532" starttime="20171020 13:07:33.531"></status>
</kw>
<status status="PASS" endtime="20171020 13:07:33.532" starttime="20171020 13:07:33.530"></status>
</kw>
<status status="PASS" endtime="20171020 13:07:33.532" starttime="20171020 13:07:33.530"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171020 13:07:33.533">Delete All Sessions</msg>
<status status="PASS" endtime="20171020 13:07:33.533" starttime="20171020 13:07:33.533"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:07:33.533">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:07:33.533" starttime="20171020 13:07:32.837"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:07:33.534">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:07:33.534" starttime="20171020 13:07:33.533"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:07:33.534">To JSON using : content={
  "data": "xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171020 13:07:33.534">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171020 13:07:33.534">${content} = {u'data': u'xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20171020 13:07:33.535" starttime="20171020 13:07:33.534"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:07:33.535">${state} = xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive</msg>
<status status="PASS" endtime="20171020 13:07:33.535" starttime="20171020 13:07:32.836"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:07:33.535">${os_state} = xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive</msg>
<status status="PASS" endtime="20171020 13:07:33.535" starttime="20171020 13:07:32.836"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${OS_BOOT_COMPLETE}</arg>
<arg>${os_state}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:07:33.536">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg level="FAIL" timestamp="20171020 13:07:33.536">xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.BootComplete != xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive</msg>
<status status="FAIL" endtime="20171020 13:07:33.536" starttime="20171020 13:07:33.535"></status>
</kw>
<status status="FAIL" endtime="20171020 13:07:33.536" starttime="20171020 13:07:32.468"></status>
</kw>
<status status="FAIL" endtime="20171020 13:07:33.536" starttime="20171020 13:07:31.337"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:07:43.542">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171020 13:07:43.542" starttime="20171020 13:07:43.541"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:07:43.543">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171020 13:07:43.543" starttime="20171020 13:07:43.542"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:07:43.543">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171020 13:07:43.543" starttime="20171020 13:07:43.543"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:07:43.544">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171020 13:07:43.544" starttime="20171020 13:07:43.544"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:07:43.804">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171020 13:07:43.804" starttime="20171020 13:07:43.545"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:07:43.804">${status} = PASS</msg>
<msg level="INFO" timestamp="20171020 13:07:43.805">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:07:43.805" starttime="20171020 13:07:43.544"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:07:43.805">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:07:43.805" starttime="20171020 13:07:43.805"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:07:43.806">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:07:43.806" starttime="20171020 13:07:43.806"></status>
</kw>
<status status="PASS" endtime="20171020 13:07:43.806" starttime="20171020 13:07:43.540"></status>
</kw>
<status status="PASS" endtime="20171020 13:07:43.806" starttime="20171020 13:07:43.540"></status>
</kw>
<status status="PASS" endtime="20171020 13:07:43.806" starttime="20171020 13:07:43.539"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:07:43.807">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" endtime="20171020 13:07:43.807" starttime="20171020 13:07:43.807"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:07:43.809">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" endtime="20171020 13:07:43.809" starttime="20171020 13:07:43.808"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:07:43.810">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" endtime="20171020 13:07:43.810" starttime="20171020 13:07:43.810"></status>
</kw>
<status status="PASS" endtime="20171020 13:07:43.810" starttime="20171020 13:07:43.809"></status>
</kw>
<status status="PASS" endtime="20171020 13:07:43.810" starttime="20171020 13:07:43.808"></status>
</kw>
<status status="PASS" endtime="20171020 13:07:43.810" starttime="20171020 13:07:43.807"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:07:43.929">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20171020 13:07:43.929">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:07:43.929" starttime="20171020 13:07:43.811"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:07:43.931">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171020 13:07:43.931" starttime="20171020 13:07:43.931"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:07:43.935">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171020 13:07:43.935" starttime="20171020 13:07:43.932"></status>
</kw>
<status status="PASS" endtime="20171020 13:07:43.935" starttime="20171020 13:07:43.931"></status>
</kw>
<status status="PASS" endtime="20171020 13:07:43.935" starttime="20171020 13:07:43.930"></status>
</kw>
<status status="PASS" endtime="20171020 13:07:43.935" starttime="20171020 13:07:43.930"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171020 13:07:43.936">Delete All Sessions</msg>
<status status="PASS" endtime="20171020 13:07:43.936" starttime="20171020 13:07:43.936"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:07:43.936">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:07:43.936" starttime="20171020 13:07:43.539"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:07:43.937">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:07:43.937" starttime="20171020 13:07:43.936"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:07:43.938">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171020 13:07:43.938">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171020 13:07:43.938">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20171020 13:07:43.938" starttime="20171020 13:07:43.937"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:07:43.938">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status status="PASS" endtime="20171020 13:07:43.938" starttime="20171020 13:07:43.538"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:07:43.938">${power_state} = On</msg>
<status status="PASS" endtime="20171020 13:07:43.938" starttime="20171020 13:07:43.538"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status status="PASS" endtime="20171020 13:07:43.939" starttime="20171020 13:07:43.939"></status>
</kw>
<status status="PASS" endtime="20171020 13:07:43.939" starttime="20171020 13:07:43.537"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:07:43.943">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171020 13:07:43.943" starttime="20171020 13:07:43.942"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:07:43.944">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171020 13:07:43.944" starttime="20171020 13:07:43.944"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:07:43.945">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171020 13:07:43.945" starttime="20171020 13:07:43.944"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:07:43.945">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171020 13:07:43.945" starttime="20171020 13:07:43.945"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:07:44.364">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171020 13:07:44.364" starttime="20171020 13:07:43.946"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:07:44.364">${status} = PASS</msg>
<msg level="INFO" timestamp="20171020 13:07:44.364">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:07:44.364" starttime="20171020 13:07:43.946"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:07:44.365">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:07:44.365" starttime="20171020 13:07:44.365"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:07:44.366">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:07:44.366" starttime="20171020 13:07:44.365"></status>
</kw>
<status status="PASS" endtime="20171020 13:07:44.366" starttime="20171020 13:07:43.942"></status>
</kw>
<status status="PASS" endtime="20171020 13:07:44.366" starttime="20171020 13:07:43.942"></status>
</kw>
<status status="PASS" endtime="20171020 13:07:44.366" starttime="20171020 13:07:43.941"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:07:44.367">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" endtime="20171020 13:07:44.367" starttime="20171020 13:07:44.366"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:07:44.369">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" endtime="20171020 13:07:44.369" starttime="20171020 13:07:44.368"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:07:44.370">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" endtime="20171020 13:07:44.370" starttime="20171020 13:07:44.370"></status>
</kw>
<status status="PASS" endtime="20171020 13:07:44.370" starttime="20171020 13:07:44.369"></status>
</kw>
<status status="PASS" endtime="20171020 13:07:44.371" starttime="20171020 13:07:44.368"></status>
</kw>
<status status="PASS" endtime="20171020 13:07:44.371" starttime="20171020 13:07:44.367"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:07:44.465">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20171020 13:07:44.466">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:07:44.466" starttime="20171020 13:07:44.371"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:07:44.467">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171020 13:07:44.468" starttime="20171020 13:07:44.467"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:07:44.468">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171020 13:07:44.469" starttime="20171020 13:07:44.468"></status>
</kw>
<status status="PASS" endtime="20171020 13:07:44.469" starttime="20171020 13:07:44.468"></status>
</kw>
<status status="PASS" endtime="20171020 13:07:44.469" starttime="20171020 13:07:44.466"></status>
</kw>
<status status="PASS" endtime="20171020 13:07:44.469" starttime="20171020 13:07:44.466"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171020 13:07:44.469">Delete All Sessions</msg>
<status status="PASS" endtime="20171020 13:07:44.469" starttime="20171020 13:07:44.469"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:07:44.469">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:07:44.470" starttime="20171020 13:07:43.940"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:07:44.470">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:07:44.470" starttime="20171020 13:07:44.470"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:07:44.471">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171020 13:07:44.471">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171020 13:07:44.471">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20171020 13:07:44.471" starttime="20171020 13:07:44.470"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:07:44.471">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status status="PASS" endtime="20171020 13:07:44.471" starttime="20171020 13:07:43.940"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:07:44.472">${host_state} = Running</msg>
<status status="PASS" endtime="20171020 13:07:44.472" starttime="20171020 13:07:43.939"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status status="PASS" endtime="20171020 13:07:44.472" starttime="20171020 13:07:44.472"></status>
</kw>
<kw name="Is OS Booted" library="state_manager">
<doc>Check OS status.</doc>
<kw name="Get Host State Attribute" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>BootProgress</arg>
</arguments>
<assign>
<var>${boot_stage}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>${host_attribute}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:07:44.476">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171020 13:07:44.476" starttime="20171020 13:07:44.476"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:07:44.477">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171020 13:07:44.477" starttime="20171020 13:07:44.477"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:07:44.478">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171020 13:07:44.478" starttime="20171020 13:07:44.477"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:07:44.478">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171020 13:07:44.478" starttime="20171020 13:07:44.478"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:07:44.783">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171020 13:07:44.783" starttime="20171020 13:07:44.479"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:07:44.784">${status} = PASS</msg>
<msg level="INFO" timestamp="20171020 13:07:44.784">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:07:44.784" starttime="20171020 13:07:44.479"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:07:44.784">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:07:44.784" starttime="20171020 13:07:44.784"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:07:44.785">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:07:44.785" starttime="20171020 13:07:44.785"></status>
</kw>
<status status="PASS" endtime="20171020 13:07:44.785" starttime="20171020 13:07:44.475"></status>
</kw>
<status status="PASS" endtime="20171020 13:07:44.785" starttime="20171020 13:07:44.475"></status>
</kw>
<status status="PASS" endtime="20171020 13:07:44.785" starttime="20171020 13:07:44.474"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:07:44.786">${base_uri} = /xyz/openbmc_project/state/host0//attr/BootProgress</msg>
<status status="PASS" endtime="20171020 13:07:44.786" starttime="20171020 13:07:44.786"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:07:44.788">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status status="PASS" endtime="20171020 13:07:44.788" starttime="20171020 13:07:44.788"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:07:44.789">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status status="PASS" endtime="20171020 13:07:44.789" starttime="20171020 13:07:44.789"></status>
</kw>
<status status="PASS" endtime="20171020 13:07:44.789" starttime="20171020 13:07:44.788"></status>
</kw>
<status status="PASS" endtime="20171020 13:07:44.790" starttime="20171020 13:07:44.787"></status>
</kw>
<status status="PASS" endtime="20171020 13:07:44.790" starttime="20171020 13:07:44.786"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:07:44.969">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/BootProgress, headers=None json=None</msg>
<msg level="INFO" timestamp="20171020 13:07:44.969">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:07:44.969" starttime="20171020 13:07:44.790"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:07:44.971">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171020 13:07:44.971" starttime="20171020 13:07:44.970"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:07:44.972">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171020 13:07:44.972" starttime="20171020 13:07:44.972"></status>
</kw>
<status status="PASS" endtime="20171020 13:07:44.972" starttime="20171020 13:07:44.971"></status>
</kw>
<status status="PASS" endtime="20171020 13:07:44.972" starttime="20171020 13:07:44.970"></status>
</kw>
<status status="PASS" endtime="20171020 13:07:44.972" starttime="20171020 13:07:44.969"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171020 13:07:44.973">Delete All Sessions</msg>
<status status="PASS" endtime="20171020 13:07:44.973" starttime="20171020 13:07:44.973"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:07:44.973">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:07:44.973" starttime="20171020 13:07:44.474"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:07:44.974">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:07:44.974" starttime="20171020 13:07:44.973"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:07:44.974">To JSON using : content={
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171020 13:07:44.974">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171020 13:07:44.974">${content} = {u'data': u'xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20171020 13:07:44.974" starttime="20171020 13:07:44.974"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:07:44.975">${state} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart</msg>
<status status="PASS" endtime="20171020 13:07:44.975" starttime="20171020 13:07:44.473"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:07:44.975">${boot_stage} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart</msg>
<status status="PASS" endtime="20171020 13:07:44.975" starttime="20171020 13:07:44.473"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${OS_BOOT_START}</arg>
<arg>${boot_stage}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:07:44.975">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:07:44.976" starttime="20171020 13:07:44.975"></status>
</kw>
<kw name="Get Host State Attribute" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>OperatingSystemState</arg>
</arguments>
<assign>
<var>${os_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>${host_attribute}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:07:44.980">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171020 13:07:44.980" starttime="20171020 13:07:44.979"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:07:44.981">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171020 13:07:44.981" starttime="20171020 13:07:44.980"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:07:44.981">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171020 13:07:44.981" starttime="20171020 13:07:44.981"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:07:44.982">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171020 13:07:44.982" starttime="20171020 13:07:44.981"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:07:45.238">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171020 13:07:45.238" starttime="20171020 13:07:44.983"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:07:45.238">${status} = PASS</msg>
<msg level="INFO" timestamp="20171020 13:07:45.238">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:07:45.238" starttime="20171020 13:07:44.982"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:07:45.239">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:07:45.239" starttime="20171020 13:07:45.239"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:07:45.240">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:07:45.240" starttime="20171020 13:07:45.239"></status>
</kw>
<status status="PASS" endtime="20171020 13:07:45.240" starttime="20171020 13:07:44.978"></status>
</kw>
<status status="PASS" endtime="20171020 13:07:45.240" starttime="20171020 13:07:44.978"></status>
</kw>
<status status="PASS" endtime="20171020 13:07:45.240" starttime="20171020 13:07:44.977"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:07:45.241">${base_uri} = /xyz/openbmc_project/state/host0//attr/OperatingSystemState</msg>
<status status="PASS" endtime="20171020 13:07:45.241" starttime="20171020 13:07:45.240"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:07:45.243">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/OperatingSystemState, method:Get, args:{}</msg>
<status status="PASS" endtime="20171020 13:07:45.243" starttime="20171020 13:07:45.242"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:07:45.244">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/OperatingSystemState, method:Get, args:{}</msg>
<status status="PASS" endtime="20171020 13:07:45.244" starttime="20171020 13:07:45.244"></status>
</kw>
<status status="PASS" endtime="20171020 13:07:45.244" starttime="20171020 13:07:45.243"></status>
</kw>
<status status="PASS" endtime="20171020 13:07:45.244" starttime="20171020 13:07:45.241"></status>
</kw>
<status status="PASS" endtime="20171020 13:07:45.244" starttime="20171020 13:07:45.241"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:07:45.335">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/OperatingSystemState, headers=None json=None</msg>
<msg level="INFO" timestamp="20171020 13:07:45.335">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:07:45.335" starttime="20171020 13:07:45.245"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:07:45.337">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171020 13:07:45.337" starttime="20171020 13:07:45.336"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:07:45.338">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171020 13:07:45.338" starttime="20171020 13:07:45.337"></status>
</kw>
<status status="PASS" endtime="20171020 13:07:45.338" starttime="20171020 13:07:45.337"></status>
</kw>
<status status="PASS" endtime="20171020 13:07:45.338" starttime="20171020 13:07:45.336"></status>
</kw>
<status status="PASS" endtime="20171020 13:07:45.338" starttime="20171020 13:07:45.335"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171020 13:07:45.339">Delete All Sessions</msg>
<status status="PASS" endtime="20171020 13:07:45.339" starttime="20171020 13:07:45.339"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:07:45.339">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:07:45.339" starttime="20171020 13:07:44.977"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:07:45.340">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:07:45.340" starttime="20171020 13:07:45.339"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:07:45.340">To JSON using : content={
  "data": "xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171020 13:07:45.340">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171020 13:07:45.340">${content} = {u'data': u'xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20171020 13:07:45.340" starttime="20171020 13:07:45.340"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:07:45.341">${state} = xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive</msg>
<status status="PASS" endtime="20171020 13:07:45.341" starttime="20171020 13:07:44.976"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:07:45.341">${os_state} = xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive</msg>
<status status="PASS" endtime="20171020 13:07:45.341" starttime="20171020 13:07:44.976"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${OS_BOOT_COMPLETE}</arg>
<arg>${os_state}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:07:45.342">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg level="FAIL" timestamp="20171020 13:07:45.342">xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.BootComplete != xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive</msg>
<status status="FAIL" endtime="20171020 13:07:45.342" starttime="20171020 13:07:45.341"></status>
</kw>
<status status="FAIL" endtime="20171020 13:07:45.342" starttime="20171020 13:07:44.472"></status>
</kw>
<status status="FAIL" endtime="20171020 13:07:45.342" starttime="20171020 13:07:43.537"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:07:55.347">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171020 13:07:55.348" starttime="20171020 13:07:55.347"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:07:55.348">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171020 13:07:55.348" starttime="20171020 13:07:55.348"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:07:55.349">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171020 13:07:55.349" starttime="20171020 13:07:55.348"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:07:55.349">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171020 13:07:55.350" starttime="20171020 13:07:55.349"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:07:55.667">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171020 13:07:55.667" starttime="20171020 13:07:55.350"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:07:55.667">${status} = PASS</msg>
<msg level="INFO" timestamp="20171020 13:07:55.667">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:07:55.667" starttime="20171020 13:07:55.350"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:07:55.668">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:07:55.668" starttime="20171020 13:07:55.668"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:07:55.669">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:07:55.669" starttime="20171020 13:07:55.668"></status>
</kw>
<status status="PASS" endtime="20171020 13:07:55.669" starttime="20171020 13:07:55.346"></status>
</kw>
<status status="PASS" endtime="20171020 13:07:55.669" starttime="20171020 13:07:55.346"></status>
</kw>
<status status="PASS" endtime="20171020 13:07:55.669" starttime="20171020 13:07:55.345"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:07:55.670">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" endtime="20171020 13:07:55.670" starttime="20171020 13:07:55.669"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:07:55.673">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" endtime="20171020 13:07:55.673" starttime="20171020 13:07:55.672"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:07:55.674">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" endtime="20171020 13:07:55.674" starttime="20171020 13:07:55.674"></status>
</kw>
<status status="PASS" endtime="20171020 13:07:55.674" starttime="20171020 13:07:55.673"></status>
</kw>
<status status="PASS" endtime="20171020 13:07:55.674" starttime="20171020 13:07:55.671"></status>
</kw>
<status status="PASS" endtime="20171020 13:07:55.674" starttime="20171020 13:07:55.670"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:07:55.838">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20171020 13:07:55.838">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:07:55.838" starttime="20171020 13:07:55.675"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:07:55.840">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171020 13:07:55.840" starttime="20171020 13:07:55.839"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:07:55.840">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171020 13:07:55.841" starttime="20171020 13:07:55.840"></status>
</kw>
<status status="PASS" endtime="20171020 13:07:55.841" starttime="20171020 13:07:55.840"></status>
</kw>
<status status="PASS" endtime="20171020 13:07:55.841" starttime="20171020 13:07:55.839"></status>
</kw>
<status status="PASS" endtime="20171020 13:07:55.841" starttime="20171020 13:07:55.838"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171020 13:07:55.841">Delete All Sessions</msg>
<status status="PASS" endtime="20171020 13:07:55.841" starttime="20171020 13:07:55.841"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:07:55.842">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:07:55.842" starttime="20171020 13:07:55.345"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:07:55.842">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:07:55.842" starttime="20171020 13:07:55.842"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:07:55.843">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171020 13:07:55.843">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171020 13:07:55.843">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20171020 13:07:55.843" starttime="20171020 13:07:55.842"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:07:55.843">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status status="PASS" endtime="20171020 13:07:55.843" starttime="20171020 13:07:55.344"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:07:55.844">${power_state} = On</msg>
<status status="PASS" endtime="20171020 13:07:55.844" starttime="20171020 13:07:55.344"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status status="PASS" endtime="20171020 13:07:55.844" starttime="20171020 13:07:55.844"></status>
</kw>
<status status="PASS" endtime="20171020 13:07:55.844" starttime="20171020 13:07:55.343"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:07:55.848">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171020 13:07:55.849" starttime="20171020 13:07:55.848"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:07:55.849">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171020 13:07:55.849" starttime="20171020 13:07:55.849"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:07:55.850">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171020 13:07:55.850" starttime="20171020 13:07:55.849"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:07:55.851">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171020 13:07:55.851" starttime="20171020 13:07:55.850"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:07:56.241">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171020 13:07:56.241" starttime="20171020 13:07:55.851"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:07:56.241">${status} = PASS</msg>
<msg level="INFO" timestamp="20171020 13:07:56.241">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:07:56.241" starttime="20171020 13:07:55.851"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:07:56.242">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:07:56.242" starttime="20171020 13:07:56.242"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:07:56.243">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:07:56.243" starttime="20171020 13:07:56.242"></status>
</kw>
<status status="PASS" endtime="20171020 13:07:56.243" starttime="20171020 13:07:55.847"></status>
</kw>
<status status="PASS" endtime="20171020 13:07:56.243" starttime="20171020 13:07:55.847"></status>
</kw>
<status status="PASS" endtime="20171020 13:07:56.243" starttime="20171020 13:07:55.846"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:07:56.244">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" endtime="20171020 13:07:56.244" starttime="20171020 13:07:56.243"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:07:56.246">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" endtime="20171020 13:07:56.246" starttime="20171020 13:07:56.245"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:07:56.247">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" endtime="20171020 13:07:56.247" starttime="20171020 13:07:56.247"></status>
</kw>
<status status="PASS" endtime="20171020 13:07:56.247" starttime="20171020 13:07:56.246"></status>
</kw>
<status status="PASS" endtime="20171020 13:07:56.247" starttime="20171020 13:07:56.245"></status>
</kw>
<status status="PASS" endtime="20171020 13:07:56.247" starttime="20171020 13:07:56.244"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:07:56.415">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20171020 13:07:56.415">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:07:56.415" starttime="20171020 13:07:56.248"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:07:56.417">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171020 13:07:56.417" starttime="20171020 13:07:56.417"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:07:56.418">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171020 13:07:56.418" starttime="20171020 13:07:56.418"></status>
</kw>
<status status="PASS" endtime="20171020 13:07:56.418" starttime="20171020 13:07:56.418"></status>
</kw>
<status status="PASS" endtime="20171020 13:07:56.419" starttime="20171020 13:07:56.416"></status>
</kw>
<status status="PASS" endtime="20171020 13:07:56.419" starttime="20171020 13:07:56.416"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171020 13:07:56.419">Delete All Sessions</msg>
<status status="PASS" endtime="20171020 13:07:56.419" starttime="20171020 13:07:56.419"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:07:56.419">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:07:56.419" starttime="20171020 13:07:55.845"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:07:56.420">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:07:56.420" starttime="20171020 13:07:56.420"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:07:56.421">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171020 13:07:56.421">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171020 13:07:56.421">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20171020 13:07:56.421" starttime="20171020 13:07:56.420"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:07:56.421">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status status="PASS" endtime="20171020 13:07:56.421" starttime="20171020 13:07:55.845"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:07:56.421">${host_state} = Running</msg>
<status status="PASS" endtime="20171020 13:07:56.422" starttime="20171020 13:07:55.844"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status status="PASS" endtime="20171020 13:07:56.422" starttime="20171020 13:07:56.422"></status>
</kw>
<kw name="Is OS Booted" library="state_manager">
<doc>Check OS status.</doc>
<kw name="Get Host State Attribute" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>BootProgress</arg>
</arguments>
<assign>
<var>${boot_stage}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>${host_attribute}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:07:56.427">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171020 13:07:56.427" starttime="20171020 13:07:56.426"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:07:56.427">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171020 13:07:56.428" starttime="20171020 13:07:56.427"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:07:56.428">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171020 13:07:56.428" starttime="20171020 13:07:56.428"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:07:56.429">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171020 13:07:56.429" starttime="20171020 13:07:56.428"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:07:56.609">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171020 13:07:56.610" starttime="20171020 13:07:56.430"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:07:56.610">${status} = PASS</msg>
<msg level="INFO" timestamp="20171020 13:07:56.610">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:07:56.610" starttime="20171020 13:07:56.429"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:07:56.610">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:07:56.610" starttime="20171020 13:07:56.610"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:07:56.611">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:07:56.611" starttime="20171020 13:07:56.611"></status>
</kw>
<status status="PASS" endtime="20171020 13:07:56.611" starttime="20171020 13:07:56.426"></status>
</kw>
<status status="PASS" endtime="20171020 13:07:56.611" starttime="20171020 13:07:56.425"></status>
</kw>
<status status="PASS" endtime="20171020 13:07:56.611" starttime="20171020 13:07:56.424"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:07:56.612">${base_uri} = /xyz/openbmc_project/state/host0//attr/BootProgress</msg>
<status status="PASS" endtime="20171020 13:07:56.612" starttime="20171020 13:07:56.612"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:07:56.614">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status status="PASS" endtime="20171020 13:07:56.614" starttime="20171020 13:07:56.614"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:07:56.615">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status status="PASS" endtime="20171020 13:07:56.615" starttime="20171020 13:07:56.615"></status>
</kw>
<status status="PASS" endtime="20171020 13:07:56.615" starttime="20171020 13:07:56.614"></status>
</kw>
<status status="PASS" endtime="20171020 13:07:56.616" starttime="20171020 13:07:56.613"></status>
</kw>
<status status="PASS" endtime="20171020 13:07:56.616" starttime="20171020 13:07:56.612"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:07:56.776">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/BootProgress, headers=None json=None</msg>
<msg level="INFO" timestamp="20171020 13:07:56.777">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:07:56.777" starttime="20171020 13:07:56.616"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:07:56.778">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171020 13:07:56.778" starttime="20171020 13:07:56.778"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:07:56.779">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171020 13:07:56.779" starttime="20171020 13:07:56.779"></status>
</kw>
<status status="PASS" endtime="20171020 13:07:56.780" starttime="20171020 13:07:56.779"></status>
</kw>
<status status="PASS" endtime="20171020 13:07:56.780" starttime="20171020 13:07:56.777"></status>
</kw>
<status status="PASS" endtime="20171020 13:07:56.780" starttime="20171020 13:07:56.777"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171020 13:07:56.780">Delete All Sessions</msg>
<status status="PASS" endtime="20171020 13:07:56.780" starttime="20171020 13:07:56.780"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:07:56.780">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:07:56.780" starttime="20171020 13:07:56.423"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:07:56.781">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:07:56.781" starttime="20171020 13:07:56.781"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:07:56.782">To JSON using : content={
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171020 13:07:56.782">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171020 13:07:56.782">${content} = {u'data': u'xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20171020 13:07:56.782" starttime="20171020 13:07:56.781"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:07:56.782">${state} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart</msg>
<status status="PASS" endtime="20171020 13:07:56.782" starttime="20171020 13:07:56.423"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:07:56.782">${boot_stage} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart</msg>
<status status="PASS" endtime="20171020 13:07:56.782" starttime="20171020 13:07:56.422"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${OS_BOOT_START}</arg>
<arg>${boot_stage}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:07:56.783">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:07:56.783" starttime="20171020 13:07:56.783"></status>
</kw>
<kw name="Get Host State Attribute" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>OperatingSystemState</arg>
</arguments>
<assign>
<var>${os_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>${host_attribute}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:07:56.787">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171020 13:07:56.787" starttime="20171020 13:07:56.787"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:07:56.788">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171020 13:07:56.788" starttime="20171020 13:07:56.788"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:07:56.789">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171020 13:07:56.789" starttime="20171020 13:07:56.788"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:07:56.789">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171020 13:07:56.789" starttime="20171020 13:07:56.789"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:07:56.968">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171020 13:07:56.968" starttime="20171020 13:07:56.790"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:07:56.969">${status} = PASS</msg>
<msg level="INFO" timestamp="20171020 13:07:56.969">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:07:56.969" starttime="20171020 13:07:56.789"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:07:56.969">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:07:56.970" starttime="20171020 13:07:56.969"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:07:56.970">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:07:56.970" starttime="20171020 13:07:56.970"></status>
</kw>
<status status="PASS" endtime="20171020 13:07:56.970" starttime="20171020 13:07:56.786"></status>
</kw>
<status status="PASS" endtime="20171020 13:07:56.970" starttime="20171020 13:07:56.786"></status>
</kw>
<status status="PASS" endtime="20171020 13:07:56.971" starttime="20171020 13:07:56.785"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:07:56.971">${base_uri} = /xyz/openbmc_project/state/host0//attr/OperatingSystemState</msg>
<status status="PASS" endtime="20171020 13:07:56.971" starttime="20171020 13:07:56.971"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:07:56.973">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/OperatingSystemState, method:Get, args:{}</msg>
<status status="PASS" endtime="20171020 13:07:56.973" starttime="20171020 13:07:56.973"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:07:56.974">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/OperatingSystemState, method:Get, args:{}</msg>
<status status="PASS" endtime="20171020 13:07:56.974" starttime="20171020 13:07:56.974"></status>
</kw>
<status status="PASS" endtime="20171020 13:07:56.974" starttime="20171020 13:07:56.973"></status>
</kw>
<status status="PASS" endtime="20171020 13:07:56.974" starttime="20171020 13:07:56.972"></status>
</kw>
<status status="PASS" endtime="20171020 13:07:56.975" starttime="20171020 13:07:56.971"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:07:57.115">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/OperatingSystemState, headers=None json=None</msg>
<msg level="INFO" timestamp="20171020 13:07:57.116">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:07:57.116" starttime="20171020 13:07:56.975"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:07:57.118">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171020 13:07:57.118" starttime="20171020 13:07:57.117"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:07:57.118">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171020 13:07:57.119" starttime="20171020 13:07:57.118"></status>
</kw>
<status status="PASS" endtime="20171020 13:07:57.119" starttime="20171020 13:07:57.118"></status>
</kw>
<status status="PASS" endtime="20171020 13:07:57.119" starttime="20171020 13:07:57.117"></status>
</kw>
<status status="PASS" endtime="20171020 13:07:57.119" starttime="20171020 13:07:57.116"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171020 13:07:57.119">Delete All Sessions</msg>
<status status="PASS" endtime="20171020 13:07:57.119" starttime="20171020 13:07:57.119"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:07:57.120">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:07:57.120" starttime="20171020 13:07:56.784"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:07:57.120">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:07:57.121" starttime="20171020 13:07:57.120"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:07:57.121">To JSON using : content={
  "data": "xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171020 13:07:57.121">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171020 13:07:57.121">${content} = {u'data': u'xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20171020 13:07:57.121" starttime="20171020 13:07:57.121"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:07:57.122">${state} = xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive</msg>
<status status="PASS" endtime="20171020 13:07:57.122" starttime="20171020 13:07:56.784"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:07:57.122">${os_state} = xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive</msg>
<status status="PASS" endtime="20171020 13:07:57.122" starttime="20171020 13:07:56.783"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${OS_BOOT_COMPLETE}</arg>
<arg>${os_state}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:07:57.122">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg level="FAIL" timestamp="20171020 13:07:57.123">xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.BootComplete != xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive</msg>
<status status="FAIL" endtime="20171020 13:07:57.123" starttime="20171020 13:07:57.122"></status>
</kw>
<status status="FAIL" endtime="20171020 13:07:57.123" starttime="20171020 13:07:56.422"></status>
</kw>
<status status="FAIL" endtime="20171020 13:07:57.123" starttime="20171020 13:07:55.343"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:08:07.128">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171020 13:08:07.129" starttime="20171020 13:08:07.128"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:08:07.129">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171020 13:08:07.129" starttime="20171020 13:08:07.129"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:08:07.130">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171020 13:08:07.130" starttime="20171020 13:08:07.130"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:08:07.131">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171020 13:08:07.131" starttime="20171020 13:08:07.130"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:08:07.747">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171020 13:08:07.748" starttime="20171020 13:08:07.131"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:08:07.748">${status} = PASS</msg>
<msg level="INFO" timestamp="20171020 13:08:07.748">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:08:07.748" starttime="20171020 13:08:07.131"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:08:07.748">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:08:07.749" starttime="20171020 13:08:07.748"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:08:07.749">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:08:07.749" starttime="20171020 13:08:07.749"></status>
</kw>
<status status="PASS" endtime="20171020 13:08:07.750" starttime="20171020 13:08:07.127"></status>
</kw>
<status status="PASS" endtime="20171020 13:08:07.750" starttime="20171020 13:08:07.127"></status>
</kw>
<status status="PASS" endtime="20171020 13:08:07.750" starttime="20171020 13:08:07.126"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:08:07.750">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" endtime="20171020 13:08:07.750" starttime="20171020 13:08:07.750"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:08:07.752">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" endtime="20171020 13:08:07.752" starttime="20171020 13:08:07.752"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:08:07.753">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" endtime="20171020 13:08:07.753" starttime="20171020 13:08:07.753"></status>
</kw>
<status status="PASS" endtime="20171020 13:08:07.754" starttime="20171020 13:08:07.753"></status>
</kw>
<status status="PASS" endtime="20171020 13:08:07.754" starttime="20171020 13:08:07.751"></status>
</kw>
<status status="PASS" endtime="20171020 13:08:07.754" starttime="20171020 13:08:07.751"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:08:07.826">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20171020 13:08:07.826">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:08:07.826" starttime="20171020 13:08:07.754"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:08:07.828">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171020 13:08:07.828" starttime="20171020 13:08:07.827"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:08:07.829">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171020 13:08:07.829" starttime="20171020 13:08:07.829"></status>
</kw>
<status status="PASS" endtime="20171020 13:08:07.829" starttime="20171020 13:08:07.828"></status>
</kw>
<status status="PASS" endtime="20171020 13:08:07.830" starttime="20171020 13:08:07.827"></status>
</kw>
<status status="PASS" endtime="20171020 13:08:07.830" starttime="20171020 13:08:07.826"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171020 13:08:07.830">Delete All Sessions</msg>
<status status="PASS" endtime="20171020 13:08:07.830" starttime="20171020 13:08:07.830"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:08:07.830">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:08:07.830" starttime="20171020 13:08:07.125"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:08:07.831">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:08:07.831" starttime="20171020 13:08:07.831"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:08:07.832">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171020 13:08:07.832">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171020 13:08:07.832">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20171020 13:08:07.832" starttime="20171020 13:08:07.831"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:08:07.832">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status status="PASS" endtime="20171020 13:08:07.832" starttime="20171020 13:08:07.125"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:08:07.832">${power_state} = On</msg>
<status status="PASS" endtime="20171020 13:08:07.832" starttime="20171020 13:08:07.124"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status status="PASS" endtime="20171020 13:08:07.833" starttime="20171020 13:08:07.833"></status>
</kw>
<status status="PASS" endtime="20171020 13:08:07.833" starttime="20171020 13:08:07.124"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:08:07.837">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171020 13:08:07.837" starttime="20171020 13:08:07.837"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:08:07.838">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171020 13:08:07.838" starttime="20171020 13:08:07.838"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:08:07.839">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171020 13:08:07.839" starttime="20171020 13:08:07.838"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:08:07.839">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171020 13:08:07.839" starttime="20171020 13:08:07.839"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:08:08.169">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171020 13:08:08.170" starttime="20171020 13:08:07.840"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:08:08.170">${status} = PASS</msg>
<msg level="INFO" timestamp="20171020 13:08:08.170">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:08:08.170" starttime="20171020 13:08:07.840"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:08:08.170">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:08:08.170" starttime="20171020 13:08:08.170"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:08:08.171">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:08:08.171" starttime="20171020 13:08:08.171"></status>
</kw>
<status status="PASS" endtime="20171020 13:08:08.171" starttime="20171020 13:08:07.836"></status>
</kw>
<status status="PASS" endtime="20171020 13:08:08.172" starttime="20171020 13:08:07.835"></status>
</kw>
<status status="PASS" endtime="20171020 13:08:08.172" starttime="20171020 13:08:07.835"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:08:08.172">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" endtime="20171020 13:08:08.172" starttime="20171020 13:08:08.172"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:08:08.178">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" endtime="20171020 13:08:08.178" starttime="20171020 13:08:08.174"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:08:08.179">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" endtime="20171020 13:08:08.179" starttime="20171020 13:08:08.178"></status>
</kw>
<status status="PASS" endtime="20171020 13:08:08.179" starttime="20171020 13:08:08.178"></status>
</kw>
<status status="PASS" endtime="20171020 13:08:08.179" starttime="20171020 13:08:08.173"></status>
</kw>
<status status="PASS" endtime="20171020 13:08:08.179" starttime="20171020 13:08:08.173"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:08:08.478">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20171020 13:08:08.478">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:08:08.478" starttime="20171020 13:08:08.179"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:08:08.480">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171020 13:08:08.480" starttime="20171020 13:08:08.480"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:08:08.481">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171020 13:08:08.481" starttime="20171020 13:08:08.481"></status>
</kw>
<status status="PASS" endtime="20171020 13:08:08.481" starttime="20171020 13:08:08.480"></status>
</kw>
<status status="PASS" endtime="20171020 13:08:08.481" starttime="20171020 13:08:08.479"></status>
</kw>
<status status="PASS" endtime="20171020 13:08:08.481" starttime="20171020 13:08:08.479"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171020 13:08:08.482">Delete All Sessions</msg>
<status status="PASS" endtime="20171020 13:08:08.482" starttime="20171020 13:08:08.482"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:08:08.482">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:08:08.482" starttime="20171020 13:08:07.834"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:08:08.483">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:08:08.483" starttime="20171020 13:08:08.483"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:08:08.483">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171020 13:08:08.484">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171020 13:08:08.484">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20171020 13:08:08.484" starttime="20171020 13:08:08.483"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:08:08.484">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status status="PASS" endtime="20171020 13:08:08.484" starttime="20171020 13:08:07.834"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:08:08.484">${host_state} = Running</msg>
<status status="PASS" endtime="20171020 13:08:08.484" starttime="20171020 13:08:07.833"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status status="PASS" endtime="20171020 13:08:08.485" starttime="20171020 13:08:08.485"></status>
</kw>
<kw name="Is OS Booted" library="state_manager">
<doc>Check OS status.</doc>
<kw name="Get Host State Attribute" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>BootProgress</arg>
</arguments>
<assign>
<var>${boot_stage}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>${host_attribute}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:08:08.489">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171020 13:08:08.489" starttime="20171020 13:08:08.489"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:08:08.490">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171020 13:08:08.490" starttime="20171020 13:08:08.490"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:08:08.491">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171020 13:08:08.491" starttime="20171020 13:08:08.490"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:08:08.492">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171020 13:08:08.492" starttime="20171020 13:08:08.491"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:08:09.051">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171020 13:08:09.051" starttime="20171020 13:08:08.493"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:08:09.051">${status} = PASS</msg>
<msg level="INFO" timestamp="20171020 13:08:09.051">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:08:09.051" starttime="20171020 13:08:08.492"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:08:09.052">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:08:09.052" starttime="20171020 13:08:09.051"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:08:09.052">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:08:09.053" starttime="20171020 13:08:09.052"></status>
</kw>
<status status="PASS" endtime="20171020 13:08:09.053" starttime="20171020 13:08:08.488"></status>
</kw>
<status status="PASS" endtime="20171020 13:08:09.053" starttime="20171020 13:08:08.488"></status>
</kw>
<status status="PASS" endtime="20171020 13:08:09.053" starttime="20171020 13:08:08.487"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:08:09.053">${base_uri} = /xyz/openbmc_project/state/host0//attr/BootProgress</msg>
<status status="PASS" endtime="20171020 13:08:09.054" starttime="20171020 13:08:09.053"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:08:09.056">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status status="PASS" endtime="20171020 13:08:09.056" starttime="20171020 13:08:09.055"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:08:09.056">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status status="PASS" endtime="20171020 13:08:09.057" starttime="20171020 13:08:09.056"></status>
</kw>
<status status="PASS" endtime="20171020 13:08:09.057" starttime="20171020 13:08:09.056"></status>
</kw>
<status status="PASS" endtime="20171020 13:08:09.057" starttime="20171020 13:08:09.054"></status>
</kw>
<status status="PASS" endtime="20171020 13:08:09.057" starttime="20171020 13:08:09.054"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:08:09.277">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/BootProgress, headers=None json=None</msg>
<msg level="INFO" timestamp="20171020 13:08:09.277">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:08:09.277" starttime="20171020 13:08:09.057"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:08:09.279">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171020 13:08:09.279" starttime="20171020 13:08:09.279"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:08:09.280">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171020 13:08:09.280" starttime="20171020 13:08:09.280"></status>
</kw>
<status status="PASS" endtime="20171020 13:08:09.280" starttime="20171020 13:08:09.279"></status>
</kw>
<status status="PASS" endtime="20171020 13:08:09.280" starttime="20171020 13:08:09.278"></status>
</kw>
<status status="PASS" endtime="20171020 13:08:09.280" starttime="20171020 13:08:09.278"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171020 13:08:09.281">Delete All Sessions</msg>
<status status="PASS" endtime="20171020 13:08:09.281" starttime="20171020 13:08:09.281"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:08:09.281">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:08:09.281" starttime="20171020 13:08:08.486"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:08:09.282">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:08:09.282" starttime="20171020 13:08:09.281"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:08:09.282">To JSON using : content={
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171020 13:08:09.283">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171020 13:08:09.283">${content} = {u'data': u'xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20171020 13:08:09.283" starttime="20171020 13:08:09.282"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:08:09.283">${state} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart</msg>
<status status="PASS" endtime="20171020 13:08:09.283" starttime="20171020 13:08:08.486"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:08:09.283">${boot_stage} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart</msg>
<status status="PASS" endtime="20171020 13:08:09.283" starttime="20171020 13:08:08.485"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${OS_BOOT_START}</arg>
<arg>${boot_stage}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:08:09.284">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:08:09.284" starttime="20171020 13:08:09.284"></status>
</kw>
<kw name="Get Host State Attribute" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>OperatingSystemState</arg>
</arguments>
<assign>
<var>${os_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>${host_attribute}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:08:09.289">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171020 13:08:09.289" starttime="20171020 13:08:09.288"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:08:09.290">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171020 13:08:09.290" starttime="20171020 13:08:09.289"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:08:09.290">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171020 13:08:09.290" starttime="20171020 13:08:09.290"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:08:09.291">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171020 13:08:09.291" starttime="20171020 13:08:09.291"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:08:09.518">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171020 13:08:09.519" starttime="20171020 13:08:09.292"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:08:09.519">${status} = PASS</msg>
<msg level="INFO" timestamp="20171020 13:08:09.519">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:08:09.519" starttime="20171020 13:08:09.291"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:08:09.519">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:08:09.519" starttime="20171020 13:08:09.519"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:08:09.520">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:08:09.520" starttime="20171020 13:08:09.520"></status>
</kw>
<status status="PASS" endtime="20171020 13:08:09.520" starttime="20171020 13:08:09.287"></status>
</kw>
<status status="PASS" endtime="20171020 13:08:09.520" starttime="20171020 13:08:09.286"></status>
</kw>
<status status="PASS" endtime="20171020 13:08:09.521" starttime="20171020 13:08:09.286"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:08:09.521">${base_uri} = /xyz/openbmc_project/state/host0//attr/OperatingSystemState</msg>
<status status="PASS" endtime="20171020 13:08:09.521" starttime="20171020 13:08:09.521"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:08:09.523">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/OperatingSystemState, method:Get, args:{}</msg>
<status status="PASS" endtime="20171020 13:08:09.523" starttime="20171020 13:08:09.523"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:08:09.525">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/OperatingSystemState, method:Get, args:{}</msg>
<status status="PASS" endtime="20171020 13:08:09.525" starttime="20171020 13:08:09.524"></status>
</kw>
<status status="PASS" endtime="20171020 13:08:09.525" starttime="20171020 13:08:09.524"></status>
</kw>
<status status="PASS" endtime="20171020 13:08:09.525" starttime="20171020 13:08:09.522"></status>
</kw>
<status status="PASS" endtime="20171020 13:08:09.525" starttime="20171020 13:08:09.521"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:08:09.665">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/OperatingSystemState, headers=None json=None</msg>
<msg level="INFO" timestamp="20171020 13:08:09.665">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:08:09.665" starttime="20171020 13:08:09.526"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:08:09.667">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171020 13:08:09.667" starttime="20171020 13:08:09.667"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:08:09.669">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171020 13:08:09.669" starttime="20171020 13:08:09.668"></status>
</kw>
<status status="PASS" endtime="20171020 13:08:09.669" starttime="20171020 13:08:09.667"></status>
</kw>
<status status="PASS" endtime="20171020 13:08:09.669" starttime="20171020 13:08:09.666"></status>
</kw>
<status status="PASS" endtime="20171020 13:08:09.669" starttime="20171020 13:08:09.666"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171020 13:08:09.669">Delete All Sessions</msg>
<status status="PASS" endtime="20171020 13:08:09.669" starttime="20171020 13:08:09.669"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:08:09.670">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:08:09.670" starttime="20171020 13:08:09.285"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:08:09.670">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:08:09.670" starttime="20171020 13:08:09.670"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:08:09.671">To JSON using : content={
  "data": "xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171020 13:08:09.671">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171020 13:08:09.671">${content} = {u'data': u'xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20171020 13:08:09.671" starttime="20171020 13:08:09.671"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:08:09.671">${state} = xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive</msg>
<status status="PASS" endtime="20171020 13:08:09.671" starttime="20171020 13:08:09.284"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:08:09.672">${os_state} = xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive</msg>
<status status="PASS" endtime="20171020 13:08:09.672" starttime="20171020 13:08:09.284"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${OS_BOOT_COMPLETE}</arg>
<arg>${os_state}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:08:09.672">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg level="FAIL" timestamp="20171020 13:08:09.672">xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.BootComplete != xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive</msg>
<status status="FAIL" endtime="20171020 13:08:09.672" starttime="20171020 13:08:09.672"></status>
</kw>
<status status="FAIL" endtime="20171020 13:08:09.673" starttime="20171020 13:08:08.485"></status>
</kw>
<status status="FAIL" endtime="20171020 13:08:09.673" starttime="20171020 13:08:07.123"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:08:19.678">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171020 13:08:19.678" starttime="20171020 13:08:19.678"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:08:19.679">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171020 13:08:19.679" starttime="20171020 13:08:19.679"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:08:19.680">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171020 13:08:19.680" starttime="20171020 13:08:19.679"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:08:19.680">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171020 13:08:19.680" starttime="20171020 13:08:19.680"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:08:19.932">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171020 13:08:19.932" starttime="20171020 13:08:19.681"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:08:19.932">${status} = PASS</msg>
<msg level="INFO" timestamp="20171020 13:08:19.932">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:08:19.933" starttime="20171020 13:08:19.681"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:08:19.933">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:08:19.933" starttime="20171020 13:08:19.933"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:08:19.934">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:08:19.934" starttime="20171020 13:08:19.934"></status>
</kw>
<status status="PASS" endtime="20171020 13:08:19.934" starttime="20171020 13:08:19.677"></status>
</kw>
<status status="PASS" endtime="20171020 13:08:19.934" starttime="20171020 13:08:19.677"></status>
</kw>
<status status="PASS" endtime="20171020 13:08:19.934" starttime="20171020 13:08:19.676"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:08:19.935">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" endtime="20171020 13:08:19.935" starttime="20171020 13:08:19.934"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:08:19.937">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" endtime="20171020 13:08:19.937" starttime="20171020 13:08:19.936"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:08:19.938">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" endtime="20171020 13:08:19.938" starttime="20171020 13:08:19.938"></status>
</kw>
<status status="PASS" endtime="20171020 13:08:19.938" starttime="20171020 13:08:19.937"></status>
</kw>
<status status="PASS" endtime="20171020 13:08:19.938" starttime="20171020 13:08:19.936"></status>
</kw>
<status status="PASS" endtime="20171020 13:08:19.938" starttime="20171020 13:08:19.935"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:08:20.198">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20171020 13:08:20.198">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:08:20.198" starttime="20171020 13:08:19.939"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:08:20.200">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171020 13:08:20.200" starttime="20171020 13:08:20.200"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:08:20.201">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171020 13:08:20.201" starttime="20171020 13:08:20.201"></status>
</kw>
<status status="PASS" endtime="20171020 13:08:20.201" starttime="20171020 13:08:20.200"></status>
</kw>
<status status="PASS" endtime="20171020 13:08:20.202" starttime="20171020 13:08:20.199"></status>
</kw>
<status status="PASS" endtime="20171020 13:08:20.202" starttime="20171020 13:08:20.199"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171020 13:08:20.202">Delete All Sessions</msg>
<status status="PASS" endtime="20171020 13:08:20.202" starttime="20171020 13:08:20.202"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:08:20.202">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:08:20.202" starttime="20171020 13:08:19.675"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:08:20.203">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:08:20.203" starttime="20171020 13:08:20.203"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:08:20.204">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171020 13:08:20.204">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171020 13:08:20.204">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20171020 13:08:20.204" starttime="20171020 13:08:20.203"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:08:20.204">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status status="PASS" endtime="20171020 13:08:20.204" starttime="20171020 13:08:19.675"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:08:20.204">${power_state} = On</msg>
<status status="PASS" endtime="20171020 13:08:20.204" starttime="20171020 13:08:19.674"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status status="PASS" endtime="20171020 13:08:20.205" starttime="20171020 13:08:20.205"></status>
</kw>
<status status="PASS" endtime="20171020 13:08:20.205" starttime="20171020 13:08:19.674"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:08:20.210">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171020 13:08:20.211" starttime="20171020 13:08:20.209"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:08:20.212">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171020 13:08:20.212" starttime="20171020 13:08:20.211"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:08:20.213">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171020 13:08:20.213" starttime="20171020 13:08:20.212"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:08:20.214">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171020 13:08:20.214" starttime="20171020 13:08:20.213"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:08:20.553">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171020 13:08:20.553" starttime="20171020 13:08:20.215"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:08:20.553">${status} = PASS</msg>
<msg level="INFO" timestamp="20171020 13:08:20.553">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:08:20.553" starttime="20171020 13:08:20.214"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:08:20.554">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:08:20.554" starttime="20171020 13:08:20.554"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:08:20.555">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:08:20.555" starttime="20171020 13:08:20.554"></status>
</kw>
<status status="PASS" endtime="20171020 13:08:20.555" starttime="20171020 13:08:20.209"></status>
</kw>
<status status="PASS" endtime="20171020 13:08:20.555" starttime="20171020 13:08:20.208"></status>
</kw>
<status status="PASS" endtime="20171020 13:08:20.555" starttime="20171020 13:08:20.207"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:08:20.556">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" endtime="20171020 13:08:20.556" starttime="20171020 13:08:20.555"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:08:20.558">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" endtime="20171020 13:08:20.558" starttime="20171020 13:08:20.557"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:08:20.559">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" endtime="20171020 13:08:20.559" starttime="20171020 13:08:20.559"></status>
</kw>
<status status="PASS" endtime="20171020 13:08:20.559" starttime="20171020 13:08:20.558"></status>
</kw>
<status status="PASS" endtime="20171020 13:08:20.559" starttime="20171020 13:08:20.556"></status>
</kw>
<status status="PASS" endtime="20171020 13:08:20.559" starttime="20171020 13:08:20.556"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:08:20.649">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20171020 13:08:20.649">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:08:20.649" starttime="20171020 13:08:20.560"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:08:20.651">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171020 13:08:20.651" starttime="20171020 13:08:20.650"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:08:20.651">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171020 13:08:20.652" starttime="20171020 13:08:20.651"></status>
</kw>
<status status="PASS" endtime="20171020 13:08:20.652" starttime="20171020 13:08:20.651"></status>
</kw>
<status status="PASS" endtime="20171020 13:08:20.652" starttime="20171020 13:08:20.650"></status>
</kw>
<status status="PASS" endtime="20171020 13:08:20.652" starttime="20171020 13:08:20.649"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171020 13:08:20.652">Delete All Sessions</msg>
<status status="PASS" endtime="20171020 13:08:20.652" starttime="20171020 13:08:20.652"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:08:20.653">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:08:20.653" starttime="20171020 13:08:20.206"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:08:20.653">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:08:20.653" starttime="20171020 13:08:20.653"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:08:20.654">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171020 13:08:20.654">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171020 13:08:20.654">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20171020 13:08:20.654" starttime="20171020 13:08:20.654"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:08:20.654">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status status="PASS" endtime="20171020 13:08:20.654" starttime="20171020 13:08:20.206"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:08:20.655">${host_state} = Running</msg>
<status status="PASS" endtime="20171020 13:08:20.655" starttime="20171020 13:08:20.205"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status status="PASS" endtime="20171020 13:08:20.655" starttime="20171020 13:08:20.655"></status>
</kw>
<kw name="Is OS Booted" library="state_manager">
<doc>Check OS status.</doc>
<kw name="Get Host State Attribute" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>BootProgress</arg>
</arguments>
<assign>
<var>${boot_stage}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>${host_attribute}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:08:20.660">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171020 13:08:20.660" starttime="20171020 13:08:20.659"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:08:20.661">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171020 13:08:20.661" starttime="20171020 13:08:20.660"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:08:20.661">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171020 13:08:20.661" starttime="20171020 13:08:20.661"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:08:20.662">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171020 13:08:20.662" starttime="20171020 13:08:20.662"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:08:20.926">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171020 13:08:20.926" starttime="20171020 13:08:20.663"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:08:20.926">${status} = PASS</msg>
<msg level="INFO" timestamp="20171020 13:08:20.926">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:08:20.927" starttime="20171020 13:08:20.662"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:08:20.927">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:08:20.927" starttime="20171020 13:08:20.927"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:08:20.928">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:08:20.928" starttime="20171020 13:08:20.928"></status>
</kw>
<status status="PASS" endtime="20171020 13:08:20.928" starttime="20171020 13:08:20.659"></status>
</kw>
<status status="PASS" endtime="20171020 13:08:20.928" starttime="20171020 13:08:20.658"></status>
</kw>
<status status="PASS" endtime="20171020 13:08:20.928" starttime="20171020 13:08:20.658"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:08:20.929">${base_uri} = /xyz/openbmc_project/state/host0//attr/BootProgress</msg>
<status status="PASS" endtime="20171020 13:08:20.929" starttime="20171020 13:08:20.929"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:08:20.931">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status status="PASS" endtime="20171020 13:08:20.931" starttime="20171020 13:08:20.930"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:08:20.932">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status status="PASS" endtime="20171020 13:08:20.932" starttime="20171020 13:08:20.932"></status>
</kw>
<status status="PASS" endtime="20171020 13:08:20.932" starttime="20171020 13:08:20.931"></status>
</kw>
<status status="PASS" endtime="20171020 13:08:20.932" starttime="20171020 13:08:20.930"></status>
</kw>
<status status="PASS" endtime="20171020 13:08:20.932" starttime="20171020 13:08:20.929"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:08:21.023">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/BootProgress, headers=None json=None</msg>
<msg level="INFO" timestamp="20171020 13:08:21.023">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:08:21.023" starttime="20171020 13:08:20.933"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:08:21.025">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171020 13:08:21.025" starttime="20171020 13:08:21.024"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:08:21.026">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171020 13:08:21.026" starttime="20171020 13:08:21.025"></status>
</kw>
<status status="PASS" endtime="20171020 13:08:21.026" starttime="20171020 13:08:21.025"></status>
</kw>
<status status="PASS" endtime="20171020 13:08:21.026" starttime="20171020 13:08:21.024"></status>
</kw>
<status status="PASS" endtime="20171020 13:08:21.026" starttime="20171020 13:08:21.023"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171020 13:08:21.026">Delete All Sessions</msg>
<status status="PASS" endtime="20171020 13:08:21.026" starttime="20171020 13:08:21.026"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:08:21.027">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:08:21.027" starttime="20171020 13:08:20.657"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:08:21.027">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:08:21.028" starttime="20171020 13:08:21.027"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:08:21.028">To JSON using : content={
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171020 13:08:21.028">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171020 13:08:21.028">${content} = {u'data': u'xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20171020 13:08:21.028" starttime="20171020 13:08:21.028"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:08:21.029">${state} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart</msg>
<status status="PASS" endtime="20171020 13:08:21.029" starttime="20171020 13:08:20.656"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:08:21.029">${boot_stage} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart</msg>
<status status="PASS" endtime="20171020 13:08:21.029" starttime="20171020 13:08:20.656"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${OS_BOOT_START}</arg>
<arg>${boot_stage}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:08:21.029">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:08:21.029" starttime="20171020 13:08:21.029"></status>
</kw>
<kw name="Get Host State Attribute" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>OperatingSystemState</arg>
</arguments>
<assign>
<var>${os_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>${host_attribute}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:08:21.033">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171020 13:08:21.034" starttime="20171020 13:08:21.033"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:08:21.034">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171020 13:08:21.034" starttime="20171020 13:08:21.034"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:08:21.035">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171020 13:08:21.035" starttime="20171020 13:08:21.034"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:08:21.035">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171020 13:08:21.035" starttime="20171020 13:08:21.035"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:08:21.321">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171020 13:08:21.321" starttime="20171020 13:08:21.036"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:08:21.321">${status} = PASS</msg>
<msg level="INFO" timestamp="20171020 13:08:21.321">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:08:21.321" starttime="20171020 13:08:21.036"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:08:21.322">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:08:21.322" starttime="20171020 13:08:21.322"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:08:21.323">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:08:21.323" starttime="20171020 13:08:21.322"></status>
</kw>
<status status="PASS" endtime="20171020 13:08:21.323" starttime="20171020 13:08:21.032"></status>
</kw>
<status status="PASS" endtime="20171020 13:08:21.323" starttime="20171020 13:08:21.032"></status>
</kw>
<status status="PASS" endtime="20171020 13:08:21.323" starttime="20171020 13:08:21.031"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:08:21.324">${base_uri} = /xyz/openbmc_project/state/host0//attr/OperatingSystemState</msg>
<status status="PASS" endtime="20171020 13:08:21.324" starttime="20171020 13:08:21.323"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:08:21.326">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/OperatingSystemState, method:Get, args:{}</msg>
<status status="PASS" endtime="20171020 13:08:21.326" starttime="20171020 13:08:21.325"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:08:21.327">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/OperatingSystemState, method:Get, args:{}</msg>
<status status="PASS" endtime="20171020 13:08:21.327" starttime="20171020 13:08:21.326"></status>
</kw>
<status status="PASS" endtime="20171020 13:08:21.327" starttime="20171020 13:08:21.326"></status>
</kw>
<status status="PASS" endtime="20171020 13:08:21.327" starttime="20171020 13:08:21.324"></status>
</kw>
<status status="PASS" endtime="20171020 13:08:21.327" starttime="20171020 13:08:21.324"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:08:21.638">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/OperatingSystemState, headers=None json=None</msg>
<msg level="INFO" timestamp="20171020 13:08:21.639">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:08:21.639" starttime="20171020 13:08:21.327"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:08:21.641">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171020 13:08:21.641" starttime="20171020 13:08:21.640"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:08:21.642">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171020 13:08:21.642" starttime="20171020 13:08:21.642"></status>
</kw>
<status status="PASS" endtime="20171020 13:08:21.642" starttime="20171020 13:08:21.641"></status>
</kw>
<status status="PASS" endtime="20171020 13:08:21.642" starttime="20171020 13:08:21.639"></status>
</kw>
<status status="PASS" endtime="20171020 13:08:21.642" starttime="20171020 13:08:21.639"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171020 13:08:21.643">Delete All Sessions</msg>
<status status="PASS" endtime="20171020 13:08:21.643" starttime="20171020 13:08:21.643"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:08:21.643">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:08:21.643" starttime="20171020 13:08:21.031"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:08:21.644">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:08:21.644" starttime="20171020 13:08:21.643"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:08:21.644">To JSON using : content={
  "data": "xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171020 13:08:21.644">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171020 13:08:21.644">${content} = {u'data': u'xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20171020 13:08:21.645" starttime="20171020 13:08:21.644"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:08:21.645">${state} = xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive</msg>
<status status="PASS" endtime="20171020 13:08:21.645" starttime="20171020 13:08:21.030"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:08:21.645">${os_state} = xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive</msg>
<status status="PASS" endtime="20171020 13:08:21.645" starttime="20171020 13:08:21.030"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${OS_BOOT_COMPLETE}</arg>
<arg>${os_state}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:08:21.646">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg level="FAIL" timestamp="20171020 13:08:21.646">xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.BootComplete != xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive</msg>
<status status="FAIL" endtime="20171020 13:08:21.646" starttime="20171020 13:08:21.645"></status>
</kw>
<status status="FAIL" endtime="20171020 13:08:21.646" starttime="20171020 13:08:20.655"></status>
</kw>
<status status="FAIL" endtime="20171020 13:08:21.646" starttime="20171020 13:08:19.673"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:08:31.652">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171020 13:08:31.652" starttime="20171020 13:08:31.651"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:08:31.653">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171020 13:08:31.653" starttime="20171020 13:08:31.652"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:08:31.653">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171020 13:08:31.654" starttime="20171020 13:08:31.653"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:08:31.654">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171020 13:08:31.654" starttime="20171020 13:08:31.654"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:08:31.890">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171020 13:08:31.890" starttime="20171020 13:08:31.655"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:08:31.890">${status} = PASS</msg>
<msg level="INFO" timestamp="20171020 13:08:31.890">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:08:31.891" starttime="20171020 13:08:31.654"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:08:31.891">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:08:31.891" starttime="20171020 13:08:31.891"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:08:31.892">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:08:31.892" starttime="20171020 13:08:31.892"></status>
</kw>
<status status="PASS" endtime="20171020 13:08:31.892" starttime="20171020 13:08:31.650"></status>
</kw>
<status status="PASS" endtime="20171020 13:08:31.892" starttime="20171020 13:08:31.650"></status>
</kw>
<status status="PASS" endtime="20171020 13:08:31.892" starttime="20171020 13:08:31.649"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:08:31.893">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" endtime="20171020 13:08:31.893" starttime="20171020 13:08:31.893"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:08:31.895">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" endtime="20171020 13:08:31.895" starttime="20171020 13:08:31.894"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:08:31.896">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" endtime="20171020 13:08:31.896" starttime="20171020 13:08:31.896"></status>
</kw>
<status status="PASS" endtime="20171020 13:08:31.896" starttime="20171020 13:08:31.895"></status>
</kw>
<status status="PASS" endtime="20171020 13:08:31.896" starttime="20171020 13:08:31.894"></status>
</kw>
<status status="PASS" endtime="20171020 13:08:31.896" starttime="20171020 13:08:31.893"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:08:32.003">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20171020 13:08:32.003">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:08:32.004" starttime="20171020 13:08:31.897"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:08:32.005">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171020 13:08:32.005" starttime="20171020 13:08:32.005"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:08:32.007">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171020 13:08:32.007" starttime="20171020 13:08:32.006"></status>
</kw>
<status status="PASS" endtime="20171020 13:08:32.007" starttime="20171020 13:08:32.006"></status>
</kw>
<status status="PASS" endtime="20171020 13:08:32.007" starttime="20171020 13:08:32.004"></status>
</kw>
<status status="PASS" endtime="20171020 13:08:32.007" starttime="20171020 13:08:32.004"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171020 13:08:32.008">Delete All Sessions</msg>
<status status="PASS" endtime="20171020 13:08:32.008" starttime="20171020 13:08:32.007"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:08:32.008">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:08:32.008" starttime="20171020 13:08:31.649"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:08:32.008">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:08:32.009" starttime="20171020 13:08:32.008"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:08:32.009">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171020 13:08:32.009">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171020 13:08:32.009">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20171020 13:08:32.009" starttime="20171020 13:08:32.009"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:08:32.010">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status status="PASS" endtime="20171020 13:08:32.010" starttime="20171020 13:08:31.648"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:08:32.010">${power_state} = On</msg>
<status status="PASS" endtime="20171020 13:08:32.010" starttime="20171020 13:08:31.648"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status status="PASS" endtime="20171020 13:08:32.010" starttime="20171020 13:08:32.010"></status>
</kw>
<status status="PASS" endtime="20171020 13:08:32.011" starttime="20171020 13:08:31.647"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:08:32.014">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171020 13:08:32.015" starttime="20171020 13:08:32.014"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:08:32.015">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171020 13:08:32.015" starttime="20171020 13:08:32.015"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:08:32.016">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171020 13:08:32.016" starttime="20171020 13:08:32.016"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:08:32.017">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171020 13:08:32.017" starttime="20171020 13:08:32.016"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:08:32.204">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171020 13:08:32.205" starttime="20171020 13:08:32.017"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:08:32.205">${status} = PASS</msg>
<msg level="INFO" timestamp="20171020 13:08:32.205">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:08:32.205" starttime="20171020 13:08:32.017"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:08:32.205">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:08:32.205" starttime="20171020 13:08:32.205"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:08:32.206">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:08:32.206" starttime="20171020 13:08:32.206"></status>
</kw>
<status status="PASS" endtime="20171020 13:08:32.206" starttime="20171020 13:08:32.013"></status>
</kw>
<status status="PASS" endtime="20171020 13:08:32.206" starttime="20171020 13:08:32.013"></status>
</kw>
<status status="PASS" endtime="20171020 13:08:32.207" starttime="20171020 13:08:32.012"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:08:32.207">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" endtime="20171020 13:08:32.207" starttime="20171020 13:08:32.207"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:08:32.210">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" endtime="20171020 13:08:32.210" starttime="20171020 13:08:32.209"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:08:32.211">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" endtime="20171020 13:08:32.211" starttime="20171020 13:08:32.210"></status>
</kw>
<status status="PASS" endtime="20171020 13:08:32.211" starttime="20171020 13:08:32.210"></status>
</kw>
<status status="PASS" endtime="20171020 13:08:32.211" starttime="20171020 13:08:32.208"></status>
</kw>
<status status="PASS" endtime="20171020 13:08:32.211" starttime="20171020 13:08:32.207"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:08:32.300">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20171020 13:08:32.301">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:08:32.301" starttime="20171020 13:08:32.211"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:08:32.302">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171020 13:08:32.302" starttime="20171020 13:08:32.302"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:08:32.303">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171020 13:08:32.303" starttime="20171020 13:08:32.303"></status>
</kw>
<status status="PASS" endtime="20171020 13:08:32.304" starttime="20171020 13:08:32.303"></status>
</kw>
<status status="PASS" endtime="20171020 13:08:32.304" starttime="20171020 13:08:32.301"></status>
</kw>
<status status="PASS" endtime="20171020 13:08:32.304" starttime="20171020 13:08:32.301"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171020 13:08:32.304">Delete All Sessions</msg>
<status status="PASS" endtime="20171020 13:08:32.304" starttime="20171020 13:08:32.304"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:08:32.305">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:08:32.305" starttime="20171020 13:08:32.012"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:08:32.305">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:08:32.305" starttime="20171020 13:08:32.305"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:08:32.306">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171020 13:08:32.306">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171020 13:08:32.306">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20171020 13:08:32.306" starttime="20171020 13:08:32.306"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:08:32.306">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status status="PASS" endtime="20171020 13:08:32.306" starttime="20171020 13:08:32.011"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:08:32.307">${host_state} = Running</msg>
<status status="PASS" endtime="20171020 13:08:32.307" starttime="20171020 13:08:32.011"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status status="PASS" endtime="20171020 13:08:32.307" starttime="20171020 13:08:32.307"></status>
</kw>
<kw name="Is OS Booted" library="state_manager">
<doc>Check OS status.</doc>
<kw name="Get Host State Attribute" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>BootProgress</arg>
</arguments>
<assign>
<var>${boot_stage}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>${host_attribute}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:08:32.311">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171020 13:08:32.312" starttime="20171020 13:08:32.311"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:08:32.312">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171020 13:08:32.312" starttime="20171020 13:08:32.312"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:08:32.313">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171020 13:08:32.313" starttime="20171020 13:08:32.313"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:08:32.314">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171020 13:08:32.314" starttime="20171020 13:08:32.313"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:08:32.643">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171020 13:08:32.643" starttime="20171020 13:08:32.317"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:08:32.643">${status} = PASS</msg>
<msg level="INFO" timestamp="20171020 13:08:32.643">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:08:32.643" starttime="20171020 13:08:32.314"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:08:32.644">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:08:32.644" starttime="20171020 13:08:32.643"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:08:32.644">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:08:32.645" starttime="20171020 13:08:32.644"></status>
</kw>
<status status="PASS" endtime="20171020 13:08:32.645" starttime="20171020 13:08:32.311"></status>
</kw>
<status status="PASS" endtime="20171020 13:08:32.645" starttime="20171020 13:08:32.310"></status>
</kw>
<status status="PASS" endtime="20171020 13:08:32.645" starttime="20171020 13:08:32.310"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:08:32.645">${base_uri} = /xyz/openbmc_project/state/host0//attr/BootProgress</msg>
<status status="PASS" endtime="20171020 13:08:32.645" starttime="20171020 13:08:32.645"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:08:32.648">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status status="PASS" endtime="20171020 13:08:32.648" starttime="20171020 13:08:32.647"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:08:32.648">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status status="PASS" endtime="20171020 13:08:32.649" starttime="20171020 13:08:32.648"></status>
</kw>
<status status="PASS" endtime="20171020 13:08:32.649" starttime="20171020 13:08:32.648"></status>
</kw>
<status status="PASS" endtime="20171020 13:08:32.649" starttime="20171020 13:08:32.646"></status>
</kw>
<status status="PASS" endtime="20171020 13:08:32.649" starttime="20171020 13:08:32.646"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:08:32.741">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/BootProgress, headers=None json=None</msg>
<msg level="INFO" timestamp="20171020 13:08:32.741">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:08:32.741" starttime="20171020 13:08:32.649"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:08:32.743">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171020 13:08:32.743" starttime="20171020 13:08:32.742"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:08:32.744">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171020 13:08:32.744" starttime="20171020 13:08:32.744"></status>
</kw>
<status status="PASS" endtime="20171020 13:08:32.744" starttime="20171020 13:08:32.743"></status>
</kw>
<status status="PASS" endtime="20171020 13:08:32.744" starttime="20171020 13:08:32.742"></status>
</kw>
<status status="PASS" endtime="20171020 13:08:32.744" starttime="20171020 13:08:32.741"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171020 13:08:32.745">Delete All Sessions</msg>
<status status="PASS" endtime="20171020 13:08:32.745" starttime="20171020 13:08:32.744"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:08:32.745">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:08:32.745" starttime="20171020 13:08:32.309"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:08:32.745">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:08:32.746" starttime="20171020 13:08:32.745"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:08:32.746">To JSON using : content={
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171020 13:08:32.746">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171020 13:08:32.746">${content} = {u'data': u'xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20171020 13:08:32.746" starttime="20171020 13:08:32.746"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:08:32.747">${state} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart</msg>
<status status="PASS" endtime="20171020 13:08:32.747" starttime="20171020 13:08:32.308"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:08:32.747">${boot_stage} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart</msg>
<status status="PASS" endtime="20171020 13:08:32.747" starttime="20171020 13:08:32.308"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${OS_BOOT_START}</arg>
<arg>${boot_stage}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:08:32.747">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:08:32.747" starttime="20171020 13:08:32.747"></status>
</kw>
<kw name="Get Host State Attribute" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>OperatingSystemState</arg>
</arguments>
<assign>
<var>${os_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>${host_attribute}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:08:32.752">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171020 13:08:32.752" starttime="20171020 13:08:32.751"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:08:32.752">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171020 13:08:32.753" starttime="20171020 13:08:32.752"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:08:32.753">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171020 13:08:32.753" starttime="20171020 13:08:32.753"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:08:32.754">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171020 13:08:32.754" starttime="20171020 13:08:32.753"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:08:33.054">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171020 13:08:33.054" starttime="20171020 13:08:32.755"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:08:33.054">${status} = PASS</msg>
<msg level="INFO" timestamp="20171020 13:08:33.054">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:08:33.054" starttime="20171020 13:08:32.754"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:08:33.055">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:08:33.055" starttime="20171020 13:08:33.054"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:08:33.055">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:08:33.056" starttime="20171020 13:08:33.055"></status>
</kw>
<status status="PASS" endtime="20171020 13:08:33.056" starttime="20171020 13:08:32.751"></status>
</kw>
<status status="PASS" endtime="20171020 13:08:33.056" starttime="20171020 13:08:32.750"></status>
</kw>
<status status="PASS" endtime="20171020 13:08:33.056" starttime="20171020 13:08:32.749"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:08:33.056">${base_uri} = /xyz/openbmc_project/state/host0//attr/OperatingSystemState</msg>
<status status="PASS" endtime="20171020 13:08:33.057" starttime="20171020 13:08:33.056"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:08:33.059">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/OperatingSystemState, method:Get, args:{}</msg>
<status status="PASS" endtime="20171020 13:08:33.059" starttime="20171020 13:08:33.058"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:08:33.061">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/OperatingSystemState, method:Get, args:{}</msg>
<status status="PASS" endtime="20171020 13:08:33.061" starttime="20171020 13:08:33.060"></status>
</kw>
<status status="PASS" endtime="20171020 13:08:33.061" starttime="20171020 13:08:33.059"></status>
</kw>
<status status="PASS" endtime="20171020 13:08:33.061" starttime="20171020 13:08:33.057"></status>
</kw>
<status status="PASS" endtime="20171020 13:08:33.061" starttime="20171020 13:08:33.057"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:08:33.242">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/OperatingSystemState, headers=None json=None</msg>
<msg level="INFO" timestamp="20171020 13:08:33.242">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:08:33.242" starttime="20171020 13:08:33.061"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:08:33.244">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171020 13:08:33.244" starttime="20171020 13:08:33.244"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:08:33.245">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171020 13:08:33.245" starttime="20171020 13:08:33.245"></status>
</kw>
<status status="PASS" endtime="20171020 13:08:33.246" starttime="20171020 13:08:33.244"></status>
</kw>
<status status="PASS" endtime="20171020 13:08:33.246" starttime="20171020 13:08:33.243"></status>
</kw>
<status status="PASS" endtime="20171020 13:08:33.246" starttime="20171020 13:08:33.243"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171020 13:08:33.246">Delete All Sessions</msg>
<status status="PASS" endtime="20171020 13:08:33.246" starttime="20171020 13:08:33.246"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:08:33.246">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:08:33.246" starttime="20171020 13:08:32.749"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:08:33.247">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:08:33.247" starttime="20171020 13:08:33.247"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:08:33.248">To JSON using : content={
  "data": "xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171020 13:08:33.248">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171020 13:08:33.248">${content} = {u'data': u'xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20171020 13:08:33.248" starttime="20171020 13:08:33.248"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:08:33.248">${state} = xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive</msg>
<status status="PASS" endtime="20171020 13:08:33.248" starttime="20171020 13:08:32.748"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:08:33.249">${os_state} = xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive</msg>
<status status="PASS" endtime="20171020 13:08:33.249" starttime="20171020 13:08:32.748"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${OS_BOOT_COMPLETE}</arg>
<arg>${os_state}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:08:33.249">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg level="FAIL" timestamp="20171020 13:08:33.249">xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.BootComplete != xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive</msg>
<status status="FAIL" endtime="20171020 13:08:33.249" starttime="20171020 13:08:33.249"></status>
</kw>
<status status="FAIL" endtime="20171020 13:08:33.250" starttime="20171020 13:08:32.308"></status>
</kw>
<status status="FAIL" endtime="20171020 13:08:33.250" starttime="20171020 13:08:31.647"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:08:43.255">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171020 13:08:43.255" starttime="20171020 13:08:43.254"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:08:43.256">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171020 13:08:43.256" starttime="20171020 13:08:43.255"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:08:43.256">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171020 13:08:43.256" starttime="20171020 13:08:43.256"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:08:43.257">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171020 13:08:43.257" starttime="20171020 13:08:43.257"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:08:43.502">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171020 13:08:43.502" starttime="20171020 13:08:43.258"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:08:43.502">${status} = PASS</msg>
<msg level="INFO" timestamp="20171020 13:08:43.502">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:08:43.502" starttime="20171020 13:08:43.257"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:08:43.503">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:08:43.503" starttime="20171020 13:08:43.502"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:08:43.503">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:08:43.503" starttime="20171020 13:08:43.503"></status>
</kw>
<status status="PASS" endtime="20171020 13:08:43.504" starttime="20171020 13:08:43.254"></status>
</kw>
<status status="PASS" endtime="20171020 13:08:43.504" starttime="20171020 13:08:43.253"></status>
</kw>
<status status="PASS" endtime="20171020 13:08:43.504" starttime="20171020 13:08:43.253"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:08:43.504">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" endtime="20171020 13:08:43.504" starttime="20171020 13:08:43.504"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:08:43.507">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" endtime="20171020 13:08:43.507" starttime="20171020 13:08:43.506"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:08:43.508">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" endtime="20171020 13:08:43.509" starttime="20171020 13:08:43.507"></status>
</kw>
<status status="PASS" endtime="20171020 13:08:43.509" starttime="20171020 13:08:43.507"></status>
</kw>
<status status="PASS" endtime="20171020 13:08:43.509" starttime="20171020 13:08:43.505"></status>
</kw>
<status status="PASS" endtime="20171020 13:08:43.509" starttime="20171020 13:08:43.505"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:08:43.603">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20171020 13:08:43.603">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:08:43.603" starttime="20171020 13:08:43.509"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:08:43.605">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171020 13:08:43.605" starttime="20171020 13:08:43.605"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:08:43.606">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171020 13:08:43.606" starttime="20171020 13:08:43.606"></status>
</kw>
<status status="PASS" endtime="20171020 13:08:43.606" starttime="20171020 13:08:43.605"></status>
</kw>
<status status="PASS" endtime="20171020 13:08:43.606" starttime="20171020 13:08:43.604"></status>
</kw>
<status status="PASS" endtime="20171020 13:08:43.606" starttime="20171020 13:08:43.604"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171020 13:08:43.607">Delete All Sessions</msg>
<status status="PASS" endtime="20171020 13:08:43.607" starttime="20171020 13:08:43.607"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:08:43.607">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:08:43.607" starttime="20171020 13:08:43.252"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:08:43.608">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:08:43.608" starttime="20171020 13:08:43.607"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:08:43.608">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171020 13:08:43.609">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171020 13:08:43.609">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20171020 13:08:43.609" starttime="20171020 13:08:43.608"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:08:43.609">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status status="PASS" endtime="20171020 13:08:43.609" starttime="20171020 13:08:43.252"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:08:43.609">${power_state} = On</msg>
<status status="PASS" endtime="20171020 13:08:43.609" starttime="20171020 13:08:43.251"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status status="PASS" endtime="20171020 13:08:43.610" starttime="20171020 13:08:43.610"></status>
</kw>
<status status="PASS" endtime="20171020 13:08:43.610" starttime="20171020 13:08:43.251"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:08:43.614">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171020 13:08:43.614" starttime="20171020 13:08:43.613"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:08:43.615">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171020 13:08:43.615" starttime="20171020 13:08:43.615"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:08:43.616">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171020 13:08:43.616" starttime="20171020 13:08:43.615"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:08:43.616">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171020 13:08:43.616" starttime="20171020 13:08:43.616"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:08:43.930">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171020 13:08:43.930" starttime="20171020 13:08:43.617"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:08:43.931">${status} = PASS</msg>
<msg level="INFO" timestamp="20171020 13:08:43.931">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:08:43.931" starttime="20171020 13:08:43.617"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:08:43.931">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:08:43.931" starttime="20171020 13:08:43.931"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:08:43.932">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:08:43.932" starttime="20171020 13:08:43.932"></status>
</kw>
<status status="PASS" endtime="20171020 13:08:43.932" starttime="20171020 13:08:43.613"></status>
</kw>
<status status="PASS" endtime="20171020 13:08:43.932" starttime="20171020 13:08:43.612"></status>
</kw>
<status status="PASS" endtime="20171020 13:08:43.932" starttime="20171020 13:08:43.612"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:08:43.933">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" endtime="20171020 13:08:43.933" starttime="20171020 13:08:43.933"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:08:43.935">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" endtime="20171020 13:08:43.935" starttime="20171020 13:08:43.934"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:08:43.936">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" endtime="20171020 13:08:43.936" starttime="20171020 13:08:43.936"></status>
</kw>
<status status="PASS" endtime="20171020 13:08:43.936" starttime="20171020 13:08:43.935"></status>
</kw>
<status status="PASS" endtime="20171020 13:08:43.937" starttime="20171020 13:08:43.934"></status>
</kw>
<status status="PASS" endtime="20171020 13:08:43.937" starttime="20171020 13:08:43.933"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:08:44.026">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20171020 13:08:44.026">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:08:44.026" starttime="20171020 13:08:43.937"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:08:44.028">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171020 13:08:44.028" starttime="20171020 13:08:44.028"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:08:44.029">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171020 13:08:44.029" starttime="20171020 13:08:44.029"></status>
</kw>
<status status="PASS" endtime="20171020 13:08:44.029" starttime="20171020 13:08:44.028"></status>
</kw>
<status status="PASS" endtime="20171020 13:08:44.030" starttime="20171020 13:08:44.027"></status>
</kw>
<status status="PASS" endtime="20171020 13:08:44.030" starttime="20171020 13:08:44.027"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171020 13:08:44.030">Delete All Sessions</msg>
<status status="PASS" endtime="20171020 13:08:44.030" starttime="20171020 13:08:44.030"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:08:44.030">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:08:44.030" starttime="20171020 13:08:43.611"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:08:44.031">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:08:44.031" starttime="20171020 13:08:44.031"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:08:44.032">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171020 13:08:44.032">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171020 13:08:44.032">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20171020 13:08:44.032" starttime="20171020 13:08:44.031"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:08:44.032">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status status="PASS" endtime="20171020 13:08:44.032" starttime="20171020 13:08:43.610"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:08:44.032">${host_state} = Running</msg>
<status status="PASS" endtime="20171020 13:08:44.032" starttime="20171020 13:08:43.610"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status status="PASS" endtime="20171020 13:08:44.033" starttime="20171020 13:08:44.033"></status>
</kw>
<kw name="Is OS Booted" library="state_manager">
<doc>Check OS status.</doc>
<kw name="Get Host State Attribute" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>BootProgress</arg>
</arguments>
<assign>
<var>${boot_stage}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>${host_attribute}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:08:44.037">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171020 13:08:44.038" starttime="20171020 13:08:44.037"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:08:44.038">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171020 13:08:44.038" starttime="20171020 13:08:44.038"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:08:44.039">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171020 13:08:44.039" starttime="20171020 13:08:44.039"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:08:44.040">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171020 13:08:44.040" starttime="20171020 13:08:44.039"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:08:44.298">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171020 13:08:44.298" starttime="20171020 13:08:44.041"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:08:44.298">${status} = PASS</msg>
<msg level="INFO" timestamp="20171020 13:08:44.299">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:08:44.299" starttime="20171020 13:08:44.040"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:08:44.299">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:08:44.299" starttime="20171020 13:08:44.299"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:08:44.300">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:08:44.300" starttime="20171020 13:08:44.300"></status>
</kw>
<status status="PASS" endtime="20171020 13:08:44.300" starttime="20171020 13:08:44.036"></status>
</kw>
<status status="PASS" endtime="20171020 13:08:44.300" starttime="20171020 13:08:44.036"></status>
</kw>
<status status="PASS" endtime="20171020 13:08:44.300" starttime="20171020 13:08:44.035"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:08:44.301">${base_uri} = /xyz/openbmc_project/state/host0//attr/BootProgress</msg>
<status status="PASS" endtime="20171020 13:08:44.301" starttime="20171020 13:08:44.301"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:08:44.303">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status status="PASS" endtime="20171020 13:08:44.303" starttime="20171020 13:08:44.302"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:08:44.304">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status status="PASS" endtime="20171020 13:08:44.304" starttime="20171020 13:08:44.304"></status>
</kw>
<status status="PASS" endtime="20171020 13:08:44.304" starttime="20171020 13:08:44.303"></status>
</kw>
<status status="PASS" endtime="20171020 13:08:44.304" starttime="20171020 13:08:44.302"></status>
</kw>
<status status="PASS" endtime="20171020 13:08:44.304" starttime="20171020 13:08:44.301"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:08:44.395">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/BootProgress, headers=None json=None</msg>
<msg level="INFO" timestamp="20171020 13:08:44.395">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:08:44.395" starttime="20171020 13:08:44.305"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:08:44.397">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171020 13:08:44.397" starttime="20171020 13:08:44.396"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:08:44.398">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171020 13:08:44.398" starttime="20171020 13:08:44.398"></status>
</kw>
<status status="PASS" endtime="20171020 13:08:44.398" starttime="20171020 13:08:44.397"></status>
</kw>
<status status="PASS" endtime="20171020 13:08:44.398" starttime="20171020 13:08:44.396"></status>
</kw>
<status status="PASS" endtime="20171020 13:08:44.398" starttime="20171020 13:08:44.395"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171020 13:08:44.399">Delete All Sessions</msg>
<status status="PASS" endtime="20171020 13:08:44.399" starttime="20171020 13:08:44.399"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:08:44.399">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:08:44.399" starttime="20171020 13:08:44.034"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:08:44.400">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:08:44.400" starttime="20171020 13:08:44.399"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:08:44.400">To JSON using : content={
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171020 13:08:44.400">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171020 13:08:44.400">${content} = {u'data': u'xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20171020 13:08:44.400" starttime="20171020 13:08:44.400"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:08:44.401">${state} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart</msg>
<status status="PASS" endtime="20171020 13:08:44.401" starttime="20171020 13:08:44.034"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:08:44.401">${boot_stage} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart</msg>
<status status="PASS" endtime="20171020 13:08:44.401" starttime="20171020 13:08:44.033"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${OS_BOOT_START}</arg>
<arg>${boot_stage}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:08:44.401">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:08:44.402" starttime="20171020 13:08:44.401"></status>
</kw>
<kw name="Get Host State Attribute" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>OperatingSystemState</arg>
</arguments>
<assign>
<var>${os_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>${host_attribute}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:08:44.405">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171020 13:08:44.406" starttime="20171020 13:08:44.405"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:08:44.406">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171020 13:08:44.406" starttime="20171020 13:08:44.406"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:08:44.407">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171020 13:08:44.407" starttime="20171020 13:08:44.406"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:08:44.407">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171020 13:08:44.408" starttime="20171020 13:08:44.407"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:08:44.685">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171020 13:08:44.685" starttime="20171020 13:08:44.408"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:08:44.685">${status} = PASS</msg>
<msg level="INFO" timestamp="20171020 13:08:44.685">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:08:44.685" starttime="20171020 13:08:44.408"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:08:44.686">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:08:44.686" starttime="20171020 13:08:44.686"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:08:44.687">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:08:44.687" starttime="20171020 13:08:44.686"></status>
</kw>
<status status="PASS" endtime="20171020 13:08:44.687" starttime="20171020 13:08:44.404"></status>
</kw>
<status status="PASS" endtime="20171020 13:08:44.687" starttime="20171020 13:08:44.404"></status>
</kw>
<status status="PASS" endtime="20171020 13:08:44.687" starttime="20171020 13:08:44.403"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:08:44.688">${base_uri} = /xyz/openbmc_project/state/host0//attr/OperatingSystemState</msg>
<status status="PASS" endtime="20171020 13:08:44.688" starttime="20171020 13:08:44.688"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:08:44.690">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/OperatingSystemState, method:Get, args:{}</msg>
<status status="PASS" endtime="20171020 13:08:44.690" starttime="20171020 13:08:44.690"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:08:44.691">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/OperatingSystemState, method:Get, args:{}</msg>
<status status="PASS" endtime="20171020 13:08:44.691" starttime="20171020 13:08:44.691"></status>
</kw>
<status status="PASS" endtime="20171020 13:08:44.691" starttime="20171020 13:08:44.690"></status>
</kw>
<status status="PASS" endtime="20171020 13:08:44.691" starttime="20171020 13:08:44.689"></status>
</kw>
<status status="PASS" endtime="20171020 13:08:44.692" starttime="20171020 13:08:44.688"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:08:44.781">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/OperatingSystemState, headers=None json=None</msg>
<msg level="INFO" timestamp="20171020 13:08:44.781">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:08:44.781" starttime="20171020 13:08:44.692"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:08:44.783">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171020 13:08:44.783" starttime="20171020 13:08:44.783"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:08:44.784">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171020 13:08:44.784" starttime="20171020 13:08:44.784"></status>
</kw>
<status status="PASS" endtime="20171020 13:08:44.784" starttime="20171020 13:08:44.783"></status>
</kw>
<status status="PASS" endtime="20171020 13:08:44.784" starttime="20171020 13:08:44.782"></status>
</kw>
<status status="PASS" endtime="20171020 13:08:44.784" starttime="20171020 13:08:44.781"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171020 13:08:44.785">Delete All Sessions</msg>
<status status="PASS" endtime="20171020 13:08:44.785" starttime="20171020 13:08:44.785"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:08:44.785">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:08:44.785" starttime="20171020 13:08:44.403"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:08:44.786">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:08:44.786" starttime="20171020 13:08:44.785"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:08:44.787">To JSON using : content={
  "data": "xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171020 13:08:44.787">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171020 13:08:44.787">${content} = {u'data': u'xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20171020 13:08:44.787" starttime="20171020 13:08:44.786"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:08:44.787">${state} = xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive</msg>
<status status="PASS" endtime="20171020 13:08:44.787" starttime="20171020 13:08:44.402"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:08:44.787">${os_state} = xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive</msg>
<status status="PASS" endtime="20171020 13:08:44.787" starttime="20171020 13:08:44.402"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${OS_BOOT_COMPLETE}</arg>
<arg>${os_state}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:08:44.788">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg level="FAIL" timestamp="20171020 13:08:44.788">xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.BootComplete != xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive</msg>
<status status="FAIL" endtime="20171020 13:08:44.788" starttime="20171020 13:08:44.788"></status>
</kw>
<status status="FAIL" endtime="20171020 13:08:44.788" starttime="20171020 13:08:44.033"></status>
</kw>
<status status="FAIL" endtime="20171020 13:08:44.788" starttime="20171020 13:08:43.250"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:08:54.794">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171020 13:08:54.794" starttime="20171020 13:08:54.794"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:08:54.795">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171020 13:08:54.795" starttime="20171020 13:08:54.795"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:08:54.796">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171020 13:08:54.796" starttime="20171020 13:08:54.795"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:08:54.796">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171020 13:08:54.796" starttime="20171020 13:08:54.796"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:08:54.984">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171020 13:08:54.984" starttime="20171020 13:08:54.797"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:08:54.984">${status} = PASS</msg>
<msg level="INFO" timestamp="20171020 13:08:54.984">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:08:54.984" starttime="20171020 13:08:54.797"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:08:54.985">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:08:54.985" starttime="20171020 13:08:54.985"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:08:54.986">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:08:54.986" starttime="20171020 13:08:54.985"></status>
</kw>
<status status="PASS" endtime="20171020 13:08:54.986" starttime="20171020 13:08:54.792"></status>
</kw>
<status status="PASS" endtime="20171020 13:08:54.986" starttime="20171020 13:08:54.792"></status>
</kw>
<status status="PASS" endtime="20171020 13:08:54.986" starttime="20171020 13:08:54.791"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:08:54.987">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" endtime="20171020 13:08:54.987" starttime="20171020 13:08:54.986"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:08:54.990">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" endtime="20171020 13:08:54.990" starttime="20171020 13:08:54.989"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:08:54.991">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" endtime="20171020 13:08:54.991" starttime="20171020 13:08:54.991"></status>
</kw>
<status status="PASS" endtime="20171020 13:08:54.991" starttime="20171020 13:08:54.990"></status>
</kw>
<status status="PASS" endtime="20171020 13:08:54.991" starttime="20171020 13:08:54.988"></status>
</kw>
<status status="PASS" endtime="20171020 13:08:54.991" starttime="20171020 13:08:54.987"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:08:55.055">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20171020 13:08:55.055">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:08:55.055" starttime="20171020 13:08:54.992"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:08:55.057">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171020 13:08:55.057" starttime="20171020 13:08:55.057"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:08:55.058">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171020 13:08:55.059" starttime="20171020 13:08:55.058"></status>
</kw>
<status status="PASS" endtime="20171020 13:08:55.059" starttime="20171020 13:08:55.057"></status>
</kw>
<status status="PASS" endtime="20171020 13:08:55.059" starttime="20171020 13:08:55.056"></status>
</kw>
<status status="PASS" endtime="20171020 13:08:55.059" starttime="20171020 13:08:55.056"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171020 13:08:55.059">Delete All Sessions</msg>
<status status="PASS" endtime="20171020 13:08:55.059" starttime="20171020 13:08:55.059"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:08:55.060">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:08:55.060" starttime="20171020 13:08:54.791"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:08:55.060">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:08:55.060" starttime="20171020 13:08:55.060"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:08:55.061">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171020 13:08:55.061">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171020 13:08:55.061">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20171020 13:08:55.061" starttime="20171020 13:08:55.061"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:08:55.061">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status status="PASS" endtime="20171020 13:08:55.061" starttime="20171020 13:08:54.790"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:08:55.062">${power_state} = On</msg>
<status status="PASS" endtime="20171020 13:08:55.062" starttime="20171020 13:08:54.790"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status status="PASS" endtime="20171020 13:08:55.062" starttime="20171020 13:08:55.062"></status>
</kw>
<status status="PASS" endtime="20171020 13:08:55.062" starttime="20171020 13:08:54.789"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:08:55.067">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171020 13:08:55.068" starttime="20171020 13:08:55.067"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:08:55.069">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171020 13:08:55.069" starttime="20171020 13:08:55.068"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:08:55.070">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171020 13:08:55.070" starttime="20171020 13:08:55.069"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:08:55.071">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171020 13:08:55.071" starttime="20171020 13:08:55.070"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:08:55.474">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171020 13:08:55.474" starttime="20171020 13:08:55.072"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:08:55.474">${status} = PASS</msg>
<msg level="INFO" timestamp="20171020 13:08:55.474">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:08:55.474" starttime="20171020 13:08:55.071"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:08:55.475">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:08:55.475" starttime="20171020 13:08:55.474"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:08:55.475">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:08:55.476" starttime="20171020 13:08:55.475"></status>
</kw>
<status status="PASS" endtime="20171020 13:08:55.476" starttime="20171020 13:08:55.066"></status>
</kw>
<status status="PASS" endtime="20171020 13:08:55.476" starttime="20171020 13:08:55.065"></status>
</kw>
<status status="PASS" endtime="20171020 13:08:55.476" starttime="20171020 13:08:55.064"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:08:55.476">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" endtime="20171020 13:08:55.477" starttime="20171020 13:08:55.476"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:08:55.479">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" endtime="20171020 13:08:55.479" starttime="20171020 13:08:55.478"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:08:55.480">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" endtime="20171020 13:08:55.480" starttime="20171020 13:08:55.480"></status>
</kw>
<status status="PASS" endtime="20171020 13:08:55.480" starttime="20171020 13:08:55.479"></status>
</kw>
<status status="PASS" endtime="20171020 13:08:55.480" starttime="20171020 13:08:55.477"></status>
</kw>
<status status="PASS" endtime="20171020 13:08:55.480" starttime="20171020 13:08:55.477"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:08:55.569">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20171020 13:08:55.570">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:08:55.570" starttime="20171020 13:08:55.481"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:08:55.571">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171020 13:08:55.571" starttime="20171020 13:08:55.571"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:08:55.572">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171020 13:08:55.572" starttime="20171020 13:08:55.572"></status>
</kw>
<status status="PASS" endtime="20171020 13:08:55.573" starttime="20171020 13:08:55.572"></status>
</kw>
<status status="PASS" endtime="20171020 13:08:55.573" starttime="20171020 13:08:55.570"></status>
</kw>
<status status="PASS" endtime="20171020 13:08:55.573" starttime="20171020 13:08:55.570"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171020 13:08:55.573">Delete All Sessions</msg>
<status status="PASS" endtime="20171020 13:08:55.573" starttime="20171020 13:08:55.573"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:08:55.573">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:08:55.573" starttime="20171020 13:08:55.063"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:08:55.574">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:08:55.574" starttime="20171020 13:08:55.574"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:08:55.575">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171020 13:08:55.575">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171020 13:08:55.575">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20171020 13:08:55.576" starttime="20171020 13:08:55.575"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:08:55.576">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status status="PASS" endtime="20171020 13:08:55.576" starttime="20171020 13:08:55.063"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:08:55.577">${host_state} = Running</msg>
<status status="PASS" endtime="20171020 13:08:55.577" starttime="20171020 13:08:55.063"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status status="PASS" endtime="20171020 13:08:55.577" starttime="20171020 13:08:55.577"></status>
</kw>
<kw name="Is OS Booted" library="state_manager">
<doc>Check OS status.</doc>
<kw name="Get Host State Attribute" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>BootProgress</arg>
</arguments>
<assign>
<var>${boot_stage}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>${host_attribute}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:08:55.583">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171020 13:08:55.584" starttime="20171020 13:08:55.583"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:08:55.585">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171020 13:08:55.585" starttime="20171020 13:08:55.584"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:08:55.586">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171020 13:08:55.586" starttime="20171020 13:08:55.586"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:08:55.587">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171020 13:08:55.587" starttime="20171020 13:08:55.586"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:08:55.821">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171020 13:08:55.821" starttime="20171020 13:08:55.588"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:08:55.821">${status} = PASS</msg>
<msg level="INFO" timestamp="20171020 13:08:55.821">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:08:55.821" starttime="20171020 13:08:55.587"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:08:55.822">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:08:55.822" starttime="20171020 13:08:55.822"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:08:55.823">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:08:55.823" starttime="20171020 13:08:55.822"></status>
</kw>
<status status="PASS" endtime="20171020 13:08:55.823" starttime="20171020 13:08:55.582"></status>
</kw>
<status status="PASS" endtime="20171020 13:08:55.823" starttime="20171020 13:08:55.582"></status>
</kw>
<status status="PASS" endtime="20171020 13:08:55.823" starttime="20171020 13:08:55.581"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:08:55.824">${base_uri} = /xyz/openbmc_project/state/host0//attr/BootProgress</msg>
<status status="PASS" endtime="20171020 13:08:55.824" starttime="20171020 13:08:55.823"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:08:55.826">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status status="PASS" endtime="20171020 13:08:55.826" starttime="20171020 13:08:55.825"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:08:55.827">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status status="PASS" endtime="20171020 13:08:55.827" starttime="20171020 13:08:55.827"></status>
</kw>
<status status="PASS" endtime="20171020 13:08:55.827" starttime="20171020 13:08:55.826"></status>
</kw>
<status status="PASS" endtime="20171020 13:08:55.827" starttime="20171020 13:08:55.825"></status>
</kw>
<status status="PASS" endtime="20171020 13:08:55.827" starttime="20171020 13:08:55.824"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:08:55.918">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/BootProgress, headers=None json=None</msg>
<msg level="INFO" timestamp="20171020 13:08:55.918">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:08:55.918" starttime="20171020 13:08:55.828"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:08:55.920">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171020 13:08:55.920" starttime="20171020 13:08:55.919"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:08:55.921">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171020 13:08:55.921" starttime="20171020 13:08:55.921"></status>
</kw>
<status status="PASS" endtime="20171020 13:08:55.921" starttime="20171020 13:08:55.920"></status>
</kw>
<status status="PASS" endtime="20171020 13:08:55.921" starttime="20171020 13:08:55.919"></status>
</kw>
<status status="PASS" endtime="20171020 13:08:55.921" starttime="20171020 13:08:55.918"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171020 13:08:55.922">Delete All Sessions</msg>
<status status="PASS" endtime="20171020 13:08:55.922" starttime="20171020 13:08:55.921"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:08:55.922">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:08:55.922" starttime="20171020 13:08:55.580"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:08:55.923">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:08:55.923" starttime="20171020 13:08:55.922"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:08:55.923">To JSON using : content={
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171020 13:08:55.923">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171020 13:08:55.923">${content} = {u'data': u'xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20171020 13:08:55.923" starttime="20171020 13:08:55.923"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:08:55.924">${state} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart</msg>
<status status="PASS" endtime="20171020 13:08:55.924" starttime="20171020 13:08:55.579"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:08:55.924">${boot_stage} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart</msg>
<status status="PASS" endtime="20171020 13:08:55.924" starttime="20171020 13:08:55.578"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${OS_BOOT_START}</arg>
<arg>${boot_stage}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:08:55.924">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:08:55.925" starttime="20171020 13:08:55.924"></status>
</kw>
<kw name="Get Host State Attribute" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>OperatingSystemState</arg>
</arguments>
<assign>
<var>${os_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>${host_attribute}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:08:55.931">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171020 13:08:55.932" starttime="20171020 13:08:55.931"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:08:55.932">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171020 13:08:55.932" starttime="20171020 13:08:55.932"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:08:55.933">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171020 13:08:55.933" starttime="20171020 13:08:55.933"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:08:55.934">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171020 13:08:55.934" starttime="20171020 13:08:55.933"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:08:56.215">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171020 13:08:56.215" starttime="20171020 13:08:55.934"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:08:56.215">${status} = PASS</msg>
<msg level="INFO" timestamp="20171020 13:08:56.215">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:08:56.215" starttime="20171020 13:08:55.934"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:08:56.216">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:08:56.216" starttime="20171020 13:08:56.215"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:08:56.216">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:08:56.216" starttime="20171020 13:08:56.216"></status>
</kw>
<status status="PASS" endtime="20171020 13:08:56.216" starttime="20171020 13:08:55.927"></status>
</kw>
<status status="PASS" endtime="20171020 13:08:56.217" starttime="20171020 13:08:55.927"></status>
</kw>
<status status="PASS" endtime="20171020 13:08:56.217" starttime="20171020 13:08:55.926"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:08:56.217">${base_uri} = /xyz/openbmc_project/state/host0//attr/OperatingSystemState</msg>
<status status="PASS" endtime="20171020 13:08:56.217" starttime="20171020 13:08:56.217"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:08:56.219">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/OperatingSystemState, method:Get, args:{}</msg>
<status status="PASS" endtime="20171020 13:08:56.220" starttime="20171020 13:08:56.219"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:08:56.220">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/OperatingSystemState, method:Get, args:{}</msg>
<status status="PASS" endtime="20171020 13:08:56.221" starttime="20171020 13:08:56.220"></status>
</kw>
<status status="PASS" endtime="20171020 13:08:56.221" starttime="20171020 13:08:56.220"></status>
</kw>
<status status="PASS" endtime="20171020 13:08:56.221" starttime="20171020 13:08:56.218"></status>
</kw>
<status status="PASS" endtime="20171020 13:08:56.221" starttime="20171020 13:08:56.218"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:08:56.312">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/OperatingSystemState, headers=None json=None</msg>
<msg level="INFO" timestamp="20171020 13:08:56.312">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:08:56.312" starttime="20171020 13:08:56.221"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:08:56.314">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171020 13:08:56.314" starttime="20171020 13:08:56.313"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:08:56.315">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171020 13:08:56.315" starttime="20171020 13:08:56.315"></status>
</kw>
<status status="PASS" endtime="20171020 13:08:56.315" starttime="20171020 13:08:56.314"></status>
</kw>
<status status="PASS" endtime="20171020 13:08:56.315" starttime="20171020 13:08:56.313"></status>
</kw>
<status status="PASS" endtime="20171020 13:08:56.315" starttime="20171020 13:08:56.312"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171020 13:08:56.316">Delete All Sessions</msg>
<status status="PASS" endtime="20171020 13:08:56.316" starttime="20171020 13:08:56.316"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:08:56.316">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:08:56.316" starttime="20171020 13:08:55.926"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:08:56.317">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:08:56.317" starttime="20171020 13:08:56.316"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:08:56.317">To JSON using : content={
  "data": "xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171020 13:08:56.317">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171020 13:08:56.317">${content} = {u'data': u'xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20171020 13:08:56.317" starttime="20171020 13:08:56.317"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:08:56.318">${state} = xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive</msg>
<status status="PASS" endtime="20171020 13:08:56.318" starttime="20171020 13:08:55.925"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:08:56.318">${os_state} = xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive</msg>
<status status="PASS" endtime="20171020 13:08:56.318" starttime="20171020 13:08:55.925"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${OS_BOOT_COMPLETE}</arg>
<arg>${os_state}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:08:56.319">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg level="FAIL" timestamp="20171020 13:08:56.319">xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.BootComplete != xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive</msg>
<status status="FAIL" endtime="20171020 13:08:56.319" starttime="20171020 13:08:56.318"></status>
</kw>
<status status="FAIL" endtime="20171020 13:08:56.319" starttime="20171020 13:08:55.578"></status>
</kw>
<status status="FAIL" endtime="20171020 13:08:56.319" starttime="20171020 13:08:54.789"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:09:06.324">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171020 13:09:06.325" starttime="20171020 13:09:06.324"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:09:06.325">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171020 13:09:06.325" starttime="20171020 13:09:06.325"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:09:06.326">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171020 13:09:06.326" starttime="20171020 13:09:06.326"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:09:06.327">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171020 13:09:06.327" starttime="20171020 13:09:06.326"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:09:06.623">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171020 13:09:06.623" starttime="20171020 13:09:06.327"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:09:06.624">${status} = PASS</msg>
<msg level="INFO" timestamp="20171020 13:09:06.624">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:09:06.624" starttime="20171020 13:09:06.327"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:09:06.624">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:09:06.624" starttime="20171020 13:09:06.624"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:09:06.625">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:09:06.625" starttime="20171020 13:09:06.625"></status>
</kw>
<status status="PASS" endtime="20171020 13:09:06.625" starttime="20171020 13:09:06.323"></status>
</kw>
<status status="PASS" endtime="20171020 13:09:06.625" starttime="20171020 13:09:06.323"></status>
</kw>
<status status="PASS" endtime="20171020 13:09:06.625" starttime="20171020 13:09:06.322"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:09:06.626">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" endtime="20171020 13:09:06.626" starttime="20171020 13:09:06.626"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:09:06.628">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" endtime="20171020 13:09:06.628" starttime="20171020 13:09:06.627"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:09:06.629">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" endtime="20171020 13:09:06.629" starttime="20171020 13:09:06.629"></status>
</kw>
<status status="PASS" endtime="20171020 13:09:06.629" starttime="20171020 13:09:06.628"></status>
</kw>
<status status="PASS" endtime="20171020 13:09:06.629" starttime="20171020 13:09:06.627"></status>
</kw>
<status status="PASS" endtime="20171020 13:09:06.630" starttime="20171020 13:09:06.626"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:09:06.693">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20171020 13:09:06.693">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:09:06.693" starttime="20171020 13:09:06.630"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:09:06.695">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171020 13:09:06.695" starttime="20171020 13:09:06.695"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:09:06.696">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171020 13:09:06.696" starttime="20171020 13:09:06.696"></status>
</kw>
<status status="PASS" endtime="20171020 13:09:06.696" starttime="20171020 13:09:06.695"></status>
</kw>
<status status="PASS" endtime="20171020 13:09:06.696" starttime="20171020 13:09:06.694"></status>
</kw>
<status status="PASS" endtime="20171020 13:09:06.696" starttime="20171020 13:09:06.694"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171020 13:09:06.697">Delete All Sessions</msg>
<status status="PASS" endtime="20171020 13:09:06.697" starttime="20171020 13:09:06.697"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:09:06.697">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:09:06.697" starttime="20171020 13:09:06.322"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:09:06.698">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:09:06.698" starttime="20171020 13:09:06.697"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:09:06.698">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171020 13:09:06.699">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171020 13:09:06.699">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20171020 13:09:06.699" starttime="20171020 13:09:06.698"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:09:06.699">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status status="PASS" endtime="20171020 13:09:06.699" starttime="20171020 13:09:06.321"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:09:06.699">${power_state} = On</msg>
<status status="PASS" endtime="20171020 13:09:06.699" starttime="20171020 13:09:06.321"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status status="PASS" endtime="20171020 13:09:06.700" starttime="20171020 13:09:06.700"></status>
</kw>
<status status="PASS" endtime="20171020 13:09:06.700" starttime="20171020 13:09:06.320"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:09:06.705">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171020 13:09:06.706" starttime="20171020 13:09:06.705"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:09:06.707">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171020 13:09:06.707" starttime="20171020 13:09:06.707"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:09:06.708">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171020 13:09:06.708" starttime="20171020 13:09:06.707"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:09:06.709">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171020 13:09:06.709" starttime="20171020 13:09:06.708"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:09:06.998">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171020 13:09:06.998" starttime="20171020 13:09:06.710"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:09:06.998">${status} = PASS</msg>
<msg level="INFO" timestamp="20171020 13:09:06.998">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:09:06.998" starttime="20171020 13:09:06.709"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:09:06.999">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:09:06.999" starttime="20171020 13:09:06.998"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:09:07.000">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:09:07.000" starttime="20171020 13:09:06.999"></status>
</kw>
<status status="PASS" endtime="20171020 13:09:07.000" starttime="20171020 13:09:06.704"></status>
</kw>
<status status="PASS" endtime="20171020 13:09:07.000" starttime="20171020 13:09:06.703"></status>
</kw>
<status status="PASS" endtime="20171020 13:09:07.000" starttime="20171020 13:09:06.702"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:09:07.001">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" endtime="20171020 13:09:07.001" starttime="20171020 13:09:07.000"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:09:07.003">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" endtime="20171020 13:09:07.003" starttime="20171020 13:09:07.002"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:09:07.004">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" endtime="20171020 13:09:07.004" starttime="20171020 13:09:07.003"></status>
</kw>
<status status="PASS" endtime="20171020 13:09:07.004" starttime="20171020 13:09:07.003"></status>
</kw>
<status status="PASS" endtime="20171020 13:09:07.004" starttime="20171020 13:09:07.001"></status>
</kw>
<status status="PASS" endtime="20171020 13:09:07.004" starttime="20171020 13:09:07.001"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:09:07.093">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20171020 13:09:07.094">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:09:07.094" starttime="20171020 13:09:07.004"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:09:07.095">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171020 13:09:07.095" starttime="20171020 13:09:07.095"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:09:07.096">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171020 13:09:07.096" starttime="20171020 13:09:07.096"></status>
</kw>
<status status="PASS" endtime="20171020 13:09:07.097" starttime="20171020 13:09:07.096"></status>
</kw>
<status status="PASS" endtime="20171020 13:09:07.097" starttime="20171020 13:09:07.094"></status>
</kw>
<status status="PASS" endtime="20171020 13:09:07.097" starttime="20171020 13:09:07.094"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171020 13:09:07.097">Delete All Sessions</msg>
<status status="PASS" endtime="20171020 13:09:07.097" starttime="20171020 13:09:07.097"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:09:07.097">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:09:07.097" starttime="20171020 13:09:06.702"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:09:07.098">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:09:07.098" starttime="20171020 13:09:07.098"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:09:07.099">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171020 13:09:07.099">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171020 13:09:07.099">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20171020 13:09:07.099" starttime="20171020 13:09:07.098"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:09:07.099">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status status="PASS" endtime="20171020 13:09:07.099" starttime="20171020 13:09:06.701"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:09:07.099">${host_state} = Running</msg>
<status status="PASS" endtime="20171020 13:09:07.100" starttime="20171020 13:09:06.700"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status status="PASS" endtime="20171020 13:09:07.100" starttime="20171020 13:09:07.100"></status>
</kw>
<kw name="Is OS Booted" library="state_manager">
<doc>Check OS status.</doc>
<kw name="Get Host State Attribute" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>BootProgress</arg>
</arguments>
<assign>
<var>${boot_stage}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>${host_attribute}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:09:07.104">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171020 13:09:07.105" starttime="20171020 13:09:07.104"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:09:07.105">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171020 13:09:07.105" starttime="20171020 13:09:07.105"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:09:07.106">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171020 13:09:07.106" starttime="20171020 13:09:07.106"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:09:07.107">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171020 13:09:07.107" starttime="20171020 13:09:07.106"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:09:07.285">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171020 13:09:07.285" starttime="20171020 13:09:07.107"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:09:07.285">${status} = PASS</msg>
<msg level="INFO" timestamp="20171020 13:09:07.285">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:09:07.285" starttime="20171020 13:09:07.107"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:09:07.286">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:09:07.286" starttime="20171020 13:09:07.285"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:09:07.286">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:09:07.286" starttime="20171020 13:09:07.286"></status>
</kw>
<status status="PASS" endtime="20171020 13:09:07.286" starttime="20171020 13:09:07.104"></status>
</kw>
<status status="PASS" endtime="20171020 13:09:07.287" starttime="20171020 13:09:07.103"></status>
</kw>
<status status="PASS" endtime="20171020 13:09:07.287" starttime="20171020 13:09:07.103"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:09:07.287">${base_uri} = /xyz/openbmc_project/state/host0//attr/BootProgress</msg>
<status status="PASS" endtime="20171020 13:09:07.287" starttime="20171020 13:09:07.287"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:09:07.290">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status status="PASS" endtime="20171020 13:09:07.290" starttime="20171020 13:09:07.289"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:09:07.291">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status status="PASS" endtime="20171020 13:09:07.291" starttime="20171020 13:09:07.291"></status>
</kw>
<status status="PASS" endtime="20171020 13:09:07.291" starttime="20171020 13:09:07.290"></status>
</kw>
<status status="PASS" endtime="20171020 13:09:07.292" starttime="20171020 13:09:07.288"></status>
</kw>
<status status="PASS" endtime="20171020 13:09:07.292" starttime="20171020 13:09:07.288"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:09:07.473">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/BootProgress, headers=None json=None</msg>
<msg level="INFO" timestamp="20171020 13:09:07.473">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:09:07.473" starttime="20171020 13:09:07.292"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:09:07.475">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171020 13:09:07.475" starttime="20171020 13:09:07.475"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:09:07.476">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171020 13:09:07.476" starttime="20171020 13:09:07.476"></status>
</kw>
<status status="PASS" endtime="20171020 13:09:07.476" starttime="20171020 13:09:07.475"></status>
</kw>
<status status="PASS" endtime="20171020 13:09:07.476" starttime="20171020 13:09:07.474"></status>
</kw>
<status status="PASS" endtime="20171020 13:09:07.476" starttime="20171020 13:09:07.474"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171020 13:09:07.477">Delete All Sessions</msg>
<status status="PASS" endtime="20171020 13:09:07.477" starttime="20171020 13:09:07.477"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:09:07.477">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:09:07.477" starttime="20171020 13:09:07.102"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:09:07.478">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:09:07.478" starttime="20171020 13:09:07.477"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:09:07.478">To JSON using : content={
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171020 13:09:07.478">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171020 13:09:07.479">${content} = {u'data': u'xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20171020 13:09:07.479" starttime="20171020 13:09:07.478"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:09:07.479">${state} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart</msg>
<status status="PASS" endtime="20171020 13:09:07.479" starttime="20171020 13:09:07.101"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:09:07.479">${boot_stage} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart</msg>
<status status="PASS" endtime="20171020 13:09:07.479" starttime="20171020 13:09:07.101"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${OS_BOOT_START}</arg>
<arg>${boot_stage}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:09:07.480">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:09:07.480" starttime="20171020 13:09:07.479"></status>
</kw>
<kw name="Get Host State Attribute" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>OperatingSystemState</arg>
</arguments>
<assign>
<var>${os_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>${host_attribute}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:09:07.484">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171020 13:09:07.484" starttime="20171020 13:09:07.483"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:09:07.485">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171020 13:09:07.485" starttime="20171020 13:09:07.484"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:09:07.485">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171020 13:09:07.485" starttime="20171020 13:09:07.485"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:09:07.486">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171020 13:09:07.486" starttime="20171020 13:09:07.486"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:09:07.717">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171020 13:09:07.717" starttime="20171020 13:09:07.487"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:09:07.717">${status} = PASS</msg>
<msg level="INFO" timestamp="20171020 13:09:07.717">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:09:07.717" starttime="20171020 13:09:07.486"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:09:07.718">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:09:07.718" starttime="20171020 13:09:07.718"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:09:07.719">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:09:07.719" starttime="20171020 13:09:07.719"></status>
</kw>
<status status="PASS" endtime="20171020 13:09:07.719" starttime="20171020 13:09:07.483"></status>
</kw>
<status status="PASS" endtime="20171020 13:09:07.719" starttime="20171020 13:09:07.482"></status>
</kw>
<status status="PASS" endtime="20171020 13:09:07.719" starttime="20171020 13:09:07.482"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:09:07.720">${base_uri} = /xyz/openbmc_project/state/host0//attr/OperatingSystemState</msg>
<status status="PASS" endtime="20171020 13:09:07.720" starttime="20171020 13:09:07.720"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:09:07.722">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/OperatingSystemState, method:Get, args:{}</msg>
<status status="PASS" endtime="20171020 13:09:07.722" starttime="20171020 13:09:07.721"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:09:07.723">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/OperatingSystemState, method:Get, args:{}</msg>
<status status="PASS" endtime="20171020 13:09:07.723" starttime="20171020 13:09:07.723"></status>
</kw>
<status status="PASS" endtime="20171020 13:09:07.723" starttime="20171020 13:09:07.722"></status>
</kw>
<status status="PASS" endtime="20171020 13:09:07.723" starttime="20171020 13:09:07.721"></status>
</kw>
<status status="PASS" endtime="20171020 13:09:07.723" starttime="20171020 13:09:07.720"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:09:07.934">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/OperatingSystemState, headers=None json=None</msg>
<msg level="INFO" timestamp="20171020 13:09:07.934">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:09:07.934" starttime="20171020 13:09:07.724"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:09:07.936">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171020 13:09:07.936" starttime="20171020 13:09:07.936"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:09:07.937">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171020 13:09:07.937" starttime="20171020 13:09:07.937"></status>
</kw>
<status status="PASS" endtime="20171020 13:09:07.937" starttime="20171020 13:09:07.936"></status>
</kw>
<status status="PASS" endtime="20171020 13:09:07.937" starttime="20171020 13:09:07.935"></status>
</kw>
<status status="PASS" endtime="20171020 13:09:07.938" starttime="20171020 13:09:07.935"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171020 13:09:07.938">Delete All Sessions</msg>
<status status="PASS" endtime="20171020 13:09:07.938" starttime="20171020 13:09:07.938"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:09:07.938">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:09:07.938" starttime="20171020 13:09:07.481"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:09:07.939">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:09:07.939" starttime="20171020 13:09:07.939"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:09:07.940">To JSON using : content={
  "data": "xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171020 13:09:07.940">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171020 13:09:07.940">${content} = {u'data': u'xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20171020 13:09:07.940" starttime="20171020 13:09:07.939"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:09:07.940">${state} = xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive</msg>
<status status="PASS" endtime="20171020 13:09:07.940" starttime="20171020 13:09:07.480"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:09:07.940">${os_state} = xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive</msg>
<status status="PASS" endtime="20171020 13:09:07.940" starttime="20171020 13:09:07.480"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${OS_BOOT_COMPLETE}</arg>
<arg>${os_state}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:09:07.941">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg level="FAIL" timestamp="20171020 13:09:07.941">xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.BootComplete != xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive</msg>
<status status="FAIL" endtime="20171020 13:09:07.941" starttime="20171020 13:09:07.941"></status>
</kw>
<status status="FAIL" endtime="20171020 13:09:07.941" starttime="20171020 13:09:07.100"></status>
</kw>
<status status="FAIL" endtime="20171020 13:09:07.941" starttime="20171020 13:09:06.320"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:09:17.947">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171020 13:09:17.947" starttime="20171020 13:09:17.947"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:09:17.948">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171020 13:09:17.948" starttime="20171020 13:09:17.948"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:09:17.949">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171020 13:09:17.949" starttime="20171020 13:09:17.948"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:09:17.949">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171020 13:09:17.949" starttime="20171020 13:09:17.949"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:09:18.220">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171020 13:09:18.220" starttime="20171020 13:09:17.950"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:09:18.220">${status} = PASS</msg>
<msg level="INFO" timestamp="20171020 13:09:18.220">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:09:18.221" starttime="20171020 13:09:17.950"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:09:18.221">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:09:18.221" starttime="20171020 13:09:18.221"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:09:18.222">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:09:18.222" starttime="20171020 13:09:18.222"></status>
</kw>
<status status="PASS" endtime="20171020 13:09:18.222" starttime="20171020 13:09:17.946"></status>
</kw>
<status status="PASS" endtime="20171020 13:09:18.222" starttime="20171020 13:09:17.945"></status>
</kw>
<status status="PASS" endtime="20171020 13:09:18.222" starttime="20171020 13:09:17.944"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:09:18.223">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" endtime="20171020 13:09:18.223" starttime="20171020 13:09:18.223"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:09:18.225">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" endtime="20171020 13:09:18.225" starttime="20171020 13:09:18.224"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:09:18.226">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" endtime="20171020 13:09:18.227" starttime="20171020 13:09:18.226"></status>
</kw>
<status status="PASS" endtime="20171020 13:09:18.227" starttime="20171020 13:09:18.225"></status>
</kw>
<status status="PASS" endtime="20171020 13:09:18.227" starttime="20171020 13:09:18.224"></status>
</kw>
<status status="PASS" endtime="20171020 13:09:18.227" starttime="20171020 13:09:18.223"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:09:18.291">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20171020 13:09:18.291">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:09:18.291" starttime="20171020 13:09:18.227"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:09:18.293">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171020 13:09:18.293" starttime="20171020 13:09:18.293"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:09:18.294">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171020 13:09:18.295" starttime="20171020 13:09:18.294"></status>
</kw>
<status status="PASS" endtime="20171020 13:09:18.295" starttime="20171020 13:09:18.293"></status>
</kw>
<status status="PASS" endtime="20171020 13:09:18.295" starttime="20171020 13:09:18.292"></status>
</kw>
<status status="PASS" endtime="20171020 13:09:18.295" starttime="20171020 13:09:18.292"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171020 13:09:18.295">Delete All Sessions</msg>
<status status="PASS" endtime="20171020 13:09:18.295" starttime="20171020 13:09:18.295"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:09:18.296">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:09:18.296" starttime="20171020 13:09:17.944"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:09:18.296">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:09:18.296" starttime="20171020 13:09:18.296"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:09:18.297">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171020 13:09:18.297">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171020 13:09:18.297">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20171020 13:09:18.297" starttime="20171020 13:09:18.297"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:09:18.297">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status status="PASS" endtime="20171020 13:09:18.297" starttime="20171020 13:09:17.943"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:09:18.298">${power_state} = On</msg>
<status status="PASS" endtime="20171020 13:09:18.298" starttime="20171020 13:09:17.943"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status status="PASS" endtime="20171020 13:09:18.298" starttime="20171020 13:09:18.298"></status>
</kw>
<status status="PASS" endtime="20171020 13:09:18.298" starttime="20171020 13:09:17.942"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:09:18.302">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171020 13:09:18.302" starttime="20171020 13:09:18.302"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:09:18.303">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171020 13:09:18.303" starttime="20171020 13:09:18.303"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:09:18.303">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171020 13:09:18.304" starttime="20171020 13:09:18.303"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:09:18.304">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171020 13:09:18.304" starttime="20171020 13:09:18.304"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:09:18.676">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171020 13:09:18.676" starttime="20171020 13:09:18.305"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:09:18.676">${status} = PASS</msg>
<msg level="INFO" timestamp="20171020 13:09:18.676">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:09:18.676" starttime="20171020 13:09:18.305"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:09:18.677">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:09:18.677" starttime="20171020 13:09:18.676"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:09:18.677">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:09:18.677" starttime="20171020 13:09:18.677"></status>
</kw>
<status status="PASS" endtime="20171020 13:09:18.677" starttime="20171020 13:09:18.301"></status>
</kw>
<status status="PASS" endtime="20171020 13:09:18.678" starttime="20171020 13:09:18.301"></status>
</kw>
<status status="PASS" endtime="20171020 13:09:18.678" starttime="20171020 13:09:18.300"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:09:18.678">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" endtime="20171020 13:09:18.678" starttime="20171020 13:09:18.678"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:09:18.681">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" endtime="20171020 13:09:18.681" starttime="20171020 13:09:18.680"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:09:18.682">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" endtime="20171020 13:09:18.682" starttime="20171020 13:09:18.681"></status>
</kw>
<status status="PASS" endtime="20171020 13:09:18.682" starttime="20171020 13:09:18.681"></status>
</kw>
<status status="PASS" endtime="20171020 13:09:18.682" starttime="20171020 13:09:18.679"></status>
</kw>
<status status="PASS" endtime="20171020 13:09:18.682" starttime="20171020 13:09:18.679"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:09:18.929">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20171020 13:09:18.929">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:09:18.929" starttime="20171020 13:09:18.683"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:09:18.931">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171020 13:09:18.931" starttime="20171020 13:09:18.931"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:09:18.932">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171020 13:09:18.932" starttime="20171020 13:09:18.932"></status>
</kw>
<status status="PASS" endtime="20171020 13:09:18.932" starttime="20171020 13:09:18.931"></status>
</kw>
<status status="PASS" endtime="20171020 13:09:18.932" starttime="20171020 13:09:18.930"></status>
</kw>
<status status="PASS" endtime="20171020 13:09:18.932" starttime="20171020 13:09:18.930"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171020 13:09:18.933">Delete All Sessions</msg>
<status status="PASS" endtime="20171020 13:09:18.933" starttime="20171020 13:09:18.933"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:09:18.933">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:09:18.933" starttime="20171020 13:09:18.299"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:09:18.934">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:09:18.934" starttime="20171020 13:09:18.933"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:09:18.934">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171020 13:09:18.934">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171020 13:09:18.935">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20171020 13:09:18.935" starttime="20171020 13:09:18.934"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:09:18.935">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status status="PASS" endtime="20171020 13:09:18.935" starttime="20171020 13:09:18.299"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:09:18.935">${host_state} = Running</msg>
<status status="PASS" endtime="20171020 13:09:18.935" starttime="20171020 13:09:18.299"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status status="PASS" endtime="20171020 13:09:18.936" starttime="20171020 13:09:18.935"></status>
</kw>
<kw name="Is OS Booted" library="state_manager">
<doc>Check OS status.</doc>
<kw name="Get Host State Attribute" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>BootProgress</arg>
</arguments>
<assign>
<var>${boot_stage}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>${host_attribute}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:09:18.940">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171020 13:09:18.940" starttime="20171020 13:09:18.939"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:09:18.941">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171020 13:09:18.941" starttime="20171020 13:09:18.940"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:09:18.941">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171020 13:09:18.941" starttime="20171020 13:09:18.941"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:09:18.942">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171020 13:09:18.942" starttime="20171020 13:09:18.942"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:09:19.452">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171020 13:09:19.453" starttime="20171020 13:09:18.943"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:09:19.453">${status} = PASS</msg>
<msg level="INFO" timestamp="20171020 13:09:19.453">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:09:19.453" starttime="20171020 13:09:18.942"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:09:19.453">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:09:19.454" starttime="20171020 13:09:19.453"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:09:19.454">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:09:19.454" starttime="20171020 13:09:19.454"></status>
</kw>
<status status="PASS" endtime="20171020 13:09:19.454" starttime="20171020 13:09:18.939"></status>
</kw>
<status status="PASS" endtime="20171020 13:09:19.454" starttime="20171020 13:09:18.939"></status>
</kw>
<status status="PASS" endtime="20171020 13:09:19.455" starttime="20171020 13:09:18.938"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:09:19.455">${base_uri} = /xyz/openbmc_project/state/host0//attr/BootProgress</msg>
<status status="PASS" endtime="20171020 13:09:19.455" starttime="20171020 13:09:19.455"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:09:19.457">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status status="PASS" endtime="20171020 13:09:19.457" starttime="20171020 13:09:19.457"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:09:19.458">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status status="PASS" endtime="20171020 13:09:19.459" starttime="20171020 13:09:19.458"></status>
</kw>
<status status="PASS" endtime="20171020 13:09:19.459" starttime="20171020 13:09:19.458"></status>
</kw>
<status status="PASS" endtime="20171020 13:09:19.459" starttime="20171020 13:09:19.456"></status>
</kw>
<status status="PASS" endtime="20171020 13:09:19.459" starttime="20171020 13:09:19.456"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:09:19.588">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/BootProgress, headers=None json=None</msg>
<msg level="INFO" timestamp="20171020 13:09:19.589">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:09:19.589" starttime="20171020 13:09:19.459"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:09:19.590">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171020 13:09:19.590" starttime="20171020 13:09:19.590"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:09:19.591">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171020 13:09:19.591" starttime="20171020 13:09:19.591"></status>
</kw>
<status status="PASS" endtime="20171020 13:09:19.592" starttime="20171020 13:09:19.591"></status>
</kw>
<status status="PASS" endtime="20171020 13:09:19.592" starttime="20171020 13:09:19.589"></status>
</kw>
<status status="PASS" endtime="20171020 13:09:19.592" starttime="20171020 13:09:19.589"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171020 13:09:19.592">Delete All Sessions</msg>
<status status="PASS" endtime="20171020 13:09:19.592" starttime="20171020 13:09:19.592"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:09:19.593">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:09:19.593" starttime="20171020 13:09:18.937"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:09:19.593">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:09:19.593" starttime="20171020 13:09:19.593"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:09:19.594">To JSON using : content={
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171020 13:09:19.594">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171020 13:09:19.594">${content} = {u'data': u'xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20171020 13:09:19.594" starttime="20171020 13:09:19.594"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:09:19.594">${state} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart</msg>
<status status="PASS" endtime="20171020 13:09:19.594" starttime="20171020 13:09:18.937"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:09:19.595">${boot_stage} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart</msg>
<status status="PASS" endtime="20171020 13:09:19.595" starttime="20171020 13:09:18.936"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${OS_BOOT_START}</arg>
<arg>${boot_stage}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:09:19.595">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:09:19.595" starttime="20171020 13:09:19.595"></status>
</kw>
<kw name="Get Host State Attribute" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>OperatingSystemState</arg>
</arguments>
<assign>
<var>${os_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>${host_attribute}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:09:19.599">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171020 13:09:19.600" starttime="20171020 13:09:19.599"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:09:19.600">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171020 13:09:19.600" starttime="20171020 13:09:19.600"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:09:19.601">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171020 13:09:19.601" starttime="20171020 13:09:19.601"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:09:19.602">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171020 13:09:19.602" starttime="20171020 13:09:19.601"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:09:19.825">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171020 13:09:19.825" starttime="20171020 13:09:19.602"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:09:19.825">${status} = PASS</msg>
<msg level="INFO" timestamp="20171020 13:09:19.825">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:09:19.825" starttime="20171020 13:09:19.602"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:09:19.826">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:09:19.826" starttime="20171020 13:09:19.826"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:09:19.827">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:09:19.827" starttime="20171020 13:09:19.826"></status>
</kw>
<status status="PASS" endtime="20171020 13:09:19.827" starttime="20171020 13:09:19.598"></status>
</kw>
<status status="PASS" endtime="20171020 13:09:19.827" starttime="20171020 13:09:19.598"></status>
</kw>
<status status="PASS" endtime="20171020 13:09:19.827" starttime="20171020 13:09:19.597"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:09:19.828">${base_uri} = /xyz/openbmc_project/state/host0//attr/OperatingSystemState</msg>
<status status="PASS" endtime="20171020 13:09:19.828" starttime="20171020 13:09:19.827"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:09:19.831">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/OperatingSystemState, method:Get, args:{}</msg>
<status status="PASS" endtime="20171020 13:09:19.831" starttime="20171020 13:09:19.830"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:09:19.832">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/OperatingSystemState, method:Get, args:{}</msg>
<status status="PASS" endtime="20171020 13:09:19.832" starttime="20171020 13:09:19.832"></status>
</kw>
<status status="PASS" endtime="20171020 13:09:19.833" starttime="20171020 13:09:19.831"></status>
</kw>
<status status="PASS" endtime="20171020 13:09:19.833" starttime="20171020 13:09:19.829"></status>
</kw>
<status status="PASS" endtime="20171020 13:09:19.833" starttime="20171020 13:09:19.828"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:09:20.179">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/OperatingSystemState, headers=None json=None</msg>
<msg level="INFO" timestamp="20171020 13:09:20.179">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:09:20.179" starttime="20171020 13:09:19.833"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:09:20.181">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171020 13:09:20.181" starttime="20171020 13:09:20.180"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:09:20.185">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171020 13:09:20.185" starttime="20171020 13:09:20.185"></status>
</kw>
<status status="PASS" endtime="20171020 13:09:20.185" starttime="20171020 13:09:20.181"></status>
</kw>
<status status="PASS" endtime="20171020 13:09:20.185" starttime="20171020 13:09:20.180"></status>
</kw>
<status status="PASS" endtime="20171020 13:09:20.185" starttime="20171020 13:09:20.179"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171020 13:09:20.186">Delete All Sessions</msg>
<status status="PASS" endtime="20171020 13:09:20.186" starttime="20171020 13:09:20.186"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:09:20.186">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:09:20.186" starttime="20171020 13:09:19.596"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:09:20.187">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:09:20.187" starttime="20171020 13:09:20.186"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:09:20.187">To JSON using : content={
  "data": "xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171020 13:09:20.188">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171020 13:09:20.188">${content} = {u'data': u'xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20171020 13:09:20.188" starttime="20171020 13:09:20.187"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:09:20.188">${state} = xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive</msg>
<status status="PASS" endtime="20171020 13:09:20.188" starttime="20171020 13:09:19.596"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:09:20.188">${os_state} = xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive</msg>
<status status="PASS" endtime="20171020 13:09:20.188" starttime="20171020 13:09:19.595"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${OS_BOOT_COMPLETE}</arg>
<arg>${os_state}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:09:20.189">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg level="FAIL" timestamp="20171020 13:09:20.189">xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.BootComplete != xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive</msg>
<status status="FAIL" endtime="20171020 13:09:20.189" starttime="20171020 13:09:20.189"></status>
</kw>
<status status="FAIL" endtime="20171020 13:09:20.189" starttime="20171020 13:09:18.936"></status>
</kw>
<status status="FAIL" endtime="20171020 13:09:20.189" starttime="20171020 13:09:17.942"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:09:30.194">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171020 13:09:30.195" starttime="20171020 13:09:30.194"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:09:30.195">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171020 13:09:30.195" starttime="20171020 13:09:30.195"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:09:30.196">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171020 13:09:30.196" starttime="20171020 13:09:30.196"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:09:30.197">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171020 13:09:30.197" starttime="20171020 13:09:30.196"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:09:30.540">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171020 13:09:30.540" starttime="20171020 13:09:30.197"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:09:30.540">${status} = PASS</msg>
<msg level="INFO" timestamp="20171020 13:09:30.540">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:09:30.540" starttime="20171020 13:09:30.197"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:09:30.541">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:09:30.541" starttime="20171020 13:09:30.540"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:09:30.541">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:09:30.542" starttime="20171020 13:09:30.541"></status>
</kw>
<status status="PASS" endtime="20171020 13:09:30.542" starttime="20171020 13:09:30.193"></status>
</kw>
<status status="PASS" endtime="20171020 13:09:30.542" starttime="20171020 13:09:30.193"></status>
</kw>
<status status="PASS" endtime="20171020 13:09:30.542" starttime="20171020 13:09:30.192"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:09:30.542">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" endtime="20171020 13:09:30.542" starttime="20171020 13:09:30.542"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:09:30.544">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" endtime="20171020 13:09:30.545" starttime="20171020 13:09:30.544"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:09:30.545">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" endtime="20171020 13:09:30.546" starttime="20171020 13:09:30.545"></status>
</kw>
<status status="PASS" endtime="20171020 13:09:30.546" starttime="20171020 13:09:30.545"></status>
</kw>
<status status="PASS" endtime="20171020 13:09:30.546" starttime="20171020 13:09:30.543"></status>
</kw>
<status status="PASS" endtime="20171020 13:09:30.546" starttime="20171020 13:09:30.543"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:09:30.610">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20171020 13:09:30.610">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:09:30.611" starttime="20171020 13:09:30.546"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:09:30.612">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171020 13:09:30.612" starttime="20171020 13:09:30.612"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:09:30.613">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171020 13:09:30.613" starttime="20171020 13:09:30.613"></status>
</kw>
<status status="PASS" endtime="20171020 13:09:30.613" starttime="20171020 13:09:30.612"></status>
</kw>
<status status="PASS" endtime="20171020 13:09:30.614" starttime="20171020 13:09:30.611"></status>
</kw>
<status status="PASS" endtime="20171020 13:09:30.614" starttime="20171020 13:09:30.611"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171020 13:09:30.614">Delete All Sessions</msg>
<status status="PASS" endtime="20171020 13:09:30.614" starttime="20171020 13:09:30.614"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:09:30.614">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:09:30.614" starttime="20171020 13:09:30.192"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:09:30.615">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:09:30.615" starttime="20171020 13:09:30.615"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:09:30.616">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171020 13:09:30.616">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171020 13:09:30.616">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20171020 13:09:30.616" starttime="20171020 13:09:30.615"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:09:30.616">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status status="PASS" endtime="20171020 13:09:30.616" starttime="20171020 13:09:30.191"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:09:30.616">${power_state} = On</msg>
<status status="PASS" endtime="20171020 13:09:30.616" starttime="20171020 13:09:30.191"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status status="PASS" endtime="20171020 13:09:30.617" starttime="20171020 13:09:30.617"></status>
</kw>
<status status="PASS" endtime="20171020 13:09:30.617" starttime="20171020 13:09:30.190"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:09:30.621">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171020 13:09:30.622" starttime="20171020 13:09:30.620"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:09:30.622">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171020 13:09:30.622" starttime="20171020 13:09:30.622"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:09:30.623">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171020 13:09:30.623" starttime="20171020 13:09:30.623"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:09:30.624">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171020 13:09:30.624" starttime="20171020 13:09:30.624"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:09:30.973">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171020 13:09:30.973" starttime="20171020 13:09:30.625"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:09:30.973">${status} = PASS</msg>
<msg level="INFO" timestamp="20171020 13:09:30.973">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:09:30.974" starttime="20171020 13:09:30.625"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:09:30.974">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:09:30.974" starttime="20171020 13:09:30.974"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:09:30.975">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:09:30.975" starttime="20171020 13:09:30.974"></status>
</kw>
<status status="PASS" endtime="20171020 13:09:30.975" starttime="20171020 13:09:30.620"></status>
</kw>
<status status="PASS" endtime="20171020 13:09:30.975" starttime="20171020 13:09:30.619"></status>
</kw>
<status status="PASS" endtime="20171020 13:09:30.975" starttime="20171020 13:09:30.619"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:09:30.976">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" endtime="20171020 13:09:30.976" starttime="20171020 13:09:30.975"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:09:30.978">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" endtime="20171020 13:09:30.978" starttime="20171020 13:09:30.977"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:09:30.979">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" endtime="20171020 13:09:30.979" starttime="20171020 13:09:30.979"></status>
</kw>
<status status="PASS" endtime="20171020 13:09:30.979" starttime="20171020 13:09:30.978"></status>
</kw>
<status status="PASS" endtime="20171020 13:09:30.979" starttime="20171020 13:09:30.977"></status>
</kw>
<status status="PASS" endtime="20171020 13:09:30.980" starttime="20171020 13:09:30.976"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:09:31.083">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20171020 13:09:31.084">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:09:31.084" starttime="20171020 13:09:30.980"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:09:31.086">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171020 13:09:31.086" starttime="20171020 13:09:31.085"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:09:31.086">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171020 13:09:31.087" starttime="20171020 13:09:31.086"></status>
</kw>
<status status="PASS" endtime="20171020 13:09:31.087" starttime="20171020 13:09:31.086"></status>
</kw>
<status status="PASS" endtime="20171020 13:09:31.087" starttime="20171020 13:09:31.085"></status>
</kw>
<status status="PASS" endtime="20171020 13:09:31.087" starttime="20171020 13:09:31.084"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171020 13:09:31.087">Delete All Sessions</msg>
<status status="PASS" endtime="20171020 13:09:31.087" starttime="20171020 13:09:31.087"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:09:31.088">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:09:31.088" starttime="20171020 13:09:30.618"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:09:31.088">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:09:31.089" starttime="20171020 13:09:31.088"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:09:31.089">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171020 13:09:31.089">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171020 13:09:31.089">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20171020 13:09:31.089" starttime="20171020 13:09:31.089"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:09:31.090">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status status="PASS" endtime="20171020 13:09:31.090" starttime="20171020 13:09:30.618"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:09:31.090">${host_state} = Running</msg>
<status status="PASS" endtime="20171020 13:09:31.090" starttime="20171020 13:09:30.617"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status status="PASS" endtime="20171020 13:09:31.091" starttime="20171020 13:09:31.090"></status>
</kw>
<kw name="Is OS Booted" library="state_manager">
<doc>Check OS status.</doc>
<kw name="Get Host State Attribute" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>BootProgress</arg>
</arguments>
<assign>
<var>${boot_stage}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>${host_attribute}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:09:31.095">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171020 13:09:31.095" starttime="20171020 13:09:31.095"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:09:31.096">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171020 13:09:31.096" starttime="20171020 13:09:31.095"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:09:31.096">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171020 13:09:31.096" starttime="20171020 13:09:31.096"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:09:31.097">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171020 13:09:31.097" starttime="20171020 13:09:31.097"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:09:31.321">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171020 13:09:31.321" starttime="20171020 13:09:31.098"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:09:31.321">${status} = PASS</msg>
<msg level="INFO" timestamp="20171020 13:09:31.321">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:09:31.321" starttime="20171020 13:09:31.097"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:09:31.322">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:09:31.322" starttime="20171020 13:09:31.321"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:09:31.322">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:09:31.323" starttime="20171020 13:09:31.322"></status>
</kw>
<status status="PASS" endtime="20171020 13:09:31.323" starttime="20171020 13:09:31.094"></status>
</kw>
<status status="PASS" endtime="20171020 13:09:31.323" starttime="20171020 13:09:31.094"></status>
</kw>
<status status="PASS" endtime="20171020 13:09:31.323" starttime="20171020 13:09:31.093"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:09:31.323">${base_uri} = /xyz/openbmc_project/state/host0//attr/BootProgress</msg>
<status status="PASS" endtime="20171020 13:09:31.323" starttime="20171020 13:09:31.323"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:09:31.325">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status status="PASS" endtime="20171020 13:09:31.326" starttime="20171020 13:09:31.325"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:09:31.326">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status status="PASS" endtime="20171020 13:09:31.327" starttime="20171020 13:09:31.326"></status>
</kw>
<status status="PASS" endtime="20171020 13:09:31.327" starttime="20171020 13:09:31.326"></status>
</kw>
<status status="PASS" endtime="20171020 13:09:31.327" starttime="20171020 13:09:31.324"></status>
</kw>
<status status="PASS" endtime="20171020 13:09:31.327" starttime="20171020 13:09:31.324"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:09:31.417">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/BootProgress, headers=None json=None</msg>
<msg level="INFO" timestamp="20171020 13:09:31.418">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:09:31.418" starttime="20171020 13:09:31.327"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:09:31.419">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171020 13:09:31.420" starttime="20171020 13:09:31.419"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:09:31.420">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171020 13:09:31.421" starttime="20171020 13:09:31.420"></status>
</kw>
<status status="PASS" endtime="20171020 13:09:31.421" starttime="20171020 13:09:31.420"></status>
</kw>
<status status="PASS" endtime="20171020 13:09:31.421" starttime="20171020 13:09:31.418"></status>
</kw>
<status status="PASS" endtime="20171020 13:09:31.421" starttime="20171020 13:09:31.418"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171020 13:09:31.421">Delete All Sessions</msg>
<status status="PASS" endtime="20171020 13:09:31.421" starttime="20171020 13:09:31.421"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:09:31.421">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:09:31.422" starttime="20171020 13:09:31.092"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:09:31.422">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:09:31.422" starttime="20171020 13:09:31.422"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:09:31.423">To JSON using : content={
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171020 13:09:31.423">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171020 13:09:31.423">${content} = {u'data': u'xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20171020 13:09:31.423" starttime="20171020 13:09:31.422"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:09:31.423">${state} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart</msg>
<status status="PASS" endtime="20171020 13:09:31.423" starttime="20171020 13:09:31.091"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:09:31.424">${boot_stage} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart</msg>
<status status="PASS" endtime="20171020 13:09:31.424" starttime="20171020 13:09:31.091"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${OS_BOOT_START}</arg>
<arg>${boot_stage}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:09:31.424">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:09:31.424" starttime="20171020 13:09:31.424"></status>
</kw>
<kw name="Get Host State Attribute" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>OperatingSystemState</arg>
</arguments>
<assign>
<var>${os_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>${host_attribute}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:09:31.428">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171020 13:09:31.428" starttime="20171020 13:09:31.427"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:09:31.429">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171020 13:09:31.429" starttime="20171020 13:09:31.429"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:09:31.430">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171020 13:09:31.430" starttime="20171020 13:09:31.430"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:09:31.431">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171020 13:09:31.431" starttime="20171020 13:09:31.431"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:09:31.708">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171020 13:09:31.708" starttime="20171020 13:09:31.432"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:09:31.708">${status} = PASS</msg>
<msg level="INFO" timestamp="20171020 13:09:31.708">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:09:31.708" starttime="20171020 13:09:31.432"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:09:31.709">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:09:31.709" starttime="20171020 13:09:31.709"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:09:31.710">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:09:31.710" starttime="20171020 13:09:31.709"></status>
</kw>
<status status="PASS" endtime="20171020 13:09:31.710" starttime="20171020 13:09:31.427"></status>
</kw>
<status status="PASS" endtime="20171020 13:09:31.710" starttime="20171020 13:09:31.427"></status>
</kw>
<status status="PASS" endtime="20171020 13:09:31.710" starttime="20171020 13:09:31.426"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:09:31.711">${base_uri} = /xyz/openbmc_project/state/host0//attr/OperatingSystemState</msg>
<status status="PASS" endtime="20171020 13:09:31.711" starttime="20171020 13:09:31.710"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:09:31.713">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/OperatingSystemState, method:Get, args:{}</msg>
<status status="PASS" endtime="20171020 13:09:31.713" starttime="20171020 13:09:31.712"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:09:31.714">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/OperatingSystemState, method:Get, args:{}</msg>
<status status="PASS" endtime="20171020 13:09:31.714" starttime="20171020 13:09:31.714"></status>
</kw>
<status status="PASS" endtime="20171020 13:09:31.714" starttime="20171020 13:09:31.713"></status>
</kw>
<status status="PASS" endtime="20171020 13:09:31.714" starttime="20171020 13:09:31.711"></status>
</kw>
<status status="PASS" endtime="20171020 13:09:31.714" starttime="20171020 13:09:31.711"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:09:31.856">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/OperatingSystemState, headers=None json=None</msg>
<msg level="INFO" timestamp="20171020 13:09:31.857">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:09:31.857" starttime="20171020 13:09:31.714"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:09:31.858">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171020 13:09:31.858" starttime="20171020 13:09:31.858"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:09:31.859">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171020 13:09:31.860" starttime="20171020 13:09:31.859"></status>
</kw>
<status status="PASS" endtime="20171020 13:09:31.860" starttime="20171020 13:09:31.859"></status>
</kw>
<status status="PASS" endtime="20171020 13:09:31.860" starttime="20171020 13:09:31.857"></status>
</kw>
<status status="PASS" endtime="20171020 13:09:31.860" starttime="20171020 13:09:31.857"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171020 13:09:31.860">Delete All Sessions</msg>
<status status="PASS" endtime="20171020 13:09:31.860" starttime="20171020 13:09:31.860"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:09:31.861">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:09:31.861" starttime="20171020 13:09:31.425"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:09:31.861">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:09:31.861" starttime="20171020 13:09:31.861"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:09:31.862">To JSON using : content={
  "data": "xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171020 13:09:31.862">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171020 13:09:31.862">${content} = {u'data': u'xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20171020 13:09:31.862" starttime="20171020 13:09:31.861"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:09:31.862">${state} = xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive</msg>
<status status="PASS" endtime="20171020 13:09:31.862" starttime="20171020 13:09:31.425"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:09:31.862">${os_state} = xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive</msg>
<status status="PASS" endtime="20171020 13:09:31.862" starttime="20171020 13:09:31.424"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${OS_BOOT_COMPLETE}</arg>
<arg>${os_state}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:09:31.863">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg level="FAIL" timestamp="20171020 13:09:31.863">xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.BootComplete != xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive</msg>
<status status="FAIL" endtime="20171020 13:09:31.863" starttime="20171020 13:09:31.863"></status>
</kw>
<status status="FAIL" endtime="20171020 13:09:31.863" starttime="20171020 13:09:31.091"></status>
</kw>
<status status="FAIL" endtime="20171020 13:09:31.864" starttime="20171020 13:09:30.190"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:09:41.869">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171020 13:09:41.869" starttime="20171020 13:09:41.868"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:09:41.870">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171020 13:09:41.870" starttime="20171020 13:09:41.870"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:09:41.871">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171020 13:09:41.871" starttime="20171020 13:09:41.870"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:09:41.871">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171020 13:09:41.871" starttime="20171020 13:09:41.871"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:09:42.273">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171020 13:09:42.273" starttime="20171020 13:09:41.872"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:09:42.273">${status} = PASS</msg>
<msg level="INFO" timestamp="20171020 13:09:42.273">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:09:42.273" starttime="20171020 13:09:41.872"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:09:42.274">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:09:42.274" starttime="20171020 13:09:42.274"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:09:42.275">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:09:42.275" starttime="20171020 13:09:42.274"></status>
</kw>
<status status="PASS" endtime="20171020 13:09:42.275" starttime="20171020 13:09:41.867"></status>
</kw>
<status status="PASS" endtime="20171020 13:09:42.275" starttime="20171020 13:09:41.867"></status>
</kw>
<status status="PASS" endtime="20171020 13:09:42.275" starttime="20171020 13:09:41.866"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:09:42.276">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" endtime="20171020 13:09:42.276" starttime="20171020 13:09:42.275"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:09:42.278">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" endtime="20171020 13:09:42.278" starttime="20171020 13:09:42.277"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:09:42.279">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" endtime="20171020 13:09:42.279" starttime="20171020 13:09:42.279"></status>
</kw>
<status status="PASS" endtime="20171020 13:09:42.279" starttime="20171020 13:09:42.278"></status>
</kw>
<status status="PASS" endtime="20171020 13:09:42.279" starttime="20171020 13:09:42.276"></status>
</kw>
<status status="PASS" endtime="20171020 13:09:42.279" starttime="20171020 13:09:42.276"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:09:42.343">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20171020 13:09:42.343">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:09:42.343" starttime="20171020 13:09:42.279"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:09:42.345">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171020 13:09:42.345" starttime="20171020 13:09:42.344"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:09:42.346">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171020 13:09:42.346" starttime="20171020 13:09:42.346"></status>
</kw>
<status status="PASS" endtime="20171020 13:09:42.346" starttime="20171020 13:09:42.345"></status>
</kw>
<status status="PASS" endtime="20171020 13:09:42.347" starttime="20171020 13:09:42.344"></status>
</kw>
<status status="PASS" endtime="20171020 13:09:42.347" starttime="20171020 13:09:42.343"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171020 13:09:42.347">Delete All Sessions</msg>
<status status="PASS" endtime="20171020 13:09:42.347" starttime="20171020 13:09:42.347"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:09:42.348">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:09:42.348" starttime="20171020 13:09:41.866"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:09:42.348">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:09:42.348" starttime="20171020 13:09:42.348"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:09:42.349">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171020 13:09:42.349">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171020 13:09:42.349">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20171020 13:09:42.349" starttime="20171020 13:09:42.349"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:09:42.349">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status status="PASS" endtime="20171020 13:09:42.349" starttime="20171020 13:09:41.865"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:09:42.350">${power_state} = On</msg>
<status status="PASS" endtime="20171020 13:09:42.350" starttime="20171020 13:09:41.865"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status status="PASS" endtime="20171020 13:09:42.350" starttime="20171020 13:09:42.350"></status>
</kw>
<status status="PASS" endtime="20171020 13:09:42.350" starttime="20171020 13:09:41.865"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:09:42.354">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171020 13:09:42.354" starttime="20171020 13:09:42.354"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:09:42.355">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171020 13:09:42.355" starttime="20171020 13:09:42.355"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:09:42.356">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171020 13:09:42.356" starttime="20171020 13:09:42.355"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:09:42.356">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171020 13:09:42.356" starttime="20171020 13:09:42.356"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:09:42.596">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171020 13:09:42.596" starttime="20171020 13:09:42.357"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:09:42.596">${status} = PASS</msg>
<msg level="INFO" timestamp="20171020 13:09:42.596">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:09:42.596" starttime="20171020 13:09:42.357"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:09:42.597">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:09:42.597" starttime="20171020 13:09:42.597"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:09:42.598">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:09:42.598" starttime="20171020 13:09:42.597"></status>
</kw>
<status status="PASS" endtime="20171020 13:09:42.598" starttime="20171020 13:09:42.353"></status>
</kw>
<status status="PASS" endtime="20171020 13:09:42.598" starttime="20171020 13:09:42.353"></status>
</kw>
<status status="PASS" endtime="20171020 13:09:42.598" starttime="20171020 13:09:42.352"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:09:42.599">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" endtime="20171020 13:09:42.599" starttime="20171020 13:09:42.598"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:09:42.601">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" endtime="20171020 13:09:42.601" starttime="20171020 13:09:42.600"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:09:42.602">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" endtime="20171020 13:09:42.602" starttime="20171020 13:09:42.602"></status>
</kw>
<status status="PASS" endtime="20171020 13:09:42.603" starttime="20171020 13:09:42.602"></status>
</kw>
<status status="PASS" endtime="20171020 13:09:42.603" starttime="20171020 13:09:42.600"></status>
</kw>
<status status="PASS" endtime="20171020 13:09:42.603" starttime="20171020 13:09:42.599"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:09:42.692">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20171020 13:09:42.692">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:09:42.692" starttime="20171020 13:09:42.603"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:09:42.694">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171020 13:09:42.694" starttime="20171020 13:09:42.693"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:09:42.695">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171020 13:09:42.695" starttime="20171020 13:09:42.695"></status>
</kw>
<status status="PASS" endtime="20171020 13:09:42.695" starttime="20171020 13:09:42.694"></status>
</kw>
<status status="PASS" endtime="20171020 13:09:42.695" starttime="20171020 13:09:42.693"></status>
</kw>
<status status="PASS" endtime="20171020 13:09:42.695" starttime="20171020 13:09:42.692"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171020 13:09:42.696">Delete All Sessions</msg>
<status status="PASS" endtime="20171020 13:09:42.696" starttime="20171020 13:09:42.695"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:09:42.696">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:09:42.696" starttime="20171020 13:09:42.351"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:09:42.696">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:09:42.697" starttime="20171020 13:09:42.696"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:09:42.697">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171020 13:09:42.697">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171020 13:09:42.697">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20171020 13:09:42.697" starttime="20171020 13:09:42.697"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:09:42.698">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status status="PASS" endtime="20171020 13:09:42.698" starttime="20171020 13:09:42.351"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:09:42.698">${host_state} = Running</msg>
<status status="PASS" endtime="20171020 13:09:42.698" starttime="20171020 13:09:42.351"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status status="PASS" endtime="20171020 13:09:42.698" starttime="20171020 13:09:42.698"></status>
</kw>
<kw name="Is OS Booted" library="state_manager">
<doc>Check OS status.</doc>
<kw name="Get Host State Attribute" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>BootProgress</arg>
</arguments>
<assign>
<var>${boot_stage}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>${host_attribute}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:09:42.702">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171020 13:09:42.703" starttime="20171020 13:09:42.702"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:09:42.703">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171020 13:09:42.704" starttime="20171020 13:09:42.703"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:09:42.704">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171020 13:09:42.704" starttime="20171020 13:09:42.704"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:09:42.705">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171020 13:09:42.705" starttime="20171020 13:09:42.705"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:09:42.886">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171020 13:09:42.886" starttime="20171020 13:09:42.706"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:09:42.886">${status} = PASS</msg>
<msg level="INFO" timestamp="20171020 13:09:42.886">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:09:42.886" starttime="20171020 13:09:42.705"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:09:42.887">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:09:42.887" starttime="20171020 13:09:42.887"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:09:42.888">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:09:42.888" starttime="20171020 13:09:42.887"></status>
</kw>
<status status="PASS" endtime="20171020 13:09:42.888" starttime="20171020 13:09:42.702"></status>
</kw>
<status status="PASS" endtime="20171020 13:09:42.888" starttime="20171020 13:09:42.701"></status>
</kw>
<status status="PASS" endtime="20171020 13:09:42.888" starttime="20171020 13:09:42.701"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:09:42.889">${base_uri} = /xyz/openbmc_project/state/host0//attr/BootProgress</msg>
<status status="PASS" endtime="20171020 13:09:42.889" starttime="20171020 13:09:42.888"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:09:42.891">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status status="PASS" endtime="20171020 13:09:42.891" starttime="20171020 13:09:42.890"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:09:42.892">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status status="PASS" endtime="20171020 13:09:42.892" starttime="20171020 13:09:42.891"></status>
</kw>
<status status="PASS" endtime="20171020 13:09:42.892" starttime="20171020 13:09:42.891"></status>
</kw>
<status status="PASS" endtime="20171020 13:09:42.892" starttime="20171020 13:09:42.889"></status>
</kw>
<status status="PASS" endtime="20171020 13:09:42.892" starttime="20171020 13:09:42.889"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:09:43.133">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/BootProgress, headers=None json=None</msg>
<msg level="INFO" timestamp="20171020 13:09:43.133">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:09:43.133" starttime="20171020 13:09:42.892"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:09:43.135">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171020 13:09:43.135" starttime="20171020 13:09:43.134"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:09:43.136">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171020 13:09:43.136" starttime="20171020 13:09:43.135"></status>
</kw>
<status status="PASS" endtime="20171020 13:09:43.136" starttime="20171020 13:09:43.135"></status>
</kw>
<status status="PASS" endtime="20171020 13:09:43.136" starttime="20171020 13:09:43.134"></status>
</kw>
<status status="PASS" endtime="20171020 13:09:43.136" starttime="20171020 13:09:43.133"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171020 13:09:43.136">Delete All Sessions</msg>
<status status="PASS" endtime="20171020 13:09:43.137" starttime="20171020 13:09:43.136"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:09:43.137">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:09:43.137" starttime="20171020 13:09:42.700"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:09:43.137">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:09:43.138" starttime="20171020 13:09:43.137"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:09:43.138">To JSON using : content={
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171020 13:09:43.138">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171020 13:09:43.138">${content} = {u'data': u'xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20171020 13:09:43.138" starttime="20171020 13:09:43.138"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:09:43.139">${state} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart</msg>
<status status="PASS" endtime="20171020 13:09:43.139" starttime="20171020 13:09:42.699"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:09:43.139">${boot_stage} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart</msg>
<status status="PASS" endtime="20171020 13:09:43.139" starttime="20171020 13:09:42.699"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${OS_BOOT_START}</arg>
<arg>${boot_stage}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:09:43.139">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:09:43.139" starttime="20171020 13:09:43.139"></status>
</kw>
<kw name="Get Host State Attribute" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>OperatingSystemState</arg>
</arguments>
<assign>
<var>${os_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>${host_attribute}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:09:43.144">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171020 13:09:43.144" starttime="20171020 13:09:43.143"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:09:43.144">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171020 13:09:43.145" starttime="20171020 13:09:43.144"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:09:43.145">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171020 13:09:43.145" starttime="20171020 13:09:43.145"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:09:43.146">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171020 13:09:43.146" starttime="20171020 13:09:43.145"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:09:43.324">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171020 13:09:43.324" starttime="20171020 13:09:43.146"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:09:43.324">${status} = PASS</msg>
<msg level="INFO" timestamp="20171020 13:09:43.324">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:09:43.324" starttime="20171020 13:09:43.146"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:09:43.325">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:09:43.325" starttime="20171020 13:09:43.325"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:09:43.326">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:09:43.326" starttime="20171020 13:09:43.325"></status>
</kw>
<status status="PASS" endtime="20171020 13:09:43.326" starttime="20171020 13:09:43.142"></status>
</kw>
<status status="PASS" endtime="20171020 13:09:43.326" starttime="20171020 13:09:43.142"></status>
</kw>
<status status="PASS" endtime="20171020 13:09:43.326" starttime="20171020 13:09:43.141"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:09:43.327">${base_uri} = /xyz/openbmc_project/state/host0//attr/OperatingSystemState</msg>
<status status="PASS" endtime="20171020 13:09:43.327" starttime="20171020 13:09:43.326"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:09:43.329">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/OperatingSystemState, method:Get, args:{}</msg>
<status status="PASS" endtime="20171020 13:09:43.329" starttime="20171020 13:09:43.328"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:09:43.330">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/OperatingSystemState, method:Get, args:{}</msg>
<status status="PASS" endtime="20171020 13:09:43.330" starttime="20171020 13:09:43.330"></status>
</kw>
<status status="PASS" endtime="20171020 13:09:43.330" starttime="20171020 13:09:43.329"></status>
</kw>
<status status="PASS" endtime="20171020 13:09:43.330" starttime="20171020 13:09:43.327"></status>
</kw>
<status status="PASS" endtime="20171020 13:09:43.330" starttime="20171020 13:09:43.327"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:09:43.427">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/OperatingSystemState, headers=None json=None</msg>
<msg level="INFO" timestamp="20171020 13:09:43.428">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:09:43.428" starttime="20171020 13:09:43.330"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:09:43.430">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171020 13:09:43.430" starttime="20171020 13:09:43.429"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:09:43.431">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171020 13:09:43.431" starttime="20171020 13:09:43.431"></status>
</kw>
<status status="PASS" endtime="20171020 13:09:43.431" starttime="20171020 13:09:43.430"></status>
</kw>
<status status="PASS" endtime="20171020 13:09:43.431" starttime="20171020 13:09:43.428"></status>
</kw>
<status status="PASS" endtime="20171020 13:09:43.431" starttime="20171020 13:09:43.428"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171020 13:09:43.432">Delete All Sessions</msg>
<status status="PASS" endtime="20171020 13:09:43.432" starttime="20171020 13:09:43.431"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:09:43.432">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:09:43.432" starttime="20171020 13:09:43.141"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:09:43.433">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:09:43.433" starttime="20171020 13:09:43.432"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:09:43.433">To JSON using : content={
  "data": "xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171020 13:09:43.433">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171020 13:09:43.433">${content} = {u'data': u'xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20171020 13:09:43.433" starttime="20171020 13:09:43.433"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:09:43.434">${state} = xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive</msg>
<status status="PASS" endtime="20171020 13:09:43.434" starttime="20171020 13:09:43.140"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:09:43.434">${os_state} = xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive</msg>
<status status="PASS" endtime="20171020 13:09:43.434" starttime="20171020 13:09:43.140"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${OS_BOOT_COMPLETE}</arg>
<arg>${os_state}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:09:43.435">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg level="FAIL" timestamp="20171020 13:09:43.435">xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.BootComplete != xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive</msg>
<status status="FAIL" endtime="20171020 13:09:43.435" starttime="20171020 13:09:43.434"></status>
</kw>
<status status="FAIL" endtime="20171020 13:09:43.435" starttime="20171020 13:09:42.699"></status>
</kw>
<status status="FAIL" endtime="20171020 13:09:43.435" starttime="20171020 13:09:41.864"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:09:53.440">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171020 13:09:53.441" starttime="20171020 13:09:53.440"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:09:53.441">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171020 13:09:53.441" starttime="20171020 13:09:53.441"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:09:53.442">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171020 13:09:53.442" starttime="20171020 13:09:53.442"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:09:53.443">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171020 13:09:53.443" starttime="20171020 13:09:53.442"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:09:53.701">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171020 13:09:53.701" starttime="20171020 13:09:53.443"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:09:53.701">${status} = PASS</msg>
<msg level="INFO" timestamp="20171020 13:09:53.702">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:09:53.702" starttime="20171020 13:09:53.443"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:09:53.702">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:09:53.702" starttime="20171020 13:09:53.702"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:09:53.703">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:09:53.703" starttime="20171020 13:09:53.703"></status>
</kw>
<status status="PASS" endtime="20171020 13:09:53.703" starttime="20171020 13:09:53.439"></status>
</kw>
<status status="PASS" endtime="20171020 13:09:53.703" starttime="20171020 13:09:53.439"></status>
</kw>
<status status="PASS" endtime="20171020 13:09:53.703" starttime="20171020 13:09:53.438"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:09:53.704">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" endtime="20171020 13:09:53.704" starttime="20171020 13:09:53.704"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:09:53.706">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" endtime="20171020 13:09:53.706" starttime="20171020 13:09:53.705"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:09:53.707">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" endtime="20171020 13:09:53.707" starttime="20171020 13:09:53.707"></status>
</kw>
<status status="PASS" endtime="20171020 13:09:53.707" starttime="20171020 13:09:53.706"></status>
</kw>
<status status="PASS" endtime="20171020 13:09:53.707" starttime="20171020 13:09:53.705"></status>
</kw>
<status status="PASS" endtime="20171020 13:09:53.708" starttime="20171020 13:09:53.704"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:09:53.878">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20171020 13:09:53.878">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:09:53.878" starttime="20171020 13:09:53.708"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:09:53.880">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171020 13:09:53.880" starttime="20171020 13:09:53.880"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:09:53.881">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171020 13:09:53.882" starttime="20171020 13:09:53.881"></status>
</kw>
<status status="PASS" endtime="20171020 13:09:53.882" starttime="20171020 13:09:53.881"></status>
</kw>
<status status="PASS" endtime="20171020 13:09:53.882" starttime="20171020 13:09:53.879"></status>
</kw>
<status status="PASS" endtime="20171020 13:09:53.882" starttime="20171020 13:09:53.879"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171020 13:09:53.882">Delete All Sessions</msg>
<status status="PASS" endtime="20171020 13:09:53.882" starttime="20171020 13:09:53.882"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:09:53.883">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:09:53.883" starttime="20171020 13:09:53.438"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:09:53.883">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:09:53.883" starttime="20171020 13:09:53.883"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:09:53.884">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171020 13:09:53.884">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171020 13:09:53.884">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20171020 13:09:53.884" starttime="20171020 13:09:53.884"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:09:53.884">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status status="PASS" endtime="20171020 13:09:53.884" starttime="20171020 13:09:53.437"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:09:53.885">${power_state} = On</msg>
<status status="PASS" endtime="20171020 13:09:53.885" starttime="20171020 13:09:53.437"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status status="PASS" endtime="20171020 13:09:53.885" starttime="20171020 13:09:53.885"></status>
</kw>
<status status="PASS" endtime="20171020 13:09:53.885" starttime="20171020 13:09:53.436"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:09:53.889">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171020 13:09:53.924" starttime="20171020 13:09:53.889"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:09:53.925">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171020 13:09:53.925" starttime="20171020 13:09:53.925"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:09:53.926">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171020 13:09:53.926" starttime="20171020 13:09:53.925"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:09:53.926">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171020 13:09:53.926" starttime="20171020 13:09:53.926"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:09:54.324">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171020 13:09:54.324" starttime="20171020 13:09:53.927"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:09:54.324">${status} = PASS</msg>
<msg level="INFO" timestamp="20171020 13:09:54.324">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:09:54.325" starttime="20171020 13:09:53.927"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:09:54.325">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:09:54.325" starttime="20171020 13:09:54.325"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:09:54.326">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:09:54.326" starttime="20171020 13:09:54.325"></status>
</kw>
<status status="PASS" endtime="20171020 13:09:54.326" starttime="20171020 13:09:53.888"></status>
</kw>
<status status="PASS" endtime="20171020 13:09:54.326" starttime="20171020 13:09:53.888"></status>
</kw>
<status status="PASS" endtime="20171020 13:09:54.326" starttime="20171020 13:09:53.887"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:09:54.327">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" endtime="20171020 13:09:54.327" starttime="20171020 13:09:54.327"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:09:54.329">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" endtime="20171020 13:09:54.329" starttime="20171020 13:09:54.328"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:09:54.330">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" endtime="20171020 13:09:54.330" starttime="20171020 13:09:54.330"></status>
</kw>
<status status="PASS" endtime="20171020 13:09:54.330" starttime="20171020 13:09:54.329"></status>
</kw>
<status status="PASS" endtime="20171020 13:09:54.330" starttime="20171020 13:09:54.328"></status>
</kw>
<status status="PASS" endtime="20171020 13:09:54.330" starttime="20171020 13:09:54.327"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:09:54.442">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20171020 13:09:54.442">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:09:54.442" starttime="20171020 13:09:54.331"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:09:54.444">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171020 13:09:54.444" starttime="20171020 13:09:54.443"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:09:54.445">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171020 13:09:54.445" starttime="20171020 13:09:54.445"></status>
</kw>
<status status="PASS" endtime="20171020 13:09:54.445" starttime="20171020 13:09:54.444"></status>
</kw>
<status status="PASS" endtime="20171020 13:09:54.446" starttime="20171020 13:09:54.443"></status>
</kw>
<status status="PASS" endtime="20171020 13:09:54.446" starttime="20171020 13:09:54.442"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171020 13:09:54.446">Delete All Sessions</msg>
<status status="PASS" endtime="20171020 13:09:54.446" starttime="20171020 13:09:54.446"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:09:54.446">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:09:54.446" starttime="20171020 13:09:53.886"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:09:54.447">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:09:54.447" starttime="20171020 13:09:54.447"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:09:54.448">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171020 13:09:54.448">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171020 13:09:54.448">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20171020 13:09:54.448" starttime="20171020 13:09:54.447"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:09:54.448">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status status="PASS" endtime="20171020 13:09:54.448" starttime="20171020 13:09:53.886"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:09:54.448">${host_state} = Running</msg>
<status status="PASS" endtime="20171020 13:09:54.448" starttime="20171020 13:09:53.885"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status status="PASS" endtime="20171020 13:09:54.449" starttime="20171020 13:09:54.449"></status>
</kw>
<kw name="Is OS Booted" library="state_manager">
<doc>Check OS status.</doc>
<kw name="Get Host State Attribute" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>BootProgress</arg>
</arguments>
<assign>
<var>${boot_stage}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>${host_attribute}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:09:54.453">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171020 13:09:54.453" starttime="20171020 13:09:54.453"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:09:54.454">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171020 13:09:54.454" starttime="20171020 13:09:54.454"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:09:54.455">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171020 13:09:54.455" starttime="20171020 13:09:54.454"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:09:54.455">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171020 13:09:54.455" starttime="20171020 13:09:54.455"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:09:54.648">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171020 13:09:54.648" starttime="20171020 13:09:54.456"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:09:54.649">${status} = PASS</msg>
<msg level="INFO" timestamp="20171020 13:09:54.649">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:09:54.649" starttime="20171020 13:09:54.456"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:09:54.649">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:09:54.649" starttime="20171020 13:09:54.649"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:09:54.650">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:09:54.650" starttime="20171020 13:09:54.650"></status>
</kw>
<status status="PASS" endtime="20171020 13:09:54.650" starttime="20171020 13:09:54.452"></status>
</kw>
<status status="PASS" endtime="20171020 13:09:54.650" starttime="20171020 13:09:54.452"></status>
</kw>
<status status="PASS" endtime="20171020 13:09:54.650" starttime="20171020 13:09:54.451"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:09:54.651">${base_uri} = /xyz/openbmc_project/state/host0//attr/BootProgress</msg>
<status status="PASS" endtime="20171020 13:09:54.651" starttime="20171020 13:09:54.651"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:09:54.653">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status status="PASS" endtime="20171020 13:09:54.653" starttime="20171020 13:09:54.652"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:09:54.654">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status status="PASS" endtime="20171020 13:09:54.654" starttime="20171020 13:09:54.654"></status>
</kw>
<status status="PASS" endtime="20171020 13:09:54.654" starttime="20171020 13:09:54.653"></status>
</kw>
<status status="PASS" endtime="20171020 13:09:54.654" starttime="20171020 13:09:54.652"></status>
</kw>
<status status="PASS" endtime="20171020 13:09:54.655" starttime="20171020 13:09:54.651"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:09:54.746">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/BootProgress, headers=None json=None</msg>
<msg level="INFO" timestamp="20171020 13:09:54.746">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:09:54.746" starttime="20171020 13:09:54.655"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:09:54.748">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171020 13:09:54.748" starttime="20171020 13:09:54.747"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:09:54.749">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171020 13:09:54.749" starttime="20171020 13:09:54.749"></status>
</kw>
<status status="PASS" endtime="20171020 13:09:54.749" starttime="20171020 13:09:54.748"></status>
</kw>
<status status="PASS" endtime="20171020 13:09:54.749" starttime="20171020 13:09:54.747"></status>
</kw>
<status status="PASS" endtime="20171020 13:09:54.749" starttime="20171020 13:09:54.747"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171020 13:09:54.750">Delete All Sessions</msg>
<status status="PASS" endtime="20171020 13:09:54.750" starttime="20171020 13:09:54.750"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:09:54.750">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:09:54.750" starttime="20171020 13:09:54.451"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:09:54.751">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:09:54.751" starttime="20171020 13:09:54.750"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:09:54.751">To JSON using : content={
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171020 13:09:54.751">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171020 13:09:54.752">${content} = {u'data': u'xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20171020 13:09:54.752" starttime="20171020 13:09:54.751"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:09:54.752">${state} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart</msg>
<status status="PASS" endtime="20171020 13:09:54.752" starttime="20171020 13:09:54.450"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:09:54.752">${boot_stage} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart</msg>
<status status="PASS" endtime="20171020 13:09:54.752" starttime="20171020 13:09:54.450"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${OS_BOOT_START}</arg>
<arg>${boot_stage}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:09:54.753">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:09:54.753" starttime="20171020 13:09:54.752"></status>
</kw>
<kw name="Get Host State Attribute" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>OperatingSystemState</arg>
</arguments>
<assign>
<var>${os_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>${host_attribute}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:09:54.757">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171020 13:09:54.757" starttime="20171020 13:09:54.756"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:09:54.758">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171020 13:09:54.758" starttime="20171020 13:09:54.757"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:09:54.758">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171020 13:09:54.758" starttime="20171020 13:09:54.758"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:09:54.759">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171020 13:09:54.759" starttime="20171020 13:09:54.759"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:09:55.049">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171020 13:09:55.049" starttime="20171020 13:09:54.760"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:09:55.050">${status} = PASS</msg>
<msg level="INFO" timestamp="20171020 13:09:55.050">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:09:55.050" starttime="20171020 13:09:54.759"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:09:55.050">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:09:55.050" starttime="20171020 13:09:55.050"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:09:55.051">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:09:55.051" starttime="20171020 13:09:55.051"></status>
</kw>
<status status="PASS" endtime="20171020 13:09:55.051" starttime="20171020 13:09:54.755"></status>
</kw>
<status status="PASS" endtime="20171020 13:09:55.051" starttime="20171020 13:09:54.755"></status>
</kw>
<status status="PASS" endtime="20171020 13:09:55.051" starttime="20171020 13:09:54.754"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:09:55.052">${base_uri} = /xyz/openbmc_project/state/host0//attr/OperatingSystemState</msg>
<status status="PASS" endtime="20171020 13:09:55.052" starttime="20171020 13:09:55.052"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:09:55.054">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/OperatingSystemState, method:Get, args:{}</msg>
<status status="PASS" endtime="20171020 13:09:55.054" starttime="20171020 13:09:55.053"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:09:55.055">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/OperatingSystemState, method:Get, args:{}</msg>
<status status="PASS" endtime="20171020 13:09:55.055" starttime="20171020 13:09:55.055"></status>
</kw>
<status status="PASS" endtime="20171020 13:09:55.055" starttime="20171020 13:09:55.054"></status>
</kw>
<status status="PASS" endtime="20171020 13:09:55.055" starttime="20171020 13:09:55.053"></status>
</kw>
<status status="PASS" endtime="20171020 13:09:55.055" starttime="20171020 13:09:55.052"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:09:55.146">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/OperatingSystemState, headers=None json=None</msg>
<msg level="INFO" timestamp="20171020 13:09:55.146">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:09:55.146" starttime="20171020 13:09:55.056"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:09:55.148">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171020 13:09:55.148" starttime="20171020 13:09:55.148"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:09:55.150">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171020 13:09:55.150" starttime="20171020 13:09:55.149"></status>
</kw>
<status status="PASS" endtime="20171020 13:09:55.150" starttime="20171020 13:09:55.148"></status>
</kw>
<status status="PASS" endtime="20171020 13:09:55.150" starttime="20171020 13:09:55.147"></status>
</kw>
<status status="PASS" endtime="20171020 13:09:55.150" starttime="20171020 13:09:55.147"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171020 13:09:55.150">Delete All Sessions</msg>
<status status="PASS" endtime="20171020 13:09:55.150" starttime="20171020 13:09:55.150"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:09:55.151">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:09:55.151" starttime="20171020 13:09:54.754"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:09:55.151">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:09:55.151" starttime="20171020 13:09:55.151"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:09:55.152">To JSON using : content={
  "data": "xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171020 13:09:55.152">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171020 13:09:55.152">${content} = {u'data': u'xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20171020 13:09:55.152" starttime="20171020 13:09:55.152"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:09:55.152">${state} = xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive</msg>
<status status="PASS" endtime="20171020 13:09:55.152" starttime="20171020 13:09:54.753"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:09:55.153">${os_state} = xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive</msg>
<status status="PASS" endtime="20171020 13:09:55.153" starttime="20171020 13:09:54.753"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${OS_BOOT_COMPLETE}</arg>
<arg>${os_state}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:09:55.153">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg level="FAIL" timestamp="20171020 13:09:55.153">xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.BootComplete != xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive</msg>
<status status="FAIL" endtime="20171020 13:09:55.154" starttime="20171020 13:09:55.153"></status>
</kw>
<status status="FAIL" endtime="20171020 13:09:55.154" starttime="20171020 13:09:54.449"></status>
</kw>
<status status="FAIL" endtime="20171020 13:09:55.154" starttime="20171020 13:09:53.436"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:10:05.159">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171020 13:10:05.159" starttime="20171020 13:10:05.158"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:10:05.160">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171020 13:10:05.160" starttime="20171020 13:10:05.159"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:10:05.160">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171020 13:10:05.160" starttime="20171020 13:10:05.160"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:10:05.161">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171020 13:10:05.161" starttime="20171020 13:10:05.161"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:10:05.422">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171020 13:10:05.422" starttime="20171020 13:10:05.162"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:10:05.422">${status} = PASS</msg>
<msg level="INFO" timestamp="20171020 13:10:05.422">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:10:05.422" starttime="20171020 13:10:05.161"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:10:05.423">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:10:05.423" starttime="20171020 13:10:05.423"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:10:05.424">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:10:05.424" starttime="20171020 13:10:05.423"></status>
</kw>
<status status="PASS" endtime="20171020 13:10:05.424" starttime="20171020 13:10:05.158"></status>
</kw>
<status status="PASS" endtime="20171020 13:10:05.424" starttime="20171020 13:10:05.157"></status>
</kw>
<status status="PASS" endtime="20171020 13:10:05.424" starttime="20171020 13:10:05.157"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:10:05.425">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" endtime="20171020 13:10:05.425" starttime="20171020 13:10:05.424"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:10:05.428">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" endtime="20171020 13:10:05.428" starttime="20171020 13:10:05.427"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:10:05.429">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" endtime="20171020 13:10:05.429" starttime="20171020 13:10:05.429"></status>
</kw>
<status status="PASS" endtime="20171020 13:10:05.429" starttime="20171020 13:10:05.428"></status>
</kw>
<status status="PASS" endtime="20171020 13:10:05.429" starttime="20171020 13:10:05.426"></status>
</kw>
<status status="PASS" endtime="20171020 13:10:05.429" starttime="20171020 13:10:05.425"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:10:05.569">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20171020 13:10:05.570">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:10:05.570" starttime="20171020 13:10:05.430"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:10:05.571">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171020 13:10:05.571" starttime="20171020 13:10:05.571"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:10:05.572">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171020 13:10:05.573" starttime="20171020 13:10:05.572"></status>
</kw>
<status status="PASS" endtime="20171020 13:10:05.573" starttime="20171020 13:10:05.572"></status>
</kw>
<status status="PASS" endtime="20171020 13:10:05.573" starttime="20171020 13:10:05.570"></status>
</kw>
<status status="PASS" endtime="20171020 13:10:05.573" starttime="20171020 13:10:05.570"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171020 13:10:05.573">Delete All Sessions</msg>
<status status="PASS" endtime="20171020 13:10:05.573" starttime="20171020 13:10:05.573"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:10:05.574">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:10:05.574" starttime="20171020 13:10:05.156"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:10:05.574">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:10:05.574" starttime="20171020 13:10:05.574"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:10:05.575">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171020 13:10:05.575">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171020 13:10:05.575">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20171020 13:10:05.575" starttime="20171020 13:10:05.574"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:10:05.575">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status status="PASS" endtime="20171020 13:10:05.575" starttime="20171020 13:10:05.156"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:10:05.576">${power_state} = On</msg>
<status status="PASS" endtime="20171020 13:10:05.576" starttime="20171020 13:10:05.155"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status status="PASS" endtime="20171020 13:10:05.576" starttime="20171020 13:10:05.576"></status>
</kw>
<status status="PASS" endtime="20171020 13:10:05.576" starttime="20171020 13:10:05.155"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:10:05.581">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171020 13:10:05.582" starttime="20171020 13:10:05.581"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:10:05.583">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171020 13:10:05.583" starttime="20171020 13:10:05.582"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:10:05.583">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171020 13:10:05.583" starttime="20171020 13:10:05.583"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:10:05.584">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171020 13:10:05.584" starttime="20171020 13:10:05.584"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:10:05.769">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171020 13:10:05.769" starttime="20171020 13:10:05.585"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:10:05.769">${status} = PASS</msg>
<msg level="INFO" timestamp="20171020 13:10:05.769">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:10:05.769" starttime="20171020 13:10:05.584"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:10:05.770">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:10:05.770" starttime="20171020 13:10:05.769"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:10:05.770">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:10:05.771" starttime="20171020 13:10:05.770"></status>
</kw>
<status status="PASS" endtime="20171020 13:10:05.771" starttime="20171020 13:10:05.580"></status>
</kw>
<status status="PASS" endtime="20171020 13:10:05.771" starttime="20171020 13:10:05.580"></status>
</kw>
<status status="PASS" endtime="20171020 13:10:05.771" starttime="20171020 13:10:05.579"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:10:05.771">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" endtime="20171020 13:10:05.771" starttime="20171020 13:10:05.771"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:10:05.773">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" endtime="20171020 13:10:05.774" starttime="20171020 13:10:05.773"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:10:05.774">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" endtime="20171020 13:10:05.775" starttime="20171020 13:10:05.774"></status>
</kw>
<status status="PASS" endtime="20171020 13:10:05.775" starttime="20171020 13:10:05.774"></status>
</kw>
<status status="PASS" endtime="20171020 13:10:05.775" starttime="20171020 13:10:05.772"></status>
</kw>
<status status="PASS" endtime="20171020 13:10:05.775" starttime="20171020 13:10:05.772"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:10:05.870">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20171020 13:10:05.870">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:10:05.870" starttime="20171020 13:10:05.775"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:10:05.872">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171020 13:10:05.872" starttime="20171020 13:10:05.871"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:10:05.873">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171020 13:10:05.873" starttime="20171020 13:10:05.872"></status>
</kw>
<status status="PASS" endtime="20171020 13:10:05.873" starttime="20171020 13:10:05.872"></status>
</kw>
<status status="PASS" endtime="20171020 13:10:05.873" starttime="20171020 13:10:05.871"></status>
</kw>
<status status="PASS" endtime="20171020 13:10:05.873" starttime="20171020 13:10:05.870"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171020 13:10:05.873">Delete All Sessions</msg>
<status status="PASS" endtime="20171020 13:10:05.873" starttime="20171020 13:10:05.873"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:10:05.874">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:10:05.874" starttime="20171020 13:10:05.578"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:10:05.874">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:10:05.874" starttime="20171020 13:10:05.874"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:10:05.875">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171020 13:10:05.875">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171020 13:10:05.875">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20171020 13:10:05.875" starttime="20171020 13:10:05.875"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:10:05.875">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status status="PASS" endtime="20171020 13:10:05.875" starttime="20171020 13:10:05.577"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:10:05.876">${host_state} = Running</msg>
<status status="PASS" endtime="20171020 13:10:05.876" starttime="20171020 13:10:05.577"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status status="PASS" endtime="20171020 13:10:05.876" starttime="20171020 13:10:05.876"></status>
</kw>
<kw name="Is OS Booted" library="state_manager">
<doc>Check OS status.</doc>
<kw name="Get Host State Attribute" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>BootProgress</arg>
</arguments>
<assign>
<var>${boot_stage}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>${host_attribute}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:10:05.881">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171020 13:10:05.882" starttime="20171020 13:10:05.881"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:10:05.883">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171020 13:10:05.883" starttime="20171020 13:10:05.882"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:10:05.884">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171020 13:10:05.884" starttime="20171020 13:10:05.883"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:10:05.885">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171020 13:10:05.885" starttime="20171020 13:10:05.884"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:10:06.241">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171020 13:10:06.241" starttime="20171020 13:10:05.886"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:10:06.241">${status} = PASS</msg>
<msg level="INFO" timestamp="20171020 13:10:06.242">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:10:06.242" starttime="20171020 13:10:05.885"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:10:06.242">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:10:06.242" starttime="20171020 13:10:06.242"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:10:06.243">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:10:06.243" starttime="20171020 13:10:06.243"></status>
</kw>
<status status="PASS" endtime="20171020 13:10:06.243" starttime="20171020 13:10:05.880"></status>
</kw>
<status status="PASS" endtime="20171020 13:10:06.243" starttime="20171020 13:10:05.880"></status>
</kw>
<status status="PASS" endtime="20171020 13:10:06.243" starttime="20171020 13:10:05.879"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:10:06.244">${base_uri} = /xyz/openbmc_project/state/host0//attr/BootProgress</msg>
<status status="PASS" endtime="20171020 13:10:06.244" starttime="20171020 13:10:06.244"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:10:06.246">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status status="PASS" endtime="20171020 13:10:06.246" starttime="20171020 13:10:06.245"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:10:06.247">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status status="PASS" endtime="20171020 13:10:06.248" starttime="20171020 13:10:06.247"></status>
</kw>
<status status="PASS" endtime="20171020 13:10:06.248" starttime="20171020 13:10:06.246"></status>
</kw>
<status status="PASS" endtime="20171020 13:10:06.248" starttime="20171020 13:10:06.245"></status>
</kw>
<status status="PASS" endtime="20171020 13:10:06.248" starttime="20171020 13:10:06.244"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:10:06.338">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/BootProgress, headers=None json=None</msg>
<msg level="INFO" timestamp="20171020 13:10:06.339">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:10:06.339" starttime="20171020 13:10:06.248"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:10:06.341">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171020 13:10:06.341" starttime="20171020 13:10:06.340"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:10:06.341">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171020 13:10:06.342" starttime="20171020 13:10:06.341"></status>
</kw>
<status status="PASS" endtime="20171020 13:10:06.342" starttime="20171020 13:10:06.341"></status>
</kw>
<status status="PASS" endtime="20171020 13:10:06.342" starttime="20171020 13:10:06.340"></status>
</kw>
<status status="PASS" endtime="20171020 13:10:06.342" starttime="20171020 13:10:06.339"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171020 13:10:06.342">Delete All Sessions</msg>
<status status="PASS" endtime="20171020 13:10:06.342" starttime="20171020 13:10:06.342"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:10:06.343">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:10:06.343" starttime="20171020 13:10:05.878"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:10:06.343">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:10:06.343" starttime="20171020 13:10:06.343"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:10:06.344">To JSON using : content={
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171020 13:10:06.344">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171020 13:10:06.344">${content} = {u'data': u'xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20171020 13:10:06.344" starttime="20171020 13:10:06.344"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:10:06.344">${state} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart</msg>
<status status="PASS" endtime="20171020 13:10:06.344" starttime="20171020 13:10:05.877"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:10:06.345">${boot_stage} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart</msg>
<status status="PASS" endtime="20171020 13:10:06.345" starttime="20171020 13:10:05.877"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${OS_BOOT_START}</arg>
<arg>${boot_stage}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:10:06.345">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:10:06.345" starttime="20171020 13:10:06.345"></status>
</kw>
<kw name="Get Host State Attribute" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>OperatingSystemState</arg>
</arguments>
<assign>
<var>${os_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>${host_attribute}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:10:06.349">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171020 13:10:06.349" starttime="20171020 13:10:06.349"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:10:06.350">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171020 13:10:06.350" starttime="20171020 13:10:06.350"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:10:06.351">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171020 13:10:06.351" starttime="20171020 13:10:06.350"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:10:06.351">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171020 13:10:06.351" starttime="20171020 13:10:06.351"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:10:06.542">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171020 13:10:06.542" starttime="20171020 13:10:06.352"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:10:06.542">${status} = PASS</msg>
<msg level="INFO" timestamp="20171020 13:10:06.542">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:10:06.542" starttime="20171020 13:10:06.352"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:10:06.543">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:10:06.543" starttime="20171020 13:10:06.543"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:10:06.544">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:10:06.544" starttime="20171020 13:10:06.543"></status>
</kw>
<status status="PASS" endtime="20171020 13:10:06.544" starttime="20171020 13:10:06.348"></status>
</kw>
<status status="PASS" endtime="20171020 13:10:06.544" starttime="20171020 13:10:06.348"></status>
</kw>
<status status="PASS" endtime="20171020 13:10:06.544" starttime="20171020 13:10:06.347"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:10:06.545">${base_uri} = /xyz/openbmc_project/state/host0//attr/OperatingSystemState</msg>
<status status="PASS" endtime="20171020 13:10:06.545" starttime="20171020 13:10:06.544"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:10:06.547">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/OperatingSystemState, method:Get, args:{}</msg>
<status status="PASS" endtime="20171020 13:10:06.547" starttime="20171020 13:10:06.546"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:10:06.548">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/OperatingSystemState, method:Get, args:{}</msg>
<status status="PASS" endtime="20171020 13:10:06.548" starttime="20171020 13:10:06.548"></status>
</kw>
<status status="PASS" endtime="20171020 13:10:06.548" starttime="20171020 13:10:06.547"></status>
</kw>
<status status="PASS" endtime="20171020 13:10:06.548" starttime="20171020 13:10:06.546"></status>
</kw>
<status status="PASS" endtime="20171020 13:10:06.548" starttime="20171020 13:10:06.545"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:10:06.639">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/OperatingSystemState, headers=None json=None</msg>
<msg level="INFO" timestamp="20171020 13:10:06.639">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:10:06.639" starttime="20171020 13:10:06.549"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:10:06.641">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171020 13:10:06.641" starttime="20171020 13:10:06.641"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:10:06.642">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171020 13:10:06.642" starttime="20171020 13:10:06.642"></status>
</kw>
<status status="PASS" endtime="20171020 13:10:06.642" starttime="20171020 13:10:06.641"></status>
</kw>
<status status="PASS" endtime="20171020 13:10:06.642" starttime="20171020 13:10:06.640"></status>
</kw>
<status status="PASS" endtime="20171020 13:10:06.642" starttime="20171020 13:10:06.640"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171020 13:10:06.643">Delete All Sessions</msg>
<status status="PASS" endtime="20171020 13:10:06.643" starttime="20171020 13:10:06.643"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:10:06.643">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:10:06.643" starttime="20171020 13:10:06.346"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:10:06.644">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:10:06.644" starttime="20171020 13:10:06.643"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:10:06.644">To JSON using : content={
  "data": "xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171020 13:10:06.644">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171020 13:10:06.644">${content} = {u'data': u'xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20171020 13:10:06.645" starttime="20171020 13:10:06.644"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:10:06.645">${state} = xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive</msg>
<status status="PASS" endtime="20171020 13:10:06.645" starttime="20171020 13:10:06.346"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:10:06.645">${os_state} = xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive</msg>
<status status="PASS" endtime="20171020 13:10:06.645" starttime="20171020 13:10:06.345"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${OS_BOOT_COMPLETE}</arg>
<arg>${os_state}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:10:06.646">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg level="FAIL" timestamp="20171020 13:10:06.646">xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.BootComplete != xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive</msg>
<status status="FAIL" endtime="20171020 13:10:06.646" starttime="20171020 13:10:06.645"></status>
</kw>
<status status="FAIL" endtime="20171020 13:10:06.646" starttime="20171020 13:10:05.876"></status>
</kw>
<status status="FAIL" endtime="20171020 13:10:06.646" starttime="20171020 13:10:05.154"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:10:16.652">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171020 13:10:16.652" starttime="20171020 13:10:16.651"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:10:16.653">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171020 13:10:16.653" starttime="20171020 13:10:16.652"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:10:16.653">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171020 13:10:16.653" starttime="20171020 13:10:16.653"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:10:16.654">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171020 13:10:16.654" starttime="20171020 13:10:16.653"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:10:17.072">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171020 13:10:17.072" starttime="20171020 13:10:16.655"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:10:17.072">${status} = PASS</msg>
<msg level="INFO" timestamp="20171020 13:10:17.072">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:10:17.072" starttime="20171020 13:10:16.654"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:10:17.073">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:10:17.073" starttime="20171020 13:10:17.072"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:10:17.073">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:10:17.074" starttime="20171020 13:10:17.073"></status>
</kw>
<status status="PASS" endtime="20171020 13:10:17.074" starttime="20171020 13:10:16.651"></status>
</kw>
<status status="PASS" endtime="20171020 13:10:17.074" starttime="20171020 13:10:16.650"></status>
</kw>
<status status="PASS" endtime="20171020 13:10:17.074" starttime="20171020 13:10:16.649"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:10:17.074">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" endtime="20171020 13:10:17.074" starttime="20171020 13:10:17.074"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:10:17.077">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" endtime="20171020 13:10:17.077" starttime="20171020 13:10:17.076"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:10:17.078">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" endtime="20171020 13:10:17.078" starttime="20171020 13:10:17.078"></status>
</kw>
<status status="PASS" endtime="20171020 13:10:17.078" starttime="20171020 13:10:17.077"></status>
</kw>
<status status="PASS" endtime="20171020 13:10:17.078" starttime="20171020 13:10:17.075"></status>
</kw>
<status status="PASS" endtime="20171020 13:10:17.078" starttime="20171020 13:10:17.075"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:10:17.222">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20171020 13:10:17.222">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:10:17.222" starttime="20171020 13:10:17.078"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:10:17.224">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171020 13:10:17.224" starttime="20171020 13:10:17.223"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:10:17.225">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171020 13:10:17.225" starttime="20171020 13:10:17.225"></status>
</kw>
<status status="PASS" endtime="20171020 13:10:17.225" starttime="20171020 13:10:17.224"></status>
</kw>
<status status="PASS" endtime="20171020 13:10:17.225" starttime="20171020 13:10:17.223"></status>
</kw>
<status status="PASS" endtime="20171020 13:10:17.225" starttime="20171020 13:10:17.222"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171020 13:10:17.226">Delete All Sessions</msg>
<status status="PASS" endtime="20171020 13:10:17.226" starttime="20171020 13:10:17.226"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:10:17.226">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:10:17.226" starttime="20171020 13:10:16.648"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:10:17.227">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:10:17.227" starttime="20171020 13:10:17.226"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:10:17.227">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171020 13:10:17.227">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171020 13:10:17.228">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20171020 13:10:17.228" starttime="20171020 13:10:17.227"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:10:17.228">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status status="PASS" endtime="20171020 13:10:17.228" starttime="20171020 13:10:16.648"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:10:17.228">${power_state} = On</msg>
<status status="PASS" endtime="20171020 13:10:17.228" starttime="20171020 13:10:16.647"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status status="PASS" endtime="20171020 13:10:17.229" starttime="20171020 13:10:17.229"></status>
</kw>
<status status="PASS" endtime="20171020 13:10:17.229" starttime="20171020 13:10:16.647"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:10:17.233">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171020 13:10:17.233" starttime="20171020 13:10:17.232"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:10:17.234">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171020 13:10:17.234" starttime="20171020 13:10:17.233"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:10:17.234">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171020 13:10:17.234" starttime="20171020 13:10:17.234"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:10:17.235">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171020 13:10:17.235" starttime="20171020 13:10:17.234"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:10:17.857">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171020 13:10:17.857" starttime="20171020 13:10:17.236"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:10:17.857">${status} = PASS</msg>
<msg level="INFO" timestamp="20171020 13:10:17.857">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:10:17.857" starttime="20171020 13:10:17.235"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:10:17.858">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:10:17.858" starttime="20171020 13:10:17.858"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:10:17.859">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:10:17.859" starttime="20171020 13:10:17.858"></status>
</kw>
<status status="PASS" endtime="20171020 13:10:17.859" starttime="20171020 13:10:17.232"></status>
</kw>
<status status="PASS" endtime="20171020 13:10:17.859" starttime="20171020 13:10:17.231"></status>
</kw>
<status status="PASS" endtime="20171020 13:10:17.859" starttime="20171020 13:10:17.231"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:10:17.860">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" endtime="20171020 13:10:17.860" starttime="20171020 13:10:17.859"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:10:17.865">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" endtime="20171020 13:10:17.865" starttime="20171020 13:10:17.861"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:10:17.866">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" endtime="20171020 13:10:17.866" starttime="20171020 13:10:17.866"></status>
</kw>
<status status="PASS" endtime="20171020 13:10:17.866" starttime="20171020 13:10:17.865"></status>
</kw>
<status status="PASS" endtime="20171020 13:10:17.866" starttime="20171020 13:10:17.860"></status>
</kw>
<status status="PASS" endtime="20171020 13:10:17.866" starttime="20171020 13:10:17.860"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:10:18.208">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20171020 13:10:18.208">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:10:18.208" starttime="20171020 13:10:17.867"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:10:18.210">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171020 13:10:18.210" starttime="20171020 13:10:18.209"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:10:18.211">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171020 13:10:18.211" starttime="20171020 13:10:18.211"></status>
</kw>
<status status="PASS" endtime="20171020 13:10:18.211" starttime="20171020 13:10:18.210"></status>
</kw>
<status status="PASS" endtime="20171020 13:10:18.211" starttime="20171020 13:10:18.209"></status>
</kw>
<status status="PASS" endtime="20171020 13:10:18.211" starttime="20171020 13:10:18.208"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171020 13:10:18.212">Delete All Sessions</msg>
<status status="PASS" endtime="20171020 13:10:18.212" starttime="20171020 13:10:18.211"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:10:18.212">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:10:18.212" starttime="20171020 13:10:17.230"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:10:18.212">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:10:18.213" starttime="20171020 13:10:18.212"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:10:18.213">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171020 13:10:18.213">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171020 13:10:18.213">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20171020 13:10:18.213" starttime="20171020 13:10:18.213"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:10:18.214">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status status="PASS" endtime="20171020 13:10:18.214" starttime="20171020 13:10:17.230"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:10:18.214">${host_state} = Running</msg>
<status status="PASS" endtime="20171020 13:10:18.214" starttime="20171020 13:10:17.229"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status status="PASS" endtime="20171020 13:10:18.214" starttime="20171020 13:10:18.214"></status>
</kw>
<kw name="Is OS Booted" library="state_manager">
<doc>Check OS status.</doc>
<kw name="Get Host State Attribute" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>BootProgress</arg>
</arguments>
<assign>
<var>${boot_stage}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>${host_attribute}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:10:18.218">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171020 13:10:18.219" starttime="20171020 13:10:18.218"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:10:18.219">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171020 13:10:18.219" starttime="20171020 13:10:18.219"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:10:18.220">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171020 13:10:18.220" starttime="20171020 13:10:18.220"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:10:18.221">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171020 13:10:18.221" starttime="20171020 13:10:18.220"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:10:18.506">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171020 13:10:18.506" starttime="20171020 13:10:18.221"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:10:18.506">${status} = PASS</msg>
<msg level="INFO" timestamp="20171020 13:10:18.506">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:10:18.506" starttime="20171020 13:10:18.221"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:10:18.507">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:10:18.507" starttime="20171020 13:10:18.506"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:10:18.507">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:10:18.508" starttime="20171020 13:10:18.507"></status>
</kw>
<status status="PASS" endtime="20171020 13:10:18.508" starttime="20171020 13:10:18.217"></status>
</kw>
<status status="PASS" endtime="20171020 13:10:18.508" starttime="20171020 13:10:18.217"></status>
</kw>
<status status="PASS" endtime="20171020 13:10:18.508" starttime="20171020 13:10:18.217"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:10:18.508">${base_uri} = /xyz/openbmc_project/state/host0//attr/BootProgress</msg>
<status status="PASS" endtime="20171020 13:10:18.509" starttime="20171020 13:10:18.508"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:10:18.511">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status status="PASS" endtime="20171020 13:10:18.511" starttime="20171020 13:10:18.510"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:10:18.512">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status status="PASS" endtime="20171020 13:10:18.512" starttime="20171020 13:10:18.511"></status>
</kw>
<status status="PASS" endtime="20171020 13:10:18.512" starttime="20171020 13:10:18.511"></status>
</kw>
<status status="PASS" endtime="20171020 13:10:18.512" starttime="20171020 13:10:18.509"></status>
</kw>
<status status="PASS" endtime="20171020 13:10:18.512" starttime="20171020 13:10:18.509"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:10:18.922">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/BootProgress, headers=None json=None</msg>
<msg level="INFO" timestamp="20171020 13:10:18.923">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:10:18.923" starttime="20171020 13:10:18.512"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:10:18.924">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171020 13:10:18.924" starttime="20171020 13:10:18.924"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:10:18.925">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171020 13:10:18.925" starttime="20171020 13:10:18.925"></status>
</kw>
<status status="PASS" endtime="20171020 13:10:18.926" starttime="20171020 13:10:18.925"></status>
</kw>
<status status="PASS" endtime="20171020 13:10:18.926" starttime="20171020 13:10:18.923"></status>
</kw>
<status status="PASS" endtime="20171020 13:10:18.926" starttime="20171020 13:10:18.923"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171020 13:10:18.926">Delete All Sessions</msg>
<status status="PASS" endtime="20171020 13:10:18.926" starttime="20171020 13:10:18.926"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:10:18.926">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:10:18.927" starttime="20171020 13:10:18.216"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:10:18.927">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:10:18.927" starttime="20171020 13:10:18.927"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:10:18.928">To JSON using : content={
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171020 13:10:18.928">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171020 13:10:18.928">${content} = {u'data': u'xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20171020 13:10:18.928" starttime="20171020 13:10:18.927"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:10:18.928">${state} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart</msg>
<status status="PASS" endtime="20171020 13:10:18.928" starttime="20171020 13:10:18.215"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:10:18.929">${boot_stage} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart</msg>
<status status="PASS" endtime="20171020 13:10:18.929" starttime="20171020 13:10:18.215"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${OS_BOOT_START}</arg>
<arg>${boot_stage}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:10:18.929">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:10:18.929" starttime="20171020 13:10:18.929"></status>
</kw>
<kw name="Get Host State Attribute" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>OperatingSystemState</arg>
</arguments>
<assign>
<var>${os_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>${host_attribute}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:10:18.933">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171020 13:10:18.934" starttime="20171020 13:10:18.933"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:10:18.934">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171020 13:10:18.934" starttime="20171020 13:10:18.934"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:10:18.935">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171020 13:10:18.935" starttime="20171020 13:10:18.935"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:10:18.936">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171020 13:10:18.936" starttime="20171020 13:10:18.935"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:10:19.344">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171020 13:10:19.344" starttime="20171020 13:10:18.936"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:10:19.344">${status} = PASS</msg>
<msg level="INFO" timestamp="20171020 13:10:19.344">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:10:19.345" starttime="20171020 13:10:18.936"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:10:19.345">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:10:19.345" starttime="20171020 13:10:19.345"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:10:19.346">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:10:19.346" starttime="20171020 13:10:19.345"></status>
</kw>
<status status="PASS" endtime="20171020 13:10:19.346" starttime="20171020 13:10:18.932"></status>
</kw>
<status status="PASS" endtime="20171020 13:10:19.346" starttime="20171020 13:10:18.932"></status>
</kw>
<status status="PASS" endtime="20171020 13:10:19.346" starttime="20171020 13:10:18.931"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:10:19.347">${base_uri} = /xyz/openbmc_project/state/host0//attr/OperatingSystemState</msg>
<status status="PASS" endtime="20171020 13:10:19.347" starttime="20171020 13:10:19.347"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:10:19.349">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/OperatingSystemState, method:Get, args:{}</msg>
<status status="PASS" endtime="20171020 13:10:19.349" starttime="20171020 13:10:19.348"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:10:19.350">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/OperatingSystemState, method:Get, args:{}</msg>
<status status="PASS" endtime="20171020 13:10:19.350" starttime="20171020 13:10:19.350"></status>
</kw>
<status status="PASS" endtime="20171020 13:10:19.350" starttime="20171020 13:10:19.349"></status>
</kw>
<status status="PASS" endtime="20171020 13:10:19.350" starttime="20171020 13:10:19.348"></status>
</kw>
<status status="PASS" endtime="20171020 13:10:19.350" starttime="20171020 13:10:19.347"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:10:19.493">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/OperatingSystemState, headers=None json=None</msg>
<msg level="INFO" timestamp="20171020 13:10:19.493">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:10:19.493" starttime="20171020 13:10:19.351"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:10:19.495">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171020 13:10:19.495" starttime="20171020 13:10:19.494"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:10:19.496">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171020 13:10:19.496" starttime="20171020 13:10:19.495"></status>
</kw>
<status status="PASS" endtime="20171020 13:10:19.496" starttime="20171020 13:10:19.495"></status>
</kw>
<status status="PASS" endtime="20171020 13:10:19.496" starttime="20171020 13:10:19.494"></status>
</kw>
<status status="PASS" endtime="20171020 13:10:19.497" starttime="20171020 13:10:19.493"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171020 13:10:19.497">Delete All Sessions</msg>
<status status="PASS" endtime="20171020 13:10:19.497" starttime="20171020 13:10:19.497"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:10:19.497">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:10:19.497" starttime="20171020 13:10:18.930"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:10:19.498">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:10:19.498" starttime="20171020 13:10:19.497"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:10:19.498">To JSON using : content={
  "data": "xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171020 13:10:19.499">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171020 13:10:19.499">${content} = {u'data': u'xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20171020 13:10:19.499" starttime="20171020 13:10:19.498"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:10:19.499">${state} = xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive</msg>
<status status="PASS" endtime="20171020 13:10:19.499" starttime="20171020 13:10:18.930"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:10:19.499">${os_state} = xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive</msg>
<status status="PASS" endtime="20171020 13:10:19.499" starttime="20171020 13:10:18.929"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${OS_BOOT_COMPLETE}</arg>
<arg>${os_state}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:10:19.500">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg level="FAIL" timestamp="20171020 13:10:19.500">xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.BootComplete != xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive</msg>
<status status="FAIL" endtime="20171020 13:10:19.500" starttime="20171020 13:10:19.500"></status>
</kw>
<status status="FAIL" endtime="20171020 13:10:19.500" starttime="20171020 13:10:18.215"></status>
</kw>
<status status="FAIL" endtime="20171020 13:10:19.500" starttime="20171020 13:10:16.647"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:10:29.505">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171020 13:10:29.506" starttime="20171020 13:10:29.505"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:10:29.506">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171020 13:10:29.506" starttime="20171020 13:10:29.506"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:10:29.507">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171020 13:10:29.507" starttime="20171020 13:10:29.507"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:10:29.508">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171020 13:10:29.508" starttime="20171020 13:10:29.507"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:10:29.734">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171020 13:10:29.735" starttime="20171020 13:10:29.508"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:10:29.735">${status} = PASS</msg>
<msg level="INFO" timestamp="20171020 13:10:29.735">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:10:29.735" starttime="20171020 13:10:29.508"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:10:29.735">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:10:29.735" starttime="20171020 13:10:29.735"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:10:29.736">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:10:29.736" starttime="20171020 13:10:29.736"></status>
</kw>
<status status="PASS" endtime="20171020 13:10:29.736" starttime="20171020 13:10:29.504"></status>
</kw>
<status status="PASS" endtime="20171020 13:10:29.736" starttime="20171020 13:10:29.504"></status>
</kw>
<status status="PASS" endtime="20171020 13:10:29.736" starttime="20171020 13:10:29.503"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:10:29.737">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" endtime="20171020 13:10:29.737" starttime="20171020 13:10:29.737"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:10:29.739">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" endtime="20171020 13:10:29.739" starttime="20171020 13:10:29.738"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:10:29.740">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" endtime="20171020 13:10:29.740" starttime="20171020 13:10:29.740"></status>
</kw>
<status status="PASS" endtime="20171020 13:10:29.740" starttime="20171020 13:10:29.739"></status>
</kw>
<status status="PASS" endtime="20171020 13:10:29.740" starttime="20171020 13:10:29.738"></status>
</kw>
<status status="PASS" endtime="20171020 13:10:29.741" starttime="20171020 13:10:29.737"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:10:29.805">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20171020 13:10:29.805">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:10:29.805" starttime="20171020 13:10:29.741"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:10:29.807">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171020 13:10:29.807" starttime="20171020 13:10:29.806"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:10:29.808">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171020 13:10:29.808" starttime="20171020 13:10:29.807"></status>
</kw>
<status status="PASS" endtime="20171020 13:10:29.808" starttime="20171020 13:10:29.807"></status>
</kw>
<status status="PASS" endtime="20171020 13:10:29.808" starttime="20171020 13:10:29.806"></status>
</kw>
<status status="PASS" endtime="20171020 13:10:29.808" starttime="20171020 13:10:29.805"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171020 13:10:29.808">Delete All Sessions</msg>
<status status="PASS" endtime="20171020 13:10:29.808" starttime="20171020 13:10:29.808"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:10:29.809">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:10:29.809" starttime="20171020 13:10:29.503"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:10:29.809">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:10:29.809" starttime="20171020 13:10:29.809"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:10:29.810">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171020 13:10:29.810">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171020 13:10:29.810">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20171020 13:10:29.810" starttime="20171020 13:10:29.810"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:10:29.811">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status status="PASS" endtime="20171020 13:10:29.811" starttime="20171020 13:10:29.502"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:10:29.811">${power_state} = On</msg>
<status status="PASS" endtime="20171020 13:10:29.811" starttime="20171020 13:10:29.502"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status status="PASS" endtime="20171020 13:10:29.812" starttime="20171020 13:10:29.811"></status>
</kw>
<status status="PASS" endtime="20171020 13:10:29.812" starttime="20171020 13:10:29.501"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:10:29.815">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171020 13:10:29.816" starttime="20171020 13:10:29.815"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:10:29.817">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171020 13:10:29.817" starttime="20171020 13:10:29.816"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:10:29.818">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171020 13:10:29.818" starttime="20171020 13:10:29.817"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:10:29.819">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171020 13:10:29.819" starttime="20171020 13:10:29.818"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:10:29.998">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171020 13:10:29.998" starttime="20171020 13:10:29.820"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:10:29.998">${status} = PASS</msg>
<msg level="INFO" timestamp="20171020 13:10:29.998">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:10:29.998" starttime="20171020 13:10:29.819"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:10:29.999">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:10:29.999" starttime="20171020 13:10:29.999"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:10:30.000">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:10:30.000" starttime="20171020 13:10:29.999"></status>
</kw>
<status status="PASS" endtime="20171020 13:10:30.000" starttime="20171020 13:10:29.814"></status>
</kw>
<status status="PASS" endtime="20171020 13:10:30.000" starttime="20171020 13:10:29.814"></status>
</kw>
<status status="PASS" endtime="20171020 13:10:30.000" starttime="20171020 13:10:29.813"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:10:30.001">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" endtime="20171020 13:10:30.001" starttime="20171020 13:10:30.001"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:10:30.003">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" endtime="20171020 13:10:30.003" starttime="20171020 13:10:30.002"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:10:30.004">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" endtime="20171020 13:10:30.004" starttime="20171020 13:10:30.004"></status>
</kw>
<status status="PASS" endtime="20171020 13:10:30.004" starttime="20171020 13:10:30.003"></status>
</kw>
<status status="PASS" endtime="20171020 13:10:30.004" starttime="20171020 13:10:30.002"></status>
</kw>
<status status="PASS" endtime="20171020 13:10:30.005" starttime="20171020 13:10:30.001"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:10:30.145">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20171020 13:10:30.145">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:10:30.145" starttime="20171020 13:10:30.005"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:10:30.147">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171020 13:10:30.147" starttime="20171020 13:10:30.147"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:10:30.148">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171020 13:10:30.148" starttime="20171020 13:10:30.148"></status>
</kw>
<status status="PASS" endtime="20171020 13:10:30.148" starttime="20171020 13:10:30.147"></status>
</kw>
<status status="PASS" endtime="20171020 13:10:30.148" starttime="20171020 13:10:30.146"></status>
</kw>
<status status="PASS" endtime="20171020 13:10:30.148" starttime="20171020 13:10:30.146"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171020 13:10:30.149">Delete All Sessions</msg>
<status status="PASS" endtime="20171020 13:10:30.149" starttime="20171020 13:10:30.149"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:10:30.149">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:10:30.149" starttime="20171020 13:10:29.813"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:10:30.150">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:10:30.150" starttime="20171020 13:10:30.149"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:10:30.150">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171020 13:10:30.151">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171020 13:10:30.151">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20171020 13:10:30.151" starttime="20171020 13:10:30.150"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:10:30.151">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status status="PASS" endtime="20171020 13:10:30.151" starttime="20171020 13:10:29.812"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:10:30.151">${host_state} = Running</msg>
<status status="PASS" endtime="20171020 13:10:30.151" starttime="20171020 13:10:29.812"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status status="PASS" endtime="20171020 13:10:30.152" starttime="20171020 13:10:30.152"></status>
</kw>
<kw name="Is OS Booted" library="state_manager">
<doc>Check OS status.</doc>
<kw name="Get Host State Attribute" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>BootProgress</arg>
</arguments>
<assign>
<var>${boot_stage}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>${host_attribute}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:10:30.156">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171020 13:10:30.157" starttime="20171020 13:10:30.156"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:10:30.157">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171020 13:10:30.157" starttime="20171020 13:10:30.157"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:10:30.158">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171020 13:10:30.158" starttime="20171020 13:10:30.157"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:10:30.159">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171020 13:10:30.159" starttime="20171020 13:10:30.158"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:10:30.348">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171020 13:10:30.348" starttime="20171020 13:10:30.159"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:10:30.348">${status} = PASS</msg>
<msg level="INFO" timestamp="20171020 13:10:30.348">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:10:30.348" starttime="20171020 13:10:30.159"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:10:30.349">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:10:30.349" starttime="20171020 13:10:30.348"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:10:30.349">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:10:30.349" starttime="20171020 13:10:30.349"></status>
</kw>
<status status="PASS" endtime="20171020 13:10:30.349" starttime="20171020 13:10:30.155"></status>
</kw>
<status status="PASS" endtime="20171020 13:10:30.350" starttime="20171020 13:10:30.155"></status>
</kw>
<status status="PASS" endtime="20171020 13:10:30.350" starttime="20171020 13:10:30.154"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:10:30.350">${base_uri} = /xyz/openbmc_project/state/host0//attr/BootProgress</msg>
<status status="PASS" endtime="20171020 13:10:30.350" starttime="20171020 13:10:30.350"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:10:30.352">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status status="PASS" endtime="20171020 13:10:30.352" starttime="20171020 13:10:30.352"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:10:30.353">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status status="PASS" endtime="20171020 13:10:30.354" starttime="20171020 13:10:30.353"></status>
</kw>
<status status="PASS" endtime="20171020 13:10:30.354" starttime="20171020 13:10:30.353"></status>
</kw>
<status status="PASS" endtime="20171020 13:10:30.354" starttime="20171020 13:10:30.351"></status>
</kw>
<status status="PASS" endtime="20171020 13:10:30.354" starttime="20171020 13:10:30.351"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:10:30.613">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/BootProgress, headers=None json=None</msg>
<msg level="INFO" timestamp="20171020 13:10:30.613">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:10:30.613" starttime="20171020 13:10:30.354"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:10:30.615">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171020 13:10:30.615" starttime="20171020 13:10:30.614"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:10:30.615">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171020 13:10:30.616" starttime="20171020 13:10:30.615"></status>
</kw>
<status status="PASS" endtime="20171020 13:10:30.616" starttime="20171020 13:10:30.615"></status>
</kw>
<status status="PASS" endtime="20171020 13:10:30.616" starttime="20171020 13:10:30.614"></status>
</kw>
<status status="PASS" endtime="20171020 13:10:30.616" starttime="20171020 13:10:30.613"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171020 13:10:30.616">Delete All Sessions</msg>
<status status="PASS" endtime="20171020 13:10:30.616" starttime="20171020 13:10:30.616"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:10:30.617">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:10:30.617" starttime="20171020 13:10:30.153"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:10:30.617">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:10:30.617" starttime="20171020 13:10:30.617"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:10:30.618">To JSON using : content={
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171020 13:10:30.618">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171020 13:10:30.618">${content} = {u'data': u'xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20171020 13:10:30.618" starttime="20171020 13:10:30.618"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:10:30.618">${state} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart</msg>
<status status="PASS" endtime="20171020 13:10:30.618" starttime="20171020 13:10:30.153"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:10:30.618">${boot_stage} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart</msg>
<status status="PASS" endtime="20171020 13:10:30.619" starttime="20171020 13:10:30.152"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${OS_BOOT_START}</arg>
<arg>${boot_stage}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:10:30.619">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:10:30.619" starttime="20171020 13:10:30.619"></status>
</kw>
<kw name="Get Host State Attribute" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>OperatingSystemState</arg>
</arguments>
<assign>
<var>${os_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>${host_attribute}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:10:30.623">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171020 13:10:30.624" starttime="20171020 13:10:30.623"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:10:30.625">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171020 13:10:30.625" starttime="20171020 13:10:30.624"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:10:30.626">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171020 13:10:30.626" starttime="20171020 13:10:30.625"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:10:30.627">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171020 13:10:30.627" starttime="20171020 13:10:30.626"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:10:31.030">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171020 13:10:31.030" starttime="20171020 13:10:30.628"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:10:31.030">${status} = PASS</msg>
<msg level="INFO" timestamp="20171020 13:10:31.030">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:10:31.030" starttime="20171020 13:10:30.627"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:10:31.031">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:10:31.031" starttime="20171020 13:10:31.030"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:10:31.031">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:10:31.032" starttime="20171020 13:10:31.031"></status>
</kw>
<status status="PASS" endtime="20171020 13:10:31.032" starttime="20171020 13:10:30.622"></status>
</kw>
<status status="PASS" endtime="20171020 13:10:31.032" starttime="20171020 13:10:30.622"></status>
</kw>
<status status="PASS" endtime="20171020 13:10:31.032" starttime="20171020 13:10:30.621"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:10:31.032">${base_uri} = /xyz/openbmc_project/state/host0//attr/OperatingSystemState</msg>
<status status="PASS" endtime="20171020 13:10:31.032" starttime="20171020 13:10:31.032"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:10:31.035">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/OperatingSystemState, method:Get, args:{}</msg>
<status status="PASS" endtime="20171020 13:10:31.035" starttime="20171020 13:10:31.034"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:10:31.035">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/OperatingSystemState, method:Get, args:{}</msg>
<status status="PASS" endtime="20171020 13:10:31.036" starttime="20171020 13:10:31.035"></status>
</kw>
<status status="PASS" endtime="20171020 13:10:31.036" starttime="20171020 13:10:31.035"></status>
</kw>
<status status="PASS" endtime="20171020 13:10:31.036" starttime="20171020 13:10:31.033"></status>
</kw>
<status status="PASS" endtime="20171020 13:10:31.036" starttime="20171020 13:10:31.033"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:10:31.126">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/OperatingSystemState, headers=None json=None</msg>
<msg level="INFO" timestamp="20171020 13:10:31.126">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:10:31.126" starttime="20171020 13:10:31.036"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:10:31.128">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171020 13:10:31.128" starttime="20171020 13:10:31.127"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:10:31.129">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171020 13:10:31.129" starttime="20171020 13:10:31.129"></status>
</kw>
<status status="PASS" endtime="20171020 13:10:31.129" starttime="20171020 13:10:31.128"></status>
</kw>
<status status="PASS" endtime="20171020 13:10:31.129" starttime="20171020 13:10:31.127"></status>
</kw>
<status status="PASS" endtime="20171020 13:10:31.129" starttime="20171020 13:10:31.126"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171020 13:10:31.130">Delete All Sessions</msg>
<status status="PASS" endtime="20171020 13:10:31.130" starttime="20171020 13:10:31.130"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:10:31.130">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:10:31.130" starttime="20171020 13:10:30.620"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:10:31.131">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:10:31.131" starttime="20171020 13:10:31.130"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:10:31.131">To JSON using : content={
  "data": "xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171020 13:10:31.131">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171020 13:10:31.132">${content} = {u'data': u'xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20171020 13:10:31.132" starttime="20171020 13:10:31.131"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:10:31.132">${state} = xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive</msg>
<status status="PASS" endtime="20171020 13:10:31.132" starttime="20171020 13:10:30.620"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:10:31.132">${os_state} = xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive</msg>
<status status="PASS" endtime="20171020 13:10:31.132" starttime="20171020 13:10:30.619"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${OS_BOOT_COMPLETE}</arg>
<arg>${os_state}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:10:31.133">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg level="FAIL" timestamp="20171020 13:10:31.133">xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.BootComplete != xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive</msg>
<status status="FAIL" endtime="20171020 13:10:31.133" starttime="20171020 13:10:31.132"></status>
</kw>
<status status="FAIL" endtime="20171020 13:10:31.133" starttime="20171020 13:10:30.152"></status>
</kw>
<status status="FAIL" endtime="20171020 13:10:31.133" starttime="20171020 13:10:29.501"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:10:41.139">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171020 13:10:41.139" starttime="20171020 13:10:41.138"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:10:41.140">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171020 13:10:41.140" starttime="20171020 13:10:41.139"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:10:41.140">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171020 13:10:41.140" starttime="20171020 13:10:41.140"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:10:41.141">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171020 13:10:41.141" starttime="20171020 13:10:41.141"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:10:41.743">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171020 13:10:41.743" starttime="20171020 13:10:41.142"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:10:41.743">${status} = PASS</msg>
<msg level="INFO" timestamp="20171020 13:10:41.743">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:10:41.743" starttime="20171020 13:10:41.141"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:10:41.744">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:10:41.744" starttime="20171020 13:10:41.743"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:10:41.745">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:10:41.745" starttime="20171020 13:10:41.744"></status>
</kw>
<status status="PASS" endtime="20171020 13:10:41.745" starttime="20171020 13:10:41.137"></status>
</kw>
<status status="PASS" endtime="20171020 13:10:41.745" starttime="20171020 13:10:41.137"></status>
</kw>
<status status="PASS" endtime="20171020 13:10:41.745" starttime="20171020 13:10:41.136"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:10:41.746">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" endtime="20171020 13:10:41.746" starttime="20171020 13:10:41.746"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:10:41.749">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" endtime="20171020 13:10:41.749" starttime="20171020 13:10:41.748"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:10:41.751">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" endtime="20171020 13:10:41.751" starttime="20171020 13:10:41.750"></status>
</kw>
<status status="PASS" endtime="20171020 13:10:41.751" starttime="20171020 13:10:41.750"></status>
</kw>
<status status="PASS" endtime="20171020 13:10:41.751" starttime="20171020 13:10:41.747"></status>
</kw>
<status status="PASS" endtime="20171020 13:10:41.751" starttime="20171020 13:10:41.747"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:10:41.815">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20171020 13:10:41.815">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:10:41.815" starttime="20171020 13:10:41.751"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:10:41.817">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171020 13:10:41.817" starttime="20171020 13:10:41.817"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:10:41.818">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171020 13:10:41.818" starttime="20171020 13:10:41.818"></status>
</kw>
<status status="PASS" endtime="20171020 13:10:41.819" starttime="20171020 13:10:41.817"></status>
</kw>
<status status="PASS" endtime="20171020 13:10:41.819" starttime="20171020 13:10:41.816"></status>
</kw>
<status status="PASS" endtime="20171020 13:10:41.819" starttime="20171020 13:10:41.815"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171020 13:10:41.819">Delete All Sessions</msg>
<status status="PASS" endtime="20171020 13:10:41.819" starttime="20171020 13:10:41.819"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:10:41.819">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:10:41.819" starttime="20171020 13:10:41.136"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:10:41.820">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:10:41.820" starttime="20171020 13:10:41.820"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:10:41.821">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171020 13:10:41.821">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171020 13:10:41.821">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20171020 13:10:41.821" starttime="20171020 13:10:41.820"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:10:41.821">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status status="PASS" endtime="20171020 13:10:41.821" starttime="20171020 13:10:41.135"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:10:41.821">${power_state} = On</msg>
<status status="PASS" endtime="20171020 13:10:41.822" starttime="20171020 13:10:41.135"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status status="PASS" endtime="20171020 13:10:41.822" starttime="20171020 13:10:41.822"></status>
</kw>
<status status="PASS" endtime="20171020 13:10:41.822" starttime="20171020 13:10:41.134"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:10:41.826">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171020 13:10:41.826" starttime="20171020 13:10:41.825"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:10:41.827">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171020 13:10:41.827" starttime="20171020 13:10:41.826"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:10:41.827">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171020 13:10:41.827" starttime="20171020 13:10:41.827"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:10:41.828">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171020 13:10:41.828" starttime="20171020 13:10:41.828"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:10:42.152">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171020 13:10:42.152" starttime="20171020 13:10:41.829"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:10:42.152">${status} = PASS</msg>
<msg level="INFO" timestamp="20171020 13:10:42.152">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:10:42.153" starttime="20171020 13:10:41.828"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:10:42.153">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:10:42.153" starttime="20171020 13:10:42.153"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:10:42.154">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:10:42.154" starttime="20171020 13:10:42.153"></status>
</kw>
<status status="PASS" endtime="20171020 13:10:42.154" starttime="20171020 13:10:41.825"></status>
</kw>
<status status="PASS" endtime="20171020 13:10:42.154" starttime="20171020 13:10:41.824"></status>
</kw>
<status status="PASS" endtime="20171020 13:10:42.154" starttime="20171020 13:10:41.824"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:10:42.155">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" endtime="20171020 13:10:42.155" starttime="20171020 13:10:42.154"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:10:42.157">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" endtime="20171020 13:10:42.157" starttime="20171020 13:10:42.156"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:10:42.158">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" endtime="20171020 13:10:42.158" starttime="20171020 13:10:42.158"></status>
</kw>
<status status="PASS" endtime="20171020 13:10:42.158" starttime="20171020 13:10:42.157"></status>
</kw>
<status status="PASS" endtime="20171020 13:10:42.159" starttime="20171020 13:10:42.156"></status>
</kw>
<status status="PASS" endtime="20171020 13:10:42.159" starttime="20171020 13:10:42.155"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:10:42.667">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20171020 13:10:42.667">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:10:42.667" starttime="20171020 13:10:42.159"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:10:42.669">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171020 13:10:42.669" starttime="20171020 13:10:42.668"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:10:42.670">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171020 13:10:42.670" starttime="20171020 13:10:42.670"></status>
</kw>
<status status="PASS" endtime="20171020 13:10:42.670" starttime="20171020 13:10:42.669"></status>
</kw>
<status status="PASS" endtime="20171020 13:10:42.670" starttime="20171020 13:10:42.668"></status>
</kw>
<status status="PASS" endtime="20171020 13:10:42.670" starttime="20171020 13:10:42.667"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171020 13:10:42.671">Delete All Sessions</msg>
<status status="PASS" endtime="20171020 13:10:42.671" starttime="20171020 13:10:42.671"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:10:42.671">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:10:42.671" starttime="20171020 13:10:41.823"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:10:42.672">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:10:42.672" starttime="20171020 13:10:42.671"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:10:42.672">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171020 13:10:42.673">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171020 13:10:42.673">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20171020 13:10:42.673" starttime="20171020 13:10:42.672"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:10:42.673">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status status="PASS" endtime="20171020 13:10:42.673" starttime="20171020 13:10:41.823"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:10:42.673">${host_state} = Running</msg>
<status status="PASS" endtime="20171020 13:10:42.673" starttime="20171020 13:10:41.822"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status status="PASS" endtime="20171020 13:10:42.674" starttime="20171020 13:10:42.674"></status>
</kw>
<kw name="Is OS Booted" library="state_manager">
<doc>Check OS status.</doc>
<kw name="Get Host State Attribute" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>BootProgress</arg>
</arguments>
<assign>
<var>${boot_stage}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>${host_attribute}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:10:42.678">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171020 13:10:42.678" starttime="20171020 13:10:42.677"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:10:42.679">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171020 13:10:42.679" starttime="20171020 13:10:42.678"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:10:42.679">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171020 13:10:42.679" starttime="20171020 13:10:42.679"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:10:42.684">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171020 13:10:42.684" starttime="20171020 13:10:42.680"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:10:43.132">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171020 13:10:43.132" starttime="20171020 13:10:42.685"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:10:43.132">${status} = PASS</msg>
<msg level="INFO" timestamp="20171020 13:10:43.132">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:10:43.133" starttime="20171020 13:10:42.684"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:10:43.133">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:10:43.133" starttime="20171020 13:10:43.133"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:10:43.134">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:10:43.134" starttime="20171020 13:10:43.134"></status>
</kw>
<status status="PASS" endtime="20171020 13:10:43.134" starttime="20171020 13:10:42.677"></status>
</kw>
<status status="PASS" endtime="20171020 13:10:43.134" starttime="20171020 13:10:42.676"></status>
</kw>
<status status="PASS" endtime="20171020 13:10:43.134" starttime="20171020 13:10:42.676"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:10:43.135">${base_uri} = /xyz/openbmc_project/state/host0//attr/BootProgress</msg>
<status status="PASS" endtime="20171020 13:10:43.135" starttime="20171020 13:10:43.135"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:10:43.137">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status status="PASS" endtime="20171020 13:10:43.137" starttime="20171020 13:10:43.136"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:10:43.138">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status status="PASS" endtime="20171020 13:10:43.138" starttime="20171020 13:10:43.138"></status>
</kw>
<status status="PASS" endtime="20171020 13:10:43.138" starttime="20171020 13:10:43.137"></status>
</kw>
<status status="PASS" endtime="20171020 13:10:43.138" starttime="20171020 13:10:43.136"></status>
</kw>
<status status="PASS" endtime="20171020 13:10:43.138" starttime="20171020 13:10:43.135"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:10:43.376">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/BootProgress, headers=None json=None</msg>
<msg level="INFO" timestamp="20171020 13:10:43.376">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:10:43.376" starttime="20171020 13:10:43.139"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:10:43.378">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171020 13:10:43.378" starttime="20171020 13:10:43.377"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:10:43.379">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171020 13:10:43.379" starttime="20171020 13:10:43.379"></status>
</kw>
<status status="PASS" endtime="20171020 13:10:43.379" starttime="20171020 13:10:43.378"></status>
</kw>
<status status="PASS" endtime="20171020 13:10:43.379" starttime="20171020 13:10:43.377"></status>
</kw>
<status status="PASS" endtime="20171020 13:10:43.379" starttime="20171020 13:10:43.376"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171020 13:10:43.380">Delete All Sessions</msg>
<status status="PASS" endtime="20171020 13:10:43.380" starttime="20171020 13:10:43.380"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:10:43.380">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:10:43.380" starttime="20171020 13:10:42.675"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:10:43.381">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:10:43.381" starttime="20171020 13:10:43.380"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:10:43.381">To JSON using : content={
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171020 13:10:43.381">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171020 13:10:43.381">${content} = {u'data': u'xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20171020 13:10:43.382" starttime="20171020 13:10:43.381"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:10:43.382">${state} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart</msg>
<status status="PASS" endtime="20171020 13:10:43.382" starttime="20171020 13:10:42.675"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:10:43.382">${boot_stage} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart</msg>
<status status="PASS" endtime="20171020 13:10:43.382" starttime="20171020 13:10:42.674"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${OS_BOOT_START}</arg>
<arg>${boot_stage}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:10:43.383">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:10:43.383" starttime="20171020 13:10:43.382"></status>
</kw>
<kw name="Get Host State Attribute" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>OperatingSystemState</arg>
</arguments>
<assign>
<var>${os_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>${host_attribute}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:10:43.387">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171020 13:10:43.387" starttime="20171020 13:10:43.386"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:10:43.388">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171020 13:10:43.388" starttime="20171020 13:10:43.387"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:10:43.388">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171020 13:10:43.388" starttime="20171020 13:10:43.388"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:10:43.389">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171020 13:10:43.389" starttime="20171020 13:10:43.389"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:10:43.666">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171020 13:10:43.666" starttime="20171020 13:10:43.390"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:10:43.666">${status} = PASS</msg>
<msg level="INFO" timestamp="20171020 13:10:43.666">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:10:43.666" starttime="20171020 13:10:43.389"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:10:43.667">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:10:43.667" starttime="20171020 13:10:43.666"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:10:43.667">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:10:43.667" starttime="20171020 13:10:43.667"></status>
</kw>
<status status="PASS" endtime="20171020 13:10:43.668" starttime="20171020 13:10:43.386"></status>
</kw>
<status status="PASS" endtime="20171020 13:10:43.668" starttime="20171020 13:10:43.385"></status>
</kw>
<status status="PASS" endtime="20171020 13:10:43.668" starttime="20171020 13:10:43.384"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:10:43.668">${base_uri} = /xyz/openbmc_project/state/host0//attr/OperatingSystemState</msg>
<status status="PASS" endtime="20171020 13:10:43.668" starttime="20171020 13:10:43.668"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:10:43.670">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/OperatingSystemState, method:Get, args:{}</msg>
<status status="PASS" endtime="20171020 13:10:43.671" starttime="20171020 13:10:43.670"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:10:43.671">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/OperatingSystemState, method:Get, args:{}</msg>
<status status="PASS" endtime="20171020 13:10:43.672" starttime="20171020 13:10:43.671"></status>
</kw>
<status status="PASS" endtime="20171020 13:10:43.672" starttime="20171020 13:10:43.671"></status>
</kw>
<status status="PASS" endtime="20171020 13:10:43.672" starttime="20171020 13:10:43.669"></status>
</kw>
<status status="PASS" endtime="20171020 13:10:43.672" starttime="20171020 13:10:43.669"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:10:43.828">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/OperatingSystemState, headers=None json=None</msg>
<msg level="INFO" timestamp="20171020 13:10:43.828">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:10:43.828" starttime="20171020 13:10:43.672"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:10:43.830">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171020 13:10:43.831" starttime="20171020 13:10:43.830"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:10:43.831">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171020 13:10:43.832" starttime="20171020 13:10:43.831"></status>
</kw>
<status status="PASS" endtime="20171020 13:10:43.832" starttime="20171020 13:10:43.831"></status>
</kw>
<status status="PASS" endtime="20171020 13:10:43.832" starttime="20171020 13:10:43.829"></status>
</kw>
<status status="PASS" endtime="20171020 13:10:43.832" starttime="20171020 13:10:43.829"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171020 13:10:43.832">Delete All Sessions</msg>
<status status="PASS" endtime="20171020 13:10:43.832" starttime="20171020 13:10:43.832"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:10:43.833">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:10:43.833" starttime="20171020 13:10:43.384"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:10:43.833">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:10:43.833" starttime="20171020 13:10:43.833"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:10:43.834">To JSON using : content={
  "data": "xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171020 13:10:43.834">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171020 13:10:43.834">${content} = {u'data': u'xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20171020 13:10:43.834" starttime="20171020 13:10:43.834"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:10:43.834">${state} = xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive</msg>
<status status="PASS" endtime="20171020 13:10:43.834" starttime="20171020 13:10:43.383"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:10:43.835">${os_state} = xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive</msg>
<status status="PASS" endtime="20171020 13:10:43.835" starttime="20171020 13:10:43.383"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${OS_BOOT_COMPLETE}</arg>
<arg>${os_state}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:10:43.835">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg level="FAIL" timestamp="20171020 13:10:43.835">xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.BootComplete != xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive</msg>
<status status="FAIL" endtime="20171020 13:10:43.835" starttime="20171020 13:10:43.835"></status>
</kw>
<status status="FAIL" endtime="20171020 13:10:43.836" starttime="20171020 13:10:42.674"></status>
</kw>
<status status="FAIL" endtime="20171020 13:10:43.836" starttime="20171020 13:10:41.134"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:10:53.841">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171020 13:10:53.841" starttime="20171020 13:10:53.840"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:10:53.842">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171020 13:10:53.842" starttime="20171020 13:10:53.841"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:10:53.842">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171020 13:10:53.842" starttime="20171020 13:10:53.842"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:10:53.843">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171020 13:10:53.843" starttime="20171020 13:10:53.843"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:10:54.075">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171020 13:10:54.075" starttime="20171020 13:10:53.844"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:10:54.075">${status} = PASS</msg>
<msg level="INFO" timestamp="20171020 13:10:54.076">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:10:54.076" starttime="20171020 13:10:53.843"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:10:54.076">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:10:54.076" starttime="20171020 13:10:54.076"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:10:54.077">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:10:54.077" starttime="20171020 13:10:54.077"></status>
</kw>
<status status="PASS" endtime="20171020 13:10:54.077" starttime="20171020 13:10:53.840"></status>
</kw>
<status status="PASS" endtime="20171020 13:10:54.077" starttime="20171020 13:10:53.839"></status>
</kw>
<status status="PASS" endtime="20171020 13:10:54.078" starttime="20171020 13:10:53.839"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:10:54.078">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" endtime="20171020 13:10:54.078" starttime="20171020 13:10:54.078"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:10:54.080">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" endtime="20171020 13:10:54.080" starttime="20171020 13:10:54.080"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:10:54.081">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" endtime="20171020 13:10:54.081" starttime="20171020 13:10:54.081"></status>
</kw>
<status status="PASS" endtime="20171020 13:10:54.081" starttime="20171020 13:10:54.080"></status>
</kw>
<status status="PASS" endtime="20171020 13:10:54.082" starttime="20171020 13:10:54.079"></status>
</kw>
<status status="PASS" endtime="20171020 13:10:54.082" starttime="20171020 13:10:54.078"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:10:54.281">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20171020 13:10:54.281">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:10:54.281" starttime="20171020 13:10:54.082"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:10:54.283">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171020 13:10:54.283" starttime="20171020 13:10:54.282"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:10:54.284">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171020 13:10:54.284" starttime="20171020 13:10:54.284"></status>
</kw>
<status status="PASS" endtime="20171020 13:10:54.284" starttime="20171020 13:10:54.283"></status>
</kw>
<status status="PASS" endtime="20171020 13:10:54.284" starttime="20171020 13:10:54.282"></status>
</kw>
<status status="PASS" endtime="20171020 13:10:54.284" starttime="20171020 13:10:54.281"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171020 13:10:54.285">Delete All Sessions</msg>
<status status="PASS" endtime="20171020 13:10:54.285" starttime="20171020 13:10:54.284"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:10:54.285">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:10:54.285" starttime="20171020 13:10:53.838"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:10:54.286">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:10:54.286" starttime="20171020 13:10:54.285"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:10:54.286">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171020 13:10:54.286">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171020 13:10:54.287">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20171020 13:10:54.287" starttime="20171020 13:10:54.286"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:10:54.287">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status status="PASS" endtime="20171020 13:10:54.287" starttime="20171020 13:10:53.837"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:10:54.288">${power_state} = On</msg>
<status status="PASS" endtime="20171020 13:10:54.288" starttime="20171020 13:10:53.837"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status status="PASS" endtime="20171020 13:10:54.288" starttime="20171020 13:10:54.288"></status>
</kw>
<status status="PASS" endtime="20171020 13:10:54.289" starttime="20171020 13:10:53.837"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:10:54.292">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171020 13:10:54.293" starttime="20171020 13:10:54.292"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:10:54.294">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171020 13:10:54.294" starttime="20171020 13:10:54.293"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:10:54.294">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171020 13:10:54.294" starttime="20171020 13:10:54.294"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:10:54.295">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171020 13:10:54.295" starttime="20171020 13:10:54.295"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:10:54.474">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171020 13:10:54.474" starttime="20171020 13:10:54.296"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:10:54.474">${status} = PASS</msg>
<msg level="INFO" timestamp="20171020 13:10:54.474">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:10:54.474" starttime="20171020 13:10:54.295"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:10:54.475">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:10:54.475" starttime="20171020 13:10:54.475"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:10:54.476">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:10:54.476" starttime="20171020 13:10:54.475"></status>
</kw>
<status status="PASS" endtime="20171020 13:10:54.476" starttime="20171020 13:10:54.292"></status>
</kw>
<status status="PASS" endtime="20171020 13:10:54.476" starttime="20171020 13:10:54.291"></status>
</kw>
<status status="PASS" endtime="20171020 13:10:54.476" starttime="20171020 13:10:54.291"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:10:54.477">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" endtime="20171020 13:10:54.477" starttime="20171020 13:10:54.476"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:10:54.479">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" endtime="20171020 13:10:54.479" starttime="20171020 13:10:54.478"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:10:54.480">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" endtime="20171020 13:10:54.480" starttime="20171020 13:10:54.480"></status>
</kw>
<status status="PASS" endtime="20171020 13:10:54.480" starttime="20171020 13:10:54.479"></status>
</kw>
<status status="PASS" endtime="20171020 13:10:54.480" starttime="20171020 13:10:54.478"></status>
</kw>
<status status="PASS" endtime="20171020 13:10:54.480" starttime="20171020 13:10:54.477"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:10:54.669">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20171020 13:10:54.669">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:10:54.670" starttime="20171020 13:10:54.481"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:10:54.671">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171020 13:10:54.671" starttime="20171020 13:10:54.671"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:10:54.672">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171020 13:10:54.673" starttime="20171020 13:10:54.672"></status>
</kw>
<status status="PASS" endtime="20171020 13:10:54.673" starttime="20171020 13:10:54.672"></status>
</kw>
<status status="PASS" endtime="20171020 13:10:54.673" starttime="20171020 13:10:54.670"></status>
</kw>
<status status="PASS" endtime="20171020 13:10:54.673" starttime="20171020 13:10:54.670"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171020 13:10:54.673">Delete All Sessions</msg>
<status status="PASS" endtime="20171020 13:10:54.673" starttime="20171020 13:10:54.673"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:10:54.673">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:10:54.674" starttime="20171020 13:10:54.290"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:10:54.674">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:10:54.674" starttime="20171020 13:10:54.674"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:10:54.675">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171020 13:10:54.675">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171020 13:10:54.675">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20171020 13:10:54.675" starttime="20171020 13:10:54.674"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:10:54.675">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status status="PASS" endtime="20171020 13:10:54.675" starttime="20171020 13:10:54.289"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:10:54.676">${host_state} = Running</msg>
<status status="PASS" endtime="20171020 13:10:54.676" starttime="20171020 13:10:54.289"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status status="PASS" endtime="20171020 13:10:54.676" starttime="20171020 13:10:54.676"></status>
</kw>
<kw name="Is OS Booted" library="state_manager">
<doc>Check OS status.</doc>
<kw name="Get Host State Attribute" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>BootProgress</arg>
</arguments>
<assign>
<var>${boot_stage}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>${host_attribute}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:10:54.681">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171020 13:10:54.681" starttime="20171020 13:10:54.680"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:10:54.682">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171020 13:10:54.682" starttime="20171020 13:10:54.681"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:10:54.682">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171020 13:10:54.682" starttime="20171020 13:10:54.682"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:10:54.683">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171020 13:10:54.683" starttime="20171020 13:10:54.683"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:10:54.867">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171020 13:10:54.868" starttime="20171020 13:10:54.684"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:10:54.868">${status} = PASS</msg>
<msg level="INFO" timestamp="20171020 13:10:54.868">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:10:54.868" starttime="20171020 13:10:54.683"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:10:54.868">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:10:54.869" starttime="20171020 13:10:54.868"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:10:54.869">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:10:54.869" starttime="20171020 13:10:54.869"></status>
</kw>
<status status="PASS" endtime="20171020 13:10:54.869" starttime="20171020 13:10:54.680"></status>
</kw>
<status status="PASS" endtime="20171020 13:10:54.869" starttime="20171020 13:10:54.679"></status>
</kw>
<status status="PASS" endtime="20171020 13:10:54.870" starttime="20171020 13:10:54.679"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:10:54.870">${base_uri} = /xyz/openbmc_project/state/host0//attr/BootProgress</msg>
<status status="PASS" endtime="20171020 13:10:54.870" starttime="20171020 13:10:54.870"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:10:54.872">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status status="PASS" endtime="20171020 13:10:54.872" starttime="20171020 13:10:54.872"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:10:54.873">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status status="PASS" endtime="20171020 13:10:54.873" starttime="20171020 13:10:54.873"></status>
</kw>
<status status="PASS" endtime="20171020 13:10:54.873" starttime="20171020 13:10:54.873"></status>
</kw>
<status status="PASS" endtime="20171020 13:10:54.874" starttime="20171020 13:10:54.871"></status>
</kw>
<status status="PASS" endtime="20171020 13:10:54.874" starttime="20171020 13:10:54.871"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:10:55.331">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/BootProgress, headers=None json=None</msg>
<msg level="INFO" timestamp="20171020 13:10:55.331">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:10:55.331" starttime="20171020 13:10:54.874"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:10:55.333">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171020 13:10:55.333" starttime="20171020 13:10:55.333"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:10:55.334">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171020 13:10:55.334" starttime="20171020 13:10:55.334"></status>
</kw>
<status status="PASS" endtime="20171020 13:10:55.334" starttime="20171020 13:10:55.333"></status>
</kw>
<status status="PASS" endtime="20171020 13:10:55.334" starttime="20171020 13:10:55.332"></status>
</kw>
<status status="PASS" endtime="20171020 13:10:55.334" starttime="20171020 13:10:55.332"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171020 13:10:55.335">Delete All Sessions</msg>
<status status="PASS" endtime="20171020 13:10:55.335" starttime="20171020 13:10:55.335"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:10:55.335">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:10:55.335" starttime="20171020 13:10:54.678"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:10:55.336">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:10:55.336" starttime="20171020 13:10:55.335"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:10:55.336">To JSON using : content={
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171020 13:10:55.336">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171020 13:10:55.337">${content} = {u'data': u'xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20171020 13:10:55.337" starttime="20171020 13:10:55.336"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:10:55.337">${state} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart</msg>
<status status="PASS" endtime="20171020 13:10:55.337" starttime="20171020 13:10:54.677"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:10:55.337">${boot_stage} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart</msg>
<status status="PASS" endtime="20171020 13:10:55.337" starttime="20171020 13:10:54.677"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${OS_BOOT_START}</arg>
<arg>${boot_stage}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:10:55.338">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:10:55.338" starttime="20171020 13:10:55.337"></status>
</kw>
<kw name="Get Host State Attribute" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>OperatingSystemState</arg>
</arguments>
<assign>
<var>${os_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>${host_attribute}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:10:55.341">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171020 13:10:55.342" starttime="20171020 13:10:55.341"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:10:55.342">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171020 13:10:55.342" starttime="20171020 13:10:55.342"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:10:55.343">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171020 13:10:55.343" starttime="20171020 13:10:55.343"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:10:55.344">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171020 13:10:55.344" starttime="20171020 13:10:55.343"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:10:55.604">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171020 13:10:55.604" starttime="20171020 13:10:55.344"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:10:55.604">${status} = PASS</msg>
<msg level="INFO" timestamp="20171020 13:10:55.604">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:10:55.604" starttime="20171020 13:10:55.344"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:10:55.605">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:10:55.605" starttime="20171020 13:10:55.604"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:10:55.605">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:10:55.605" starttime="20171020 13:10:55.605"></status>
</kw>
<status status="PASS" endtime="20171020 13:10:55.605" starttime="20171020 13:10:55.341"></status>
</kw>
<status status="PASS" endtime="20171020 13:10:55.606" starttime="20171020 13:10:55.340"></status>
</kw>
<status status="PASS" endtime="20171020 13:10:55.606" starttime="20171020 13:10:55.340"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:10:55.606">${base_uri} = /xyz/openbmc_project/state/host0//attr/OperatingSystemState</msg>
<status status="PASS" endtime="20171020 13:10:55.606" starttime="20171020 13:10:55.606"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:10:55.608">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/OperatingSystemState, method:Get, args:{}</msg>
<status status="PASS" endtime="20171020 13:10:55.608" starttime="20171020 13:10:55.608"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:10:55.609">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/OperatingSystemState, method:Get, args:{}</msg>
<status status="PASS" endtime="20171020 13:10:55.609" starttime="20171020 13:10:55.609"></status>
</kw>
<status status="PASS" endtime="20171020 13:10:55.609" starttime="20171020 13:10:55.609"></status>
</kw>
<status status="PASS" endtime="20171020 13:10:55.610" starttime="20171020 13:10:55.607"></status>
</kw>
<status status="PASS" endtime="20171020 13:10:55.610" starttime="20171020 13:10:55.607"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:10:55.754">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/OperatingSystemState, headers=None json=None</msg>
<msg level="INFO" timestamp="20171020 13:10:55.754">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:10:55.754" starttime="20171020 13:10:55.610"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:10:55.756">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171020 13:10:55.756" starttime="20171020 13:10:55.755"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:10:55.757">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171020 13:10:55.757" starttime="20171020 13:10:55.756"></status>
</kw>
<status status="PASS" endtime="20171020 13:10:55.757" starttime="20171020 13:10:55.756"></status>
</kw>
<status status="PASS" endtime="20171020 13:10:55.757" starttime="20171020 13:10:55.755"></status>
</kw>
<status status="PASS" endtime="20171020 13:10:55.757" starttime="20171020 13:10:55.754"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171020 13:10:55.757">Delete All Sessions</msg>
<status status="PASS" endtime="20171020 13:10:55.758" starttime="20171020 13:10:55.757"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:10:55.758">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:10:55.758" starttime="20171020 13:10:55.339"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:10:55.758">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:10:55.758" starttime="20171020 13:10:55.758"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:10:55.759">To JSON using : content={
  "data": "xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171020 13:10:55.759">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171020 13:10:55.759">${content} = {u'data': u'xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20171020 13:10:55.759" starttime="20171020 13:10:55.759"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:10:55.759">${state} = xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive</msg>
<status status="PASS" endtime="20171020 13:10:55.759" starttime="20171020 13:10:55.338"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:10:55.760">${os_state} = xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive</msg>
<status status="PASS" endtime="20171020 13:10:55.760" starttime="20171020 13:10:55.338"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${OS_BOOT_COMPLETE}</arg>
<arg>${os_state}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:10:55.760">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg level="FAIL" timestamp="20171020 13:10:55.761">xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.BootComplete != xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive</msg>
<status status="FAIL" endtime="20171020 13:10:55.761" starttime="20171020 13:10:55.760"></status>
</kw>
<status status="FAIL" endtime="20171020 13:10:55.761" starttime="20171020 13:10:54.676"></status>
</kw>
<status status="FAIL" endtime="20171020 13:10:55.761" starttime="20171020 13:10:53.836"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:11:05.768">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171020 13:11:05.768" starttime="20171020 13:11:05.767"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:11:05.769">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171020 13:11:05.769" starttime="20171020 13:11:05.768"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:11:05.769">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171020 13:11:05.769" starttime="20171020 13:11:05.769"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:11:05.770">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171020 13:11:05.770" starttime="20171020 13:11:05.770"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:11:05.981">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171020 13:11:05.981" starttime="20171020 13:11:05.771"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:11:05.981">${status} = PASS</msg>
<msg level="INFO" timestamp="20171020 13:11:05.981">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:11:05.981" starttime="20171020 13:11:05.770"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:11:05.982">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:11:05.982" starttime="20171020 13:11:05.982"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:11:05.983">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:11:05.983" starttime="20171020 13:11:05.982"></status>
</kw>
<status status="PASS" endtime="20171020 13:11:05.983" starttime="20171020 13:11:05.766"></status>
</kw>
<status status="PASS" endtime="20171020 13:11:05.983" starttime="20171020 13:11:05.766"></status>
</kw>
<status status="PASS" endtime="20171020 13:11:05.983" starttime="20171020 13:11:05.765"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:11:05.984">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" endtime="20171020 13:11:05.984" starttime="20171020 13:11:05.983"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:11:05.986">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" endtime="20171020 13:11:05.986" starttime="20171020 13:11:05.985"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:11:05.987">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" endtime="20171020 13:11:05.987" starttime="20171020 13:11:05.987"></status>
</kw>
<status status="PASS" endtime="20171020 13:11:05.987" starttime="20171020 13:11:05.986"></status>
</kw>
<status status="PASS" endtime="20171020 13:11:05.987" starttime="20171020 13:11:05.985"></status>
</kw>
<status status="PASS" endtime="20171020 13:11:05.987" starttime="20171020 13:11:05.984"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:11:06.058">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20171020 13:11:06.058">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:11:06.058" starttime="20171020 13:11:05.987"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:11:06.060">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171020 13:11:06.060" starttime="20171020 13:11:06.059"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:11:06.061">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171020 13:11:06.061" starttime="20171020 13:11:06.061"></status>
</kw>
<status status="PASS" endtime="20171020 13:11:06.061" starttime="20171020 13:11:06.060"></status>
</kw>
<status status="PASS" endtime="20171020 13:11:06.062" starttime="20171020 13:11:06.059"></status>
</kw>
<status status="PASS" endtime="20171020 13:11:06.062" starttime="20171020 13:11:06.059"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171020 13:11:06.062">Delete All Sessions</msg>
<status status="PASS" endtime="20171020 13:11:06.062" starttime="20171020 13:11:06.062"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:11:06.062">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:11:06.062" starttime="20171020 13:11:05.764"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:11:06.063">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:11:06.063" starttime="20171020 13:11:06.063"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:11:06.064">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171020 13:11:06.064">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171020 13:11:06.064">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20171020 13:11:06.064" starttime="20171020 13:11:06.063"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:11:06.064">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status status="PASS" endtime="20171020 13:11:06.064" starttime="20171020 13:11:05.763"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:11:06.064">${power_state} = On</msg>
<status status="PASS" endtime="20171020 13:11:06.065" starttime="20171020 13:11:05.763"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status status="PASS" endtime="20171020 13:11:06.065" starttime="20171020 13:11:06.065"></status>
</kw>
<status status="PASS" endtime="20171020 13:11:06.065" starttime="20171020 13:11:05.762"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:11:06.069">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171020 13:11:06.069" starttime="20171020 13:11:06.068"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:11:06.070">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171020 13:11:06.070" starttime="20171020 13:11:06.069"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:11:06.070">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171020 13:11:06.070" starttime="20171020 13:11:06.070"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:11:06.071">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171020 13:11:06.071" starttime="20171020 13:11:06.071"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:11:06.353">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171020 13:11:06.353" starttime="20171020 13:11:06.072"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:11:06.353">${status} = PASS</msg>
<msg level="INFO" timestamp="20171020 13:11:06.353">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:11:06.353" starttime="20171020 13:11:06.071"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:11:06.354">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:11:06.354" starttime="20171020 13:11:06.353"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:11:06.354">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:11:06.354" starttime="20171020 13:11:06.354"></status>
</kw>
<status status="PASS" endtime="20171020 13:11:06.355" starttime="20171020 13:11:06.068"></status>
</kw>
<status status="PASS" endtime="20171020 13:11:06.355" starttime="20171020 13:11:06.067"></status>
</kw>
<status status="PASS" endtime="20171020 13:11:06.355" starttime="20171020 13:11:06.067"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:11:06.355">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" endtime="20171020 13:11:06.355" starttime="20171020 13:11:06.355"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:11:06.358">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" endtime="20171020 13:11:06.358" starttime="20171020 13:11:06.357"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:11:06.359">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" endtime="20171020 13:11:06.359" starttime="20171020 13:11:06.359"></status>
</kw>
<status status="PASS" endtime="20171020 13:11:06.359" starttime="20171020 13:11:06.358"></status>
</kw>
<status status="PASS" endtime="20171020 13:11:06.359" starttime="20171020 13:11:06.356"></status>
</kw>
<status status="PASS" endtime="20171020 13:11:06.359" starttime="20171020 13:11:06.356"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:11:06.478">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20171020 13:11:06.478">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:11:06.478" starttime="20171020 13:11:06.359"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:11:06.480">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171020 13:11:06.480" starttime="20171020 13:11:06.479"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:11:06.481">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171020 13:11:06.481" starttime="20171020 13:11:06.480"></status>
</kw>
<status status="PASS" endtime="20171020 13:11:06.481" starttime="20171020 13:11:06.480"></status>
</kw>
<status status="PASS" endtime="20171020 13:11:06.481" starttime="20171020 13:11:06.479"></status>
</kw>
<status status="PASS" endtime="20171020 13:11:06.481" starttime="20171020 13:11:06.478"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171020 13:11:06.481">Delete All Sessions</msg>
<status status="PASS" endtime="20171020 13:11:06.481" starttime="20171020 13:11:06.481"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:11:06.482">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:11:06.482" starttime="20171020 13:11:06.066"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:11:06.483">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:11:06.483" starttime="20171020 13:11:06.482"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:11:06.484">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171020 13:11:06.484">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171020 13:11:06.484">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20171020 13:11:06.484" starttime="20171020 13:11:06.483"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:11:06.484">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status status="PASS" endtime="20171020 13:11:06.484" starttime="20171020 13:11:06.066"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:11:06.484">${host_state} = Running</msg>
<status status="PASS" endtime="20171020 13:11:06.485" starttime="20171020 13:11:06.065"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status status="PASS" endtime="20171020 13:11:06.485" starttime="20171020 13:11:06.485"></status>
</kw>
<kw name="Is OS Booted" library="state_manager">
<doc>Check OS status.</doc>
<kw name="Get Host State Attribute" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>BootProgress</arg>
</arguments>
<assign>
<var>${boot_stage}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>${host_attribute}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:11:06.489">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171020 13:11:06.489" starttime="20171020 13:11:06.489"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:11:06.490">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171020 13:11:06.490" starttime="20171020 13:11:06.490"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:11:06.491">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171020 13:11:06.491" starttime="20171020 13:11:06.490"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:11:06.491">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171020 13:11:06.491" starttime="20171020 13:11:06.491"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:11:06.938">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171020 13:11:06.938" starttime="20171020 13:11:06.492"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:11:06.938">${status} = PASS</msg>
<msg level="INFO" timestamp="20171020 13:11:06.939">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:11:06.939" starttime="20171020 13:11:06.492"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:11:06.939">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:11:06.939" starttime="20171020 13:11:06.939"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:11:06.940">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:11:06.940" starttime="20171020 13:11:06.940"></status>
</kw>
<status status="PASS" endtime="20171020 13:11:06.940" starttime="20171020 13:11:06.488"></status>
</kw>
<status status="PASS" endtime="20171020 13:11:06.940" starttime="20171020 13:11:06.488"></status>
</kw>
<status status="PASS" endtime="20171020 13:11:06.940" starttime="20171020 13:11:06.487"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:11:06.941">${base_uri} = /xyz/openbmc_project/state/host0//attr/BootProgress</msg>
<status status="PASS" endtime="20171020 13:11:06.941" starttime="20171020 13:11:06.941"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:11:06.943">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status status="PASS" endtime="20171020 13:11:06.943" starttime="20171020 13:11:06.942"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:11:06.944">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status status="PASS" endtime="20171020 13:11:06.944" starttime="20171020 13:11:06.944"></status>
</kw>
<status status="PASS" endtime="20171020 13:11:06.944" starttime="20171020 13:11:06.943"></status>
</kw>
<status status="PASS" endtime="20171020 13:11:06.944" starttime="20171020 13:11:06.942"></status>
</kw>
<status status="PASS" endtime="20171020 13:11:06.944" starttime="20171020 13:11:06.941"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:11:07.034">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/BootProgress, headers=None json=None</msg>
<msg level="INFO" timestamp="20171020 13:11:07.035">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:11:07.035" starttime="20171020 13:11:06.945"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:11:07.036">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171020 13:11:07.037" starttime="20171020 13:11:07.036"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:11:07.037">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171020 13:11:07.038" starttime="20171020 13:11:07.037"></status>
</kw>
<status status="PASS" endtime="20171020 13:11:07.038" starttime="20171020 13:11:07.037"></status>
</kw>
<status status="PASS" endtime="20171020 13:11:07.038" starttime="20171020 13:11:07.035"></status>
</kw>
<status status="PASS" endtime="20171020 13:11:07.038" starttime="20171020 13:11:07.035"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171020 13:11:07.038">Delete All Sessions</msg>
<status status="PASS" endtime="20171020 13:11:07.038" starttime="20171020 13:11:07.038"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:11:07.039">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:11:07.039" starttime="20171020 13:11:06.486"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:11:07.039">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:11:07.039" starttime="20171020 13:11:07.039"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:11:07.040">To JSON using : content={
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171020 13:11:07.040">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171020 13:11:07.040">${content} = {u'data': u'xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20171020 13:11:07.040" starttime="20171020 13:11:07.040"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:11:07.041">${state} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart</msg>
<status status="PASS" endtime="20171020 13:11:07.041" starttime="20171020 13:11:06.486"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:11:07.041">${boot_stage} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart</msg>
<status status="PASS" endtime="20171020 13:11:07.041" starttime="20171020 13:11:06.486"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${OS_BOOT_START}</arg>
<arg>${boot_stage}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:11:07.041">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:11:07.041" starttime="20171020 13:11:07.041"></status>
</kw>
<kw name="Get Host State Attribute" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>OperatingSystemState</arg>
</arguments>
<assign>
<var>${os_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>${host_attribute}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:11:07.048">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171020 13:11:07.048" starttime="20171020 13:11:07.047"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:11:07.049">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171020 13:11:07.049" starttime="20171020 13:11:07.048"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:11:07.050">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171020 13:11:07.050" starttime="20171020 13:11:07.049"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:11:07.050">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171020 13:11:07.050" starttime="20171020 13:11:07.050"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:11:07.348">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171020 13:11:07.348" starttime="20171020 13:11:07.051"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:11:07.348">${status} = PASS</msg>
<msg level="INFO" timestamp="20171020 13:11:07.348">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:11:07.348" starttime="20171020 13:11:07.051"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:11:07.349">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:11:07.349" starttime="20171020 13:11:07.348"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:11:07.349">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:11:07.349" starttime="20171020 13:11:07.349"></status>
</kw>
<status status="PASS" endtime="20171020 13:11:07.349" starttime="20171020 13:11:07.047"></status>
</kw>
<status status="PASS" endtime="20171020 13:11:07.349" starttime="20171020 13:11:07.044"></status>
</kw>
<status status="PASS" endtime="20171020 13:11:07.350" starttime="20171020 13:11:07.043"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:11:07.350">${base_uri} = /xyz/openbmc_project/state/host0//attr/OperatingSystemState</msg>
<status status="PASS" endtime="20171020 13:11:07.350" starttime="20171020 13:11:07.350"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:11:07.352">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/OperatingSystemState, method:Get, args:{}</msg>
<status status="PASS" endtime="20171020 13:11:07.352" starttime="20171020 13:11:07.352"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:11:07.353">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/OperatingSystemState, method:Get, args:{}</msg>
<status status="PASS" endtime="20171020 13:11:07.353" starttime="20171020 13:11:07.353"></status>
</kw>
<status status="PASS" endtime="20171020 13:11:07.354" starttime="20171020 13:11:07.353"></status>
</kw>
<status status="PASS" endtime="20171020 13:11:07.354" starttime="20171020 13:11:07.351"></status>
</kw>
<status status="PASS" endtime="20171020 13:11:07.354" starttime="20171020 13:11:07.351"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:11:07.445">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/OperatingSystemState, headers=None json=None</msg>
<msg level="INFO" timestamp="20171020 13:11:07.445">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:11:07.445" starttime="20171020 13:11:07.354"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:11:07.446">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171020 13:11:07.446" starttime="20171020 13:11:07.446"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:11:07.448">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171020 13:11:07.448" starttime="20171020 13:11:07.447"></status>
</kw>
<status status="PASS" endtime="20171020 13:11:07.448" starttime="20171020 13:11:07.447"></status>
</kw>
<status status="PASS" endtime="20171020 13:11:07.448" starttime="20171020 13:11:07.445"></status>
</kw>
<status status="PASS" endtime="20171020 13:11:07.448" starttime="20171020 13:11:07.445"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171020 13:11:07.448">Delete All Sessions</msg>
<status status="PASS" endtime="20171020 13:11:07.449" starttime="20171020 13:11:07.448"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:11:07.449">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:11:07.449" starttime="20171020 13:11:07.043"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:11:07.449">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:11:07.449" starttime="20171020 13:11:07.449"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:11:07.450">To JSON using : content={
  "data": "xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171020 13:11:07.450">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171020 13:11:07.450">${content} = {u'data': u'xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20171020 13:11:07.450" starttime="20171020 13:11:07.450"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:11:07.451">${state} = xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive</msg>
<status status="PASS" endtime="20171020 13:11:07.451" starttime="20171020 13:11:07.042"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:11:07.451">${os_state} = xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive</msg>
<status status="PASS" endtime="20171020 13:11:07.451" starttime="20171020 13:11:07.042"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${OS_BOOT_COMPLETE}</arg>
<arg>${os_state}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:11:07.451">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg level="FAIL" timestamp="20171020 13:11:07.452">xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.BootComplete != xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive</msg>
<status status="FAIL" endtime="20171020 13:11:07.452" starttime="20171020 13:11:07.451"></status>
</kw>
<status status="FAIL" endtime="20171020 13:11:07.452" starttime="20171020 13:11:06.485"></status>
</kw>
<status status="FAIL" endtime="20171020 13:11:07.452" starttime="20171020 13:11:05.762"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:11:17.457">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171020 13:11:17.458" starttime="20171020 13:11:17.457"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:11:17.458">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171020 13:11:17.458" starttime="20171020 13:11:17.458"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:11:17.459">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171020 13:11:17.459" starttime="20171020 13:11:17.458"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:11:17.459">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171020 13:11:17.460" starttime="20171020 13:11:17.459"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:11:17.637">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171020 13:11:17.638" starttime="20171020 13:11:17.460"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:11:17.638">${status} = PASS</msg>
<msg level="INFO" timestamp="20171020 13:11:17.638">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:11:17.638" starttime="20171020 13:11:17.460"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:11:17.638">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:11:17.639" starttime="20171020 13:11:17.638"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:11:17.639">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:11:17.639" starttime="20171020 13:11:17.639"></status>
</kw>
<status status="PASS" endtime="20171020 13:11:17.639" starttime="20171020 13:11:17.456"></status>
</kw>
<status status="PASS" endtime="20171020 13:11:17.639" starttime="20171020 13:11:17.456"></status>
</kw>
<status status="PASS" endtime="20171020 13:11:17.640" starttime="20171020 13:11:17.455"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:11:17.640">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" endtime="20171020 13:11:17.640" starttime="20171020 13:11:17.640"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:11:17.642">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" endtime="20171020 13:11:17.642" starttime="20171020 13:11:17.642"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:11:17.643">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" endtime="20171020 13:11:17.643" starttime="20171020 13:11:17.643"></status>
</kw>
<status status="PASS" endtime="20171020 13:11:17.643" starttime="20171020 13:11:17.642"></status>
</kw>
<status status="PASS" endtime="20171020 13:11:17.644" starttime="20171020 13:11:17.641"></status>
</kw>
<status status="PASS" endtime="20171020 13:11:17.644" starttime="20171020 13:11:17.640"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:11:17.708">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20171020 13:11:17.708">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:11:17.708" starttime="20171020 13:11:17.644"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:11:17.710">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171020 13:11:17.710" starttime="20171020 13:11:17.709"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:11:17.711">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171020 13:11:17.711" starttime="20171020 13:11:17.711"></status>
</kw>
<status status="PASS" endtime="20171020 13:11:17.711" starttime="20171020 13:11:17.710"></status>
</kw>
<status status="PASS" endtime="20171020 13:11:17.711" starttime="20171020 13:11:17.709"></status>
</kw>
<status status="PASS" endtime="20171020 13:11:17.711" starttime="20171020 13:11:17.708"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171020 13:11:17.712">Delete All Sessions</msg>
<status status="PASS" endtime="20171020 13:11:17.712" starttime="20171020 13:11:17.711"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:11:17.712">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:11:17.712" starttime="20171020 13:11:17.455"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:11:17.713">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:11:17.713" starttime="20171020 13:11:17.712"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:11:17.713">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171020 13:11:17.713">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171020 13:11:17.713">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20171020 13:11:17.714" starttime="20171020 13:11:17.713"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:11:17.714">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status status="PASS" endtime="20171020 13:11:17.714" starttime="20171020 13:11:17.454"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:11:17.714">${power_state} = On</msg>
<status status="PASS" endtime="20171020 13:11:17.714" starttime="20171020 13:11:17.454"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status status="PASS" endtime="20171020 13:11:17.715" starttime="20171020 13:11:17.714"></status>
</kw>
<status status="PASS" endtime="20171020 13:11:17.715" starttime="20171020 13:11:17.453"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:11:17.718">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171020 13:11:17.719" starttime="20171020 13:11:17.718"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:11:17.720">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171020 13:11:17.720" starttime="20171020 13:11:17.720"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:11:17.721">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171020 13:11:17.721" starttime="20171020 13:11:17.721"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:11:17.722">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171020 13:11:17.722" starttime="20171020 13:11:17.722"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:11:18.023">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171020 13:11:18.023" starttime="20171020 13:11:17.723"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:11:18.023">${status} = PASS</msg>
<msg level="INFO" timestamp="20171020 13:11:18.023">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:11:18.023" starttime="20171020 13:11:17.723"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:11:18.024">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:11:18.024" starttime="20171020 13:11:18.023"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:11:18.025">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:11:18.025" starttime="20171020 13:11:18.024"></status>
</kw>
<status status="PASS" endtime="20171020 13:11:18.025" starttime="20171020 13:11:17.717"></status>
</kw>
<status status="PASS" endtime="20171020 13:11:18.025" starttime="20171020 13:11:17.717"></status>
</kw>
<status status="PASS" endtime="20171020 13:11:18.025" starttime="20171020 13:11:17.716"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:11:18.026">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" endtime="20171020 13:11:18.026" starttime="20171020 13:11:18.026"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:11:18.029">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" endtime="20171020 13:11:18.029" starttime="20171020 13:11:18.028"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:11:18.031">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" endtime="20171020 13:11:18.031" starttime="20171020 13:11:18.030"></status>
</kw>
<status status="PASS" endtime="20171020 13:11:18.031" starttime="20171020 13:11:18.029"></status>
</kw>
<status status="PASS" endtime="20171020 13:11:18.031" starttime="20171020 13:11:18.027"></status>
</kw>
<status status="PASS" endtime="20171020 13:11:18.031" starttime="20171020 13:11:18.027"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:11:18.120">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20171020 13:11:18.120">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:11:18.120" starttime="20171020 13:11:18.031"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:11:18.122">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171020 13:11:18.122" starttime="20171020 13:11:18.121"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:11:18.123">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171020 13:11:18.123" starttime="20171020 13:11:18.123"></status>
</kw>
<status status="PASS" endtime="20171020 13:11:18.123" starttime="20171020 13:11:18.122"></status>
</kw>
<status status="PASS" endtime="20171020 13:11:18.123" starttime="20171020 13:11:18.121"></status>
</kw>
<status status="PASS" endtime="20171020 13:11:18.123" starttime="20171020 13:11:18.120"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171020 13:11:18.124">Delete All Sessions</msg>
<status status="PASS" endtime="20171020 13:11:18.124" starttime="20171020 13:11:18.123"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:11:18.124">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:11:18.124" starttime="20171020 13:11:17.716"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:11:18.125">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:11:18.125" starttime="20171020 13:11:18.124"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:11:18.125">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171020 13:11:18.126">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171020 13:11:18.126">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20171020 13:11:18.126" starttime="20171020 13:11:18.125"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:11:18.126">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status status="PASS" endtime="20171020 13:11:18.126" starttime="20171020 13:11:17.715"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:11:18.127">${host_state} = Running</msg>
<status status="PASS" endtime="20171020 13:11:18.127" starttime="20171020 13:11:17.715"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status status="PASS" endtime="20171020 13:11:18.127" starttime="20171020 13:11:18.127"></status>
</kw>
<kw name="Is OS Booted" library="state_manager">
<doc>Check OS status.</doc>
<kw name="Get Host State Attribute" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>BootProgress</arg>
</arguments>
<assign>
<var>${boot_stage}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>${host_attribute}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:11:18.132">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171020 13:11:18.132" starttime="20171020 13:11:18.131"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:11:18.133">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171020 13:11:18.133" starttime="20171020 13:11:18.133"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:11:18.134">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171020 13:11:18.134" starttime="20171020 13:11:18.134"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:11:18.135">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171020 13:11:18.135" starttime="20171020 13:11:18.135"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:11:18.323">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171020 13:11:18.323" starttime="20171020 13:11:18.136"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:11:18.323">${status} = PASS</msg>
<msg level="INFO" timestamp="20171020 13:11:18.323">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:11:18.323" starttime="20171020 13:11:18.136"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:11:18.324">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:11:18.324" starttime="20171020 13:11:18.324"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:11:18.325">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:11:18.325" starttime="20171020 13:11:18.324"></status>
</kw>
<status status="PASS" endtime="20171020 13:11:18.325" starttime="20171020 13:11:18.131"></status>
</kw>
<status status="PASS" endtime="20171020 13:11:18.325" starttime="20171020 13:11:18.130"></status>
</kw>
<status status="PASS" endtime="20171020 13:11:18.325" starttime="20171020 13:11:18.130"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:11:18.326">${base_uri} = /xyz/openbmc_project/state/host0//attr/BootProgress</msg>
<status status="PASS" endtime="20171020 13:11:18.326" starttime="20171020 13:11:18.325"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:11:18.328">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status status="PASS" endtime="20171020 13:11:18.328" starttime="20171020 13:11:18.327"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:11:18.329">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status status="PASS" endtime="20171020 13:11:18.329" starttime="20171020 13:11:18.329"></status>
</kw>
<status status="PASS" endtime="20171020 13:11:18.329" starttime="20171020 13:11:18.328"></status>
</kw>
<status status="PASS" endtime="20171020 13:11:18.329" starttime="20171020 13:11:18.326"></status>
</kw>
<status status="PASS" endtime="20171020 13:11:18.329" starttime="20171020 13:11:18.326"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:11:18.540">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/BootProgress, headers=None json=None</msg>
<msg level="INFO" timestamp="20171020 13:11:18.540">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:11:18.540" starttime="20171020 13:11:18.330"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:11:18.542">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171020 13:11:18.542" starttime="20171020 13:11:18.541"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:11:18.543">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171020 13:11:18.543" starttime="20171020 13:11:18.542"></status>
</kw>
<status status="PASS" endtime="20171020 13:11:18.543" starttime="20171020 13:11:18.542"></status>
</kw>
<status status="PASS" endtime="20171020 13:11:18.543" starttime="20171020 13:11:18.541"></status>
</kw>
<status status="PASS" endtime="20171020 13:11:18.543" starttime="20171020 13:11:18.540"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171020 13:11:18.543">Delete All Sessions</msg>
<status status="PASS" endtime="20171020 13:11:18.544" starttime="20171020 13:11:18.543"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:11:18.544">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:11:18.544" starttime="20171020 13:11:18.129"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:11:18.544">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:11:18.544" starttime="20171020 13:11:18.544"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:11:18.545">To JSON using : content={
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171020 13:11:18.545">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171020 13:11:18.545">${content} = {u'data': u'xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20171020 13:11:18.545" starttime="20171020 13:11:18.545"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:11:18.545">${state} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart</msg>
<status status="PASS" endtime="20171020 13:11:18.545" starttime="20171020 13:11:18.128"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:11:18.546">${boot_stage} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart</msg>
<status status="PASS" endtime="20171020 13:11:18.546" starttime="20171020 13:11:18.128"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${OS_BOOT_START}</arg>
<arg>${boot_stage}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:11:18.546">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:11:18.546" starttime="20171020 13:11:18.546"></status>
</kw>
<kw name="Get Host State Attribute" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>OperatingSystemState</arg>
</arguments>
<assign>
<var>${os_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>${host_attribute}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:11:18.550">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171020 13:11:18.550" starttime="20171020 13:11:18.550"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:11:18.551">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171020 13:11:18.551" starttime="20171020 13:11:18.551"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:11:18.551">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171020 13:11:18.552" starttime="20171020 13:11:18.551"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:11:18.552">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171020 13:11:18.552" starttime="20171020 13:11:18.552"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:11:18.801">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171020 13:11:18.801" starttime="20171020 13:11:18.553"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:11:18.801">${status} = PASS</msg>
<msg level="INFO" timestamp="20171020 13:11:18.801">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:11:18.801" starttime="20171020 13:11:18.553"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:11:18.802">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:11:18.802" starttime="20171020 13:11:18.802"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:11:18.803">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:11:18.803" starttime="20171020 13:11:18.803"></status>
</kw>
<status status="PASS" endtime="20171020 13:11:18.804" starttime="20171020 13:11:18.549"></status>
</kw>
<status status="PASS" endtime="20171020 13:11:18.804" starttime="20171020 13:11:18.549"></status>
</kw>
<status status="PASS" endtime="20171020 13:11:18.804" starttime="20171020 13:11:18.548"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:11:18.805">${base_uri} = /xyz/openbmc_project/state/host0//attr/OperatingSystemState</msg>
<status status="PASS" endtime="20171020 13:11:18.805" starttime="20171020 13:11:18.804"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:11:18.808">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/OperatingSystemState, method:Get, args:{}</msg>
<status status="PASS" endtime="20171020 13:11:18.808" starttime="20171020 13:11:18.807"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:11:18.809">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/OperatingSystemState, method:Get, args:{}</msg>
<status status="PASS" endtime="20171020 13:11:18.809" starttime="20171020 13:11:18.809"></status>
</kw>
<status status="PASS" endtime="20171020 13:11:18.810" starttime="20171020 13:11:18.808"></status>
</kw>
<status status="PASS" endtime="20171020 13:11:18.810" starttime="20171020 13:11:18.806"></status>
</kw>
<status status="PASS" endtime="20171020 13:11:18.810" starttime="20171020 13:11:18.805"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:11:18.900">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/OperatingSystemState, headers=None json=None</msg>
<msg level="INFO" timestamp="20171020 13:11:18.900">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:11:18.900" starttime="20171020 13:11:18.810"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:11:18.902">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171020 13:11:18.902" starttime="20171020 13:11:18.902"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:11:18.903">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171020 13:11:18.903" starttime="20171020 13:11:18.903"></status>
</kw>
<status status="PASS" endtime="20171020 13:11:18.903" starttime="20171020 13:11:18.902"></status>
</kw>
<status status="PASS" endtime="20171020 13:11:18.903" starttime="20171020 13:11:18.901"></status>
</kw>
<status status="PASS" endtime="20171020 13:11:18.903" starttime="20171020 13:11:18.901"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171020 13:11:18.904">Delete All Sessions</msg>
<status status="PASS" endtime="20171020 13:11:18.904" starttime="20171020 13:11:18.904"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:11:18.904">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:11:18.904" starttime="20171020 13:11:18.547"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:11:18.905">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:11:18.905" starttime="20171020 13:11:18.904"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:11:18.905">To JSON using : content={
  "data": "xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171020 13:11:18.905">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171020 13:11:18.906">${content} = {u'data': u'xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20171020 13:11:18.906" starttime="20171020 13:11:18.905"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:11:18.906">${state} = xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive</msg>
<status status="PASS" endtime="20171020 13:11:18.906" starttime="20171020 13:11:18.547"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:11:18.906">${os_state} = xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive</msg>
<status status="PASS" endtime="20171020 13:11:18.906" starttime="20171020 13:11:18.546"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${OS_BOOT_COMPLETE}</arg>
<arg>${os_state}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:11:18.907">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg level="FAIL" timestamp="20171020 13:11:18.907">xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.BootComplete != xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive</msg>
<status status="FAIL" endtime="20171020 13:11:18.907" starttime="20171020 13:11:18.906"></status>
</kw>
<status status="FAIL" endtime="20171020 13:11:18.907" starttime="20171020 13:11:18.127"></status>
</kw>
<status status="FAIL" endtime="20171020 13:11:18.907" starttime="20171020 13:11:17.452"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:11:28.914">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171020 13:11:28.915" starttime="20171020 13:11:28.914"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:11:28.915">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171020 13:11:28.915" starttime="20171020 13:11:28.915"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:11:28.916">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171020 13:11:28.916" starttime="20171020 13:11:28.916"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:11:28.917">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171020 13:11:28.917" starttime="20171020 13:11:28.916"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:11:29.166">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171020 13:11:29.166" starttime="20171020 13:11:28.917"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:11:29.167">${status} = PASS</msg>
<msg level="INFO" timestamp="20171020 13:11:29.167">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:11:29.167" starttime="20171020 13:11:28.917"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:11:29.167">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:11:29.167" starttime="20171020 13:11:29.167"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:11:29.168">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:11:29.168" starttime="20171020 13:11:29.168"></status>
</kw>
<status status="PASS" endtime="20171020 13:11:29.168" starttime="20171020 13:11:28.912"></status>
</kw>
<status status="PASS" endtime="20171020 13:11:29.168" starttime="20171020 13:11:28.912"></status>
</kw>
<status status="PASS" endtime="20171020 13:11:29.169" starttime="20171020 13:11:28.911"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:11:29.169">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" endtime="20171020 13:11:29.169" starttime="20171020 13:11:29.169"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:11:29.171">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" endtime="20171020 13:11:29.171" starttime="20171020 13:11:29.171"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:11:29.172">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" endtime="20171020 13:11:29.172" starttime="20171020 13:11:29.172"></status>
</kw>
<status status="PASS" endtime="20171020 13:11:29.173" starttime="20171020 13:11:29.172"></status>
</kw>
<status status="PASS" endtime="20171020 13:11:29.173" starttime="20171020 13:11:29.170"></status>
</kw>
<status status="PASS" endtime="20171020 13:11:29.173" starttime="20171020 13:11:29.169"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:11:29.236">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20171020 13:11:29.236">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:11:29.237" starttime="20171020 13:11:29.173"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:11:29.238">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171020 13:11:29.238" starttime="20171020 13:11:29.238"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:11:29.239">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171020 13:11:29.240" starttime="20171020 13:11:29.239"></status>
</kw>
<status status="PASS" endtime="20171020 13:11:29.240" starttime="20171020 13:11:29.238"></status>
</kw>
<status status="PASS" endtime="20171020 13:11:29.240" starttime="20171020 13:11:29.237"></status>
</kw>
<status status="PASS" endtime="20171020 13:11:29.240" starttime="20171020 13:11:29.237"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171020 13:11:29.240">Delete All Sessions</msg>
<status status="PASS" endtime="20171020 13:11:29.240" starttime="20171020 13:11:29.240"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:11:29.241">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:11:29.241" starttime="20171020 13:11:28.910"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:11:29.242">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:11:29.242" starttime="20171020 13:11:29.241"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:11:29.242">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171020 13:11:29.242">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171020 13:11:29.243">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20171020 13:11:29.243" starttime="20171020 13:11:29.242"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:11:29.243">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status status="PASS" endtime="20171020 13:11:29.243" starttime="20171020 13:11:28.909"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:11:29.244">${power_state} = On</msg>
<status status="PASS" endtime="20171020 13:11:29.244" starttime="20171020 13:11:28.909"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status status="PASS" endtime="20171020 13:11:29.244" starttime="20171020 13:11:29.244"></status>
</kw>
<status status="PASS" endtime="20171020 13:11:29.245" starttime="20171020 13:11:28.908"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:11:29.250">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171020 13:11:29.251" starttime="20171020 13:11:29.250"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:11:29.252">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171020 13:11:29.252" starttime="20171020 13:11:29.251"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:11:29.252">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171020 13:11:29.252" starttime="20171020 13:11:29.252"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:11:29.253">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171020 13:11:29.253" starttime="20171020 13:11:29.253"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:11:29.436">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171020 13:11:29.436" starttime="20171020 13:11:29.254"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:11:29.436">${status} = PASS</msg>
<msg level="INFO" timestamp="20171020 13:11:29.436">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:11:29.436" starttime="20171020 13:11:29.253"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:11:29.437">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:11:29.437" starttime="20171020 13:11:29.437"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:11:29.438">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:11:29.438" starttime="20171020 13:11:29.437"></status>
</kw>
<status status="PASS" endtime="20171020 13:11:29.438" starttime="20171020 13:11:29.249"></status>
</kw>
<status status="PASS" endtime="20171020 13:11:29.438" starttime="20171020 13:11:29.249"></status>
</kw>
<status status="PASS" endtime="20171020 13:11:29.438" starttime="20171020 13:11:29.247"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:11:29.439">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" endtime="20171020 13:11:29.439" starttime="20171020 13:11:29.438"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:11:29.441">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" endtime="20171020 13:11:29.441" starttime="20171020 13:11:29.440"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:11:29.442">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" endtime="20171020 13:11:29.442" starttime="20171020 13:11:29.442"></status>
</kw>
<status status="PASS" endtime="20171020 13:11:29.442" starttime="20171020 13:11:29.441"></status>
</kw>
<status status="PASS" endtime="20171020 13:11:29.442" starttime="20171020 13:11:29.439"></status>
</kw>
<status status="PASS" endtime="20171020 13:11:29.443" starttime="20171020 13:11:29.439"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:11:29.694">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20171020 13:11:29.694">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:11:29.694" starttime="20171020 13:11:29.443"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:11:29.696">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171020 13:11:29.696" starttime="20171020 13:11:29.696"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:11:29.697">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171020 13:11:29.697" starttime="20171020 13:11:29.697"></status>
</kw>
<status status="PASS" endtime="20171020 13:11:29.697" starttime="20171020 13:11:29.696"></status>
</kw>
<status status="PASS" endtime="20171020 13:11:29.698" starttime="20171020 13:11:29.695"></status>
</kw>
<status status="PASS" endtime="20171020 13:11:29.698" starttime="20171020 13:11:29.695"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171020 13:11:29.698">Delete All Sessions</msg>
<status status="PASS" endtime="20171020 13:11:29.698" starttime="20171020 13:11:29.698"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:11:29.698">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:11:29.698" starttime="20171020 13:11:29.246"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:11:29.699">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:11:29.699" starttime="20171020 13:11:29.699"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:11:29.700">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171020 13:11:29.700">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171020 13:11:29.700">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20171020 13:11:29.700" starttime="20171020 13:11:29.699"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:11:29.700">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status status="PASS" endtime="20171020 13:11:29.700" starttime="20171020 13:11:29.245"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:11:29.700">${host_state} = Running</msg>
<status status="PASS" endtime="20171020 13:11:29.700" starttime="20171020 13:11:29.245"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status status="PASS" endtime="20171020 13:11:29.701" starttime="20171020 13:11:29.701"></status>
</kw>
<kw name="Is OS Booted" library="state_manager">
<doc>Check OS status.</doc>
<kw name="Get Host State Attribute" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>BootProgress</arg>
</arguments>
<assign>
<var>${boot_stage}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>${host_attribute}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:11:29.705">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171020 13:11:29.705" starttime="20171020 13:11:29.705"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:11:29.706">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171020 13:11:29.706" starttime="20171020 13:11:29.706"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:11:29.706">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171020 13:11:29.707" starttime="20171020 13:11:29.706"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:11:29.707">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171020 13:11:29.707" starttime="20171020 13:11:29.707"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:11:29.887">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171020 13:11:29.887" starttime="20171020 13:11:29.708"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:11:29.887">${status} = PASS</msg>
<msg level="INFO" timestamp="20171020 13:11:29.887">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:11:29.887" starttime="20171020 13:11:29.707"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:11:29.888">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:11:29.888" starttime="20171020 13:11:29.887"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:11:29.888">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:11:29.889" starttime="20171020 13:11:29.888"></status>
</kw>
<status status="PASS" endtime="20171020 13:11:29.889" starttime="20171020 13:11:29.704"></status>
</kw>
<status status="PASS" endtime="20171020 13:11:29.889" starttime="20171020 13:11:29.704"></status>
</kw>
<status status="PASS" endtime="20171020 13:11:29.889" starttime="20171020 13:11:29.703"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:11:29.889">${base_uri} = /xyz/openbmc_project/state/host0//attr/BootProgress</msg>
<status status="PASS" endtime="20171020 13:11:29.890" starttime="20171020 13:11:29.889"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:11:29.892">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status status="PASS" endtime="20171020 13:11:29.892" starttime="20171020 13:11:29.891"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:11:29.893">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status status="PASS" endtime="20171020 13:11:29.893" starttime="20171020 13:11:29.892"></status>
</kw>
<status status="PASS" endtime="20171020 13:11:29.893" starttime="20171020 13:11:29.892"></status>
</kw>
<status status="PASS" endtime="20171020 13:11:29.893" starttime="20171020 13:11:29.890"></status>
</kw>
<status status="PASS" endtime="20171020 13:11:29.893" starttime="20171020 13:11:29.890"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:11:29.981">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/BootProgress, headers=None json=None</msg>
<msg level="INFO" timestamp="20171020 13:11:29.982">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:11:29.982" starttime="20171020 13:11:29.893"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:11:29.984">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171020 13:11:29.984" starttime="20171020 13:11:29.983"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:11:29.985">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171020 13:11:29.985" starttime="20171020 13:11:29.984"></status>
</kw>
<status status="PASS" endtime="20171020 13:11:29.985" starttime="20171020 13:11:29.984"></status>
</kw>
<status status="PASS" endtime="20171020 13:11:29.985" starttime="20171020 13:11:29.983"></status>
</kw>
<status status="PASS" endtime="20171020 13:11:29.985" starttime="20171020 13:11:29.982"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171020 13:11:29.985">Delete All Sessions</msg>
<status status="PASS" endtime="20171020 13:11:29.985" starttime="20171020 13:11:29.985"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:11:29.986">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:11:29.986" starttime="20171020 13:11:29.702"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:11:29.986">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:11:29.986" starttime="20171020 13:11:29.986"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:11:29.987">To JSON using : content={
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171020 13:11:29.987">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171020 13:11:29.987">${content} = {u'data': u'xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20171020 13:11:29.987" starttime="20171020 13:11:29.987"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:11:29.987">${state} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart</msg>
<status status="PASS" endtime="20171020 13:11:29.987" starttime="20171020 13:11:29.702"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:11:29.988">${boot_stage} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart</msg>
<status status="PASS" endtime="20171020 13:11:29.988" starttime="20171020 13:11:29.701"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${OS_BOOT_START}</arg>
<arg>${boot_stage}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:11:29.988">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:11:29.988" starttime="20171020 13:11:29.988"></status>
</kw>
<kw name="Get Host State Attribute" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>OperatingSystemState</arg>
</arguments>
<assign>
<var>${os_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>${host_attribute}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:11:29.992">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171020 13:11:29.993" starttime="20171020 13:11:29.992"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:11:29.993">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171020 13:11:29.993" starttime="20171020 13:11:29.993"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:11:29.994">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171020 13:11:29.994" starttime="20171020 13:11:29.994"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:11:29.995">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171020 13:11:29.995" starttime="20171020 13:11:29.994"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:11:30.176">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171020 13:11:30.176" starttime="20171020 13:11:29.995"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:11:30.176">${status} = PASS</msg>
<msg level="INFO" timestamp="20171020 13:11:30.176">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:11:30.177" starttime="20171020 13:11:29.995"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:11:30.177">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:11:30.177" starttime="20171020 13:11:30.177"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:11:30.178">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:11:30.178" starttime="20171020 13:11:30.177"></status>
</kw>
<status status="PASS" endtime="20171020 13:11:30.178" starttime="20171020 13:11:29.991"></status>
</kw>
<status status="PASS" endtime="20171020 13:11:30.178" starttime="20171020 13:11:29.991"></status>
</kw>
<status status="PASS" endtime="20171020 13:11:30.178" starttime="20171020 13:11:29.990"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:11:30.179">${base_uri} = /xyz/openbmc_project/state/host0//attr/OperatingSystemState</msg>
<status status="PASS" endtime="20171020 13:11:30.179" starttime="20171020 13:11:30.178"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:11:30.181">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/OperatingSystemState, method:Get, args:{}</msg>
<status status="PASS" endtime="20171020 13:11:30.181" starttime="20171020 13:11:30.180"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:11:30.182">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/OperatingSystemState, method:Get, args:{}</msg>
<status status="PASS" endtime="20171020 13:11:30.182" starttime="20171020 13:11:30.182"></status>
</kw>
<status status="PASS" endtime="20171020 13:11:30.182" starttime="20171020 13:11:30.181"></status>
</kw>
<status status="PASS" endtime="20171020 13:11:30.182" starttime="20171020 13:11:30.180"></status>
</kw>
<status status="PASS" endtime="20171020 13:11:30.182" starttime="20171020 13:11:30.179"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:11:30.406">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/OperatingSystemState, headers=None json=None</msg>
<msg level="INFO" timestamp="20171020 13:11:30.406">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:11:30.406" starttime="20171020 13:11:30.183"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:11:30.408">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171020 13:11:30.408" starttime="20171020 13:11:30.408"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:11:30.412">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171020 13:11:30.412" starttime="20171020 13:11:30.412"></status>
</kw>
<status status="PASS" endtime="20171020 13:11:30.412" starttime="20171020 13:11:30.409"></status>
</kw>
<status status="PASS" endtime="20171020 13:11:30.412" starttime="20171020 13:11:30.407"></status>
</kw>
<status status="PASS" endtime="20171020 13:11:30.412" starttime="20171020 13:11:30.407"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171020 13:11:30.413">Delete All Sessions</msg>
<status status="PASS" endtime="20171020 13:11:30.413" starttime="20171020 13:11:30.413"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:11:30.413">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:11:30.413" starttime="20171020 13:11:29.989"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:11:30.414">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:11:30.414" starttime="20171020 13:11:30.413"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:11:30.414">To JSON using : content={
  "data": "xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171020 13:11:30.415">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171020 13:11:30.415">${content} = {u'data': u'xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20171020 13:11:30.415" starttime="20171020 13:11:30.414"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:11:30.415">${state} = xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive</msg>
<status status="PASS" endtime="20171020 13:11:30.415" starttime="20171020 13:11:29.989"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:11:30.415">${os_state} = xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive</msg>
<status status="PASS" endtime="20171020 13:11:30.415" starttime="20171020 13:11:29.988"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${OS_BOOT_COMPLETE}</arg>
<arg>${os_state}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:11:30.416">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg level="FAIL" timestamp="20171020 13:11:30.416">xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.BootComplete != xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive</msg>
<status status="FAIL" endtime="20171020 13:11:30.416" starttime="20171020 13:11:30.415"></status>
</kw>
<status status="FAIL" endtime="20171020 13:11:30.416" starttime="20171020 13:11:29.701"></status>
</kw>
<status status="FAIL" endtime="20171020 13:11:30.416" starttime="20171020 13:11:28.908"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Is Chassis On" library="state_manager">
<doc>Check if chassis state is "On".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:11:40.421">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171020 13:11:40.422" starttime="20171020 13:11:40.421"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:11:40.422">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171020 13:11:40.422" starttime="20171020 13:11:40.422"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:11:40.423">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171020 13:11:40.423" starttime="20171020 13:11:40.422"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:11:40.423">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171020 13:11:40.424" starttime="20171020 13:11:40.423"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:11:41.641">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171020 13:11:41.641" starttime="20171020 13:11:40.424"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:11:41.642">${status} = PASS</msg>
<msg level="INFO" timestamp="20171020 13:11:41.642">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:11:41.642" starttime="20171020 13:11:40.424"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:11:41.642">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:11:41.642" starttime="20171020 13:11:41.642"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:11:41.643">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:11:41.643" starttime="20171020 13:11:41.643"></status>
</kw>
<status status="PASS" endtime="20171020 13:11:41.643" starttime="20171020 13:11:40.420"></status>
</kw>
<status status="PASS" endtime="20171020 13:11:41.643" starttime="20171020 13:11:40.420"></status>
</kw>
<status status="PASS" endtime="20171020 13:11:41.643" starttime="20171020 13:11:40.419"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:11:41.644">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" endtime="20171020 13:11:41.644" starttime="20171020 13:11:41.644"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:11:41.646">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" endtime="20171020 13:11:41.646" starttime="20171020 13:11:41.645"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:11:41.647">URI:https://9.3.86.161:443/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, method:Get, args:{}</msg>
<status status="PASS" endtime="20171020 13:11:41.647" starttime="20171020 13:11:41.647"></status>
</kw>
<status status="PASS" endtime="20171020 13:11:41.647" starttime="20171020 13:11:41.646"></status>
</kw>
<status status="PASS" endtime="20171020 13:11:41.647" starttime="20171020 13:11:41.645"></status>
</kw>
<status status="PASS" endtime="20171020 13:11:41.648" starttime="20171020 13:11:41.644"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:11:41.713">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg level="INFO" timestamp="20171020 13:11:41.713">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:11:41.713" starttime="20171020 13:11:41.648"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:11:41.715">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171020 13:11:41.715" starttime="20171020 13:11:41.714"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:11:41.715">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171020 13:11:41.716" starttime="20171020 13:11:41.715"></status>
</kw>
<status status="PASS" endtime="20171020 13:11:41.716" starttime="20171020 13:11:41.715"></status>
</kw>
<status status="PASS" endtime="20171020 13:11:41.716" starttime="20171020 13:11:41.714"></status>
</kw>
<status status="PASS" endtime="20171020 13:11:41.716" starttime="20171020 13:11:41.713"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171020 13:11:41.716">Delete All Sessions</msg>
<status status="PASS" endtime="20171020 13:11:41.716" starttime="20171020 13:11:41.716"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:11:41.717">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:11:41.717" starttime="20171020 13:11:40.419"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:11:41.717">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:11:41.717" starttime="20171020 13:11:41.717"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:11:41.718">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.On", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171020 13:11:41.718">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171020 13:11:41.718">${content} = {u'data': u'xyz.openbmc_project.State.Chassis.PowerState.On', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20171020 13:11:41.718" starttime="20171020 13:11:41.718"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:11:41.718">${state} = xyz.openbmc_project.State.Chassis.PowerState.On</msg>
<status status="PASS" endtime="20171020 13:11:41.718" starttime="20171020 13:11:40.418"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:11:41.719">${power_state} = On</msg>
<status status="PASS" endtime="20171020 13:11:41.719" starttime="20171020 13:11:40.418"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>On</arg>
<arg>${power_state}</arg>
</arguments>
<status status="PASS" endtime="20171020 13:11:41.719" starttime="20171020 13:11:41.719"></status>
</kw>
<status status="PASS" endtime="20171020 13:11:41.719" starttime="20171020 13:11:40.417"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:11:41.723">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171020 13:11:41.724" starttime="20171020 13:11:41.723"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:11:41.724">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171020 13:11:41.724" starttime="20171020 13:11:41.724"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:11:41.725">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171020 13:11:41.725" starttime="20171020 13:11:41.725"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:11:41.726">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171020 13:11:41.726" starttime="20171020 13:11:41.725"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:11:41.909">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171020 13:11:41.909" starttime="20171020 13:11:41.726"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:11:41.909">${status} = PASS</msg>
<msg level="INFO" timestamp="20171020 13:11:41.909">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:11:41.909" starttime="20171020 13:11:41.726"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:11:41.909">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:11:41.910" starttime="20171020 13:11:41.909"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:11:41.910">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:11:41.910" starttime="20171020 13:11:41.910"></status>
</kw>
<status status="PASS" endtime="20171020 13:11:41.910" starttime="20171020 13:11:41.722"></status>
</kw>
<status status="PASS" endtime="20171020 13:11:41.910" starttime="20171020 13:11:41.722"></status>
</kw>
<status status="PASS" endtime="20171020 13:11:41.911" starttime="20171020 13:11:41.721"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:11:41.911">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" endtime="20171020 13:11:41.911" starttime="20171020 13:11:41.911"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:11:41.913">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" endtime="20171020 13:11:41.913" starttime="20171020 13:11:41.913"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:11:41.914">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status status="PASS" endtime="20171020 13:11:41.914" starttime="20171020 13:11:41.914"></status>
</kw>
<status status="PASS" endtime="20171020 13:11:41.915" starttime="20171020 13:11:41.914"></status>
</kw>
<status status="PASS" endtime="20171020 13:11:41.915" starttime="20171020 13:11:41.912"></status>
</kw>
<status status="PASS" endtime="20171020 13:11:41.915" starttime="20171020 13:11:41.912"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:11:42.298">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20171020 13:11:42.298">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:11:42.298" starttime="20171020 13:11:41.915"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:11:42.300">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171020 13:11:42.300" starttime="20171020 13:11:42.299"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:11:42.301">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171020 13:11:42.301" starttime="20171020 13:11:42.301"></status>
</kw>
<status status="PASS" endtime="20171020 13:11:42.301" starttime="20171020 13:11:42.300"></status>
</kw>
<status status="PASS" endtime="20171020 13:11:42.301" starttime="20171020 13:11:42.299"></status>
</kw>
<status status="PASS" endtime="20171020 13:11:42.301" starttime="20171020 13:11:42.298"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171020 13:11:42.302">Delete All Sessions</msg>
<status status="PASS" endtime="20171020 13:11:42.302" starttime="20171020 13:11:42.301"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:11:42.302">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:11:42.302" starttime="20171020 13:11:41.720"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:11:42.303">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:11:42.303" starttime="20171020 13:11:42.302"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:11:42.303">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171020 13:11:42.303">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171020 13:11:42.303">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20171020 13:11:42.303" starttime="20171020 13:11:42.303"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:11:42.304">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status status="PASS" endtime="20171020 13:11:42.304" starttime="20171020 13:11:41.720"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:11:42.304">${host_state} = Running</msg>
<status status="PASS" endtime="20171020 13:11:42.304" starttime="20171020 13:11:41.720"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status status="PASS" endtime="20171020 13:11:42.305" starttime="20171020 13:11:42.304"></status>
</kw>
<kw name="Is OS Booted" library="state_manager">
<doc>Check OS status.</doc>
<kw name="Get Host State Attribute" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>BootProgress</arg>
</arguments>
<assign>
<var>${boot_stage}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>${host_attribute}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:11:42.309">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171020 13:11:42.309" starttime="20171020 13:11:42.309"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:11:42.310">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171020 13:11:42.310" starttime="20171020 13:11:42.309"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:11:42.310">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171020 13:11:42.310" starttime="20171020 13:11:42.310"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:11:42.311">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171020 13:11:42.311" starttime="20171020 13:11:42.311"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:11:42.909">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171020 13:11:42.909" starttime="20171020 13:11:42.312"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:11:42.910">${status} = PASS</msg>
<msg level="INFO" timestamp="20171020 13:11:42.910">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:11:42.910" starttime="20171020 13:11:42.312"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:11:42.910">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:11:42.910" starttime="20171020 13:11:42.910"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:11:42.911">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:11:42.911" starttime="20171020 13:11:42.911"></status>
</kw>
<status status="PASS" endtime="20171020 13:11:42.911" starttime="20171020 13:11:42.308"></status>
</kw>
<status status="PASS" endtime="20171020 13:11:42.911" starttime="20171020 13:11:42.308"></status>
</kw>
<status status="PASS" endtime="20171020 13:11:42.911" starttime="20171020 13:11:42.307"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:11:42.912">${base_uri} = /xyz/openbmc_project/state/host0//attr/BootProgress</msg>
<status status="PASS" endtime="20171020 13:11:42.912" starttime="20171020 13:11:42.912"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:11:42.914">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status status="PASS" endtime="20171020 13:11:42.914" starttime="20171020 13:11:42.913"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:11:42.915">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/BootProgress, method:Get, args:{}</msg>
<status status="PASS" endtime="20171020 13:11:42.915" starttime="20171020 13:11:42.915"></status>
</kw>
<status status="PASS" endtime="20171020 13:11:42.915" starttime="20171020 13:11:42.914"></status>
</kw>
<status status="PASS" endtime="20171020 13:11:42.915" starttime="20171020 13:11:42.913"></status>
</kw>
<status status="PASS" endtime="20171020 13:11:42.915" starttime="20171020 13:11:42.912"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:11:43.116">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/BootProgress, headers=None json=None</msg>
<msg level="INFO" timestamp="20171020 13:11:43.116">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:11:43.116" starttime="20171020 13:11:42.916"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:11:43.118">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171020 13:11:43.118" starttime="20171020 13:11:43.117"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:11:43.119">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171020 13:11:43.119" starttime="20171020 13:11:43.118"></status>
</kw>
<status status="PASS" endtime="20171020 13:11:43.119" starttime="20171020 13:11:43.118"></status>
</kw>
<status status="PASS" endtime="20171020 13:11:43.119" starttime="20171020 13:11:43.117"></status>
</kw>
<status status="PASS" endtime="20171020 13:11:43.119" starttime="20171020 13:11:43.116"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171020 13:11:43.119">Delete All Sessions</msg>
<status status="PASS" endtime="20171020 13:11:43.120" starttime="20171020 13:11:43.119"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:11:43.120">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:11:43.120" starttime="20171020 13:11:42.306"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:11:43.120">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:11:43.121" starttime="20171020 13:11:43.120"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:11:43.121">To JSON using : content={
  "data": "xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171020 13:11:43.121">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171020 13:11:43.121">${content} = {u'data': u'xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20171020 13:11:43.121" starttime="20171020 13:11:43.121"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:11:43.122">${state} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart</msg>
<status status="PASS" endtime="20171020 13:11:43.122" starttime="20171020 13:11:42.305"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:11:43.122">${boot_stage} = xyz.openbmc_project.State.Boot.Progress.ProgressStages.OSStart</msg>
<status status="PASS" endtime="20171020 13:11:43.122" starttime="20171020 13:11:42.305"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${OS_BOOT_START}</arg>
<arg>${boot_stage}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:11:43.122">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:11:43.123" starttime="20171020 13:11:43.122"></status>
</kw>
<kw name="Get Host State Attribute" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>OperatingSystemState</arg>
</arguments>
<assign>
<var>${os_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>${host_attribute}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:11:43.126">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171020 13:11:43.127" starttime="20171020 13:11:43.126"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:11:43.127">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171020 13:11:43.127" starttime="20171020 13:11:43.127"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:11:43.128">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171020 13:11:43.128" starttime="20171020 13:11:43.127"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:11:43.128">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171020 13:11:43.128" starttime="20171020 13:11:43.128"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:11:43.405">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171020 13:11:43.406" starttime="20171020 13:11:43.129"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:11:43.406">${status} = PASS</msg>
<msg level="INFO" timestamp="20171020 13:11:43.406">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:11:43.406" starttime="20171020 13:11:43.129"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:11:43.406">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:11:43.407" starttime="20171020 13:11:43.406"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:11:43.407">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:11:43.407" starttime="20171020 13:11:43.407"></status>
</kw>
<status status="PASS" endtime="20171020 13:11:43.407" starttime="20171020 13:11:43.125"></status>
</kw>
<status status="PASS" endtime="20171020 13:11:43.407" starttime="20171020 13:11:43.125"></status>
</kw>
<status status="PASS" endtime="20171020 13:11:43.408" starttime="20171020 13:11:43.124"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:11:43.408">${base_uri} = /xyz/openbmc_project/state/host0//attr/OperatingSystemState</msg>
<status status="PASS" endtime="20171020 13:11:43.408" starttime="20171020 13:11:43.408"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:11:43.410">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/OperatingSystemState, method:Get, args:{}</msg>
<status status="PASS" endtime="20171020 13:11:43.410" starttime="20171020 13:11:43.410"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:11:43.411">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/OperatingSystemState, method:Get, args:{}</msg>
<status status="PASS" endtime="20171020 13:11:43.412" starttime="20171020 13:11:43.411"></status>
</kw>
<status status="PASS" endtime="20171020 13:11:43.412" starttime="20171020 13:11:43.411"></status>
</kw>
<status status="PASS" endtime="20171020 13:11:43.412" starttime="20171020 13:11:43.409"></status>
</kw>
<status status="PASS" endtime="20171020 13:11:43.412" starttime="20171020 13:11:43.409"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:11:43.654">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/OperatingSystemState, headers=None json=None</msg>
<msg level="INFO" timestamp="20171020 13:11:43.654">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:11:43.654" starttime="20171020 13:11:43.412"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:11:43.656">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171020 13:11:43.656" starttime="20171020 13:11:43.656"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:11:43.657">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171020 13:11:43.657" starttime="20171020 13:11:43.657"></status>
</kw>
<status status="PASS" endtime="20171020 13:11:43.657" starttime="20171020 13:11:43.657"></status>
</kw>
<status status="PASS" endtime="20171020 13:11:43.658" starttime="20171020 13:11:43.655"></status>
</kw>
<status status="PASS" endtime="20171020 13:11:43.658" starttime="20171020 13:11:43.655"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171020 13:11:43.658">Delete All Sessions</msg>
<status status="PASS" endtime="20171020 13:11:43.658" starttime="20171020 13:11:43.658"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:11:43.658">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:11:43.658" starttime="20171020 13:11:43.124"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:11:43.659">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:11:43.659" starttime="20171020 13:11:43.659"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:11:43.660">To JSON using : content={
  "data": "xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171020 13:11:43.660">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171020 13:11:43.660">${content} = {u'data': u'xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive', u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20171020 13:11:43.660" starttime="20171020 13:11:43.659"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:11:43.660">${state} = xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive</msg>
<status status="PASS" endtime="20171020 13:11:43.660" starttime="20171020 13:11:43.123"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:11:43.660">${os_state} = xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive</msg>
<status status="PASS" endtime="20171020 13:11:43.660" starttime="20171020 13:11:43.123"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${OS_BOOT_COMPLETE}</arg>
<arg>${os_state}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:11:43.661">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg level="FAIL" timestamp="20171020 13:11:43.661">xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.BootComplete != xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive</msg>
<status status="FAIL" endtime="20171020 13:11:43.661" starttime="20171020 13:11:43.661"></status>
</kw>
<status status="FAIL" endtime="20171020 13:11:43.661" starttime="20171020 13:11:42.305"></status>
</kw>
<status status="FAIL" endtime="20171020 13:11:43.662" starttime="20171020 13:11:40.417"></status>
</kw>
<msg level="FAIL" timestamp="20171020 13:11:43.662">Keyword 'Is Host Running' failed after retrying for 10 minutes. The last error was: xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.BootComplete != xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive</msg>
<status status="FAIL" endtime="20171020 13:11:43.662" starttime="20171020 13:01:38.971"></status>
</kw>
<status status="FAIL" endtime="20171020 13:11:43.662" starttime="20171020 13:01:38.276"></status>
</kw>
<status status="FAIL" endtime="20171020 13:11:43.662" starttime="20171020 13:01:36.020"></status>
</kw>
<status status="FAIL" endtime="20171020 13:11:43.662" starttime="20171020 13:01:36.019"></status>
</kw>
<kw type="teardown" name="Test Exit Logs">
<doc>Collect FFDC and SOL log.</doc>
<kw name="FFDC On Test Case Fail" library="openbmc_ffdc">
<doc>Generic FFDC entry point. Place holder to hook in</doc>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${TEST_STATUS}' == 'FAIL'</arg>
<arg>FFDC</arg>
</arguments>
<kw name="Ffdc" library="openbmc_ffdc">
<doc>Gather First Failure Data Capture (FFDC).</doc>
<kw name="Ping Host" library="utils">
<arguments>
<arg>9.3.86.161</arg>
</arguments>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${host}</arg>
<arg>msg=No host provided</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:11:43.694">Length is 10</msg>
<status status="PASS" endtime="20171020 13:11:43.694" starttime="20171020 13:11:43.694"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>ping -c 4 ${host}</arg>
</arguments>
<assign>
<var>${RC}</var>
<var>${output}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:11:43.700">Running command 'ping -c 4 9.3.86.161 2&gt;&amp;1'.</msg>
<msg level="INFO" timestamp="20171020 13:11:46.713">${RC} = 0</msg>
<msg level="INFO" timestamp="20171020 13:11:46.713">${output} = PING 9.3.86.161 (9.3.86.161) 56(84) bytes of data.
64 bytes from 9.3.86.161: icmp_seq=1 ttl=62 time=1.89 ms
64 bytes from 9.3.86.161: icmp_seq=2 ttl=62 time=0.646 ms
64 bytes from 9.3.86.161: icmp_seq...</msg>
<status status="PASS" endtime="20171020 13:11:46.713" starttime="20171020 13:11:43.694"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>RC: ${RC}\nOutput:\n${output}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:11:46.725">RC: 0
Output:
PING 9.3.86.161 (9.3.86.161) 56(84) bytes of data.
64 bytes from 9.3.86.161: icmp_seq=1 ttl=62 time=1.89 ms
64 bytes from 9.3.86.161: icmp_seq=2 ttl=62 time=0.646 ms
64 bytes from 9.3.86.161: icmp_seq=3 ttl=62 time=0.580 ms
64 bytes from 9.3.86.161: icmp_seq=4 ttl=62 time=0.602 ms

--- 9.3.86.161 ping statistics ---
4 packets transmitted, 4 received, 0% packet loss, time 2999ms
rtt min/avg/max/mdev = 0.580/0.931/1.899/0.560 ms</msg>
<status status="PASS" endtime="20171020 13:11:46.726" starttime="20171020 13:11:46.724"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${RC}</arg>
<arg>${0}</arg>
</arguments>
<status status="PASS" endtime="20171020 13:11:46.727" starttime="20171020 13:11:46.726"></status>
</kw>
<status status="PASS" endtime="20171020 13:11:46.728" starttime="20171020 13:11:43.693"></status>
</kw>
<kw name="Get Current Time Stamp" library="openbmc_ffdc_utils">
<doc>Get the current time stamp data</doc>
<kw name="Get Current Date" library="DateTime">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:11:46.784">${cur_time} = 2017-10-20 13:11:46:783322</msg>
<status status="PASS" endtime="20171020 13:11:46.784" starttime="20171020 13:11:46.783"></status>
</kw>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:11:46.785">${cur_time} = 20171020131146783322</msg>
<status status="PASS" endtime="20171020 13:11:46.785" starttime="20171020 13:11:46.784"></status>
</kw>
<status status="PASS" endtime="20171020 13:11:46.785" starttime="20171020 13:11:46.783"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:11:46.786">${FFDC_TIME} = 20171020131146783322</msg>
<kw name="Get Test Dir and Name" library="openbmc_ffdc_utils">
<doc>SUITE_NAME and TEST_NAME are automatic variables</doc>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${SUITE_NAME}</arg>
</arguments>
<assign>
<var>${suite_name}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:11:46.801">${suite_name} = TestsTestBasicPoweron</msg>
<status status="PASS" endtime="20171020 13:11:46.801" starttime="20171020 13:11:46.800"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${FFDC_TIME}_</arg>
<arg>${suite_name}</arg>
</arguments>
<assign>
<var>${suite_name}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:11:46.801">${suite_name} = 20171020131146783322_TestsTestBasicPoweron</msg>
<status status="PASS" endtime="20171020 13:11:46.801" starttime="20171020 13:11:46.801"></status>
</kw>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${TEST_NAME}</arg>
</arguments>
<assign>
<var>${test_name}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:11:46.802">${test_name} = PowerOnTest</msg>
<status status="PASS" endtime="20171020 13:11:46.802" starttime="20171020 13:11:46.802"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${FFDC_TIME}_</arg>
<arg>${test_name}</arg>
</arguments>
<assign>
<var>${test_name}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:11:46.802">${test_name} = 20171020131146783322_PowerOnTest</msg>
<status status="PASS" endtime="20171020 13:11:46.803" starttime="20171020 13:11:46.802"></status>
</kw>
<status status="PASS" endtime="20171020 13:11:46.803" starttime="20171020 13:11:46.800"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:11:46.803">${FFDC_DIR_PATH} = /tmp/fspcibld/24591/obmc-robot/logs/20171020131146783322_TestsTestBasicPoweron/20171020131146783322_PowerOnTest/</msg>
<msg level="INFO" timestamp="20171020 13:11:46.803">${FFDC_PREFIX} = 20171020131146783322_</msg>
<msg level="INFO" timestamp="20171020 13:11:46.823">${LOG_PREFIX} = /tmp/fspcibld/24591/obmc-robot/logs/20171020131146783322_TestsTestBasicPoweron/20171020131146783322_PowerOnTest/20171020131146783322_</msg>
<kw name="Create Directory" library="OperatingSystem">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>/tmp/fspcibld/24591/obmc-robot/logs/20171020131146783322_TestsTestBasicPoweron/20171020131146783322_PowerOnTest/</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:11:46.825" html="yes">Created directory '&lt;a href="file:///tmp/fspcibld/24591/obmc-robot/logs/20171020131146783322_TestsTestBasicPoweron/20171020131146783322_PowerOnTest"&gt;/tmp/fspcibld/24591/obmc-robot/logs/20171020131146783322_TestsTestBasicPoweron/20171020131146783322_PowerOnTest&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171020 13:11:46.825" starttime="20171020 13:11:46.824"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:11:46.830">${FFDC_FILE_PATH} = /tmp/fspcibld/24591/obmc-robot/logs/20171020131146783322_TestsTestBasicPoweron/20171020131146783322_PowerOnTest/20171020131146783322_BMC_general.txt</msg>
<kw name="Header Message" library="openbmc_ffdc_utils">
<doc>Write header message to the report document manifest.</doc>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${HEADER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:11:46.851" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/24591/obmc-robot/logs/20171020131146783322_TestsTestBasicPoweron/20171020131146783322_PowerOnTest/20171020131146783322_BMC_general.txt"&gt;/tmp/fspcibld/24591/obmc-robot/logs/20171020131146783322_TestsTestBasicPoweron/20171020131146783322_PowerOnTest/20171020131146783322_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171020 13:11:46.851" starttime="20171020 13:11:46.851"></status>
</kw>
<status status="PASS" endtime="20171020 13:11:46.851" starttime="20171020 13:11:46.850"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:11:46.853" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/24591/obmc-robot/logs/20171020131146783322_TestsTestBasicPoweron/20171020131146783322_PowerOnTest/20171020131146783322_BMC_general.txt"&gt;/tmp/fspcibld/24591/obmc-robot/logs/20171020131146783322_TestsTestBasicPoweron/20171020131146783322_PowerOnTest/20171020131146783322_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171020 13:11:46.853" starttime="20171020 13:11:46.852"></status>
</kw>
<status status="PASS" endtime="20171020 13:11:46.853" starttime="20171020 13:11:46.852"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Suite File\t\t: ${SUITE_NAME} ${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:11:46.854" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/24591/obmc-robot/logs/20171020131146783322_TestsTestBasicPoweron/20171020131146783322_PowerOnTest/20171020131146783322_BMC_general.txt"&gt;/tmp/fspcibld/24591/obmc-robot/logs/20171020131146783322_TestsTestBasicPoweron/20171020131146783322_PowerOnTest/20171020131146783322_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171020 13:11:46.854" starttime="20171020 13:11:46.854"></status>
</kw>
<status status="PASS" endtime="20171020 13:11:46.854" starttime="20171020 13:11:46.853"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Case Name\t\t: ${TEST_NAME}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:11:46.856" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/24591/obmc-robot/logs/20171020131146783322_TestsTestBasicPoweron/20171020131146783322_PowerOnTest/20171020131146783322_BMC_general.txt"&gt;/tmp/fspcibld/24591/obmc-robot/logs/20171020131146783322_TestsTestBasicPoweron/20171020131146783322_PowerOnTest/20171020131146783322_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171020 13:11:46.856" starttime="20171020 13:11:46.855"></status>
</kw>
<status status="PASS" endtime="20171020 13:11:46.856" starttime="20171020 13:11:46.854"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Source File\t: ${SUITE_SOURCE}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:11:46.857" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/24591/obmc-robot/logs/20171020131146783322_TestsTestBasicPoweron/20171020131146783322_PowerOnTest/20171020131146783322_BMC_general.txt"&gt;/tmp/fspcibld/24591/obmc-robot/logs/20171020131146783322_TestsTestBasicPoweron/20171020131146783322_PowerOnTest/20171020131146783322_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171020 13:11:46.857" starttime="20171020 13:11:46.857"></status>
</kw>
<status status="PASS" endtime="20171020 13:11:46.857" starttime="20171020 13:11:46.856"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Failure Time Stamp\t: ${FFDC_TIME}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:11:46.858" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/24591/obmc-robot/logs/20171020131146783322_TestsTestBasicPoweron/20171020131146783322_PowerOnTest/20171020131146783322_BMC_general.txt"&gt;/tmp/fspcibld/24591/obmc-robot/logs/20171020131146783322_TestsTestBasicPoweron/20171020131146783322_PowerOnTest/20171020131146783322_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171020 13:11:46.858" starttime="20171020 13:11:46.858"></status>
</kw>
<status status="PASS" endtime="20171020 13:11:46.859" starttime="20171020 13:11:46.857"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Error Message\t: ${TEST_MESSAGE}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:11:46.860" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/24591/obmc-robot/logs/20171020131146783322_TestsTestBasicPoweron/20171020131146783322_PowerOnTest/20171020131146783322_BMC_general.txt"&gt;/tmp/fspcibld/24591/obmc-robot/logs/20171020131146783322_TestsTestBasicPoweron/20171020131146783322_PowerOnTest/20171020131146783322_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171020 13:11:46.860" starttime="20171020 13:11:46.859"></status>
</kw>
<status status="PASS" endtime="20171020 13:11:46.860" starttime="20171020 13:11:46.859"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Documentation\t:${\n}${TEST_DOCUMENTATION}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:11:46.861" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/24591/obmc-robot/logs/20171020131146783322_TestsTestBasicPoweron/20171020131146783322_PowerOnTest/20171020131146783322_BMC_general.txt"&gt;/tmp/fspcibld/24591/obmc-robot/logs/20171020131146783322_TestsTestBasicPoweron/20171020131146783322_PowerOnTest/20171020131146783322_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171020 13:11:46.861" starttime="20171020 13:11:46.861"></status>
</kw>
<status status="PASS" endtime="20171020 13:11:46.861" starttime="20171020 13:11:46.860"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:11:46.862" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/24591/obmc-robot/logs/20171020131146783322_TestsTestBasicPoweron/20171020131146783322_PowerOnTest/20171020131146783322_BMC_general.txt"&gt;/tmp/fspcibld/24591/obmc-robot/logs/20171020131146783322_TestsTestBasicPoweron/20171020131146783322_PowerOnTest/20171020131146783322_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171020 13:11:46.862" starttime="20171020 13:11:46.862"></status>
</kw>
<status status="PASS" endtime="20171020 13:11:46.863" starttime="20171020 13:11:46.861"></status>
</kw>
<kw name="Test Setup Info" library="openbmc_ffdc_utils">
<doc>BMC IP, Model and other information</doc>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}-----------------------${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:11:46.864" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/24591/obmc-robot/logs/20171020131146783322_TestsTestBasicPoweron/20171020131146783322_PowerOnTest/20171020131146783322_BMC_general.txt"&gt;/tmp/fspcibld/24591/obmc-robot/logs/20171020131146783322_TestsTestBasicPoweron/20171020131146783322_PowerOnTest/20171020131146783322_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171020 13:11:46.864" starttime="20171020 13:11:46.864"></status>
</kw>
<status status="PASS" endtime="20171020 13:11:46.864" starttime="20171020 13:11:46.863"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Setup Information:</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:11:46.865" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/24591/obmc-robot/logs/20171020131146783322_TestsTestBasicPoweron/20171020131146783322_PowerOnTest/20171020131146783322_BMC_general.txt"&gt;/tmp/fspcibld/24591/obmc-robot/logs/20171020131146783322_TestsTestBasicPoweron/20171020131146783322_PowerOnTest/20171020131146783322_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171020 13:11:46.866" starttime="20171020 13:11:46.865"></status>
</kw>
<status status="PASS" endtime="20171020 13:11:46.866" starttime="20171020 13:11:46.864"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}-----------------------${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:11:46.867" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/24591/obmc-robot/logs/20171020131146783322_TestsTestBasicPoweron/20171020131146783322_PowerOnTest/20171020131146783322_BMC_general.txt"&gt;/tmp/fspcibld/24591/obmc-robot/logs/20171020131146783322_TestsTestBasicPoweron/20171020131146783322_PowerOnTest/20171020131146783322_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171020 13:11:46.867" starttime="20171020 13:11:46.866"></status>
</kw>
<status status="PASS" endtime="20171020 13:11:46.867" starttime="20171020 13:11:46.866"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>OPENBMC HOST \t: ${OPENBMC_HOST}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:11:46.868" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/24591/obmc-robot/logs/20171020131146783322_TestsTestBasicPoweron/20171020131146783322_PowerOnTest/20171020131146783322_BMC_general.txt"&gt;/tmp/fspcibld/24591/obmc-robot/logs/20171020131146783322_TestsTestBasicPoweron/20171020131146783322_PowerOnTest/20171020131146783322_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171020 13:11:46.868" starttime="20171020 13:11:46.868"></status>
</kw>
<status status="PASS" endtime="20171020 13:11:46.868" starttime="20171020 13:11:46.867"></status>
</kw>
<kw name="Get BMC System Model" library="utils">
<doc>Get the BMC model from the device tree.</doc>
<assign>
<var>${model_name}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>cat ${devicetree_base} | cut -d " " -f 1</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${bmc_model}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:11:46.898">width=80
host=9.3.86.161
port=22
alias=bmc_connection
term_type=vt100
newline=

prompt=# 
index=1
path_separator=/
height=24
encoding=UTF-8
timeout=25 seconds</msg>
<msg level="INFO" timestamp="20171020 13:11:46.899">Executing command 'cat /sys/firmware/devicetree/base/model | cut -d " " -f 1'.</msg>
<msg level="INFO" timestamp="20171020 13:11:47.163">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20171020 13:11:47.173">${bmc_model} = Witherspoon</msg>
<msg level="INFO" timestamp="20171020 13:11:47.173">${stderr} = </msg>
<msg level="INFO" timestamp="20171020 13:11:47.173">${rc} = 0</msg>
<status status="PASS" endtime="20171020 13:11:47.173" starttime="20171020 13:11:46.869"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:11:47.174">Length is 0</msg>
<status status="PASS" endtime="20171020 13:11:47.174" starttime="20171020 13:11:47.174"></status>
</kw>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${bmc_model}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:11:47.174">Length is 11</msg>
<status status="PASS" endtime="20171020 13:11:47.174" starttime="20171020 13:11:47.174"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:11:47.175">${model_name} = Witherspoon</msg>
<status status="PASS" endtime="20171020 13:11:47.175" starttime="20171020 13:11:46.869"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>SYSTEM TYPE \t: ${model_name}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:11:47.176" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/24591/obmc-robot/logs/20171020131146783322_TestsTestBasicPoweron/20171020131146783322_PowerOnTest/20171020131146783322_BMC_general.txt"&gt;/tmp/fspcibld/24591/obmc-robot/logs/20171020131146783322_TestsTestBasicPoweron/20171020131146783322_PowerOnTest/20171020131146783322_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171020 13:11:47.176" starttime="20171020 13:11:47.175"></status>
</kw>
<status status="PASS" endtime="20171020 13:11:47.176" starttime="20171020 13:11:47.175"></status>
</kw>
<status status="PASS" endtime="20171020 13:11:47.176" starttime="20171020 13:11:46.863"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${MSG_INTRO}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:11:47.177" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/24591/obmc-robot/logs/20171020131146783322_TestsTestBasicPoweron/20171020131146783322_PowerOnTest/20171020131146783322_BMC_general.txt"&gt;/tmp/fspcibld/24591/obmc-robot/logs/20171020131146783322_TestsTestBasicPoweron/20171020131146783322_PowerOnTest/20171020131146783322_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171020 13:11:47.177" starttime="20171020 13:11:47.177"></status>
</kw>
<status status="PASS" endtime="20171020 13:11:47.178" starttime="20171020 13:11:47.176"></status>
</kw>
<kw name="Get Ffdc Cmd Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:11:47.178">@{entries} = [ BMC DATA | DRIVER INFO | APPLICATION DATA ]</msg>
<status status="PASS" endtime="20171020 13:11:47.178" starttime="20171020 13:11:47.178"></status>
</kw>
<kw type="for" name="${index} IN [ @{entries} ]">
<kw type="foritem" name="${index} = BMC DATA">
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>* ${index.upper()}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:11:47.179" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/24591/obmc-robot/logs/20171020131146783322_TestsTestBasicPoweron/20171020131146783322_PowerOnTest/20171020131146783322_BMC_general.txt"&gt;/tmp/fspcibld/24591/obmc-robot/logs/20171020131146783322_TestsTestBasicPoweron/20171020131146783322_PowerOnTest/20171020131146783322_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171020 13:11:47.180" starttime="20171020 13:11:47.179"></status>
</kw>
<status status="PASS" endtime="20171020 13:11:47.180" starttime="20171020 13:11:47.178"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:11:47.181" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/24591/obmc-robot/logs/20171020131146783322_TestsTestBasicPoweron/20171020131146783322_PowerOnTest/20171020131146783322_BMC_general.txt"&gt;/tmp/fspcibld/24591/obmc-robot/logs/20171020131146783322_TestsTestBasicPoweron/20171020131146783322_PowerOnTest/20171020131146783322_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171020 13:11:47.181" starttime="20171020 13:11:47.180"></status>
</kw>
<status status="PASS" endtime="20171020 13:11:47.181" starttime="20171020 13:11:47.180"></status>
</kw>
<status status="PASS" endtime="20171020 13:11:47.181" starttime="20171020 13:11:47.178"></status>
</kw>
<kw type="foritem" name="${index} = DRIVER INFO">
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>* ${index.upper()}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:11:47.182" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/24591/obmc-robot/logs/20171020131146783322_TestsTestBasicPoweron/20171020131146783322_PowerOnTest/20171020131146783322_BMC_general.txt"&gt;/tmp/fspcibld/24591/obmc-robot/logs/20171020131146783322_TestsTestBasicPoweron/20171020131146783322_PowerOnTest/20171020131146783322_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171020 13:11:47.182" starttime="20171020 13:11:47.182"></status>
</kw>
<status status="PASS" endtime="20171020 13:11:47.182" starttime="20171020 13:11:47.181"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:11:47.184" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/24591/obmc-robot/logs/20171020131146783322_TestsTestBasicPoweron/20171020131146783322_PowerOnTest/20171020131146783322_BMC_general.txt"&gt;/tmp/fspcibld/24591/obmc-robot/logs/20171020131146783322_TestsTestBasicPoweron/20171020131146783322_PowerOnTest/20171020131146783322_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171020 13:11:47.184" starttime="20171020 13:11:47.183"></status>
</kw>
<status status="PASS" endtime="20171020 13:11:47.184" starttime="20171020 13:11:47.183"></status>
</kw>
<status status="PASS" endtime="20171020 13:11:47.184" starttime="20171020 13:11:47.181"></status>
</kw>
<kw type="foritem" name="${index} = APPLICATION DATA">
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>* ${index.upper()}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:11:47.185" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/24591/obmc-robot/logs/20171020131146783322_TestsTestBasicPoweron/20171020131146783322_PowerOnTest/20171020131146783322_BMC_general.txt"&gt;/tmp/fspcibld/24591/obmc-robot/logs/20171020131146783322_TestsTestBasicPoweron/20171020131146783322_PowerOnTest/20171020131146783322_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171020 13:11:47.185" starttime="20171020 13:11:47.185"></status>
</kw>
<status status="PASS" endtime="20171020 13:11:47.185" starttime="20171020 13:11:47.184"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:11:47.186" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/24591/obmc-robot/logs/20171020131146783322_TestsTestBasicPoweron/20171020131146783322_PowerOnTest/20171020131146783322_BMC_general.txt"&gt;/tmp/fspcibld/24591/obmc-robot/logs/20171020131146783322_TestsTestBasicPoweron/20171020131146783322_PowerOnTest/20171020131146783322_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171020 13:11:47.186" starttime="20171020 13:11:47.186"></status>
</kw>
<status status="PASS" endtime="20171020 13:11:47.187" starttime="20171020 13:11:47.185"></status>
</kw>
<status status="PASS" endtime="20171020 13:11:47.187" starttime="20171020 13:11:47.184"></status>
</kw>
<status status="PASS" endtime="20171020 13:11:47.187" starttime="20171020 13:11:47.178"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${MSG_DETAIL}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:11:47.188" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/24591/obmc-robot/logs/20171020131146783322_TestsTestBasicPoweron/20171020131146783322_PowerOnTest/20171020131146783322_BMC_general.txt"&gt;/tmp/fspcibld/24591/obmc-robot/logs/20171020131146783322_TestsTestBasicPoweron/20171020131146783322_PowerOnTest/20171020131146783322_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171020 13:11:47.188" starttime="20171020 13:11:47.187"></status>
</kw>
<status status="PASS" endtime="20171020 13:11:47.188" starttime="20171020 13:11:47.187"></status>
</kw>
<status status="PASS" endtime="20171020 13:11:47.188" starttime="20171020 13:11:46.850"></status>
</kw>
<kw name="Call FFDC Methods" library="openbmc_ffdc_methods">
<doc>Call into FFDC Keyword index list.</doc>
<arguments>
<arg>ffdc_function_list=</arg>
</arguments>
<kw name="Get Ffdc Method Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:11:47.194">@{entries} = [ BMC LOGS ]</msg>
<status status="PASS" endtime="20171020 13:11:47.194" starttime="20171020 13:11:47.194"></status>
</kw>
<kw type="for" name="${index} IN [ @{entries} ]">
<kw type="foritem" name="${index} = BMC LOGS">
<kw name="Method Call Keyword List" library="openbmc_ffdc_methods">
<doc>Iterate the list through keyword index.</doc>
<arguments>
<arg>${index}</arg>
<arg>${ffdc_function_list}</arg>
</arguments>
<kw name="Get Ffdc Method Call" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<assign>
<var>@{method_list}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:11:47.196">@{method_list} = [ ('Get Request FFDC', 'BMC FFDC Get Requests') | ('FFDC Generic Report', 'BMC FFDC Manifest') | ('BMC Specific Files', 'BMC FFDC Files') | ('Sys Inventory Files', 'System Inventory Files') | ('Core F...</msg>
<status status="PASS" endtime="20171020 13:11:47.196" starttime="20171020 13:11:47.196"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${ffdc_function_list}' == '${EMPTY}'</arg>
<arg>Get FFDC Method Desc</arg>
<arg>${index}</arg>
<arg>ELSE</arg>
<arg>Split String</arg>
<arg>${ffdc_function_list}</arg>
<arg>separator=:</arg>
</arguments>
<assign>
<var>@{ffdc_function_list}</var>
</assign>
<kw name="Get Ffdc Method Desc" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<status status="PASS" endtime="20171020 13:11:47.197" starttime="20171020 13:11:47.197"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:11:47.198">@{ffdc_function_list} = [ Get Request FFDC | FFDC Generic Report | BMC Specific Files | Sys Inventory Files | Core Files | SEL Log | OS FFDC ]</msg>
<status status="PASS" endtime="20171020 13:11:47.198" starttime="20171020 13:11:47.197"></status>
</kw>
<kw type="for" name="${method} IN [ @{method_list} ]">
<kw type="foritem" name="${method} = ('Get Request FFDC', 'BMC FFDC Get Requests')">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status status="PASS" endtime="20171020 13:11:47.199" starttime="20171020 13:11:47.199"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:11:47.200">${status} = PASS</msg>
<msg level="INFO" timestamp="20171020 13:11:47.200">${ret_values} = None</msg>
<status status="PASS" endtime="20171020 13:11:47.200" starttime="20171020 13:11:47.199"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status status="PASS" endtime="20171020 13:11:47.200" starttime="20171020 13:11:47.200"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="BMC FFDC Get Requests" library="openbmc_ffdc_methods">
<doc>Get the command list and iterate</doc>
<kw name="Get Ffdc Get Request Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:11:47.227">@{entries} = [ GET REQUESTS ]</msg>
<status status="PASS" endtime="20171020 13:11:47.227" starttime="20171020 13:11:47.227"></status>
</kw>
<kw type="for" name="${index} IN [ @{entries} ]">
<kw type="foritem" name="${index} = GET REQUESTS">
<kw name="Log FFDC Get Requests" library="openbmc_ffdc_methods">
<doc>Create file in current FFDC log directory.</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Get Request" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:11:47.229">@{cmd_list} = [ ('BMC_led', '/xyz/openbmc_project/led/enumerate') | ('BMC_elog', '/xyz/openbmc_project/logging/entry/enumerate') | ('BMC_sensor_list', '/xyz/openbmc_project/sensors/enumerate') | ('BMC_inventory', '...</msg>
<status status="PASS" endtime="20171020 13:11:47.229" starttime="20171020 13:11:47.228"></status>
</kw>
<kw type="for" name="${cmd} IN [ @{cmd_list} ]">
<kw type="foritem" name="${cmd} = ('BMC_led', '/xyz/openbmc_project/led/enumerate')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:11:47.230">${logpath} = /tmp/fspcibld/24591/obmc-robot/logs/20171020131146783322_TestsTestBasicPoweron/20171020131146783322_PowerOnTest/20171020131146783322_BMC_led.txt</msg>
<status status="PASS" endtime="20171020 13:11:47.230" starttime="20171020 13:11:47.229"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:11:47.233">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171020 13:11:47.233" starttime="20171020 13:11:47.232"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:11:47.234">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171020 13:11:47.234" starttime="20171020 13:11:47.233"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:11:47.234">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171020 13:11:47.234" starttime="20171020 13:11:47.234"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:11:47.235">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171020 13:11:47.235" starttime="20171020 13:11:47.235"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:11:47.478">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171020 13:11:47.478" starttime="20171020 13:11:47.236"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:11:47.478">${status} = PASS</msg>
<msg level="INFO" timestamp="20171020 13:11:47.478">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:11:47.478" starttime="20171020 13:11:47.235"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:11:47.479">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:11:47.479" starttime="20171020 13:11:47.479"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:11:47.480">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:11:47.480" starttime="20171020 13:11:47.479"></status>
</kw>
<status status="PASS" endtime="20171020 13:11:47.480" starttime="20171020 13:11:47.231"></status>
</kw>
<status status="PASS" endtime="20171020 13:11:47.480" starttime="20171020 13:11:47.231"></status>
</kw>
<status status="PASS" endtime="20171020 13:11:47.480" starttime="20171020 13:11:47.230"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:11:47.481">${base_uri} = /xyz/openbmc_project/led/enumerate</msg>
<status status="PASS" endtime="20171020 13:11:47.481" starttime="20171020 13:11:47.480"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20171020 13:11:47.482" starttime="20171020 13:11:47.481"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:11:50.056">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/led/enumerate, headers=None json=None</msg>
<msg level="INFO" timestamp="20171020 13:11:50.056">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:11:50.056" starttime="20171020 13:11:47.482"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20171020 13:11:50.057" starttime="20171020 13:11:50.057"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171020 13:11:50.057">Delete All Sessions</msg>
<status status="PASS" endtime="20171020 13:11:50.057" starttime="20171020 13:11:50.057"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:11:50.058">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:11:50.058" starttime="20171020 13:11:47.230"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:11:50.059">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:11:50.059" starttime="20171020 13:11:50.059"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:11:50.059">${status} = True</msg>
<status status="PASS" endtime="20171020 13:11:50.059" starttime="20171020 13:11:50.058"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status status="PASS" endtime="20171020 13:11:50.060" starttime="20171020 13:11:50.059"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:11:50.062">To JSON using : content={
  "data": {
    "/xyz/openbmc_project/led/groups": {}, 
    "/xyz/openbmc_project/led/groups/bmc_booted": {
      "Asserted": 1
    }, 
    "/xyz/openbmc_project/led/groups/bmc_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/boxelder_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core0_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core10_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core11_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core12_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core13_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core14_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core15_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core16_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core17_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core18_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core19_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core1_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core20_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core21_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core22_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core23_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core2_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core3_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core4_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core5_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core6_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core7_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core8_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/core9_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/cpu0_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/cpu1_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm0_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm10_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm11_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm12_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm13_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm14_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm15_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm1_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm2_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm3_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm4_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm5_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm6_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm7_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm8_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/dimm9_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/enclosure_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/enclosure_identify": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/fan0_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/fan0_identify": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/fan1_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/fan1_identify": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/fan2_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/fan2_identify": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/fan3_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/fan3_identify": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/gv100card0_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/gv100card1_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/gv100card2_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/gv100card3_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/gv100card4_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/gv100card5_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/lamp_test": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/motherboard_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/occ_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/power_on": {
      "Asserted": 1
    }, 
    "/xyz/openbmc_project/led/groups/powersupply0_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/powersupply1_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/groups/system_fault": {
      "Asserted": 0
    }, 
    "/xyz/openbmc_project/led/physical/fan0": {
      "Color": "xyz.openbmc_project.Led.Physical.Palette.Unknown", 
      "DutyOn": 50, 
      "Period": 1000, 
      "State": "xyz.openbmc_project.Led.Physical.Action.Off"
    }, 
    "/xyz/openbmc_project/led/physical/fan1": {
      "Color": "xyz.openbmc_project.Led.Physical.Palette.Unknown", 
      "DutyOn": 50, 
      "Period": 1000, 
      "State": "xyz.openbmc_project.Led.Physical.Action.Off"
    }, 
    "/xyz/openbmc_project/led/physical/fan2": {
      "Color": "xyz.openbmc_project.Led.Physical.Palette.Unknown", 
      "DutyOn": 50, 
      "Period": 1000, 
      "State": "xyz.openbmc_project.Led.Physical.Action.Off"
    }, 
    "/xyz/openbmc_project/led/physical/fan3": {
      "Color": "xyz.openbmc_project.Led.Physical.Palette.Unknown", 
      "DutyOn": 50, 
      "Period": 1000, 
      "State": "xyz.openbmc_project.Led.Physical.Action.Off"
    }, 
    "/xyz/openbmc_project/led/physical/front_fault": {
      "Color": "xyz.openbmc_project.Led.Physical.Palette.Unknown", 
      "DutyOn": 50, 
      "Period": 1000, 
      "State": "xyz.openbmc_project.Led.Physical.Action.Off"
    }, 
    "/xyz/openbmc_project/led/physical/front_id": {
      "Color": "xyz.openbmc_project.Led.Physical.Palette.Unknown", 
      "DutyOn": 50, 
      "Period": 1000, 
      "State": "xyz.openbmc_project.Led.Physical.Action.Off"
    }, 
    "/xyz/openbmc_project/led/physical/front_power": {
      "Color": "xyz.openbmc_project.Led.Physical.Palette.Unknown", 
      "DutyOn": 50, 
      "Period": 1000, 
      "State": "xyz.openbmc_project.Led.Physical.Action.On"
    }, 
    "/xyz/openbmc_project/led/physical/rear_fault": {
      "Color": "xyz.openbmc_project.Led.Physical.Palette.Unknown", 
      "DutyOn": 50, 
      "Period": 1000, 
      "State": "xyz.openbmc_project.Led.Physical.Action.Off"
    }, 
    "/xyz/openbmc_project/led/physical/rear_id": {
      "Color": "xyz.openbmc_project.Led.Physical.Palette.Unknown", 
      "DutyOn": 50, 
      "Period": 1000, 
      "State": "xyz.openbmc_project.Led.Physical.Action.Off"
    }, 
    "/xyz/openbmc_project/led/physical/rear_power": {
      "Color": "xyz.openbmc_project.Led.Physical.Palette.Unknown", 
      "DutyOn": 50, 
      "Period": 1000, 
      "State": "xyz.openbmc_project.Led.Physical.Action.On"
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171020 13:11:50.062">To JSON using : pretty_print=True </msg>
<msg level="INFO" timestamp="20171020 13:11:50.062">${jsondata} = {
    "data": {
        "/xyz/openbmc_project/led/groups": {},
        "/xyz/openbmc_project/led/groups/bmc_booted": {
            "Asserted": 1
        },
        "/xyz/openbmc_project/led/groups/bmc...</msg>
<status status="PASS" endtime="20171020 13:11:50.062" starttime="20171020 13:11:50.060"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:11:50.064" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/24591/obmc-robot/logs/20171020131146783322_TestsTestBasicPoweron/20171020131146783322_PowerOnTest/20171020131146783322_BMC_led.txt"&gt;/tmp/fspcibld/24591/obmc-robot/logs/20171020131146783322_TestsTestBasicPoweron/20171020131146783322_PowerOnTest/20171020131146783322_BMC_led.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171020 13:11:50.064" starttime="20171020 13:11:50.064"></status>
</kw>
<status status="PASS" endtime="20171020 13:11:50.065" starttime="20171020 13:11:50.062"></status>
</kw>
<status status="PASS" endtime="20171020 13:11:50.065" starttime="20171020 13:11:47.229"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_elog', '/xyz/openbmc_project/logging/entry/enumerate')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:11:50.065">${logpath} = /tmp/fspcibld/24591/obmc-robot/logs/20171020131146783322_TestsTestBasicPoweron/20171020131146783322_PowerOnTest/20171020131146783322_BMC_elog.txt</msg>
<status status="PASS" endtime="20171020 13:11:50.065" starttime="20171020 13:11:50.065"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:11:50.071">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171020 13:11:50.071" starttime="20171020 13:11:50.070"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:11:50.072">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171020 13:11:50.072" starttime="20171020 13:11:50.071"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:11:50.073">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171020 13:11:50.073" starttime="20171020 13:11:50.072"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:11:50.074">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171020 13:11:50.074" starttime="20171020 13:11:50.073"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:11:50.364">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171020 13:11:50.364" starttime="20171020 13:11:50.075"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:11:50.364">${status} = PASS</msg>
<msg level="INFO" timestamp="20171020 13:11:50.365">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:11:50.365" starttime="20171020 13:11:50.074"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:11:50.366">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:11:50.366" starttime="20171020 13:11:50.365"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:11:50.367">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:11:50.367" starttime="20171020 13:11:50.366"></status>
</kw>
<status status="PASS" endtime="20171020 13:11:50.367" starttime="20171020 13:11:50.070"></status>
</kw>
<status status="PASS" endtime="20171020 13:11:50.367" starttime="20171020 13:11:50.067"></status>
</kw>
<status status="PASS" endtime="20171020 13:11:50.367" starttime="20171020 13:11:50.066"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:11:50.368">${base_uri} = /xyz/openbmc_project/logging/entry/enumerate</msg>
<status status="PASS" endtime="20171020 13:11:50.368" starttime="20171020 13:11:50.368"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20171020 13:11:50.369" starttime="20171020 13:11:50.368"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:11:50.568">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry/enumerate, headers=None json=None</msg>
<msg level="INFO" timestamp="20171020 13:11:50.569">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:11:50.569" starttime="20171020 13:11:50.369"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20171020 13:11:50.569" starttime="20171020 13:11:50.569"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171020 13:11:50.570">Delete All Sessions</msg>
<status status="PASS" endtime="20171020 13:11:50.570" starttime="20171020 13:11:50.569"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:11:50.570">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:11:50.570" starttime="20171020 13:11:50.066"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:11:50.572">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:11:50.572" starttime="20171020 13:11:50.571"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:11:50.572">${status} = True</msg>
<status status="PASS" endtime="20171020 13:11:50.572" starttime="20171020 13:11:50.571"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status status="PASS" endtime="20171020 13:11:50.573" starttime="20171020 13:11:50.573"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:11:50.574">To JSON using : content={
  "data": {
    "/xyz/openbmc_project/logging/entry/2": {
      "AdditionalData": [
        "_PID=1334"
      ], 
      "Id": 2, 
      "Message": "xyz.openbmc_project.Power.Fault.Error.PowerSupplyInputFault", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Error", 
      "Timestamp": 1508504535407, 
      "associations": []
    }, 
    "/xyz/openbmc_project/logging/entry/3": {
      "AdditionalData": [
        "_PID=1334"
      ], 
      "Id": 3, 
      "Message": "xyz.openbmc_project.Power.Fault.Error.PowerSupplyShouldBeOn", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Error", 
      "Timestamp": 1508504537488, 
      "associations": []
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171020 13:11:50.574">To JSON using : pretty_print=True </msg>
<msg level="INFO" timestamp="20171020 13:11:50.574">${jsondata} = {
    "data": {
        "/xyz/openbmc_project/logging/entry/2": {
            "AdditionalData": [
                "_PID=1334"
            ],
            "Id": 2,
            "Message": "xyz.openbmc_pr...</msg>
<status status="PASS" endtime="20171020 13:11:50.574" starttime="20171020 13:11:50.573"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:11:50.576" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/24591/obmc-robot/logs/20171020131146783322_TestsTestBasicPoweron/20171020131146783322_PowerOnTest/20171020131146783322_BMC_elog.txt"&gt;/tmp/fspcibld/24591/obmc-robot/logs/20171020131146783322_TestsTestBasicPoweron/20171020131146783322_PowerOnTest/20171020131146783322_BMC_elog.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171020 13:11:50.576" starttime="20171020 13:11:50.576"></status>
</kw>
<status status="PASS" endtime="20171020 13:11:50.577" starttime="20171020 13:11:50.575"></status>
</kw>
<status status="PASS" endtime="20171020 13:11:50.577" starttime="20171020 13:11:50.065"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_sensor_list', '/xyz/openbmc_project/sensors/enumerate')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:11:50.577">${logpath} = /tmp/fspcibld/24591/obmc-robot/logs/20171020131146783322_TestsTestBasicPoweron/20171020131146783322_PowerOnTest/20171020131146783322_BMC_sensor_list.txt</msg>
<status status="PASS" endtime="20171020 13:11:50.577" starttime="20171020 13:11:50.577"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:11:50.581">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171020 13:11:50.581" starttime="20171020 13:11:50.580"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:11:50.582">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171020 13:11:50.582" starttime="20171020 13:11:50.581"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:11:50.582">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171020 13:11:50.583" starttime="20171020 13:11:50.582"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:11:50.583">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171020 13:11:50.583" starttime="20171020 13:11:50.583"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:11:50.861">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171020 13:11:50.861" starttime="20171020 13:11:50.584"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:11:50.861">${status} = PASS</msg>
<msg level="INFO" timestamp="20171020 13:11:50.861">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:11:50.861" starttime="20171020 13:11:50.584"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:11:50.862">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:11:50.862" starttime="20171020 13:11:50.861"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:11:50.862">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:11:50.863" starttime="20171020 13:11:50.862"></status>
</kw>
<status status="PASS" endtime="20171020 13:11:50.863" starttime="20171020 13:11:50.579"></status>
</kw>
<status status="PASS" endtime="20171020 13:11:50.863" starttime="20171020 13:11:50.579"></status>
</kw>
<status status="PASS" endtime="20171020 13:11:50.863" starttime="20171020 13:11:50.578"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:11:50.863">${base_uri} = /xyz/openbmc_project/sensors/enumerate</msg>
<status status="PASS" endtime="20171020 13:11:50.863" starttime="20171020 13:11:50.863"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20171020 13:11:50.864" starttime="20171020 13:11:50.864"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:11:54.833">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/sensors/enumerate, headers=None json=None</msg>
<msg level="INFO" timestamp="20171020 13:11:54.833">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:11:54.833" starttime="20171020 13:11:50.864"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20171020 13:11:54.834" starttime="20171020 13:11:54.834"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171020 13:11:54.834">Delete All Sessions</msg>
<status status="PASS" endtime="20171020 13:11:54.834" starttime="20171020 13:11:54.834"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:11:54.835">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:11:54.835" starttime="20171020 13:11:50.578"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:11:54.836">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:11:54.836" starttime="20171020 13:11:54.835"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:11:54.836">${status} = True</msg>
<status status="PASS" endtime="20171020 13:11:54.836" starttime="20171020 13:11:54.835"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status status="PASS" endtime="20171020 13:11:54.837" starttime="20171020 13:11:54.836"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:11:54.840">To JSON using : content={
  "data": {
    "/xyz/openbmc_project/sensors/current/ps0_output_current": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.Amperes", 
      "Value": 39625
    }, 
    "/xyz/openbmc_project/sensors/current/ps1_output_current": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.Amperes", 
      "Value": 1250
    }, 
    "/xyz/openbmc_project/sensors/fan_tach/fan0_0": {
      "Scale": 0, 
      "Target": 10500, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.RPMS", 
      "Value": 9765
    }, 
    "/xyz/openbmc_project/sensors/fan_tach/fan0_1": {
      "Scale": 0, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.RPMS", 
      "Value": 10302
    }, 
    "/xyz/openbmc_project/sensors/fan_tach/fan1_0": {
      "Scale": 0, 
      "Target": 10500, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.RPMS", 
      "Value": 9894
    }, 
    "/xyz/openbmc_project/sensors/fan_tach/fan1_1": {
      "Scale": 0, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.RPMS", 
      "Value": 10330
    }, 
    "/xyz/openbmc_project/sensors/fan_tach/fan2_0": {
      "Scale": 0, 
      "Target": 10500, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.RPMS", 
      "Value": 9816
    }, 
    "/xyz/openbmc_project/sensors/fan_tach/fan2_1": {
      "Scale": 0, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.RPMS", 
      "Value": 10330
    }, 
    "/xyz/openbmc_project/sensors/fan_tach/fan3_0": {
      "Scale": 0, 
      "Target": 10500, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.RPMS", 
      "Value": 9791
    }, 
    "/xyz/openbmc_project/sensors/fan_tach/fan3_1": {
      "Scale": 0, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.RPMS", 
      "Value": 10330
    }, 
    "/xyz/openbmc_project/sensors/power/fan_disk_power": {
      "Scale": -6, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.Watts", 
      "Value": 211000000
    }, 
    "/xyz/openbmc_project/sensors/power/io_power": {
      "Scale": -6, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.Watts", 
      "Value": 12000000
    }, 
    "/xyz/openbmc_project/sensors/power/p0_gpu0_power": {
      "Scale": -6, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.Watts", 
      "Value": 2000000
    }, 
    "/xyz/openbmc_project/sensors/power/p0_gpu1_power": {
      "Scale": -6, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.Watts", 
      "Value": 2000000
    }, 
    "/xyz/openbmc_project/sensors/power/p0_gpu2_power": {
      "Scale": -6, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.Watts", 
      "Value": 2000000
    }, 
    "/xyz/openbmc_project/sensors/power/p0_io_power": {
      "Scale": -6, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.Watts", 
      "Value": 55000000
    }, 
    "/xyz/openbmc_project/sensors/power/p0_mem_power": {
      "Scale": -6, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.Watts", 
      "Value": 24000000
    }, 
    "/xyz/openbmc_project/sensors/power/p0_power": {
      "Scale": -6, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.Watts", 
      "Value": 52000000
    }, 
    "/xyz/openbmc_project/sensors/power/p1_gpu0_power": {
      "Scale": -6, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.Watts", 
      "Value": 1000000
    }, 
    "/xyz/openbmc_project/sensors/power/p1_gpu1_power": {
      "Scale": -6, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.Watts", 
      "Value": 1000000
    }, 
    "/xyz/openbmc_project/sensors/power/p1_gpu2_power": {
      "Scale": -6, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.Watts", 
      "Value": 2000000
    }, 
    "/xyz/openbmc_project/sensors/power/p1_io_power": {
      "Scale": -6, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.Watts", 
      "Value": 48000000
    }, 
    "/xyz/openbmc_project/sensors/power/p1_mem_power": {
      "Scale": -6, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.Watts", 
      "Value": 18000000
    }, 
    "/xyz/openbmc_project/sensors/power/p1_power": {
      "Scale": -6, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.Watts", 
      "Value": 46000000
    }, 
    "/xyz/openbmc_project/sensors/power/ps0_input_power": {
      "Scale": -6, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.Watts", 
      "Value": 518000000
    }, 
    "/xyz/openbmc_project/sensors/power/ps1_input_power": {
      "Scale": -6, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.Watts", 
      "Value": 0
    }, 
    "/xyz/openbmc_project/sensors/power/total_power": {
      "Scale": -6, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.Watts", 
      "Value": 443000000
    }, 
    "/xyz/openbmc_project/sensors/temperature/ambient": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.DegreesC", 
      "Value": 19880
    }, 
    "/xyz/openbmc_project/sensors/temperature/dimm0_temp": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.DegreesC", 
      "Value": 21000
    }, 
    "/xyz/openbmc_project/sensors/temperature/dimm10_temp": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.DegreesC", 
      "Value": 21000
    }, 
    "/xyz/openbmc_project/sensors/temperature/dimm11_temp": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.DegreesC", 
      "Value": 21000
    }, 
    "/xyz/openbmc_project/sensors/temperature/dimm13_temp": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.DegreesC", 
      "Value": 24000
    }, 
    "/xyz/openbmc_project/sensors/temperature/dimm15_temp": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.DegreesC", 
      "Value": 22000
    }, 
    "/xyz/openbmc_project/sensors/temperature/dimm1_temp": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.DegreesC", 
      "Value": 21000
    }, 
    "/xyz/openbmc_project/sensors/temperature/dimm2_temp": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.DegreesC", 
      "Value": 21000
    }, 
    "/xyz/openbmc_project/sensors/temperature/dimm3_temp": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.DegreesC", 
      "Value": 21000
    }, 
    "/xyz/openbmc_project/sensors/temperature/dimm4_temp": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.DegreesC", 
      "Value": 21000
    }, 
    "/xyz/openbmc_project/sensors/temperature/dimm5_temp": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.DegreesC", 
      "Value": 21000
    }, 
    "/xyz/openbmc_project/sensors/temperature/dimm6_temp": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.DegreesC", 
      "Value": 22000
    }, 
    "/xyz/openbmc_project/sensors/temperature/dimm7_temp": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.DegreesC", 
      "Value": 21000
    }, 
    "/xyz/openbmc_project/sensors/temperature/dimm9_temp": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.DegreesC", 
      "Value": 22000
    }, 
    "/xyz/openbmc_project/sensors/temperature/p0_core0_temp": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.DegreesC", 
      "Value": 29000
    }, 
    "/xyz/openbmc_project/sensors/temperature/p0_core10_temp": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.DegreesC", 
      "Value": 31000
    }, 
    "/xyz/openbmc_project/sensors/temperature/p0_core11_temp": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.DegreesC", 
      "Value": 31000
    }, 
    "/xyz/openbmc_project/sensors/temperature/p0_core12_temp": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.DegreesC", 
      "Value": 33000
    }, 
    "/xyz/openbmc_project/sensors/temperature/p0_core13_temp": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.DegreesC", 
      "Value": 31000
    }, 
    "/xyz/openbmc_project/sensors/temperature/p0_core14_temp": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.DegreesC", 
      "Value": 32000
    }, 
    "/xyz/openbmc_project/sensors/temperature/p0_core15_temp": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.DegreesC", 
      "Value": 33000
    }, 
    "/xyz/openbmc_project/sensors/temperature/p0_core16_temp": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.DegreesC", 
      "Value": 32000
    }, 
    "/xyz/openbmc_project/sensors/temperature/p0_core17_temp": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.DegreesC", 
      "Value": 32000
    }, 
    "/xyz/openbmc_project/sensors/temperature/p0_core18_temp": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.DegreesC", 
      "Value": 33000
    }, 
    "/xyz/openbmc_project/sensors/temperature/p0_core19_temp": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.DegreesC", 
      "Value": 33000
    }, 
    "/xyz/openbmc_project/sensors/temperature/p0_core20_temp": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.DegreesC", 
      "Value": 33000
    }, 
    "/xyz/openbmc_project/sensors/temperature/p0_core21_temp": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.DegreesC", 
      "Value": 32000
    }, 
    "/xyz/openbmc_project/sensors/temperature/p0_core22_temp": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.DegreesC", 
      "Value": 34000
    }, 
    "/xyz/openbmc_project/sensors/temperature/p0_core23_temp": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.DegreesC", 
      "Value": 32000
    }, 
    "/xyz/openbmc_project/sensors/temperature/p0_core2_temp": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.DegreesC", 
      "Value": 30000
    }, 
    "/xyz/openbmc_project/sensors/temperature/p0_core3_temp": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.DegreesC", 
      "Value": 30000
    }, 
    "/xyz/openbmc_project/sensors/temperature/p0_core4_temp": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.DegreesC", 
      "Value": 33000
    }, 
    "/xyz/openbmc_project/sensors/temperature/p0_core5_temp": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.DegreesC", 
      "Value": 32000
    }, 
    "/xyz/openbmc_project/sensors/temperature/p0_core6_temp": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.DegreesC", 
      "Value": 31000
    }, 
    "/xyz/openbmc_project/sensors/temperature/p0_core7_temp": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.DegreesC", 
      "Value": 31000
    }, 
    "/xyz/openbmc_project/sensors/temperature/p0_core8_temp": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.DegreesC", 
      "Value": 31000
    }, 
    "/xyz/openbmc_project/sensors/temperature/p0_vcs_temp": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.DegreesC", 
      "Value": 27000
    }, 
    "/xyz/openbmc_project/sensors/temperature/p0_vdd_temp": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.DegreesC", 
      "Value": 27000
    }, 
    "/xyz/openbmc_project/sensors/temperature/p0_vddr_temp": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.DegreesC", 
      "Value": 23000
    }, 
    "/xyz/openbmc_project/sensors/temperature/p0_vdn_temp": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.DegreesC", 
      "Value": 24000
    }, 
    "/xyz/openbmc_project/sensors/temperature/p1_core10_temp": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.DegreesC", 
      "Value": 28000
    }, 
    "/xyz/openbmc_project/sensors/temperature/p1_core11_temp": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.DegreesC", 
      "Value": 28000
    }, 
    "/xyz/openbmc_project/sensors/temperature/p1_core12_temp": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.DegreesC", 
      "Value": 30000
    }, 
    "/xyz/openbmc_project/sensors/temperature/p1_core13_temp": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.DegreesC", 
      "Value": 30000
    }, 
    "/xyz/openbmc_project/sensors/temperature/p1_core14_temp": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.DegreesC", 
      "Value": 29000
    }, 
    "/xyz/openbmc_project/sensors/temperature/p1_core15_temp": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.DegreesC", 
      "Value": 29000
    }, 
    "/xyz/openbmc_project/sensors/temperature/p1_core16_temp": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.DegreesC", 
      "Value": 29000
    }, 
    "/xyz/openbmc_project/sensors/temperature/p1_core17_temp": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.DegreesC", 
      "Value": 28000
    }, 
    "/xyz/openbmc_project/sensors/temperature/p1_core18_temp": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.DegreesC", 
      "Value": 29000
    }, 
    "/xyz/openbmc_project/sensors/temperature/p1_core19_temp": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.DegreesC", 
      "Value": 27000
    }, 
    "/xyz/openbmc_project/sensors/temperature/p1_core20_temp": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.DegreesC", 
      "Value": 30000
    }, 
    "/xyz/openbmc_project/sensors/temperature/p1_core21_temp": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.DegreesC", 
      "Value": 31000
    }, 
    "/xyz/openbmc_project/sensors/temperature/p1_core22_temp": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.DegreesC", 
      "Value": 30000
    }, 
    "/xyz/openbmc_project/sensors/temperature/p1_core23_temp": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.DegreesC", 
      "Value": 29000
    }, 
    "/xyz/openbmc_project/sensors/temperature/p1_core2_temp": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.DegreesC", 
      "Value": 28000
    }, 
    "/xyz/openbmc_project/sensors/temperature/p1_core3_temp": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.DegreesC", 
      "Value": 28000
    }, 
    "/xyz/openbmc_project/sensors/temperature/p1_core4_temp": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.DegreesC", 
      "Value": 31000
    }, 
    "/xyz/openbmc_project/sensors/temperature/p1_core5_temp": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.DegreesC", 
      "Value": 29000
    }, 
    "/xyz/openbmc_project/sensors/temperature/p1_core6_temp": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.DegreesC", 
      "Value": 29000
    }, 
    "/xyz/openbmc_project/sensors/temperature/p1_core7_temp": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.DegreesC", 
      "Value": 29000
    }, 
    "/xyz/openbmc_project/sensors/temperature/p1_core8_temp": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.DegreesC", 
      "Value": 28000
    }, 
    "/xyz/openbmc_project/sensors/temperature/p1_core9_temp": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.DegreesC", 
      "Value": 28000
    }, 
    "/xyz/openbmc_project/sensors/temperature/p1_vcs_temp": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.DegreesC", 
      "Value": 24000
    }, 
    "/xyz/openbmc_project/sensors/temperature/p1_vdd_temp": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.DegreesC", 
      "Value": 24000
    }, 
    "/xyz/openbmc_project/sensors/temperature/p1_vddr_temp": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.DegreesC", 
      "Value": 22000
    }, 
    "/xyz/openbmc_project/sensors/temperature/p1_vdn_temp": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.DegreesC", 
      "Value": 22000
    }, 
    "/xyz/openbmc_project/sensors/voltage/ps0_input_voltage": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.Volts", 
      "Value": 204500
    }, 
    "/xyz/openbmc_project/sensors/voltage/ps0_output_voltage": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.Volts", 
      "Value": 12250
    }, 
    "/xyz/openbmc_project/sensors/voltage/ps1_input_voltage": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.Volts", 
      "Value": 0
    }, 
    "/xyz/openbmc_project/sensors/voltage/ps1_output_voltage": {
      "Scale": -3, 
      "Unit": "xyz.openbmc_project.Sensor.Value.Unit.Volts", 
      "Value": 250
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171020 13:11:54.840">To JSON using : pretty_print=True </msg>
<msg level="INFO" timestamp="20171020 13:11:54.840">${jsondata} = {
    "data": {
        "/xyz/openbmc_project/sensors/current/ps0_output_current": {
            "Scale": -3,
            "Unit": "xyz.openbmc_project.Sensor.Value.Unit.Amperes",
            "Value": ...</msg>
<status status="PASS" endtime="20171020 13:11:54.840" starttime="20171020 13:11:54.837"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:11:54.842" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/24591/obmc-robot/logs/20171020131146783322_TestsTestBasicPoweron/20171020131146783322_PowerOnTest/20171020131146783322_BMC_sensor_list.txt"&gt;/tmp/fspcibld/24591/obmc-robot/logs/20171020131146783322_TestsTestBasicPoweron/20171020131146783322_PowerOnTest/20171020131146783322_BMC_sensor_list.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171020 13:11:54.842" starttime="20171020 13:11:54.842"></status>
</kw>
<status status="PASS" endtime="20171020 13:11:54.842" starttime="20171020 13:11:54.841"></status>
</kw>
<status status="PASS" endtime="20171020 13:11:54.842" starttime="20171020 13:11:50.577"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_inventory', '/xyz/openbmc_project/inventory/enumerate')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:11:54.843">${logpath} = /tmp/fspcibld/24591/obmc-robot/logs/20171020131146783322_TestsTestBasicPoweron/20171020131146783322_PowerOnTest/20171020131146783322_BMC_inventory.txt</msg>
<status status="PASS" endtime="20171020 13:11:54.843" starttime="20171020 13:11:54.843"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:11:54.846">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171020 13:11:54.847" starttime="20171020 13:11:54.846"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:11:54.847">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171020 13:11:54.847" starttime="20171020 13:11:54.847"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:11:54.848">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171020 13:11:54.848" starttime="20171020 13:11:54.848"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:11:54.849">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171020 13:11:54.849" starttime="20171020 13:11:54.848"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:11:55.026">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171020 13:11:55.027" starttime="20171020 13:11:54.849"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:11:55.027">${status} = PASS</msg>
<msg level="INFO" timestamp="20171020 13:11:55.027">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:11:55.027" starttime="20171020 13:11:54.849"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:11:55.027">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:11:55.027" starttime="20171020 13:11:55.027"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:11:55.028">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:11:55.028" starttime="20171020 13:11:55.028"></status>
</kw>
<status status="PASS" endtime="20171020 13:11:55.028" starttime="20171020 13:11:54.845"></status>
</kw>
<status status="PASS" endtime="20171020 13:11:55.028" starttime="20171020 13:11:54.845"></status>
</kw>
<status status="PASS" endtime="20171020 13:11:55.028" starttime="20171020 13:11:54.844"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:11:55.029">${base_uri} = /xyz/openbmc_project/inventory/enumerate</msg>
<status status="PASS" endtime="20171020 13:11:55.029" starttime="20171020 13:11:55.029"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20171020 13:11:55.030" starttime="20171020 13:11:55.029"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:11:58.069">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/inventory/enumerate, headers=None json=None</msg>
<msg level="INFO" timestamp="20171020 13:11:58.069">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:11:58.069" starttime="20171020 13:11:55.030"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20171020 13:11:58.070" starttime="20171020 13:11:58.069"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171020 13:11:58.070">Delete All Sessions</msg>
<status status="PASS" endtime="20171020 13:11:58.070" starttime="20171020 13:11:58.070"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:11:58.070">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:11:58.070" starttime="20171020 13:11:54.843"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:11:58.072">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:11:58.072" starttime="20171020 13:11:58.071"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:11:58.072">${status} = True</msg>
<status status="PASS" endtime="20171020 13:11:58.072" starttime="20171020 13:11:58.071"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status status="PASS" endtime="20171020 13:11:58.073" starttime="20171020 13:11:58.072"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:11:58.076">To JSON using : content={
  "data": {
    "/xyz/openbmc_project/inventory/system": {
      "AssetTag": "", 
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 0, 
      "Manufacturer": "", 
      "Model": "0000000000000000", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "", 
      "SerialNumber": "0000000000000000"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis": {
      "AirCooled": 1, 
      "WaterCooled": 0
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/activation": {
      "endpoints": [
        "/xyz/openbmc_project/software/8764baa3", 
        "/xyz/openbmc_project/software/7a9ef57c"
      ]
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard": {
      "BuildDate": "1996-01-01 - 00:00:00", 
      "Cached": 0, 
      "FieldReplaceable": 0, 
      "Manufacturer": "0000000000000000", 
      "Model": "", 
      "PartNumber": "00VK525         ", 
      "Present": 1, 
      "PrettyName": "SYSTEM PLANAR   ", 
      "SerialNumber": "Y130UF72700J    "
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc": {
      "BuildDate": "", 
      "FieldReplaceable": 0, 
      "Manufacturer": "IBM", 
      "Model": "", 
      "PartNumber": "01DH051", 
      "Present": 1, 
      "PrettyName": "BMC PLANAR  ", 
      "SerialNumber": "000000000000", 
      "UUID": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc/activation": {
      "endpoints": [
        "/xyz/openbmc_project/software/adf763d5", 
        "/xyz/openbmc_project/software/da042ae7"
      ]
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc/ethernet": {
      "FieldReplaceable": 0, 
      "MACAddress": "70:e2:84:14:23:e1", 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0": {
      "BuildDate": "1996-01-01 - 00:00:00", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "IBM", 
      "Model": "", 
      "PartNumber": "01HL906", 
      "Present": 1, 
      "PrettyName": "PROCESSOR MODULE", 
      "SerialNumber": "YA3933943218", 
      "Version": "20"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core0": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core10": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core11": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core12": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core13": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core14": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core15": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core16": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core17": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core18": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core19": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core2": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core20": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core21": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core22": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core23": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core3": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core4": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core5": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core6": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core7": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core8": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1": {
      "BuildDate": "1996-01-01 - 00:00:00", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "IBM", 
      "Model": "", 
      "PartNumber": "01HL906", 
      "Present": 1, 
      "PrettyName": "PROCESSOR MODULE", 
      "SerialNumber": "YA3933943264", 
      "Version": "20"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core10": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core11": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core12": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core13": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core14": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core15": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core16": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core17": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core18": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core19": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core2": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core20": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core21": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core22": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core23": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core3": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core4": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core5": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core6": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core7": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core8": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core9": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm0": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "36ASF2G72PZ-2G6B2   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x15db196b", 
      "Version": "0x32"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm1": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "36ASF2G72PZ-2G6B2   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x15db196a", 
      "Version": "0x32"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm10": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "36ASF2G72PZ-2G6B2   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x15db17ef", 
      "Version": "0x32"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm11": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "36ASF2G72PZ-2G6B2   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x15db1801", 
      "Version": "0x32"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm12": {
      "Functional": 0, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm13": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "36ASF2G72PZ-2G6B2   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x15db1824", 
      "Version": "0x32"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm14": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 0, 
      "Manufacturer": "0x2c80", 
      "Model": "36ASF2G72PZ-2G6B2   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x15db1907", 
      "Version": "0x32"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm15": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "36ASF2G72PZ-2G6B2   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x15db18d0", 
      "Version": "0x32"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm2": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "36ASF2G72PZ-2G6B2   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x15db196c", 
      "Version": "0x32"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm3": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "36ASF2G72PZ-2G6B2   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x15db196d", 
      "Version": "0x32"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm4": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "36ASF2G72PZ-2G6B2   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x15db1971", 
      "Version": "0x32"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm5": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "36ASF2G72PZ-2G6B2   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x15db17e7", 
      "Version": "0x32"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm6": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "36ASF2G72PZ-2G6B2   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x15db1973", 
      "Version": "0x32"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm7": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "36ASF2G72PZ-2G6B2   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x15db1970", 
      "Version": "0x32"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm8": {
      "Functional": 0, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm9": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "36ASF2G72PZ-2G6B2   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x15db17ed", 
      "Version": "0x32"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/fan0": {
      "Functional": 1, 
      "MeetsMinimumShipLevel": 1, 
      "Present": 1, 
      "PrettyName": "fan0"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/fan1": {
      "Functional": 1, 
      "MeetsMinimumShipLevel": 1, 
      "Present": 1, 
      "PrettyName": "fan1"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/fan2": {
      "Functional": 1, 
      "MeetsMinimumShipLevel": 1, 
      "Present": 1, 
      "PrettyName": "fan2"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/fan3": {
      "Functional": 1, 
      "MeetsMinimumShipLevel": 1, 
      "Present": 1, 
      "PrettyName": "fan3"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/power_supply0": {
      "Present": 1, 
      "PrettyName": "power_supply0"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/power_supply1": {
      "Present": 1, 
      "PrettyName": "power_supply1"
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171020 13:11:58.076">To JSON using : pretty_print=True </msg>
<msg level="INFO" timestamp="20171020 13:11:58.077">${jsondata} = {
    "data": {
        "/xyz/openbmc_project/inventory/system": {
            "AssetTag": "",
            "BuildDate": "",
            "Cached": 0,
            "FieldReplaceable": 0,
            "Man...</msg>
<status status="PASS" endtime="20171020 13:11:58.077" starttime="20171020 13:11:58.073"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:11:58.078" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/24591/obmc-robot/logs/20171020131146783322_TestsTestBasicPoweron/20171020131146783322_PowerOnTest/20171020131146783322_BMC_inventory.txt"&gt;/tmp/fspcibld/24591/obmc-robot/logs/20171020131146783322_TestsTestBasicPoweron/20171020131146783322_PowerOnTest/20171020131146783322_BMC_inventory.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171020 13:11:58.078" starttime="20171020 13:11:58.078"></status>
</kw>
<status status="PASS" endtime="20171020 13:11:58.079" starttime="20171020 13:11:58.077"></status>
</kw>
<status status="PASS" endtime="20171020 13:11:58.079" starttime="20171020 13:11:54.843"></status>
</kw>
<kw type="foritem" name="${cmd} = ('FIRMWARE_list', '/xyz/openbmc_project/software/enumerate')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:11:58.079">${logpath} = /tmp/fspcibld/24591/obmc-robot/logs/20171020131146783322_TestsTestBasicPoweron/20171020131146783322_PowerOnTest/20171020131146783322_FIRMWARE_list.txt</msg>
<status status="PASS" endtime="20171020 13:11:58.079" starttime="20171020 13:11:58.079"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:11:58.082">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171020 13:11:58.083" starttime="20171020 13:11:58.082"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:11:58.083">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171020 13:11:58.083" starttime="20171020 13:11:58.083"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:11:58.084">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171020 13:11:58.084" starttime="20171020 13:11:58.084"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:11:58.085">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171020 13:11:58.085" starttime="20171020 13:11:58.084"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:11:58.333">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171020 13:11:58.334" starttime="20171020 13:11:58.085"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:11:58.334">${status} = PASS</msg>
<msg level="INFO" timestamp="20171020 13:11:58.334">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:11:58.334" starttime="20171020 13:11:58.085"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:11:58.334">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:11:58.335" starttime="20171020 13:11:58.334"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:11:58.335">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:11:58.335" starttime="20171020 13:11:58.335"></status>
</kw>
<status status="PASS" endtime="20171020 13:11:58.335" starttime="20171020 13:11:58.082"></status>
</kw>
<status status="PASS" endtime="20171020 13:11:58.335" starttime="20171020 13:11:58.081"></status>
</kw>
<status status="PASS" endtime="20171020 13:11:58.336" starttime="20171020 13:11:58.080"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:11:58.336">${base_uri} = /xyz/openbmc_project/software/enumerate</msg>
<status status="PASS" endtime="20171020 13:11:58.336" starttime="20171020 13:11:58.336"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20171020 13:11:58.337" starttime="20171020 13:11:58.336"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:11:58.761">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/software/enumerate, headers=None json=None</msg>
<msg level="INFO" timestamp="20171020 13:11:58.761">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:11:58.761" starttime="20171020 13:11:58.337"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20171020 13:11:58.762" starttime="20171020 13:11:58.761"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171020 13:11:58.762">Delete All Sessions</msg>
<status status="PASS" endtime="20171020 13:11:58.762" starttime="20171020 13:11:58.762"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:11:58.762">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:11:58.762" starttime="20171020 13:11:58.080"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:11:58.763">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:11:58.763" starttime="20171020 13:11:58.763"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:11:58.763">${status} = True</msg>
<status status="PASS" endtime="20171020 13:11:58.763" starttime="20171020 13:11:58.763"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status status="PASS" endtime="20171020 13:11:58.764" starttime="20171020 13:11:58.764"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:11:58.765">To JSON using : content={
  "data": {
    "/xyz/openbmc_project/software/7a9ef57c": {
      "Activation": "xyz.openbmc_project.Software.Activation.Activations.Active", 
      "ExtendedVersion": "op-build-57a0c70-dirty,buildroot-2017.08-6-g319c6e1,skiboot-v5.8-90-g398a98123641-pf316294,hostboot-3d6c541,linux-4.13-openpower1-pe0f5c53,petitboot-v1.5.1-pd10dfac,machine-xml-f8aaa73,occ-a43395b,hostboot-binaries-836385d,capp-ucode-9c73e9f,sbe-8d90ab2", 
      "Path": "", 
      "Priority": 1, 
      "Purpose": "xyz.openbmc_project.Software.Version.VersionPurpose.Host", 
      "RequestedActivation": "xyz.openbmc_project.Software.Activation.RequestedActivations.None", 
      "Version": "IBM-witherspoon-sequoia-ibm-OP9_v1.19_1.35", 
      "associations": [
        [
          "inventory", 
          "activation", 
          "/xyz/openbmc_project/inventory/system/chassis"
        ]
      ]
    }, 
    "/xyz/openbmc_project/software/7a9ef57c/inventory": {
      "endpoints": [
        "/xyz/openbmc_project/inventory/system/chassis"
      ]
    }, 
    "/xyz/openbmc_project/software/7a9ef57c/software_version": {
      "endpoints": [
        "/xyz/openbmc_project/software"
      ]
    }, 
    "/xyz/openbmc_project/software/8764baa3": {
      "Activation": "xyz.openbmc_project.Software.Activation.Activations.Active", 
      "ExtendedVersion": "op-build-v1.7-1321-g6eef393-dirty,buildroot-2017.05-163-g8035745,skiboot-v5.8-rc1-pd9d2012,hostboot-c68be97,linux-4.12.8-openpower1-p919e663,petitboot-v1.5.1-p848cad7,machine-xml-c1e49a6-pbb9f626,occ-854999a,hostboot-binaries-67a15fd,capp-ucode-9c73e9f,sbe-4a62126-p180ac2a", 
      "Path": "", 
      "Priority": 0, 
      "Purpose": "xyz.openbmc_project.Software.Version.VersionPurpose.Host", 
      "RequestedActivation": "xyz.openbmc_project.Software.Activation.RequestedActivations.None", 
      "Version": "IBM-witherspoon-sequoia-ibm-OP9_v1.18_1.54", 
      "associations": [
        [
          "inventory", 
          "activation", 
          "/xyz/openbmc_project/inventory/system/chassis"
        ]
      ]
    }, 
    "/xyz/openbmc_project/software/8764baa3/inventory": {
      "endpoints": [
        "/xyz/openbmc_project/inventory/system/chassis"
      ]
    }, 
    "/xyz/openbmc_project/software/8764baa3/software_version": {
      "endpoints": [
        "/xyz/openbmc_project/software"
      ]
    }, 
    "/xyz/openbmc_project/software/active": {
      "endpoints": [
        "/xyz/openbmc_project/software/8764baa3", 
        "/xyz/openbmc_project/software/7a9ef57c", 
        "/xyz/openbmc_project/software/adf763d5", 
        "/xyz/openbmc_project/software/da042ae7"
      ]
    }, 
    "/xyz/openbmc_project/software/adf763d5": {
      "Activation": "xyz.openbmc_project.Software.Activation.Activations.Active", 
      "Path": "", 
      "Priority": 1, 
      "Purpose": "xyz.openbmc_project.Software.Version.VersionPurpose.BMC", 
      "RequestedActivation": "xyz.openbmc_project.Software.Activation.RequestedActivations.None", 
      "Version": "v1.99.10-165-g28e4ea7", 
      "associations": [
        [
          "inventory", 
          "activation", 
          "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc"
        ]
      ]
    }, 
    "/xyz/openbmc_project/software/adf763d5/inventory": {
      "endpoints": [
        "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc"
      ]
    }, 
    "/xyz/openbmc_project/software/adf763d5/software_version": {
      "endpoints": [
        "/xyz/openbmc_project/software"
      ]
    }, 
    "/xyz/openbmc_project/software/da042ae7": {
      "Activation": "xyz.openbmc_project.Software.Activation.Activations.Active", 
      "Path": "", 
      "Priority": 0, 
      "Purpose": "xyz.openbmc_project.Software.Version.VersionPurpose.BMC", 
      "RequestedActivation": "xyz.openbmc_project.Software.Activation.RequestedActivations.None", 
      "Version": "v1.99.10-165-g11ddac1", 
      "associations": [
        [
          "inventory", 
          "activation", 
          "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc"
        ]
      ]
    }, 
    "/xyz/openbmc_project/software/da042ae7/inventory": {
      "endpoints": [
        "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc"
      ]
    }, 
    "/xyz/openbmc_project/software/da042ae7/software_version": {
      "endpoints": [
        "/xyz/openbmc_project/software"
      ]
    }, 
    "/xyz/openbmc_project/software/functional": {
      "endpoints": [
        "/xyz/openbmc_project/software/8764baa3", 
        "/xyz/openbmc_project/software/da042ae7"
      ]
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171020 13:11:58.765">To JSON using : pretty_print=True </msg>
<msg level="INFO" timestamp="20171020 13:11:58.765">${jsondata} = {
    "data": {
        "/xyz/openbmc_project/software/7a9ef57c": {
            "Activation": "xyz.openbmc_project.Software.Activation.Activations.Active",
            "ExtendedVersion": "op-build-57a...</msg>
<status status="PASS" endtime="20171020 13:11:58.766" starttime="20171020 13:11:58.764"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:11:58.767" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/24591/obmc-robot/logs/20171020131146783322_TestsTestBasicPoweron/20171020131146783322_PowerOnTest/20171020131146783322_FIRMWARE_list.txt"&gt;/tmp/fspcibld/24591/obmc-robot/logs/20171020131146783322_TestsTestBasicPoweron/20171020131146783322_PowerOnTest/20171020131146783322_FIRMWARE_list.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171020 13:11:58.767" starttime="20171020 13:11:58.767"></status>
</kw>
<status status="PASS" endtime="20171020 13:11:58.768" starttime="20171020 13:11:58.766"></status>
</kw>
<status status="PASS" endtime="20171020 13:11:58.768" starttime="20171020 13:11:58.079"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_control_list', '/xyz/openbmc_project/control/enumerate')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:11:58.768">${logpath} = /tmp/fspcibld/24591/obmc-robot/logs/20171020131146783322_TestsTestBasicPoweron/20171020131146783322_PowerOnTest/20171020131146783322_BMC_control_list.txt</msg>
<status status="PASS" endtime="20171020 13:11:58.768" starttime="20171020 13:11:58.768"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:11:58.772">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171020 13:11:58.772" starttime="20171020 13:11:58.771"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:11:58.772">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171020 13:11:58.773" starttime="20171020 13:11:58.772"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:11:58.773">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171020 13:11:58.773" starttime="20171020 13:11:58.773"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:11:58.774">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171020 13:11:58.774" starttime="20171020 13:11:58.774"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:11:59.003">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171020 13:11:59.003" starttime="20171020 13:11:58.775"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:11:59.003">${status} = PASS</msg>
<msg level="INFO" timestamp="20171020 13:11:59.003">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:11:59.003" starttime="20171020 13:11:58.775"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:11:59.003">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:11:59.004" starttime="20171020 13:11:59.003"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:11:59.004">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:11:59.004" starttime="20171020 13:11:59.004"></status>
</kw>
<status status="PASS" endtime="20171020 13:11:59.004" starttime="20171020 13:11:58.771"></status>
</kw>
<status status="PASS" endtime="20171020 13:11:59.004" starttime="20171020 13:11:58.770"></status>
</kw>
<status status="PASS" endtime="20171020 13:11:59.005" starttime="20171020 13:11:58.769"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:11:59.005">${base_uri} = /xyz/openbmc_project/control/enumerate</msg>
<status status="PASS" endtime="20171020 13:11:59.005" starttime="20171020 13:11:59.005"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20171020 13:11:59.006" starttime="20171020 13:11:59.006"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:11:59.354">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/control/enumerate, headers=None json=None</msg>
<msg level="INFO" timestamp="20171020 13:11:59.354">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:11:59.354" starttime="20171020 13:11:59.006"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20171020 13:11:59.355" starttime="20171020 13:11:59.354"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171020 13:11:59.355">Delete All Sessions</msg>
<status status="PASS" endtime="20171020 13:11:59.355" starttime="20171020 13:11:59.355"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:11:59.356">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:11:59.356" starttime="20171020 13:11:58.769"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:11:59.357">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:11:59.357" starttime="20171020 13:11:59.356"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:11:59.357">${status} = True</msg>
<status status="PASS" endtime="20171020 13:11:59.357" starttime="20171020 13:11:59.356"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status status="PASS" endtime="20171020 13:11:59.358" starttime="20171020 13:11:59.357"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:11:59.358">To JSON using : content={
  "data": {
    "/xyz/openbmc_project/control/host0": {}, 
    "/xyz/openbmc_project/control/host0/TPMEnable": {
      "TPMEnable": 0
    }, 
    "/xyz/openbmc_project/control/host0/auto_reboot": {
      "AutoReboot": 1
    }, 
    "/xyz/openbmc_project/control/host0/boot": {
      "BootMode": "xyz.openbmc_project.Control.Boot.Mode.Modes.Regular", 
      "BootSource": "xyz.openbmc_project.Control.Boot.Source.Sources.Default"
    }, 
    "/xyz/openbmc_project/control/host0/boot/one_time": {
      "BootMode": "xyz.openbmc_project.Control.Boot.Mode.Modes.Setup", 
      "BootSource": "xyz.openbmc_project.Control.Boot.Source.Sources.Default", 
      "Enabled": 1
    }, 
    "/xyz/openbmc_project/control/host0/power_cap": {
      "PowerCap": 0, 
      "PowerCapEnable": 0
    }, 
    "/xyz/openbmc_project/control/host0/power_restore_policy": {
      "PowerRestorePolicy": "xyz.openbmc_project.Control.Power.RestorePolicy.Policy.Restore"
    }, 
    "/xyz/openbmc_project/control/host0/restriction_mode": {
      "RestrictionMode": "xyz.openbmc_project.Control.Security.RestrictionMode.Modes.None"
    }, 
    "/xyz/openbmc_project/control/minimum_ship_level_required": {
      "MinimumShipLevelRequired": 1
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171020 13:11:59.358">To JSON using : pretty_print=True </msg>
<msg level="INFO" timestamp="20171020 13:11:59.359">${jsondata} = {
    "data": {
        "/xyz/openbmc_project/control/host0": {},
        "/xyz/openbmc_project/control/host0/TPMEnable": {
            "TPMEnable": 0
        },
        "/xyz/openbmc_project/control/...</msg>
<status status="PASS" endtime="20171020 13:11:59.359" starttime="20171020 13:11:59.358"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:11:59.360" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/24591/obmc-robot/logs/20171020131146783322_TestsTestBasicPoweron/20171020131146783322_PowerOnTest/20171020131146783322_BMC_control_list.txt"&gt;/tmp/fspcibld/24591/obmc-robot/logs/20171020131146783322_TestsTestBasicPoweron/20171020131146783322_PowerOnTest/20171020131146783322_BMC_control_list.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171020 13:11:59.360" starttime="20171020 13:11:59.359"></status>
</kw>
<status status="PASS" endtime="20171020 13:11:59.360" starttime="20171020 13:11:59.359"></status>
</kw>
<status status="PASS" endtime="20171020 13:11:59.360" starttime="20171020 13:11:58.768"></status>
</kw>
<kw type="foritem" name="${cmd} = ('OCC_state', '/org/open_power/control/enumerate')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:11:59.361">${logpath} = /tmp/fspcibld/24591/obmc-robot/logs/20171020131146783322_TestsTestBasicPoweron/20171020131146783322_PowerOnTest/20171020131146783322_OCC_state.txt</msg>
<status status="PASS" endtime="20171020 13:11:59.361" starttime="20171020 13:11:59.361"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:11:59.364">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171020 13:11:59.365" starttime="20171020 13:11:59.364"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:11:59.365">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171020 13:11:59.365" starttime="20171020 13:11:59.365"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:11:59.366">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171020 13:11:59.366" starttime="20171020 13:11:59.366"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:11:59.367">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171020 13:11:59.367" starttime="20171020 13:11:59.366"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:11:59.696">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171020 13:11:59.696" starttime="20171020 13:11:59.367"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:11:59.696">${status} = PASS</msg>
<msg level="INFO" timestamp="20171020 13:11:59.696">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:11:59.696" starttime="20171020 13:11:59.367"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:11:59.697">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:11:59.697" starttime="20171020 13:11:59.697"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:11:59.698">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:11:59.698" starttime="20171020 13:11:59.697"></status>
</kw>
<status status="PASS" endtime="20171020 13:11:59.698" starttime="20171020 13:11:59.364"></status>
</kw>
<status status="PASS" endtime="20171020 13:11:59.698" starttime="20171020 13:11:59.363"></status>
</kw>
<status status="PASS" endtime="20171020 13:11:59.698" starttime="20171020 13:11:59.362"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:11:59.698">${base_uri} = /org/open_power/control/enumerate</msg>
<status status="PASS" endtime="20171020 13:11:59.699" starttime="20171020 13:11:59.698"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20171020 13:11:59.699" starttime="20171020 13:11:59.699"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:11:59.969">Get Request using : alias=openbmc, uri=/org/open_power/control/enumerate, headers=None json=None</msg>
<msg level="INFO" timestamp="20171020 13:11:59.969">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:11:59.969" starttime="20171020 13:11:59.699"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20171020 13:11:59.970" starttime="20171020 13:11:59.970"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171020 13:11:59.970">Delete All Sessions</msg>
<status status="PASS" endtime="20171020 13:11:59.971" starttime="20171020 13:11:59.970"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:11:59.971">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:11:59.971" starttime="20171020 13:11:59.362"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:11:59.972">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:11:59.972" starttime="20171020 13:11:59.972"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:11:59.972">${status} = True</msg>
<status status="PASS" endtime="20171020 13:11:59.972" starttime="20171020 13:11:59.971"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status status="PASS" endtime="20171020 13:11:59.973" starttime="20171020 13:11:59.972"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:11:59.974">To JSON using : content={
  "data": {
    "/org/open_power/control/host0": {}, 
    "/org/open_power/control/occ0": {
      "OccActive": 1, 
      "ThrottleMemTemp": 0, 
      "ThrottleProcPower": 0, 
      "ThrottleProcTemp": 0
    }, 
    "/org/open_power/control/occ1": {
      "OccActive": 1, 
      "ThrottleMemTemp": 0, 
      "ThrottleProcPower": 0, 
      "ThrottleProcTemp": 0
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171020 13:11:59.974">To JSON using : pretty_print=True </msg>
<msg level="INFO" timestamp="20171020 13:11:59.974">${jsondata} = {
    "data": {
        "/org/open_power/control/host0": {},
        "/org/open_power/control/occ0": {
            "OccActive": 1,
            "ThrottleMemTemp": 0,
            "ThrottleProcPower": 0,...</msg>
<status status="PASS" endtime="20171020 13:11:59.974" starttime="20171020 13:11:59.973"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:11:59.975" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/24591/obmc-robot/logs/20171020131146783322_TestsTestBasicPoweron/20171020131146783322_PowerOnTest/20171020131146783322_OCC_state.txt"&gt;/tmp/fspcibld/24591/obmc-robot/logs/20171020131146783322_TestsTestBasicPoweron/20171020131146783322_PowerOnTest/20171020131146783322_OCC_state.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171020 13:11:59.975" starttime="20171020 13:11:59.975"></status>
</kw>
<status status="PASS" endtime="20171020 13:11:59.975" starttime="20171020 13:11:59.974"></status>
</kw>
<status status="PASS" endtime="20171020 13:11:59.976" starttime="20171020 13:11:59.361"></status>
</kw>
<status status="PASS" endtime="20171020 13:11:59.976" starttime="20171020 13:11:47.229"></status>
</kw>
<status status="PASS" endtime="20171020 13:11:59.976" starttime="20171020 13:11:47.228"></status>
</kw>
<status status="PASS" endtime="20171020 13:11:59.976" starttime="20171020 13:11:47.228"></status>
</kw>
<status status="PASS" endtime="20171020 13:11:59.976" starttime="20171020 13:11:47.227"></status>
</kw>
<status status="PASS" endtime="20171020 13:11:59.976" starttime="20171020 13:11:47.227"></status>
</kw>
<status status="PASS" endtime="20171020 13:11:59.976" starttime="20171020 13:11:47.201"></status>
</kw>
<status status="PASS" endtime="20171020 13:11:59.976" starttime="20171020 13:11:47.198"></status>
</kw>
<status status="PASS" endtime="20171020 13:11:59.976" starttime="20171020 13:11:47.198"></status>
</kw>
<kw type="foritem" name="${method} = ('FFDC Generic Report', 'BMC FFDC Manifest')">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status status="PASS" endtime="20171020 13:11:59.978" starttime="20171020 13:11:59.978"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:11:59.978">${status} = PASS</msg>
<msg level="INFO" timestamp="20171020 13:11:59.978">${ret_values} = None</msg>
<status status="PASS" endtime="20171020 13:11:59.978" starttime="20171020 13:11:59.977"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status status="PASS" endtime="20171020 13:11:59.979" starttime="20171020 13:11:59.978"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="BMC FFDC Manifest" library="openbmc_ffdc_methods">
<doc>Get the commands index for the FFDC_BMC_CMD,</doc>
<kw name="Get Ffdc Cmd Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:12:00.006">@{entries} = [ BMC DATA | DRIVER INFO | APPLICATION DATA ]</msg>
<status status="PASS" endtime="20171020 13:12:00.006" starttime="20171020 13:12:00.006"></status>
</kw>
<kw type="for" name="${index} IN [ @{entries} ]">
<kw type="foritem" name="${index} = BMC DATA">
<kw name="Iterate BMC Command List Pairs" library="openbmc_ffdc_methods">
<doc>Feed in key pair list from dictionary to execute</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Bmc Cmd" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:12:00.007">@{cmd_list} = [ ('BMC File System Disk Space Usage', 'df -hT') | ('BMC OS', 'uname -a') | ('BMC Uptime', 'uptime') ]</msg>
<status status="PASS" endtime="20171020 13:12:00.007" starttime="20171020 13:12:00.007"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${ENTRY_INDEX}</arg>
<arg>${key_index}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:12:00.013">${ENTRY_INDEX} = BMC DATA</msg>
<status status="PASS" endtime="20171020 13:12:00.013" starttime="20171020 13:12:00.008"></status>
</kw>
<kw type="for" name="${cmd} IN [ @{cmd_list} ]">
<kw type="foritem" name="${cmd} = ('BMC File System Disk Space Usage', 'df -hT')">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:12:00.016" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/24591/obmc-robot/logs/20171020131146783322_TestsTestBasicPoweron/20171020131146783322_PowerOnTest/20171020131146783322_BMC_general.txt"&gt;/tmp/fspcibld/24591/obmc-robot/logs/20171020131146783322_TestsTestBasicPoweron/20171020131146783322_PowerOnTest/20171020131146783322_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171020 13:12:00.016" starttime="20171020 13:12:00.016"></status>
</kw>
<status status="PASS" endtime="20171020 13:12:00.017" starttime="20171020 13:12:00.015"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:12:00.018" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/24591/obmc-robot/logs/20171020131146783322_TestsTestBasicPoweron/20171020131146783322_PowerOnTest/20171020131146783322_BMC_general.txt"&gt;/tmp/fspcibld/24591/obmc-robot/logs/20171020131146783322_TestsTestBasicPoweron/20171020131146783322_PowerOnTest/20171020131146783322_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171020 13:12:00.018" starttime="20171020 13:12:00.018"></status>
</kw>
<status status="PASS" endtime="20171020 13:12:00.018" starttime="20171020 13:12:00.017"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:12:00.019" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/24591/obmc-robot/logs/20171020131146783322_TestsTestBasicPoweron/20171020131146783322_PowerOnTest/20171020131146783322_BMC_general.txt"&gt;/tmp/fspcibld/24591/obmc-robot/logs/20171020131146783322_TestsTestBasicPoweron/20171020131146783322_PowerOnTest/20171020131146783322_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171020 13:12:00.019" starttime="20171020 13:12:00.019"></status>
</kw>
<status status="PASS" endtime="20171020 13:12:00.020" starttime="20171020 13:12:00.018"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:12:00.021" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/24591/obmc-robot/logs/20171020131146783322_TestsTestBasicPoweron/20171020131146783322_PowerOnTest/20171020131146783322_BMC_general.txt"&gt;/tmp/fspcibld/24591/obmc-robot/logs/20171020131146783322_TestsTestBasicPoweron/20171020131146783322_PowerOnTest/20171020131146783322_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171020 13:12:00.021" starttime="20171020 13:12:00.020"></status>
</kw>
<status status="PASS" endtime="20171020 13:12:00.021" starttime="20171020 13:12:00.020"></status>
</kw>
<status status="PASS" endtime="20171020 13:12:00.021" starttime="20171020 13:12:00.015"></status>
</kw>
<status status="PASS" endtime="20171020 13:12:00.021" starttime="20171020 13:12:00.014"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:12:00.022">${cmd_buf} = BMC Execute Command  df -hT  ignore_err=1</msg>
<status status="PASS" endtime="20171020 13:12:00.022" starttime="20171020 13:12:00.021"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>df -hT</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:12:00.093">width=80
host=9.3.86.161
port=22
alias=bmc_connection
term_type=vt100
newline=

prompt=# 
index=1
path_separator=/
height=24
encoding=UTF-8
timeout=25 seconds</msg>
<msg level="INFO" timestamp="20171020 13:12:00.093">Executing command 'df -hT'.</msg>
<msg level="INFO" timestamp="20171020 13:12:00.150">Command exited with return code 0.</msg>
<status status="PASS" endtime="20171020 13:12:00.150" starttime="20171020 13:12:00.054"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:12:00.150">${status} = PASS</msg>
<msg level="INFO" timestamp="20171020 13:12:00.150">${ret_values} = (u'Filesystem           Type            Size      Used Available Use% Mounted on\n/dev/root            squashfs       14.4M     14.4M         0 100% /\ndevtmpfs             devtmpfs      210.9M       ...</msg>
<status status="PASS" endtime="20171020 13:12:00.150" starttime="20171020 13:12:00.022"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:12:00.151">${stdout} = Filesystem           Type            Size      Used Available Use% Mounted on
/dev/root            squashfs       14.4M     14.4M         0 100% /
devtmpfs             devtmpfs      210.9M         0  ...</msg>
<status status="PASS" endtime="20171020 13:12:00.151" starttime="20171020 13:12:00.151"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:12:00.152">${stderr} = </msg>
<status status="PASS" endtime="20171020 13:12:00.152" starttime="20171020 13:12:00.151"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:12:00.159" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/24591/obmc-robot/logs/20171020131146783322_TestsTestBasicPoweron/20171020131146783322_PowerOnTest/20171020131146783322_BMC_general.txt"&gt;/tmp/fspcibld/24591/obmc-robot/logs/20171020131146783322_TestsTestBasicPoweron/20171020131146783322_PowerOnTest/20171020131146783322_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171020 13:12:00.159" starttime="20171020 13:12:00.158"></status>
</kw>
<status status="PASS" endtime="20171020 13:12:00.159" starttime="20171020 13:12:00.158"></status>
</kw>
<status status="PASS" endtime="20171020 13:12:00.159" starttime="20171020 13:12:00.152"></status>
</kw>
<status status="PASS" endtime="20171020 13:12:00.159" starttime="20171020 13:12:00.014"></status>
</kw>
<status status="PASS" endtime="20171020 13:12:00.159" starttime="20171020 13:12:00.013"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC OS', 'uname -a')">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:12:00.162" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/24591/obmc-robot/logs/20171020131146783322_TestsTestBasicPoweron/20171020131146783322_PowerOnTest/20171020131146783322_BMC_general.txt"&gt;/tmp/fspcibld/24591/obmc-robot/logs/20171020131146783322_TestsTestBasicPoweron/20171020131146783322_PowerOnTest/20171020131146783322_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171020 13:12:00.162" starttime="20171020 13:12:00.162"></status>
</kw>
<status status="PASS" endtime="20171020 13:12:00.162" starttime="20171020 13:12:00.161"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:12:00.163" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/24591/obmc-robot/logs/20171020131146783322_TestsTestBasicPoweron/20171020131146783322_PowerOnTest/20171020131146783322_BMC_general.txt"&gt;/tmp/fspcibld/24591/obmc-robot/logs/20171020131146783322_TestsTestBasicPoweron/20171020131146783322_PowerOnTest/20171020131146783322_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171020 13:12:00.164" starttime="20171020 13:12:00.163"></status>
</kw>
<status status="PASS" endtime="20171020 13:12:00.164" starttime="20171020 13:12:00.162"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:12:00.165" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/24591/obmc-robot/logs/20171020131146783322_TestsTestBasicPoweron/20171020131146783322_PowerOnTest/20171020131146783322_BMC_general.txt"&gt;/tmp/fspcibld/24591/obmc-robot/logs/20171020131146783322_TestsTestBasicPoweron/20171020131146783322_PowerOnTest/20171020131146783322_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171020 13:12:00.165" starttime="20171020 13:12:00.164"></status>
</kw>
<status status="PASS" endtime="20171020 13:12:00.165" starttime="20171020 13:12:00.164"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:12:00.166" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/24591/obmc-robot/logs/20171020131146783322_TestsTestBasicPoweron/20171020131146783322_PowerOnTest/20171020131146783322_BMC_general.txt"&gt;/tmp/fspcibld/24591/obmc-robot/logs/20171020131146783322_TestsTestBasicPoweron/20171020131146783322_PowerOnTest/20171020131146783322_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171020 13:12:00.166" starttime="20171020 13:12:00.166"></status>
</kw>
<status status="PASS" endtime="20171020 13:12:00.166" starttime="20171020 13:12:00.165"></status>
</kw>
<status status="PASS" endtime="20171020 13:12:00.166" starttime="20171020 13:12:00.161"></status>
</kw>
<status status="PASS" endtime="20171020 13:12:00.167" starttime="20171020 13:12:00.160"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:12:00.167">${cmd_buf} = BMC Execute Command  uname -a  ignore_err=1</msg>
<status status="PASS" endtime="20171020 13:12:00.167" starttime="20171020 13:12:00.167"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>uname -a</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:12:00.237">width=80
host=9.3.86.161
port=22
alias=bmc_connection
term_type=vt100
newline=

prompt=# 
index=1
path_separator=/
height=24
encoding=UTF-8
timeout=25 seconds</msg>
<msg level="INFO" timestamp="20171020 13:12:00.237">Executing command 'uname -a'.</msg>
<msg level="INFO" timestamp="20171020 13:12:00.348">Command exited with return code 0.</msg>
<status status="PASS" endtime="20171020 13:12:00.348" starttime="20171020 13:12:00.200"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:12:00.349">${status} = PASS</msg>
<msg level="INFO" timestamp="20171020 13:12:00.349">${ret_values} = (u'Linux witherspoon 4.10.17-1af701e56cd6bd5399b517e276d479482b702839 #1 Wed Oct 18 14:38:15 UTC 2017 armv6l GNU/Linux', u'', 0)</msg>
<status status="PASS" endtime="20171020 13:12:00.349" starttime="20171020 13:12:00.168"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:12:00.349">${stdout} = Linux witherspoon 4.10.17-1af701e56cd6bd5399b517e276d479482b702839 #1 Wed Oct 18 14:38:15 UTC 2017 armv6l GNU/Linux</msg>
<status status="PASS" endtime="20171020 13:12:00.349" starttime="20171020 13:12:00.349"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:12:00.350">${stderr} = </msg>
<status status="PASS" endtime="20171020 13:12:00.350" starttime="20171020 13:12:00.350"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:12:00.357" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/24591/obmc-robot/logs/20171020131146783322_TestsTestBasicPoweron/20171020131146783322_PowerOnTest/20171020131146783322_BMC_general.txt"&gt;/tmp/fspcibld/24591/obmc-robot/logs/20171020131146783322_TestsTestBasicPoweron/20171020131146783322_PowerOnTest/20171020131146783322_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171020 13:12:00.357" starttime="20171020 13:12:00.357"></status>
</kw>
<status status="PASS" endtime="20171020 13:12:00.357" starttime="20171020 13:12:00.356"></status>
</kw>
<status status="PASS" endtime="20171020 13:12:00.357" starttime="20171020 13:12:00.350"></status>
</kw>
<status status="PASS" endtime="20171020 13:12:00.357" starttime="20171020 13:12:00.159"></status>
</kw>
<status status="PASS" endtime="20171020 13:12:00.357" starttime="20171020 13:12:00.159"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC Uptime', 'uptime')">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:12:00.360" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/24591/obmc-robot/logs/20171020131146783322_TestsTestBasicPoweron/20171020131146783322_PowerOnTest/20171020131146783322_BMC_general.txt"&gt;/tmp/fspcibld/24591/obmc-robot/logs/20171020131146783322_TestsTestBasicPoweron/20171020131146783322_PowerOnTest/20171020131146783322_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171020 13:12:00.361" starttime="20171020 13:12:00.360"></status>
</kw>
<status status="PASS" endtime="20171020 13:12:00.361" starttime="20171020 13:12:00.359"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:12:00.362" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/24591/obmc-robot/logs/20171020131146783322_TestsTestBasicPoweron/20171020131146783322_PowerOnTest/20171020131146783322_BMC_general.txt"&gt;/tmp/fspcibld/24591/obmc-robot/logs/20171020131146783322_TestsTestBasicPoweron/20171020131146783322_PowerOnTest/20171020131146783322_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171020 13:12:00.362" starttime="20171020 13:12:00.362"></status>
</kw>
<status status="PASS" endtime="20171020 13:12:00.362" starttime="20171020 13:12:00.361"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:12:00.363" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/24591/obmc-robot/logs/20171020131146783322_TestsTestBasicPoweron/20171020131146783322_PowerOnTest/20171020131146783322_BMC_general.txt"&gt;/tmp/fspcibld/24591/obmc-robot/logs/20171020131146783322_TestsTestBasicPoweron/20171020131146783322_PowerOnTest/20171020131146783322_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171020 13:12:00.363" starttime="20171020 13:12:00.363"></status>
</kw>
<status status="PASS" endtime="20171020 13:12:00.363" starttime="20171020 13:12:00.362"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:12:00.364" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/24591/obmc-robot/logs/20171020131146783322_TestsTestBasicPoweron/20171020131146783322_PowerOnTest/20171020131146783322_BMC_general.txt"&gt;/tmp/fspcibld/24591/obmc-robot/logs/20171020131146783322_TestsTestBasicPoweron/20171020131146783322_PowerOnTest/20171020131146783322_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171020 13:12:00.365" starttime="20171020 13:12:00.364"></status>
</kw>
<status status="PASS" endtime="20171020 13:12:00.365" starttime="20171020 13:12:00.364"></status>
</kw>
<status status="PASS" endtime="20171020 13:12:00.365" starttime="20171020 13:12:00.359"></status>
</kw>
<status status="PASS" endtime="20171020 13:12:00.365" starttime="20171020 13:12:00.359"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:12:00.366">${cmd_buf} = BMC Execute Command  uptime  ignore_err=1</msg>
<status status="PASS" endtime="20171020 13:12:00.366" starttime="20171020 13:12:00.365"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>uptime</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:12:00.435">width=80
host=9.3.86.161
port=22
alias=bmc_connection
term_type=vt100
newline=

prompt=# 
index=1
path_separator=/
height=24
encoding=UTF-8
timeout=25 seconds</msg>
<msg level="INFO" timestamp="20171020 13:12:00.436">Executing command 'uptime'.</msg>
<msg level="INFO" timestamp="20171020 13:12:00.683">Command exited with return code 0.</msg>
<status status="PASS" endtime="20171020 13:12:00.683" starttime="20171020 13:12:00.398"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:12:00.683">${status} = PASS</msg>
<msg level="INFO" timestamp="20171020 13:12:00.683">${ret_values} = (u' 13:12:18 up 15 min,  load average: 1.05, 1.28, 1.11', u'', 0)</msg>
<status status="PASS" endtime="20171020 13:12:00.683" starttime="20171020 13:12:00.366"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:12:00.684">${stdout} =  13:12:18 up 15 min,  load average: 1.05, 1.28, 1.11</msg>
<status status="PASS" endtime="20171020 13:12:00.684" starttime="20171020 13:12:00.684"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:12:00.684">${stderr} = </msg>
<status status="PASS" endtime="20171020 13:12:00.684" starttime="20171020 13:12:00.684"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:12:00.691" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/24591/obmc-robot/logs/20171020131146783322_TestsTestBasicPoweron/20171020131146783322_PowerOnTest/20171020131146783322_BMC_general.txt"&gt;/tmp/fspcibld/24591/obmc-robot/logs/20171020131146783322_TestsTestBasicPoweron/20171020131146783322_PowerOnTest/20171020131146783322_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171020 13:12:00.692" starttime="20171020 13:12:00.691"></status>
</kw>
<status status="PASS" endtime="20171020 13:12:00.692" starttime="20171020 13:12:00.690"></status>
</kw>
<status status="PASS" endtime="20171020 13:12:00.692" starttime="20171020 13:12:00.685"></status>
</kw>
<status status="PASS" endtime="20171020 13:12:00.692" starttime="20171020 13:12:00.358"></status>
</kw>
<status status="PASS" endtime="20171020 13:12:00.692" starttime="20171020 13:12:00.358"></status>
</kw>
<status status="PASS" endtime="20171020 13:12:00.692" starttime="20171020 13:12:00.013"></status>
</kw>
<status status="PASS" endtime="20171020 13:12:00.692" starttime="20171020 13:12:00.007"></status>
</kw>
<status status="PASS" endtime="20171020 13:12:00.692" starttime="20171020 13:12:00.006"></status>
</kw>
<kw type="foritem" name="${index} = DRIVER INFO">
<kw name="Iterate BMC Command List Pairs" library="openbmc_ffdc_methods">
<doc>Feed in key pair list from dictionary to execute</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Bmc Cmd" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:12:00.693">@{cmd_list} = [ ('FW Timestamp', 'cat /etc/timestamp') | ('FW Level', 'cat /etc/os-release') ]</msg>
<status status="PASS" endtime="20171020 13:12:00.693" starttime="20171020 13:12:00.693"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${ENTRY_INDEX}</arg>
<arg>${key_index}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:12:00.694">${ENTRY_INDEX} = DRIVER INFO</msg>
<status status="PASS" endtime="20171020 13:12:00.694" starttime="20171020 13:12:00.694"></status>
</kw>
<kw type="for" name="${cmd} IN [ @{cmd_list} ]">
<kw type="foritem" name="${cmd} = ('FW Timestamp', 'cat /etc/timestamp')">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:12:00.697" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/24591/obmc-robot/logs/20171020131146783322_TestsTestBasicPoweron/20171020131146783322_PowerOnTest/20171020131146783322_BMC_general.txt"&gt;/tmp/fspcibld/24591/obmc-robot/logs/20171020131146783322_TestsTestBasicPoweron/20171020131146783322_PowerOnTest/20171020131146783322_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171020 13:12:00.697" starttime="20171020 13:12:00.697"></status>
</kw>
<status status="PASS" endtime="20171020 13:12:00.697" starttime="20171020 13:12:00.696"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:12:00.698" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/24591/obmc-robot/logs/20171020131146783322_TestsTestBasicPoweron/20171020131146783322_PowerOnTest/20171020131146783322_BMC_general.txt"&gt;/tmp/fspcibld/24591/obmc-robot/logs/20171020131146783322_TestsTestBasicPoweron/20171020131146783322_PowerOnTest/20171020131146783322_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171020 13:12:00.699" starttime="20171020 13:12:00.698"></status>
</kw>
<status status="PASS" endtime="20171020 13:12:00.699" starttime="20171020 13:12:00.697"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:12:00.700" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/24591/obmc-robot/logs/20171020131146783322_TestsTestBasicPoweron/20171020131146783322_PowerOnTest/20171020131146783322_BMC_general.txt"&gt;/tmp/fspcibld/24591/obmc-robot/logs/20171020131146783322_TestsTestBasicPoweron/20171020131146783322_PowerOnTest/20171020131146783322_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171020 13:12:00.700" starttime="20171020 13:12:00.699"></status>
</kw>
<status status="PASS" endtime="20171020 13:12:00.700" starttime="20171020 13:12:00.699"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:12:00.701" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/24591/obmc-robot/logs/20171020131146783322_TestsTestBasicPoweron/20171020131146783322_PowerOnTest/20171020131146783322_BMC_general.txt"&gt;/tmp/fspcibld/24591/obmc-robot/logs/20171020131146783322_TestsTestBasicPoweron/20171020131146783322_PowerOnTest/20171020131146783322_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171020 13:12:00.701" starttime="20171020 13:12:00.701"></status>
</kw>
<status status="PASS" endtime="20171020 13:12:00.701" starttime="20171020 13:12:00.700"></status>
</kw>
<status status="PASS" endtime="20171020 13:12:00.701" starttime="20171020 13:12:00.696"></status>
</kw>
<status status="PASS" endtime="20171020 13:12:00.701" starttime="20171020 13:12:00.695"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:12:00.702">${cmd_buf} = BMC Execute Command  cat /etc/timestamp  ignore_err=1</msg>
<status status="PASS" endtime="20171020 13:12:00.702" starttime="20171020 13:12:00.702"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>cat /etc/timestamp</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:12:00.773">width=80
host=9.3.86.161
port=22
alias=bmc_connection
term_type=vt100
newline=

prompt=# 
index=1
path_separator=/
height=24
encoding=UTF-8
timeout=25 seconds</msg>
<msg level="INFO" timestamp="20171020 13:12:00.774">Executing command 'cat /etc/timestamp'.</msg>
<msg level="INFO" timestamp="20171020 13:12:01.017">Command exited with return code 0.</msg>
<status status="PASS" endtime="20171020 13:12:01.018" starttime="20171020 13:12:00.735"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:12:01.018">${status} = PASS</msg>
<msg level="INFO" timestamp="20171020 13:12:01.018">${ret_values} = (u'20171020124243', u'', 0)</msg>
<status status="PASS" endtime="20171020 13:12:01.018" starttime="20171020 13:12:00.703"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:12:01.019">${stdout} = 20171020124243</msg>
<status status="PASS" endtime="20171020 13:12:01.019" starttime="20171020 13:12:01.018"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:12:01.020">${stderr} = </msg>
<status status="PASS" endtime="20171020 13:12:01.020" starttime="20171020 13:12:01.019"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:12:01.031" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/24591/obmc-robot/logs/20171020131146783322_TestsTestBasicPoweron/20171020131146783322_PowerOnTest/20171020131146783322_BMC_general.txt"&gt;/tmp/fspcibld/24591/obmc-robot/logs/20171020131146783322_TestsTestBasicPoweron/20171020131146783322_PowerOnTest/20171020131146783322_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171020 13:12:01.031" starttime="20171020 13:12:01.030"></status>
</kw>
<status status="PASS" endtime="20171020 13:12:01.031" starttime="20171020 13:12:01.029"></status>
</kw>
<status status="PASS" endtime="20171020 13:12:01.031" starttime="20171020 13:12:01.020"></status>
</kw>
<status status="PASS" endtime="20171020 13:12:01.031" starttime="20171020 13:12:00.694"></status>
</kw>
<status status="PASS" endtime="20171020 13:12:01.031" starttime="20171020 13:12:00.694"></status>
</kw>
<kw type="foritem" name="${cmd} = ('FW Level', 'cat /etc/os-release')">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:12:01.034" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/24591/obmc-robot/logs/20171020131146783322_TestsTestBasicPoweron/20171020131146783322_PowerOnTest/20171020131146783322_BMC_general.txt"&gt;/tmp/fspcibld/24591/obmc-robot/logs/20171020131146783322_TestsTestBasicPoweron/20171020131146783322_PowerOnTest/20171020131146783322_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171020 13:12:01.034" starttime="20171020 13:12:01.034"></status>
</kw>
<status status="PASS" endtime="20171020 13:12:01.034" starttime="20171020 13:12:01.033"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:12:01.035" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/24591/obmc-robot/logs/20171020131146783322_TestsTestBasicPoweron/20171020131146783322_PowerOnTest/20171020131146783322_BMC_general.txt"&gt;/tmp/fspcibld/24591/obmc-robot/logs/20171020131146783322_TestsTestBasicPoweron/20171020131146783322_PowerOnTest/20171020131146783322_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171020 13:12:01.035" starttime="20171020 13:12:01.035"></status>
</kw>
<status status="PASS" endtime="20171020 13:12:01.036" starttime="20171020 13:12:01.034"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:12:01.037" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/24591/obmc-robot/logs/20171020131146783322_TestsTestBasicPoweron/20171020131146783322_PowerOnTest/20171020131146783322_BMC_general.txt"&gt;/tmp/fspcibld/24591/obmc-robot/logs/20171020131146783322_TestsTestBasicPoweron/20171020131146783322_PowerOnTest/20171020131146783322_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171020 13:12:01.037" starttime="20171020 13:12:01.036"></status>
</kw>
<status status="PASS" endtime="20171020 13:12:01.037" starttime="20171020 13:12:01.036"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:12:01.038" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/24591/obmc-robot/logs/20171020131146783322_TestsTestBasicPoweron/20171020131146783322_PowerOnTest/20171020131146783322_BMC_general.txt"&gt;/tmp/fspcibld/24591/obmc-robot/logs/20171020131146783322_TestsTestBasicPoweron/20171020131146783322_PowerOnTest/20171020131146783322_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171020 13:12:01.038" starttime="20171020 13:12:01.038"></status>
</kw>
<status status="PASS" endtime="20171020 13:12:01.038" starttime="20171020 13:12:01.037"></status>
</kw>
<status status="PASS" endtime="20171020 13:12:01.038" starttime="20171020 13:12:01.033"></status>
</kw>
<status status="PASS" endtime="20171020 13:12:01.038" starttime="20171020 13:12:01.032"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:12:01.039">${cmd_buf} = BMC Execute Command  cat /etc/os-release  ignore_err=1</msg>
<status status="PASS" endtime="20171020 13:12:01.039" starttime="20171020 13:12:01.039"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>cat /etc/os-release</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:12:01.109">width=80
host=9.3.86.161
port=22
alias=bmc_connection
term_type=vt100
newline=

prompt=# 
index=1
path_separator=/
height=24
encoding=UTF-8
timeout=25 seconds</msg>
<msg level="INFO" timestamp="20171020 13:12:01.109">Executing command 'cat /etc/os-release'.</msg>
<msg level="INFO" timestamp="20171020 13:12:01.197">Command exited with return code 0.</msg>
<status status="PASS" endtime="20171020 13:12:01.197" starttime="20171020 13:12:01.071"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:12:01.198">${status} = PASS</msg>
<msg level="INFO" timestamp="20171020 13:12:01.198">${ret_values} = (u'ID="openbmc-phosphor"\nNAME="Phosphor OpenBMC (Phosphor OpenBMC Project Reference Distro)"\nVERSION="v1.99.10-165"\nVERSION_ID="v1.99.10-165-g11ddac1"\nPRETTY_NAME="Phosphor OpenBMC (Phosphor OpenB...</msg>
<status status="PASS" endtime="20171020 13:12:01.198" starttime="20171020 13:12:01.039"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:12:01.198">${stdout} = ID="openbmc-phosphor"
NAME="Phosphor OpenBMC (Phosphor OpenBMC Project Reference Distro)"
VERSION="v1.99.10-165"
VERSION_ID="v1.99.10-165-g11ddac1"
PRETTY_NAME="Phosphor OpenBMC (Phosphor OpenBMC Proj...</msg>
<status status="PASS" endtime="20171020 13:12:01.198" starttime="20171020 13:12:01.198"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:12:01.199">${stderr} = </msg>
<status status="PASS" endtime="20171020 13:12:01.199" starttime="20171020 13:12:01.199"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:12:01.206" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/24591/obmc-robot/logs/20171020131146783322_TestsTestBasicPoweron/20171020131146783322_PowerOnTest/20171020131146783322_BMC_general.txt"&gt;/tmp/fspcibld/24591/obmc-robot/logs/20171020131146783322_TestsTestBasicPoweron/20171020131146783322_PowerOnTest/20171020131146783322_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171020 13:12:01.206" starttime="20171020 13:12:01.206"></status>
</kw>
<status status="PASS" endtime="20171020 13:12:01.206" starttime="20171020 13:12:01.205"></status>
</kw>
<status status="PASS" endtime="20171020 13:12:01.206" starttime="20171020 13:12:01.199"></status>
</kw>
<status status="PASS" endtime="20171020 13:12:01.206" starttime="20171020 13:12:01.031"></status>
</kw>
<status status="PASS" endtime="20171020 13:12:01.206" starttime="20171020 13:12:01.031"></status>
</kw>
<status status="PASS" endtime="20171020 13:12:01.206" starttime="20171020 13:12:00.694"></status>
</kw>
<status status="PASS" endtime="20171020 13:12:01.207" starttime="20171020 13:12:00.692"></status>
</kw>
<status status="PASS" endtime="20171020 13:12:01.207" starttime="20171020 13:12:00.692"></status>
</kw>
<kw type="foritem" name="${index} = APPLICATION DATA">
<kw name="Iterate BMC Command List Pairs" library="openbmc_ffdc_methods">
<doc>Feed in key pair list from dictionary to execute</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Bmc Cmd" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:12:01.208">@{cmd_list} = [ ('BMC state', '/usr/sbin/obmcutil state') ]</msg>
<status status="PASS" endtime="20171020 13:12:01.208" starttime="20171020 13:12:01.207"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${ENTRY_INDEX}</arg>
<arg>${key_index}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:12:01.208">${ENTRY_INDEX} = APPLICATION DATA</msg>
<status status="PASS" endtime="20171020 13:12:01.208" starttime="20171020 13:12:01.208"></status>
</kw>
<kw type="for" name="${cmd} IN [ @{cmd_list} ]">
<kw type="foritem" name="${cmd} = ('BMC state', '/usr/sbin/obmcutil state')">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:12:01.212" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/24591/obmc-robot/logs/20171020131146783322_TestsTestBasicPoweron/20171020131146783322_PowerOnTest/20171020131146783322_BMC_general.txt"&gt;/tmp/fspcibld/24591/obmc-robot/logs/20171020131146783322_TestsTestBasicPoweron/20171020131146783322_PowerOnTest/20171020131146783322_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171020 13:12:01.212" starttime="20171020 13:12:01.211"></status>
</kw>
<status status="PASS" endtime="20171020 13:12:01.212" starttime="20171020 13:12:01.211"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:12:01.213" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/24591/obmc-robot/logs/20171020131146783322_TestsTestBasicPoweron/20171020131146783322_PowerOnTest/20171020131146783322_BMC_general.txt"&gt;/tmp/fspcibld/24591/obmc-robot/logs/20171020131146783322_TestsTestBasicPoweron/20171020131146783322_PowerOnTest/20171020131146783322_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171020 13:12:01.213" starttime="20171020 13:12:01.213"></status>
</kw>
<status status="PASS" endtime="20171020 13:12:01.213" starttime="20171020 13:12:01.212"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:12:01.214" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/24591/obmc-robot/logs/20171020131146783322_TestsTestBasicPoweron/20171020131146783322_PowerOnTest/20171020131146783322_BMC_general.txt"&gt;/tmp/fspcibld/24591/obmc-robot/logs/20171020131146783322_TestsTestBasicPoweron/20171020131146783322_PowerOnTest/20171020131146783322_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171020 13:12:01.214" starttime="20171020 13:12:01.214"></status>
</kw>
<status status="PASS" endtime="20171020 13:12:01.215" starttime="20171020 13:12:01.213"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:12:01.216" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/24591/obmc-robot/logs/20171020131146783322_TestsTestBasicPoweron/20171020131146783322_PowerOnTest/20171020131146783322_BMC_general.txt"&gt;/tmp/fspcibld/24591/obmc-robot/logs/20171020131146783322_TestsTestBasicPoweron/20171020131146783322_PowerOnTest/20171020131146783322_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171020 13:12:01.216" starttime="20171020 13:12:01.215"></status>
</kw>
<status status="PASS" endtime="20171020 13:12:01.216" starttime="20171020 13:12:01.215"></status>
</kw>
<status status="PASS" endtime="20171020 13:12:01.216" starttime="20171020 13:12:01.210"></status>
</kw>
<status status="PASS" endtime="20171020 13:12:01.216" starttime="20171020 13:12:01.210"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:12:01.217">${cmd_buf} = BMC Execute Command  /usr/sbin/obmcutil state  ignore_err=1</msg>
<status status="PASS" endtime="20171020 13:12:01.217" starttime="20171020 13:12:01.216"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>/usr/sbin/obmcutil state</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:12:01.289">width=80
host=9.3.86.161
port=22
alias=bmc_connection
term_type=vt100
newline=

prompt=# 
index=1
path_separator=/
height=24
encoding=UTF-8
timeout=25 seconds</msg>
<msg level="INFO" timestamp="20171020 13:12:01.289">Executing command '/usr/sbin/obmcutil state'.</msg>
<msg level="INFO" timestamp="20171020 13:12:03.770">Command exited with return code 0.</msg>
<status status="PASS" endtime="20171020 13:12:03.770" starttime="20171020 13:12:01.251"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:12:03.770">${status} = PASS</msg>
<msg level="INFO" timestamp="20171020 13:12:03.770">${ret_values} = (u'CurrentBMCState     : xyz.openbmc_project.State.BMC.BMCState.Ready\nCurrentPowerState   : xyz.openbmc_project.State.Chassis.PowerState.On\nCurrentHostState    : xyz.openbmc_project.State.Host.HostS...</msg>
<status status="PASS" endtime="20171020 13:12:03.770" starttime="20171020 13:12:01.217"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:12:03.771">${stdout} = CurrentBMCState     : xyz.openbmc_project.State.BMC.BMCState.Ready
CurrentPowerState   : xyz.openbmc_project.State.Chassis.PowerState.On
CurrentHostState    : xyz.openbmc_project.State.Host.HostState....</msg>
<status status="PASS" endtime="20171020 13:12:03.771" starttime="20171020 13:12:03.770"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:12:03.771">${stderr} = </msg>
<status status="PASS" endtime="20171020 13:12:03.771" starttime="20171020 13:12:03.771"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:12:03.779" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/24591/obmc-robot/logs/20171020131146783322_TestsTestBasicPoweron/20171020131146783322_PowerOnTest/20171020131146783322_BMC_general.txt"&gt;/tmp/fspcibld/24591/obmc-robot/logs/20171020131146783322_TestsTestBasicPoweron/20171020131146783322_PowerOnTest/20171020131146783322_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171020 13:12:03.780" starttime="20171020 13:12:03.779"></status>
</kw>
<status status="PASS" endtime="20171020 13:12:03.780" starttime="20171020 13:12:03.778"></status>
</kw>
<status status="PASS" endtime="20171020 13:12:03.780" starttime="20171020 13:12:03.772"></status>
</kw>
<status status="PASS" endtime="20171020 13:12:03.780" starttime="20171020 13:12:01.209"></status>
</kw>
<status status="PASS" endtime="20171020 13:12:03.780" starttime="20171020 13:12:01.209"></status>
</kw>
<status status="PASS" endtime="20171020 13:12:03.780" starttime="20171020 13:12:01.209"></status>
</kw>
<status status="PASS" endtime="20171020 13:12:03.780" starttime="20171020 13:12:01.207"></status>
</kw>
<status status="PASS" endtime="20171020 13:12:03.780" starttime="20171020 13:12:01.207"></status>
</kw>
<status status="PASS" endtime="20171020 13:12:03.780" starttime="20171020 13:12:00.006"></status>
</kw>
<status status="PASS" endtime="20171020 13:12:03.780" starttime="20171020 13:12:00.005"></status>
</kw>
<status status="PASS" endtime="20171020 13:12:03.780" starttime="20171020 13:11:59.979"></status>
</kw>
<status status="PASS" endtime="20171020 13:12:03.781" starttime="20171020 13:11:59.976"></status>
</kw>
<status status="PASS" endtime="20171020 13:12:03.781" starttime="20171020 13:11:59.976"></status>
</kw>
<kw type="foritem" name="${method} = ('BMC Specific Files', 'BMC FFDC Files')">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status status="PASS" endtime="20171020 13:12:03.782" starttime="20171020 13:12:03.782"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:12:03.783">${status} = PASS</msg>
<msg level="INFO" timestamp="20171020 13:12:03.783">${ret_values} = None</msg>
<status status="PASS" endtime="20171020 13:12:03.783" starttime="20171020 13:12:03.782"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status status="PASS" endtime="20171020 13:12:03.783" starttime="20171020 13:12:03.783"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="BMC FFDC Files" library="openbmc_ffdc_methods">
<doc>Get the command list and iterate</doc>
<kw name="Get Ffdc File Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:12:03.810">@{entries} = [ BMC FILES ]</msg>
<status status="PASS" endtime="20171020 13:12:03.810" starttime="20171020 13:12:03.810"></status>
</kw>
<kw type="for" name="${index} IN [ @{entries} ]">
<kw type="foritem" name="${index} = BMC FILES">
<kw name="Create File and Write Data" library="openbmc_ffdc_methods">
<doc>Create files to current FFDC log directory,</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Bmc File" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:12:03.812">@{cmd_list} = [ ('BMC_journalctl_nopager', 'journalctl --no-pager') | ('BMC_dmesg', 'dmesg') | ('BMC_journalctl_pretty', 'journalctl -o json-pretty') | ('BMC_meminfo', 'cat /proc/meminfo') | ('BMC_proc_fd_active_li...</msg>
<status status="PASS" endtime="20171020 13:12:03.812" starttime="20171020 13:12:03.811"></status>
</kw>
<kw type="for" name="${cmd} IN [ @{cmd_list} ]">
<kw type="foritem" name="${cmd} = ('BMC_journalctl_nopager', 'journalctl --no-pager')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:12:03.813">${logpath} = /tmp/fspcibld/24591/obmc-robot/logs/20171020131146783322_TestsTestBasicPoweron/20171020131146783322_PowerOnTest/20171020131146783322_BMC_journalctl_nopager.txt</msg>
<status status="PASS" endtime="20171020 13:12:03.813" starttime="20171020 13:12:03.812"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status status="PASS" endtime="20171020 13:12:03.814" starttime="20171020 13:12:03.814"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:12:03.815">${cmd_buf} = BMC Execute Command  journalctl --no-pager  ignore_err=1</msg>
<status status="PASS" endtime="20171020 13:12:03.815" starttime="20171020 13:12:03.814"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>journalctl --no-pager</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:12:03.887">width=80
host=9.3.86.161
port=22
alias=bmc_connection
term_type=vt100
newline=

prompt=# 
index=1
path_separator=/
height=24
encoding=UTF-8
timeout=25 seconds</msg>
<msg level="INFO" timestamp="20171020 13:12:03.888">Executing command 'journalctl --no-pager'.</msg>
<msg level="INFO" timestamp="20171020 13:12:06.702">Command exited with return code 0.</msg>
<status status="PASS" endtime="20171020 13:12:06.703" starttime="20171020 13:12:03.847"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:12:06.704">${status} = PASS</msg>
<msg level="INFO" timestamp="20171020 13:12:06.708">${ret_values} = (u'-- Logs begin at Fri 2017-10-20 12:57:33 UTC, end at Fri 2017-10-20 13:12:18 UTC. --\nOct 20 12:57:33 witherspoon kernel: Booting Linux on physical CPU 0x0\nOct 20 12:57:33 witherspoon kernel: Linu...</msg>
<status status="PASS" endtime="20171020 13:12:06.708" starttime="20171020 13:12:03.815"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:12:06.710">${stdout} = -- Logs begin at Fri 2017-10-20 12:57:33 UTC, end at Fri 2017-10-20 13:12:18 UTC. --
Oct 20 12:57:33 witherspoon kernel: Booting Linux on physical CPU 0x0
Oct 20 12:57:33 witherspoon kernel: Linux ver...</msg>
<status status="PASS" endtime="20171020 13:12:06.710" starttime="20171020 13:12:06.709"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:12:06.711">${stderr} = </msg>
<status status="PASS" endtime="20171020 13:12:06.711" starttime="20171020 13:12:06.710"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:12:06.720" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/24591/obmc-robot/logs/20171020131146783322_TestsTestBasicPoweron/20171020131146783322_PowerOnTest/20171020131146783322_BMC_journalctl_nopager.txt"&gt;/tmp/fspcibld/24591/obmc-robot/logs/20171020131146783322_TestsTestBasicPoweron/20171020131146783322_PowerOnTest/20171020131146783322_BMC_journalctl_nopager.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171020 13:12:06.720" starttime="20171020 13:12:06.719"></status>
</kw>
<status status="PASS" endtime="20171020 13:12:06.720" starttime="20171020 13:12:06.717"></status>
</kw>
<status status="PASS" endtime="20171020 13:12:06.720" starttime="20171020 13:12:06.711"></status>
</kw>
<status status="PASS" endtime="20171020 13:12:06.720" starttime="20171020 13:12:03.813"></status>
</kw>
<status status="PASS" endtime="20171020 13:12:06.720" starttime="20171020 13:12:03.812"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_dmesg', 'dmesg')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:12:06.721">${logpath} = /tmp/fspcibld/24591/obmc-robot/logs/20171020131146783322_TestsTestBasicPoweron/20171020131146783322_PowerOnTest/20171020131146783322_BMC_dmesg.txt</msg>
<status status="PASS" endtime="20171020 13:12:06.721" starttime="20171020 13:12:06.721"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status status="PASS" endtime="20171020 13:12:06.723" starttime="20171020 13:12:06.722"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:12:06.723">${cmd_buf} = BMC Execute Command  dmesg  ignore_err=1</msg>
<status status="PASS" endtime="20171020 13:12:06.724" starttime="20171020 13:12:06.723"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>dmesg</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:12:06.795">width=80
host=9.3.86.161
port=22
alias=bmc_connection
term_type=vt100
newline=

prompt=# 
index=1
path_separator=/
height=24
encoding=UTF-8
timeout=25 seconds</msg>
<msg level="INFO" timestamp="20171020 13:12:06.795">Executing command 'dmesg'.</msg>
<msg level="INFO" timestamp="20171020 13:12:06.881">Command exited with return code 0.</msg>
<status status="PASS" endtime="20171020 13:12:06.881" starttime="20171020 13:12:06.756"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:12:06.882">${status} = PASS</msg>
<msg level="INFO" timestamp="20171020 13:12:06.882">${ret_values} = (u'[    0.840000] brd: module loaded\n[    0.860000] random: crng init done\n[    0.870000] loop: module loaded\n[    0.870000] aspeed-lpc-ctrl 1e789080.lpc-ctrl: Loaded at 0x98000000 (0x04000000)\n[ ...</msg>
<status status="PASS" endtime="20171020 13:12:06.882" starttime="20171020 13:12:06.724"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:12:06.883">${stdout} = [    0.840000] brd: module loaded
[    0.860000] random: crng init done
[    0.870000] loop: module loaded
[    0.870000] aspeed-lpc-ctrl 1e789080.lpc-ctrl: Loaded at 0x98000000 (0x04000000)
[    0.88...</msg>
<status status="PASS" endtime="20171020 13:12:06.883" starttime="20171020 13:12:06.882"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:12:06.883">${stderr} = </msg>
<status status="PASS" endtime="20171020 13:12:06.883" starttime="20171020 13:12:06.883"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:12:06.890" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/24591/obmc-robot/logs/20171020131146783322_TestsTestBasicPoweron/20171020131146783322_PowerOnTest/20171020131146783322_BMC_dmesg.txt"&gt;/tmp/fspcibld/24591/obmc-robot/logs/20171020131146783322_TestsTestBasicPoweron/20171020131146783322_PowerOnTest/20171020131146783322_BMC_dmesg.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171020 13:12:06.890" starttime="20171020 13:12:06.890"></status>
</kw>
<status status="PASS" endtime="20171020 13:12:06.891" starttime="20171020 13:12:06.889"></status>
</kw>
<status status="PASS" endtime="20171020 13:12:06.891" starttime="20171020 13:12:06.883"></status>
</kw>
<status status="PASS" endtime="20171020 13:12:06.891" starttime="20171020 13:12:06.722"></status>
</kw>
<status status="PASS" endtime="20171020 13:12:06.891" starttime="20171020 13:12:06.721"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_journalctl_pretty', 'journalctl -o json-pretty')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:12:06.892">${logpath} = /tmp/fspcibld/24591/obmc-robot/logs/20171020131146783322_TestsTestBasicPoweron/20171020131146783322_PowerOnTest/20171020131146783322_BMC_journalctl_pretty.txt</msg>
<status status="PASS" endtime="20171020 13:12:06.892" starttime="20171020 13:12:06.891"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status status="PASS" endtime="20171020 13:12:06.893" starttime="20171020 13:12:06.893"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:12:06.894">${cmd_buf} = BMC Execute Command  journalctl -o json-pretty  ignore_err=1</msg>
<status status="PASS" endtime="20171020 13:12:06.894" starttime="20171020 13:12:06.893"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>journalctl -o json-pretty</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:12:06.963">width=80
host=9.3.86.161
port=22
alias=bmc_connection
term_type=vt100
newline=

prompt=# 
index=1
path_separator=/
height=24
encoding=UTF-8
timeout=25 seconds</msg>
<msg level="INFO" timestamp="20171020 13:12:06.964">Executing command 'journalctl -o json-pretty'.</msg>
<msg level="INFO" timestamp="20171020 13:12:18.954">Command exited with return code 0.</msg>
<status status="PASS" endtime="20171020 13:12:18.962" starttime="20171020 13:12:06.926"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:12:18.962">${status} = PASS</msg>
<msg level="INFO" timestamp="20171020 13:12:19.004">${ret_values} = (u'{\n\t"__CURSOR" : "s=c1ecc95c8ff0421a8c191e54a7110926;i=1;b=679064d078c9428cb38d07ee230edfe2;m=df4b25;t=55bfa04264d42;x=db78caf8a2104e32",\n\t"__REALTIME_TIMESTAMP" : "1508504253123906",\n\t"__MONO...</msg>
<status status="PASS" endtime="20171020 13:12:19.004" starttime="20171020 13:12:06.894"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:12:19.013">${stdout} = {
	"__CURSOR" : "s=c1ecc95c8ff0421a8c191e54a7110926;i=1;b=679064d078c9428cb38d07ee230edfe2;m=df4b25;t=55bfa04264d42;x=db78caf8a2104e32",
	"__REALTIME_TIMESTAMP" : "1508504253123906",
	"__MONOTONIC_TIM...</msg>
<status status="PASS" endtime="20171020 13:12:19.013" starttime="20171020 13:12:19.004"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:12:19.014">${stderr} = </msg>
<status status="PASS" endtime="20171020 13:12:19.014" starttime="20171020 13:12:19.013"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:12:19.040" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/24591/obmc-robot/logs/20171020131146783322_TestsTestBasicPoweron/20171020131146783322_PowerOnTest/20171020131146783322_BMC_journalctl_pretty.txt"&gt;/tmp/fspcibld/24591/obmc-robot/logs/20171020131146783322_TestsTestBasicPoweron/20171020131146783322_PowerOnTest/20171020131146783322_BMC_journalctl_pretty.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171020 13:12:19.040" starttime="20171020 13:12:19.033"></status>
</kw>
<status status="PASS" endtime="20171020 13:12:19.040" starttime="20171020 13:12:19.023"></status>
</kw>
<status status="PASS" endtime="20171020 13:12:19.040" starttime="20171020 13:12:19.014"></status>
</kw>
<status status="PASS" endtime="20171020 13:12:19.040" starttime="20171020 13:12:06.892"></status>
</kw>
<status status="PASS" endtime="20171020 13:12:19.040" starttime="20171020 13:12:06.891"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_meminfo', 'cat /proc/meminfo')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:12:19.041">${logpath} = /tmp/fspcibld/24591/obmc-robot/logs/20171020131146783322_TestsTestBasicPoweron/20171020131146783322_PowerOnTest/20171020131146783322_BMC_meminfo.txt</msg>
<status status="PASS" endtime="20171020 13:12:19.041" starttime="20171020 13:12:19.041"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status status="PASS" endtime="20171020 13:12:19.043" starttime="20171020 13:12:19.042"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:12:19.043">${cmd_buf} = BMC Execute Command  cat /proc/meminfo  ignore_err=1</msg>
<status status="PASS" endtime="20171020 13:12:19.043" starttime="20171020 13:12:19.043"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>cat /proc/meminfo</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:12:19.117">width=80
host=9.3.86.161
port=22
alias=bmc_connection
term_type=vt100
newline=

prompt=# 
index=1
path_separator=/
height=24
encoding=UTF-8
timeout=25 seconds</msg>
<msg level="INFO" timestamp="20171020 13:12:19.117">Executing command 'cat /proc/meminfo'.</msg>
<msg level="INFO" timestamp="20171020 13:12:19.165">Command exited with return code 0.</msg>
<status status="PASS" endtime="20171020 13:12:19.165" starttime="20171020 13:12:19.075"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:12:19.165">${status} = PASS</msg>
<msg level="INFO" timestamp="20171020 13:12:19.165">${ret_values} = (u'MemTotal:         432252 kB\nMemFree:          210528 kB\nMemAvailable:     314628 kB\nBuffers:           31844 kB\nCached:            81984 kB\nSwapCached:            0 kB\nActive:           14156...</msg>
<status status="PASS" endtime="20171020 13:12:19.165" starttime="20171020 13:12:19.044"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:12:19.166">${stdout} = MemTotal:         432252 kB
MemFree:          210528 kB
MemAvailable:     314628 kB
Buffers:           31844 kB
Cached:            81984 kB
SwapCached:            0 kB
Active:           141568 kB
Inac...</msg>
<status status="PASS" endtime="20171020 13:12:19.166" starttime="20171020 13:12:19.165"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:12:19.166">${stderr} = </msg>
<status status="PASS" endtime="20171020 13:12:19.166" starttime="20171020 13:12:19.166"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:12:19.173" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/24591/obmc-robot/logs/20171020131146783322_TestsTestBasicPoweron/20171020131146783322_PowerOnTest/20171020131146783322_BMC_meminfo.txt"&gt;/tmp/fspcibld/24591/obmc-robot/logs/20171020131146783322_TestsTestBasicPoweron/20171020131146783322_PowerOnTest/20171020131146783322_BMC_meminfo.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171020 13:12:19.173" starttime="20171020 13:12:19.173"></status>
</kw>
<status status="PASS" endtime="20171020 13:12:19.174" starttime="20171020 13:12:19.172"></status>
</kw>
<status status="PASS" endtime="20171020 13:12:19.174" starttime="20171020 13:12:19.166"></status>
</kw>
<status status="PASS" endtime="20171020 13:12:19.174" starttime="20171020 13:12:19.041"></status>
</kw>
<status status="PASS" endtime="20171020 13:12:19.174" starttime="20171020 13:12:19.040"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_proc_fd_active_list', 'ls -Al /proc/*/fd/')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:12:19.175">${logpath} = /tmp/fspcibld/24591/obmc-robot/logs/20171020131146783322_TestsTestBasicPoweron/20171020131146783322_PowerOnTest/20171020131146783322_BMC_proc_fd_active_list.txt</msg>
<status status="PASS" endtime="20171020 13:12:19.175" starttime="20171020 13:12:19.174"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status status="PASS" endtime="20171020 13:12:19.176" starttime="20171020 13:12:19.176"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:12:19.177">${cmd_buf} = BMC Execute Command  ls -Al /proc/*/fd/  ignore_err=1</msg>
<status status="PASS" endtime="20171020 13:12:19.177" starttime="20171020 13:12:19.176"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>ls -Al /proc/*/fd/</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:12:19.251">width=80
host=9.3.86.161
port=22
alias=bmc_connection
term_type=vt100
newline=

prompt=# 
index=1
path_separator=/
height=24
encoding=UTF-8
timeout=25 seconds</msg>
<msg level="INFO" timestamp="20171020 13:12:19.251">Executing command 'ls -Al /proc/*/fd/'.</msg>
<msg level="INFO" timestamp="20171020 13:12:19.887">Command exited with return code 0.</msg>
<status status="PASS" endtime="20171020 13:12:19.887" starttime="20171020 13:12:19.213"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:12:19.887">${status} = PASS</msg>
<msg level="INFO" timestamp="20171020 13:12:19.888">${ret_values} = (u'/proc/1/fd/:\ntotal 0\nlrwx------    1 root     root            64 Oct 20 13:00 0 -&gt; /dev/null\nlrwx------    1 root     root            64 Oct 20 13:00 1 -&gt; /dev/null\nlr-x------    1 root     roo...</msg>
<status status="PASS" endtime="20171020 13:12:19.888" starttime="20171020 13:12:19.177"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:12:19.889">${stdout} = /proc/1/fd/:
total 0
lrwx------    1 root     root            64 Oct 20 13:00 0 -&gt; /dev/null
lrwx------    1 root     root            64 Oct 20 13:00 1 -&gt; /dev/null
lr-x------    1 root     root      ...</msg>
<status status="PASS" endtime="20171020 13:12:19.889" starttime="20171020 13:12:19.889"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:12:19.890">${stderr} = ls: /proc/1971/fd/3: cannot read link: No such file or directory
ls: /proc/self/fd/3: cannot read link: No such file or directory
ls: /proc/thread-self/fd/3: cannot read link: No such file or director...</msg>
<status status="PASS" endtime="20171020 13:12:19.890" starttime="20171020 13:12:19.889"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:12:19.898" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/24591/obmc-robot/logs/20171020131146783322_TestsTestBasicPoweron/20171020131146783322_PowerOnTest/20171020131146783322_BMC_proc_fd_active_list.txt"&gt;/tmp/fspcibld/24591/obmc-robot/logs/20171020131146783322_TestsTestBasicPoweron/20171020131146783322_PowerOnTest/20171020131146783322_BMC_proc_fd_active_list.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171020 13:12:19.898" starttime="20171020 13:12:19.897"></status>
</kw>
<status status="PASS" endtime="20171020 13:12:19.898" starttime="20171020 13:12:19.896"></status>
</kw>
<status status="PASS" endtime="20171020 13:12:19.898" starttime="20171020 13:12:19.890"></status>
</kw>
<status status="PASS" endtime="20171020 13:12:19.898" starttime="20171020 13:12:19.175"></status>
</kw>
<status status="PASS" endtime="20171020 13:12:19.898" starttime="20171020 13:12:19.174"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_procinfo', 'cat /proc/cpuinfo')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:12:19.899">${logpath} = /tmp/fspcibld/24591/obmc-robot/logs/20171020131146783322_TestsTestBasicPoweron/20171020131146783322_PowerOnTest/20171020131146783322_BMC_procinfo.txt</msg>
<status status="PASS" endtime="20171020 13:12:19.899" starttime="20171020 13:12:19.898"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status status="PASS" endtime="20171020 13:12:19.900" starttime="20171020 13:12:19.900"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:12:19.901">${cmd_buf} = BMC Execute Command  cat /proc/cpuinfo  ignore_err=1</msg>
<status status="PASS" endtime="20171020 13:12:19.901" starttime="20171020 13:12:19.900"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>cat /proc/cpuinfo</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:12:19.970">width=80
host=9.3.86.161
port=22
alias=bmc_connection
term_type=vt100
newline=

prompt=# 
index=1
path_separator=/
height=24
encoding=UTF-8
timeout=25 seconds</msg>
<msg level="INFO" timestamp="20171020 13:12:19.970">Executing command 'cat /proc/cpuinfo'.</msg>
<msg level="INFO" timestamp="20171020 13:12:20.294">Command exited with return code 0.</msg>
<status status="PASS" endtime="20171020 13:12:20.294" starttime="20171020 13:12:19.933"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:12:20.294">${status} = PASS</msg>
<msg level="INFO" timestamp="20171020 13:12:20.294">${ret_values} = (u'processor\t: 0\nmodel name\t: ARMv6-compatible processor rev 7 (v6l)\nBogoMIPS\t: 789.70\nFeatures\t: half thumb fastmult edsp java tls \nCPU implementer\t: 0x41\nCPU architecture: 7\nCPU variant\t...</msg>
<status status="PASS" endtime="20171020 13:12:20.294" starttime="20171020 13:12:19.901"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:12:20.295">${stdout} = processor	: 0
model name	: ARMv6-compatible processor rev 7 (v6l)
BogoMIPS	: 789.70
Features	: half thumb fastmult edsp java tls 
CPU implementer	: 0x41
CPU architecture: 7
CPU variant	: 0x0
CPU part	...</msg>
<status status="PASS" endtime="20171020 13:12:20.295" starttime="20171020 13:12:20.295"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:12:20.295">${stderr} = </msg>
<status status="PASS" endtime="20171020 13:12:20.296" starttime="20171020 13:12:20.295"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:12:20.303" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/24591/obmc-robot/logs/20171020131146783322_TestsTestBasicPoweron/20171020131146783322_PowerOnTest/20171020131146783322_BMC_procinfo.txt"&gt;/tmp/fspcibld/24591/obmc-robot/logs/20171020131146783322_TestsTestBasicPoweron/20171020131146783322_PowerOnTest/20171020131146783322_BMC_procinfo.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171020 13:12:20.303" starttime="20171020 13:12:20.302"></status>
</kw>
<status status="PASS" endtime="20171020 13:12:20.303" starttime="20171020 13:12:20.302"></status>
</kw>
<status status="PASS" endtime="20171020 13:12:20.303" starttime="20171020 13:12:20.296"></status>
</kw>
<status status="PASS" endtime="20171020 13:12:20.303" starttime="20171020 13:12:19.899"></status>
</kw>
<status status="PASS" endtime="20171020 13:12:20.303" starttime="20171020 13:12:19.898"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_proc_list', 'top -n 1 -b')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:12:20.304">${logpath} = /tmp/fspcibld/24591/obmc-robot/logs/20171020131146783322_TestsTestBasicPoweron/20171020131146783322_PowerOnTest/20171020131146783322_BMC_proc_list.txt</msg>
<status status="PASS" endtime="20171020 13:12:20.304" starttime="20171020 13:12:20.304"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status status="PASS" endtime="20171020 13:12:20.305" starttime="20171020 13:12:20.305"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:12:20.306">${cmd_buf} = BMC Execute Command  top -n 1 -b  ignore_err=1</msg>
<status status="PASS" endtime="20171020 13:12:20.306" starttime="20171020 13:12:20.306"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>top -n 1 -b</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:12:20.376">width=80
host=9.3.86.161
port=22
alias=bmc_connection
term_type=vt100
newline=

prompt=# 
index=1
path_separator=/
height=24
encoding=UTF-8
timeout=25 seconds</msg>
<msg level="INFO" timestamp="20171020 13:12:20.376">Executing command 'top -n 1 -b'.</msg>
<msg level="INFO" timestamp="20171020 13:12:21.396">Command exited with return code 0.</msg>
<status status="PASS" endtime="20171020 13:12:21.396" starttime="20171020 13:12:20.339"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:12:21.396">${status} = PASS</msg>
<msg level="INFO" timestamp="20171020 13:12:21.396">${ret_values} = (u'Mem: 221756K used, 210496K free, 9020K shrd, 31844K buff, 81984K cached\nCPU:   0% usr   0% sys   0% nic 100% idle   0% io   0% irq   0% sirq\nLoad average: 1.18 1.30 1.12 1/172 1973\n  PID  PPID U...</msg>
<status status="PASS" endtime="20171020 13:12:21.396" starttime="20171020 13:12:20.306"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:12:21.397">${stdout} = Mem: 221756K used, 210496K free, 9020K shrd, 31844K buff, 81984K cached
CPU:   0% usr   0% sys   0% nic 100% idle   0% io   0% irq   0% sirq
Load average: 1.18 1.30 1.12 1/172 1973
  PID  PPID USER   ...</msg>
<status status="PASS" endtime="20171020 13:12:21.397" starttime="20171020 13:12:21.397"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:12:21.398">${stderr} = </msg>
<status status="PASS" endtime="20171020 13:12:21.398" starttime="20171020 13:12:21.397"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:12:21.405" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/24591/obmc-robot/logs/20171020131146783322_TestsTestBasicPoweron/20171020131146783322_PowerOnTest/20171020131146783322_BMC_proc_list.txt"&gt;/tmp/fspcibld/24591/obmc-robot/logs/20171020131146783322_TestsTestBasicPoweron/20171020131146783322_PowerOnTest/20171020131146783322_BMC_proc_list.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171020 13:12:21.405" starttime="20171020 13:12:21.404"></status>
</kw>
<status status="PASS" endtime="20171020 13:12:21.405" starttime="20171020 13:12:21.404"></status>
</kw>
<status status="PASS" endtime="20171020 13:12:21.405" starttime="20171020 13:12:21.398"></status>
</kw>
<status status="PASS" endtime="20171020 13:12:21.405" starttime="20171020 13:12:20.304"></status>
</kw>
<status status="PASS" endtime="20171020 13:12:21.405" starttime="20171020 13:12:20.303"></status>
</kw>
<status status="PASS" endtime="20171020 13:12:21.405" starttime="20171020 13:12:03.812"></status>
</kw>
<status status="PASS" endtime="20171020 13:12:21.406" starttime="20171020 13:12:03.811"></status>
</kw>
<status status="PASS" endtime="20171020 13:12:21.406" starttime="20171020 13:12:03.810"></status>
</kw>
<status status="PASS" endtime="20171020 13:12:21.406" starttime="20171020 13:12:03.810"></status>
</kw>
<status status="PASS" endtime="20171020 13:12:21.406" starttime="20171020 13:12:03.810"></status>
</kw>
<status status="PASS" endtime="20171020 13:12:21.406" starttime="20171020 13:12:03.783"></status>
</kw>
<status status="PASS" endtime="20171020 13:12:21.406" starttime="20171020 13:12:03.781"></status>
</kw>
<status status="PASS" endtime="20171020 13:12:21.406" starttime="20171020 13:12:03.781"></status>
</kw>
<kw type="foritem" name="${method} = ('Sys Inventory Files', 'System Inventory Files')">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status status="PASS" endtime="20171020 13:12:21.408" starttime="20171020 13:12:21.408"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:12:21.408">${status} = PASS</msg>
<msg level="INFO" timestamp="20171020 13:12:21.408">${ret_values} = None</msg>
<status status="PASS" endtime="20171020 13:12:21.408" starttime="20171020 13:12:21.407"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status status="PASS" endtime="20171020 13:12:21.409" starttime="20171020 13:12:21.408"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="System Inventory Files" library="openbmc_ffdc_methods">
<doc>Copy systest os_inventory files.</doc>
<kw name="Copy Files" library="OperatingSystem">
<doc>Copies specified files to the target directory.</doc>
<arguments>
<arg>os_inventory_*.json</arg>
<arg>${ffdc_dir_path}</arg>
</arguments>
<status status="PASS" endtime="20171020 13:12:21.437" starttime="20171020 13:12:21.435"></status>
</kw>
<kw name="Remove Files" library="OperatingSystem">
<doc>Uses `Remove File` to remove multiple files one-by-one.</doc>
<arguments>
<arg>os_inventory_*.json</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:12:21.438" html="yes">File '&lt;a href="file:///tmp/fspcibld/24591/obmc-robot/os_inventory_*.json"&gt;/tmp/fspcibld/24591/obmc-robot/os_inventory_*.json&lt;/a&gt;' does not exist.</msg>
<status status="PASS" endtime="20171020 13:12:21.438" starttime="20171020 13:12:21.437"></status>
</kw>
<status status="PASS" endtime="20171020 13:12:21.438" starttime="20171020 13:12:21.435"></status>
</kw>
<status status="PASS" endtime="20171020 13:12:21.438" starttime="20171020 13:12:21.409"></status>
</kw>
<status status="PASS" endtime="20171020 13:12:21.438" starttime="20171020 13:12:21.406"></status>
</kw>
<status status="PASS" endtime="20171020 13:12:21.438" starttime="20171020 13:12:21.406"></status>
</kw>
<kw type="foritem" name="${method} = ('Core Files', 'SCP Coredump Files')">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status status="PASS" endtime="20171020 13:12:21.440" starttime="20171020 13:12:21.440"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:12:21.440">${status} = PASS</msg>
<msg level="INFO" timestamp="20171020 13:12:21.440">${ret_values} = None</msg>
<status status="PASS" endtime="20171020 13:12:21.440" starttime="20171020 13:12:21.439"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status status="PASS" endtime="20171020 13:12:21.441" starttime="20171020 13:12:21.440"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="SCP Coredump Files" library="openbmc_ffdc_methods">
<doc>Copy core dump file from BMC to local system.</doc>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>ls /tmp/core_*</arg>
</arguments>
<assign>
<var>${core_files}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:12:21.503">width=80
host=9.3.86.161
port=22
alias=bmc_connection
term_type=vt100
newline=

prompt=# 
index=1
path_separator=/
height=24
encoding=UTF-8
timeout=25 seconds</msg>
<msg level="INFO" timestamp="20171020 13:12:21.503">Executing command 'ls /tmp/core_*'.</msg>
<msg level="INFO" timestamp="20171020 13:12:21.657">Command exited with return code 1.</msg>
<msg level="INFO" timestamp="20171020 13:12:21.669">${core_files} = None</msg>
<msg level="INFO" timestamp="20171020 13:12:21.669">${stderr} = None</msg>
<msg level="INFO" timestamp="20171020 13:12:21.669">${rc} = None</msg>
<msg level="FAIL" timestamp="20171020 13:12:21.669">#(UTC) 2017/10/20 13:12:21.668015 -    0.165334 - **ERROR** The prior SSH command returned a non-zero return code:
rc:                                               0x00000001
ls: /tmp/core_*: No such file or directory
: 1 != 0</msg>
<status status="FAIL" endtime="20171020 13:12:21.669" starttime="20171020 13:12:21.467"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${core_files}</arg>
</arguments>
<assign>
<var>@{core_list}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:12:21.670">@{core_list} = [ ]</msg>
<msg level="FAIL" timestamp="20171020 13:12:21.670">AttributeError: 'NoneType' object has no attribute 'split'</msg>
<status status="FAIL" endtime="20171020 13:12:21.670" starttime="20171020 13:12:21.670"></status>
</kw>
<kw name="Run Key U" library="gen_robot_keyword">
<doc>Run keyword unconditionally (i.e. without regard to global test_mode</doc>
<arguments>
<arg>Open Connection for SCP</arg>
</arguments>
<kw name="Open Connection for SCP" library="connection_client">
<kw name="Import Library" library="BuiltIn">
<doc>Imports a library with the given name and optional arguments.</doc>
<arguments>
<arg>SCPLibrary</arg>
<arg>WITH NAME</arg>
<arg>scp</arg>
</arguments>
<status status="PASS" endtime="20171020 13:12:21.706" starttime="20171020 13:12:21.681"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' == '${EMPTY}'</arg>
<arg>scp.Open connection</arg>
<arg>${OPENBMC_HOST}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>scp.Open connection</arg>
<arg>${OPENBMC_HOST}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>scp.Open connection</arg>
<arg>${OPENBMC_HOST}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
</arguments>
<kw name="Open Connection" library="scp">
<doc>Opens a new SCP connection to the given host.</doc>
<arguments>
<arg>${OPENBMC_HOST}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
</arguments>
<status status="PASS" endtime="20171020 13:12:22.944" starttime="20171020 13:12:21.707"></status>
</kw>
<status status="PASS" endtime="20171020 13:12:22.944" starttime="20171020 13:12:21.707"></status>
</kw>
<status status="PASS" endtime="20171020 13:12:22.944" starttime="20171020 13:12:21.706"></status>
</kw>
<status status="PASS" endtime="20171020 13:12:22.944" starttime="20171020 13:12:21.680"></status>
</kw>
<status status="PASS" endtime="20171020 13:12:22.944" starttime="20171020 13:12:21.670"></status>
</kw>
<kw type="for" name="${index} IN [ @{core_list} ]">
<status status="PASS" endtime="20171020 13:12:22.944" starttime="20171020 13:12:22.944"></status>
</kw>
<status status="FAIL" endtime="20171020 13:12:22.945" starttime="20171020 13:12:21.466"></status>
</kw>
<status status="PASS" endtime="20171020 13:12:22.945" starttime="20171020 13:12:21.441"></status>
</kw>
<status status="PASS" endtime="20171020 13:12:22.945" starttime="20171020 13:12:21.438"></status>
</kw>
<status status="PASS" endtime="20171020 13:12:22.945" starttime="20171020 13:12:21.438"></status>
</kw>
<kw type="foritem" name="${method} = ('SEL Log', 'Collect eSEL Log')">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status status="PASS" endtime="20171020 13:12:22.947" starttime="20171020 13:12:22.947"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:12:22.947">${status} = PASS</msg>
<msg level="INFO" timestamp="20171020 13:12:22.947">${ret_values} = None</msg>
<status status="PASS" endtime="20171020 13:12:22.947" starttime="20171020 13:12:22.946"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status status="PASS" endtime="20171020 13:12:22.948" starttime="20171020 13:12:22.947"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="Collect eSEL Log" library="openbmc_ffdc_methods">
<doc>Collect eSEL log from logging entry and convert eSEL data</doc>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${BMC_LOGGING_ENTRY}/enumerate</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:12:22.977">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171020 13:12:22.978" starttime="20171020 13:12:22.977"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:12:22.978">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171020 13:12:22.978" starttime="20171020 13:12:22.978"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:12:22.979">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171020 13:12:22.979" starttime="20171020 13:12:22.979"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:12:22.980">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171020 13:12:22.980" starttime="20171020 13:12:22.979"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:12:23.208">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171020 13:12:23.208" starttime="20171020 13:12:22.981"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:12:23.208">${status} = PASS</msg>
<msg level="INFO" timestamp="20171020 13:12:23.209">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:12:23.209" starttime="20171020 13:12:22.980"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:12:23.209">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:12:23.209" starttime="20171020 13:12:23.209"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:12:23.210">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:12:23.210" starttime="20171020 13:12:23.210"></status>
</kw>
<status status="PASS" endtime="20171020 13:12:23.210" starttime="20171020 13:12:22.976"></status>
</kw>
<status status="PASS" endtime="20171020 13:12:23.210" starttime="20171020 13:12:22.976"></status>
</kw>
<status status="PASS" endtime="20171020 13:12:23.210" starttime="20171020 13:12:22.975"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:12:23.211">${base_uri} = /xyz/openbmc_project/logging/entry//enumerate</msg>
<status status="PASS" endtime="20171020 13:12:23.211" starttime="20171020 13:12:23.211"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20171020 13:12:23.212" starttime="20171020 13:12:23.211"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:12:23.606">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry//enumerate, headers=None json=None</msg>
<msg level="INFO" timestamp="20171020 13:12:23.606">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:12:23.606" starttime="20171020 13:12:23.212"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20171020 13:12:23.607" starttime="20171020 13:12:23.607"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171020 13:12:23.608">Delete All Sessions</msg>
<status status="PASS" endtime="20171020 13:12:23.608" starttime="20171020 13:12:23.607"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:12:23.608">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:12:23.608" starttime="20171020 13:12:22.975"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:12:23.609">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:12:23.609" starttime="20171020 13:12:23.609"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:12:23.609">${status} = True</msg>
<status status="PASS" endtime="20171020 13:12:23.609" starttime="20171020 13:12:23.608"></status>
</kw>
<kw name="Return From Keyword If" library="BuiltIn">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
</arguments>
<status status="PASS" endtime="20171020 13:12:23.610" starttime="20171020 13:12:23.609"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:12:23.610">To JSON using : content={
  "data": {
    "/xyz/openbmc_project/logging/entry/2": {
      "AdditionalData": [
        "_PID=1334"
      ], 
      "Id": 2, 
      "Message": "xyz.openbmc_project.Power.Fault.Error.PowerSupplyInputFault", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Error", 
      "Timestamp": 1508504535407, 
      "associations": []
    }, 
    "/xyz/openbmc_project/logging/entry/3": {
      "AdditionalData": [
        "_PID=1334"
      ], 
      "Id": 3, 
      "Message": "xyz.openbmc_project.Power.Fault.Error.PowerSupplyShouldBeOn", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Error", 
      "Timestamp": 1508504537488, 
      "associations": []
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171020 13:12:23.610">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171020 13:12:23.610">${content} = {u'data': {u'/xyz/openbmc_project/logging/entry/2': {u'Id': 2, u'Message': u'xyz.openbmc_project.Power.Fault.Error.PowerSupplyInputFault', u'Resolved': 0, u'AdditionalData': [u'_PID=1334'], u'associat...</msg>
<status status="PASS" endtime="20171020 13:12:23.611" starttime="20171020 13:12:23.610"></status>
</kw>
<kw name="Get Dictionary Keys" library="Collections">
<doc>Returns keys of the given ``dictionary``.</doc>
<arguments>
<arg>${content['data']}</arg>
</arguments>
<assign>
<var>${esel_list}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:12:23.611">${esel_list} = [u'/xyz/openbmc_project/logging/entry/2', u'/xyz/openbmc_project/logging/entry/3']</msg>
<status status="PASS" endtime="20171020 13:12:23.611" starttime="20171020 13:12:23.611"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${log_prefix_path}</arg>
<arg>esel</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:12:23.612">${logpath} = /tmp/fspcibld/24591/obmc-robot/logs/20171020131146783322_TestsTestBasicPoweron/20171020131146783322_PowerOnTest/20171020131146783322_esel</msg>
<status status="PASS" endtime="20171020 13:12:23.612" starttime="20171020 13:12:23.612"></status>
</kw>
<kw name="Create File" library="OperatingSystem">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${logpath}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:12:23.613" html="yes">Created file '&lt;a href="file:///tmp/fspcibld/24591/obmc-robot/logs/20171020131146783322_TestsTestBasicPoweron/20171020131146783322_PowerOnTest/20171020131146783322_esel"&gt;/tmp/fspcibld/24591/obmc-robot/logs/20171020131146783322_TestsTestBasicPoweron/20171020131146783322_PowerOnTest/20171020131146783322_esel&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171020 13:12:23.613" starttime="20171020 13:12:23.612"></status>
</kw>
<kw type="for" name="${entry_path} IN [ @{esel_list} ]">
<kw type="foritem" name="${entry_path} = /xyz/openbmc_project/logging/entry/2">
<kw name="Continue For Loop If" library="BuiltIn">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>'${entry_path.rsplit('/', 1)[1]}' == 'callout'</arg>
</arguments>
<status status="PASS" endtime="20171020 13:12:23.614" starttime="20171020 13:12:23.613"></status>
</kw>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${entry_path}</arg>
<arg>AdditionalData</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${esel_data}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:12:23.617">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171020 13:12:23.618" starttime="20171020 13:12:23.617"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:12:23.618">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171020 13:12:23.618" starttime="20171020 13:12:23.618"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:12:23.619">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171020 13:12:23.619" starttime="20171020 13:12:23.618"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:12:23.619">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171020 13:12:23.620" starttime="20171020 13:12:23.619"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:12:24.368">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171020 13:12:24.368" starttime="20171020 13:12:23.620"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:12:24.368">${status} = PASS</msg>
<msg level="INFO" timestamp="20171020 13:12:24.368">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:12:24.368" starttime="20171020 13:12:23.620"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:12:24.369">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:12:24.369" starttime="20171020 13:12:24.369"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:12:24.370">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:12:24.370" starttime="20171020 13:12:24.369"></status>
</kw>
<status status="PASS" endtime="20171020 13:12:24.370" starttime="20171020 13:12:23.616"></status>
</kw>
<status status="PASS" endtime="20171020 13:12:24.370" starttime="20171020 13:12:23.616"></status>
</kw>
<status status="PASS" endtime="20171020 13:12:24.370" starttime="20171020 13:12:23.615"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:12:24.371">${base_uri} = /xyz/openbmc_project/logging/entry/2/attr/AdditionalData</msg>
<status status="PASS" endtime="20171020 13:12:24.371" starttime="20171020 13:12:24.370"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20171020 13:12:24.372" starttime="20171020 13:12:24.371"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:12:24.575">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry/2/attr/AdditionalData, headers=None json=None</msg>
<msg level="INFO" timestamp="20171020 13:12:24.575">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:12:24.575" starttime="20171020 13:12:24.372"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20171020 13:12:24.576" starttime="20171020 13:12:24.576"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171020 13:12:24.576">Delete All Sessions</msg>
<status status="PASS" endtime="20171020 13:12:24.577" starttime="20171020 13:12:24.576"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:12:24.577">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:12:24.577" starttime="20171020 13:12:23.614"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:12:24.577">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:12:24.578" starttime="20171020 13:12:24.577"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:12:24.578">To JSON using : content={
  "data": [
    "_PID=1334"
  ], 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171020 13:12:24.578">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171020 13:12:24.578">${content} = {u'data': [u'_PID=1334'], u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20171020 13:12:24.578" starttime="20171020 13:12:24.578"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:12:24.579">${esel_data} = [u'_PID=1334']</msg>
<status status="PASS" endtime="20171020 13:12:24.579" starttime="20171020 13:12:23.614"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Contain Match</arg>
<arg>${esel_data}</arg>
<arg>ESEL*</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Contain Match" library="Collections">
<doc>Fails if ``pattern`` is not found in ``list``.</doc>
<arguments>
<arg>${esel_data}</arg>
<arg>ESEL*</arg>
</arguments>
<msg level="FAIL" timestamp="20171020 13:12:24.580">[ _PID=1334 ] does not contain match for pattern 'ESEL*'.</msg>
<status status="FAIL" endtime="20171020 13:12:24.580" starttime="20171020 13:12:24.579"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:12:24.580">${status} = False</msg>
<status status="PASS" endtime="20171020 13:12:24.580" starttime="20171020 13:12:24.579"></status>
</kw>
<kw name="Continue For Loop If" library="BuiltIn">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>${status} == ${False}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:12:24.581">Continuing for loop from the next iteration.</msg>
<status status="PASS" endtime="20171020 13:12:24.581" starttime="20171020 13:12:24.580"></status>
</kw>
<status status="PASS" endtime="20171020 13:12:24.581" starttime="20171020 13:12:23.613"></status>
</kw>
<kw type="foritem" name="${entry_path} = /xyz/openbmc_project/logging/entry/3">
<kw name="Continue For Loop If" library="BuiltIn">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>'${entry_path.rsplit('/', 1)[1]}' == 'callout'</arg>
</arguments>
<status status="PASS" endtime="20171020 13:12:24.582" starttime="20171020 13:12:24.581"></status>
</kw>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${entry_path}</arg>
<arg>AdditionalData</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${esel_data}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:12:24.586">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171020 13:12:24.586" starttime="20171020 13:12:24.585"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:12:24.587">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171020 13:12:24.587" starttime="20171020 13:12:24.586"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:12:24.587">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171020 13:12:24.587" starttime="20171020 13:12:24.587"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:12:24.588">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171020 13:12:24.588" starttime="20171020 13:12:24.588"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:12:24.907">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171020 13:12:24.907" starttime="20171020 13:12:24.589"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:12:24.907">${status} = PASS</msg>
<msg level="INFO" timestamp="20171020 13:12:24.907">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:12:24.907" starttime="20171020 13:12:24.588"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:12:24.908">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:12:24.908" starttime="20171020 13:12:24.908"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:12:24.909">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:12:24.909" starttime="20171020 13:12:24.908"></status>
</kw>
<status status="PASS" endtime="20171020 13:12:24.909" starttime="20171020 13:12:24.584"></status>
</kw>
<status status="PASS" endtime="20171020 13:12:24.909" starttime="20171020 13:12:24.584"></status>
</kw>
<status status="PASS" endtime="20171020 13:12:24.909" starttime="20171020 13:12:24.583"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:12:24.910">${base_uri} = /xyz/openbmc_project/logging/entry/3/attr/AdditionalData</msg>
<status status="PASS" endtime="20171020 13:12:24.910" starttime="20171020 13:12:24.909"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20171020 13:12:24.910" starttime="20171020 13:12:24.910"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:12:25.022">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry/3/attr/AdditionalData, headers=None json=None</msg>
<msg level="INFO" timestamp="20171020 13:12:25.022">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:12:25.022" starttime="20171020 13:12:24.911"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20171020 13:12:25.022" starttime="20171020 13:12:25.022"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171020 13:12:25.023">Delete All Sessions</msg>
<status status="PASS" endtime="20171020 13:12:25.023" starttime="20171020 13:12:25.023"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:12:25.023">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:12:25.023" starttime="20171020 13:12:24.582"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:12:25.024">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:12:25.024" starttime="20171020 13:12:25.023"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:12:25.024">To JSON using : content={
  "data": [
    "_PID=1334"
  ], 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171020 13:12:25.025">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171020 13:12:25.025">${content} = {u'data': [u'_PID=1334'], u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20171020 13:12:25.025" starttime="20171020 13:12:25.024"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:12:25.025">${esel_data} = [u'_PID=1334']</msg>
<status status="PASS" endtime="20171020 13:12:25.025" starttime="20171020 13:12:24.582"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Contain Match</arg>
<arg>${esel_data}</arg>
<arg>ESEL*</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Contain Match" library="Collections">
<doc>Fails if ``pattern`` is not found in ``list``.</doc>
<arguments>
<arg>${esel_data}</arg>
<arg>ESEL*</arg>
</arguments>
<msg level="FAIL" timestamp="20171020 13:12:25.027">[ _PID=1334 ] does not contain match for pattern 'ESEL*'.</msg>
<status status="FAIL" endtime="20171020 13:12:25.027" starttime="20171020 13:12:25.026"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:12:25.027">${status} = False</msg>
<status status="PASS" endtime="20171020 13:12:25.027" starttime="20171020 13:12:25.026"></status>
</kw>
<kw name="Continue For Loop If" library="BuiltIn">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>${status} == ${False}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:12:25.028">Continuing for loop from the next iteration.</msg>
<status status="PASS" endtime="20171020 13:12:25.028" starttime="20171020 13:12:25.027"></status>
</kw>
<status status="PASS" endtime="20171020 13:12:25.028" starttime="20171020 13:12:24.581"></status>
</kw>
<status status="PASS" endtime="20171020 13:12:25.028" starttime="20171020 13:12:23.613"></status>
</kw>
<kw name="Run" library="OperatingSystem">
<doc>Runs the given command in the system and returns the output.</doc>
<arguments>
<arg>which eSEL.pl</arg>
</arguments>
<assign>
<var>${out}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:12:25.033">Running command 'which eSEL.pl 2&gt;&amp;1'.</msg>
<msg level="INFO" timestamp="20171020 13:12:25.037">${out} = </msg>
<status status="PASS" endtime="20171020 13:12:25.037" starttime="20171020 13:12:25.029"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${out}</arg>
<arg>eSEL.pl</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${out}</arg>
<arg>eSEL.pl</arg>
</arguments>
<msg level="FAIL" timestamp="20171020 13:12:25.045">'' does not contain 'eSEL.pl'</msg>
<status status="FAIL" endtime="20171020 13:12:25.045" starttime="20171020 13:12:25.041"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:12:25.045">${status} = False</msg>
<status status="PASS" endtime="20171020 13:12:25.045" starttime="20171020 13:12:25.040"></status>
</kw>
<kw name="Return From Keyword If" library="BuiltIn">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:12:25.046">Returning from the enclosing user keyword.</msg>
<status status="PASS" endtime="20171020 13:12:25.046" starttime="20171020 13:12:25.046"></status>
</kw>
<status status="PASS" endtime="20171020 13:12:25.046" starttime="20171020 13:12:22.974"></status>
</kw>
<status status="PASS" endtime="20171020 13:12:25.047" starttime="20171020 13:12:22.948"></status>
</kw>
<status status="PASS" endtime="20171020 13:12:25.047" starttime="20171020 13:12:22.945"></status>
</kw>
<status status="PASS" endtime="20171020 13:12:25.047" starttime="20171020 13:12:22.945"></status>
</kw>
<kw type="foritem" name="${method} = ('OS FFDC', 'OS FFDC Files')">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status status="PASS" endtime="20171020 13:12:25.049" starttime="20171020 13:12:25.049"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:12:25.049">${status} = PASS</msg>
<msg level="INFO" timestamp="20171020 13:12:25.049">${ret_values} = None</msg>
<status status="PASS" endtime="20171020 13:12:25.050" starttime="20171020 13:12:25.049"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status status="PASS" endtime="20171020 13:12:25.050" starttime="20171020 13:12:25.050"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="OS FFDC Files" library="openbmc_ffdc_methods">
<doc>Get the command list and iterate</doc>
<kw name="Return From Keyword If" library="BuiltIn">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${OS_HOST}' == '${EMPTY}'</arg>
<arg>No OS Host Provided</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:12:25.079">Returning from the enclosing user keyword.</msg>
<status status="PASS" endtime="20171020 13:12:25.079" starttime="20171020 13:12:25.079"></status>
</kw>
<status status="PASS" endtime="20171020 13:12:25.079" starttime="20171020 13:12:25.078"></status>
</kw>
<status status="PASS" endtime="20171020 13:12:25.079" starttime="20171020 13:12:25.050"></status>
</kw>
<status status="PASS" endtime="20171020 13:12:25.079" starttime="20171020 13:12:25.048"></status>
</kw>
<status status="PASS" endtime="20171020 13:12:25.079" starttime="20171020 13:12:25.047"></status>
</kw>
<status status="PASS" endtime="20171020 13:12:25.080" starttime="20171020 13:11:47.198"></status>
</kw>
<status status="PASS" endtime="20171020 13:12:25.080" starttime="20171020 13:11:47.195"></status>
</kw>
<status status="PASS" endtime="20171020 13:12:25.080" starttime="20171020 13:11:47.195"></status>
</kw>
<status status="PASS" endtime="20171020 13:12:25.080" starttime="20171020 13:11:47.194"></status>
</kw>
<kw name="Run Key U" library="gen_robot_keyword">
<doc>Run keyword unconditionally (i.e. without regard to global test_mode</doc>
<arguments>
<arg>SSHLibrary.Close All Connections</arg>
</arguments>
<kw name="Close All Connections" library="SSHLibrary">
<doc>Closes all open connections.</doc>
<status status="PASS" endtime="20171020 13:12:25.087" starttime="20171020 13:12:25.087"></status>
</kw>
<status status="PASS" endtime="20171020 13:12:25.087" starttime="20171020 13:12:25.080"></status>
</kw>
<status status="PASS" endtime="20171020 13:12:25.087" starttime="20171020 13:11:47.194"></status>
</kw>
<status status="PASS" endtime="20171020 13:12:25.087" starttime="20171020 13:11:43.664"></status>
</kw>
<status status="PASS" endtime="20171020 13:12:25.088" starttime="20171020 13:11:43.663"></status>
</kw>
<kw name="Log Test Case Status" library="openbmc_ffdc_methods">
<doc>Test case execution result history.</doc>
<kw name="Get Variable Value" library="BuiltIn">
<doc>Returns variable value or ``default`` if the variable does not exist.</doc>
<arguments>
<arg>${FFDC_DIR_PATH_STYLE}</arg>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${FFDC_DIR_PATH_STYLE}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:12:25.099">${FFDC_DIR_PATH_STYLE} = </msg>
<status status="PASS" endtime="20171020 13:12:25.099" starttime="20171020 13:12:25.088"></status>
</kw>
<kw name="Get Variable Value" library="BuiltIn">
<doc>Returns variable value or ``default`` if the variable does not exist.</doc>
<arguments>
<arg>${FFDC_DIR_PATH}</arg>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${FFDC_DIR_PATH}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:12:25.099">${FFDC_DIR_PATH} = /tmp/fspcibld/24591/obmc-robot/logs/20171020131146783322_TestsTestBasicPoweron/20171020131146783322_PowerOnTest/</msg>
<status status="PASS" endtime="20171020 13:12:25.100" starttime="20171020 13:12:25.099"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${FFDC_DIR_PATH}' == '${EMPTY}'</arg>
<arg>Set FFDC Defaults</arg>
</arguments>
<status status="PASS" endtime="20171020 13:12:25.100" starttime="20171020 13:12:25.100"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${FFDC_DIR_PATH_STYLE}' == '${1}'</arg>
<arg>Run Keywords</arg>
<arg>Set Global Variable</arg>
<arg>${FFDC_LOG_PATH}</arg>
<arg>${FFDC_DIR_PATH}</arg>
<arg>AND</arg>
<arg>Set Global Variable</arg>
<arg>${TEST_HISTORY}</arg>
<arg>${FFDC_DIR_PATH}test_history.txt</arg>
</arguments>
<status status="PASS" endtime="20171020 13:12:25.101" starttime="20171020 13:12:25.100"></status>
</kw>
<kw name="Create Directory" library="OperatingSystem">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>${FFDC_LOG_PATH}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:12:25.101" html="yes">Directory '&lt;a href="file:///tmp/fspcibld/24591/obmc-robot/logs"&gt;/tmp/fspcibld/24591/obmc-robot/logs&lt;/a&gt;' already exists.</msg>
<status status="PASS" endtime="20171020 13:12:25.101" starttime="20171020 13:12:25.101"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>OperatingSystem.File Should Exist</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<assign>
<var>${exist}</var>
</assign>
<kw name="File Should Exist" library="OperatingSystem">
<doc>Fails unless the given ``path`` points to an existing file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:12:25.102" html="yes">File '&lt;a href="file:///tmp/fspcibld/24591/obmc-robot/logs/test_history.txt"&gt;/tmp/fspcibld/24591/obmc-robot/logs/test_history.txt&lt;/a&gt;' exists.</msg>
<status status="PASS" endtime="20171020 13:12:25.102" starttime="20171020 13:12:25.102"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:12:25.103">${exist} = True</msg>
<status status="PASS" endtime="20171020 13:12:25.103" starttime="20171020 13:12:25.102"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${exist}' == '${False}'</arg>
<arg>Create File</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<status status="PASS" endtime="20171020 13:12:25.103" starttime="20171020 13:12:25.103"></status>
</kw>
<kw name="Rpvars" library="gen_robot_print">
<arguments>
<arg>TEST_HISTORY</arg>
</arguments>
<status status="PASS" endtime="20171020 13:12:25.104" starttime="20171020 13:12:25.103"></status>
</kw>
<kw name="Get Current Time Stamp" library="openbmc_ffdc_utils">
<doc>Get the current time stamp data</doc>
<assign>
<var>${cur_time}</var>
</assign>
<kw name="Get Current Date" library="DateTime">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:12:25.105">${cur_time} = 2017-10-20 13:12:25:104699</msg>
<status status="PASS" endtime="20171020 13:12:25.105" starttime="20171020 13:12:25.104"></status>
</kw>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:12:25.105">${cur_time} = 20171020131225104699</msg>
<status status="PASS" endtime="20171020 13:12:25.106" starttime="20171020 13:12:25.105"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:12:25.106">${cur_time} = 20171020131225104699</msg>
<status status="PASS" endtime="20171020 13:12:25.106" starttime="20171020 13:12:25.104"></status>
</kw>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
<arg>${cur_time}:${SUITE_NAME}:${TEST_NAME}:${TEST_STATUS}${\n}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:12:25.107" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/24591/obmc-robot/logs/test_history.txt"&gt;/tmp/fspcibld/24591/obmc-robot/logs/test_history.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171020 13:12:25.107" starttime="20171020 13:12:25.106"></status>
</kw>
<status status="PASS" endtime="20171020 13:12:25.107" starttime="20171020 13:12:25.088"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${TEST_STATUS}' == 'FAIL'</arg>
<arg>Run Keywords</arg>
<arg>Delete Error Logs</arg>
<arg>AND</arg>
<arg>Delete All Dumps</arg>
</arguments>
<kw name="Run Keywords" library="BuiltIn">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Delete Error Logs</arg>
<arg>AND</arg>
<arg>Delete All Dumps</arg>
</arguments>
<kw name="Delete Error Logs" library="utils">
<doc>Delete error logs.</doc>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${BMC_LOGGING_ENTRY}${/}list</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:12:25.111">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171020 13:12:25.112" starttime="20171020 13:12:25.111"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:12:25.113">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171020 13:12:25.113" starttime="20171020 13:12:25.112"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:12:25.113">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171020 13:12:25.113" starttime="20171020 13:12:25.113"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:12:25.114">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171020 13:12:25.114" starttime="20171020 13:12:25.114"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:12:25.355">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171020 13:12:25.355" starttime="20171020 13:12:25.115"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:12:25.356">${status} = PASS</msg>
<msg level="INFO" timestamp="20171020 13:12:25.356">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:12:25.356" starttime="20171020 13:12:25.114"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:12:25.356">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:12:25.356" starttime="20171020 13:12:25.356"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:12:25.357">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:12:25.357" starttime="20171020 13:12:25.357"></status>
</kw>
<status status="PASS" endtime="20171020 13:12:25.357" starttime="20171020 13:12:25.110"></status>
</kw>
<status status="PASS" endtime="20171020 13:12:25.357" starttime="20171020 13:12:25.110"></status>
</kw>
<status status="PASS" endtime="20171020 13:12:25.357" starttime="20171020 13:12:25.109"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:12:25.358">${base_uri} = /xyz/openbmc_project/logging/entry//list</msg>
<status status="PASS" endtime="20171020 13:12:25.358" starttime="20171020 13:12:25.358"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20171020 13:12:25.359" starttime="20171020 13:12:25.358"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:12:25.415">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry//list, headers=None json=None</msg>
<msg level="INFO" timestamp="20171020 13:12:25.416">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:12:25.416" starttime="20171020 13:12:25.359"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20171020 13:12:25.416" starttime="20171020 13:12:25.416"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171020 13:12:25.417">Delete All Sessions</msg>
<status status="PASS" endtime="20171020 13:12:25.417" starttime="20171020 13:12:25.417"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:12:25.417">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:12:25.417" starttime="20171020 13:12:25.108"></status>
</kw>
<kw name="Return From Keyword If" library="BuiltIn">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>${resp.status_code} == ${HTTP_NOT_FOUND}</arg>
</arguments>
<status status="PASS" endtime="20171020 13:12:25.418" starttime="20171020 13:12:25.417"></status>
</kw>
<kw name="Get URL List" library="utils">
<doc>Return list of URLs under given URL.</doc>
<arguments>
<arg>${BMC_LOGGING_ENTRY}</arg>
</arguments>
<assign>
<var>${elog_entries}</var>
</assign>
<kw name="Read Properties" library="rest_client">
<arguments>
<arg>${openbmc_url}/list</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${url_list}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:12:25.422">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171020 13:12:25.422" starttime="20171020 13:12:25.421"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:12:25.423">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171020 13:12:25.423" starttime="20171020 13:12:25.423"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:12:25.424">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171020 13:12:25.424" starttime="20171020 13:12:25.423"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:12:25.424">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171020 13:12:25.424" starttime="20171020 13:12:25.424"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:12:25.672">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171020 13:12:25.672" starttime="20171020 13:12:25.425"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:12:25.672">${status} = PASS</msg>
<msg level="INFO" timestamp="20171020 13:12:25.672">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:12:25.672" starttime="20171020 13:12:25.425"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:12:25.672">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:12:25.673" starttime="20171020 13:12:25.672"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:12:25.673">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:12:25.674" starttime="20171020 13:12:25.673"></status>
</kw>
<status status="PASS" endtime="20171020 13:12:25.674" starttime="20171020 13:12:25.421"></status>
</kw>
<status status="PASS" endtime="20171020 13:12:25.674" starttime="20171020 13:12:25.420"></status>
</kw>
<status status="PASS" endtime="20171020 13:12:25.674" starttime="20171020 13:12:25.420"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:12:25.675">${base_uri} = /xyz/openbmc_project/logging/entry//list</msg>
<status status="PASS" endtime="20171020 13:12:25.675" starttime="20171020 13:12:25.674"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20171020 13:12:25.675" starttime="20171020 13:12:25.675"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:12:25.837">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry//list, headers=None json=None</msg>
<msg level="INFO" timestamp="20171020 13:12:25.837">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:12:25.838" starttime="20171020 13:12:25.676"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20171020 13:12:25.838" starttime="20171020 13:12:25.838"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171020 13:12:25.839">Delete All Sessions</msg>
<status status="PASS" endtime="20171020 13:12:25.839" starttime="20171020 13:12:25.839"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:12:25.839">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:12:25.839" starttime="20171020 13:12:25.419"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:12:25.840">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:12:25.840" starttime="20171020 13:12:25.839"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:12:25.840">To JSON using : content={
  "data": [
    "/xyz/openbmc_project/logging/entry/3", 
    "/xyz/openbmc_project/logging/entry/2"
  ], 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20171020 13:12:25.840">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20171020 13:12:25.840">${content} = {u'data': [u'/xyz/openbmc_project/logging/entry/3', u'/xyz/openbmc_project/logging/entry/2'], u'status': u'ok', u'message': u'200 OK'}</msg>
<status status="PASS" endtime="20171020 13:12:25.840" starttime="20171020 13:12:25.840"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:12:25.841">${url_list} = [u'/xyz/openbmc_project/logging/entry/3', u'/xyz/openbmc_project/logging/entry/2']</msg>
<status status="PASS" endtime="20171020 13:12:25.841" starttime="20171020 13:12:25.419"></status>
</kw>
<kw name="Sort List" library="Collections">
<doc>Sorts the given list in place.</doc>
<arguments>
<arg>${url_list}</arg>
</arguments>
<status status="PASS" endtime="20171020 13:12:25.841" starttime="20171020 13:12:25.841"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:12:25.842">${elog_entries} = [u'/xyz/openbmc_project/logging/entry/2', u'/xyz/openbmc_project/logging/entry/3']</msg>
<status status="PASS" endtime="20171020 13:12:25.842" starttime="20171020 13:12:25.418"></status>
</kw>
<kw type="for" name="${entry} IN [ @{elog_entries} ]">
<kw type="foritem" name="${entry} = /xyz/openbmc_project/logging/entry/2">
<kw name="Delete Error Log Entry" library="utils">
<doc>Delete error log entry.</doc>
<arguments>
<arg>${entry}</arg>
</arguments>
<kw name="Return From Keyword If" library="BuiltIn">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${entry_path.rsplit('/', 1)[1]}' == 'callout'</arg>
</arguments>
<status status="PASS" endtime="20171020 13:12:25.843" starttime="20171020 13:12:25.843"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{EMPTY}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:12:25.844">${data} = {u'data': []}</msg>
<status status="PASS" endtime="20171020 13:12:25.844" starttime="20171020 13:12:25.843"></status>
</kw>
<kw name="OpenBMC Delete Request" library="rest_client">
<arguments>
<arg>${entry_path}</arg>
<arg>data=${data}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:12:25.846">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171020 13:12:25.849" starttime="20171020 13:12:25.846"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:12:25.850">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171020 13:12:25.850" starttime="20171020 13:12:25.850"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:12:25.852">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171020 13:12:25.852" starttime="20171020 13:12:25.851"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:12:25.853">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171020 13:12:25.853" starttime="20171020 13:12:25.852"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:12:26.075">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171020 13:12:26.075" starttime="20171020 13:12:25.854"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:12:26.075">${status} = PASS</msg>
<msg level="INFO" timestamp="20171020 13:12:26.075">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:12:26.075" starttime="20171020 13:12:25.853"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:12:26.076">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:12:26.076" starttime="20171020 13:12:26.076"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:12:26.077">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:12:26.077" starttime="20171020 13:12:26.076"></status>
</kw>
<status status="PASS" endtime="20171020 13:12:26.077" starttime="20171020 13:12:25.845"></status>
</kw>
<status status="PASS" endtime="20171020 13:12:26.077" starttime="20171020 13:12:25.845"></status>
</kw>
<status status="PASS" endtime="20171020 13:12:26.077" starttime="20171020 13:12:25.844"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:12:26.078">${base_uri} = /xyz/openbmc_project/logging/entry/2</msg>
<status status="PASS" endtime="20171020 13:12:26.078" starttime="20171020 13:12:26.078"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Delete</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:12:26.079">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/logging/entry/2, method:Delete, args:{u'data': {u'data': []}}</msg>
<status status="PASS" endtime="20171020 13:12:26.080" starttime="20171020 13:12:26.079"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:12:26.080">URI:https://9.3.86.161:443/xyz/openbmc_project/logging/entry/2, method:Delete, args:{u'data': {u'data': []}}</msg>
<status status="PASS" endtime="20171020 13:12:26.081" starttime="20171020 13:12:26.080"></status>
</kw>
<status status="PASS" endtime="20171020 13:12:26.081" starttime="20171020 13:12:26.080"></status>
</kw>
<status status="PASS" endtime="20171020 13:12:26.081" starttime="20171020 13:12:26.078"></status>
</kw>
<kw name="Delete Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a DELETE request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:12:26.185">Delete Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry/2, data=data=%5B%5D,                     headers=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20171020 13:12:26.186">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:12:26.186" starttime="20171020 13:12:26.081"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:12:26.187">${msg} = Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171020 13:12:26.187" starttime="20171020 13:12:26.186"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:12:26.188">Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171020 13:12:26.188" starttime="20171020 13:12:26.188"></status>
</kw>
<status status="PASS" endtime="20171020 13:12:26.188" starttime="20171020 13:12:26.187"></status>
</kw>
<status status="PASS" endtime="20171020 13:12:26.188" starttime="20171020 13:12:26.186"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171020 13:12:26.189">Delete All Sessions</msg>
<status status="PASS" endtime="20171020 13:12:26.189" starttime="20171020 13:12:26.188"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:12:26.189">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:12:26.189" starttime="20171020 13:12:25.844"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:12:26.190">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:12:26.190" starttime="20171020 13:12:26.189"></status>
</kw>
<status status="PASS" endtime="20171020 13:12:26.190" starttime="20171020 13:12:25.842"></status>
</kw>
<status status="PASS" endtime="20171020 13:12:26.190" starttime="20171020 13:12:25.842"></status>
</kw>
<kw type="foritem" name="${entry} = /xyz/openbmc_project/logging/entry/3">
<kw name="Delete Error Log Entry" library="utils">
<doc>Delete error log entry.</doc>
<arguments>
<arg>${entry}</arg>
</arguments>
<kw name="Return From Keyword If" library="BuiltIn">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${entry_path.rsplit('/', 1)[1]}' == 'callout'</arg>
</arguments>
<status status="PASS" endtime="20171020 13:12:26.191" starttime="20171020 13:12:26.191"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{EMPTY}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:12:26.192">${data} = {u'data': []}</msg>
<status status="PASS" endtime="20171020 13:12:26.192" starttime="20171020 13:12:26.191"></status>
</kw>
<kw name="OpenBMC Delete Request" library="rest_client">
<arguments>
<arg>${entry_path}</arg>
<arg>data=${data}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:12:26.195">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171020 13:12:26.195" starttime="20171020 13:12:26.194"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:12:26.196">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171020 13:12:26.196" starttime="20171020 13:12:26.195"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:12:26.196">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171020 13:12:26.196" starttime="20171020 13:12:26.196"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:12:26.197">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171020 13:12:26.197" starttime="20171020 13:12:26.197"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:12:26.603">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171020 13:12:26.604" starttime="20171020 13:12:26.198"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:12:26.604">${status} = PASS</msg>
<msg level="INFO" timestamp="20171020 13:12:26.604">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:12:26.604" starttime="20171020 13:12:26.197"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:12:26.604">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:12:26.605" starttime="20171020 13:12:26.604"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:12:26.605">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:12:26.605" starttime="20171020 13:12:26.605"></status>
</kw>
<status status="PASS" endtime="20171020 13:12:26.605" starttime="20171020 13:12:26.194"></status>
</kw>
<status status="PASS" endtime="20171020 13:12:26.605" starttime="20171020 13:12:26.193"></status>
</kw>
<status status="PASS" endtime="20171020 13:12:26.606" starttime="20171020 13:12:26.193"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:12:26.606">${base_uri} = /xyz/openbmc_project/logging/entry/3</msg>
<status status="PASS" endtime="20171020 13:12:26.606" starttime="20171020 13:12:26.606"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Delete</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:12:26.608">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/logging/entry/3, method:Delete, args:{u'data': {u'data': []}}</msg>
<status status="PASS" endtime="20171020 13:12:26.608" starttime="20171020 13:12:26.607"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:12:26.609">URI:https://9.3.86.161:443/xyz/openbmc_project/logging/entry/3, method:Delete, args:{u'data': {u'data': []}}</msg>
<status status="PASS" endtime="20171020 13:12:26.609" starttime="20171020 13:12:26.608"></status>
</kw>
<status status="PASS" endtime="20171020 13:12:26.609" starttime="20171020 13:12:26.608"></status>
</kw>
<status status="PASS" endtime="20171020 13:12:26.609" starttime="20171020 13:12:26.606"></status>
</kw>
<kw name="Delete Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a DELETE request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:12:26.715">Delete Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry/3, data=data=%5B%5D,                     headers=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20171020 13:12:26.715">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:12:26.715" starttime="20171020 13:12:26.609"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:12:26.717">${msg} = Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171020 13:12:26.717" starttime="20171020 13:12:26.716"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:12:26.718">Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20171020 13:12:26.718" starttime="20171020 13:12:26.717"></status>
</kw>
<status status="PASS" endtime="20171020 13:12:26.718" starttime="20171020 13:12:26.717"></status>
</kw>
<status status="PASS" endtime="20171020 13:12:26.718" starttime="20171020 13:12:26.716"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171020 13:12:26.718">Delete All Sessions</msg>
<status status="PASS" endtime="20171020 13:12:26.718" starttime="20171020 13:12:26.718"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:12:26.719">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:12:26.719" starttime="20171020 13:12:26.192"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:12:26.719">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:12:26.719" starttime="20171020 13:12:26.719"></status>
</kw>
<status status="PASS" endtime="20171020 13:12:26.719" starttime="20171020 13:12:26.190"></status>
</kw>
<status status="PASS" endtime="20171020 13:12:26.720" starttime="20171020 13:12:26.190"></status>
</kw>
<status status="PASS" endtime="20171020 13:12:26.720" starttime="20171020 13:12:25.842"></status>
</kw>
<status status="PASS" endtime="20171020 13:12:26.720" starttime="20171020 13:12:25.108"></status>
</kw>
<kw name="Delete All Dumps" library="dump_utils">
<doc>Delete all dumps.</doc>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${DUMP_ENTRY_URI}list</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:12:26.723">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20171020 13:12:26.724" starttime="20171020 13:12:26.723"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:12:26.724">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20171020 13:12:26.724" starttime="20171020 13:12:26.724"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:12:26.725">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20171020 13:12:26.725" starttime="20171020 13:12:26.724"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:12:26.725">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20171020 13:12:26.725" starttime="20171020 13:12:26.725"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:12:26.962">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20171020 13:12:26.962" starttime="20171020 13:12:26.726"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:12:26.962">${status} = PASS</msg>
<msg level="INFO" timestamp="20171020 13:12:26.962">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20171020 13:12:26.962" starttime="20171020 13:12:26.726"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:12:26.963">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:12:26.963" starttime="20171020 13:12:26.963"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:12:26.964">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20171020 13:12:26.964" starttime="20171020 13:12:26.963"></status>
</kw>
<status status="PASS" endtime="20171020 13:12:26.964" starttime="20171020 13:12:26.722"></status>
</kw>
<status status="PASS" endtime="20171020 13:12:26.964" starttime="20171020 13:12:26.722"></status>
</kw>
<status status="PASS" endtime="20171020 13:12:26.964" starttime="20171020 13:12:26.721"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:12:26.965">${base_uri} = /xyz/openbmc_project/dump/entry/list</msg>
<status status="PASS" endtime="20171020 13:12:26.965" starttime="20171020 13:12:26.964"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20171020 13:12:26.965" starttime="20171020 13:12:26.965"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:12:27.023">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/dump/entry/list, headers=None json=None</msg>
<msg level="INFO" timestamp="20171020 13:12:27.023">${ret} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20171020 13:12:27.023" starttime="20171020 13:12:26.966"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20171020 13:12:27.023" starttime="20171020 13:12:27.023"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20171020 13:12:27.024">Delete All Sessions</msg>
<status status="PASS" endtime="20171020 13:12:27.024" starttime="20171020 13:12:27.024"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:12:27.024">${resp} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20171020 13:12:27.024" starttime="20171020 13:12:26.720"></status>
</kw>
<kw name="Return From Keyword If" library="BuiltIn">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>${resp.status_code} == ${HTTP_NOT_FOUND}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:12:27.025">Returning from the enclosing user keyword.</msg>
<status status="PASS" endtime="20171020 13:12:27.025" starttime="20171020 13:12:27.024"></status>
</kw>
<status status="PASS" endtime="20171020 13:12:27.025" starttime="20171020 13:12:26.720"></status>
</kw>
<status status="PASS" endtime="20171020 13:12:27.025" starttime="20171020 13:12:25.108"></status>
</kw>
<status status="PASS" endtime="20171020 13:12:27.025" starttime="20171020 13:12:25.107"></status>
</kw>
<status status="PASS" endtime="20171020 13:12:27.025" starttime="20171020 13:11:43.663"></status>
</kw>
<kw name="Stop SOL Console Logging" library="utils">
<doc>Stop system console logging and return log output.</doc>
<assign>
<var>${sol_log}</var>
</assign>
<kw name="Create OS Console File Path" library="utils">
<doc>Create OS console file path name and return it.</doc>
<arguments>
<arg>${log_file_path}</arg>
</arguments>
<assign>
<var>${log_file_path}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>/tmp/${OPENBMC_HOST}_os_console.txt</arg>
</arguments>
<assign>
<var>${default_file_path}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:12:27.027">${default_file_path} = /tmp/9.3.86.161_os_console.txt</msg>
<status status="PASS" endtime="20171020 13:12:27.027" starttime="20171020 13:12:27.027"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${log_file_path}' == '${EMPTY}'</arg>
<arg>${default_file_path}</arg>
<arg>${log_file_path}</arg>
</arguments>
<assign>
<var>${log_file_path}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:12:27.028">${log_file_path} = /tmp/9.3.86.161_os_console.txt</msg>
<status status="PASS" endtime="20171020 13:12:27.028" starttime="20171020 13:12:27.027"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:12:27.028">${log_file_path} = /tmp/9.3.86.161_os_console.txt</msg>
<status status="PASS" endtime="20171020 13:12:27.028" starttime="20171020 13:12:27.026"></status>
</kw>
<kw name="Get SOL Console Pid" library="utils">
<doc>Get the pid of the active sol conole job.</doc>
<assign>
<var>${os_con_pid}</var>
</assign>
<kw name="Create OS Console Command String" library="utils">
<doc>Return a command string to start OS console logging.</doc>
<assign>
<var>${search_string}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>which ssh_pw 2&gt;/dev/null || find ${EXECDIR} -name 'ssh_pw'</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:12:27.029">${cmd_buf} = which ssh_pw 2&gt;/dev/null || find /tmp/fspcibld/24591/obmc-robot -name 'ssh_pw'</msg>
<status status="PASS" endtime="20171020 13:12:27.029" starttime="20171020 13:12:27.029"></status>
</kw>
<kw name="Rdpissuing" library="gen_robot_print">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status status="PASS" endtime="20171020 13:12:27.030" starttime="20171020 13:12:27.030"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:12:27.035">Running command 'which ssh_pw 2&gt;/dev/null || find /tmp/fspcibld/24591/obmc-robot -name 'ssh_pw''.</msg>
<msg level="INFO" timestamp="20171020 13:12:27.038">${rc} = 0</msg>
<msg level="INFO" timestamp="20171020 13:12:27.038">${output} = /tmp/fspcibld/24591/obmc-robot/.tox/witherspoon/bin/ssh_pw</msg>
<status status="PASS" endtime="20171020 13:12:27.039" starttime="20171020 13:12:27.030"></status>
</kw>
<kw name="Rdpvars" library="gen_robot_print">
<arguments>
<arg>rc</arg>
<arg>output</arg>
</arguments>
<status status="PASS" endtime="20171020 13:12:27.046" starttime="20171020 13:12:27.041"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>0</arg>
<arg>${rc}</arg>
<arg>msg=Could not find ssh_pw.</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:12:27.046">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'int'&gt;</msg>
<status status="PASS" endtime="20171020 13:12:27.047" starttime="20171020 13:12:27.046"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<assign>
<var>${ssh_pw_file_path}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:12:27.047">${ssh_pw_file_path} = /tmp/fspcibld/24591/obmc-robot/.tox/witherspoon/bin/ssh_pw</msg>
<status status="PASS" endtime="20171020 13:12:27.048" starttime="20171020 13:12:27.047"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${ssh_pw_file_path} ${OPENBMC_PASSWORD} -p 2200</arg>
<arg>-o "StrictHostKeyChecking no" ${OPENBMC_USERNAME}@${OPENBMC_HOST}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:12:27.049">${cmd_buf} = /tmp/fspcibld/24591/obmc-robot/.tox/witherspoon/bin/ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.3.86.161</msg>
<status status="PASS" endtime="20171020 13:12:27.049" starttime="20171020 13:12:27.048"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:12:27.049">${search_string} = /tmp/fspcibld/24591/obmc-robot/.tox/witherspoon/bin/ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.3.86.161</msg>
<status status="PASS" endtime="20171020 13:12:27.049" starttime="20171020 13:12:27.029"></status>
</kw>
<kw name="Replace String" library="String">
<doc>Replaces ``search_for`` in the given ``string`` with ``replace_with``.</doc>
<arguments>
<arg>${search_string}</arg>
<arg>"</arg>
<arg>["]?</arg>
</arguments>
<assign>
<var>${search_string}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:12:27.050">${search_string} = /tmp/fspcibld/24591/obmc-robot/.tox/witherspoon/bin/ssh_pw 0penBmc -p 2200 -o ["]?StrictHostKeyChecking no["]? root@9.3.86.161</msg>
<status status="PASS" endtime="20171020 13:12:27.050" starttime="20171020 13:12:27.050"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>echo $(ps -ef | egrep '${search_string}'</arg>
<arg>| egrep -v grep | cut -c10-14)</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:12:27.051">${cmd_buf} = echo $(ps -ef | egrep '/tmp/fspcibld/24591/obmc-robot/.tox/witherspoon/bin/ssh_pw 0penBmc -p 2200 -o ["]?StrictHostKeyChecking no["]? root@9.3.86.161' | egrep -v grep | cut -c10-14)</msg>
<status status="PASS" endtime="20171020 13:12:27.051" starttime="20171020 13:12:27.051"></status>
</kw>
<kw name="Rdpissuing" library="gen_robot_print">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status status="PASS" endtime="20171020 13:12:27.052" starttime="20171020 13:12:27.052"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${os_con_pid}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:12:27.057">Running command 'echo $(ps -ef | egrep '/tmp/fspcibld/24591/obmc-robot/.tox/witherspoon/bin/ssh_pw 0penBmc -p 2200 -o ["]?StrictHostKeyChecking no["]? root@9.3.86.161' | egrep -v grep | cut -c10-14) 2&gt;&amp;1'.</msg>
<msg level="INFO" timestamp="20171020 13:12:27.086">${rc} = 0</msg>
<msg level="INFO" timestamp="20171020 13:12:27.087">${os_con_pid} = 202</msg>
<status status="PASS" endtime="20171020 13:12:27.087" starttime="20171020 13:12:27.053"></status>
</kw>
<kw name="Rdpvars" library="gen_robot_print">
<arguments>
<arg>os_con_pid</arg>
</arguments>
<status status="PASS" endtime="20171020 13:12:27.091" starttime="20171020 13:12:27.089"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:12:27.093">${os_con_pid} = 202</msg>
<status status="PASS" endtime="20171020 13:12:27.093" starttime="20171020 13:12:27.028"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>kill -9 ${os_con_pid}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:12:27.094">${cmd_buf} = kill -9 202</msg>
<status status="PASS" endtime="20171020 13:12:27.094" starttime="20171020 13:12:27.094"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${os_con_pid}' != '${EMPTY}'</arg>
<arg>Rdpissuing</arg>
<arg>${cmd_buf}</arg>
</arguments>
<kw name="Rdpissuing" library="gen_robot_print">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status status="PASS" endtime="20171020 13:12:27.099" starttime="20171020 13:12:27.099"></status>
</kw>
<status status="PASS" endtime="20171020 13:12:27.099" starttime="20171020 13:12:27.096"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${os_con_pid}' != '${EMPTY}'</arg>
<arg>Run And Return Rc And Output</arg>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:12:27.115">Running command 'kill -9 202 2&gt;&amp;1'.</msg>
<status status="PASS" endtime="20171020 13:12:27.133" starttime="20171020 13:12:27.102"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:12:27.138">${rc} = 0</msg>
<msg level="INFO" timestamp="20171020 13:12:27.138">${output} = </msg>
<status status="PASS" endtime="20171020 13:12:27.138" starttime="20171020 13:12:27.100"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${os_con_pid}' != '${EMPTY}'</arg>
<arg>Rdpvars</arg>
<arg>rc</arg>
<arg>output</arg>
</arguments>
<kw name="Rdpvars" library="gen_robot_print">
<arguments>
<arg>rc</arg>
<arg>output</arg>
</arguments>
<status status="PASS" endtime="20171020 13:12:27.153" starttime="20171020 13:12:27.153"></status>
</kw>
<status status="PASS" endtime="20171020 13:12:27.153" starttime="20171020 13:12:27.151"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${targ_file_path}' != '${EMPTY}'</arg>
<arg>Run Keyword And Ignore Error</arg>
<arg>Copy File</arg>
<arg>${log_file_path}</arg>
<arg>${targ_file_path}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Copy File</arg>
<arg>${log_file_path}</arg>
<arg>${targ_file_path}</arg>
</arguments>
<kw name="Copy File" library="OperatingSystem">
<doc>Copies the source file into the destination.</doc>
<arguments>
<arg>${log_file_path}</arg>
<arg>${targ_file_path}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:12:27.158" html="yes">Copied file from '&lt;a href="file:///tmp/9.3.86.161_os_console.txt"&gt;/tmp/9.3.86.161_os_console.txt&lt;/a&gt;' to '&lt;a href="file:///tmp/fspcibld/24591/obmc-robot/logs/9.3.86.161_os_console.txt"&gt;/tmp/fspcibld/24591/obmc-robot/logs/9.3.86.161_os_console.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171020 13:12:27.158" starttime="20171020 13:12:27.156"></status>
</kw>
<status status="PASS" endtime="20171020 13:12:27.158" starttime="20171020 13:12:27.155"></status>
</kw>
<status status="PASS" endtime="20171020 13:12:27.158" starttime="20171020 13:12:27.154"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${output}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:12:27.158">${output} = </msg>
<status status="PASS" endtime="20171020 13:12:27.159" starttime="20171020 13:12:27.158"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${debug}^1</arg>
</arguments>
<assign>
<var>${loc_quiet}</var>
</assign>
<msg level="INFO" timestamp="20171020 13:12:27.159">${loc_quiet} = 1</msg>
<status status="PASS" endtime="20171020 13:12:27.159" starttime="20171020 13:12:27.159"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${return_data}' == '${1}'</arg>
<arg>Cmd Fnc</arg>
<arg>cat ${log_file_path} 2&gt;/dev/null</arg>
<arg>quiet=${loc_quiet}</arg>
<arg>print_output=${0}</arg>
<arg>show_err=${0}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<kw name="Cmd Fnc" library="gen_cmd">
<doc>Run the given command in a shell and return the shell return code and the</doc>
<arguments>
<arg>cat ${log_file_path} 2&gt;/dev/null</arg>
<arg>quiet=${loc_quiet}</arg>
<arg>print_output=${0}</arg>
<arg>show_err=${0}</arg>
</arguments>
<status status="PASS" endtime="20171020 13:12:27.227" starttime="20171020 13:12:27.160"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:12:27.234">${rc} = 0</msg>
<msg level="INFO" timestamp="20171020 13:12:27.236">${output} = spawn ssh -p 2200 -o StrictHostKeyChecking no root@9.3.86.161
Warning: Permanently added '[9.3.86.161]:2200' (RSA) to the list of known hosts.
root@9.3.86.161's password: 


--== Welcome to Host...</msg>
<status status="PASS" endtime="20171020 13:12:27.236" starttime="20171020 13:12:27.160"></status>
</kw>
<msg level="INFO" timestamp="20171020 13:12:27.242">${sol_log} = spawn ssh -p 2200 -o StrictHostKeyChecking no root@9.3.86.161
Warning: Permanently added '[9.3.86.161]:2200' (RSA) to the list of known hosts.
root@9.3.86.161's password: 


--== Welcome to Host...</msg>
<status status="PASS" endtime="20171020 13:12:27.242" starttime="20171020 13:12:27.026"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${sol_log}</arg>
</arguments>
<msg level="INFO" timestamp="20171020 13:12:27.251">spawn ssh -p 2200 -o StrictHostKeyChecking no root@9.3.86.161
Warning: Permanently added '[9.3.86.161]:2200' (RSA) to the list of known hosts.
root@9.3.86.161's password: 


--== Welcome to Hostboot hostboot-c68be97/hbicore.bin ==--

  3.91377|secure|Booting in non-secure mode.
  3.91378|secure|SecureROM valid - enabling functionality
  6.96167|ISTEP  6. 5 - host_init_fsi
  7.06964|ISTEP  6. 6 - host_set_ipl_parms
  7.08820|ISTEP  6. 7 - host_discover_targets
  7.62025|HWAS|PRESENT&gt; DIMM[03]=FF77000000000000
  7.62026|HWAS|PRESENT&gt; Proc[05]=C000000000000000
  7.64232|ISTEP  6. 8 - host_update_master_tpm
 16.55131|SECURE|Security Access Bit&gt; 0x0000000000000000
 16.55132|SECURE|Secure Mode Disable (via Jumper)&gt; 0xC000000000000000
 16.55142|ISTEP  6. 9 - host_gard
 16.60336|ISTEP  6.10 - host_revert_sbe_mcs_setup
 16.60756|ISTEP  6.11 - host_start_occ_xstop_handler
 16.60933|ISTEP  6.12 - host_voltage_config
 16.64019|ISTEP  7. 2 - mss_volt
 17.09618|ISTEP  7. 3 - mss_freq
 17.18153|ISTEP  7. 4 - mss_eff_config
 19.83703|ISTEP  7. 5 - mss_attr_update
 19.84679|ISTEP  8. 1 - host_slave_sbe_config
 19.88688|ISTEP  8. 2 - host_setup_sbe
 19.89165|ISTEP  8. 3 - host_cbs_start
 19.92021|ISTEP  8. 4 - proc_check_slave_sbe_seeprom_complete
 27.13673|ISTEP  8. 5 - host_attnlisten_proc
 27.13737|ISTEP  8. 6 - host_p9_fbc_eff_config
 27.14259|ISTEP  8. 7 - host_p9_eff_config_links
 27.15256|ISTEP  8. 8 - proc_attr_update
 27.15464|ISTEP  8. 9 - proc_chiplet_fabric_scominit
 27.18447|ISTEP  8.10 - proc_xbus_scominit
 28.73644|ISTEP  8.11 - proc_xbus_enable_ridi
 28.73908|ISTEP  9. 1 - fabric_erepair
 29.03873|ISTEP  9. 2 - fabric_io_dccal
 29.70974|ISTEP  9. 3 - fabric_pre_trainadv
 29.71874|ISTEP  9. 4 - fabric_io_run_training
 29.84162|ISTEP  9. 5 - fabric_post_trainadv
 29.84586|ISTEP  9. 6 - proc_smp_link_layer
 29.84947|ISTEP  9. 7 - proc_fab_iovalid
 29.88074|ISTEP  9. 8 - host_fbc_eff_config_aggregate
 29.88777|ISTEP 10. 1 - proc_build_smp
 30.00092|ISTEP 10. 2 - host_slave_sbe_update
 30.81000|ISTEP 10. 3 - host_set_voltages
 30.84141|ISTEP 10. 4 - proc_cen_ref_clk_enable
 30.84672|ISTEP 10. 5 - proc_enable_osclite
 30.84762|ISTEP 10. 6 - proc_chiplet_scominit
 30.87777|ISTEP 10. 7 - proc_abus_scominit
 30.88831|ISTEP 10. 8 - proc_obus_scominit
 30.95002|ISTEP 10. 9 - proc_npu_scominit
 30.97009|ISTEP 10.10 - proc_pcie_scominit
 31.00943|ISTEP 10.11 - proc_scomoverride_chiplets
 31.01252|ISTEP 10.12 - proc_chiplet_enable_ridi
 31.01472|ISTEP 10.13 - host_rng_bist
 31.01660|ISTEP 10.14 - host_update_redundant_tpm
 31.08383|ISTEP 11. 1 - host_prd_hwreconfig
 31.09112|ISTEP 11. 2 - cen_tp_chiplet_init1
 31.09237|ISTEP 11. 3 - cen_pll_initf
 31.09358|ISTEP 11. 4 - cen_pll_setup
 31.10395|ISTEP 11. 5 - cen_tp_chiplet_init2
 31.10548|ISTEP 11. 6 - cen_tp_arrayinit
 31.10695|ISTEP 11. 7 - cen_tp_chiplet_init3
 31.10949|ISTEP 11. 8 - cen_chiplet_init
 31.11101|ISTEP 11. 9 - cen_arrayinit
 31.11200|ISTEP 11.10 - cen_initf
 31.11320|ISTEP 11.11 - cen_do_manual_inits
 31.11452|ISTEP 11.12 - cen_startclocks
 31.11601|ISTEP 11.13 - cen_scominits
 31.11702|ISTEP 12. 1 - mss_getecid
 31.12201|ISTEP 12. 2 - dmi_attr_update
 31.12321|ISTEP 12. 3 - proc_dmi_scominit
 31.12551|ISTEP 12. 4 - cen_dmi_scominit
 31.12707|ISTEP 12. 5 - dmi_erepair
 31.12842|ISTEP 12. 6 - dmi_io_dccal
 31.12951|ISTEP 12. 7 - dmi_pre_trainadv
 31.13050|ISTEP 12. 8 - dmi_io_run_training
 31.13202|ISTEP 12. 9 - dmi_post_trainadv
 31.13339|ISTEP 12.10 - proc_cen_framelock
 31.13449|ISTEP 12.11 - host_startprd_dmi
 31.13550|ISTEP 12.12 - host_attnlisten_memb
 31.13735|ISTEP 12.13 - cen_set_inband_addr
 31.13848|ISTEP 13. 1 - host_disable_memvolt
 31.28227|ISTEP 13. 2 - mem_pll_reset
 31.29675|ISTEP 13. 3 - mem_pll_initf
 31.34335|ISTEP 13. 4 - mem_pll_setup
 31.37001|ISTEP 13. 6 - mem_startclocks
 31.38668|ISTEP 13. 7 - host_enable_memvolt
 31.38801|ISTEP 13. 8 - mss_scominit
 31.67820|ISTEP 13. 9 - mss_ddr_phy_reset
 31.74506|ISTEP 13.10 - mss_draminit
 32.00334|ISTEP 13.11 - mss_draminit_training
 32.34124|ISTEP 13.12 - mss_draminit_trainadv
 32.34295|ISTEP 13.13 - mss_draminit_mc
 32.37286|ISTEP 14. 1 - mss_memdiag
 42.74006|ISTEP 14. 2 - mss_thermal_init
 42.75510|ISTEP 14. 3 - proc_pcie_config
 42.77072|ISTEP 14. 4 - mss_power_cleanup
 42.77269|ISTEP 14. 5 - proc_setup_bars
 42.81297|ISTEP 14. 6 - proc_htm_setup
 42.82370|ISTEP 14. 7 - proc_exit_cache_contained
 42.83866|ISTEP 15. 1 - host_build_stop_image
 43.78749|ISTEP 15. 2 - proc_set_pba_homer_bar
 43.79124|ISTEP 15. 3 - host_establish_ex_chiplet
 43.79851|ISTEP 15. 4 - host_start_stop_engine
 43.90232|ISTEP 16. 1 - host_activate_master
  0.00707|ISTEP 16. 2 - host_activate_slave_cores
 45.55676|ISTEP 16. 3 - host_secure_rng
 45.54240|ISTEP 16. 4 - mss_scrub
 45.57397|ISTEP 16. 5 - host_ipl_complete
 45.58899|ISTEP 16. 6 - host_load_io_ppe
 45.61418|ISTEP 18.11 - proc_tod_setup
 45.72870|ISTEP 18.12 - proc_tod_init
 45.76747|ISTEP 20. 1 - host_load_payload
 46.18021|ISTEP 20. 2 - host_load_hdat
 49.97965|ISTEP 21. 1 - host_runtime_setup
 50.11024|dw-Setting HDAT HB Reserved Memory Range: ibm,homer-image RangeType 0x4 RangeId 0x0 StartAddress 0x80002017FD800000 EndAddress 0x80002017FDBFFFFF
 50.11028|dw-Setting HDAT HB Reserved Memory Range: ibm,homer-image RangeType 0x4 RangeId 0x8 StartAddress 0x80002017FDC00000 EndAddress 0x80002017FDFFFFFF
 50.11032|dw-Setting HDAT HB Reserved Memory Range: ibm,occ-common-area RangeType 0x4 RangeId 0x0 StartAddress 0x80002017FF800000 EndAddress 0x80002017FFFFFFFF
 50.52486|dw-Setting HDAT HB Reserved Memory Range: ibm,hbrt-data RangeType 0x1 RangeId 0x0 StartAddress 0x80002017FD670000 EndAddress 0x80002017FD7FFFFF
 52.27880|dw-Setting HDAT HB Reserved Memory Range: ibm,hbrt-code-image RangeType 0x1 RangeId 0x0 StartAddress 0x80002017FD390000 EndAddress 0x80002017FD66FFFF
 52.29629|dw-Setting HDAT HB Reserved Memory Range: ibm,sbe-comm RangeType 0x1 RangeId 0x0 StartAddress 0x80002017FD380000 EndAddress 0x80002017FD38FFFF
 52.29633|dw-Setting HDAT HB Reserved Memory Range: ibm,sbe-ffdc RangeType 0x1 RangeId 0x0 StartAddress 0x80002017FD370000 EndAddress 0x80002017FD37FFFF
 52.31193|dw-Setting HDAT HB Reserved Memory Range: ibm,sbe-comm RangeType 0x1 RangeId 0x8 StartAddress 0x80002017FD360000 EndAddress 0x80002017FD36FFFF
 52.31197|dw-Setting HDAT HB Reserved Memory Range: ibm,sbe-ffdc RangeType 0x1 RangeId 0x8 StartAddress 0x80002017FD350000 EndAddress 0x80002017FD35FFFF
 52.32207|dw-Setting HDAT HB Reserved Memory Range: ibm,secure-crypt-algo-code RangeType 0x3 RangeId 0x0 StartAddress 0x80002017FD340000 EndAddress 0x80002017FD34FFFF
 52.58432|dw-Setting HDAT HB Reserved Memory Range: OCC RangeType 0x5 RangeId 0x0 StartAddress 0x80002017FD2A0000 EndAddress 0x80002017FD33FFFF
 52.59616|dw-Setting HDAT HB Reserved Memory Range: WOFDATA RangeType 0x5 RangeId 0x0 StartAddress 0x80002017FD1A0000 EndAddress 0x80002017FD29FFFF
 52.61571|dw-Setting HDAT HB Reserved Memory Range: HCODE RangeType 0x5 RangeId 0x0 StartAddress 0x80002017FD130000 EndAddress 0x80002017FD19FFFF
 60.46062|htmgt|OCCs are now running in ACTIVE state
 60.45920|ISTEP 21. 2 - host_verify_hdat
 60.41865|ISTEP 21. 3 - host_start_payload
[   78.213843225,5] OPAL skiboot-v5.8-rc1-pd9d2012 starting...
[   78.213847192,7] initial console log level: memory 7, driver 5
[   78.213849301,6] CPU: P9 generation processor (max 4 threads/core)
[   78.213851318,7] CPU: Boot CPU PIR is 0x005c PVR is 0x004e1200
[   78.213853361,7] CPU: Initial max PIR set to 0x7fff
[   78.214843579,7] OPAL table: 0x300e4740 .. 0x300e4c80, branch table: 0x30002000
[   78.214846987,7] Assigning physical memory map table for nimbus
[   78.214849751,7] Parsing HDAT...
[   78.214851220,5] SPIRA-S found.
[   78.214853581,6] BMC #0: HW version 3, SW version 2, chip DD1.0
[   78.215059531,4] SENSORS: Duplicate sensor ID : 8
[   78.215219889,4] SENSORS: Duplicate sensor ID : 9
[   78.215221910,6] SP Family is openbmc
[   78.215227580,7] LPC: IOPATH chip id = 0
[   78.215228986,7] LPC: FW BAR       = f0000000
[   78.215230588,7] LPC: MEM BAR      = e0000000
[   78.215232151,7] LPC: IO BAR       = d0010000
[   78.215233704,7] LPC: Internal BAR = c0012000
[   78.215246769,7] LPC UART: base addr = 3f8 (3f8) size = 1 clk = 1843200, baud = 115200
[   78.215249666,7] LPC: BT [0, 0] sms_int: 0, bmc_int: 0
[   78.216024567,5] UART: Using UART at 0x60300d00103f8
[   78.218628595,3] I2C: v2 found, but not supported. Parsing as v1
[   78.218947473,3] I2C: v2 found, but not supported. Parsing as v1
[   78.219617773,5] P9 DD2.00 detected
[   78.219665874,5] CHIP: Chip ID 0000 type: P9N DD2.0
[   78.219720674,5] P9 DD2.00 detected
[   78.219752819,5] CHIP: Chip ID 0008 type: P9N DD2.0
[   78.220094276,5] SLW: Enabling: stop0_lite
[   78.220144633,5] SLW: Enabling: stop0
[   78.220304567,5] PLAT: Using virtual UART
[   78.220508495,7] LPC: Routing irq 9, policy: 0 (r=1)
[   78.220510383,7] LPC: SerIRQ 9 using route 0 targetted at OPAL
[   78.220816217,5] PLAT: Detected Witherspoon platform
[   78.221763692,5] PLAT: Detected BMC platform OpenBMC
[   78.262611518,5] CPU: All 176 processors called in...
[    2.382959802,5] FLASH: Found system flash:  id:0
[    2.383066797,5] BT: Interface initialized, IO 0x00e4
[    2.383109633,7] LPC: Routing irq 10, policy: 0 (r=1)
[    2.383111229,7] LPC: SerIRQ 10 using route 1 targetted at OPAL
[    4.332071763,5] NVRAM: Size is 576 KB
[    5.023519488,5] STB: secure and trusted boot not supported
[    5.023590920,5] OPAL: Using OPAL UART console
[    5.023628444,7] LPC: Routing irq 4, policy: 0 (r=1)
[    5.023629823,7] LPC: SerIRQ 4 using route 2 targetted at OPAL
[    5.024890993,5] VAS: Initialized chip 0
[    5.026004012,5] VAS: Initialized chip 8
[    5.026187784,5] Found ibm,power9-nx
[    5.026237512,3] NX0: DMA VAS MMIO BAR, 0x0006019100000000, xcfg 0x201105e
[    5.026373931,5] Found ibm,power9-nx
[    5.026408589,3] NX8: DMA VAS MMIO BAR, 0x0006219100000000, xcfg 0x201105e
[    7.253634216,3] FLASH: flash subpartition not found.
[    7.253701668,3] FLASH: Failed to parse subpart info for CAPP
[    7.254978715,3] CAPP: Error loading ucode lid. index=200d1
[    7.279121928,5] PCI: Resetting PHBs and training links...
[    8.312166432,5] PCI: Probing slots...
[    8.366225764,3] PCI: built-in device not found:  (loc: 100)
[    8.366270168,3] PCI: built-in device not found: GPU0 down (loc: 250)
[    8.366309439,3] PCI: built-in device not found: GPU0 (loc: 400)
[    8.366352213,3] PCI: built-in device not found: GPU1 down (loc: 258)
[    8.366391431,3] PCI: built-in device not found: GPU1 (loc: 500)
[    8.366446539,3] PCI: built-in device not found: GPU2 down (loc: 260)
[    8.366485668,3] PCI: built-in device not found: GPU2 (loc: 600)
[    8.366533497,3] PCI: built-in device not found:  (loc: 100)
[    8.366572308,3] PCI: built-in device not found: GPU3 down (loc: 220)
[    8.366611309,3] PCI: built-in device not found: GPU3 (loc: 300)
[    8.366653798,3] PCI: built-in device not found: GPU4 down (loc: 228)
[    8.366692867,3] PCI: built-in device not found: GPU4 (loc: 400)
[    8.366735398,3] PCI: built-in device not found: GPU5 down (loc: 268)
[    8.366776862,3] PCI: built-in device not found: GPU5 (loc: 500)
[    8.366828564,5] PHB#0000:00:00.0 [ROOT] 1014 04c1 R:00 C:060400 B:00..00 
[    8.366877228,5] PHB#0001:00:00.0 [ROOT] 1014 04c1 R:00 C:060400 B:01..01 
[    8.366928271,5] PHB#0001:01:00.0 [EP  ] 104c 8241 R:02 C:0c0330 (      usb-xhci) 
[    8.366987157,5] PHB#0002:00:00.0 [ROOT] 1014 04c1 R:00 C:060400 B:01..02 
[    8.367042130,5] PHB#0002:01:00.0 [ETOX] 1a03 1150 R:04 C:060400 B:02..02 
[    8.367107217,5] PHB#0002:02:00.0 [PCID] 1a03 2000 R:41 C:030000 (           vga) 
[    8.367160850,5] PHB#0003:00:00.0 [ROOT] 1014 04c1 R:00 C:060400 B:00..00 
[    8.367214012,5] PHB#0004:00:00.0 [ROOT] 1014 04c1 R:00 C:060400 B:01..06 
[    8.367268626,5] PHB#0004:01:00.0 [SWUP] 10b5 8725 R:ca C:060400 B:02..06 
[    8.367339107,5] PHB#0004:02:02.0 [SWDN] 10b5 8725 R:ca C:060400 B:03..03 SLOT=S000403 
[    8.367404343,5] PHB#0004:03:00.0 [LGCY] 1b4b 9235 R:11 C:010601 (          sata) LOC_CODE=S000403
[    8.367474987,5] PHB#0004:02:0a.0 [SWDN] 10b5 8725 R:ca C:060400 B:04..04 SLOT=GPU0 down 
[    8.367546110,5] PHB#0004:02:0b.0 [SWDN] 10b5 8725 R:ca C:060400 B:05..05 SLOT=GPU1 down 
[    8.367619636,5] PHB#0004:02:0c.0 [SWDN] 10b5 8725 R:ca C:060400 B:06..06 SLOT=GPU2 down 
[    8.367685818,5] PHB#0004:01:00.1 [EP  ] 10b5 87d0 R:ca C:088000 (system-peripheral) 
[    8.367743031,5] PHB#0004:01:00.2 [EP  ] 10b5 87d0 R:ca C:088000 (system-peripheral) 
[    8.367805494,5] PHB#0004:01:00.3 [EP  ] 10b5 87d0 R:ca C:088000 (system-peripheral) 
[    8.367868038,5] PHB#0004:01:00.4 [EP  ] 10b5 87d0 R:ca C:088000 (system-peripheral) 
[    8.367922863,5] PHB#0005:00:00.0 [ROOT] 1014 04c1 R:00 C:060400 B:01..01 
[    8.367978152,5] PHB#0005:01:00.0 [EP  ] 14e4 1657 R:01 C:020000 (      ethernet) 
[    8.368039040,5] PHB#0005:01:00.1 [EP  ] 14e4 1657 R:01 C:020000 (      ethernet) 
[    8.368098233,5] PHB#0006:00:00.0 [EP  ] 1014 04ea R:01 C:060400 (           pci) SLOT=GPU0 
[    8.368165098,5] PHB#0006:00:00.1 [EP  ] 1014 04ea R:01 C:060400 (           pci) SLOT=GPU0 
[    8.368234470,5] PHB#0006:00:01.0 [EP  ] 1014 04ea R:01 C:060400 (           pci) SLOT=GPU1 
[    8.368301647,5] PHB#0006:00:01.1 [EP  ] 1014 04ea R:01 C:060400 (           pci) SLOT=GPU1 
[    8.368368609,5] PHB#0006:00:02.0 [EP  ] 1014 04ea R:01 C:060400 (           pci) SLOT=GPU2 
[    8.368435740,5] PHB#0006:00:02.1 [EP  ] 1014 04ea R:01 C:060400 (           pci) SLOT=GPU2 
[    8.368502511,5] PHB#0007:00:00.0 [EP  ] 1014 04ea R:01 C:060400 (           pci) SLOT=GPU3 
[    8.368569477,5] PHB#0007:00:00.1 [EP  ] 1014 04ea R:01 C:060400 (           pci) SLOT=GPU3 
[    8.368636073,5] PHB#0007:00:01.0 [EP  ] 1014 04ea R:01 C:060400 (           pci) SLOT=GPU4 
[    8.368703073,5] PHB#0007:00:01.1 [EP  ] 1014 04ea R:01 C:060400 (           pci) SLOT=GPU4 
[    8.368770094,5] PHB#0007:00:02.0 [EP  ] 1014 04ea R:01 C:060400 (           pci) SLOT=GPU5 
[    8.368837241,5] PHB#0007:00:02.1 [EP  ] 1014 04ea R:01 C:060400 (           pci) SLOT=GPU5 
[    8.368899222,5] PHB#0030:00:00.0 [ROOT] 1014 04c1 R:00 C:060400 B:00..00 
[    8.368952947,5] PHB#0033:00:00.0 [ROOT] 1014 04c1 R:00 C:060400 B:00..00 
[    8.369006303,5] PHB#0034:00:00.0 [ROOT] 1014 04c1 R:00 C:060400 B:00..00 
[    8.369059750,5] PHB#0035:00:00.0 [ROOT] 1014 04c1 R:00 C:060400 B:01..08 
[    8.369114706,5] PHB#0035:01:00.0 [SWUP] 10b5 8725 R:ca C:060400 B:02..08 
[    8.369179323,5] PHB#0035:02:08.0 [SWDN] 10b5 8725 R:ca C:060400 B:03..07 
[    8.369235176,5] PHB#0035:02:0d.0 [SWDN] 10b5 8725 R:ca C:060400 B:08..08 SLOT=GPU5 down 
[   17.395663706,5] IPMI: Resetting boot count on successful boot
[   17.396180970,5] INIT: Waiting for kernel...
[   17.397400879,5] INIT: 64-bit LE kernel discovered
[   17.398630127,5] OCC: All Chip Rdy after 0 ms
[   17.443874619,5] INIT: Starting kernel at 0x20011000, fdt at 0x30957c40 349535 bytes)
[   18.403671012,5] OPAL: Switch to little-endian OS
[    0.000000] opal: OPAL detected !
[    0.000000] OF: reserved mem: not enough space all defined regions.
[    0.000000] OF: reserved mem: not enough space all defined regions.
[    0.000000] OF: reserved mem: not enough space all defined regions.
[    0.000000] Page sizes from device-tree:
[    0.000000] Page size shift = 12 AP=0x0
[    0.000000] Page size shift = 16 AP=0x5
[    0.000000] Page size shift = 21 AP=0x1
[    0.000000] Page size shift = 30 AP=0x2
[    0.000000] Initializing Radix MMU
[    0.000000] Partition table c0002017ff7f0000
[    0.000000] Mapped range 0x0 - 0x2000000000 with 0x40000000
[    0.000000] Mapped range 0x200000000000 - 0x200c00000000 with 0x40000000
[    0.000000] Mapped range 0x201000000000 - 0x201800000000 with 0x40000000
[    0.000000] Process table c0002017fe800000 and radix root for kernel: c000000001440000
[    0.000000] Linux version 4.12.8-openpower1 (fspbld@gfwa610.aus.stglabs.ibm.com) (gcc version 6.3.0 (Buildroot 2017.05.2-00163-g8035745) ) #2 SMP Wed Aug 30 16:46:19 CDT 2017
[    0.000000] OPAL: Found memory mapped LPC bus on chip 0
[    0.000000] Using PowerNV machine description
[    0.000000] bootconsole [udbg0] enabled
[    0.000000] CPU maps initialized for 4 threads per core
 -&gt; smp_release_cpus()
spinning_secondaries = 175
 &lt;- smp_release_cpus()
[    0.000000] -----------------------------------------------------
[    0.000000] ppc64_pft_size    = 0x0
[    0.000000] phys_mem_size     = 0x3400000000
[    0.000000] dcache_bsize      = 0x80
[    0.000000] icache_bsize      = 0x80
[    0.000000] cpu_features      = 0x075c7afd18500249
[    0.000000]   possible        = 0x5f7fffff18500649
[    0.000000]   always          = 0x0000000018100040
[    0.000000] cpu_user_features = 0xdc0065c2 0xaee00000
[    0.000000] mmu_features      = 0x3c006041
[    0.000000] firmware_features = 0x0000000010000000
[    0.000000] -----------------------------------------------------
[    0.000000] numa:   NODE_DATA [mem 0x1fffff6700-0x1fffffffff]
[    0.000000] numa:   NODE_DATA [mem 0x2017ff6e2700-0x2017ff6ebfff]
[    0.000000] numa:   NODE_DATA [mem 0x2017ff6a6700-0x2017ff6affff]
[    0.000000] numa:     NODE_DATA(250) on node 8
[    0.000000] numa:   NODE_DATA [mem 0x2017ff69ce00-0x2017ff6a66ff]
[    0.000000] numa:     NODE_DATA(251) on node 8
[    0.000000] numa:   NODE_DATA [mem 0x2017ff693500-0x2017ff69cdff]
[    0.000000] numa:     NODE_DATA(252) on node 8
[    0.000000] numa:   NODE_DATA [mem 0x2017ff689c00-0x2017ff6934ff]
[    0.000000] numa:     NODE_DATA(253) on node 8
[    0.000000] numa:   NODE_DATA [mem 0x2017ff680300-0x2017ff689bff]
[    0.000000] numa:     NODE_DATA(254) on node 8
[    0.000000] numa:   NODE_DATA [mem 0x2017ff676a00-0x2017ff6802ff]
[    0.000000] numa:     NODE_DATA(255) on node 8
[    0.000000] Initializing IODA2 PHB (/pciex@600c3c0000000)
[    0.000000] PCI host bridge /pciex@600c3c0000000 (primary) ranges:
[    0.000000]  MEM 0x000600c000000000..0x000600c07ffeffff -&gt; 0x0000000080000000 
[    0.000000]  MEM 0x0006000000000000..0x0006003fffffffff -&gt; 0x0006000000000000 (M64 #1..31)
[    0.000000]  Using M64 #31 as default window
[    0.000000]   512 (511) PE's M32: 0x80000000 [segment=0x400000]
[    0.000000]                  M64: 0x4000000000 [segment=0x20000000]
[    0.000000]   Allocated bitmap for 4088 MSIs (base IRQ 0xfe000)
[    0.000000] Initializing IODA2 PHB (/pciex@600c3c0100000)
[    0.000000] PCI host bridge /pciex@600c3c0100000  ranges:
[    0.000000]  MEM 0x000600c080000000..0x000600c0fffeffff -&gt; 0x0000000080000000 
[    0.000000]  MEM 0x0006004000000000..0x0006007fffffffff -&gt; 0x0006004000000000 (M64 #1..15)
[    0.000000]  Using M64 #15 as default window
[    0.000000]   256 (255) PE's M32: 0x80000000 [segment=0x800000]
[    0.000000]                  M64: 0x4000000000 [segment=0x40000000]
[    0.000000]   Allocated bitmap for 2040 MSIs (base IRQ 0xfd800)
[    0.000000] Initializing IODA2 PHB (/pciex@600c3c0200000)
[    0.000000] PCI host bridge /pciex@600c3c0200000  ranges:
[    0.000000]  MEM 0x000600c100000000..0x000600c17ffeffff -&gt; 0x0000000080000000 
[    0.000000]  MEM 0x0006008000000000..0x000600bfffffffff -&gt; 0x0006008000000000 (M64 #1..15)
[    0.000000]  Using M64 #15 as default window
[    0.000000]   256 (255) PE's M32: 0x80000000 [segment=0x800000]
[    0.000000]                  M64: 0x4000000000 [segment=0x40000000]
[    0.000000]   Allocated bitmap for 2040 MSIs (base IRQ 0xfd000)
[    0.000000] Initializing IODA2 PHB (/pciex@600c3c0300000)
[    0.000000] PCI host bridge /pciex@600c3c0300000  ranges:
[    0.000000]  MEM 0x000600c180000000..0x000600c1fffeffff -&gt; 0x0000000080000000 
[    0.000000]  MEM 0x0006020000000000..0x0006023fffffffff -&gt; 0x0006020000000000 (M64 #1..31)
[    0.000000]  Using M64 #31 as default window
[    0.000000]   512 (511) PE's M32: 0x80000000 [segment=0x400000]
[    0.000000]                  M64: 0x4000000000 [segment=0x20000000]
[    0.000000]   Allocated bitmap for 4088 MSIs (base IRQ 0xfc000)
[    0.000000] Initializing IODA2 PHB (/pciex@600c3c0400000)
[    0.000000] PCI host bridge /pciex@600c3c0400000  ranges:
[    0.000000]  MEM 0x000600c200000000..0x000600c27ffeffff -&gt; 0x0000000080000000 
[    0.000000]  MEM 0x0006024000000000..0x0006027fffffffff -&gt; 0x0006024000000000 (M64 #1..15)
[    0.000000]  Using M64 #15 as default window
[    0.000000]   256 (255) PE's M32: 0x80000000 [segment=0x800000]
[    0.000000]                  M64: 0x4000000000 [segment=0x40000000]
[    0.000000]   Allocated bitmap for 2040 MSIs (base IRQ 0xfb800)
[    0.000000] Initializing IODA2 PHB (/pciex@600c3c0500000)
[    0.000000] PCI host bridge /pciex@600c3c0500000  ranges:
[    0.000000]  MEM 0x000600c280000000..0x000600c2fffeffff -&gt; 0x0000000080000000 
[    0.000000]  MEM 0x0006028000000000..0x000602bfffffffff -&gt; 0x0006028000000000 (M64 #1..15)
[    0.000000]  Using M64 #15 as default window
[    0.000000]   256 (255) PE's M32: 0x80000000 [segment=0x800000]
[    0.000000]                  M64: 0x4000000000 [segment=0x40000000]
[    0.000000]   Allocated bitmap for 2040 MSIs (base IRQ 0xfb000)
[    0.000000] Initializing IODA2 PHB (/pciex@620c3c0000000)
[    0.000000] PCI host bridge /pciex@620c3c0000000  ranges:
[    0.000000]  MEM 0x000620c000000000..0x000620c07ffeffff -&gt; 0x0000000080000000 
[    0.000000]  MEM 0x0006200000000000..0x0006203fffffffff -&gt; 0x0006200000000000 (M64 #1..31)
[    0.000000]  Using M64 #31 as default window
[    0.000000]   512 (511) PE's M32: 0x80000000 [segment=0x400000]
[    0.000000]                  M64: 0x4000000000 [segment=0x20000000]
[    0.000000]   Allocated bitmap for 4088 MSIs (base IRQ 0x1fe000)
[    0.000000] Initializing IODA2 PHB (/pciex@620c3c0300000)
[    0.000000] PCI host bridge /pciex@620c3c0300000  ranges:
[    0.000000]  MEM 0x000620c180000000..0x000620c1fffeffff -&gt; 0x0000000080000000 
[    0.000000]  MEM 0x0006220000000000..0x0006223fffffffff -&gt; 0x0006220000000000 (M64 #1..31)
[    0.000000]  Using M64 #31 as default window
[    0.000000]   512 (511) PE's M32: 0x80000000 [segment=0x400000]
[    0.000000]                  M64: 0x4000000000 [segment=0x20000000]
[    0.000000]   Allocated bitmap for 4088 MSIs (base IRQ 0x1fd000)
[    0.000000] Initializing IODA2 PHB (/pciex@620c3c0400000)
[    0.000000] PCI host bridge /pciex@620c3c0400000  ranges:
[    0.000000]  MEM 0x000620c200000000..0x000620c27ffeffff -&gt; 0x0000000080000000 
[    0.000000]  MEM 0x0006224000000000..0x0006227fffffffff -&gt; 0x0006224000000000 (M64 #1..15)
[    0.000000]  Using M64 #15 as default window
[    0.000000]   256 (255) PE's M32: 0x80000000 [segment=0x800000]
[    0.000000]                  M64: 0x4000000000 [segment=0x40000000]
[    0.000000]   Allocated bitmap for 2040 MSIs (base IRQ 0x1fc800)
[    0.000000] Initializing IODA2 PHB (/pciex@620c3c0500000)
[    0.000000] PCI host bridge /pciex@620c3c0500000  ranges:
[    0.000000]  MEM 0x000620c280000000..0x000620c2fffeffff -&gt; 0x0000000080000000 
[    0.000000]  MEM 0x0006228000000000..0x000622bfffffffff -&gt; 0x0006228000000000 (M64 #1..15)
[    0.000000]  Using M64 #15 as default window
[    0.000000]   256 (255) PE's M32: 0x80000000 [segment=0x800000]
[    0.000000]                  M64: 0x4000000000 [segment=0x40000000]
[    0.000000]   Allocated bitmap for 2040 MSIs (base IRQ 0x1fc000)
[    0.000000] Initializing NPU PHB (/pciex@6030200000000)
[    0.000000] PCI host bridge /pciex@6030200000000  ranges:
[    0.000000]  MEM 0x0006030201600000..0x000603020171ffff -&gt; 0x0006030201600000 
[    0.000000]   Not support M64 window
[    0.000000]   016 (015) PE's M32: 0x130000 [segment=0x13000]
[    0.000000] Initializing NPU PHB (/pciex@6230200000000)
[    0.000000] PCI host bridge /pciex@6230200000000  ranges:
[    0.000000]  MEM 0x0006230201600000..0x000623020171ffff -&gt; 0x0006230201600000 
[    0.000000]   Not support M64 window
[    0.000000]   016 (015) PE's M32: 0x130000 [segment=0x13000]
[    0.000000] OPAL nvram setup, 589824 bytes
[    0.000000] Zone ranges:
[    0.000000]   DMA      [mem 0x0000000000000000-0x00002017ffffffff]
[    0.000000]   DMA32    empty
[    0.000000]   Normal   empty
[    0.000000] Movable zone start for each node
[    0.000000] Early memory node ranges
[    0.000000]   node   0: [mem 0x0000000000000000-0x0000001fffffffff]
[    0.000000]   node   8: [mem 0x0000200000000000-0x0000200bffffffff]
[    0.000000]   node   8: [mem 0x0000201000000000-0x00002017ffffffff]
[    0.000000] Initmem setup node 0 [mem 0x0000000000000000-0x0000001fffffffff]
[    0.000000] Initmem setup node 8 [mem 0x0000200000000000-0x00002017ffffffff]
[    0.000000] Could not find start_pfn for node 250
[    0.000000] Initmem setup node 250 [mem 0x0000000000000000-0x0000000000000000]
[    0.000000] Could not find start_pfn for node 251
[    0.000000] Initmem setup node 251 [mem 0x0000000000000000-0x0000000000000000]
[    0.000000] Could not find start_pfn for node 252
[    0.000000] Initmem setup node 252 [mem 0x0000000000000000-0x0000000000000000]
[    0.000000] Could not find start_pfn for node 253
[    0.000000] Initmem setup node 253 [mem 0x0000000000000000-0x0000000000000000]
[    0.000000] Could not find start_pfn for node 254
[    0.000000] Initmem setup node 254 [mem 0x0000000000000000-0x0000000000000000]
[    0.000000] Could not find start_pfn for node 255
[    0.000000] Initmem setup node 255 [mem 0x0000000000000000-0x0000000000000000]
[    0.000000] percpu: Embedded 2 pages/cpu @c000001ff84b0000 s67992 r0 d63080 u131072
[    0.000000] Built 8 zonelists in Node order, mobility grouping on.  Total pages: 3404960
[    0.000000] Policy zone: DMA
[    0.000000] Kernel command line: console=tty0 console=hvc0 powersave=off
[    0.000000] log_buf_len individual max cpu contribution: 4096 bytes
[    0.000000] log_buf_len total cpu_extra contributions: 716800 bytes
[    0.000000] log_buf_len min size: 1048576 bytes
[    0.000000] log_buf_len: 2097152 bytes
[    0.000000] early log buf free: 1033784(98%)
[    0.000000] PID hash table entries: 4096 (order: -1, 32768 bytes)
[    0.000000] Memory: 217623296K/218103808K available (6208K kernel code, 1088K rwdata, 1968K rodata, 11456K init, 1693K bss, 480512K reserved, 0K cma-reserved)
[    0.000000] SLUB: HWalign=128, Order=0-3, MinObjects=0, CPUs=176, Nodes=256
[    0.000000] Hierarchical RCU implementation.
[    0.000000] 	RCU debugfs-based tracing is enabled.
[    0.000000] 	RCU restricting CPUs from NR_CPUS=2048 to nr_cpu_ids=176.
[    0.000000] RCU: Adjusting geometry for rcu_fanout_leaf=16, nr_cpu_ids=176
[    0.000000] NR_IRQS:512 nr_irqs:512 16
[    0.000000] xive: VP block alloc, for max VCPUs 176 use order 8
[    0.000000] xive: Interrupt handling intialized with native backend
[    0.000000] xive: Using priority 7 for all interrupts
[    0.000000] xive: Using 64kB queues
[    0.000003] time_init: 56 bit decrementer (max: 7fffffffffffff)
[    0.000215] clocksource: timebase: mask: 0xffffffffffffffff max_cycles: 0x761537d007, max_idle_ns: 440795202126 ns
[    0.000526] clocksource: timebase mult[1f40000] shift[24] registered
[    0.000958] Console: colour dummy device 80x25
[    0.003566] console [tty0] enabled
[    0.003683] console [hvc0] enabled
[    0.003683] console [hvc0] enabled
[    0.003872] bootconsole [udbg0] disabled
[    0.003872] bootconsole [udbg0] disabled
[    0.004514] pid_max: default: 180224 minimum: 1408
[    0.005942] Security Framework initialized
[    0.009298] Dentry cache hash table entries: 33554432 (order: 12, 268435456 bytes)
[    0.098679] Inode-cache hash table entries: 16777216 (order: 11, 134217728 bytes)
[    0.163950] Mount-cache hash table entries: 524288 (order: 6, 4194304 bytes)
[    0.164151] Mountpoint-cache hash table entries: 524288 (order: 6, 4194304 bytes)
[    0.169528] EEH: PowerNV platform initialized
[    0.169639] POWER9 performance monitor hardware support registered
[    0.171015] smp: Bringing up secondary CPUs ...
[    0.645765] smp: Brought up 8 nodes, 176 CPUs
[    0.646911] numa: Node 0 CPUs: 0-87
[    0.648293] numa: Node 8 CPUs: 88-175
[    0.649725] numa: Node 250 CPUs:
[    0.651156] numa: Node 251 CPUs:
[    0.653952] numa: Node 252 CPUs:
[    0.655379] numa: Node 253 CPUs:
[    0.656806] numa: Node 254 CPUs:
[    0.658242] numa: Node 255 CPUs:
[    0.676937] devtmpfs: initialized
[    0.693290] evm: security.capability
[    0.694004] clocksource: jiffies: mask: 0xffffffff max_cycles: 0xffffffff, max_idle_ns: 19112604462750000 ns
[    0.694263] futex hash table entries: 65536 (order: 7, 8388608 bytes)
[    0.695954] NET: Registered protocol family 16
[    0.696626] cpuidle: using governor menu
[   22.089731069,3] LPC: Got LPC reset on chip 0x0 !
[   22.089734601,3] LPC[000]: Unknown LPC error Error address reg: 0x00000000
[   22.089744085,6] IPMI: dropping non severe PEL event
[   22.089876662,7] UART: IRQ functional !
[    0.756593] PCI: Probing PCI hardware
[    0.756688] PCI host bridge to bus 0000:00
[    0.756760] pci_bus 0000:00: root bus resource [mem 0x600c000000000-0x600c07ffeffff] (bus address [0x80000000-0xfffeffff])
[    0.756913] pci_bus 0000:00: root bus resource [mem 0x6000000000000-0x6003fbfffffff 64bit pref]
[    0.757043] pci_bus 0000:00: root bus resource [bus 00-ff]
[    0.757206] pci 0000:00:00.0: Disabling memory decoding and releasing memory resources.
[    0.757315] pci 0000:00:00.0: disabling bridge mem windows
[    0.757538] pci 0000:00:00.0: bridge configuration invalid ([bus 00-00]), reconfiguring
[    0.757721] pci 0000:00:00.0: PCI bridge to [bus 01-ff]
[    0.757851] PCI host bridge to bus 0001:00
[    0.757901] pci_bus 0001:00: root bus resource [mem 0x600c080000000-0x600c0fffeffff] (bus address [0x80000000-0xfffeffff])
[    0.758055] pci_bus 0001:00: root bus resource [mem 0x6004000000000-0x6007f7fffffff 64bit pref]
[    0.758180] pci_bus 0001:00: root bus resource [bus 00-ff]
[    0.758328] pci 0001:00:00.0: Disabling memory decoding and releasing memory resources.
[    0.758445] pci 0001:00:00.0: disabling bridge mem windows
[    0.758833] pci 0001:01:00.0: Disabling memory decoding and releasing memory resources.
[    0.758946] pci 0001:01:00.0: BAR2 [mem size 0x00002000 64bit]: requesting alignment to 0x10000
[    0.759241] pci 0001:00:00.0: PCI bridge to [bus 01]
[    0.759480] PCI host bridge to bus 0002:00
[    0.759538] pci_bus 0002:00: root bus resource [mem 0x600c100000000-0x600c17ffeffff] (bus address [0x80000000-0xfffeffff])
[    0.759685] pci_bus 0002:00: root bus resource [mem 0x6008000000000-0x600bf7fffffff 64bit pref]
[    0.759816] pci_bus 0002:00: root bus resource [bus 00-ff]
[    0.759970] pci 0002:00:00.0: Disabling memory decoding and releasing memory resources.
[    0.760072] pci 0002:00:00.0: disabling bridge mem windows
[    0.760445] pci 0002:01:00.0: Disabling memory decoding and releasing memory resources.
[    0.760557] pci 0002:01:00.0: disabling bridge mem windows
[    0.760800] pci 0002:00:00.0: PCI bridge to [bus 01-02]
[    0.761124] pci 0002:02:00.0: Disabling memory decoding and releasing memory resources.
[    0.761374] pci 0002:01:00.0: PCI bridge to [bus 02]
[    0.761538] PCI host bridge to bus 0003:00
[    0.761591] pci_bus 0003:00: root bus resource [mem 0x600c180000000-0x600c1fffeffff] (bus address [0x80000000-0xfffeffff])
[    0.761739] pci_bus 0003:00: root bus resource [mem 0x6020000000000-0x6023fbfffffff 64bit pref]
[    0.761874] pci_bus 0003:00: root bus resource [bus 00-ff]
[    0.762026] pci 0003:00:00.0: Disabling memory decoding and releasing memory resources.
[    0.762147] pci 0003:00:00.0: disabling bridge mem windows
[    0.762353] pci 0003:00:00.0: bridge configuration invalid ([bus 00-00]), reconfiguring
[    0.762519] pci 0003:00:00.0: PCI bridge to [bus 01-ff]
[    0.762636] PCI host bridge to bus 0004:00
[    0.762695] pci_bus 0004:00: root bus resource [mem 0x600c200000000-0x600c27ffeffff] (bus address [0x80000000-0xfffeffff])
[    0.762846] pci_bus 0004:00: root bus resource [mem 0x6024000000000-0x6027f7fffffff 64bit pref]
[    0.762974] pci_bus 0004:00: root bus resource [bus 00-ff]
[    0.763127] pci 0004:00:00.0: Disabling memory decoding and releasing memory resources.
[    0.763240] pci 0004:00:00.0: disabling bridge mem windows
[    0.763614] pci 0004:01:00.0: Disabling memory decoding and releasing memory resources.
[    0.763726] pci 0004:01:00.0: disabling bridge mem windows
[    0.764142] pci 0004:01:00.1: Disabling memory decoding and releasing memory resources.
[    0.764265] pci 0004:01:00.1: BAR0 [mem size 0x00002000]: requesting alignment to 0x10000
[    0.764649] pci 0004:01:00.2: Disabling memory decoding and releasing memory resources.
[    0.764698] random: fast init done
[    0.764818] pci 0004:01:00.2: BAR0 [mem size 0x00002000]: requesting alignment to 0x10000
[    0.765191] pci 0004:01:00.3: Disabling memory decoding and releasing memory resources.
[    0.765299] pci 0004:01:00.3: BAR0 [mem size 0x00002000]: requesting alignment to 0x10000
[    0.765676] pci 0004:01:00.4: Disabling memory decoding and releasing memory resources.
[    0.765787] pci 0004:01:00.4: BAR0 [mem size 0x00002000]: requesting alignment to 0x10000
[    0.765997] pci 0004:00:00.0: PCI bridge to [bus 01-06]
[    0.766405] pci 0004:02:02.0: Disabling memory decoding and releasing memory resources.
[    0.766472] pci 0004:02:02.0: disabling bridge mem windows
[    0.766805] pci 0004:02:0a.0: Disabling memory decoding and releasing memory resources.
[    0.766872] pci 0004:02:0a.0: disabling bridge mem windows
[    0.767201] pci 0004:02:0b.0: Disabling memory decoding and releasing memory resources.
[    0.767268] pci 0004:02:0b.0: disabling bridge mem windows
[    0.767595] pci 0004:02:0c.0: Disabling memory decoding and releasing memory resources.
[    0.767663] pci 0004:02:0c.0: disabling bridge mem windows
[    0.767884] pci 0004:01:00.0: PCI bridge to [bus 02-06]
[    0.769429] pci 0004:03:00.0: Disabling memory decoding and releasing memory resources.
[    0.769499] pci 0004:03:00.0: BAR5 [mem size 0x00000800]: requesting alignment to 0x10000
[    0.769705] pci 0004:02:02.0: PCI bridge to [bus 03]
[    0.769855] pci 0004:02:0a.0: PCI bridge to [bus 04]
[    0.769987] pci 0004:02:0b.0: PCI bridge to [bus 05]
[    0.770118] pci 0004:02:0c.0: PCI bridge to [bus 06]
[    0.770263] PCI host bridge to bus 0005:00
[    0.770300] pci_bus 0005:00: root bus resource [mem 0x600c280000000-0x600c2fffeffff] (bus address [0x80000000-0xfffeffff])
[    0.770446] pci_bus 0005:00: root bus resource [mem 0x6028000000000-0x602bf7fffffff 64bit pref]
[    0.770517] pci_bus 0005:00: root bus resource [bus 00-ff]
[    0.770635] pci 0005:00:00.0: Disabling memory decoding and releasing memory resources.
[    0.770702] pci 0005:00:00.0: disabling bridge mem windows
[    0.771062] pci 0005:01:00.0: Disabling memory decoding and releasing memory resources.
[    0.771466] pci 0005:01:00.1: Disabling memory decoding and releasing memory resources.
[    0.771718] pci 0005:00:00.0: PCI bridge to [bus 01]
[    0.771904] PCI host bridge to bus 0030:00
[    0.771943] pci_bus 0030:00: root bus resource [mem 0x620c000000000-0x620c07ffeffff] (bus address [0x80000000-0xfffeffff])
[    0.772020] pci_bus 0030:00: root bus resource [mem 0x6200000000000-0x6203fbfffffff 64bit pref]
[    0.772091] pci_bus 0030:00: root bus resource [bus 00-ff]
[    0.772227] pci 0030:00:00.0: Disabling memory decoding and releasing memory resources.
[    0.772295] pci 0030:00:00.0: disabling bridge mem windows
[    0.772489] pci 0030:00:00.0: bridge configuration invalid ([bus 00-00]), reconfiguring
[    0.772629] pci 0030:00:00.0: PCI bridge to [bus 01-ff]
[    0.772730] PCI host bridge to bus 0033:00
[    0.772767] pci_bus 0033:00: root bus resource [mem 0x620c180000000-0x620c1fffeffff] (bus address [0x80000000-0xfffeffff])
[    0.772845] pci_bus 0033:00: root bus resource [mem 0x6220000000000-0x6223fbfffffff 64bit pref]
[    0.772915] pci_bus 0033:00: root bus resource [bus 00-ff]
[    0.773052] pci 0033:00:00.0: Disabling memory decoding and releasing memory resources.
[    0.773121] pci 0033:00:00.0: disabling bridge mem windows
[    0.773315] pci 0033:00:00.0: bridge configuration invalid ([bus 00-00]), reconfiguring
[    0.773455] pci 0033:00:00.0: PCI bridge to [bus 01-ff]
[    0.773557] PCI host bridge to bus 0034:00
[    0.773594] pci_bus 0034:00: root bus resource [mem 0x620c200000000-0x620c27ffeffff] (bus address [0x80000000-0xfffeffff])
[    0.773672] pci_bus 0034:00: root bus resource [mem 0x6224000000000-0x6227f7fffffff 64bit pref]
[    0.773743] pci_bus 0034:00: root bus resource [bus 00-ff]
[    0.773881] pci 0034:00:00.0: Disabling memory decoding and releasing memory resources.
[    0.773949] pci 0034:00:00.0: disabling bridge mem windows
[    0.774145] pci 0034:00:00.0: bridge configuration invalid ([bus 00-00]), reconfiguring
[    0.774285] pci 0034:00:00.0: PCI bridge to [bus 01-ff]
[    0.774387] PCI host bridge to bus 0035:00
[    0.774424] pci_bus 0035:00: root bus resource [mem 0x620c280000000-0x620c2fffeffff] (bus address [0x80000000-0xfffeffff])
[    0.774502] pci_bus 0035:00: root bus resource [mem 0x6228000000000-0x622bf7fffffff 64bit pref]
[    0.774572] pci_bus 0035:00: root bus resource [bus 00-ff]
[    0.774709] pci 0035:00:00.0: Disabling memory decoding and releasing memory resources.
[    0.774777] pci 0035:00:00.0: disabling bridge mem windows
[    0.775179] pci 0035:01:00.0: Disabling memory decoding and releasing memory resources.
[    0.775247] pci 0035:01:00.0: disabling bridge mem windows
[    0.776364] pci 0035:00:00.0: PCI bridge to [bus 01-08]
[    0.777857] pci 0035:02:08.0: Disabling memory decoding and releasing memory resources.
[    0.780410] pci 0035:02:08.0: disabling bridge mem windows
[    0.782185] pci 0035:02:0d.0: Disabling memory decoding and releasing memory resources.
[    0.784678] pci 0035:02:0d.0: disabling bridge mem windows
[    0.789057] pci 0035:01:00.0: PCI bridge to [bus 02-08]
[    0.791113] pci 0035:02:08.0: PCI bridge to [bus 03-07]
[    0.791801] pci 0035:02:0d.0: PCI bridge to [bus 08]
[    0.793215] PCI host bridge to bus 0006:00
[    0.795889] pci_bus 0006:00: root bus resource [mem 0x6030201600000-0x603020171ffff]
[    0.798721] pci_bus 0006:00: root bus resource [bus 00-ff]
[    0.800223] pci 0006:00:00.0: Disabling memory decoding and releasing memory resources.
[    0.801765] pci 0006:00:00.1: Disabling memory decoding and releasing memory resources.
[    0.804604] pci 0006:00:01.0: Disabling memory decoding and releasing memory resources.
[    0.807413] pci 0006:00:01.1: Disabling memory decoding and releasing memory resources.
[    0.810255] pci 0006:00:02.0: Disabling memory decoding and releasing memory resources.
[    0.811717] pci 0006:00:02.1: Disabling memory decoding and releasing memory resources.
[    0.814644] PCI host bridge to bus 0007:00
[    0.815777] pci_bus 0007:00: root bus resource [mem 0x6230201600000-0x623020171ffff]
[    0.817248] pci_bus 0007:00: root bus resource [bus 00-ff]
[    0.817412] pci 0007:00:00.0: Disabling memory decoding and releasing memory resources.
[    0.817683] pci 0007:00:00.1: Disabling memory decoding and releasing memory resources.
[    0.817957] pci 0007:00:01.0: Disabling memory decoding and releasing memory resources.
[    0.818277] pci 0007:00:01.1: Disabling memory decoding and releasing memory resources.
[    0.818583] pci 0007:00:02.0: Disabling memory decoding and releasing memory resources.
[    0.818890] pci 0007:00:02.1: Disabling memory decoding and releasing memory resources.
[    0.819221] pci 0000:00     : [PE# 1fe] Secondary bus 0 associated with PE#1fe
[    0.819651] pci 0000:00:00.0: PCI bridge to [bus 01]
[    0.819760] pci 0001:00:00.0: BAR 8: assigned [mem 0x600c080000000-0x600c0807fffff]
[    0.819897] pci 0001:01:00.0: BAR 0: assigned [mem 0x600c080000000-0x600c08000ffff 64bit]
[    0.820032] pci 0001:01:00.0: BAR 2: assigned [mem 0x600c080010000-0x600c080011fff 64bit]
[    0.820157] pci 0001:00     : [PE# fe] Secondary bus 0 associated with PE#fe
[    0.820558] pci 0001:01     : [PE# fd] Secondary bus 1 associated with PE#fd
[    0.820926] pci 0001:01     : [PE# fd] Setting up 32-bit TCE table at 0..80000000
[    0.827335] IOMMU table initialized, virtual merging enabled
[    0.827387] pci 0001:01     : [PE# fd] Setting up window#0 0..7fffffff pg=1000
[    0.827483] pci 0001:01     : [PE# fd] Enabling 64-bit DMA bypass
[    0.827570] pci 0001:00:00.0: PCI bridge to [bus 01]
[    0.827635] pci 0001:00:00.0:   bridge window [mem 0x600c080000000-0x600c0ffefffff]
[    0.827810] pci 0002:00:00.0: BAR 8: assigned [mem 0x600c100000000-0x600c1017fffff]
[    0.827931] pci 0002:01:00.0: BAR 8: assigned [mem 0x600c100000000-0x600c1017fffff]
[    0.828026] pci 0002:01:00.0: BAR 7: no space for [io  size 0x1000]
[    0.828082] pci 0002:01:00.0: BAR 7: failed to assign [io  size 0x1000]
[    0.828177] pci 0002:02:00.0: BAR 0: assigned [mem 0x600c100000000-0x600c100ffffff]
[    0.828285] pci 0002:02:00.0: BAR 1: assigned [mem 0x600c101000000-0x600c10101ffff]
[    0.828425] pci 0002:02:00.0: BAR 2: no space for [io  size 0x0080]
[    0.828515] pci 0002:02:00.0: BAR 2: failed to assign [io  size 0x0080]
[    0.828579] pci 0002:00     : [PE# fe] Secondary bus 0 associated with PE#fe
[    0.828981] pci 0002:02     : [PE# fd] Secondary bus 2..2 associated with PE#fd
[    0.829362] pci 0002:02     : [PE# fd] Setting up 32-bit TCE table at 0..80000000
[    0.835620] pci 0002:02     : [PE# fd] Setting up window#0 0..7fffffff pg=1000
[    0.835710] pci 0002:02     : [PE# fd] Enabling 64-bit DMA bypass
[    0.835814] pci 0002:01:00.0: PCI bridge to [bus 02]
[    0.835885] pci 0002:01:00.0:   bridge window [mem 0x600c100000000-0x600c17fefffff]
[    0.835965] pci 0002:01     : [PE# fc] Secondary bus 1 associated with PE#fc
[    0.836373] pci 0002:00:00.0: PCI bridge to [bus 01-02]
[    0.836424] pci 0002:00:00.0:   bridge window [mem 0x600c100000000-0x600c17fefffff]
[    0.836549] pci_bus 0002:00: Some PCI device resources are unassigned, try booting with pci=realloc
[    0.836716] pci 0003:00     : [PE# 1fe] Secondary bus 0 associated with PE#1fe
[    0.837123] pci 0003:00:00.0: PCI bridge to [bus 01]
[    0.837284] pci 0004:00:00.0: BAR 9: assigned [mem 0x6024000000000-0x602407fffffff 64bit pref]
[    0.837412] pci 0004:00:00.0: BAR 8: assigned [mem 0x600c200000000-0x600c200ffffff]
[    0.837527] pci 0004:01:00.0: BAR 9: assigned [mem 0x6024000000000-0x602407fffffff 64bit pref]
[    0.837653] pci 0004:01:00.0: BAR 8: assigned [mem 0x600c200000000-0x600c2007fffff]
[    0.837766] pci 0004:01:00.0: BAR 0: assigned [mem 0x600c200800000-0x600c20083ffff]
[    0.837885] pci 0004:01:00.1: BAR 0: assigned [mem 0x600c200840000-0x600c200841fff]
[    0.837984] pci 0004:01:00.2: BAR 0: assigned [mem 0x600c200850000-0x600c200851fff]
[    0.838111] pci 0004:01:00.3: BAR 0: assigned [mem 0x600c200860000-0x600c200861fff]
[    0.838235] pci 0004:01:00.4: BAR 0: assigned [mem 0x600c200870000-0x600c200871fff]
[    0.838349] pci 0004:01:00.0: BAR 7: no space for [io  size 0x1000]
[    0.838438] pci 0004:01:00.0: BAR 7: failed to assign [io  size 0x1000]
[    0.838530] pci 0004:01:00.0: BAR 7: no space for [io  size 0x1000]
[    0.838615] pci 0004:01:00.0: BAR 7: failed to assign [io  size 0x1000]
[    0.838711] pci 0004:02:02.0: BAR 9: assigned [mem 0x6024000000000-0x602403fffffff 64bit pref]
[    0.838843] pci 0004:02:02.0: BAR 8: assigned [mem 0x600c200000000-0x600c2007fffff]
[    0.838958] pci 0004:02:02.0: BAR 7: no space for [io  size 0x1000]
[    0.839045] pci 0004:02:02.0: BAR 7: failed to assign [io  size 0x1000]
[    0.839127] pci 0004:02:02.0: BAR 7: no space for [io  size 0x1000]
[    0.839224] pci 0004:02:02.0: BAR 7: failed to assign [io  size 0x1000]
[    0.839307] pci 0004:03:00.0: BAR 5: assigned [mem 0x600c200000000-0x600c2000007ff]
[    0.839407] pci 0004:03:00.0: BAR 6: assigned [mem 0x600c200010000-0x600c20001ffff pref]
[    0.839523] pci 0004:03:00.0: BAR 4: no space for [io  size 0x0020]
[    0.839617] pci 0004:03:00.0: BAR 4: failed to assign [io  size 0x0020]
[    0.839708] pci 0004:03:00.0: BAR 0: no space for [io  size 0x0008]
[    0.839792] pci 0004:03:00.0: BAR 0: failed to assign [io  size 0x0008]
[    0.839882] pci 0004:03:00.0: BAR 2: no space for [io  size 0x0008]
[    0.839964] pci 0004:03:00.0: BAR 2: failed to assign [io  size 0x0008]
[    0.840033] pci 0004:03:00.0: BAR 1: no space for [io  size 0x0004]
[    0.840121] pci 0004:03:00.0: BAR 1: failed to assign [io  size 0x0004]
[    0.840215] pci 0004:03:00.0: BAR 3: no space for [io  size 0x0004]
[    0.840291] pci 0004:03:00.0: BAR 3: failed to assign [io  size 0x0004]
[    0.840388] pci 0004:00     : [PE# fe] Secondary bus 0 associated with PE#fe
[    0.840778] pci 0004:03     : [PE# fd] Secondary bus 3 associated with PE#fd
[    0.841147] pci 0004:03     : [PE# fd] Setting up 32-bit TCE table at 0..80000000
[    0.847407] pci 0004:03     : [PE# fd] Setting up window#0 0..7fffffff pg=1000
[    0.847490] pci 0004:03     : [PE# fd] Enabling 64-bit DMA bypass
[    0.847595] pci 0004:02:02.0: PCI bridge to [bus 03]
[    0.847669] pci 0004:02:02.0:   bridge window [mem 0x600c200000000-0x600c2007fffff]
[    0.847788] pci 0004:02:02.0:   bridge window [mem 0x6024000000000-0x602403fffffff 64bit pref]
[    0.847912] pci 0004:02:0a.0: PCI bridge to [bus 04]
[    0.848000] pci 0004:02:0b.0: PCI bridge to [bus 05]
[    0.848085] pci 0004:02:0c.0: PCI bridge to [bus 06]
[    0.848167] pci 0004:02     : [PE# fc] Secondary bus 2 associated with PE#fc
[    0.848570] pci 0004:01:00.0: PCI bridge to [bus 02-06]
[    0.848647] pci 0004:01:00.0:   bridge window [mem 0x600c200000000-0x600c27fefffff]
[    0.848763] pci 0004:01:00.0:   bridge window [mem 0x6024000000000-0x6027f7ff0ffff 64bit pref]
[    0.848900] pci 0004:01     : [PE# fb] Secondary bus 1 associated with PE#fb
[    0.849277] pci 0004:01     : [PE# fb] Setting up 32-bit TCE table at 0..80000000
[    0.855548] pci 0004:01     : [PE# fb] Setting up window#0 0..7fffffff pg=1000
[    0.855626] pci 0004:01     : [PE# fb] Enabling 64-bit DMA bypass
[    0.855728] pci 0004:00:00.0: PCI bridge to [bus 01-06]
[    0.855810] pci 0004:00:00.0:   bridge window [mem 0x600c200000000-0x600c27fefffff]
[    0.855905] pci 0004:00:00.0:   bridge window [mem 0x6024000000000-0x6027f7ff0ffff 64bit pref]
[    0.856061] pci_bus 0004:00: Some PCI device resources are unassigned, try booting with pci=realloc
[    0.856186] pci 0005:00:00.0: BAR 9: assigned [mem 0x6028000000000-0x602803fffffff 64bit pref]
[    0.856333] pci 0005:01:00.0: BAR 0: assigned [mem 0x6028000000000-0x602800000ffff 64bit pref]
[    0.856432] pci 0005:01:00.0: BAR 2: assigned [mem 0x6028000010000-0x602800001ffff 64bit pref]
[    0.856583] pci 0005:01:00.0: BAR 4: assigned [mem 0x6028000020000-0x602800002ffff 64bit pref]
[    0.856725] pci 0005:01:00.1: BAR 0: assigned [mem 0x6028000030000-0x602800003ffff 64bit pref]
[    0.856836] pci 0005:01:00.1: BAR 2: assigned [mem 0x6028000040000-0x602800004ffff 64bit pref]
[    0.856984] pci 0005:01:00.1: BAR 4: assigned [mem 0x6028000050000-0x602800005ffff 64bit pref]
[    0.857124] pci 0005:00     : [PE# fe] Secondary bus 0 associated with PE#fe
[    0.857524] pci 0005:01     : [PE# 00] Secondary bus 1 associated with PE#0
[    0.857881] pci 0005:01     : [PE# 00] Setting up 32-bit TCE table at 0..80000000
[    0.864141] pci 0005:01     : [PE# 00] Setting up window#0 0..7fffffff pg=1000
[    0.864224] pci 0005:01     : [PE# 00] Enabling 64-bit DMA bypass
[    0.864311] pci 0005:00:00.0: PCI bridge to [bus 01]
[    0.864369] pci 0005:00:00.0:   bridge window [mem 0x6028000000000-0x602bf7fffffff 64bit pref]
[    0.864528] pci 0030:00     : [PE# 1fe] Secondary bus 0 associated with PE#1fe
[    0.864958] pci 0030:00:00.0: PCI bridge to [bus 01]
[    0.865043] pci 0033:00     : [PE# 1fe] Secondary bus 0 associated with PE#1fe
[    0.865446] pci 0033:00:00.0: PCI bridge to [bus 01]
[    0.865533] pci 0034:00     : [PE# fe] Secondary bus 0 associated with PE#fe
[    0.865938] pci 0034:00:00.0: PCI bridge to [bus 01]
[    0.866071] pci 0035:00:00.0: BAR 8: assigned [mem 0x620c280000000-0x620c2807fffff]
[    0.866178] pci 0035:01:00.0: BAR 0: assigned [mem 0x620c280000000-0x620c28003ffff]
[    0.866295] pci 0035:00     : [PE# fe] Secondary bus 0 associated with PE#fe
[    0.866670] pci 0035:02:08.0: PCI bridge to [bus 03-07]
[    0.866731] pci 0035:02:0d.0: PCI bridge to [bus 08]
[    0.866821] pci 0035:02     : [PE# fd] Secondary bus 2 associated with PE#fd
[    0.867233] pci 0035:01:00.0: PCI bridge to [bus 02-08]
[    0.867311] pci 0035:01     : [PE# fc] Secondary bus 1 associated with PE#fc
[    0.867715] pci 0035:00:00.0: PCI bridge to [bus 01-08]
[    0.867764] pci 0035:00:00.0:   bridge window [mem 0x620c280000000-0x620c2ffefffff]
[    0.867890] pci 0006:00:00.0: BAR 0: assigned [mem 0x6030201600000-0x603020161ffff 64bit]
[    0.868060] pci 0006:00:00.1: BAR 0: assigned [mem 0x6030201620000-0x603020163ffff 64bit]
[    0.868214] pci 0006:00:01.0: BAR 0: assigned [mem 0x6030201640000-0x603020165ffff 64bit]
[    0.868366] pci 0006:00:01.1: BAR 0: assigned [mem 0x6030201660000-0x603020167ffff 64bit]
[    0.868523] pci 0006:00:02.0: BAR 0: assigned [mem 0x6030201680000-0x603020169ffff 64bit]
[    0.868666] pci 0006:00:02.1: BAR 0: assigned [mem 0x60302016a0000-0x60302016bffff 64bit]
[    0.868824] pci 0006:00:00.0: BAR 2: assigned [mem 0x60302016c0000-0x60302016cffff 64bit]
[    0.868972] pci 0006:00:00.1: BAR 2: assigned [mem 0x60302016d0000-0x60302016dffff 64bit]
[    0.869130] pci 0006:00:01.0: BAR 2: assigned [mem 0x60302016e0000-0x60302016effff 64bit]
[    0.869280] pci 0006:00:01.1: BAR 2: assigned [mem 0x60302016f0000-0x60302016fffff 64bit]
[    0.869433] pci 0006:00:02.0: BAR 2: assigned [mem 0x6030201700000-0x603020170ffff 64bit]
[    0.869580] pci 0006:00:02.1: BAR 2: assigned [mem 0x6030201710000-0x603020171ffff 64bit]
[    0.869735] pci 0007:00:00.0: BAR 0: assigned [mem 0x6230201600000-0x623020161ffff 64bit]
[    0.869898] pci 0007:00:00.1: BAR 0: assigned [mem 0x6230201620000-0x623020163ffff 64bit]
[    0.870050] pci 0007:00:01.0: BAR 0: assigned [mem 0x6230201640000-0x623020165ffff 64bit]
[    0.870196] pci 0007:00:01.1: BAR 0: assigned [mem 0x6230201660000-0x623020167ffff 64bit]
[    0.870350] pci 0007:00:02.0: BAR 0: assigned [mem 0x6230201680000-0x623020169ffff 64bit]
[    0.870509] pci 0007:00:02.1: BAR 0: assigned [mem 0x62302016a0000-0x62302016bffff 64bit]
[    0.870670] pci 0007:00:00.0: BAR 2: assigned [mem 0x62302016c0000-0x62302016cffff 64bit]
[    0.870819] pci 0007:00:00.1: BAR 2: assigned [mem 0x62302016d0000-0x62302016dffff 64bit]
[    0.870983] pci 0007:00:01.0: BAR 2: assigned [mem 0x62302016e0000-0x62302016effff 64bit]
[    0.871142] pci 0007:00:01.1: BAR 2: assigned [mem 0x62302016f0000-0x62302016fffff 64bit]
[    0.871304] pci 0007:00:02.0: BAR 2: assigned [mem 0x6230201700000-0x623020170ffff 64bit]
[    0.871470] pci 0007:00:02.1: BAR 2: assigned [mem 0x6230201710000-0x623020171ffff 64bit]
[    0.871642] pci 0006:00:00.0: [PE# 0d] Associated device to PE
[    0.871736] pci 0006:00:00.1: Associating to existing PE d
[    0.871808] pci 0006:00:01.0: Associating to existing PE d
[    0.871895] pci 0006:00:01.1: Associating to existing PE d
[    0.871977] pci 0006:00:02.0: Associating to existing PE d
[    0.872059] pci 0006:00:02.1: Associating to existing PE d
[    0.872172] NPU6: Found 1 MMIO ATSD registers
[    0.872177] pci 0007:00:00.0: [PE# 0d] Associated device to PE
[    0.872321] pci 0007:00:00.1: Associating to existing PE d
[    0.872409] pci 0007:00:01.0: Associating to existing PE d
[    0.872490] pci 0007:00:01.1: Associating to existing PE d
[    0.872576] pci 0007:00:02.0: Associating to existing PE d
[    0.872650] pci 0007:00:02.1: Associating to existing PE d
[    0.872728] NPU7: Found 1 MMIO ATSD registers
[    0.876411] EEH: PCI Enhanced I/O Error Handling Enabled
[    0.884717] pci 0002:02:00.0: vgaarb: VGA device added: decodes=io+mem,owns=none,locks=none
[    0.884823] pci 0002:02:00.0: vgaarb: bridge control possible
[    0.884883] vgaarb: loaded
[    0.885027] SCSI subsystem initialized
[    0.885202] usbcore: registered new interface driver usbfs
[    0.885277] usbcore: registered new interface driver hub
[    0.885845] usbcore: registered new device driver usb
[    0.885932] pps_core: LinuxPPS API ver. 1 registered
[    0.885999] pps_core: Software ver. 5.3.6 - Copyright 2005-2007 Rodolfo Giometti &lt;giometti@linux.it&gt;
[    0.886135] PTP clock support registered
[    0.886884] clocksource: Switched to clocksource timebase
[    0.889959] NET: Registered protocol family 2
[    0.890287] TCP established hash table entries: 524288 (order: 6, 4194304 bytes)
[    0.892814] TCP bind hash table entries: 65536 (order: 4, 1048576 bytes)
[    0.893246] TCP: Hash tables configured (established 524288 bind 65536)
[    0.893525] UDP hash table entries: 65536 (order: 5, 2097152 bytes)
[    0.894350] UDP-Lite hash table entries: 65536 (order: 5, 2097152 bytes)
[    0.895590] NET: Registered protocol family 1
[    0.895664] pci 0001:00:00.0: enabling device (0105 -&gt; 0107)
[    0.895755] pci 0001:01:00.0: enabling device (0140 -&gt; 0142)
[    3.234231] Initialise system trusted keyrings
[    3.234360] workingset: timestamp_bits=54 max_order=22 bucket_order=0
[    3.239308] Key type asymmetric registered
[    3.239354] Asymmetric key parser 'x509' registered
[    3.239430] Block layer SCSI generic (bsg) driver version 0.4 loaded (major 250)
[    3.239517] io scheduler noop registered
[    3.239942] io scheduler cfq registered (default)
[    3.239995] io scheduler mq-deadline registered
[    3.240046] io scheduler kyber registered
[    3.242598] ipmi message handler version 39.2
[    3.242652] ipmi device interface
[    3.242736] ipmi-powernv ibm,opal:ipmi: Unable to map irq from device tree
[    3.547553] ipmi-powernv ibm,opal:ipmi: Found new BMC (man_id: 0x000000, prod_id: 0x0000, dev_id: 0x00)
[    3.561023] hvc0: raw protocol on /ibm,opal/consoles/serial@0 (boot console)
[    3.561093] hvc0: No interrupts property, using OPAL event
[    3.561447] Serial: 8250/16550 driver, 4 ports, IRQ sharing disabled
[    3.561926] [drm] radeon kernel modesetting enabled.
[    3.571661] brd: module loaded
[    3.591276] loop: module loaded
[    3.591430] pci 0004:00:00.0: enabling device (0105 -&gt; 0107)
[    3.591495] pci 0004:01:00.0: enabling device (0545 -&gt; 0547)
[    3.591589] pci 0004:02:02.0: enabling device (0545 -&gt; 0547)
[    3.591694] ahci 0004:03:00.0: enabling device (0141 -&gt; 0143)
[    3.591913] ahci 0004:03:00.0: Using 64-bit DMA iommu bypass
[    3.602057] ahci 0004:03:00.0: AHCI 0001.0000 32 slots 4 ports 6 Gbps 0xf impl SATA mode
[    3.602140] ahci 0004:03:00.0: flags: 64bit ncq sntf led only pmp fbs pio slum part sxs 
[    3.602795] scsi host0: ahci
[    3.603004] scsi host1: ahci
[    3.603202] scsi host2: ahci
[    3.603413] scsi host3: ahci
[    3.603522] ata1: SATA max UDMA/133 abar m2048@0x600c200000000 port 0x600c200000100 irq 88
[    3.603641] ata2: SATA max UDMA/133 abar m2048@0x600c200000000 port 0x600c200000180 irq 88
[    3.603759] ata3: SATA max UDMA/133 abar m2048@0x600c200000000 port 0x600c200000200 irq 88
[    3.603869] ata4: SATA max UDMA/133 abar m2048@0x600c200000000 port 0x600c200000280 irq 88
[    3.604110] libphy: Fixed MDIO Bus: probed
[    3.604174] tg3.c:v3.137 (May 11, 2014)
[    3.604236] pci 0005:00:00.0: enabling device (0105 -&gt; 0107)
[    3.604326] tg3 0005:01:00.0: enabling device (0140 -&gt; 0142)
[    3.642066] tg3 0005:01:00.0: Using 64-bit DMA iommu bypass
[    3.642470] tg3 0005:01:00.0 eth0: Tigon3 [partno(BCM95719) rev 5719001] (PCI Express) MAC address 70:e2:84:14:23:e2
[    3.642550] tg3 0005:01:00.0 eth0: attached PHY is 5719C (10/100/1000Base-T Ethernet) (WireSpeed[1], EEE[1])
[    3.642628] tg3 0005:01:00.0 eth0: RXcsums[1] LinkChgREG[0] MIirq[0] ASF[1] TSOcap[1]
[    3.642692] tg3 0005:01:00.0 eth0: dma_rwctrl[00000000] dma_mask[64-bit]
[    3.642816] tg3 0005:01:00.1: enabling device (0140 -&gt; 0142)
[    3.673544] tg3 0005:01:00.1: Using 64-bit DMA iommu bypass
[    3.673912] tg3 0005:01:00.1 eth1: Tigon3 [partno(BCM95719) rev 5719001] (PCI Express) MAC address 70:e2:84:14:23:e3
[    3.674002] tg3 0005:01:00.1 eth1: attached PHY is 5719C (10/100/1000Base-T Ethernet) (WireSpeed[1], EEE[1])
[    3.674144] tg3 0005:01:00.1 eth1: RXcsums[1] LinkChgREG[0] MIirq[0] ASF[1] TSOcap[1]
[    3.674265] tg3 0005:01:00.1 eth1: dma_rwctrl[00000000] dma_mask[64-bit]
[    3.674527] ehci_hcd: USB 2.0 'Enhanced' Host Controller (EHCI) Driver
[    3.674582] ehci-pci: EHCI PCI platform driver
[    3.674670] ohci_hcd: USB 1.1 'Open' Host Controller (OHCI) Driver
[    3.674787] ohci-pci: OHCI PCI platform driver
[    3.674928] xhci_hcd 0001:01:00.0: xHCI Host Controller
[    3.675024] xhci_hcd 0001:01:00.0: new USB bus registered, assigned bus number 1
[    3.675204] xhci_hcd 0001:01:00.0: Using 64-bit DMA iommu bypass
[    3.675329] xhci_hcd 0001:01:00.0: hcc params 0x0270f06d hci version 0x96 quirks 0x04000000
[    3.676123] hub 1-0:1.0: USB hub found
[    3.676174] hub 1-0:1.0: 4 ports detected
[    3.676348] xhci_hcd 0001:01:00.0: xHCI Host Controller
[    3.676461] xhci_hcd 0001:01:00.0: new USB bus registered, assigned bus number 2
[    3.676606] usb usb2: We don't know the algorithms for LPM for this host, disabling LPM.
[    3.676922] hub 2-0:1.0: USB hub found
[    3.676984] hub 2-0:1.0: 4 ports detected
[    3.677214] usbcore: registered new interface driver usb-storage
[    3.736837] rtc-opal opal-rtc: rtc core: registered rtc-opal as rtc0
[    3.736912] i2c /dev entries driver
[    3.737250] at24 0-0050: 16384 byte 24c128 EEPROM, writable, 1 bytes/write
[    3.737572] at24 1-0054: 16384 byte 24c128 EEPROM, writable, 1 bytes/write
[    3.737891] at24 2-0050: 16384 byte 24c128 EEPROM, writable, 1 bytes/write
[    3.738202] at24 3-0054: 16384 byte 24c128 EEPROM, writable, 1 bytes/write
[    3.738528] at24 4-0050: 16384 byte 24c128 EEPROM, writable, 1 bytes/write
[   25.123852641,3] I2C: Request timeout !
[   25.123913690,3] I2C: Chip 00000000 Eng. 3 Port 0--
 xscom_base=0x00000000000a3000	state=4	bytes_sent=0
[   25.124004018,3] I2C: Request info--
 addr=0x0052	offset_bytes=2	offset=0	len=1
[   25.124066149,3] I2C:  start_time=0000000301b569ca end_time=0000000302525606 (duration=00000000009cec3c)
[   25.124162124,3] I2C: Register dump--
    cmd:0x1000000001000000	mode:0x004d000801000000	stat:0x01018c0001080000
  estat:0x0800dd1801000000	intm:0x0000ff8001000000	intc:0x0000012a01000000
[    3.927999] ata3: SATA link down (SStatus 0 SControl 300)
[    3.928084] ata4: SATA link down (SStatus 0 SControl 300)
[   25.226444974,3] I2C: Request timeout !
[   25.226509919,3] I2C: Chip 00000000 Eng. 3 Port 0--
 xscom_base=0x00000000000a3000	state=4	bytes_sent=0
[   25.226607416,3] I2C: Request info--
 addr=0x0053	offset_bytes=2	offset=0	len=1
[   25.226677094,3] I2C:  start_time=0000000307d2dac3 end_time=00000003086fc5c8 (duration=00000000009ceb05)
[   25.226780335,3] I2C: Register dump--
    cmd:0x1000000001000000	mode:0x004d000801000000	stat:0x01018c0001080000
  estat:0x0800dd1801000000	intm:0x0000ff8001000000	intc:0x0000012a01000000
[    4.096780] ata1: SATA link up 6.0 Gbps (SStatus 133 SControl 300)
[    4.096866] ata2: SATA link up 6.0 Gbps (SStatus 133 SControl 300)
[    4.097833] ata1.00: ATA-10: ST1000NX0313         00LY266 00LY265IBM, BE35, max UDMA/133
[    4.097919] ata1.00: 1953525168 sectors, multi 0: LBA48 NCQ (depth 31/32), AA
[    4.098017] ata2.00: ATA-10: ST1000NX0313         00LY266 00LY265IBM, BE35, max UDMA/133
[    4.098143] ata2.00: 1953525168 sectors, multi 0: LBA48 NCQ (depth 31/32), AA
[    4.098744] ata1.00: configured for UDMA/133
[    4.118595] ata2.00: configured for UDMA/133
[    4.118927] scsi 0:0:0:0: Direct-Access     ATA      ST1000NX0313     BE35 PQ: 0 ANSI: 5
[    4.119854] scsi 1:0:0:0: Direct-Access     ATA      ST1000NX0313     BE35 PQ: 0 ANSI: 5
[   25.335196641,3] I2C: Request timeout !
[   25.335687967,3] I2C: Chip 00000000 Eng. 3 Port 0--
 xscom_base=0x00000000000a3000	state=4	bytes_sent=0
[   25.338554481,3] I2C: Request info--
 addr=0x0055	offset_bytes=2	offset=0	len=1
[   25.340692196,3] I2C:  start_time=000000030e4e4798 end_time=000000030eeb30f4 (duration=00000000009ce95c)
[   25.343554201,3] I2C: Register dump--
    cmd:0x1000000001000000	mode:0x004d000801000000	stat:0x01018c0001080000
  estat:0x0800dd1801000000	intm:0x0000ff8001000000	intc:0x0000012a01000000
[   25.454207422,3] I2C: Request timeout !
[   25.454269808,3] I2C: Chip 00000000 Eng. 3 Port 1--
 xscom_base=0x00000000000a3000	state=4	bytes_sent=0
[   25.454354840,3] I2C: Request info--
 addr=0x0052	offset_bytes=2	offset=0	len=1
[   25.454414468,3] I2C:  start_time=0000000315663e6f end_time=00000003160326cd (duration=00000000009ce85e)
[   25.454514943,3] I2C: Register dump--
    cmd:0x1000000001000000	mode:0x004d040801000000	stat:0x01018c0001080000
  estat:0x0800dd1801000000	intm:0x0000ff8001000000	intc:0x0000012a01000000
[   26.046855034,3] I2C: Request timeout !
[   26.047957537,3] I2C: Chip 00000000 Eng. 3 Port 1--
 xscom_base=0x00000000000a3000	state=4	bytes_sent=0
[   26.051605300,3] I2C: Request info--
 addr=0x0053	offset_bytes=2	offset=0	len=1
[   26.054037195,3] I2C:  start_time=000000031ba30abf end_time=000000031c3ff2a9 (duration=00000000009ce7ea)
[   26.054150145,3] I2C: Register dump--
    cmd:0x1000000001000000	mode:0x004d040801000000	stat:0x01018c0001080000
  estat:0x0800dd1801000000	intm:0x0000ff8001000000	intc:0x0000012a01000000
[   26.159710707,3] I2C: Request timeout !
[   26.160099502,3] I2C: Chip 00000000 Eng. 3 Port 1--
 xscom_base=0x00000000000a3000	state=4	bytes_sent=0
[   26.162556750,3] I2C: Request info--
 addr=0x0054	offset_bytes=2	offset=0	len=1
[   26.163802257,3] I2C:  start_time=00000003225d14dd end_time=0000000322f9fd16 (duration=00000000009ce839)
[   26.168634328,3] I2C: Register dump--
    cmd:0x1000000001000000	mode:0x004d040801000000	stat:0x01018c0001080000
  estat:0x0800dd1801000000	intm:0x0000ff8001000000	intc:0x0000012a01000000
[   26.272566204,3] I2C: Request timeout !
[   26.273005193,3] I2C: Chip 00000000 Eng. 3 Port 1--
 xscom_base=0x00000000000a3000	state=4	bytes_sent=0
[   26.276657839,3] I2C: Request info--
 addr=0x0055	offset_bytes=2	offset=0	len=1
[   26.279102010,3] I2C:  start_time=0000000329171ec6 end_time=0000000329b406e1 (duration=00000000009ce81b)
[   26.282753171,3] I2C: Register dump--
    cmd:0x1000000001000000	mode:0x004d040801000000	stat:0x01018c0001080000
  estat:0x0800dd1801000000	intm:0x0000ff8001000000	intc:0x0000012a01000000
[    5.278592] at24 7-0050: 16384 byte 24c128 EEPROM, writable, 1 bytes/write
[    5.278905] at24 8-0054: 16384 byte 24c128 EEPROM, writable, 1 bytes/write
[    5.279236] at24 9-0050: 16384 byte 24c128 EEPROM, writable, 1 bytes/write
[    5.279559] at24 10-0054: 16384 byte 24c128 EEPROM, writable, 1 bytes/write
[   26.402922403,3] I2C: Request timeout !
[   26.402990039,3] I2C: Chip 00000008 Eng. 3 Port 0--
 xscom_base=0x00000000000a3000	state=4	bytes_sent=0
[   26.403068807,3] I2C: Request info--
 addr=0x0053	offset_bytes=2	offset=0	len=1
[   26.403123450,3] I2C:  start_time=0000000330dc2fc8 end_time=00000003317919f6 (duration=00000000009cea2e)
[   26.403210487,3] I2C: Register dump--
    cmd:0x1000000001000000	mode:0x004d000801000000	stat:0x01018c0001080000
  estat:0x0800dd1801000000	intm:0x0000ff8001000000	intc:0x0000012a01000000
[   27.016084352,3] I2C: Request timeout !
[   27.016148961,3] I2C: Chip 00000008 Eng. 3 Port 0--
 xscom_base=0x00000000000a3000	state=4	bytes_sent=0
[   27.016250387,3] I2C: Request info--
 addr=0x0054	offset_bytes=2	offset=0	len=1
[   27.016309642,3] I2C:  start_time=0000000338520542 end_time=0000000338eeec8f (duration=00000000009ce74d)
[   27.016408866,3] I2C: Register dump--
    cmd:0x1000000001000000	mode:0x004d000801000000	stat:0x01018c0001080000
  estat:0x0800dd1801000000	intm:0x0000ff8001000000	intc:0x0000012a01000000
[   27.120734855,3] I2C: Request timeout !
[   27.121241706,3] I2C: Chip 00000008 Eng. 3 Port 0--
 xscom_base=0x00000000000a3000	state=4	bytes_sent=0
[   27.122006007,3] I2C: Request info--
 addr=0x0055	offset_bytes=2	offset=0	len=1
[   27.122768973,3] I2C:  start_time=000000033e8edb4d end_time=000000033f2bc385 (duration=00000000009ce838)
[   27.122865645,3] I2C: Register dump--
    cmd:0x1000000001000000	mode:0x004d000801000000	stat:0x01018c0001080000
  estat:0x0800dd1801000000	intm:0x0000ff8001000000	intc:0x0000012a01000000
[   27.241795467,3] I2C: Request timeout !
[   27.241847259,3] I2C: Chip 00000008 Eng. 3 Port 1--
 xscom_base=0x00000000000a3000	state=4	bytes_sent=0
[   27.241943404,3] I2C: Request info--
 addr=0x0053	offset_bytes=2	offset=0	len=1
[   27.242012869,3] I2C:  start_time=0000000345c618e6 end_time=000000034663008d (duration=00000000009ce7a7)
[   27.242122409,3] I2C: Register dump--
    cmd:0x1000000001000000	mode:0x004d040801000000	stat:0x01018c0001080000
  estat:0x0800dd1801000000	intm:0x0000ff8001000000	intc:0x0000012a01000000
[   27.354653701,3] I2C: Request timeout !
[   27.355044992,3] I2C: Chip 00000008 Eng. 3 Port 1--
 xscom_base=0x00000000000a3000	state=4	bytes_sent=0
[   27.358608745,3] I2C: Request info--
 addr=0x0054	offset_bytes=2	offset=0	len=1
[   27.360758481,3] I2C:  start_time=000000034c802cf6 end_time=000000034d1d150b (duration=00000000009ce815)
[   27.365025192,3] I2C: Register dump--
    cmd:0x1000000001000000	mode:0x004d040801000000	stat:0x01018c0001080000
  estat:0x0800dd1801000000	intm:0x0000ff8001000000	intc:0x0000012a01000000
[   27.477768655,3] I2C: Request timeout !
[   27.477823119,3] I2C: Chip 00000008 Eng. 3 Port 1--
 xscom_base=0x00000000000a3000	state=4	bytes_sent=0
[   27.477931799,3] I2C: Request info--
 addr=0x0055	offset_bytes=2	offset=0	len=1
[   27.478000808,3] I2C:  start_time=0000000353d6c31d end_time=000000035473aad4 (duration=00000000009ce7b7)
[   27.478102546,3] I2C: Register dump--
    cmd:0x1000000001000000	mode:0x004d040801000000	stat:0x01018c0001080000
  estat:0x0800dd1801000000	intm:0x0000ff8001000000	intc:0x0000012a01000000
[    6.640073] powernv-cpufreq: cpufreq pstate min 101 nominal 50 max 0
[    6.640135] powernv-cpufreq: Workload Optimized Frequency is enabled in the platform
[    6.649645] usbcore: registered new interface driver usbhid
[    6.649701] usbhid: USB HID core driver
[    6.650072] ipip: IPv4 and MPLS over IPv4 tunneling driver
[    6.650370] NET: Registered protocol family 17
[    6.650427] Key type dns_resolver registered
[    6.650703] registered taskstats version 1
[    6.650739] Loading compiled-in X.509 certificates
[    6.658126] Loaded X.509 cert 'Build time autogenerated kernel key: 69b7bd2878a4bab90574770d0a2ffddecb40bd94'
[    6.663527] Key type encrypted registered
[    6.663581] ima: No TPM chip found, activating TPM-bypass! (rc=-19)
[    6.663713] evm: HMAC attrs: 0x1
[    6.966923] rtc-opal opal-rtc: setting system clock to 2017-10-20 13:03:57 UTC (1508504637)
[    6.969226] Freeing unused kernel memory: 11456K
[    6.969282] This architecture does not have kernel memory protection.
[    6.988587] udevd[2943]: starting version 3.2.2
[    6.993256] udevd[2944]: starting eudev-3.2.2
[    7.041880] pci 0002:00:00.0: enabling device (0105 -&gt; 0107)
[    7.041961] pci 0002:01:00.0: enabling device (0145 -&gt; 0147)
[    7.042020] ast 0002:02:00.0: enabling device (0140 -&gt; 0142)
[    7.042184] [drm] platform has no IO space, trying MMIO
[    7.042228] [drm] VGA not enabled on entry, requesting chip POST
[    7.042289] [drm] Using P2A bridge for configuration
[    7.042333] [drm] AST 2500 detected
[    7.042369] [drm] Analog VGA only
[    7.042443] [drm] dram MCLK=800 Mhz type=7 bus_width=16 size=01000000
[    7.042617] [TTM] Zone  kernel: Available graphics memory: 108817376 kiB
[    7.042697] [TTM] Zone   dma32: Available graphics memory: 2097152 kiB
[    7.042811] [TTM] Initializing pool allocator
[    7.045204] tg3 0005:01:00.1 enP5p1s0f1: renamed from eth1
[    7.048381] scsi 0:0:0:0: Attached scsi generic sg0 type 0
[    7.048513] scsi 1:0:0:0: Attached scsi generic sg1 type 0

(B)0[1;24r[m[?7h[?1h=[H[J[H[J Petitboot (v1.5.1-p848cad7)[1B [0mqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq[2B  [0mSystem information[1B  System configuration[1B  System status log[1B  Language[1B  Rescan devices[1B  Retrieve config from URL[1B *[0;7mExit to shell           [12B[25D[0mqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq[1B [0mEnter=accept, e=edit, n=new, x=exit, l=language, g=log, h=help[1B Welcome to Petitboot[J[1;47H0000000000000000 0000000000000000[23B [3;21r[3;1HMM[1;24r[3;3H[Disk: sda2 / 728d2189-0c67-4551-8857-40e2845ba17b][1B[49DUbuntu[12;27H[0;7m                           [12B[52D[m[4;21r[4;1HM[1;24r[4;5HUbuntu, with Linux 4.10.0-26-generic[20B [4;21r[4;1HM[1;24r[4;5HUbuntu, with Linux 4.10.0-26-generic (recovery mode)[14;54H[0;7m   [10B[55D[m[enP5p1s0f0] Configuring with DHCP</msg>
<status status="PASS" endtime="20171020 13:12:27.255" starttime="20171020 13:12:27.249"></status>
</kw>
<status status="PASS" endtime="20171020 13:12:27.255" starttime="20171020 13:11:43.662"></status>
</kw>
<doc>Power off and on.</doc>
<tags>
<tag>chassisboot</tag>
<tag>Power_On_Test</tag>
</tags>
<status status="FAIL" critical="yes" endtime="20171020 13:12:27.256" starttime="20171020 13:01:34.634">Keyword 'Is Host Running' failed after retrying for 10 minutes. The last error was: xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.BootComplete != xyz.openbmc_project.State.OperatingSystem.Status.OSStatus.Inactive</status>
</test>
<doc>Test power on for HW CI.</doc>
<status status="FAIL" endtime="20171020 13:12:27.261" starttime="20171020 13:01:34.569"></status>
</suite>
<doc>Set metadata for test suite.</doc>
<status status="FAIL" endtime="20171020 13:12:27.266" starttime="20171020 13:01:25.748"></status>
</suite>
<statistics>
<total>
<stat fail="1" pass="1">Critical Tests</stat>
<stat fail="1" pass="1">All Tests</stat>
</total>
<tag>
<stat fail="1" pass="0">chassisboot</stat>
<stat fail="1" pass="0">Power_On_Test</stat>
<stat fail="0" pass="1">Test_SSL_Connection</stat>
</tag>
<suite>
<stat id="s1" fail="1" name="Tests" pass="1">Tests</stat>
<stat id="s1-s1" fail="0" name="Security" pass="1">Tests.Security</stat>
<stat id="s1-s1-s1" fail="0" name="Test Ssl" pass="1">Tests.Security.Test Ssl</stat>
<stat id="s1-s2" fail="1" name="Test Basic Poweron" pass="0">Tests.Test Basic Poweron</stat>
</suite>
</statistics>
<errors>
<msg level="WARN" timestamp="20171020 13:01:50.521">Retrying (Retry(total=2, connect=None, read=None, redirect=None, status=None)) after connection broken by 'ReadTimeoutError("HTTPSConnectionPool(host='9.3.86.161', port=443): Read timed out. (read timeout=10.0)",)': /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
</errors>
</robot>
