<?xml version="1.0" encoding="UTF-8"?>
<robot generated="20161215 19:51:15.615" generator="Robot 3.0 (Python 2.7.12 on linux2)">
<suite source="/tmp/root/17453/obmc-robot/tests" name="Tests" id="s1">
<suite source="/tmp/root/17453/obmc-robot/tests/security" name="Security" id="s1-s1">
<suite source="/tmp/root/17453/obmc-robot/tests/security/test_ssl.robot" name="Test Ssl" id="s1-s1-s1">
<test name="Test SSL Connection" id="s1-s1-s1-t1">
<kw library="rest_client" name="Initialize OpenBMC">
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161215 19:51:16.240">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20161215 19:51:16.240" status="PASS" endtime="20161215 19:51:16.240"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161215 19:51:16.241">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161215 19:51:16.241" status="PASS" endtime="20161215 19:51:16.241"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161215 19:51:16.242">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20161215 19:51:16.241" status="PASS" endtime="20161215 19:51:16.242"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161215 19:51:16.242">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20161215 19:51:16.242" status="PASS" endtime="20161215 19:51:16.242"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161215 19:51:16.957">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161215 19:51:16.957">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161215 19:51:16.242" status="PASS" endtime="20161215 19:51:16.957"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161215 19:51:16.958">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161215 19:51:16.958" status="PASS" endtime="20161215 19:51:16.958"></status>
</kw>
<status starttime="20161215 19:51:16.239" status="PASS" endtime="20161215 19:51:16.959"></status>
</kw>
<kw library="openbmc_ffdc" type="teardown" name="FFDC On Test Case Fail">
<doc>Generic FFDC entry point. Place holder to hook in</doc>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${TEST_STATUS}' == 'FAIL'</arg>
<arg>FFDC</arg>
</arguments>
<status starttime="20161215 19:51:16.960" status="PASS" endtime="20161215 19:51:16.964"></status>
</kw>
<kw library="openbmc_ffdc_methods" name="Log Test Case Status">
<doc>Test case execution result history.</doc>
<kw library="OperatingSystem" name="Create Directory">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>${FFDC_LOG_PATH}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20161215 19:51:16.966">Created directory '&lt;a href="file:///tmp/root/17453/obmc-robot/logs"&gt;/tmp/root/17453/obmc-robot/logs&lt;/a&gt;'.</msg>
<status starttime="20161215 19:51:16.965" status="PASS" endtime="20161215 19:51:16.966"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>OperatingSystem.File Should Exist</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<assign>
<var>${exist}</var>
</assign>
<kw library="OperatingSystem" name="File Should Exist">
<doc>Fails unless the given ``path`` points to an existing file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
</arguments>
<msg level="FAIL" timestamp="20161215 19:51:16.968">File '/tmp/root/17453/obmc-robot/logs/test_history.txt' does not exist.</msg>
<status starttime="20161215 19:51:16.967" status="FAIL" endtime="20161215 19:51:16.968"></status>
</kw>
<msg level="INFO" timestamp="20161215 19:51:16.968">${exist} = False</msg>
<status starttime="20161215 19:51:16.967" status="PASS" endtime="20161215 19:51:16.968"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${exist}' == '${False}'</arg>
<arg>Create File</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<kw library="OperatingSystem" name="Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20161215 19:51:16.972">Created file '&lt;a href="file:///tmp/root/17453/obmc-robot/logs/test_history.txt"&gt;/tmp/root/17453/obmc-robot/logs/test_history.txt&lt;/a&gt;'.</msg>
<status starttime="20161215 19:51:16.972" status="PASS" endtime="20161215 19:51:16.972"></status>
</kw>
<status starttime="20161215 19:51:16.968" status="PASS" endtime="20161215 19:51:16.972"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Get Current Time Stamp">
<doc>Get the current time stamp data</doc>
<assign>
<var>${cur_time}</var>
</assign>
<kw library="DateTime" name="Get Current Date">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20161215 19:51:16.973">${cur_time} = 2016-12-15 19:51:16:972786</msg>
<status starttime="20161215 19:51:16.973" status="PASS" endtime="20161215 19:51:16.973"></status>
</kw>
<kw library="openbmc_ffdc_list" name="Get Strip String">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20161215 19:51:16.973">${cur_time} = 20161215195116972786</msg>
<status starttime="20161215 19:51:16.973" status="PASS" endtime="20161215 19:51:16.974"></status>
</kw>
<msg level="INFO" timestamp="20161215 19:51:16.974">${cur_time} = 20161215195116972786</msg>
<status starttime="20161215 19:51:16.972" status="PASS" endtime="20161215 19:51:16.974"></status>
</kw>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
<arg>${cur_time}:${SUITE_NAME}:${TEST_NAME}:${TEST_STATUS}${\n}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20161215 19:51:16.974">Appended to file '&lt;a href="file:///tmp/root/17453/obmc-robot/logs/test_history.txt"&gt;/tmp/root/17453/obmc-robot/logs/test_history.txt&lt;/a&gt;'.</msg>
<status starttime="20161215 19:51:16.974" status="PASS" endtime="20161215 19:51:16.974"></status>
</kw>
<status starttime="20161215 19:51:16.965" status="PASS" endtime="20161215 19:51:16.975"></status>
</kw>
<status starttime="20161215 19:51:16.959" status="PASS" endtime="20161215 19:51:16.975"></status>
</kw>
<doc>This testcase is for testing the SSL connection to the
OpenBMC machine.</doc>
<tags>
<tag>Test_SSL_Connection</tag>
</tags>
<status critical="yes" starttime="20161215 19:51:16.239" status="PASS" endtime="20161215 19:51:16.975"></status>
</test>
<kw library="RequestsLibrary.RequestsKeywords" type="teardown" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20161215 19:51:16.975">Delete All Sessions</msg>
<status starttime="20161215 19:51:16.975" status="PASS" endtime="20161215 19:51:16.976"></status>
</kw>
<doc>This testsuite is for testing SSL connection to OpenBMC</doc>
<status starttime="20161215 19:51:15.643" status="PASS" endtime="20161215 19:51:16.976"></status>
</suite>
<status starttime="20161215 19:51:15.641" status="PASS" endtime="20161215 19:51:16.977"></status>
</suite>
<suite source="/tmp/root/17453/obmc-robot/tests/test_association.robot" name="Test Association" id="s1-s2">
<kw type="setup" name="Suite Initialization Setup">
<kw library="connection_client" name="Open Connection And Log In">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw library="Collections" name="Dictionary Should Contain Key">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg level="FAIL" timestamp="20161215 19:51:17.010">Dictionary does not contain key 'host'.</msg>
<status starttime="20161215 19:51:17.010" status="FAIL" endtime="20161215 19:51:17.011"></status>
</kw>
<msg level="INFO" timestamp="20161215 19:51:17.011">${has_host} = False</msg>
<status starttime="20161215 19:51:17.010" status="PASS" endtime="20161215 19:51:17.011"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status starttime="20161215 19:51:17.015" status="PASS" endtime="20161215 19:51:17.015"></status>
</kw>
<status starttime="20161215 19:51:17.011" status="PASS" endtime="20161215 19:51:17.015"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<kw library="connection_client" name="User input SSH and HTTPs Ports">
<doc>Update the global SSH and HTTPs port variable for QEMU</doc>
<kw library="BuiltIn" name="Convert To Integer">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${SSH_PORT}</arg>
</arguments>
<assign>
<var>${port_num}</var>
</assign>
<msg level="INFO" timestamp="20161215 19:51:17.019">${port_num} = 22</msg>
<status starttime="20161215 19:51:17.019" status="PASS" endtime="20161215 19:51:17.019"></status>
</kw>
<kw library="BuiltIn" name="Replace Variables">
<doc>Replaces variables in the given text with their current values.</doc>
<arguments>
<arg>${port_num}</arg>
</arguments>
<assign>
<var>${SSH_PORT}</var>
</assign>
<msg level="INFO" timestamp="20161215 19:51:17.019">${SSH_PORT} = 22</msg>
<status starttime="20161215 19:51:17.019" status="PASS" endtime="20161215 19:51:17.019"></status>
</kw>
<kw library="BuiltIn" name="Convert To Integer">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${HTTPS_PORT}</arg>
</arguments>
<assign>
<var>${https_num}</var>
</assign>
<msg level="INFO" timestamp="20161215 19:51:17.020">${https_num} = 443</msg>
<status starttime="20161215 19:51:17.020" status="PASS" endtime="20161215 19:51:17.020"></status>
</kw>
<kw library="BuiltIn" name="Set Global Variable">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${AUTH_URI}</arg>
<arg>https://${OPENBMC_HOST}:${https_num}</arg>
</arguments>
<msg level="INFO" timestamp="20161215 19:51:17.021">${AUTH_URI} = https://9.3.23.30:443</msg>
<status starttime="20161215 19:51:17.020" status="PASS" endtime="20161215 19:51:17.021"></status>
</kw>
<status starttime="20161215 19:51:17.018" status="PASS" endtime="20161215 19:51:17.021"></status>
</kw>
<status starttime="20161215 19:51:17.015" status="PASS" endtime="20161215 19:51:17.021"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw library="Collections" name="Dictionary Should Contain Key">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg level="FAIL" timestamp="20161215 19:51:17.022">Dictionary does not contain key 'port'.</msg>
<status starttime="20161215 19:51:17.021" status="FAIL" endtime="20161215 19:51:17.022"></status>
</kw>
<msg level="INFO" timestamp="20161215 19:51:17.022">${has_port} = False</msg>
<status starttime="20161215 19:51:17.021" status="PASS" endtime="20161215 19:51:17.022"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keywords">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
</arguments>
<status starttime="20161215 19:51:17.026" status="PASS" endtime="20161215 19:51:17.027"></status>
</kw>
<kw library="SSHLibrary" name="Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status starttime="20161215 19:51:17.027" status="PASS" endtime="20161215 19:51:17.027"></status>
</kw>
<status starttime="20161215 19:51:17.026" status="PASS" endtime="20161215 19:51:17.027"></status>
</kw>
<status starttime="20161215 19:51:17.022" status="PASS" endtime="20161215 19:51:17.027"></status>
</kw>
<kw library="SSHLibrary" name="Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg level="INFO" timestamp="20161215 19:51:17.028">Logging into '9.3.23.30:22' as 'root'.</msg>
<msg level="INFO" timestamp="20161215 19:51:19.568">Read output: 7[r[999;999H[6n</msg>
<status starttime="20161215 19:51:17.027" status="PASS" endtime="20161215 19:51:19.568"></status>
</kw>
<status starttime="20161215 19:51:17.009" status="PASS" endtime="20161215 19:51:19.569"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Continue On Failure">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Clear all logs</arg>
</arguments>
<kw name="Clear all logs">
<kw library="rest_client" name="OpenBMC Post Request">
<arguments>
<arg>${EVENT_RECORD}action/clear</arg>
<arg>data=${NIL}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161215 19:51:19.572">${base_uri} = /org/openbmc/records/events/action/clear</msg>
<status starttime="20161215 19:51:19.572" status="PASS" endtime="20161215 19:51:19.572"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161215 19:51:19.573">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161215 19:51:19.573" status="PASS" endtime="20161215 19:51:19.573"></status>
</kw>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status starttime="20161215 19:51:19.574" status="PASS" endtime="20161215 19:51:19.575"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161215 19:51:19.582">${msg} = URI:https://9.3.23.30:443/org/openbmc/records/events/action/clear, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161215 19:51:19.581" status="PASS" endtime="20161215 19:51:19.582"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161215 19:51:19.583">URI:https://9.3.23.30:443/org/openbmc/records/events/action/clear, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161215 19:51:19.583" status="PASS" endtime="20161215 19:51:19.583"></status>
</kw>
<status starttime="20161215 19:51:19.582" status="PASS" endtime="20161215 19:51:19.584"></status>
</kw>
<status starttime="20161215 19:51:19.580" status="PASS" endtime="20161215 19:51:19.584"></status>
</kw>
<status starttime="20161215 19:51:19.575" status="PASS" endtime="20161215 19:51:19.584"></status>
</kw>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161215 19:51:19.585">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20161215 19:51:19.585" status="PASS" endtime="20161215 19:51:19.586"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161215 19:51:19.586">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161215 19:51:19.586" status="PASS" endtime="20161215 19:51:19.586"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161215 19:51:19.587">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20161215 19:51:19.587" status="PASS" endtime="20161215 19:51:19.587"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161215 19:51:19.588">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20161215 19:51:19.588" status="PASS" endtime="20161215 19:51:19.588"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161215 19:51:19.964">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161215 19:51:19.964">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161215 19:51:19.588" status="PASS" endtime="20161215 19:51:19.964"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161215 19:51:19.965">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161215 19:51:19.965" status="PASS" endtime="20161215 19:51:19.965"></status>
</kw>
<status starttime="20161215 19:51:19.584" status="PASS" endtime="20161215 19:51:19.966"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161215 19:51:20.252">Post Request using : alias=openbmc, uri=/org/openbmc/records/events/action/clear, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161215 19:51:20.252">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20161215 19:51:19.966" status="PASS" endtime="20161215 19:51:20.252"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161215 19:51:20.260">${msg} = Response code:200, Content:{
  "data": 0, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161215 19:51:20.259" status="PASS" endtime="20161215 19:51:20.260"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161215 19:51:20.261">Response code:200, Content:{
  "data": 0, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161215 19:51:20.261" status="PASS" endtime="20161215 19:51:20.262"></status>
</kw>
<status starttime="20161215 19:51:20.260" status="PASS" endtime="20161215 19:51:20.262"></status>
</kw>
<status starttime="20161215 19:51:20.258" status="PASS" endtime="20161215 19:51:20.262"></status>
</kw>
<status starttime="20161215 19:51:20.253" status="PASS" endtime="20161215 19:51:20.262"></status>
</kw>
<msg level="INFO" timestamp="20161215 19:51:20.262">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161215 19:51:19.570" status="PASS" endtime="20161215 19:51:20.262"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161215 19:51:20.263">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161215 19:51:20.263" status="PASS" endtime="20161215 19:51:20.263"></status>
</kw>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${EVENT_RECORD}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161215 19:51:20.265">${base_uri} = /org/openbmc/records/events/</msg>
<status starttime="20161215 19:51:20.265" status="PASS" endtime="20161215 19:51:20.265"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161215 19:51:20.271">${msg} = URI:https://9.3.23.30:443/org/openbmc/records/events/, method:Get, args:{}</msg>
<status starttime="20161215 19:51:20.270" status="PASS" endtime="20161215 19:51:20.271"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161215 19:51:20.272">URI:https://9.3.23.30:443/org/openbmc/records/events/, method:Get, args:{}</msg>
<status starttime="20161215 19:51:20.272" status="PASS" endtime="20161215 19:51:20.272"></status>
</kw>
<status starttime="20161215 19:51:20.271" status="PASS" endtime="20161215 19:51:20.272"></status>
</kw>
<status starttime="20161215 19:51:20.270" status="PASS" endtime="20161215 19:51:20.272"></status>
</kw>
<status starttime="20161215 19:51:20.265" status="PASS" endtime="20161215 19:51:20.272"></status>
</kw>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161215 19:51:20.273">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20161215 19:51:20.273" status="PASS" endtime="20161215 19:51:20.274"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161215 19:51:20.274">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161215 19:51:20.274" status="PASS" endtime="20161215 19:51:20.274"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161215 19:51:20.275">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20161215 19:51:20.274" status="PASS" endtime="20161215 19:51:20.275"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161215 19:51:20.275">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20161215 19:51:20.275" status="PASS" endtime="20161215 19:51:20.275"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161215 19:51:20.694">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161215 19:51:20.694">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161215 19:51:20.275" status="PASS" endtime="20161215 19:51:20.694"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161215 19:51:20.695">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161215 19:51:20.695" status="PASS" endtime="20161215 19:51:20.695"></status>
</kw>
<status starttime="20161215 19:51:20.272" status="PASS" endtime="20161215 19:51:20.696"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161215 19:51:20.769">Get Request using : alias=openbmc, uri=/org/openbmc/records/events/, headers=None </msg>
<msg level="INFO" timestamp="20161215 19:51:20.769">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20161215 19:51:20.696" status="PASS" endtime="20161215 19:51:20.770"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161215 19:51:20.777">${msg} = Response code:200, Content:{
  "data": [], 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161215 19:51:20.776" status="PASS" endtime="20161215 19:51:20.777"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161215 19:51:20.778">Response code:200, Content:{
  "data": [], 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161215 19:51:20.778" status="PASS" endtime="20161215 19:51:20.779"></status>
</kw>
<status starttime="20161215 19:51:20.777" status="PASS" endtime="20161215 19:51:20.779"></status>
</kw>
<status starttime="20161215 19:51:20.776" status="PASS" endtime="20161215 19:51:20.779"></status>
</kw>
<status starttime="20161215 19:51:20.770" status="PASS" endtime="20161215 19:51:20.779"></status>
</kw>
<msg level="INFO" timestamp="20161215 19:51:20.779">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161215 19:51:20.264" status="PASS" endtime="20161215 19:51:20.779"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${json}</var>
</assign>
<msg level="INFO" timestamp="20161215 19:51:20.780">To JSON using : content={
  "data": [], 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161215 19:51:20.780">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161215 19:51:20.781">${json} = {u'data': [], u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20161215 19:51:20.780" status="PASS" endtime="20161215 19:51:20.781"></status>
</kw>
<kw library="BuiltIn" name="Should Be Empty">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${json['data']}</arg>
</arguments>
<msg level="INFO" timestamp="20161215 19:51:20.781">Length is 0</msg>
<status starttime="20161215 19:51:20.781" status="PASS" endtime="20161215 19:51:20.782"></status>
</kw>
<status starttime="20161215 19:51:19.570" status="PASS" endtime="20161215 19:51:20.782"></status>
</kw>
<status starttime="20161215 19:51:19.569" status="PASS" endtime="20161215 19:51:20.782"></status>
</kw>
<status starttime="20161215 19:51:17.009" status="PASS" endtime="20161215 19:51:20.782"></status>
</kw>
<test name="Create error log on single FRU" id="s1-s2-t1">
<kw library="BuiltIn" name="Run Keyword And Continue On Failure">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Clear all logs</arg>
</arguments>
<kw name="Clear all logs">
<kw library="rest_client" name="OpenBMC Post Request">
<arguments>
<arg>${EVENT_RECORD}action/clear</arg>
<arg>data=${NIL}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161215 19:51:20.786">${base_uri} = /org/openbmc/records/events/action/clear</msg>
<status starttime="20161215 19:51:20.785" status="PASS" endtime="20161215 19:51:20.786"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161215 19:51:20.787">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161215 19:51:20.786" status="PASS" endtime="20161215 19:51:20.787"></status>
</kw>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status starttime="20161215 19:51:20.787" status="PASS" endtime="20161215 19:51:20.788"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161215 19:51:20.793">${msg} = URI:https://9.3.23.30:443/org/openbmc/records/events/action/clear, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161215 19:51:20.793" status="PASS" endtime="20161215 19:51:20.793"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161215 19:51:20.794">URI:https://9.3.23.30:443/org/openbmc/records/events/action/clear, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161215 19:51:20.794" status="PASS" endtime="20161215 19:51:20.794"></status>
</kw>
<status starttime="20161215 19:51:20.793" status="PASS" endtime="20161215 19:51:20.794"></status>
</kw>
<status starttime="20161215 19:51:20.792" status="PASS" endtime="20161215 19:51:20.794"></status>
</kw>
<status starttime="20161215 19:51:20.788" status="PASS" endtime="20161215 19:51:20.794"></status>
</kw>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161215 19:51:20.795">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20161215 19:51:20.795" status="PASS" endtime="20161215 19:51:20.795"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161215 19:51:20.796">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161215 19:51:20.796" status="PASS" endtime="20161215 19:51:20.796"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161215 19:51:20.797">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20161215 19:51:20.796" status="PASS" endtime="20161215 19:51:20.797"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161215 19:51:20.797">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20161215 19:51:20.797" status="PASS" endtime="20161215 19:51:20.797"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161215 19:51:21.212">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161215 19:51:21.212">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161215 19:51:20.797" status="PASS" endtime="20161215 19:51:21.212"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161215 19:51:21.213">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161215 19:51:21.213" status="PASS" endtime="20161215 19:51:21.213"></status>
</kw>
<status starttime="20161215 19:51:20.794" status="PASS" endtime="20161215 19:51:21.213"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161215 19:51:21.438">Post Request using : alias=openbmc, uri=/org/openbmc/records/events/action/clear, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161215 19:51:21.438">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20161215 19:51:21.213" status="PASS" endtime="20161215 19:51:21.438"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161215 19:51:21.443">${msg} = Response code:200, Content:{
  "data": 0, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161215 19:51:21.442" status="PASS" endtime="20161215 19:51:21.443"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161215 19:51:21.444">Response code:200, Content:{
  "data": 0, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161215 19:51:21.443" status="PASS" endtime="20161215 19:51:21.444"></status>
</kw>
<status starttime="20161215 19:51:21.443" status="PASS" endtime="20161215 19:51:21.444"></status>
</kw>
<status starttime="20161215 19:51:21.442" status="PASS" endtime="20161215 19:51:21.444"></status>
</kw>
<status starttime="20161215 19:51:21.439" status="PASS" endtime="20161215 19:51:21.444"></status>
</kw>
<msg level="INFO" timestamp="20161215 19:51:21.444">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161215 19:51:20.784" status="PASS" endtime="20161215 19:51:21.444"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161215 19:51:21.445">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161215 19:51:21.444" status="PASS" endtime="20161215 19:51:21.445"></status>
</kw>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${EVENT_RECORD}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161215 19:51:21.446">${base_uri} = /org/openbmc/records/events/</msg>
<status starttime="20161215 19:51:21.446" status="PASS" endtime="20161215 19:51:21.446"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161215 19:51:21.451">${msg} = URI:https://9.3.23.30:443/org/openbmc/records/events/, method:Get, args:{}</msg>
<status starttime="20161215 19:51:21.450" status="PASS" endtime="20161215 19:51:21.451"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161215 19:51:21.452">URI:https://9.3.23.30:443/org/openbmc/records/events/, method:Get, args:{}</msg>
<status starttime="20161215 19:51:21.451" status="PASS" endtime="20161215 19:51:21.452"></status>
</kw>
<status starttime="20161215 19:51:21.451" status="PASS" endtime="20161215 19:51:21.452"></status>
</kw>
<status starttime="20161215 19:51:21.450" status="PASS" endtime="20161215 19:51:21.452"></status>
</kw>
<status starttime="20161215 19:51:21.446" status="PASS" endtime="20161215 19:51:21.452"></status>
</kw>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161215 19:51:21.453">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20161215 19:51:21.452" status="PASS" endtime="20161215 19:51:21.453"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161215 19:51:21.454">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161215 19:51:21.453" status="PASS" endtime="20161215 19:51:21.454"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161215 19:51:21.454">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20161215 19:51:21.454" status="PASS" endtime="20161215 19:51:21.454"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161215 19:51:21.455">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20161215 19:51:21.455" status="PASS" endtime="20161215 19:51:21.455"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161215 19:51:21.796">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161215 19:51:21.796">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161215 19:51:21.455" status="PASS" endtime="20161215 19:51:21.797"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161215 19:51:21.798">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161215 19:51:21.797" status="PASS" endtime="20161215 19:51:21.798"></status>
</kw>
<status starttime="20161215 19:51:21.452" status="PASS" endtime="20161215 19:51:21.798"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161215 19:51:21.854">Get Request using : alias=openbmc, uri=/org/openbmc/records/events/, headers=None </msg>
<msg level="INFO" timestamp="20161215 19:51:21.855">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20161215 19:51:21.798" status="PASS" endtime="20161215 19:51:21.855"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161215 19:51:21.862">${msg} = Response code:200, Content:{
  "data": [], 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161215 19:51:21.861" status="PASS" endtime="20161215 19:51:21.862"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161215 19:51:21.864">Response code:200, Content:{
  "data": [], 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161215 19:51:21.863" status="PASS" endtime="20161215 19:51:21.864"></status>
</kw>
<status starttime="20161215 19:51:21.862" status="PASS" endtime="20161215 19:51:21.864"></status>
</kw>
<status starttime="20161215 19:51:21.860" status="PASS" endtime="20161215 19:51:21.864"></status>
</kw>
<status starttime="20161215 19:51:21.855" status="PASS" endtime="20161215 19:51:21.864"></status>
</kw>
<msg level="INFO" timestamp="20161215 19:51:21.865">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161215 19:51:21.445" status="PASS" endtime="20161215 19:51:21.865"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${json}</var>
</assign>
<msg level="INFO" timestamp="20161215 19:51:21.865">To JSON using : content={
  "data": [], 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161215 19:51:21.865">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161215 19:51:21.866">${json} = {u'data': [], u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20161215 19:51:21.865" status="PASS" endtime="20161215 19:51:21.866"></status>
</kw>
<kw library="BuiltIn" name="Should Be Empty">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${json['data']}</arg>
</arguments>
<msg level="INFO" timestamp="20161215 19:51:21.866">Length is 0</msg>
<status starttime="20161215 19:51:21.866" status="PASS" endtime="20161215 19:51:21.867"></status>
</kw>
<status starttime="20161215 19:51:20.784" status="PASS" endtime="20161215 19:51:21.867"></status>
</kw>
<status starttime="20161215 19:51:20.784" status="PASS" endtime="20161215 19:51:21.867"></status>
</kw>
<kw library="SSHLibrary" name="Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${CREATE_ERROR_SINGLE_FRU}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${elog}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20161215 19:51:21.868">Executing command 'busctl call org.openbmc.records.events /org/openbmc/records/events org.openbmc.recordlog acceptHostMessage sssay "Error" "Testing failure" "/org/openbmc/inventory/system/chassis/motherboard/dimm1" 1 1'.</msg>
<msg level="INFO" timestamp="20161215 19:51:22.252">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20161215 19:51:22.252">${elog} = q 38</msg>
<msg level="INFO" timestamp="20161215 19:51:22.252">${stderr} = </msg>
<status starttime="20161215 19:51:21.867" status="PASS" endtime="20161215 19:51:22.252"></status>
</kw>
<kw library="BuiltIn" name="Should Be Empty">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg level="INFO" timestamp="20161215 19:51:22.253">Length is 0</msg>
<status starttime="20161215 19:51:22.253" status="PASS" endtime="20161215 19:51:22.253"></status>
</kw>
<kw name="Get EventList">
<assign>
<var>${log_list}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${EVENT_RECORD}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161215 19:51:22.254">${base_uri} = /org/openbmc/records/events/</msg>
<status starttime="20161215 19:51:22.254" status="PASS" endtime="20161215 19:51:22.254"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161215 19:51:22.259">${msg} = URI:https://9.3.23.30:443/org/openbmc/records/events/, method:Get, args:{}</msg>
<status starttime="20161215 19:51:22.259" status="PASS" endtime="20161215 19:51:22.259"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161215 19:51:22.260">URI:https://9.3.23.30:443/org/openbmc/records/events/, method:Get, args:{}</msg>
<status starttime="20161215 19:51:22.260" status="PASS" endtime="20161215 19:51:22.260"></status>
</kw>
<status starttime="20161215 19:51:22.259" status="PASS" endtime="20161215 19:51:22.260"></status>
</kw>
<status starttime="20161215 19:51:22.258" status="PASS" endtime="20161215 19:51:22.261"></status>
</kw>
<status starttime="20161215 19:51:22.255" status="PASS" endtime="20161215 19:51:22.261"></status>
</kw>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161215 19:51:22.262">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20161215 19:51:22.261" status="PASS" endtime="20161215 19:51:22.262"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161215 19:51:22.262">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161215 19:51:22.262" status="PASS" endtime="20161215 19:51:22.262"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161215 19:51:22.263">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20161215 19:51:22.263" status="PASS" endtime="20161215 19:51:22.263"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161215 19:51:22.264">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20161215 19:51:22.263" status="PASS" endtime="20161215 19:51:22.264"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161215 19:51:22.822">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161215 19:51:22.822">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161215 19:51:22.264" status="PASS" endtime="20161215 19:51:22.822"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161215 19:51:22.823">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161215 19:51:22.822" status="PASS" endtime="20161215 19:51:22.823"></status>
</kw>
<status starttime="20161215 19:51:22.261" status="PASS" endtime="20161215 19:51:22.823"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161215 19:51:22.883">Get Request using : alias=openbmc, uri=/org/openbmc/records/events/, headers=None </msg>
<msg level="INFO" timestamp="20161215 19:51:22.883">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20161215 19:51:22.824" status="PASS" endtime="20161215 19:51:22.883"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161215 19:51:22.889">${msg} = Response code:200, Content:{
  "data": [
    "/org/openbmc/records/events/38"
  ], 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161215 19:51:22.889" status="PASS" endtime="20161215 19:51:22.889"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161215 19:51:22.890">Response code:200, Content:{
  "data": [
    "/org/openbmc/records/events/38"
  ], 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161215 19:51:22.890" status="PASS" endtime="20161215 19:51:22.890"></status>
</kw>
<status starttime="20161215 19:51:22.889" status="PASS" endtime="20161215 19:51:22.890"></status>
</kw>
<status starttime="20161215 19:51:22.887" status="PASS" endtime="20161215 19:51:22.890"></status>
</kw>
<status starttime="20161215 19:51:22.883" status="PASS" endtime="20161215 19:51:22.890"></status>
</kw>
<msg level="INFO" timestamp="20161215 19:51:22.891">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161215 19:51:22.253" status="PASS" endtime="20161215 19:51:22.891"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161215 19:51:22.891">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161215 19:51:22.891" status="PASS" endtime="20161215 19:51:22.891"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg level="INFO" timestamp="20161215 19:51:22.892">To JSON using : content={
  "data": [
    "/org/openbmc/records/events/38"
  ], 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161215 19:51:22.892">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161215 19:51:22.892">${jsondata} = {u'data': [u'/org/openbmc/records/events/38'], u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20161215 19:51:22.892" status="PASS" endtime="20161215 19:51:22.892"></status>
</kw>
<msg level="INFO" timestamp="20161215 19:51:22.893">${log_list} = [u'/org/openbmc/records/events/38']</msg>
<status starttime="20161215 19:51:22.253" status="PASS" endtime="20161215 19:51:22.893"></status>
</kw>
<kw library="BuiltIn" name="Should Contain">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>'${log_list}'</arg>
<arg>${elog.strip('q ')}</arg>
</arguments>
<status starttime="20161215 19:51:22.893" status="PASS" endtime="20161215 19:51:22.893"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${EVENT_RECORD}${elog.strip('q ')}</arg>
<arg>/fru</arg>
</arguments>
<assign>
<var>${association_uri}</var>
</assign>
<msg level="INFO" timestamp="20161215 19:51:22.894">${association_uri} = /org/openbmc/records/events/38/fru</msg>
<status starttime="20161215 19:51:22.893" status="PASS" endtime="20161215 19:51:22.894"></status>
</kw>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${association_uri}</arg>
<arg>endpoints</arg>
</arguments>
<assign>
<var>${association_content}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161215 19:51:22.896">${base_uri} = /org/openbmc/records/events/38/fru/attr/endpoints</msg>
<status starttime="20161215 19:51:22.895" status="PASS" endtime="20161215 19:51:22.896"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161215 19:51:22.901">${msg} = URI:https://9.3.23.30:443/org/openbmc/records/events/38/fru/attr/endpoints, method:Get, args:{}</msg>
<status starttime="20161215 19:51:22.900" status="PASS" endtime="20161215 19:51:22.901"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161215 19:51:22.901">URI:https://9.3.23.30:443/org/openbmc/records/events/38/fru/attr/endpoints, method:Get, args:{}</msg>
<status starttime="20161215 19:51:22.901" status="PASS" endtime="20161215 19:51:22.902"></status>
</kw>
<status starttime="20161215 19:51:22.901" status="PASS" endtime="20161215 19:51:22.902"></status>
</kw>
<status starttime="20161215 19:51:22.900" status="PASS" endtime="20161215 19:51:22.902"></status>
</kw>
<status starttime="20161215 19:51:22.896" status="PASS" endtime="20161215 19:51:22.902"></status>
</kw>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161215 19:51:22.903">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20161215 19:51:22.902" status="PASS" endtime="20161215 19:51:22.903"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161215 19:51:22.904">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161215 19:51:22.903" status="PASS" endtime="20161215 19:51:22.904"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161215 19:51:22.904">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20161215 19:51:22.904" status="PASS" endtime="20161215 19:51:22.904"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161215 19:51:22.905">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20161215 19:51:22.905" status="PASS" endtime="20161215 19:51:22.905"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161215 19:51:23.237">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161215 19:51:23.238">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161215 19:51:22.905" status="PASS" endtime="20161215 19:51:23.238"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161215 19:51:23.238">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161215 19:51:23.238" status="PASS" endtime="20161215 19:51:23.238"></status>
</kw>
<status starttime="20161215 19:51:22.902" status="PASS" endtime="20161215 19:51:23.239"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161215 19:51:23.330">Get Request using : alias=openbmc, uri=/org/openbmc/records/events/38/fru/attr/endpoints, headers=None </msg>
<msg level="INFO" timestamp="20161215 19:51:23.330">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20161215 19:51:23.239" status="PASS" endtime="20161215 19:51:23.330"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161215 19:51:23.335">${msg} = Response code:200, Content:{
  "data": [
    "/org/openbmc/inventory/system/chassis/motherboard/dimm1"
  ], 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161215 19:51:23.334" status="PASS" endtime="20161215 19:51:23.335"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161215 19:51:23.335">Response code:200, Content:{
  "data": [
    "/org/openbmc/inventory/system/chassis/motherboard/dimm1"
  ], 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161215 19:51:23.335" status="PASS" endtime="20161215 19:51:23.336"></status>
</kw>
<status starttime="20161215 19:51:23.335" status="PASS" endtime="20161215 19:51:23.336"></status>
</kw>
<status starttime="20161215 19:51:23.334" status="PASS" endtime="20161215 19:51:23.336"></status>
</kw>
<status starttime="20161215 19:51:23.331" status="PASS" endtime="20161215 19:51:23.336"></status>
</kw>
<msg level="INFO" timestamp="20161215 19:51:23.336">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161215 19:51:22.895" status="PASS" endtime="20161215 19:51:23.336"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161215 19:51:23.336">To JSON using : content={
  "data": [
    "/org/openbmc/inventory/system/chassis/motherboard/dimm1"
  ], 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161215 19:51:23.337">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161215 19:51:23.337">${content} = {u'data': [u'/org/openbmc/inventory/system/chassis/motherboard/dimm1'], u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20161215 19:51:23.336" status="PASS" endtime="20161215 19:51:23.337"></status>
</kw>
<msg level="INFO" timestamp="20161215 19:51:23.337">${association_content} = [u'/org/openbmc/inventory/system/chassis/motherboard/dimm1']</msg>
<status starttime="20161215 19:51:22.894" status="PASS" endtime="20161215 19:51:23.337"></status>
</kw>
<kw library="BuiltIn" name="Should Contain">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${association_content}</arg>
<arg>${DIMM1_URI}</arg>
</arguments>
<status starttime="20161215 19:51:23.337" status="PASS" endtime="20161215 19:51:23.337"></status>
</kw>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${DIMM1_URI}/event</arg>
<arg>endpoints</arg>
</arguments>
<assign>
<var>${dimm1_event}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161215 19:51:23.339">${base_uri} = /org/openbmc/inventory/system/chassis/motherboard/dimm1/event/attr/endpoints</msg>
<status starttime="20161215 19:51:23.339" status="PASS" endtime="20161215 19:51:23.339"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161215 19:51:23.344">${msg} = URI:https://9.3.23.30:443/org/openbmc/inventory/system/chassis/motherboard/dimm1/event/attr/endpoints, method:Get, args:{}</msg>
<status starttime="20161215 19:51:23.343" status="PASS" endtime="20161215 19:51:23.344"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161215 19:51:23.345">URI:https://9.3.23.30:443/org/openbmc/inventory/system/chassis/motherboard/dimm1/event/attr/endpoints, method:Get, args:{}</msg>
<status starttime="20161215 19:51:23.344" status="PASS" endtime="20161215 19:51:23.345"></status>
</kw>
<status starttime="20161215 19:51:23.344" status="PASS" endtime="20161215 19:51:23.345"></status>
</kw>
<status starttime="20161215 19:51:23.342" status="PASS" endtime="20161215 19:51:23.345"></status>
</kw>
<status starttime="20161215 19:51:23.339" status="PASS" endtime="20161215 19:51:23.345"></status>
</kw>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161215 19:51:23.346">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20161215 19:51:23.346" status="PASS" endtime="20161215 19:51:23.346"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161215 19:51:23.347">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161215 19:51:23.346" status="PASS" endtime="20161215 19:51:23.347"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161215 19:51:23.348">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20161215 19:51:23.347" status="PASS" endtime="20161215 19:51:23.348"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161215 19:51:23.348">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20161215 19:51:23.348" status="PASS" endtime="20161215 19:51:23.348"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161215 19:51:23.678">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161215 19:51:23.679">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161215 19:51:23.349" status="PASS" endtime="20161215 19:51:23.679"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161215 19:51:23.679">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161215 19:51:23.679" status="PASS" endtime="20161215 19:51:23.679"></status>
</kw>
<status starttime="20161215 19:51:23.345" status="PASS" endtime="20161215 19:51:23.680"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161215 19:51:23.758">Get Request using : alias=openbmc, uri=/org/openbmc/inventory/system/chassis/motherboard/dimm1/event/attr/endpoints, headers=None </msg>
<msg level="INFO" timestamp="20161215 19:51:23.758">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20161215 19:51:23.680" status="PASS" endtime="20161215 19:51:23.758"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161215 19:51:23.762">${msg} = Response code:200, Content:{
  "data": [
    "/org/openbmc/records/events/38"
  ], 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161215 19:51:23.762" status="PASS" endtime="20161215 19:51:23.762"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161215 19:51:23.763">Response code:200, Content:{
  "data": [
    "/org/openbmc/records/events/38"
  ], 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161215 19:51:23.763" status="PASS" endtime="20161215 19:51:23.763"></status>
</kw>
<status starttime="20161215 19:51:23.763" status="PASS" endtime="20161215 19:51:23.763"></status>
</kw>
<status starttime="20161215 19:51:23.761" status="PASS" endtime="20161215 19:51:23.764"></status>
</kw>
<status starttime="20161215 19:51:23.758" status="PASS" endtime="20161215 19:51:23.764"></status>
</kw>
<msg level="INFO" timestamp="20161215 19:51:23.764">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161215 19:51:23.338" status="PASS" endtime="20161215 19:51:23.764"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161215 19:51:23.764">To JSON using : content={
  "data": [
    "/org/openbmc/records/events/38"
  ], 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161215 19:51:23.764">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161215 19:51:23.765">${content} = {u'data': [u'/org/openbmc/records/events/38'], u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20161215 19:51:23.764" status="PASS" endtime="20161215 19:51:23.765"></status>
</kw>
<msg level="INFO" timestamp="20161215 19:51:23.765">${dimm1_event} = [u'/org/openbmc/records/events/38']</msg>
<status starttime="20161215 19:51:23.338" status="PASS" endtime="20161215 19:51:23.765"></status>
</kw>
<kw library="BuiltIn" name="Should Contain">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${dimm1_event}</arg>
<arg>${log_list[0]}</arg>
</arguments>
<status starttime="20161215 19:51:23.765" status="PASS" endtime="20161215 19:51:23.765"></status>
</kw>
<kw library="openbmc_ffdc" type="teardown" name="FFDC On Test Case Fail">
<doc>Generic FFDC entry point. Place holder to hook in</doc>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${TEST_STATUS}' == 'FAIL'</arg>
<arg>FFDC</arg>
</arguments>
<status starttime="20161215 19:51:23.766" status="PASS" endtime="20161215 19:51:23.771"></status>
</kw>
<kw library="openbmc_ffdc_methods" name="Log Test Case Status">
<doc>Test case execution result history.</doc>
<kw library="OperatingSystem" name="Create Directory">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>${FFDC_LOG_PATH}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20161215 19:51:23.773">Directory '&lt;a href="file:///tmp/root/17453/obmc-robot/logs"&gt;/tmp/root/17453/obmc-robot/logs&lt;/a&gt;' already exists.</msg>
<status starttime="20161215 19:51:23.772" status="PASS" endtime="20161215 19:51:23.773"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>OperatingSystem.File Should Exist</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<assign>
<var>${exist}</var>
</assign>
<kw library="OperatingSystem" name="File Should Exist">
<doc>Fails unless the given ``path`` points to an existing file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20161215 19:51:23.774">File '&lt;a href="file:///tmp/root/17453/obmc-robot/logs/test_history.txt"&gt;/tmp/root/17453/obmc-robot/logs/test_history.txt&lt;/a&gt;' exists.</msg>
<status starttime="20161215 19:51:23.774" status="PASS" endtime="20161215 19:51:23.775"></status>
</kw>
<msg level="INFO" timestamp="20161215 19:51:23.775">${exist} = True</msg>
<status starttime="20161215 19:51:23.773" status="PASS" endtime="20161215 19:51:23.775"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${exist}' == '${False}'</arg>
<arg>Create File</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<status starttime="20161215 19:51:23.775" status="PASS" endtime="20161215 19:51:23.780"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Get Current Time Stamp">
<doc>Get the current time stamp data</doc>
<assign>
<var>${cur_time}</var>
</assign>
<kw library="DateTime" name="Get Current Date">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20161215 19:51:23.781">${cur_time} = 2016-12-15 19:51:23:780907</msg>
<status starttime="20161215 19:51:23.781" status="PASS" endtime="20161215 19:51:23.781"></status>
</kw>
<kw library="openbmc_ffdc_list" name="Get Strip String">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20161215 19:51:23.782">${cur_time} = 20161215195123780907</msg>
<status starttime="20161215 19:51:23.782" status="PASS" endtime="20161215 19:51:23.782"></status>
</kw>
<msg level="INFO" timestamp="20161215 19:51:23.782">${cur_time} = 20161215195123780907</msg>
<status starttime="20161215 19:51:23.780" status="PASS" endtime="20161215 19:51:23.782"></status>
</kw>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
<arg>${cur_time}:${SUITE_NAME}:${TEST_NAME}:${TEST_STATUS}${\n}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20161215 19:51:23.783">Appended to file '&lt;a href="file:///tmp/root/17453/obmc-robot/logs/test_history.txt"&gt;/tmp/root/17453/obmc-robot/logs/test_history.txt&lt;/a&gt;'.</msg>
<status starttime="20161215 19:51:23.783" status="PASS" endtime="20161215 19:51:23.783"></status>
</kw>
<status starttime="20161215 19:51:23.771" status="PASS" endtime="20161215 19:51:23.784"></status>
</kw>
<status starttime="20161215 19:51:23.766" status="PASS" endtime="20161215 19:51:23.784"></status>
</kw>
<doc>***GOOD PATH***
Create an error log on single FRU and verify
its association.
</doc>
<tags>
<tag>Create_error_log_on_single_FRU</tag>
</tags>
<status critical="yes" starttime="20161215 19:51:20.782" status="PASS" endtime="20161215 19:51:23.784"></status>
</test>
<test name="Delete error log" id="s1-s2-t2">
<kw name="Create a test log">
<assign>
<var>${log_uri1}</var>
</assign>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{EMPTY}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161215 19:51:23.785">${data} = {u'data': []}</msg>
<status starttime="20161215 19:51:23.785" status="PASS" endtime="20161215 19:51:23.785"></status>
</kw>
<kw library="rest_client" name="OpenBMC Post Request">
<arguments>
<arg>${EVENT_RECORD}action/acceptTestMessage</arg>
<arg>data=${data}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161215 19:51:23.786">${base_uri} = /org/openbmc/records/events/action/acceptTestMessage</msg>
<status starttime="20161215 19:51:23.786" status="PASS" endtime="20161215 19:51:23.786"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161215 19:51:23.787">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161215 19:51:23.787" status="PASS" endtime="20161215 19:51:23.787"></status>
</kw>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status starttime="20161215 19:51:23.787" status="PASS" endtime="20161215 19:51:23.787"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161215 19:51:23.792">${msg} = URI:https://9.3.23.30:443/org/openbmc/records/events/action/acceptTestMessage, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161215 19:51:23.791" status="PASS" endtime="20161215 19:51:23.792"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161215 19:51:23.793">URI:https://9.3.23.30:443/org/openbmc/records/events/action/acceptTestMessage, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161215 19:51:23.793" status="PASS" endtime="20161215 19:51:23.793"></status>
</kw>
<status starttime="20161215 19:51:23.792" status="PASS" endtime="20161215 19:51:23.793"></status>
</kw>
<status starttime="20161215 19:51:23.791" status="PASS" endtime="20161215 19:51:23.793"></status>
</kw>
<status starttime="20161215 19:51:23.788" status="PASS" endtime="20161215 19:51:23.793"></status>
</kw>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161215 19:51:23.794">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20161215 19:51:23.794" status="PASS" endtime="20161215 19:51:23.795"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161215 19:51:23.795">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161215 19:51:23.795" status="PASS" endtime="20161215 19:51:23.795"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161215 19:51:23.796">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20161215 19:51:23.795" status="PASS" endtime="20161215 19:51:23.796"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161215 19:51:23.796">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20161215 19:51:23.796" status="PASS" endtime="20161215 19:51:23.796"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161215 19:51:24.280">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161215 19:51:24.280">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161215 19:51:23.796" status="PASS" endtime="20161215 19:51:24.280"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161215 19:51:24.281">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161215 19:51:24.280" status="PASS" endtime="20161215 19:51:24.281"></status>
</kw>
<status starttime="20161215 19:51:23.793" status="PASS" endtime="20161215 19:51:24.281"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161215 19:51:24.584">Post Request using : alias=openbmc, uri=/org/openbmc/records/events/action/acceptTestMessage, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161215 19:51:24.584">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20161215 19:51:24.281" status="PASS" endtime="20161215 19:51:24.584"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161215 19:51:24.589">${msg} = Response code:200, Content:{
  "data": 39, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161215 19:51:24.588" status="PASS" endtime="20161215 19:51:24.589"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161215 19:51:24.590">Response code:200, Content:{
  "data": 39, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161215 19:51:24.589" status="PASS" endtime="20161215 19:51:24.590"></status>
</kw>
<status starttime="20161215 19:51:24.589" status="PASS" endtime="20161215 19:51:24.590"></status>
</kw>
<status starttime="20161215 19:51:24.588" status="PASS" endtime="20161215 19:51:24.590"></status>
</kw>
<status starttime="20161215 19:51:24.584" status="PASS" endtime="20161215 19:51:24.590"></status>
</kw>
<msg level="INFO" timestamp="20161215 19:51:24.590">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161215 19:51:23.785" status="PASS" endtime="20161215 19:51:24.590"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161215 19:51:24.591">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161215 19:51:24.590" status="PASS" endtime="20161215 19:51:24.591"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${json}</var>
</assign>
<msg level="INFO" timestamp="20161215 19:51:24.591">To JSON using : content={
  "data": 39, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161215 19:51:24.591">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161215 19:51:24.591">${json} = {u'data': 39, u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20161215 19:51:24.591" status="PASS" endtime="20161215 19:51:24.591"></status>
</kw>
<kw library="BuiltIn" name="Convert To Integer">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${json['data']}</arg>
</arguments>
<assign>
<var>${LOGID}</var>
</assign>
<msg level="INFO" timestamp="20161215 19:51:24.592">${LOGID} = 39</msg>
<status starttime="20161215 19:51:24.592" status="PASS" endtime="20161215 19:51:24.592"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${EVENT_RECORD}</arg>
<arg>${LOGID}</arg>
</arguments>
<assign>
<var>${uri}</var>
</assign>
<msg level="INFO" timestamp="20161215 19:51:24.593">${uri} = /org/openbmc/records/events/39</msg>
<status starttime="20161215 19:51:24.592" status="PASS" endtime="20161215 19:51:24.593"></status>
</kw>
<msg level="INFO" timestamp="20161215 19:51:24.593">${log_uri1} = /org/openbmc/records/events/39</msg>
<status starttime="20161215 19:51:23.785" status="PASS" endtime="20161215 19:51:24.593"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${log_uri1}</arg>
<arg>/fru</arg>
</arguments>
<assign>
<var>${association_uri1}</var>
</assign>
<msg level="INFO" timestamp="20161215 19:51:24.593">${association_uri1} = /org/openbmc/records/events/39/fru</msg>
<status starttime="20161215 19:51:24.593" status="PASS" endtime="20161215 19:51:24.593"></status>
</kw>
<kw name="Create a test log">
<assign>
<var>${log_uri2}</var>
</assign>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{EMPTY}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161215 19:51:24.594">${data} = {u'data': []}</msg>
<status starttime="20161215 19:51:24.594" status="PASS" endtime="20161215 19:51:24.594"></status>
</kw>
<kw library="rest_client" name="OpenBMC Post Request">
<arguments>
<arg>${EVENT_RECORD}action/acceptTestMessage</arg>
<arg>data=${data}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161215 19:51:24.595">${base_uri} = /org/openbmc/records/events/action/acceptTestMessage</msg>
<status starttime="20161215 19:51:24.595" status="PASS" endtime="20161215 19:51:24.595"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161215 19:51:24.596">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161215 19:51:24.595" status="PASS" endtime="20161215 19:51:24.596"></status>
</kw>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status starttime="20161215 19:51:24.596" status="PASS" endtime="20161215 19:51:24.596"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161215 19:51:24.601">${msg} = URI:https://9.3.23.30:443/org/openbmc/records/events/action/acceptTestMessage, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161215 19:51:24.600" status="PASS" endtime="20161215 19:51:24.601"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161215 19:51:24.602">URI:https://9.3.23.30:443/org/openbmc/records/events/action/acceptTestMessage, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161215 19:51:24.602" status="PASS" endtime="20161215 19:51:24.602"></status>
</kw>
<status starttime="20161215 19:51:24.601" status="PASS" endtime="20161215 19:51:24.602"></status>
</kw>
<status starttime="20161215 19:51:24.600" status="PASS" endtime="20161215 19:51:24.602"></status>
</kw>
<status starttime="20161215 19:51:24.596" status="PASS" endtime="20161215 19:51:24.602"></status>
</kw>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161215 19:51:24.603">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20161215 19:51:24.603" status="PASS" endtime="20161215 19:51:24.603"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161215 19:51:24.604">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161215 19:51:24.604" status="PASS" endtime="20161215 19:51:24.604"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161215 19:51:24.604">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20161215 19:51:24.604" status="PASS" endtime="20161215 19:51:24.605"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161215 19:51:24.605">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20161215 19:51:24.605" status="PASS" endtime="20161215 19:51:24.605"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161215 19:51:25.022">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161215 19:51:25.022">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161215 19:51:24.606" status="PASS" endtime="20161215 19:51:25.022"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161215 19:51:25.023">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161215 19:51:25.022" status="PASS" endtime="20161215 19:51:25.023"></status>
</kw>
<status starttime="20161215 19:51:24.602" status="PASS" endtime="20161215 19:51:25.023"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161215 19:51:25.314">Post Request using : alias=openbmc, uri=/org/openbmc/records/events/action/acceptTestMessage, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161215 19:51:25.315">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20161215 19:51:25.024" status="PASS" endtime="20161215 19:51:25.315"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161215 19:51:25.319">${msg} = Response code:200, Content:{
  "data": 40, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161215 19:51:25.319" status="PASS" endtime="20161215 19:51:25.319"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161215 19:51:25.320">Response code:200, Content:{
  "data": 40, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161215 19:51:25.320" status="PASS" endtime="20161215 19:51:25.320"></status>
</kw>
<status starttime="20161215 19:51:25.319" status="PASS" endtime="20161215 19:51:25.320"></status>
</kw>
<status starttime="20161215 19:51:25.318" status="PASS" endtime="20161215 19:51:25.320"></status>
</kw>
<status starttime="20161215 19:51:25.315" status="PASS" endtime="20161215 19:51:25.320"></status>
</kw>
<msg level="INFO" timestamp="20161215 19:51:25.320">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161215 19:51:24.594" status="PASS" endtime="20161215 19:51:25.320"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161215 19:51:25.321">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161215 19:51:25.321" status="PASS" endtime="20161215 19:51:25.321"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${json}</var>
</assign>
<msg level="INFO" timestamp="20161215 19:51:25.322">To JSON using : content={
  "data": 40, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161215 19:51:25.322">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161215 19:51:25.322">${json} = {u'data': 40, u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20161215 19:51:25.321" status="PASS" endtime="20161215 19:51:25.322"></status>
</kw>
<kw library="BuiltIn" name="Convert To Integer">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${json['data']}</arg>
</arguments>
<assign>
<var>${LOGID}</var>
</assign>
<msg level="INFO" timestamp="20161215 19:51:25.322">${LOGID} = 40</msg>
<status starttime="20161215 19:51:25.322" status="PASS" endtime="20161215 19:51:25.322"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${EVENT_RECORD}</arg>
<arg>${LOGID}</arg>
</arguments>
<assign>
<var>${uri}</var>
</assign>
<msg level="INFO" timestamp="20161215 19:51:25.323">${uri} = /org/openbmc/records/events/40</msg>
<status starttime="20161215 19:51:25.322" status="PASS" endtime="20161215 19:51:25.323"></status>
</kw>
<msg level="INFO" timestamp="20161215 19:51:25.323">${log_uri2} = /org/openbmc/records/events/40</msg>
<status starttime="20161215 19:51:24.593" status="PASS" endtime="20161215 19:51:25.323"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${log_uri1}</arg>
<arg>/action/delete</arg>
</arguments>
<assign>
<var>${del_uri}</var>
</assign>
<msg level="INFO" timestamp="20161215 19:51:25.324">${del_uri} = /org/openbmc/records/events/39/action/delete</msg>
<status starttime="20161215 19:51:25.323" status="PASS" endtime="20161215 19:51:25.324"></status>
</kw>
<kw library="rest_client" name="OpenBMC Post Request">
<arguments>
<arg>${del_uri}</arg>
<arg>data=${NIL}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161215 19:51:25.325">${base_uri} = /org/openbmc/records/events/39/action/delete</msg>
<status starttime="20161215 19:51:25.325" status="PASS" endtime="20161215 19:51:25.325"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161215 19:51:25.325">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161215 19:51:25.325" status="PASS" endtime="20161215 19:51:25.325"></status>
</kw>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status starttime="20161215 19:51:25.326" status="PASS" endtime="20161215 19:51:25.326"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161215 19:51:25.331">${msg} = URI:https://9.3.23.30:443/org/openbmc/records/events/39/action/delete, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161215 19:51:25.330" status="PASS" endtime="20161215 19:51:25.331"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161215 19:51:25.331">URI:https://9.3.23.30:443/org/openbmc/records/events/39/action/delete, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161215 19:51:25.331" status="PASS" endtime="20161215 19:51:25.331"></status>
</kw>
<status starttime="20161215 19:51:25.331" status="PASS" endtime="20161215 19:51:25.332"></status>
</kw>
<status starttime="20161215 19:51:25.329" status="PASS" endtime="20161215 19:51:25.332"></status>
</kw>
<status starttime="20161215 19:51:25.326" status="PASS" endtime="20161215 19:51:25.332"></status>
</kw>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161215 19:51:25.333">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20161215 19:51:25.332" status="PASS" endtime="20161215 19:51:25.333"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161215 19:51:25.333">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161215 19:51:25.333" status="PASS" endtime="20161215 19:51:25.333"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161215 19:51:25.334">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20161215 19:51:25.334" status="PASS" endtime="20161215 19:51:25.334"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161215 19:51:25.334">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20161215 19:51:25.334" status="PASS" endtime="20161215 19:51:25.335"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161215 19:51:25.728">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161215 19:51:25.728">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161215 19:51:25.335" status="PASS" endtime="20161215 19:51:25.728"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161215 19:51:25.730">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161215 19:51:25.729" status="PASS" endtime="20161215 19:51:25.730"></status>
</kw>
<status starttime="20161215 19:51:25.332" status="PASS" endtime="20161215 19:51:25.730"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161215 19:51:25.951">Post Request using : alias=openbmc, uri=/org/openbmc/records/events/39/action/delete, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161215 19:51:25.951">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20161215 19:51:25.730" status="PASS" endtime="20161215 19:51:25.951"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161215 19:51:25.963">${msg} = Response code:200, Content:{
  "data": 0, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161215 19:51:25.962" status="PASS" endtime="20161215 19:51:25.963"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161215 19:51:25.965">Response code:200, Content:{
  "data": 0, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161215 19:51:25.965" status="PASS" endtime="20161215 19:51:25.965"></status>
</kw>
<status starttime="20161215 19:51:25.964" status="PASS" endtime="20161215 19:51:25.966"></status>
</kw>
<status starttime="20161215 19:51:25.959" status="PASS" endtime="20161215 19:51:25.966"></status>
</kw>
<status starttime="20161215 19:51:25.952" status="PASS" endtime="20161215 19:51:25.966"></status>
</kw>
<msg level="INFO" timestamp="20161215 19:51:25.966">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161215 19:51:25.324" status="PASS" endtime="20161215 19:51:25.966"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161215 19:51:25.967">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161215 19:51:25.967" status="PASS" endtime="20161215 19:51:25.967"></status>
</kw>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${association_uri1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161215 19:51:25.969">${base_uri} = /org/openbmc/records/events/39/fru</msg>
<status starttime="20161215 19:51:25.968" status="PASS" endtime="20161215 19:51:25.969"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161215 19:51:25.974">${msg} = URI:https://9.3.23.30:443/org/openbmc/records/events/39/fru, method:Get, args:{}</msg>
<status starttime="20161215 19:51:25.973" status="PASS" endtime="20161215 19:51:25.974"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161215 19:51:25.974">URI:https://9.3.23.30:443/org/openbmc/records/events/39/fru, method:Get, args:{}</msg>
<status starttime="20161215 19:51:25.974" status="PASS" endtime="20161215 19:51:25.975"></status>
</kw>
<status starttime="20161215 19:51:25.974" status="PASS" endtime="20161215 19:51:25.975"></status>
</kw>
<status starttime="20161215 19:51:25.973" status="PASS" endtime="20161215 19:51:25.975"></status>
</kw>
<status starttime="20161215 19:51:25.969" status="PASS" endtime="20161215 19:51:25.975"></status>
</kw>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161215 19:51:25.976">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20161215 19:51:25.975" status="PASS" endtime="20161215 19:51:25.976"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161215 19:51:25.976">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161215 19:51:25.976" status="PASS" endtime="20161215 19:51:25.977"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161215 19:51:25.977">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20161215 19:51:25.977" status="PASS" endtime="20161215 19:51:25.977"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161215 19:51:25.978">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20161215 19:51:25.977" status="PASS" endtime="20161215 19:51:25.978"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161215 19:51:26.615">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161215 19:51:26.615">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161215 19:51:25.978" status="PASS" endtime="20161215 19:51:26.615"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161215 19:51:26.615">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161215 19:51:26.615" status="PASS" endtime="20161215 19:51:26.615"></status>
</kw>
<status starttime="20161215 19:51:25.975" status="PASS" endtime="20161215 19:51:26.616"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161215 19:51:26.793">Get Request using : alias=openbmc, uri=/org/openbmc/records/events/39/fru, headers=None </msg>
<msg level="INFO" timestamp="20161215 19:51:26.793">${ret} = &lt;Response [404]&gt;</msg>
<status starttime="20161215 19:51:26.616" status="PASS" endtime="20161215 19:51:26.793"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161215 19:51:26.798">${msg} = Response code:404, Content:{
  "data": {
    "description": "org.freedesktop.DBus.Error.FileNotFound: path or object not found: /org/openbmc/records/events/39/fru"
  }, 
  "message": "404 Not Found", ...</msg>
<status starttime="20161215 19:51:26.798" status="PASS" endtime="20161215 19:51:26.799"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161215 19:51:26.800">Response code:404, Content:{
  "data": {
    "description": "org.freedesktop.DBus.Error.FileNotFound: path or object not found: /org/openbmc/records/events/39/fru"
  }, 
  "message": "404 Not Found", 
  "status": "error"
}</msg>
<status starttime="20161215 19:51:26.800" status="PASS" endtime="20161215 19:51:26.800"></status>
</kw>
<status starttime="20161215 19:51:26.799" status="PASS" endtime="20161215 19:51:26.800"></status>
</kw>
<status starttime="20161215 19:51:26.797" status="PASS" endtime="20161215 19:51:26.800"></status>
</kw>
<status starttime="20161215 19:51:26.794" status="PASS" endtime="20161215 19:51:26.801"></status>
</kw>
<msg level="INFO" timestamp="20161215 19:51:26.801">${resp} = &lt;Response [404]&gt;</msg>
<status starttime="20161215 19:51:25.968" status="PASS" endtime="20161215 19:51:26.801"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg level="INFO" timestamp="20161215 19:51:26.802">To JSON using : content={
  "data": {
    "description": "org.freedesktop.DBus.Error.FileNotFound: path or object not found: /org/openbmc/records/events/39/fru"
  }, 
  "message": "404 Not Found", 
  "status": "error"
} </msg>
<msg level="INFO" timestamp="20161215 19:51:26.802">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161215 19:51:26.802">${jsondata} = {u'data': {u'description': u'org.freedesktop.DBus.Error.FileNotFound: path or object not found: /org/openbmc/records/events/39/fru'}, u'status': u'error', u'message': u'404 Not Found'}</msg>
<status starttime="20161215 19:51:26.801" status="PASS" endtime="20161215 19:51:26.802"></status>
</kw>
<kw library="BuiltIn" name="Should Contain">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${jsondata['message']}</arg>
<arg>404 Not Found</arg>
</arguments>
<status starttime="20161215 19:51:26.802" status="PASS" endtime="20161215 19:51:26.803"></status>
</kw>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${DIMM3_URI}/event</arg>
<arg>endpoints</arg>
</arguments>
<assign>
<var>${dimm3_event}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161215 19:51:26.805">${base_uri} = /org/openbmc/inventory/system/chassis/motherboard/dimm3/event/attr/endpoints</msg>
<status starttime="20161215 19:51:26.805" status="PASS" endtime="20161215 19:51:26.806"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161215 19:51:26.812">${msg} = URI:https://9.3.23.30:443/org/openbmc/inventory/system/chassis/motherboard/dimm3/event/attr/endpoints, method:Get, args:{}</msg>
<status starttime="20161215 19:51:26.811" status="PASS" endtime="20161215 19:51:26.812"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161215 19:51:26.813">URI:https://9.3.23.30:443/org/openbmc/inventory/system/chassis/motherboard/dimm3/event/attr/endpoints, method:Get, args:{}</msg>
<status starttime="20161215 19:51:26.813" status="PASS" endtime="20161215 19:51:26.813"></status>
</kw>
<status starttime="20161215 19:51:26.812" status="PASS" endtime="20161215 19:51:26.813"></status>
</kw>
<status starttime="20161215 19:51:26.811" status="PASS" endtime="20161215 19:51:26.813"></status>
</kw>
<status starttime="20161215 19:51:26.806" status="PASS" endtime="20161215 19:51:26.813"></status>
</kw>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161215 19:51:26.814">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20161215 19:51:26.814" status="PASS" endtime="20161215 19:51:26.815"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161215 19:51:26.815">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161215 19:51:26.815" status="PASS" endtime="20161215 19:51:26.815"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161215 19:51:26.816">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20161215 19:51:26.815" status="PASS" endtime="20161215 19:51:26.816"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161215 19:51:26.816">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20161215 19:51:26.816" status="PASS" endtime="20161215 19:51:26.816"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161215 19:51:27.349">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161215 19:51:27.350">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161215 19:51:26.816" status="PASS" endtime="20161215 19:51:27.350"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161215 19:51:27.351">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161215 19:51:27.350" status="PASS" endtime="20161215 19:51:27.351"></status>
</kw>
<status starttime="20161215 19:51:26.813" status="PASS" endtime="20161215 19:51:27.351"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161215 19:51:27.480">Get Request using : alias=openbmc, uri=/org/openbmc/inventory/system/chassis/motherboard/dimm3/event/attr/endpoints, headers=None </msg>
<msg level="INFO" timestamp="20161215 19:51:27.480">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20161215 19:51:27.351" status="PASS" endtime="20161215 19:51:27.480"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161215 19:51:27.485">${msg} = Response code:200, Content:{
  "data": [
    "/org/openbmc/records/events/40"
  ], 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161215 19:51:27.484" status="PASS" endtime="20161215 19:51:27.485"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161215 19:51:27.485">Response code:200, Content:{
  "data": [
    "/org/openbmc/records/events/40"
  ], 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161215 19:51:27.485" status="PASS" endtime="20161215 19:51:27.486"></status>
</kw>
<status starttime="20161215 19:51:27.485" status="PASS" endtime="20161215 19:51:27.486"></status>
</kw>
<status starttime="20161215 19:51:27.484" status="PASS" endtime="20161215 19:51:27.486"></status>
</kw>
<status starttime="20161215 19:51:27.480" status="PASS" endtime="20161215 19:51:27.486"></status>
</kw>
<msg level="INFO" timestamp="20161215 19:51:27.486">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161215 19:51:26.804" status="PASS" endtime="20161215 19:51:27.486"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161215 19:51:27.486">To JSON using : content={
  "data": [
    "/org/openbmc/records/events/40"
  ], 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161215 19:51:27.487">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161215 19:51:27.487">${content} = {u'data': [u'/org/openbmc/records/events/40'], u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20161215 19:51:27.486" status="PASS" endtime="20161215 19:51:27.487"></status>
</kw>
<msg level="INFO" timestamp="20161215 19:51:27.487">${dimm3_event} = [u'/org/openbmc/records/events/40']</msg>
<status starttime="20161215 19:51:26.803" status="PASS" endtime="20161215 19:51:27.487"></status>
</kw>
<kw library="BuiltIn" name="Should Not Contain">
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<arguments>
<arg>${dimm3_event}</arg>
<arg>${log_uri1}</arg>
</arguments>
<status starttime="20161215 19:51:27.487" status="PASS" endtime="20161215 19:51:27.488"></status>
</kw>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${DIMM2_URI}/event</arg>
<arg>endpoints</arg>
</arguments>
<assign>
<var>${dimm2_event}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161215 19:51:27.489">${base_uri} = /org/openbmc/inventory/system/chassis/motherboard/dimm2/event/attr/endpoints</msg>
<status starttime="20161215 19:51:27.489" status="PASS" endtime="20161215 19:51:27.489"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161215 19:51:27.494">${msg} = URI:https://9.3.23.30:443/org/openbmc/inventory/system/chassis/motherboard/dimm2/event/attr/endpoints, method:Get, args:{}</msg>
<status starttime="20161215 19:51:27.493" status="PASS" endtime="20161215 19:51:27.494"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161215 19:51:27.494">URI:https://9.3.23.30:443/org/openbmc/inventory/system/chassis/motherboard/dimm2/event/attr/endpoints, method:Get, args:{}</msg>
<status starttime="20161215 19:51:27.494" status="PASS" endtime="20161215 19:51:27.494"></status>
</kw>
<status starttime="20161215 19:51:27.494" status="PASS" endtime="20161215 19:51:27.495"></status>
</kw>
<status starttime="20161215 19:51:27.492" status="PASS" endtime="20161215 19:51:27.495"></status>
</kw>
<status starttime="20161215 19:51:27.489" status="PASS" endtime="20161215 19:51:27.495"></status>
</kw>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161215 19:51:27.496">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20161215 19:51:27.495" status="PASS" endtime="20161215 19:51:27.496"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161215 19:51:27.496">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161215 19:51:27.496" status="PASS" endtime="20161215 19:51:27.496"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161215 19:51:27.497">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20161215 19:51:27.497" status="PASS" endtime="20161215 19:51:27.497"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161215 19:51:27.498">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20161215 19:51:27.498" status="PASS" endtime="20161215 19:51:27.498"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161215 19:51:28.034">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161215 19:51:28.034">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161215 19:51:27.498" status="PASS" endtime="20161215 19:51:28.034"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161215 19:51:28.035">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161215 19:51:28.034" status="PASS" endtime="20161215 19:51:28.035"></status>
</kw>
<status starttime="20161215 19:51:27.495" status="PASS" endtime="20161215 19:51:28.035"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161215 19:51:28.113">Get Request using : alias=openbmc, uri=/org/openbmc/inventory/system/chassis/motherboard/dimm2/event/attr/endpoints, headers=None </msg>
<msg level="INFO" timestamp="20161215 19:51:28.114">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20161215 19:51:28.036" status="PASS" endtime="20161215 19:51:28.114"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161215 19:51:28.121">${msg} = Response code:200, Content:{
  "data": [
    "/org/openbmc/records/events/40"
  ], 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161215 19:51:28.121" status="PASS" endtime="20161215 19:51:28.122"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161215 19:51:28.123">Response code:200, Content:{
  "data": [
    "/org/openbmc/records/events/40"
  ], 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161215 19:51:28.122" status="PASS" endtime="20161215 19:51:28.123"></status>
</kw>
<status starttime="20161215 19:51:28.122" status="PASS" endtime="20161215 19:51:28.123"></status>
</kw>
<status starttime="20161215 19:51:28.120" status="PASS" endtime="20161215 19:51:28.123"></status>
</kw>
<status starttime="20161215 19:51:28.114" status="PASS" endtime="20161215 19:51:28.123"></status>
</kw>
<msg level="INFO" timestamp="20161215 19:51:28.124">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161215 19:51:27.488" status="PASS" endtime="20161215 19:51:28.124"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161215 19:51:28.125">To JSON using : content={
  "data": [
    "/org/openbmc/records/events/40"
  ], 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161215 19:51:28.125">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161215 19:51:28.125">${content} = {u'data': [u'/org/openbmc/records/events/40'], u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20161215 19:51:28.124" status="PASS" endtime="20161215 19:51:28.125"></status>
</kw>
<msg level="INFO" timestamp="20161215 19:51:28.125">${dimm2_event} = [u'/org/openbmc/records/events/40']</msg>
<status starttime="20161215 19:51:27.488" status="PASS" endtime="20161215 19:51:28.126"></status>
</kw>
<kw library="BuiltIn" name="Should Not Contain">
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<arguments>
<arg>${dimm2_event}</arg>
<arg>${log_uri1}</arg>
</arguments>
<status starttime="20161215 19:51:28.126" status="PASS" endtime="20161215 19:51:28.126"></status>
</kw>
<kw library="openbmc_ffdc" type="teardown" name="FFDC On Test Case Fail">
<doc>Generic FFDC entry point. Place holder to hook in</doc>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${TEST_STATUS}' == 'FAIL'</arg>
<arg>FFDC</arg>
</arguments>
<status starttime="20161215 19:51:28.128" status="PASS" endtime="20161215 19:51:28.132"></status>
</kw>
<kw library="openbmc_ffdc_methods" name="Log Test Case Status">
<doc>Test case execution result history.</doc>
<kw library="OperatingSystem" name="Create Directory">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>${FFDC_LOG_PATH}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20161215 19:51:28.133">Directory '&lt;a href="file:///tmp/root/17453/obmc-robot/logs"&gt;/tmp/root/17453/obmc-robot/logs&lt;/a&gt;' already exists.</msg>
<status starttime="20161215 19:51:28.132" status="PASS" endtime="20161215 19:51:28.133"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>OperatingSystem.File Should Exist</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<assign>
<var>${exist}</var>
</assign>
<kw library="OperatingSystem" name="File Should Exist">
<doc>Fails unless the given ``path`` points to an existing file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20161215 19:51:28.134">File '&lt;a href="file:///tmp/root/17453/obmc-robot/logs/test_history.txt"&gt;/tmp/root/17453/obmc-robot/logs/test_history.txt&lt;/a&gt;' exists.</msg>
<status starttime="20161215 19:51:28.133" status="PASS" endtime="20161215 19:51:28.134"></status>
</kw>
<msg level="INFO" timestamp="20161215 19:51:28.134">${exist} = True</msg>
<status starttime="20161215 19:51:28.133" status="PASS" endtime="20161215 19:51:28.134"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${exist}' == '${False}'</arg>
<arg>Create File</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<status starttime="20161215 19:51:28.134" status="PASS" endtime="20161215 19:51:28.137"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Get Current Time Stamp">
<doc>Get the current time stamp data</doc>
<assign>
<var>${cur_time}</var>
</assign>
<kw library="DateTime" name="Get Current Date">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20161215 19:51:28.138">${cur_time} = 2016-12-15 19:51:28:137700</msg>
<status starttime="20161215 19:51:28.138" status="PASS" endtime="20161215 19:51:28.138"></status>
</kw>
<kw library="openbmc_ffdc_list" name="Get Strip String">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20161215 19:51:28.138">${cur_time} = 20161215195128137700</msg>
<status starttime="20161215 19:51:28.138" status="PASS" endtime="20161215 19:51:28.138"></status>
</kw>
<msg level="INFO" timestamp="20161215 19:51:28.139">${cur_time} = 20161215195128137700</msg>
<status starttime="20161215 19:51:28.137" status="PASS" endtime="20161215 19:51:28.139"></status>
</kw>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
<arg>${cur_time}:${SUITE_NAME}:${TEST_NAME}:${TEST_STATUS}${\n}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20161215 19:51:28.139">Appended to file '&lt;a href="file:///tmp/root/17453/obmc-robot/logs/test_history.txt"&gt;/tmp/root/17453/obmc-robot/logs/test_history.txt&lt;/a&gt;'.</msg>
<status starttime="20161215 19:51:28.139" status="PASS" endtime="20161215 19:51:28.139"></status>
</kw>
<status starttime="20161215 19:51:28.132" status="PASS" endtime="20161215 19:51:28.140"></status>
</kw>
<status starttime="20161215 19:51:28.127" status="PASS" endtime="20161215 19:51:28.140"></status>
</kw>
<doc>***BAD PATH***
Delete an error log and verify that its
association is also removed.
</doc>
<tags>
<tag>Delete_error_log</tag>
</tags>
<status critical="yes" starttime="20161215 19:51:23.784" status="PASS" endtime="20161215 19:51:28.140"></status>
</test>
<kw library="SSHLibrary" type="teardown" name="Close All Connections">
<doc>Closes all open connections.</doc>
<status starttime="20161215 19:51:28.141" status="PASS" endtime="20161215 19:51:28.149"></status>
</kw>
<doc>This suite is used for testing eventlog association.</doc>
<status starttime="20161215 19:51:16.977" status="PASS" endtime="20161215 19:51:28.149"></status>
</suite>
<suite source="/tmp/root/17453/obmc-robot/tests/test_basic_poweron.robot" name="Test Basic Poweron" id="s1-s3">
<test name="power on test" id="s1-s3-t1">
<kw library="utils" type="setup" name="Start SOL Console Logging">
<doc>Start a new obmc_console_client process and direct</doc>
<kw library="connection_client" name="Open Connection And Log In">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw library="Collections" name="Dictionary Should Contain Key">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg level="FAIL" timestamp="20161215 19:51:28.179">Dictionary does not contain key 'host'.</msg>
<status starttime="20161215 19:51:28.179" status="FAIL" endtime="20161215 19:51:28.179"></status>
</kw>
<msg level="INFO" timestamp="20161215 19:51:28.179">${has_host} = False</msg>
<status starttime="20161215 19:51:28.178" status="PASS" endtime="20161215 19:51:28.179"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status starttime="20161215 19:51:28.182" status="PASS" endtime="20161215 19:51:28.183"></status>
</kw>
<status starttime="20161215 19:51:28.180" status="PASS" endtime="20161215 19:51:28.183"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<kw library="connection_client" name="User input SSH and HTTPs Ports">
<doc>Update the global SSH and HTTPs port variable for QEMU</doc>
<kw library="BuiltIn" name="Convert To Integer">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${SSH_PORT}</arg>
</arguments>
<assign>
<var>${port_num}</var>
</assign>
<msg level="INFO" timestamp="20161215 19:51:28.188">${port_num} = 22</msg>
<status starttime="20161215 19:51:28.187" status="PASS" endtime="20161215 19:51:28.188"></status>
</kw>
<kw library="BuiltIn" name="Replace Variables">
<doc>Replaces variables in the given text with their current values.</doc>
<arguments>
<arg>${port_num}</arg>
</arguments>
<assign>
<var>${SSH_PORT}</var>
</assign>
<msg level="INFO" timestamp="20161215 19:51:28.189">${SSH_PORT} = 22</msg>
<status starttime="20161215 19:51:28.188" status="PASS" endtime="20161215 19:51:28.189"></status>
</kw>
<kw library="BuiltIn" name="Convert To Integer">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${HTTPS_PORT}</arg>
</arguments>
<assign>
<var>${https_num}</var>
</assign>
<msg level="INFO" timestamp="20161215 19:51:28.189">${https_num} = 443</msg>
<status starttime="20161215 19:51:28.189" status="PASS" endtime="20161215 19:51:28.189"></status>
</kw>
<kw library="BuiltIn" name="Set Global Variable">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${AUTH_URI}</arg>
<arg>https://${OPENBMC_HOST}:${https_num}</arg>
</arguments>
<msg level="INFO" timestamp="20161215 19:51:28.190">${AUTH_URI} = https://9.3.23.30:443</msg>
<status starttime="20161215 19:51:28.189" status="PASS" endtime="20161215 19:51:28.190"></status>
</kw>
<status starttime="20161215 19:51:28.187" status="PASS" endtime="20161215 19:51:28.190"></status>
</kw>
<status starttime="20161215 19:51:28.183" status="PASS" endtime="20161215 19:51:28.190"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw library="Collections" name="Dictionary Should Contain Key">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg level="FAIL" timestamp="20161215 19:51:28.191">Dictionary does not contain key 'port'.</msg>
<status starttime="20161215 19:51:28.190" status="FAIL" endtime="20161215 19:51:28.191"></status>
</kw>
<msg level="INFO" timestamp="20161215 19:51:28.191">${has_port} = False</msg>
<status starttime="20161215 19:51:28.190" status="PASS" endtime="20161215 19:51:28.191"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keywords">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
</arguments>
<status starttime="20161215 19:51:28.195" status="PASS" endtime="20161215 19:51:28.196"></status>
</kw>
<kw library="SSHLibrary" name="Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status starttime="20161215 19:51:28.196" status="PASS" endtime="20161215 19:51:28.196"></status>
</kw>
<status starttime="20161215 19:51:28.195" status="PASS" endtime="20161215 19:51:28.196"></status>
</kw>
<status starttime="20161215 19:51:28.191" status="PASS" endtime="20161215 19:51:28.196"></status>
</kw>
<kw library="SSHLibrary" name="Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg level="INFO" timestamp="20161215 19:51:28.197">Logging into '9.3.23.30:22' as 'root'.</msg>
<msg level="INFO" timestamp="20161215 19:51:30.579">Read output: 7[r[999;999H[6n</msg>
<status starttime="20161215 19:51:28.197" status="PASS" endtime="20161215 19:51:30.580"></status>
</kw>
<status starttime="20161215 19:51:28.178" status="PASS" endtime="20161215 19:51:30.580"></status>
</kw>
<kw library="utils" name="Stop OBMC Console Client">
<doc>Stop any running obmc_console_client</doc>
<arguments>
<arg>${file_path}</arg>
</arguments>
<kw library="SSHLibrary" name="Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>ps ax | grep obmc-console-client | grep ${file_path} | grep -v grep | awk '{print $1}'</arg>
</arguments>
<assign>
<var>${pid}</var>
</assign>
<msg level="INFO" timestamp="20161215 19:51:30.581">Executing command 'ps ax | grep obmc-console-client | grep /tmp/obmc-console.log | grep -v grep | awk '{print $1}''.</msg>
<msg level="INFO" timestamp="20161215 19:51:30.822">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20161215 19:51:30.822">${pid} = </msg>
<status starttime="20161215 19:51:30.581" status="PASS" endtime="20161215 19:51:30.822"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${pid}' != '${EMPTY}'</arg>
<arg>Execute Command</arg>
<arg>kill -s KILL ${pid}</arg>
<arg>ELSE</arg>
<arg>Log</arg>
<arg>"No obmc-console-client process running"</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>"No obmc-console-client process running"</arg>
</arguments>
<msg level="INFO" timestamp="20161215 19:51:30.829">"No obmc-console-client process running"</msg>
<status starttime="20161215 19:51:30.829" status="PASS" endtime="20161215 19:51:30.829"></status>
</kw>
<status starttime="20161215 19:51:30.822" status="PASS" endtime="20161215 19:51:30.829"></status>
</kw>
<status starttime="20161215 19:51:30.580" status="PASS" endtime="20161215 19:51:30.830"></status>
</kw>
<kw library="SSHLibrary" name="Start Command">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>obmc-console-client &gt; ${file_path}</arg>
</arguments>
<msg level="INFO" timestamp="20161215 19:51:30.830">Starting command 'obmc-console-client &gt; /tmp/obmc-console.log'.</msg>
<status starttime="20161215 19:51:30.830" status="PASS" endtime="20161215 19:51:30.900"></status>
</kw>
<status starttime="20161215 19:51:28.177" status="PASS" endtime="20161215 19:51:30.900"></status>
</kw>
<kw library="poweroffs" name="BMC Power Off">
<doc>Powers off the system and makes sure that all states are</doc>
<kw library="connection_client" name="Open Connection And Log In">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw library="Collections" name="Dictionary Should Contain Key">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg level="FAIL" timestamp="20161215 19:51:30.903">Dictionary does not contain key 'host'.</msg>
<status starttime="20161215 19:51:30.903" status="FAIL" endtime="20161215 19:51:30.903"></status>
</kw>
<msg level="INFO" timestamp="20161215 19:51:30.903">${has_host} = False</msg>
<status starttime="20161215 19:51:30.902" status="PASS" endtime="20161215 19:51:30.903"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status starttime="20161215 19:51:30.909" status="PASS" endtime="20161215 19:51:30.909"></status>
</kw>
<status starttime="20161215 19:51:30.904" status="PASS" endtime="20161215 19:51:30.909"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<kw library="connection_client" name="User input SSH and HTTPs Ports">
<doc>Update the global SSH and HTTPs port variable for QEMU</doc>
<kw library="BuiltIn" name="Convert To Integer">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${SSH_PORT}</arg>
</arguments>
<assign>
<var>${port_num}</var>
</assign>
<msg level="INFO" timestamp="20161215 19:51:30.914">${port_num} = 22</msg>
<status starttime="20161215 19:51:30.914" status="PASS" endtime="20161215 19:51:30.914"></status>
</kw>
<kw library="BuiltIn" name="Replace Variables">
<doc>Replaces variables in the given text with their current values.</doc>
<arguments>
<arg>${port_num}</arg>
</arguments>
<assign>
<var>${SSH_PORT}</var>
</assign>
<msg level="INFO" timestamp="20161215 19:51:30.914">${SSH_PORT} = 22</msg>
<status starttime="20161215 19:51:30.914" status="PASS" endtime="20161215 19:51:30.914"></status>
</kw>
<kw library="BuiltIn" name="Convert To Integer">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${HTTPS_PORT}</arg>
</arguments>
<assign>
<var>${https_num}</var>
</assign>
<msg level="INFO" timestamp="20161215 19:51:30.915">${https_num} = 443</msg>
<status starttime="20161215 19:51:30.915" status="PASS" endtime="20161215 19:51:30.915"></status>
</kw>
<kw library="BuiltIn" name="Set Global Variable">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${AUTH_URI}</arg>
<arg>https://${OPENBMC_HOST}:${https_num}</arg>
</arguments>
<msg level="INFO" timestamp="20161215 19:51:30.916">${AUTH_URI} = https://9.3.23.30:443</msg>
<status starttime="20161215 19:51:30.915" status="PASS" endtime="20161215 19:51:30.916"></status>
</kw>
<status starttime="20161215 19:51:30.913" status="PASS" endtime="20161215 19:51:30.916"></status>
</kw>
<status starttime="20161215 19:51:30.910" status="PASS" endtime="20161215 19:51:30.916"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw library="Collections" name="Dictionary Should Contain Key">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg level="FAIL" timestamp="20161215 19:51:30.917">Dictionary does not contain key 'port'.</msg>
<status starttime="20161215 19:51:30.917" status="FAIL" endtime="20161215 19:51:30.917"></status>
</kw>
<msg level="INFO" timestamp="20161215 19:51:30.917">${has_port} = False</msg>
<status starttime="20161215 19:51:30.916" status="PASS" endtime="20161215 19:51:30.917"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keywords">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
</arguments>
<status starttime="20161215 19:51:30.921" status="PASS" endtime="20161215 19:51:30.921"></status>
</kw>
<kw library="SSHLibrary" name="Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status starttime="20161215 19:51:30.922" status="PASS" endtime="20161215 19:51:30.922"></status>
</kw>
<status starttime="20161215 19:51:30.921" status="PASS" endtime="20161215 19:51:30.922"></status>
</kw>
<status starttime="20161215 19:51:30.917" status="PASS" endtime="20161215 19:51:30.922"></status>
</kw>
<kw library="SSHLibrary" name="Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg level="INFO" timestamp="20161215 19:51:30.922">Logging into '9.3.23.30:22' as 'root'.</msg>
<msg level="INFO" timestamp="20161215 19:51:33.268">Read output: 7[r[999;999H[6n</msg>
<status starttime="20161215 19:51:30.922" status="PASS" endtime="20161215 19:51:33.268"></status>
</kw>
<status starttime="20161215 19:51:30.901" status="PASS" endtime="20161215 19:51:33.269"></status>
</kw>
<kw library="utils" name="Initiate Power Off">
<doc>Initiates the power off and waits until the Is Power Off</doc>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161215 19:51:33.270">@{arglist} = [ ]</msg>
<status starttime="20161215 19:51:33.270" status="PASS" endtime="20161215 19:51:33.270"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161215 19:51:33.271">${args} = {u'data': []}</msg>
<status starttime="20161215 19:51:33.270" status="PASS" endtime="20161215 19:51:33.271"></status>
</kw>
<kw library="rest_client" name="Call Method">
<arguments>
<arg>${OPENBMC_BASE_URI}control/chassis0/</arg>
<arg>powerOff</arg>
<arg>data=${args}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161215 19:51:33.273">${base_uri} = /org/openbmc/control/chassis0/</msg>
<status starttime="20161215 19:51:33.272" status="PASS" endtime="20161215 19:51:33.273"></status>
</kw>
<kw library="rest_client" name="OpenBMC Post Request">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161215 19:51:33.275">${base_uri} = /org/openbmc/control/chassis0//action/powerOff</msg>
<status starttime="20161215 19:51:33.274" status="PASS" endtime="20161215 19:51:33.275"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161215 19:51:33.276">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161215 19:51:33.275" status="PASS" endtime="20161215 19:51:33.276"></status>
</kw>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status starttime="20161215 19:51:33.276" status="PASS" endtime="20161215 19:51:33.277"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161215 19:51:33.285">${msg} = URI:https://9.3.23.30:443/org/openbmc/control/chassis0//action/powerOff, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161215 19:51:33.284" status="PASS" endtime="20161215 19:51:33.285"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161215 19:51:33.286">URI:https://9.3.23.30:443/org/openbmc/control/chassis0//action/powerOff, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161215 19:51:33.286" status="PASS" endtime="20161215 19:51:33.286"></status>
</kw>
<status starttime="20161215 19:51:33.285" status="PASS" endtime="20161215 19:51:33.287"></status>
</kw>
<status starttime="20161215 19:51:33.283" status="PASS" endtime="20161215 19:51:33.287"></status>
</kw>
<status starttime="20161215 19:51:33.278" status="PASS" endtime="20161215 19:51:33.287"></status>
</kw>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161215 19:51:33.288">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20161215 19:51:33.288" status="PASS" endtime="20161215 19:51:33.289"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161215 19:51:33.290">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161215 19:51:33.289" status="PASS" endtime="20161215 19:51:33.290"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161215 19:51:33.290">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20161215 19:51:33.290" status="PASS" endtime="20161215 19:51:33.290"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161215 19:51:33.291">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20161215 19:51:33.291" status="PASS" endtime="20161215 19:51:33.291"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161215 19:51:33.626">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161215 19:51:33.626">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161215 19:51:33.291" status="PASS" endtime="20161215 19:51:33.626"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161215 19:51:33.626">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161215 19:51:33.626" status="PASS" endtime="20161215 19:51:33.627"></status>
</kw>
<status starttime="20161215 19:51:33.287" status="PASS" endtime="20161215 19:51:33.627"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161215 19:51:33.968">Post Request using : alias=openbmc, uri=/org/openbmc/control/chassis0//action/powerOff, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161215 19:51:33.968">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20161215 19:51:33.627" status="PASS" endtime="20161215 19:51:33.968"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161215 19:51:33.976">${msg} = Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161215 19:51:33.975" status="PASS" endtime="20161215 19:51:33.976"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161215 19:51:33.977">Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161215 19:51:33.977" status="PASS" endtime="20161215 19:51:33.977"></status>
</kw>
<status starttime="20161215 19:51:33.976" status="PASS" endtime="20161215 19:51:33.978"></status>
</kw>
<status starttime="20161215 19:51:33.974" status="PASS" endtime="20161215 19:51:33.978"></status>
</kw>
<status starttime="20161215 19:51:33.969" status="PASS" endtime="20161215 19:51:33.978"></status>
</kw>
<msg level="INFO" timestamp="20161215 19:51:33.978">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161215 19:51:33.273" status="PASS" endtime="20161215 19:51:33.978"></status>
</kw>
<msg level="INFO" timestamp="20161215 19:51:33.979">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161215 19:51:33.271" status="PASS" endtime="20161215 19:51:33.979"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161215 19:51:33.980">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161215 19:51:33.979" status="PASS" endtime="20161215 19:51:33.980"></status>
</kw>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>1 min</arg>
<arg>10 sec</arg>
<arg>Is Power Off</arg>
</arguments>
<kw library="utils" name="Is Power Off">
<kw library="utils" name="Get Power State">
<doc>Returns the power state as an integer. Either 0 or 1.</doc>
<assign>
<var>${state}</var>
</assign>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161215 19:51:33.983">@{arglist} = [ ]</msg>
<status starttime="20161215 19:51:33.982" status="PASS" endtime="20161215 19:51:33.983"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161215 19:51:33.984">${args} = {u'data': []}</msg>
<status starttime="20161215 19:51:33.983" status="PASS" endtime="20161215 19:51:33.984"></status>
</kw>
<kw library="rest_client" name="Call Method">
<arguments>
<arg>${OPENBMC_BASE_URI}control/chassis0/</arg>
<arg>getPowerState</arg>
<arg>data=${args}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161215 19:51:33.987">${base_uri} = /org/openbmc/control/chassis0/</msg>
<status starttime="20161215 19:51:33.986" status="PASS" endtime="20161215 19:51:33.987"></status>
</kw>
<kw library="rest_client" name="OpenBMC Post Request">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161215 19:51:33.989">${base_uri} = /org/openbmc/control/chassis0//action/getPowerState</msg>
<status starttime="20161215 19:51:33.989" status="PASS" endtime="20161215 19:51:33.990"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161215 19:51:33.990">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161215 19:51:33.990" status="PASS" endtime="20161215 19:51:33.990"></status>
</kw>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status starttime="20161215 19:51:33.991" status="PASS" endtime="20161215 19:51:33.991"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161215 19:51:33.998">${msg} = URI:https://9.3.23.30:443/org/openbmc/control/chassis0//action/getPowerState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161215 19:51:33.997" status="PASS" endtime="20161215 19:51:33.998"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161215 19:51:33.999">URI:https://9.3.23.30:443/org/openbmc/control/chassis0//action/getPowerState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161215 19:51:33.999" status="PASS" endtime="20161215 19:51:33.999"></status>
</kw>
<status starttime="20161215 19:51:33.998" status="PASS" endtime="20161215 19:51:34.000"></status>
</kw>
<status starttime="20161215 19:51:33.996" status="PASS" endtime="20161215 19:51:34.000"></status>
</kw>
<status starttime="20161215 19:51:33.992" status="PASS" endtime="20161215 19:51:34.000"></status>
</kw>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161215 19:51:34.001">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20161215 19:51:34.000" status="PASS" endtime="20161215 19:51:34.001"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161215 19:51:34.002">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161215 19:51:34.002" status="PASS" endtime="20161215 19:51:34.002"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161215 19:51:34.002">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20161215 19:51:34.002" status="PASS" endtime="20161215 19:51:34.002"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161215 19:51:34.003">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20161215 19:51:34.003" status="PASS" endtime="20161215 19:51:34.003"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161215 19:51:34.803">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161215 19:51:34.803">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161215 19:51:34.003" status="PASS" endtime="20161215 19:51:34.803"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161215 19:51:34.804">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161215 19:51:34.803" status="PASS" endtime="20161215 19:51:34.804"></status>
</kw>
<status starttime="20161215 19:51:34.000" status="PASS" endtime="20161215 19:51:34.805"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161215 19:51:36.735">Post Request using : alias=openbmc, uri=/org/openbmc/control/chassis0//action/getPowerState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161215 19:51:36.735">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20161215 19:51:34.805" status="PASS" endtime="20161215 19:51:36.735"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161215 19:51:36.744">${msg} = Response code:200, Content:{
  "data": 0, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161215 19:51:36.743" status="PASS" endtime="20161215 19:51:36.744"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161215 19:51:36.745">Response code:200, Content:{
  "data": 0, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161215 19:51:36.745" status="PASS" endtime="20161215 19:51:36.745"></status>
</kw>
<status starttime="20161215 19:51:36.744" status="PASS" endtime="20161215 19:51:36.745"></status>
</kw>
<status starttime="20161215 19:51:36.743" status="PASS" endtime="20161215 19:51:36.746"></status>
</kw>
<status starttime="20161215 19:51:36.736" status="PASS" endtime="20161215 19:51:36.746"></status>
</kw>
<msg level="INFO" timestamp="20161215 19:51:36.746">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161215 19:51:33.987" status="PASS" endtime="20161215 19:51:36.746"></status>
</kw>
<msg level="INFO" timestamp="20161215 19:51:36.746">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161215 19:51:33.985" status="PASS" endtime="20161215 19:51:36.746"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161215 19:51:36.749">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161215 19:51:36.747" status="PASS" endtime="20161215 19:51:36.749"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161215 19:51:36.750">To JSON using : content={
  "data": 0, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161215 19:51:36.750">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161215 19:51:36.750">${content} = {u'data': 0, u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20161215 19:51:36.749" status="PASS" endtime="20161215 19:51:36.750"></status>
</kw>
<msg level="INFO" timestamp="20161215 19:51:36.750">${state} = 0</msg>
<status starttime="20161215 19:51:33.981" status="PASS" endtime="20161215 19:51:36.750"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${state}</arg>
<arg>${0}</arg>
</arguments>
<status starttime="20161215 19:51:36.750" status="PASS" endtime="20161215 19:51:36.751"></status>
</kw>
<status starttime="20161215 19:51:33.981" status="PASS" endtime="20161215 19:51:36.751"></status>
</kw>
<status starttime="20161215 19:51:33.980" status="PASS" endtime="20161215 19:51:36.751"></status>
</kw>
<status starttime="20161215 19:51:33.269" status="PASS" endtime="20161215 19:51:36.751"></status>
</kw>
<kw library="poweroffs" name="Check Power Off States">
<doc>Checks that the BMC state, power state, and boot progress</doc>
<kw library="utils" name="Get Power State">
<doc>Returns the power state as an integer. Either 0 or 1.</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161215 19:51:36.753">@{arglist} = [ ]</msg>
<status starttime="20161215 19:51:36.752" status="PASS" endtime="20161215 19:51:36.753"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161215 19:51:36.753">${args} = {u'data': []}</msg>
<status starttime="20161215 19:51:36.753" status="PASS" endtime="20161215 19:51:36.753"></status>
</kw>
<kw library="rest_client" name="Call Method">
<arguments>
<arg>${OPENBMC_BASE_URI}control/chassis0/</arg>
<arg>getPowerState</arg>
<arg>data=${args}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161215 19:51:36.754">${base_uri} = /org/openbmc/control/chassis0/</msg>
<status starttime="20161215 19:51:36.754" status="PASS" endtime="20161215 19:51:36.754"></status>
</kw>
<kw library="rest_client" name="OpenBMC Post Request">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161215 19:51:36.756">${base_uri} = /org/openbmc/control/chassis0//action/getPowerState</msg>
<status starttime="20161215 19:51:36.755" status="PASS" endtime="20161215 19:51:36.756"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161215 19:51:36.756">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161215 19:51:36.756" status="PASS" endtime="20161215 19:51:36.756"></status>
</kw>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status starttime="20161215 19:51:36.757" status="PASS" endtime="20161215 19:51:36.757"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161215 19:51:36.762">${msg} = URI:https://9.3.23.30:443/org/openbmc/control/chassis0//action/getPowerState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161215 19:51:36.761" status="PASS" endtime="20161215 19:51:36.762"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161215 19:51:36.762">URI:https://9.3.23.30:443/org/openbmc/control/chassis0//action/getPowerState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161215 19:51:36.762" status="PASS" endtime="20161215 19:51:36.763"></status>
</kw>
<status starttime="20161215 19:51:36.762" status="PASS" endtime="20161215 19:51:36.763"></status>
</kw>
<status starttime="20161215 19:51:36.760" status="PASS" endtime="20161215 19:51:36.763"></status>
</kw>
<status starttime="20161215 19:51:36.758" status="PASS" endtime="20161215 19:51:36.763"></status>
</kw>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161215 19:51:36.764">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20161215 19:51:36.763" status="PASS" endtime="20161215 19:51:36.764"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161215 19:51:36.764">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161215 19:51:36.764" status="PASS" endtime="20161215 19:51:36.765"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161215 19:51:36.765">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20161215 19:51:36.765" status="PASS" endtime="20161215 19:51:36.765"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161215 19:51:36.766">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20161215 19:51:36.765" status="PASS" endtime="20161215 19:51:36.766"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161215 19:51:40.031">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161215 19:51:40.031">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161215 19:51:36.766" status="PASS" endtime="20161215 19:51:40.031"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161215 19:51:40.033">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161215 19:51:40.032" status="PASS" endtime="20161215 19:51:40.033"></status>
</kw>
<status starttime="20161215 19:51:36.763" status="PASS" endtime="20161215 19:51:40.033"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161215 19:51:41.737">Post Request using : alias=openbmc, uri=/org/openbmc/control/chassis0//action/getPowerState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161215 19:51:41.737">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20161215 19:51:40.033" status="PASS" endtime="20161215 19:51:41.737"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161215 19:51:41.747">${msg} = Response code:200, Content:{
  "data": 0, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161215 19:51:41.743" status="PASS" endtime="20161215 19:51:41.747"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161215 19:51:41.748">Response code:200, Content:{
  "data": 0, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161215 19:51:41.748" status="PASS" endtime="20161215 19:51:41.749"></status>
</kw>
<status starttime="20161215 19:51:41.747" status="PASS" endtime="20161215 19:51:41.749"></status>
</kw>
<status starttime="20161215 19:51:41.743" status="PASS" endtime="20161215 19:51:41.749"></status>
</kw>
<status starttime="20161215 19:51:41.737" status="PASS" endtime="20161215 19:51:41.749"></status>
</kw>
<msg level="INFO" timestamp="20161215 19:51:41.749">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161215 19:51:36.755" status="PASS" endtime="20161215 19:51:41.749"></status>
</kw>
<msg level="INFO" timestamp="20161215 19:51:41.749">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161215 19:51:36.753" status="PASS" endtime="20161215 19:51:41.749"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161215 19:51:41.750">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161215 19:51:41.750" status="PASS" endtime="20161215 19:51:41.750"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161215 19:51:41.751">To JSON using : content={
  "data": 0, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161215 19:51:41.751">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161215 19:51:41.751">${content} = {u'data': 0, u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20161215 19:51:41.750" status="PASS" endtime="20161215 19:51:41.751"></status>
</kw>
<msg level="INFO" timestamp="20161215 19:51:41.751">${power_state} = 0</msg>
<status starttime="20161215 19:51:36.752" status="PASS" endtime="20161215 19:51:41.751"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${power_state}</arg>
<arg>${0}</arg>
</arguments>
<status starttime="20161215 19:51:41.751" status="PASS" endtime="20161215 19:51:41.752"></status>
</kw>
<kw library="BuiltIn" name="Log To Console">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Power State: ${power_state}</arg>
</arguments>
<status starttime="20161215 19:51:41.752" status="PASS" endtime="20161215 19:51:41.752"></status>
</kw>
<kw library="utils" name="Get Boot Progress">
<assign>
<var>${boot_progress}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161215 19:51:41.754">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20161215 19:51:41.754" status="PASS" endtime="20161215 19:51:41.754"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161215 19:51:41.759">${msg} = URI:https://9.3.23.30:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20161215 19:51:41.758" status="PASS" endtime="20161215 19:51:41.759"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161215 19:51:41.759">URI:https://9.3.23.30:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20161215 19:51:41.759" status="PASS" endtime="20161215 19:51:41.759"></status>
</kw>
<status starttime="20161215 19:51:41.759" status="PASS" endtime="20161215 19:51:41.760"></status>
</kw>
<status starttime="20161215 19:51:41.757" status="PASS" endtime="20161215 19:51:41.760"></status>
</kw>
<status starttime="20161215 19:51:41.754" status="PASS" endtime="20161215 19:51:41.760"></status>
</kw>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161215 19:51:41.761">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20161215 19:51:41.760" status="PASS" endtime="20161215 19:51:41.761"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161215 19:51:41.761">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161215 19:51:41.761" status="PASS" endtime="20161215 19:51:41.761"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161215 19:51:41.762">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20161215 19:51:41.762" status="PASS" endtime="20161215 19:51:41.762"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161215 19:51:41.763">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20161215 19:51:41.762" status="PASS" endtime="20161215 19:51:41.763"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161215 19:51:42.762">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161215 19:51:42.762">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161215 19:51:41.763" status="PASS" endtime="20161215 19:51:42.762"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161215 19:51:42.763">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161215 19:51:42.763" status="PASS" endtime="20161215 19:51:42.763"></status>
</kw>
<status starttime="20161215 19:51:41.760" status="PASS" endtime="20161215 19:51:42.764"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161215 19:51:43.493">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None </msg>
<msg level="INFO" timestamp="20161215 19:51:43.493">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20161215 19:51:42.764" status="PASS" endtime="20161215 19:51:43.493"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161215 19:51:43.500">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161215 19:51:43.499" status="PASS" endtime="20161215 19:51:43.500"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161215 19:51:43.501">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161215 19:51:43.501" status="PASS" endtime="20161215 19:51:43.501"></status>
</kw>
<status starttime="20161215 19:51:43.500" status="PASS" endtime="20161215 19:51:43.501"></status>
</kw>
<status starttime="20161215 19:51:43.498" status="PASS" endtime="20161215 19:51:43.501"></status>
</kw>
<status starttime="20161215 19:51:43.494" status="PASS" endtime="20161215 19:51:43.502"></status>
</kw>
<msg level="INFO" timestamp="20161215 19:51:43.502">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161215 19:51:41.753" status="PASS" endtime="20161215 19:51:43.502"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161215 19:51:43.503">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161215 19:51:43.503">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161215 19:51:43.503">${content} = {u'data': u'Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20161215 19:51:43.502" status="PASS" endtime="20161215 19:51:43.503"></status>
</kw>
<msg level="INFO" timestamp="20161215 19:51:43.503">${state} = Off</msg>
<status starttime="20161215 19:51:41.752" status="PASS" endtime="20161215 19:51:43.503"></status>
</kw>
<msg level="INFO" timestamp="20161215 19:51:43.504">${boot_progress} = Off</msg>
<status starttime="20161215 19:51:41.752" status="PASS" endtime="20161215 19:51:43.504"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>Off</arg>
</arguments>
<status starttime="20161215 19:51:43.504" status="PASS" endtime="20161215 19:51:43.504"></status>
</kw>
<kw library="BuiltIn" name="Log To Console">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Boot Progress: ${boot_progress}</arg>
</arguments>
<status starttime="20161215 19:51:43.505" status="PASS" endtime="20161215 19:51:43.505"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>BMC_READY</arg>
<arg>HOST_POWERED_OFF</arg>
</arguments>
<assign>
<var>@{states}</var>
</assign>
<msg level="INFO" timestamp="20161215 19:51:43.506">@{states} = [ BMC_READY | HOST_POWERED_OFF ]</msg>
<status starttime="20161215 19:51:43.505" status="PASS" endtime="20161215 19:51:43.506"></status>
</kw>
<kw library="utils" name="Get BMC State">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${bmc_state}</var>
</assign>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161215 19:51:43.507">@{arglist} = [ ]</msg>
<status starttime="20161215 19:51:43.507" status="PASS" endtime="20161215 19:51:43.507"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161215 19:51:43.508">${args} = {u'data': []}</msg>
<status starttime="20161215 19:51:43.508" status="PASS" endtime="20161215 19:51:43.508"></status>
</kw>
<kw library="rest_client" name="Call Method">
<arguments>
<arg>${OPENBMC_BASE_URI}managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161215 19:51:43.510">${base_uri} = /org/openbmc/managers/System/</msg>
<status starttime="20161215 19:51:43.509" status="PASS" endtime="20161215 19:51:43.510"></status>
</kw>
<kw library="rest_client" name="OpenBMC Post Request">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161215 19:51:43.511">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status starttime="20161215 19:51:43.511" status="PASS" endtime="20161215 19:51:43.511"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161215 19:51:43.512">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161215 19:51:43.511" status="PASS" endtime="20161215 19:51:43.512"></status>
</kw>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status starttime="20161215 19:51:43.512" status="PASS" endtime="20161215 19:51:43.512"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161215 19:51:43.518">${msg} = URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161215 19:51:43.517" status="PASS" endtime="20161215 19:51:43.518"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161215 19:51:43.519">URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161215 19:51:43.519" status="PASS" endtime="20161215 19:51:43.519"></status>
</kw>
<status starttime="20161215 19:51:43.518" status="PASS" endtime="20161215 19:51:43.520"></status>
</kw>
<status starttime="20161215 19:51:43.516" status="PASS" endtime="20161215 19:51:43.520"></status>
</kw>
<status starttime="20161215 19:51:43.513" status="PASS" endtime="20161215 19:51:43.520"></status>
</kw>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161215 19:51:43.521">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20161215 19:51:43.520" status="PASS" endtime="20161215 19:51:43.521"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161215 19:51:43.521">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161215 19:51:43.521" status="PASS" endtime="20161215 19:51:43.521"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161215 19:51:43.522">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20161215 19:51:43.522" status="PASS" endtime="20161215 19:51:43.522"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161215 19:51:43.523">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20161215 19:51:43.522" status="PASS" endtime="20161215 19:51:43.523"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161215 19:51:44.868">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161215 19:51:44.869">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161215 19:51:43.523" status="PASS" endtime="20161215 19:51:44.869"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161215 19:51:44.870">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161215 19:51:44.869" status="PASS" endtime="20161215 19:51:44.870"></status>
</kw>
<status starttime="20161215 19:51:43.520" status="PASS" endtime="20161215 19:51:44.870"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161215 19:51:45.840">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161215 19:51:45.840">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20161215 19:51:44.871" status="PASS" endtime="20161215 19:51:45.840"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161215 19:51:45.849">${msg} = Response code:200, Content:{
  "data": "BMC_READY", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161215 19:51:45.846" status="PASS" endtime="20161215 19:51:45.849"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161215 19:51:45.851">Response code:200, Content:{
  "data": "BMC_READY", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161215 19:51:45.850" status="PASS" endtime="20161215 19:51:45.851"></status>
</kw>
<status starttime="20161215 19:51:45.849" status="PASS" endtime="20161215 19:51:45.851"></status>
</kw>
<status starttime="20161215 19:51:45.846" status="PASS" endtime="20161215 19:51:45.851"></status>
</kw>
<status starttime="20161215 19:51:45.841" status="PASS" endtime="20161215 19:51:45.851"></status>
</kw>
<msg level="INFO" timestamp="20161215 19:51:45.852">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161215 19:51:43.510" status="PASS" endtime="20161215 19:51:45.852"></status>
</kw>
<msg level="INFO" timestamp="20161215 19:51:45.852">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161215 19:51:43.508" status="PASS" endtime="20161215 19:51:45.852"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161215 19:51:45.853">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161215 19:51:45.852" status="PASS" endtime="20161215 19:51:45.853"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161215 19:51:45.854">To JSON using : content={
  "data": "BMC_READY", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161215 19:51:45.854">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161215 19:51:45.854">${content} = {u'data': u'BMC_READY', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20161215 19:51:45.854" status="PASS" endtime="20161215 19:51:45.854"></status>
</kw>
<msg level="INFO" timestamp="20161215 19:51:45.855">${bmc_state} = BMC_READY</msg>
<status starttime="20161215 19:51:43.506" status="PASS" endtime="20161215 19:51:45.855"></status>
</kw>
<kw library="BuiltIn" name="Should Contain">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${states}</arg>
<arg>${bmc_state}</arg>
</arguments>
<status starttime="20161215 19:51:45.855" status="PASS" endtime="20161215 19:51:45.856"></status>
</kw>
<kw library="BuiltIn" name="Log To Console">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>BMC State: ${bmc_state}</arg>
</arguments>
<status starttime="20161215 19:51:45.856" status="PASS" endtime="20161215 19:51:45.856"></status>
</kw>
<status starttime="20161215 19:51:36.752" status="PASS" endtime="20161215 19:51:45.856"></status>
</kw>
<kw library="SSHLibrary" name="Close Connection">
<doc>Closes the current connection.</doc>
<status starttime="20161215 19:51:45.857" status="PASS" endtime="20161215 19:51:45.889"></status>
</kw>
<status starttime="20161215 19:51:30.901" status="PASS" endtime="20161215 19:51:45.889"></status>
</kw>
<kw library="powerons" name="BMC Power On">
<doc>Powers on the system, checks that the OS is functional, and</doc>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>alias=bmc_connection</arg>
</arguments>
<assign>
<var>&amp;{bmc_connection_args}</var>
</assign>
<msg level="INFO" timestamp="20161215 19:51:45.890">&amp;{bmc_connection_args} = { alias=bmc_connection }</msg>
<status starttime="20161215 19:51:45.889" status="PASS" endtime="20161215 19:51:45.890"></status>
</kw>
<kw library="connection_client" name="Open Connection And Log In">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<arguments>
<arg>&amp;{bmc_connection_args}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw library="Collections" name="Dictionary Should Contain Key">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg level="FAIL" timestamp="20161215 19:51:45.892">Dictionary does not contain key 'host'.</msg>
<status starttime="20161215 19:51:45.891" status="FAIL" endtime="20161215 19:51:45.892"></status>
</kw>
<msg level="INFO" timestamp="20161215 19:51:45.892">${has_host} = False</msg>
<status starttime="20161215 19:51:45.891" status="PASS" endtime="20161215 19:51:45.892"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status starttime="20161215 19:51:45.895" status="PASS" endtime="20161215 19:51:45.895"></status>
</kw>
<status starttime="20161215 19:51:45.892" status="PASS" endtime="20161215 19:51:45.895"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<kw library="connection_client" name="User input SSH and HTTPs Ports">
<doc>Update the global SSH and HTTPs port variable for QEMU</doc>
<kw library="BuiltIn" name="Convert To Integer">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${SSH_PORT}</arg>
</arguments>
<assign>
<var>${port_num}</var>
</assign>
<msg level="INFO" timestamp="20161215 19:51:45.899">${port_num} = 22</msg>
<status starttime="20161215 19:51:45.899" status="PASS" endtime="20161215 19:51:45.899"></status>
</kw>
<kw library="BuiltIn" name="Replace Variables">
<doc>Replaces variables in the given text with their current values.</doc>
<arguments>
<arg>${port_num}</arg>
</arguments>
<assign>
<var>${SSH_PORT}</var>
</assign>
<msg level="INFO" timestamp="20161215 19:51:45.900">${SSH_PORT} = 22</msg>
<status starttime="20161215 19:51:45.899" status="PASS" endtime="20161215 19:51:45.900"></status>
</kw>
<kw library="BuiltIn" name="Convert To Integer">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${HTTPS_PORT}</arg>
</arguments>
<assign>
<var>${https_num}</var>
</assign>
<msg level="INFO" timestamp="20161215 19:51:45.900">${https_num} = 443</msg>
<status starttime="20161215 19:51:45.900" status="PASS" endtime="20161215 19:51:45.900"></status>
</kw>
<kw library="BuiltIn" name="Set Global Variable">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${AUTH_URI}</arg>
<arg>https://${OPENBMC_HOST}:${https_num}</arg>
</arguments>
<msg level="INFO" timestamp="20161215 19:51:45.901">${AUTH_URI} = https://9.3.23.30:443</msg>
<status starttime="20161215 19:51:45.900" status="PASS" endtime="20161215 19:51:45.901"></status>
</kw>
<status starttime="20161215 19:51:45.899" status="PASS" endtime="20161215 19:51:45.901"></status>
</kw>
<status starttime="20161215 19:51:45.896" status="PASS" endtime="20161215 19:51:45.901"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw library="Collections" name="Dictionary Should Contain Key">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg level="FAIL" timestamp="20161215 19:51:45.902">Dictionary does not contain key 'port'.</msg>
<status starttime="20161215 19:51:45.902" status="FAIL" endtime="20161215 19:51:45.902"></status>
</kw>
<msg level="INFO" timestamp="20161215 19:51:45.902">${has_port} = False</msg>
<status starttime="20161215 19:51:45.901" status="PASS" endtime="20161215 19:51:45.902"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keywords">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
</arguments>
<status starttime="20161215 19:51:45.906" status="PASS" endtime="20161215 19:51:45.906"></status>
</kw>
<kw library="SSHLibrary" name="Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status starttime="20161215 19:51:45.907" status="PASS" endtime="20161215 19:51:45.907"></status>
</kw>
<status starttime="20161215 19:51:45.906" status="PASS" endtime="20161215 19:51:45.907"></status>
</kw>
<status starttime="20161215 19:51:45.902" status="PASS" endtime="20161215 19:51:45.907"></status>
</kw>
<kw library="SSHLibrary" name="Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg level="INFO" timestamp="20161215 19:51:45.908">Logging into '9.3.23.30:22' as 'root'.</msg>
<msg level="INFO" timestamp="20161215 19:51:50.492">Read output: 7[r[999;999H[6n</msg>
<status starttime="20161215 19:51:45.907" status="PASS" endtime="20161215 19:51:50.492"></status>
</kw>
<status starttime="20161215 19:51:45.890" status="PASS" endtime="20161215 19:51:50.493"></status>
</kw>
<kw library="utils" name="Initiate Power On">
<doc>Initiates the power on and waits until the Is Power On</doc>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161215 19:51:50.494">@{arglist} = [ ]</msg>
<status starttime="20161215 19:51:50.494" status="PASS" endtime="20161215 19:51:50.494"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161215 19:51:50.495">${args} = {u'data': []}</msg>
<status starttime="20161215 19:51:50.494" status="PASS" endtime="20161215 19:51:50.495"></status>
</kw>
<kw library="rest_client" name="Call Method">
<arguments>
<arg>${OPENBMC_BASE_URI}control/chassis0/</arg>
<arg>powerOn</arg>
<arg>data=${args}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161215 19:51:50.497">${base_uri} = /org/openbmc/control/chassis0/</msg>
<status starttime="20161215 19:51:50.496" status="PASS" endtime="20161215 19:51:50.497"></status>
</kw>
<kw library="rest_client" name="OpenBMC Post Request">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161215 19:51:50.499">${base_uri} = /org/openbmc/control/chassis0//action/powerOn</msg>
<status starttime="20161215 19:51:50.499" status="PASS" endtime="20161215 19:51:50.499"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161215 19:51:50.500">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161215 19:51:50.499" status="PASS" endtime="20161215 19:51:50.500"></status>
</kw>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status starttime="20161215 19:51:50.500" status="PASS" endtime="20161215 19:51:50.500"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161215 19:51:50.507">${msg} = URI:https://9.3.23.30:443/org/openbmc/control/chassis0//action/powerOn, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161215 19:51:50.506" status="PASS" endtime="20161215 19:51:50.507"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161215 19:51:50.508">URI:https://9.3.23.30:443/org/openbmc/control/chassis0//action/powerOn, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161215 19:51:50.508" status="PASS" endtime="20161215 19:51:50.508"></status>
</kw>
<status starttime="20161215 19:51:50.507" status="PASS" endtime="20161215 19:51:50.509"></status>
</kw>
<status starttime="20161215 19:51:50.505" status="PASS" endtime="20161215 19:51:50.509"></status>
</kw>
<status starttime="20161215 19:51:50.501" status="PASS" endtime="20161215 19:51:50.509"></status>
</kw>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161215 19:51:50.510">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20161215 19:51:50.510" status="PASS" endtime="20161215 19:51:50.511"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161215 19:51:50.511">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161215 19:51:50.511" status="PASS" endtime="20161215 19:51:50.511"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161215 19:51:50.512">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20161215 19:51:50.511" status="PASS" endtime="20161215 19:51:50.512"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161215 19:51:50.512">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20161215 19:51:50.512" status="PASS" endtime="20161215 19:51:50.512"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161215 19:51:51.389">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161215 19:51:51.389">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161215 19:51:50.513" status="PASS" endtime="20161215 19:51:51.389"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161215 19:51:51.390">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161215 19:51:51.389" status="PASS" endtime="20161215 19:51:51.390"></status>
</kw>
<status starttime="20161215 19:51:50.509" status="PASS" endtime="20161215 19:51:51.390"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="FAIL" timestamp="20161215 19:52:03.007">ConnectionError: HTTPSConnectionPool(host='9.3.23.30', port=443): Max retries exceeded with url: /org/openbmc/control/chassis0//action/powerOn (Caused by NewConnectionError('&lt;requests.packages.urllib3.connection.VerifiedHTTPSConnection object at 0x3fff7f6f8310&gt;: Failed to establish a new connection: [Errno 111] Connection refused',))</msg>
<status starttime="20161215 19:51:51.391" status="FAIL" endtime="20161215 19:52:03.008"></status>
</kw>
<status starttime="20161215 19:51:50.497" status="FAIL" endtime="20161215 19:52:03.008"></status>
</kw>
<status starttime="20161215 19:51:50.495" status="FAIL" endtime="20161215 19:52:03.008"></status>
</kw>
<status starttime="20161215 19:51:50.493" status="FAIL" endtime="20161215 19:52:03.009"></status>
</kw>
<status starttime="20161215 19:51:45.889" status="FAIL" endtime="20161215 19:52:03.009"></status>
</kw>
<kw type="teardown" name="Test Exit Logs">
<doc>Log FFDC if failed and collect SOL</doc>
<kw library="openbmc_ffdc" name="FFDC On Test Case Fail">
<doc>Generic FFDC entry point. Place holder to hook in</doc>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${TEST_STATUS}' == 'FAIL'</arg>
<arg>FFDC</arg>
</arguments>
<kw library="openbmc_ffdc" name="FFDC">
<doc>Main entry point to gather logs on Test case failure</doc>
<kw library="openbmc_ffdc_utils" name="Get Current Time Stamp">
<doc>Get the current time stamp data</doc>
<assign>
<var>${cur_time}</var>
</assign>
<kw library="DateTime" name="Get Current Date">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20161215 19:52:03.017">${cur_time} = 2016-12-15 19:52:03:016694</msg>
<status starttime="20161215 19:52:03.016" status="PASS" endtime="20161215 19:52:03.017"></status>
</kw>
<kw library="openbmc_ffdc_list" name="Get Strip String">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20161215 19:52:03.018">${cur_time} = 20161215195203016694</msg>
<status starttime="20161215 19:52:03.017" status="PASS" endtime="20161215 19:52:03.018"></status>
</kw>
<msg level="INFO" timestamp="20161215 19:52:03.018">${cur_time} = 20161215195203016694</msg>
<status starttime="20161215 19:52:03.016" status="PASS" endtime="20161215 19:52:03.018"></status>
</kw>
<kw library="BuiltIn" name="Set Global Variable">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${FFDC_TIME}</arg>
<arg>${cur_time}</arg>
</arguments>
<msg level="INFO" timestamp="20161215 19:52:03.022">${FFDC_TIME} = 20161215195203016694</msg>
<status starttime="20161215 19:52:03.018" status="PASS" endtime="20161215 19:52:03.022"></status>
</kw>
<kw library="BuiltIn" name="Log To Console">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${\n}FFDC Collection Started \t: ${cur_time}</arg>
</arguments>
<status starttime="20161215 19:52:03.022" status="PASS" endtime="20161215 19:52:03.022"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Get Test Dir and Name">
<doc>SUITE_NAME and TEST_NAME are automatic variables</doc>
<assign>
<var>${suitename}</var>
<var>${testname}</var>
</assign>
<kw library="openbmc_ffdc_list" name="Get Strip String">
<doc>########################################################################</doc>
<arguments>
<arg>${SUITE_NAME}</arg>
</arguments>
<assign>
<var>${suite_name}</var>
</assign>
<msg level="INFO" timestamp="20161215 19:52:03.023">${suite_name} = TestsTestBasicPoweron</msg>
<status starttime="20161215 19:52:03.023" status="PASS" endtime="20161215 19:52:03.023"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${FFDC_TIME}_</arg>
<arg>${suite_name}</arg>
</arguments>
<assign>
<var>${suite_name}</var>
</assign>
<msg level="INFO" timestamp="20161215 19:52:03.024">${suite_name} = 20161215195203016694_TestsTestBasicPoweron</msg>
<status starttime="20161215 19:52:03.024" status="PASS" endtime="20161215 19:52:03.024"></status>
</kw>
<kw library="openbmc_ffdc_list" name="Get Strip String">
<doc>########################################################################</doc>
<arguments>
<arg>${TEST_NAME}</arg>
</arguments>
<assign>
<var>${test_name}</var>
</assign>
<msg level="INFO" timestamp="20161215 19:52:03.025">${test_name} = powerontest</msg>
<status starttime="20161215 19:52:03.024" status="PASS" endtime="20161215 19:52:03.025"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${FFDC_TIME}_</arg>
<arg>${test_name}</arg>
</arguments>
<assign>
<var>${test_name}</var>
</assign>
<msg level="INFO" timestamp="20161215 19:52:03.025">${test_name} = 20161215195203016694_powerontest</msg>
<status starttime="20161215 19:52:03.025" status="PASS" endtime="20161215 19:52:03.025"></status>
</kw>
<msg level="INFO" timestamp="20161215 19:52:03.025">${suitename} = 20161215195203016694_TestsTestBasicPoweron</msg>
<msg level="INFO" timestamp="20161215 19:52:03.026">${testname} = 20161215195203016694_powerontest</msg>
<status starttime="20161215 19:52:03.023" status="PASS" endtime="20161215 19:52:03.026"></status>
</kw>
<kw library="BuiltIn" name="Set Global Variable">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${FFDC_DIR_PATH}</arg>
<arg>${FFDC_LOG_PATH}${suitename}${/}${testname}</arg>
</arguments>
<msg level="INFO" timestamp="20161215 19:52:03.029">${FFDC_DIR_PATH} = /tmp/root/17453/obmc-robot/logs/20161215195203016694_TestsTestBasicPoweron/20161215195203016694_powerontest</msg>
<status starttime="20161215 19:52:03.026" status="PASS" endtime="20161215 19:52:03.029"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${FFDC_DIR_PATH}${/}</arg>
<arg>${FFDC_TIME}_</arg>
</arguments>
<assign>
<var>${prefix}</var>
</assign>
<msg level="INFO" timestamp="20161215 19:52:03.030">${prefix} = /tmp/root/17453/obmc-robot/logs/20161215195203016694_TestsTestBasicPoweron/20161215195203016694_powerontest/20161215195203016694_</msg>
<status starttime="20161215 19:52:03.030" status="PASS" endtime="20161215 19:52:03.030"></status>
</kw>
<kw library="BuiltIn" name="Set Global Variable">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${LOG_PREFIX}</arg>
<arg>${prefix}</arg>
</arguments>
<msg level="INFO" timestamp="20161215 19:52:03.033">${LOG_PREFIX} = /tmp/root/17453/obmc-robot/logs/20161215195203016694_TestsTestBasicPoweron/20161215195203016694_powerontest/20161215195203016694_</msg>
<status starttime="20161215 19:52:03.030" status="PASS" endtime="20161215 19:52:03.033"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Create FFDC Directory">
<doc>Creates directory and report file</doc>
<kw library="OperatingSystem" name="Create Directory">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>${FFDC_DIR_PATH}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20161215 19:52:03.034">Created directory '&lt;a href="file:///tmp/root/17453/obmc-robot/logs/20161215195203016694_TestsTestBasicPoweron/20161215195203016694_powerontest"&gt;/tmp/root/17453/obmc-robot/logs/20161215195203016694_TestsTestBasicPoweron/20161215195203016694_powerontest&lt;/a&gt;'.</msg>
<status starttime="20161215 19:52:03.034" status="PASS" endtime="20161215 19:52:03.034"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Create FFDC Report File">
<doc>Create a generic file name for ffdc</doc>
<kw library="BuiltIn" name="Set Suite Variable">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${FFDC_FILE_PATH}</arg>
<arg>${FFDC_DIR_PATH}${/}${FFDC_TIME}_BMC_general.txt</arg>
</arguments>
<msg level="INFO" timestamp="20161215 19:52:03.039">${FFDC_FILE_PATH} = /tmp/root/17453/obmc-robot/logs/20161215195203016694_TestsTestBasicPoweron/20161215195203016694_powerontest/20161215195203016694_BMC_general.txt</msg>
<status starttime="20161215 19:52:03.035" status="PASS" endtime="20161215 19:52:03.039"></status>
</kw>
<kw library="OperatingSystem" name="Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${FFDC_FILE_PATH}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20161215 19:52:03.039">Created file '&lt;a href="file:///tmp/root/17453/obmc-robot/logs/20161215195203016694_TestsTestBasicPoweron/20161215195203016694_powerontest/20161215195203016694_BMC_general.txt"&gt;/tmp/root/17453/obmc-robot/logs/20161215195203016694_TestsTestBasicPoweron/20161215195203016694_powerontest/20161215195203016694_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20161215 19:52:03.039" status="PASS" endtime="20161215 19:52:03.039"></status>
</kw>
<status starttime="20161215 19:52:03.034" status="PASS" endtime="20161215 19:52:03.039"></status>
</kw>
<status starttime="20161215 19:52:03.033" status="PASS" endtime="20161215 19:52:03.040"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Header Message">
<doc>Write header message to the report document manifest.</doc>
<kw library="openbmc_ffdc_utils" name="Write Data to File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${HEADER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20161215 19:52:03.041">Appended to file '&lt;a href="file:///tmp/root/17453/obmc-robot/logs/20161215195203016694_TestsTestBasicPoweron/20161215195203016694_powerontest/20161215195203016694_BMC_general.txt"&gt;/tmp/root/17453/obmc-robot/logs/20161215195203016694_TestsTestBasicPoweron/20161215195203016694_powerontest/20161215195203016694_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20161215 19:52:03.041" status="PASS" endtime="20161215 19:52:03.041"></status>
</kw>
<status starttime="20161215 19:52:03.040" status="PASS" endtime="20161215 19:52:03.041"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data to File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20161215 19:52:03.042">Appended to file '&lt;a href="file:///tmp/root/17453/obmc-robot/logs/20161215195203016694_TestsTestBasicPoweron/20161215195203016694_powerontest/20161215195203016694_BMC_general.txt"&gt;/tmp/root/17453/obmc-robot/logs/20161215195203016694_TestsTestBasicPoweron/20161215195203016694_powerontest/20161215195203016694_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20161215 19:52:03.042" status="PASS" endtime="20161215 19:52:03.042"></status>
</kw>
<status starttime="20161215 19:52:03.041" status="PASS" endtime="20161215 19:52:03.042"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data to File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Suite File\t\t: ${SUITE_NAME} ${\n}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20161215 19:52:03.043">Appended to file '&lt;a href="file:///tmp/root/17453/obmc-robot/logs/20161215195203016694_TestsTestBasicPoweron/20161215195203016694_powerontest/20161215195203016694_BMC_general.txt"&gt;/tmp/root/17453/obmc-robot/logs/20161215195203016694_TestsTestBasicPoweron/20161215195203016694_powerontest/20161215195203016694_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20161215 19:52:03.043" status="PASS" endtime="20161215 19:52:03.043"></status>
</kw>
<status starttime="20161215 19:52:03.042" status="PASS" endtime="20161215 19:52:03.044"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data to File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Case Name\t\t: ${TEST_NAME}${\n}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20161215 19:52:03.045">Appended to file '&lt;a href="file:///tmp/root/17453/obmc-robot/logs/20161215195203016694_TestsTestBasicPoweron/20161215195203016694_powerontest/20161215195203016694_BMC_general.txt"&gt;/tmp/root/17453/obmc-robot/logs/20161215195203016694_TestsTestBasicPoweron/20161215195203016694_powerontest/20161215195203016694_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20161215 19:52:03.044" status="PASS" endtime="20161215 19:52:03.045"></status>
</kw>
<status starttime="20161215 19:52:03.044" status="PASS" endtime="20161215 19:52:03.045"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data to File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Source File\t: ${SUITE_SOURCE}${\n}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20161215 19:52:03.046">Appended to file '&lt;a href="file:///tmp/root/17453/obmc-robot/logs/20161215195203016694_TestsTestBasicPoweron/20161215195203016694_powerontest/20161215195203016694_BMC_general.txt"&gt;/tmp/root/17453/obmc-robot/logs/20161215195203016694_TestsTestBasicPoweron/20161215195203016694_powerontest/20161215195203016694_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20161215 19:52:03.045" status="PASS" endtime="20161215 19:52:03.046"></status>
</kw>
<status starttime="20161215 19:52:03.045" status="PASS" endtime="20161215 19:52:03.046"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data to File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Failure Time Stamp\t: ${FFDC_TIME}${\n}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20161215 19:52:03.047">Appended to file '&lt;a href="file:///tmp/root/17453/obmc-robot/logs/20161215195203016694_TestsTestBasicPoweron/20161215195203016694_powerontest/20161215195203016694_BMC_general.txt"&gt;/tmp/root/17453/obmc-robot/logs/20161215195203016694_TestsTestBasicPoweron/20161215195203016694_powerontest/20161215195203016694_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20161215 19:52:03.047" status="PASS" endtime="20161215 19:52:03.047"></status>
</kw>
<status starttime="20161215 19:52:03.046" status="PASS" endtime="20161215 19:52:03.047"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data to File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Error Message\t: ${TEST_MESSAGE}${\n}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20161215 19:52:03.048">Appended to file '&lt;a href="file:///tmp/root/17453/obmc-robot/logs/20161215195203016694_TestsTestBasicPoweron/20161215195203016694_powerontest/20161215195203016694_BMC_general.txt"&gt;/tmp/root/17453/obmc-robot/logs/20161215195203016694_TestsTestBasicPoweron/20161215195203016694_powerontest/20161215195203016694_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20161215 19:52:03.048" status="PASS" endtime="20161215 19:52:03.048"></status>
</kw>
<status starttime="20161215 19:52:03.047" status="PASS" endtime="20161215 19:52:03.048"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data to File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Documentation\t:${\n}${TEST_DOCUMENTATION}${\n}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20161215 19:52:03.050">Appended to file '&lt;a href="file:///tmp/root/17453/obmc-robot/logs/20161215195203016694_TestsTestBasicPoweron/20161215195203016694_powerontest/20161215195203016694_BMC_general.txt"&gt;/tmp/root/17453/obmc-robot/logs/20161215195203016694_TestsTestBasicPoweron/20161215195203016694_powerontest/20161215195203016694_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20161215 19:52:03.049" status="PASS" endtime="20161215 19:52:03.050"></status>
</kw>
<status starttime="20161215 19:52:03.049" status="PASS" endtime="20161215 19:52:03.050"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data to File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20161215 19:52:03.051">Appended to file '&lt;a href="file:///tmp/root/17453/obmc-robot/logs/20161215195203016694_TestsTestBasicPoweron/20161215195203016694_powerontest/20161215195203016694_BMC_general.txt"&gt;/tmp/root/17453/obmc-robot/logs/20161215195203016694_TestsTestBasicPoweron/20161215195203016694_powerontest/20161215195203016694_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20161215 19:52:03.050" status="PASS" endtime="20161215 19:52:03.051"></status>
</kw>
<status starttime="20161215 19:52:03.050" status="PASS" endtime="20161215 19:52:03.051"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Test Setup Info">
<doc>BMC IP, Model and other information</doc>
<kw library="openbmc_ffdc_utils" name="Write Data to File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}-----------------------${\n}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20161215 19:52:03.053">Appended to file '&lt;a href="file:///tmp/root/17453/obmc-robot/logs/20161215195203016694_TestsTestBasicPoweron/20161215195203016694_powerontest/20161215195203016694_BMC_general.txt"&gt;/tmp/root/17453/obmc-robot/logs/20161215195203016694_TestsTestBasicPoweron/20161215195203016694_powerontest/20161215195203016694_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20161215 19:52:03.052" status="PASS" endtime="20161215 19:52:03.053"></status>
</kw>
<status starttime="20161215 19:52:03.051" status="PASS" endtime="20161215 19:52:03.053"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data to File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Setup Information:</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20161215 19:52:03.054">Appended to file '&lt;a href="file:///tmp/root/17453/obmc-robot/logs/20161215195203016694_TestsTestBasicPoweron/20161215195203016694_powerontest/20161215195203016694_BMC_general.txt"&gt;/tmp/root/17453/obmc-robot/logs/20161215195203016694_TestsTestBasicPoweron/20161215195203016694_powerontest/20161215195203016694_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20161215 19:52:03.053" status="PASS" endtime="20161215 19:52:03.054"></status>
</kw>
<status starttime="20161215 19:52:03.053" status="PASS" endtime="20161215 19:52:03.054"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data to File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}-----------------------${\n}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20161215 19:52:03.056">Appended to file '&lt;a href="file:///tmp/root/17453/obmc-robot/logs/20161215195203016694_TestsTestBasicPoweron/20161215195203016694_powerontest/20161215195203016694_BMC_general.txt"&gt;/tmp/root/17453/obmc-robot/logs/20161215195203016694_TestsTestBasicPoweron/20161215195203016694_powerontest/20161215195203016694_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20161215 19:52:03.055" status="PASS" endtime="20161215 19:52:03.056"></status>
</kw>
<status starttime="20161215 19:52:03.054" status="PASS" endtime="20161215 19:52:03.056"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data to File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>OPENBMC HOST \t: ${OPENBMC_HOST}${\n}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20161215 19:52:03.058">Appended to file '&lt;a href="file:///tmp/root/17453/obmc-robot/logs/20161215195203016694_TestsTestBasicPoweron/20161215195203016694_powerontest/20161215195203016694_BMC_general.txt"&gt;/tmp/root/17453/obmc-robot/logs/20161215195203016694_TestsTestBasicPoweron/20161215195203016694_powerontest/20161215195203016694_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20161215 19:52:03.058" status="PASS" endtime="20161215 19:52:03.058"></status>
</kw>
<status starttime="20161215 19:52:03.056" status="PASS" endtime="20161215 19:52:03.059"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data to File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>SYSTEM TYPE \t: ${OPENBMC_MODEL.replace('./data/','').replace('.py','')}${\n}${\n}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20161215 19:52:03.061">Appended to file '&lt;a href="file:///tmp/root/17453/obmc-robot/logs/20161215195203016694_TestsTestBasicPoweron/20161215195203016694_powerontest/20161215195203016694_BMC_general.txt"&gt;/tmp/root/17453/obmc-robot/logs/20161215195203016694_TestsTestBasicPoweron/20161215195203016694_powerontest/20161215195203016694_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20161215 19:52:03.060" status="PASS" endtime="20161215 19:52:03.061"></status>
</kw>
<status starttime="20161215 19:52:03.059" status="PASS" endtime="20161215 19:52:03.061"></status>
</kw>
<status starttime="20161215 19:52:03.051" status="PASS" endtime="20161215 19:52:03.061"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data to File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${MSG_INTRO}${\n}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20161215 19:52:03.063">Appended to file '&lt;a href="file:///tmp/root/17453/obmc-robot/logs/20161215195203016694_TestsTestBasicPoweron/20161215195203016694_powerontest/20161215195203016694_BMC_general.txt"&gt;/tmp/root/17453/obmc-robot/logs/20161215195203016694_TestsTestBasicPoweron/20161215195203016694_powerontest/20161215195203016694_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20161215 19:52:03.063" status="PASS" endtime="20161215 19:52:03.063"></status>
</kw>
<status starttime="20161215 19:52:03.062" status="PASS" endtime="20161215 19:52:03.064"></status>
</kw>
<kw library="openbmc_ffdc_list" name="Get Ffdc Cmd Index">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg level="INFO" timestamp="20161215 19:52:03.064">@{entries} = [ APPLICATION DATA | DRIVER INFO | BMC DATA ]</msg>
<status starttime="20161215 19:52:03.064" status="PASS" endtime="20161215 19:52:03.064"></status>
</kw>
<kw type="for" name="${index} IN [ @{entries} ]">
<kw type="foritem" name="${index} = APPLICATION DATA">
<kw library="openbmc_ffdc_utils" name="Write Data to File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>* ${index.upper()}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20161215 19:52:03.067">Appended to file '&lt;a href="file:///tmp/root/17453/obmc-robot/logs/20161215195203016694_TestsTestBasicPoweron/20161215195203016694_powerontest/20161215195203016694_BMC_general.txt"&gt;/tmp/root/17453/obmc-robot/logs/20161215195203016694_TestsTestBasicPoweron/20161215195203016694_powerontest/20161215195203016694_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20161215 19:52:03.066" status="PASS" endtime="20161215 19:52:03.067"></status>
</kw>
<status starttime="20161215 19:52:03.065" status="PASS" endtime="20161215 19:52:03.067"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data to File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20161215 19:52:03.068">Appended to file '&lt;a href="file:///tmp/root/17453/obmc-robot/logs/20161215195203016694_TestsTestBasicPoweron/20161215195203016694_powerontest/20161215195203016694_BMC_general.txt"&gt;/tmp/root/17453/obmc-robot/logs/20161215195203016694_TestsTestBasicPoweron/20161215195203016694_powerontest/20161215195203016694_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20161215 19:52:03.068" status="PASS" endtime="20161215 19:52:03.068"></status>
</kw>
<status starttime="20161215 19:52:03.067" status="PASS" endtime="20161215 19:52:03.069"></status>
</kw>
<status starttime="20161215 19:52:03.065" status="PASS" endtime="20161215 19:52:03.069"></status>
</kw>
<kw type="foritem" name="${index} = DRIVER INFO">
<kw library="openbmc_ffdc_utils" name="Write Data to File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>* ${index.upper()}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20161215 19:52:03.070">Appended to file '&lt;a href="file:///tmp/root/17453/obmc-robot/logs/20161215195203016694_TestsTestBasicPoweron/20161215195203016694_powerontest/20161215195203016694_BMC_general.txt"&gt;/tmp/root/17453/obmc-robot/logs/20161215195203016694_TestsTestBasicPoweron/20161215195203016694_powerontest/20161215195203016694_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20161215 19:52:03.069" status="PASS" endtime="20161215 19:52:03.070"></status>
</kw>
<status starttime="20161215 19:52:03.069" status="PASS" endtime="20161215 19:52:03.070"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data to File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20161215 19:52:03.071">Appended to file '&lt;a href="file:///tmp/root/17453/obmc-robot/logs/20161215195203016694_TestsTestBasicPoweron/20161215195203016694_powerontest/20161215195203016694_BMC_general.txt"&gt;/tmp/root/17453/obmc-robot/logs/20161215195203016694_TestsTestBasicPoweron/20161215195203016694_powerontest/20161215195203016694_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20161215 19:52:03.070" status="PASS" endtime="20161215 19:52:03.071"></status>
</kw>
<status starttime="20161215 19:52:03.070" status="PASS" endtime="20161215 19:52:03.071"></status>
</kw>
<status starttime="20161215 19:52:03.069" status="PASS" endtime="20161215 19:52:03.071"></status>
</kw>
<kw type="foritem" name="${index} = BMC DATA">
<kw library="openbmc_ffdc_utils" name="Write Data to File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>* ${index.upper()}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20161215 19:52:03.072">Appended to file '&lt;a href="file:///tmp/root/17453/obmc-robot/logs/20161215195203016694_TestsTestBasicPoweron/20161215195203016694_powerontest/20161215195203016694_BMC_general.txt"&gt;/tmp/root/17453/obmc-robot/logs/20161215195203016694_TestsTestBasicPoweron/20161215195203016694_powerontest/20161215195203016694_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20161215 19:52:03.072" status="PASS" endtime="20161215 19:52:03.072"></status>
</kw>
<status starttime="20161215 19:52:03.071" status="PASS" endtime="20161215 19:52:03.072"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data to File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20161215 19:52:03.074">Appended to file '&lt;a href="file:///tmp/root/17453/obmc-robot/logs/20161215195203016694_TestsTestBasicPoweron/20161215195203016694_powerontest/20161215195203016694_BMC_general.txt"&gt;/tmp/root/17453/obmc-robot/logs/20161215195203016694_TestsTestBasicPoweron/20161215195203016694_powerontest/20161215195203016694_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20161215 19:52:03.073" status="PASS" endtime="20161215 19:52:03.074"></status>
</kw>
<status starttime="20161215 19:52:03.072" status="PASS" endtime="20161215 19:52:03.074"></status>
</kw>
<status starttime="20161215 19:52:03.071" status="PASS" endtime="20161215 19:52:03.074"></status>
</kw>
<status starttime="20161215 19:52:03.064" status="PASS" endtime="20161215 19:52:03.074"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data to File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${MSG_DETAIL}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20161215 19:52:03.075">Appended to file '&lt;a href="file:///tmp/root/17453/obmc-robot/logs/20161215195203016694_TestsTestBasicPoweron/20161215195203016694_powerontest/20161215195203016694_BMC_general.txt"&gt;/tmp/root/17453/obmc-robot/logs/20161215195203016694_TestsTestBasicPoweron/20161215195203016694_powerontest/20161215195203016694_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20161215 19:52:03.074" status="PASS" endtime="20161215 19:52:03.075"></status>
</kw>
<status starttime="20161215 19:52:03.074" status="PASS" endtime="20161215 19:52:03.075"></status>
</kw>
<status starttime="20161215 19:52:03.040" status="PASS" endtime="20161215 19:52:03.075"></status>
</kw>
<kw library="openbmc_ffdc_methods" name="Call FFDC Methods">
<doc>Calls into FFDC Keyword index list</doc>
<kw library="openbmc_ffdc_list" name="Get Ffdc Method Index">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg level="INFO" timestamp="20161215 19:52:03.076">@{entries} = [ BMC LOGS ]</msg>
<status starttime="20161215 19:52:03.076" status="PASS" endtime="20161215 19:52:03.076"></status>
</kw>
<kw type="for" name="${index} IN [ @{entries} ]">
<kw type="foritem" name="${index} = BMC LOGS">
<kw library="openbmc_ffdc_methods" name="Method Call Keyword List">
<doc>Iterate the list through keyword index</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw library="openbmc_ffdc_list" name="Get Ffdc Method Call">
<doc>########################################################################</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<assign>
<var>@{method_list}</var>
</assign>
<msg level="INFO" timestamp="20161215 19:52:03.077">@{method_list} = [ ('Get Request FFDC', 'BMC FFDC Get Requests') | ('BMC Specific Files', 'BMC FFDC Files') | ('FFDC Generic Report', 'BMC FFDC Manifest') | ('OS FFDC', 'OS FFDC Files') ]</msg>
<status starttime="20161215 19:52:03.077" status="PASS" endtime="20161215 19:52:03.077"></status>
</kw>
<kw type="for" name="${method} IN [ @{method_list} ]">
<kw type="foritem" name="${method} = ('Get Request FFDC', 'BMC FFDC Get Requests')">
<kw library="openbmc_ffdc_methods" name="Execute Keyword Method">
<doc>Calls into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[1]}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword And Continue On Failure">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>${keyword_name}</arg>
</arguments>
<kw library="openbmc_ffdc_methods" name="BMC FFDC Get Requests">
<doc>Get the command list and iterate</doc>
<kw library="connection_client" name="Open Connection And Log In">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw library="Collections" name="Dictionary Should Contain Key">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg level="FAIL" timestamp="20161215 19:52:03.080">Dictionary does not contain key 'host'.</msg>
<status starttime="20161215 19:52:03.079" status="FAIL" endtime="20161215 19:52:03.080"></status>
</kw>
<msg level="INFO" timestamp="20161215 19:52:03.080">${has_host} = False</msg>
<status starttime="20161215 19:52:03.079" status="PASS" endtime="20161215 19:52:03.080"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status starttime="20161215 19:52:03.083" status="PASS" endtime="20161215 19:52:03.083"></status>
</kw>
<status starttime="20161215 19:52:03.080" status="PASS" endtime="20161215 19:52:03.084"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<kw library="connection_client" name="User input SSH and HTTPs Ports">
<doc>Update the global SSH and HTTPs port variable for QEMU</doc>
<kw library="BuiltIn" name="Convert To Integer">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${SSH_PORT}</arg>
</arguments>
<assign>
<var>${port_num}</var>
</assign>
<msg level="INFO" timestamp="20161215 19:52:03.087">${port_num} = 22</msg>
<status starttime="20161215 19:52:03.087" status="PASS" endtime="20161215 19:52:03.088"></status>
</kw>
<kw library="BuiltIn" name="Replace Variables">
<doc>Replaces variables in the given text with their current values.</doc>
<arguments>
<arg>${port_num}</arg>
</arguments>
<assign>
<var>${SSH_PORT}</var>
</assign>
<msg level="INFO" timestamp="20161215 19:52:03.088">${SSH_PORT} = 22</msg>
<status starttime="20161215 19:52:03.088" status="PASS" endtime="20161215 19:52:03.088"></status>
</kw>
<kw library="BuiltIn" name="Convert To Integer">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${HTTPS_PORT}</arg>
</arguments>
<assign>
<var>${https_num}</var>
</assign>
<msg level="INFO" timestamp="20161215 19:52:03.089">${https_num} = 443</msg>
<status starttime="20161215 19:52:03.088" status="PASS" endtime="20161215 19:52:03.089"></status>
</kw>
<kw library="BuiltIn" name="Set Global Variable">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${AUTH_URI}</arg>
<arg>https://${OPENBMC_HOST}:${https_num}</arg>
</arguments>
<msg level="INFO" timestamp="20161215 19:52:03.089">${AUTH_URI} = https://9.3.23.30:443</msg>
<status starttime="20161215 19:52:03.089" status="PASS" endtime="20161215 19:52:03.090"></status>
</kw>
<status starttime="20161215 19:52:03.087" status="PASS" endtime="20161215 19:52:03.090"></status>
</kw>
<status starttime="20161215 19:52:03.084" status="PASS" endtime="20161215 19:52:03.090"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw library="Collections" name="Dictionary Should Contain Key">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg level="FAIL" timestamp="20161215 19:52:03.091">Dictionary does not contain key 'port'.</msg>
<status starttime="20161215 19:52:03.090" status="FAIL" endtime="20161215 19:52:03.091"></status>
</kw>
<msg level="INFO" timestamp="20161215 19:52:03.091">${has_port} = False</msg>
<status starttime="20161215 19:52:03.090" status="PASS" endtime="20161215 19:52:03.091"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keywords">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
</arguments>
<status starttime="20161215 19:52:03.095" status="PASS" endtime="20161215 19:52:03.095"></status>
</kw>
<kw library="SSHLibrary" name="Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status starttime="20161215 19:52:03.095" status="PASS" endtime="20161215 19:52:03.095"></status>
</kw>
<status starttime="20161215 19:52:03.094" status="PASS" endtime="20161215 19:52:03.096"></status>
</kw>
<status starttime="20161215 19:52:03.091" status="PASS" endtime="20161215 19:52:03.096"></status>
</kw>
<kw library="SSHLibrary" name="Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg level="INFO" timestamp="20161215 19:52:03.096">Logging into '9.3.23.30:22' as 'root'.</msg>
<msg level="INFO" timestamp="20161215 19:52:08.410">Read output: 7[r[999;999H[6n</msg>
<status starttime="20161215 19:52:03.096" status="PASS" endtime="20161215 19:52:08.411"></status>
</kw>
<status starttime="20161215 19:52:03.078" status="PASS" endtime="20161215 19:52:08.411"></status>
</kw>
<kw library="openbmc_ffdc_list" name="Get Ffdc Get Request Index">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg level="INFO" timestamp="20161215 19:52:08.412">@{entries} = [ GET REQUESTS ]</msg>
<status starttime="20161215 19:52:08.411" status="PASS" endtime="20161215 19:52:08.412"></status>
</kw>
<kw type="for" name="${index} IN [ @{entries} ]">
<kw type="foritem" name="${index} = GET REQUESTS">
<kw library="openbmc_ffdc_methods" name="Log FFDC Get Requests">
<doc>Create file in current FFDC log directory.</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw library="openbmc_ffdc_list" name="Get Ffdc Get Request">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg level="INFO" timestamp="20161215 19:52:08.414">@{cmd_list} = [ ('BMC_record_log', '/org/openbmc/control/led/enumerate') | ('BMC_led', '/org/openbmc/records/events/enumerate') | ('BMC_inventory', '/org/openbmc/inventory/system/enumerate') | ('BMC_sensor_list', '...</msg>
<status starttime="20161215 19:52:08.413" status="PASS" endtime="20161215 19:52:08.414"></status>
</kw>
<kw type="for" name="${cmd} IN [ @{cmd_list} ]">
<kw type="foritem" name="${cmd} = ('BMC_record_log', '/org/openbmc/control/led/enumerate')">
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20161215 19:52:08.415">${logpath} = /tmp/root/17453/obmc-robot/logs/20161215195203016694_TestsTestBasicPoweron/20161215195203016694_powerontest/20161215195203016694_BMC_record_log.txt</msg>
<status starttime="20161215 19:52:08.415" status="PASS" endtime="20161215 19:52:08.415"></status>
</kw>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161215 19:52:08.417">${base_uri} = /org/openbmc/control/led/enumerate</msg>
<status starttime="20161215 19:52:08.417" status="PASS" endtime="20161215 19:52:08.417"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status starttime="20161215 19:52:08.418" status="PASS" endtime="20161215 19:52:08.422"></status>
</kw>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161215 19:52:08.424">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20161215 19:52:08.423" status="PASS" endtime="20161215 19:52:08.425"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161215 19:52:08.426">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161215 19:52:08.425" status="PASS" endtime="20161215 19:52:08.426"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161215 19:52:08.427">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20161215 19:52:08.426" status="PASS" endtime="20161215 19:52:08.427"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161215 19:52:08.428">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20161215 19:52:08.427" status="PASS" endtime="20161215 19:52:08.428"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161215 19:52:09.037">${resp} = None</msg>
<msg level="FAIL" timestamp="20161215 19:52:09.038">ConnectionError: HTTPSConnectionPool(host='9.3.23.30', port=443): Max retries exceeded with url: /login (Caused by NewConnectionError('&lt;requests.packages.urllib3.connection.VerifiedHTTPSConnection object at 0x3fff7c5a3610&gt;: Failed to establish a new connection: [Errno 111] Connection refused',))</msg>
<status starttime="20161215 19:52:08.428" status="FAIL" endtime="20161215 19:52:09.038"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="FAIL" timestamp="20161215 19:52:09.039">Resolving variable '${resp.status_code}' failed: AttributeError: 'NoneType' object has no attribute 'status_code'</msg>
<status starttime="20161215 19:52:09.039" status="FAIL" endtime="20161215 19:52:09.039"></status>
</kw>
<status starttime="20161215 19:52:08.423" status="FAIL" endtime="20161215 19:52:09.040"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161215 19:52:09.648">${ret} = None</msg>
<msg level="FAIL" timestamp="20161215 19:52:09.649">ConnectionError: HTTPSConnectionPool(host='9.3.23.30', port=443): Max retries exceeded with url: /org/openbmc/control/led/enumerate (Caused by NewConnectionError('&lt;requests.packages.urllib3.connection.VerifiedHTTPSConnection object at 0x3fff7c5a37d0&gt;: Failed to establish a new connection: [Errno 111] Connection refused',))</msg>
<status starttime="20161215 19:52:09.040" status="FAIL" endtime="20161215 19:52:09.649"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status starttime="20161215 19:52:09.650" status="PASS" endtime="20161215 19:52:09.655"></status>
</kw>
<msg level="INFO" timestamp="20161215 19:52:09.656">${resp} = None</msg>
<status starttime="20161215 19:52:08.416" status="FAIL" endtime="20161215 19:52:09.656"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="FAIL" timestamp="20161215 19:52:09.657">Resolving variable '${resp.status_code}' failed: AttributeError: 'NoneType' object has no attribute 'status_code'</msg>
<status starttime="20161215 19:52:09.657" status="FAIL" endtime="20161215 19:52:09.657"></status>
</kw>
<msg level="INFO" timestamp="20161215 19:52:09.659">${status} = False</msg>
<status starttime="20161215 19:52:09.656" status="PASS" endtime="20161215 19:52:09.659"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<kw library="BuiltIn" name="Continue For Loop">
<doc>Skips the current for loop iteration and continues from the next.</doc>
<msg level="INFO" timestamp="20161215 19:52:09.667">Continuing for loop from the next iteration.</msg>
<status starttime="20161215 19:52:09.667" status="PASS" endtime="20161215 19:52:09.667"></status>
</kw>
<status starttime="20161215 19:52:09.660" status="PASS" endtime="20161215 19:52:09.667"></status>
</kw>
<status starttime="20161215 19:52:08.414" status="FAIL" endtime="20161215 19:52:09.668"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_led', '/org/openbmc/records/events/enumerate')">
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20161215 19:52:09.669">${logpath} = /tmp/root/17453/obmc-robot/logs/20161215195203016694_TestsTestBasicPoweron/20161215195203016694_powerontest/20161215195203016694_BMC_led.txt</msg>
<status starttime="20161215 19:52:09.668" status="PASS" endtime="20161215 19:52:09.669"></status>
</kw>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161215 19:52:09.670">${base_uri} = /org/openbmc/records/events/enumerate</msg>
<status starttime="20161215 19:52:09.670" status="PASS" endtime="20161215 19:52:09.670"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status starttime="20161215 19:52:09.671" status="PASS" endtime="20161215 19:52:09.675"></status>
</kw>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161215 19:52:09.676">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20161215 19:52:09.676" status="PASS" endtime="20161215 19:52:09.677"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161215 19:52:09.677">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161215 19:52:09.677" status="PASS" endtime="20161215 19:52:09.678"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161215 19:52:09.678">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20161215 19:52:09.678" status="PASS" endtime="20161215 19:52:09.679"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161215 19:52:09.679">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20161215 19:52:09.679" status="PASS" endtime="20161215 19:52:09.679"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161215 19:52:10.287">${resp} = None</msg>
<msg level="FAIL" timestamp="20161215 19:52:10.288">ConnectionError: HTTPSConnectionPool(host='9.3.23.30', port=443): Max retries exceeded with url: /login (Caused by NewConnectionError('&lt;requests.packages.urllib3.connection.VerifiedHTTPSConnection object at 0x3fff7c5cd2d0&gt;: Failed to establish a new connection: [Errno 111] Connection refused',))</msg>
<status starttime="20161215 19:52:09.679" status="FAIL" endtime="20161215 19:52:10.288"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="FAIL" timestamp="20161215 19:52:10.289">Resolving variable '${resp.status_code}' failed: AttributeError: 'NoneType' object has no attribute 'status_code'</msg>
<status starttime="20161215 19:52:10.289" status="FAIL" endtime="20161215 19:52:10.289"></status>
</kw>
<status starttime="20161215 19:52:09.675" status="FAIL" endtime="20161215 19:52:10.290"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161215 19:52:10.897">${ret} = None</msg>
<msg level="FAIL" timestamp="20161215 19:52:10.898">ConnectionError: HTTPSConnectionPool(host='9.3.23.30', port=443): Max retries exceeded with url: /org/openbmc/records/events/enumerate (Caused by NewConnectionError('&lt;requests.packages.urllib3.connection.VerifiedHTTPSConnection object at 0x3fff7c59ed90&gt;: Failed to establish a new connection: [Errno 111] Connection refused',))</msg>
<status starttime="20161215 19:52:10.290" status="FAIL" endtime="20161215 19:52:10.898"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status starttime="20161215 19:52:10.899" status="PASS" endtime="20161215 19:52:10.904"></status>
</kw>
<msg level="INFO" timestamp="20161215 19:52:10.904">${resp} = None</msg>
<status starttime="20161215 19:52:09.669" status="FAIL" endtime="20161215 19:52:10.904"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="FAIL" timestamp="20161215 19:52:10.906">Resolving variable '${resp.status_code}' failed: AttributeError: 'NoneType' object has no attribute 'status_code'</msg>
<status starttime="20161215 19:52:10.905" status="FAIL" endtime="20161215 19:52:10.906"></status>
</kw>
<msg level="INFO" timestamp="20161215 19:52:10.906">${status} = False</msg>
<status starttime="20161215 19:52:10.905" status="PASS" endtime="20161215 19:52:10.906"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<kw library="BuiltIn" name="Continue For Loop">
<doc>Skips the current for loop iteration and continues from the next.</doc>
<msg level="INFO" timestamp="20161215 19:52:10.910">Continuing for loop from the next iteration.</msg>
<status starttime="20161215 19:52:10.910" status="PASS" endtime="20161215 19:52:10.911"></status>
</kw>
<status starttime="20161215 19:52:10.907" status="PASS" endtime="20161215 19:52:10.911"></status>
</kw>
<status starttime="20161215 19:52:09.668" status="FAIL" endtime="20161215 19:52:10.911"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_inventory', '/org/openbmc/inventory/system/enumerate')">
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20161215 19:52:10.911">${logpath} = /tmp/root/17453/obmc-robot/logs/20161215195203016694_TestsTestBasicPoweron/20161215195203016694_powerontest/20161215195203016694_BMC_inventory.txt</msg>
<status starttime="20161215 19:52:10.911" status="PASS" endtime="20161215 19:52:10.911"></status>
</kw>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161215 19:52:10.913">${base_uri} = /org/openbmc/inventory/system/enumerate</msg>
<status starttime="20161215 19:52:10.912" status="PASS" endtime="20161215 19:52:10.913"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status starttime="20161215 19:52:10.913" status="PASS" endtime="20161215 19:52:10.916"></status>
</kw>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161215 19:52:10.917">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20161215 19:52:10.916" status="PASS" endtime="20161215 19:52:10.917"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161215 19:52:10.918">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161215 19:52:10.917" status="PASS" endtime="20161215 19:52:10.918"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161215 19:52:10.918">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20161215 19:52:10.918" status="PASS" endtime="20161215 19:52:10.918"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161215 19:52:10.919">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20161215 19:52:10.918" status="PASS" endtime="20161215 19:52:10.919"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161215 19:52:11.525">${resp} = None</msg>
<msg level="FAIL" timestamp="20161215 19:52:11.525">ConnectionError: HTTPSConnectionPool(host='9.3.23.30', port=443): Max retries exceeded with url: /login (Caused by NewConnectionError('&lt;requests.packages.urllib3.connection.VerifiedHTTPSConnection object at 0x3fff7c569710&gt;: Failed to establish a new connection: [Errno 111] Connection refused',))</msg>
<status starttime="20161215 19:52:10.919" status="FAIL" endtime="20161215 19:52:11.525"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="FAIL" timestamp="20161215 19:52:11.526">Resolving variable '${resp.status_code}' failed: AttributeError: 'NoneType' object has no attribute 'status_code'</msg>
<status starttime="20161215 19:52:11.526" status="FAIL" endtime="20161215 19:52:11.526"></status>
</kw>
<status starttime="20161215 19:52:10.916" status="FAIL" endtime="20161215 19:52:11.526"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161215 19:52:12.133">${ret} = None</msg>
<msg level="FAIL" timestamp="20161215 19:52:12.133">ConnectionError: HTTPSConnectionPool(host='9.3.23.30', port=443): Max retries exceeded with url: /org/openbmc/inventory/system/enumerate (Caused by NewConnectionError('&lt;requests.packages.urllib3.connection.VerifiedHTTPSConnection object at 0x3fff7c569850&gt;: Failed to establish a new connection: [Errno 111] Connection refused',))</msg>
<status starttime="20161215 19:52:11.527" status="FAIL" endtime="20161215 19:52:12.134"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status starttime="20161215 19:52:12.134" status="PASS" endtime="20161215 19:52:12.139"></status>
</kw>
<msg level="INFO" timestamp="20161215 19:52:12.140">${resp} = None</msg>
<status starttime="20161215 19:52:10.912" status="FAIL" endtime="20161215 19:52:12.140"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="FAIL" timestamp="20161215 19:52:12.141">Resolving variable '${resp.status_code}' failed: AttributeError: 'NoneType' object has no attribute 'status_code'</msg>
<status starttime="20161215 19:52:12.141" status="FAIL" endtime="20161215 19:52:12.142"></status>
</kw>
<msg level="INFO" timestamp="20161215 19:52:12.142">${status} = False</msg>
<status starttime="20161215 19:52:12.140" status="PASS" endtime="20161215 19:52:12.142"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<kw library="BuiltIn" name="Continue For Loop">
<doc>Skips the current for loop iteration and continues from the next.</doc>
<msg level="INFO" timestamp="20161215 19:52:12.148">Continuing for loop from the next iteration.</msg>
<status starttime="20161215 19:52:12.147" status="PASS" endtime="20161215 19:52:12.148"></status>
</kw>
<status starttime="20161215 19:52:12.142" status="PASS" endtime="20161215 19:52:12.148"></status>
</kw>
<status starttime="20161215 19:52:10.911" status="FAIL" endtime="20161215 19:52:12.148"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_sensor_list', '/org/openbmc/sensors/enumerate')">
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20161215 19:52:12.149">${logpath} = /tmp/root/17453/obmc-robot/logs/20161215195203016694_TestsTestBasicPoweron/20161215195203016694_powerontest/20161215195203016694_BMC_sensor_list.txt</msg>
<status starttime="20161215 19:52:12.148" status="PASS" endtime="20161215 19:52:12.149"></status>
</kw>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161215 19:52:12.151">${base_uri} = /org/openbmc/sensors/enumerate</msg>
<status starttime="20161215 19:52:12.150" status="PASS" endtime="20161215 19:52:12.151"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status starttime="20161215 19:52:12.152" status="PASS" endtime="20161215 19:52:12.155"></status>
</kw>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161215 19:52:12.156">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20161215 19:52:12.155" status="PASS" endtime="20161215 19:52:12.156"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161215 19:52:12.157">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161215 19:52:12.157" status="PASS" endtime="20161215 19:52:12.157"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161215 19:52:12.158">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20161215 19:52:12.157" status="PASS" endtime="20161215 19:52:12.158"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161215 19:52:12.159">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20161215 19:52:12.158" status="PASS" endtime="20161215 19:52:12.159"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161215 19:52:12.765">${resp} = None</msg>
<msg level="FAIL" timestamp="20161215 19:52:12.765">ConnectionError: HTTPSConnectionPool(host='9.3.23.30', port=443): Max retries exceeded with url: /login (Caused by NewConnectionError('&lt;requests.packages.urllib3.connection.VerifiedHTTPSConnection object at 0x3fff7c5c5610&gt;: Failed to establish a new connection: [Errno 111] Connection refused',))</msg>
<status starttime="20161215 19:52:12.159" status="FAIL" endtime="20161215 19:52:12.766"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="FAIL" timestamp="20161215 19:52:12.766">Resolving variable '${resp.status_code}' failed: AttributeError: 'NoneType' object has no attribute 'status_code'</msg>
<status starttime="20161215 19:52:12.766" status="FAIL" endtime="20161215 19:52:12.766"></status>
</kw>
<status starttime="20161215 19:52:12.155" status="FAIL" endtime="20161215 19:52:12.767"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161215 19:52:13.374">${ret} = None</msg>
<msg level="FAIL" timestamp="20161215 19:52:13.374">ConnectionError: HTTPSConnectionPool(host='9.3.23.30', port=443): Max retries exceeded with url: /org/openbmc/sensors/enumerate (Caused by NewConnectionError('&lt;requests.packages.urllib3.connection.VerifiedHTTPSConnection object at 0x3fff7c5c5210&gt;: Failed to establish a new connection: [Errno 111] Connection refused',))</msg>
<status starttime="20161215 19:52:12.767" status="FAIL" endtime="20161215 19:52:13.374"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status starttime="20161215 19:52:13.375" status="PASS" endtime="20161215 19:52:13.380"></status>
</kw>
<msg level="INFO" timestamp="20161215 19:52:13.381">${resp} = None</msg>
<status starttime="20161215 19:52:12.149" status="FAIL" endtime="20161215 19:52:13.381"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="FAIL" timestamp="20161215 19:52:13.382">Resolving variable '${resp.status_code}' failed: AttributeError: 'NoneType' object has no attribute 'status_code'</msg>
<status starttime="20161215 19:52:13.382" status="FAIL" endtime="20161215 19:52:13.382"></status>
</kw>
<msg level="INFO" timestamp="20161215 19:52:13.382">${status} = False</msg>
<status starttime="20161215 19:52:13.381" status="PASS" endtime="20161215 19:52:13.383"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<kw library="BuiltIn" name="Continue For Loop">
<doc>Skips the current for loop iteration and continues from the next.</doc>
<msg level="INFO" timestamp="20161215 19:52:13.389">Continuing for loop from the next iteration.</msg>
<status starttime="20161215 19:52:13.389" status="PASS" endtime="20161215 19:52:13.389"></status>
</kw>
<status starttime="20161215 19:52:13.383" status="PASS" endtime="20161215 19:52:13.389"></status>
</kw>
<status starttime="20161215 19:52:12.148" status="FAIL" endtime="20161215 19:52:13.389"></status>
</kw>
<status starttime="20161215 19:52:08.414" status="FAIL" endtime="20161215 19:52:13.390"></status>
</kw>
<status starttime="20161215 19:52:08.413" status="FAIL" endtime="20161215 19:52:13.390"></status>
</kw>
<status starttime="20161215 19:52:08.412" status="FAIL" endtime="20161215 19:52:13.390"></status>
</kw>
<status starttime="20161215 19:52:08.412" status="FAIL" endtime="20161215 19:52:13.390"></status>
</kw>
<status starttime="20161215 19:52:03.078" status="FAIL" endtime="20161215 19:52:13.391"></status>
</kw>
<status starttime="20161215 19:52:03.078" status="FAIL" endtime="20161215 19:52:13.391"></status>
</kw>
<status starttime="20161215 19:52:03.077" status="FAIL" endtime="20161215 19:52:13.391"></status>
</kw>
<status starttime="20161215 19:52:03.077" status="FAIL" endtime="20161215 19:52:13.391"></status>
</kw>
<kw type="foritem" name="${method} = ('BMC Specific Files', 'BMC FFDC Files')">
<kw library="openbmc_ffdc_methods" name="Execute Keyword Method">
<doc>Calls into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[1]}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword And Continue On Failure">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>${keyword_name}</arg>
</arguments>
<kw library="openbmc_ffdc_methods" name="BMC FFDC Files">
<doc>Get the command list and iterate</doc>
<kw library="connection_client" name="Open Connection And Log In">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw library="Collections" name="Dictionary Should Contain Key">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg level="FAIL" timestamp="20161215 19:52:13.395">Dictionary does not contain key 'host'.</msg>
<status starttime="20161215 19:52:13.395" status="FAIL" endtime="20161215 19:52:13.395"></status>
</kw>
<msg level="INFO" timestamp="20161215 19:52:13.395">${has_host} = False</msg>
<status starttime="20161215 19:52:13.394" status="PASS" endtime="20161215 19:52:13.395"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status starttime="20161215 19:52:13.400" status="PASS" endtime="20161215 19:52:13.400"></status>
</kw>
<status starttime="20161215 19:52:13.396" status="PASS" endtime="20161215 19:52:13.401"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<kw library="connection_client" name="User input SSH and HTTPs Ports">
<doc>Update the global SSH and HTTPs port variable for QEMU</doc>
<kw library="BuiltIn" name="Convert To Integer">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${SSH_PORT}</arg>
</arguments>
<assign>
<var>${port_num}</var>
</assign>
<msg level="INFO" timestamp="20161215 19:52:13.406">${port_num} = 22</msg>
<status starttime="20161215 19:52:13.406" status="PASS" endtime="20161215 19:52:13.406"></status>
</kw>
<kw library="BuiltIn" name="Replace Variables">
<doc>Replaces variables in the given text with their current values.</doc>
<arguments>
<arg>${port_num}</arg>
</arguments>
<assign>
<var>${SSH_PORT}</var>
</assign>
<msg level="INFO" timestamp="20161215 19:52:13.407">${SSH_PORT} = 22</msg>
<status starttime="20161215 19:52:13.407" status="PASS" endtime="20161215 19:52:13.407"></status>
</kw>
<kw library="BuiltIn" name="Convert To Integer">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${HTTPS_PORT}</arg>
</arguments>
<assign>
<var>${https_num}</var>
</assign>
<msg level="INFO" timestamp="20161215 19:52:13.408">${https_num} = 443</msg>
<status starttime="20161215 19:52:13.407" status="PASS" endtime="20161215 19:52:13.408"></status>
</kw>
<kw library="BuiltIn" name="Set Global Variable">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${AUTH_URI}</arg>
<arg>https://${OPENBMC_HOST}:${https_num}</arg>
</arguments>
<msg level="INFO" timestamp="20161215 19:52:13.409">${AUTH_URI} = https://9.3.23.30:443</msg>
<status starttime="20161215 19:52:13.408" status="PASS" endtime="20161215 19:52:13.409"></status>
</kw>
<status starttime="20161215 19:52:13.405" status="PASS" endtime="20161215 19:52:13.409"></status>
</kw>
<status starttime="20161215 19:52:13.401" status="PASS" endtime="20161215 19:52:13.409"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw library="Collections" name="Dictionary Should Contain Key">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg level="FAIL" timestamp="20161215 19:52:13.410">Dictionary does not contain key 'port'.</msg>
<status starttime="20161215 19:52:13.410" status="FAIL" endtime="20161215 19:52:13.410"></status>
</kw>
<msg level="INFO" timestamp="20161215 19:52:13.410">${has_port} = False</msg>
<status starttime="20161215 19:52:13.409" status="PASS" endtime="20161215 19:52:13.410"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keywords">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
</arguments>
<status starttime="20161215 19:52:13.414" status="PASS" endtime="20161215 19:52:13.414"></status>
</kw>
<kw library="SSHLibrary" name="Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status starttime="20161215 19:52:13.415" status="PASS" endtime="20161215 19:52:13.415"></status>
</kw>
<status starttime="20161215 19:52:13.414" status="PASS" endtime="20161215 19:52:13.415"></status>
</kw>
<status starttime="20161215 19:52:13.410" status="PASS" endtime="20161215 19:52:13.415"></status>
</kw>
<kw library="SSHLibrary" name="Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg level="INFO" timestamp="20161215 19:52:13.415">Logging into '9.3.23.30:22' as 'root'.</msg>
<msg level="INFO" timestamp="20161215 19:52:16.301">Read output:</msg>
<status starttime="20161215 19:52:13.415" status="PASS" endtime="20161215 19:52:16.302"></status>
</kw>
<status starttime="20161215 19:52:13.393" status="PASS" endtime="20161215 19:52:16.302"></status>
</kw>
<kw library="openbmc_ffdc_list" name="Get Ffdc File Index">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg level="INFO" timestamp="20161215 19:52:16.302">@{entries} = [ BMC FILES ]</msg>
<status starttime="20161215 19:52:16.302" status="PASS" endtime="20161215 19:52:16.302"></status>
</kw>
<kw type="for" name="${index} IN [ @{entries} ]">
<kw type="foritem" name="${index} = BMC FILES">
<kw library="openbmc_ffdc_methods" name="Create File and Write Data">
<doc>Create files to current FFDC log directory,</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw library="openbmc_ffdc_list" name="Get Ffdc Bmc File">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg level="INFO" timestamp="20161215 19:52:16.304">@{cmd_list} = [ ('BMC_journalctl', 'journalctl --no-pager') | ('BMC_dmesg', 'dmesg') | ('BMC_proc_list', 'top -n 1 -b') | ('BMC_meminfo', 'cat /proc/meminfo') | ('BMC_procinfo', 'cat /proc/cpuinfo') ]</msg>
<status starttime="20161215 19:52:16.303" status="PASS" endtime="20161215 19:52:16.304"></status>
</kw>
<kw type="for" name="${cmd} IN [ @{cmd_list} ]">
<kw type="foritem" name="${cmd} = ('BMC_journalctl', 'journalctl --no-pager')">
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20161215 19:52:16.304">${logpath} = /tmp/root/17453/obmc-robot/logs/20161215195203016694_TestsTestBasicPoweron/20161215195203016694_powerontest/20161215195203016694_BMC_journalctl.txt</msg>
<status starttime="20161215 19:52:16.304" status="PASS" endtime="20161215 19:52:16.304"></status>
</kw>
<kw library="openbmc_ffdc_methods" name="Execute Command and Write FFDC">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status starttime="20161215 19:52:16.305" status="PASS" endtime="20161215 19:52:16.308"></status>
</kw>
<kw library="SSHLibrary" name="Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20161215 19:52:16.309">Executing command 'journalctl --no-pager'.</msg>
<msg level="INFO" timestamp="20161215 19:52:19.630">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20161215 19:52:19.632">${stdout} = -- Logs begin at Mon 2016-11-21 06:08:11 UTC, end at Mon 2016-11-21 06:13:39 UTC. --
Nov 21 06:08:11 barreleye systemd-journald[401]: Runtime journal (/run/log/journal/) is 3.0M, max 24.3M, 21.3M free...</msg>
<msg level="INFO" timestamp="20161215 19:52:19.632">${stderr} = </msg>
<status starttime="20161215 19:52:16.308" status="PASS" endtime="20161215 19:52:19.632"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${stderr}' == '${EMPTY}'</arg>
<arg>Write Data to File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>Write Data to File</arg>
<arg>${stderr}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data to File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20161215 19:52:19.641">Appended to file '&lt;a href="file:///tmp/root/17453/obmc-robot/logs/20161215195203016694_TestsTestBasicPoweron/20161215195203016694_powerontest/20161215195203016694_BMC_journalctl.txt"&gt;/tmp/root/17453/obmc-robot/logs/20161215195203016694_TestsTestBasicPoweron/20161215195203016694_powerontest/20161215195203016694_BMC_journalctl.txt&lt;/a&gt;'.</msg>
<status starttime="20161215 19:52:19.639" status="PASS" endtime="20161215 19:52:19.642"></status>
</kw>
<status starttime="20161215 19:52:19.637" status="PASS" endtime="20161215 19:52:19.642"></status>
</kw>
<status starttime="20161215 19:52:19.632" status="PASS" endtime="20161215 19:52:19.642"></status>
</kw>
<status starttime="20161215 19:52:16.305" status="PASS" endtime="20161215 19:52:19.642"></status>
</kw>
<status starttime="20161215 19:52:16.304" status="PASS" endtime="20161215 19:52:19.642"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_dmesg', 'dmesg')">
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20161215 19:52:19.644">${logpath} = /tmp/root/17453/obmc-robot/logs/20161215195203016694_TestsTestBasicPoweron/20161215195203016694_powerontest/20161215195203016694_BMC_dmesg.txt</msg>
<status starttime="20161215 19:52:19.643" status="PASS" endtime="20161215 19:52:19.644"></status>
</kw>
<kw library="openbmc_ffdc_methods" name="Execute Command and Write FFDC">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status starttime="20161215 19:52:19.645" status="PASS" endtime="20161215 19:52:19.650"></status>
</kw>
<kw library="SSHLibrary" name="Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20161215 19:52:19.651">Executing command 'dmesg'.</msg>
<msg level="INFO" timestamp="20161215 19:52:19.742">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20161215 19:52:19.743">${stdout} = Booting Linux on physical CPU 0x0
Linux version 4.7.10-6fcd70b7e3d37b9189c9cdbcb982cf0862f63dff (jenkins@hudson) (gcc version 5.3.0 (GCC) ) #1 Mon Nov 28 09:47:45 UTC 2016
CPU: ARM926EJ-S [41069265] r...</msg>
<msg level="INFO" timestamp="20161215 19:52:19.743">${stderr} = </msg>
<status starttime="20161215 19:52:19.651" status="PASS" endtime="20161215 19:52:19.743"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${stderr}' == '${EMPTY}'</arg>
<arg>Write Data to File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>Write Data to File</arg>
<arg>${stderr}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data to File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20161215 19:52:19.749">Appended to file '&lt;a href="file:///tmp/root/17453/obmc-robot/logs/20161215195203016694_TestsTestBasicPoweron/20161215195203016694_powerontest/20161215195203016694_BMC_dmesg.txt"&gt;/tmp/root/17453/obmc-robot/logs/20161215195203016694_TestsTestBasicPoweron/20161215195203016694_powerontest/20161215195203016694_BMC_dmesg.txt&lt;/a&gt;'.</msg>
<status starttime="20161215 19:52:19.748" status="PASS" endtime="20161215 19:52:19.749"></status>
</kw>
<status starttime="20161215 19:52:19.748" status="PASS" endtime="20161215 19:52:19.749"></status>
</kw>
<status starttime="20161215 19:52:19.743" status="PASS" endtime="20161215 19:52:19.749"></status>
</kw>
<status starttime="20161215 19:52:19.644" status="PASS" endtime="20161215 19:52:19.749"></status>
</kw>
<status starttime="20161215 19:52:19.643" status="PASS" endtime="20161215 19:52:19.749"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_proc_list', 'top -n 1 -b')">
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20161215 19:52:19.750">${logpath} = /tmp/root/17453/obmc-robot/logs/20161215195203016694_TestsTestBasicPoweron/20161215195203016694_powerontest/20161215195203016694_BMC_proc_list.txt</msg>
<status starttime="20161215 19:52:19.750" status="PASS" endtime="20161215 19:52:19.750"></status>
</kw>
<kw library="openbmc_ffdc_methods" name="Execute Command and Write FFDC">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status starttime="20161215 19:52:19.751" status="PASS" endtime="20161215 19:52:19.755"></status>
</kw>
<kw library="SSHLibrary" name="Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20161215 19:52:19.755">Executing command 'top -n 1 -b'.</msg>
<msg level="INFO" timestamp="20161215 19:52:20.094">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20161215 19:52:20.094">${stdout} = Mem: 130688K used, 368332K free, 9168K shrd, 10352K buff, 43076K cached
CPU:   0% usr   0% sys   0% nic 100% idle   0% io   0% irq   0% sirq
Load average: 3.38 3.08 1.58 1/118 1037
  PID  PPID USER   ...</msg>
<msg level="INFO" timestamp="20161215 19:52:20.094">${stderr} = </msg>
<status starttime="20161215 19:52:19.755" status="PASS" endtime="20161215 19:52:20.094"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${stderr}' == '${EMPTY}'</arg>
<arg>Write Data to File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>Write Data to File</arg>
<arg>${stderr}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data to File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20161215 19:52:20.102">Appended to file '&lt;a href="file:///tmp/root/17453/obmc-robot/logs/20161215195203016694_TestsTestBasicPoweron/20161215195203016694_powerontest/20161215195203016694_BMC_proc_list.txt"&gt;/tmp/root/17453/obmc-robot/logs/20161215195203016694_TestsTestBasicPoweron/20161215195203016694_powerontest/20161215195203016694_BMC_proc_list.txt&lt;/a&gt;'.</msg>
<status starttime="20161215 19:52:20.101" status="PASS" endtime="20161215 19:52:20.102"></status>
</kw>
<status starttime="20161215 19:52:20.100" status="PASS" endtime="20161215 19:52:20.102"></status>
</kw>
<status starttime="20161215 19:52:20.095" status="PASS" endtime="20161215 19:52:20.102"></status>
</kw>
<status starttime="20161215 19:52:19.751" status="PASS" endtime="20161215 19:52:20.102"></status>
</kw>
<status starttime="20161215 19:52:19.750" status="PASS" endtime="20161215 19:52:20.102"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_meminfo', 'cat /proc/meminfo')">
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20161215 19:52:20.104">${logpath} = /tmp/root/17453/obmc-robot/logs/20161215195203016694_TestsTestBasicPoweron/20161215195203016694_powerontest/20161215195203016694_BMC_meminfo.txt</msg>
<status starttime="20161215 19:52:20.103" status="PASS" endtime="20161215 19:52:20.104"></status>
</kw>
<kw library="openbmc_ffdc_methods" name="Execute Command and Write FFDC">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status starttime="20161215 19:52:20.105" status="PASS" endtime="20161215 19:52:20.109"></status>
</kw>
<kw library="SSHLibrary" name="Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20161215 19:52:20.110">Executing command 'cat /proc/meminfo'.</msg>
<msg level="INFO" timestamp="20161215 19:52:20.300">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20161215 19:52:20.300">${stdout} = MemTotal:         499020 kB
MemFree:          368332 kB
MemAvailable:     407412 kB
Buffers:           10352 kB
Cached:            43076 kB
SwapCached:            0 kB
Active:            93540 kB
Inac...</msg>
<msg level="INFO" timestamp="20161215 19:52:20.300">${stderr} = </msg>
<status starttime="20161215 19:52:20.109" status="PASS" endtime="20161215 19:52:20.300"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${stderr}' == '${EMPTY}'</arg>
<arg>Write Data to File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>Write Data to File</arg>
<arg>${stderr}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data to File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20161215 19:52:20.304">Appended to file '&lt;a href="file:///tmp/root/17453/obmc-robot/logs/20161215195203016694_TestsTestBasicPoweron/20161215195203016694_powerontest/20161215195203016694_BMC_meminfo.txt"&gt;/tmp/root/17453/obmc-robot/logs/20161215195203016694_TestsTestBasicPoweron/20161215195203016694_powerontest/20161215195203016694_BMC_meminfo.txt&lt;/a&gt;'.</msg>
<status starttime="20161215 19:52:20.304" status="PASS" endtime="20161215 19:52:20.304"></status>
</kw>
<status starttime="20161215 19:52:20.303" status="PASS" endtime="20161215 19:52:20.305"></status>
</kw>
<status starttime="20161215 19:52:20.300" status="PASS" endtime="20161215 19:52:20.305"></status>
</kw>
<status starttime="20161215 19:52:20.104" status="PASS" endtime="20161215 19:52:20.305"></status>
</kw>
<status starttime="20161215 19:52:20.103" status="PASS" endtime="20161215 19:52:20.305"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_procinfo', 'cat /proc/cpuinfo')">
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20161215 19:52:20.305">${logpath} = /tmp/root/17453/obmc-robot/logs/20161215195203016694_TestsTestBasicPoweron/20161215195203016694_powerontest/20161215195203016694_BMC_procinfo.txt</msg>
<status starttime="20161215 19:52:20.305" status="PASS" endtime="20161215 19:52:20.305"></status>
</kw>
<kw library="openbmc_ffdc_methods" name="Execute Command and Write FFDC">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status starttime="20161215 19:52:20.306" status="PASS" endtime="20161215 19:52:20.309"></status>
</kw>
<kw library="SSHLibrary" name="Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20161215 19:52:20.310">Executing command 'cat /proc/cpuinfo'.</msg>
<msg level="INFO" timestamp="20161215 19:52:20.413">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20161215 19:52:20.414">${stdout} = processor	: 0
model name	: ARM926EJ-S rev 5 (v5l)
BogoMIPS	: 190.87
Features	: swp half thumb fastmult edsp java 
CPU implementer	: 0x41
CPU architecture: 5TEJ
CPU variant	: 0x0
CPU part	: 0x926
CPU r...</msg>
<msg level="INFO" timestamp="20161215 19:52:20.414">${stderr} = </msg>
<status starttime="20161215 19:52:20.309" status="PASS" endtime="20161215 19:52:20.414"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${stderr}' == '${EMPTY}'</arg>
<arg>Write Data to File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>Write Data to File</arg>
<arg>${stderr}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data to File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20161215 19:52:20.418">Appended to file '&lt;a href="file:///tmp/root/17453/obmc-robot/logs/20161215195203016694_TestsTestBasicPoweron/20161215195203016694_powerontest/20161215195203016694_BMC_procinfo.txt"&gt;/tmp/root/17453/obmc-robot/logs/20161215195203016694_TestsTestBasicPoweron/20161215195203016694_powerontest/20161215195203016694_BMC_procinfo.txt&lt;/a&gt;'.</msg>
<status starttime="20161215 19:52:20.418" status="PASS" endtime="20161215 19:52:20.418"></status>
</kw>
<status starttime="20161215 19:52:20.417" status="PASS" endtime="20161215 19:52:20.418"></status>
</kw>
<status starttime="20161215 19:52:20.414" status="PASS" endtime="20161215 19:52:20.419"></status>
</kw>
<status starttime="20161215 19:52:20.306" status="PASS" endtime="20161215 19:52:20.419"></status>
</kw>
<status starttime="20161215 19:52:20.305" status="PASS" endtime="20161215 19:52:20.419"></status>
</kw>
<status starttime="20161215 19:52:16.304" status="PASS" endtime="20161215 19:52:20.419"></status>
</kw>
<status starttime="20161215 19:52:16.303" status="PASS" endtime="20161215 19:52:20.419"></status>
</kw>
<status starttime="20161215 19:52:16.303" status="PASS" endtime="20161215 19:52:20.419"></status>
</kw>
<status starttime="20161215 19:52:16.302" status="PASS" endtime="20161215 19:52:20.419"></status>
</kw>
<status starttime="20161215 19:52:13.393" status="PASS" endtime="20161215 19:52:20.419"></status>
</kw>
<status starttime="20161215 19:52:13.393" status="PASS" endtime="20161215 19:52:20.419"></status>
</kw>
<status starttime="20161215 19:52:13.392" status="PASS" endtime="20161215 19:52:20.419"></status>
</kw>
<status starttime="20161215 19:52:13.392" status="PASS" endtime="20161215 19:52:20.419"></status>
</kw>
<kw type="foritem" name="${method} = ('FFDC Generic Report', 'BMC FFDC Manifest')">
<kw library="openbmc_ffdc_methods" name="Execute Keyword Method">
<doc>Calls into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[1]}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword And Continue On Failure">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>${keyword_name}</arg>
</arguments>
<kw library="openbmc_ffdc_methods" name="BMC FFDC Manifest">
<doc>Get the commands index for the FFDC_BMC_CMD,</doc>
<kw library="connection_client" name="Open Connection And Log In">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw library="Collections" name="Dictionary Should Contain Key">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg level="FAIL" timestamp="20161215 19:52:20.422">Dictionary does not contain key 'host'.</msg>
<status starttime="20161215 19:52:20.421" status="FAIL" endtime="20161215 19:52:20.422"></status>
</kw>
<msg level="INFO" timestamp="20161215 19:52:20.422">${has_host} = False</msg>
<status starttime="20161215 19:52:20.421" status="PASS" endtime="20161215 19:52:20.422"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status starttime="20161215 19:52:20.425" status="PASS" endtime="20161215 19:52:20.425"></status>
</kw>
<status starttime="20161215 19:52:20.422" status="PASS" endtime="20161215 19:52:20.426"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<kw library="connection_client" name="User input SSH and HTTPs Ports">
<doc>Update the global SSH and HTTPs port variable for QEMU</doc>
<kw library="BuiltIn" name="Convert To Integer">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${SSH_PORT}</arg>
</arguments>
<assign>
<var>${port_num}</var>
</assign>
<msg level="INFO" timestamp="20161215 19:52:20.429">${port_num} = 22</msg>
<status starttime="20161215 19:52:20.429" status="PASS" endtime="20161215 19:52:20.430"></status>
</kw>
<kw library="BuiltIn" name="Replace Variables">
<doc>Replaces variables in the given text with their current values.</doc>
<arguments>
<arg>${port_num}</arg>
</arguments>
<assign>
<var>${SSH_PORT}</var>
</assign>
<msg level="INFO" timestamp="20161215 19:52:20.430">${SSH_PORT} = 22</msg>
<status starttime="20161215 19:52:20.430" status="PASS" endtime="20161215 19:52:20.430"></status>
</kw>
<kw library="BuiltIn" name="Convert To Integer">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${HTTPS_PORT}</arg>
</arguments>
<assign>
<var>${https_num}</var>
</assign>
<msg level="INFO" timestamp="20161215 19:52:20.430">${https_num} = 443</msg>
<status starttime="20161215 19:52:20.430" status="PASS" endtime="20161215 19:52:20.431"></status>
</kw>
<kw library="BuiltIn" name="Set Global Variable">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${AUTH_URI}</arg>
<arg>https://${OPENBMC_HOST}:${https_num}</arg>
</arguments>
<msg level="INFO" timestamp="20161215 19:52:20.431">${AUTH_URI} = https://9.3.23.30:443</msg>
<status starttime="20161215 19:52:20.431" status="PASS" endtime="20161215 19:52:20.431"></status>
</kw>
<status starttime="20161215 19:52:20.429" status="PASS" endtime="20161215 19:52:20.431"></status>
</kw>
<status starttime="20161215 19:52:20.426" status="PASS" endtime="20161215 19:52:20.431"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw library="Collections" name="Dictionary Should Contain Key">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg level="FAIL" timestamp="20161215 19:52:20.432">Dictionary does not contain key 'port'.</msg>
<status starttime="20161215 19:52:20.432" status="FAIL" endtime="20161215 19:52:20.432"></status>
</kw>
<msg level="INFO" timestamp="20161215 19:52:20.432">${has_port} = False</msg>
<status starttime="20161215 19:52:20.432" status="PASS" endtime="20161215 19:52:20.433"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keywords">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
</arguments>
<status starttime="20161215 19:52:20.436" status="PASS" endtime="20161215 19:52:20.437"></status>
</kw>
<kw library="SSHLibrary" name="Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status starttime="20161215 19:52:20.437" status="PASS" endtime="20161215 19:52:20.437"></status>
</kw>
<status starttime="20161215 19:52:20.436" status="PASS" endtime="20161215 19:52:20.437"></status>
</kw>
<status starttime="20161215 19:52:20.433" status="PASS" endtime="20161215 19:52:20.437"></status>
</kw>
<kw library="SSHLibrary" name="Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg level="INFO" timestamp="20161215 19:52:20.438">Logging into '9.3.23.30:22' as 'root'.</msg>
<msg level="INFO" timestamp="20161215 19:52:22.635">Read output: 7[r[999;999H[6n</msg>
<status starttime="20161215 19:52:20.438" status="PASS" endtime="20161215 19:52:22.636"></status>
</kw>
<status starttime="20161215 19:52:20.421" status="PASS" endtime="20161215 19:52:22.636"></status>
</kw>
<kw library="openbmc_ffdc_list" name="Get Ffdc Cmd Index">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg level="INFO" timestamp="20161215 19:52:22.638">@{entries} = [ APPLICATION DATA | DRIVER INFO | BMC DATA ]</msg>
<status starttime="20161215 19:52:22.637" status="PASS" endtime="20161215 19:52:22.638"></status>
</kw>
<kw type="for" name="${index} IN [ @{entries} ]">
<kw type="foritem" name="${index} = APPLICATION DATA">
<kw library="openbmc_ffdc_methods" name="Iterate BMC Command List Pairs">
<doc>Feed in key pair list from dictionary to execute</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw library="openbmc_ffdc_list" name="Get Ffdc Bmc Cmd">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg level="INFO" timestamp="20161215 19:52:22.641">@{cmd_list} = [ ('BMC state', '/usr/sbin/obmcutil  state') ]</msg>
<status starttime="20161215 19:52:22.640" status="PASS" endtime="20161215 19:52:22.641"></status>
</kw>
<kw library="BuiltIn" name="Set Suite Variable">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${ENTRY_INDEX}</arg>
<arg>${key_index}</arg>
</arguments>
<msg level="INFO" timestamp="20161215 19:52:22.647">${ENTRY_INDEX} = APPLICATION DATA</msg>
<status starttime="20161215 19:52:22.642" status="PASS" endtime="20161215 19:52:22.647"></status>
</kw>
<kw type="for" name="${cmd} IN [ @{cmd_list} ]">
<kw type="foritem" name="${cmd} = ('BMC state', '/usr/sbin/obmcutil  state')">
<kw library="openbmc_ffdc_methods" name="Execute Command and Write FFDC">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Cmd Output to FFDC File">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data to File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20161215 19:52:22.653">Appended to file '&lt;a href="file:///tmp/root/17453/obmc-robot/logs/20161215195203016694_TestsTestBasicPoweron/20161215195203016694_powerontest/20161215195203016694_BMC_general.txt"&gt;/tmp/root/17453/obmc-robot/logs/20161215195203016694_TestsTestBasicPoweron/20161215195203016694_powerontest/20161215195203016694_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20161215 19:52:22.652" status="PASS" endtime="20161215 19:52:22.653"></status>
</kw>
<status starttime="20161215 19:52:22.652" status="PASS" endtime="20161215 19:52:22.653"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data to File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20161215 19:52:22.654">Appended to file '&lt;a href="file:///tmp/root/17453/obmc-robot/logs/20161215195203016694_TestsTestBasicPoweron/20161215195203016694_powerontest/20161215195203016694_BMC_general.txt"&gt;/tmp/root/17453/obmc-robot/logs/20161215195203016694_TestsTestBasicPoweron/20161215195203016694_powerontest/20161215195203016694_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20161215 19:52:22.654" status="PASS" endtime="20161215 19:52:22.654"></status>
</kw>
<status starttime="20161215 19:52:22.653" status="PASS" endtime="20161215 19:52:22.654"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data to File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20161215 19:52:22.655">Appended to file '&lt;a href="file:///tmp/root/17453/obmc-robot/logs/20161215195203016694_TestsTestBasicPoweron/20161215195203016694_powerontest/20161215195203016694_BMC_general.txt"&gt;/tmp/root/17453/obmc-robot/logs/20161215195203016694_TestsTestBasicPoweron/20161215195203016694_powerontest/20161215195203016694_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20161215 19:52:22.655" status="PASS" endtime="20161215 19:52:22.655"></status>
</kw>
<status starttime="20161215 19:52:22.654" status="PASS" endtime="20161215 19:52:22.655"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data to File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20161215 19:52:22.656">Appended to file '&lt;a href="file:///tmp/root/17453/obmc-robot/logs/20161215195203016694_TestsTestBasicPoweron/20161215195203016694_powerontest/20161215195203016694_BMC_general.txt"&gt;/tmp/root/17453/obmc-robot/logs/20161215195203016694_TestsTestBasicPoweron/20161215195203016694_powerontest/20161215195203016694_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20161215 19:52:22.656" status="PASS" endtime="20161215 19:52:22.656"></status>
</kw>
<status starttime="20161215 19:52:22.655" status="PASS" endtime="20161215 19:52:22.656"></status>
</kw>
<status starttime="20161215 19:52:22.651" status="PASS" endtime="20161215 19:52:22.657"></status>
</kw>
<status starttime="20161215 19:52:22.648" status="PASS" endtime="20161215 19:52:22.657"></status>
</kw>
<kw library="SSHLibrary" name="Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20161215 19:52:22.657">Executing command '/usr/sbin/obmcutil  state'.</msg>
<msg level="INFO" timestamp="20161215 19:52:24.480">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20161215 19:52:24.480">${stdout} =  = HOST_POWERING_ON</msg>
<msg level="INFO" timestamp="20161215 19:52:24.480">${stderr} = </msg>
<status starttime="20161215 19:52:22.657" status="PASS" endtime="20161215 19:52:24.480"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${stderr}' == '${EMPTY}'</arg>
<arg>Write Data to File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>Write Data to File</arg>
<arg>${stderr}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data to File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20161215 19:52:24.489">Appended to file '&lt;a href="file:///tmp/root/17453/obmc-robot/logs/20161215195203016694_TestsTestBasicPoweron/20161215195203016694_powerontest/20161215195203016694_BMC_general.txt"&gt;/tmp/root/17453/obmc-robot/logs/20161215195203016694_TestsTestBasicPoweron/20161215195203016694_powerontest/20161215195203016694_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20161215 19:52:24.488" status="PASS" endtime="20161215 19:52:24.490"></status>
</kw>
<status starttime="20161215 19:52:24.487" status="PASS" endtime="20161215 19:52:24.490"></status>
</kw>
<status starttime="20161215 19:52:24.481" status="PASS" endtime="20161215 19:52:24.490"></status>
</kw>
<status starttime="20161215 19:52:22.648" status="PASS" endtime="20161215 19:52:24.490"></status>
</kw>
<status starttime="20161215 19:52:22.648" status="PASS" endtime="20161215 19:52:24.490"></status>
</kw>
<status starttime="20161215 19:52:22.647" status="PASS" endtime="20161215 19:52:24.491"></status>
</kw>
<status starttime="20161215 19:52:22.639" status="PASS" endtime="20161215 19:52:24.491"></status>
</kw>
<status starttime="20161215 19:52:22.639" status="PASS" endtime="20161215 19:52:24.491"></status>
</kw>
<kw type="foritem" name="${index} = DRIVER INFO">
<kw library="openbmc_ffdc_methods" name="Iterate BMC Command List Pairs">
<doc>Feed in key pair list from dictionary to execute</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw library="openbmc_ffdc_list" name="Get Ffdc Bmc Cmd">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg level="INFO" timestamp="20161215 19:52:24.492">@{cmd_list} = [ ('FW Level', 'cat /etc/os-release') | ('Build Info', 'cat /etc/version') ]</msg>
<status starttime="20161215 19:52:24.492" status="PASS" endtime="20161215 19:52:24.493"></status>
</kw>
<kw library="BuiltIn" name="Set Suite Variable">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${ENTRY_INDEX}</arg>
<arg>${key_index}</arg>
</arguments>
<msg level="INFO" timestamp="20161215 19:52:24.494">${ENTRY_INDEX} = DRIVER INFO</msg>
<status starttime="20161215 19:52:24.493" status="PASS" endtime="20161215 19:52:24.494"></status>
</kw>
<kw type="for" name="${cmd} IN [ @{cmd_list} ]">
<kw type="foritem" name="${cmd} = ('FW Level', 'cat /etc/os-release')">
<kw library="openbmc_ffdc_methods" name="Execute Command and Write FFDC">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Cmd Output to FFDC File">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data to File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20161215 19:52:24.501">Appended to file '&lt;a href="file:///tmp/root/17453/obmc-robot/logs/20161215195203016694_TestsTestBasicPoweron/20161215195203016694_powerontest/20161215195203016694_BMC_general.txt"&gt;/tmp/root/17453/obmc-robot/logs/20161215195203016694_TestsTestBasicPoweron/20161215195203016694_powerontest/20161215195203016694_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20161215 19:52:24.501" status="PASS" endtime="20161215 19:52:24.501"></status>
</kw>
<status starttime="20161215 19:52:24.500" status="PASS" endtime="20161215 19:52:24.501"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data to File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20161215 19:52:24.502">Appended to file '&lt;a href="file:///tmp/root/17453/obmc-robot/logs/20161215195203016694_TestsTestBasicPoweron/20161215195203016694_powerontest/20161215195203016694_BMC_general.txt"&gt;/tmp/root/17453/obmc-robot/logs/20161215195203016694_TestsTestBasicPoweron/20161215195203016694_powerontest/20161215195203016694_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20161215 19:52:24.502" status="PASS" endtime="20161215 19:52:24.502"></status>
</kw>
<status starttime="20161215 19:52:24.501" status="PASS" endtime="20161215 19:52:24.503"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data to File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20161215 19:52:24.504">Appended to file '&lt;a href="file:///tmp/root/17453/obmc-robot/logs/20161215195203016694_TestsTestBasicPoweron/20161215195203016694_powerontest/20161215195203016694_BMC_general.txt"&gt;/tmp/root/17453/obmc-robot/logs/20161215195203016694_TestsTestBasicPoweron/20161215195203016694_powerontest/20161215195203016694_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20161215 19:52:24.503" status="PASS" endtime="20161215 19:52:24.504"></status>
</kw>
<status starttime="20161215 19:52:24.503" status="PASS" endtime="20161215 19:52:24.504"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data to File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20161215 19:52:24.505">Appended to file '&lt;a href="file:///tmp/root/17453/obmc-robot/logs/20161215195203016694_TestsTestBasicPoweron/20161215195203016694_powerontest/20161215195203016694_BMC_general.txt"&gt;/tmp/root/17453/obmc-robot/logs/20161215195203016694_TestsTestBasicPoweron/20161215195203016694_powerontest/20161215195203016694_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20161215 19:52:24.504" status="PASS" endtime="20161215 19:52:24.505"></status>
</kw>
<status starttime="20161215 19:52:24.504" status="PASS" endtime="20161215 19:52:24.505"></status>
</kw>
<status starttime="20161215 19:52:24.500" status="PASS" endtime="20161215 19:52:24.505"></status>
</kw>
<status starttime="20161215 19:52:24.496" status="PASS" endtime="20161215 19:52:24.505"></status>
</kw>
<kw library="SSHLibrary" name="Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20161215 19:52:24.506">Executing command 'cat /etc/os-release'.</msg>
<msg level="INFO" timestamp="20161215 19:52:24.635">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20161215 19:52:24.635">${stdout} = ID="openbmc-phosphor"
NAME="Phosphor OpenBMC (Phosphor OpenBMC Project Reference Distro)"
VERSION="v1.99.0-328"
VERSION_ID="v1.99.0-328-g00da690-dirty"
PRETTY_NAME="Phosphor OpenBMC (Phosphor OpenBMC ...</msg>
<msg level="INFO" timestamp="20161215 19:52:24.635">${stderr} = </msg>
<status starttime="20161215 19:52:24.505" status="PASS" endtime="20161215 19:52:24.635"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${stderr}' == '${EMPTY}'</arg>
<arg>Write Data to File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>Write Data to File</arg>
<arg>${stderr}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data to File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20161215 19:52:24.643">Appended to file '&lt;a href="file:///tmp/root/17453/obmc-robot/logs/20161215195203016694_TestsTestBasicPoweron/20161215195203016694_powerontest/20161215195203016694_BMC_general.txt"&gt;/tmp/root/17453/obmc-robot/logs/20161215195203016694_TestsTestBasicPoweron/20161215195203016694_powerontest/20161215195203016694_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20161215 19:52:24.643" status="PASS" endtime="20161215 19:52:24.644"></status>
</kw>
<status starttime="20161215 19:52:24.642" status="PASS" endtime="20161215 19:52:24.644"></status>
</kw>
<status starttime="20161215 19:52:24.636" status="PASS" endtime="20161215 19:52:24.645"></status>
</kw>
<status starttime="20161215 19:52:24.494" status="PASS" endtime="20161215 19:52:24.645"></status>
</kw>
<status starttime="20161215 19:52:24.494" status="PASS" endtime="20161215 19:52:24.645"></status>
</kw>
<kw type="foritem" name="${cmd} = ('Build Info', 'cat /etc/version')">
<kw library="openbmc_ffdc_methods" name="Execute Command and Write FFDC">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Cmd Output to FFDC File">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data to File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20161215 19:52:24.657">Appended to file '&lt;a href="file:///tmp/root/17453/obmc-robot/logs/20161215195203016694_TestsTestBasicPoweron/20161215195203016694_powerontest/20161215195203016694_BMC_general.txt"&gt;/tmp/root/17453/obmc-robot/logs/20161215195203016694_TestsTestBasicPoweron/20161215195203016694_powerontest/20161215195203016694_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20161215 19:52:24.656" status="PASS" endtime="20161215 19:52:24.657"></status>
</kw>
<status starttime="20161215 19:52:24.655" status="PASS" endtime="20161215 19:52:24.657"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data to File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20161215 19:52:24.659">Appended to file '&lt;a href="file:///tmp/root/17453/obmc-robot/logs/20161215195203016694_TestsTestBasicPoweron/20161215195203016694_powerontest/20161215195203016694_BMC_general.txt"&gt;/tmp/root/17453/obmc-robot/logs/20161215195203016694_TestsTestBasicPoweron/20161215195203016694_powerontest/20161215195203016694_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20161215 19:52:24.659" status="PASS" endtime="20161215 19:52:24.660"></status>
</kw>
<status starttime="20161215 19:52:24.658" status="PASS" endtime="20161215 19:52:24.660"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data to File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20161215 19:52:24.662">Appended to file '&lt;a href="file:///tmp/root/17453/obmc-robot/logs/20161215195203016694_TestsTestBasicPoweron/20161215195203016694_powerontest/20161215195203016694_BMC_general.txt"&gt;/tmp/root/17453/obmc-robot/logs/20161215195203016694_TestsTestBasicPoweron/20161215195203016694_powerontest/20161215195203016694_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20161215 19:52:24.661" status="PASS" endtime="20161215 19:52:24.662"></status>
</kw>
<status starttime="20161215 19:52:24.660" status="PASS" endtime="20161215 19:52:24.662"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data to File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20161215 19:52:24.663">Appended to file '&lt;a href="file:///tmp/root/17453/obmc-robot/logs/20161215195203016694_TestsTestBasicPoweron/20161215195203016694_powerontest/20161215195203016694_BMC_general.txt"&gt;/tmp/root/17453/obmc-robot/logs/20161215195203016694_TestsTestBasicPoweron/20161215195203016694_powerontest/20161215195203016694_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20161215 19:52:24.663" status="PASS" endtime="20161215 19:52:24.663"></status>
</kw>
<status starttime="20161215 19:52:24.662" status="PASS" endtime="20161215 19:52:24.663"></status>
</kw>
<status starttime="20161215 19:52:24.654" status="PASS" endtime="20161215 19:52:24.663"></status>
</kw>
<status starttime="20161215 19:52:24.648" status="PASS" endtime="20161215 19:52:24.663"></status>
</kw>
<kw library="SSHLibrary" name="Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20161215 19:52:24.664">Executing command 'cat /etc/version'.</msg>
<msg level="INFO" timestamp="20161215 19:52:24.732">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20161215 19:52:24.733">${stdout} = 20161215192255</msg>
<msg level="INFO" timestamp="20161215 19:52:24.733">${stderr} = </msg>
<status starttime="20161215 19:52:24.664" status="PASS" endtime="20161215 19:52:24.733"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${stderr}' == '${EMPTY}'</arg>
<arg>Write Data to File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>Write Data to File</arg>
<arg>${stderr}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data to File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20161215 19:52:24.740">Appended to file '&lt;a href="file:///tmp/root/17453/obmc-robot/logs/20161215195203016694_TestsTestBasicPoweron/20161215195203016694_powerontest/20161215195203016694_BMC_general.txt"&gt;/tmp/root/17453/obmc-robot/logs/20161215195203016694_TestsTestBasicPoweron/20161215195203016694_powerontest/20161215195203016694_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20161215 19:52:24.739" status="PASS" endtime="20161215 19:52:24.740"></status>
</kw>
<status starttime="20161215 19:52:24.739" status="PASS" endtime="20161215 19:52:24.740"></status>
</kw>
<status starttime="20161215 19:52:24.733" status="PASS" endtime="20161215 19:52:24.741"></status>
</kw>
<status starttime="20161215 19:52:24.646" status="PASS" endtime="20161215 19:52:24.741"></status>
</kw>
<status starttime="20161215 19:52:24.645" status="PASS" endtime="20161215 19:52:24.741"></status>
</kw>
<status starttime="20161215 19:52:24.494" status="PASS" endtime="20161215 19:52:24.741"></status>
</kw>
<status starttime="20161215 19:52:24.491" status="PASS" endtime="20161215 19:52:24.741"></status>
</kw>
<status starttime="20161215 19:52:24.491" status="PASS" endtime="20161215 19:52:24.741"></status>
</kw>
<kw type="foritem" name="${index} = BMC DATA">
<kw library="openbmc_ffdc_methods" name="Iterate BMC Command List Pairs">
<doc>Feed in key pair list from dictionary to execute</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw library="openbmc_ffdc_list" name="Get Ffdc Bmc Cmd">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg level="INFO" timestamp="20161215 19:52:24.743">@{cmd_list} = [ ('BMC File System Disk Space Usage', 'df -hT') | ('BMC Uptime', 'uptime') | ('BMC OS', 'uname -a') ]</msg>
<status starttime="20161215 19:52:24.743" status="PASS" endtime="20161215 19:52:24.743"></status>
</kw>
<kw library="BuiltIn" name="Set Suite Variable">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${ENTRY_INDEX}</arg>
<arg>${key_index}</arg>
</arguments>
<msg level="INFO" timestamp="20161215 19:52:24.744">${ENTRY_INDEX} = BMC DATA</msg>
<status starttime="20161215 19:52:24.744" status="PASS" endtime="20161215 19:52:24.744"></status>
</kw>
<kw type="for" name="${cmd} IN [ @{cmd_list} ]">
<kw type="foritem" name="${cmd} = ('BMC File System Disk Space Usage', 'df -hT')">
<kw library="openbmc_ffdc_methods" name="Execute Command and Write FFDC">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Cmd Output to FFDC File">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data to File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20161215 19:52:24.753">Appended to file '&lt;a href="file:///tmp/root/17453/obmc-robot/logs/20161215195203016694_TestsTestBasicPoweron/20161215195203016694_powerontest/20161215195203016694_BMC_general.txt"&gt;/tmp/root/17453/obmc-robot/logs/20161215195203016694_TestsTestBasicPoweron/20161215195203016694_powerontest/20161215195203016694_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20161215 19:52:24.752" status="PASS" endtime="20161215 19:52:24.753"></status>
</kw>
<status starttime="20161215 19:52:24.752" status="PASS" endtime="20161215 19:52:24.753"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data to File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20161215 19:52:24.754">Appended to file '&lt;a href="file:///tmp/root/17453/obmc-robot/logs/20161215195203016694_TestsTestBasicPoweron/20161215195203016694_powerontest/20161215195203016694_BMC_general.txt"&gt;/tmp/root/17453/obmc-robot/logs/20161215195203016694_TestsTestBasicPoweron/20161215195203016694_powerontest/20161215195203016694_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20161215 19:52:24.754" status="PASS" endtime="20161215 19:52:24.755"></status>
</kw>
<status starttime="20161215 19:52:24.753" status="PASS" endtime="20161215 19:52:24.755"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data to File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20161215 19:52:24.756">Appended to file '&lt;a href="file:///tmp/root/17453/obmc-robot/logs/20161215195203016694_TestsTestBasicPoweron/20161215195203016694_powerontest/20161215195203016694_BMC_general.txt"&gt;/tmp/root/17453/obmc-robot/logs/20161215195203016694_TestsTestBasicPoweron/20161215195203016694_powerontest/20161215195203016694_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20161215 19:52:24.755" status="PASS" endtime="20161215 19:52:24.756"></status>
</kw>
<status starttime="20161215 19:52:24.755" status="PASS" endtime="20161215 19:52:24.756"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data to File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20161215 19:52:24.757">Appended to file '&lt;a href="file:///tmp/root/17453/obmc-robot/logs/20161215195203016694_TestsTestBasicPoweron/20161215195203016694_powerontest/20161215195203016694_BMC_general.txt"&gt;/tmp/root/17453/obmc-robot/logs/20161215195203016694_TestsTestBasicPoweron/20161215195203016694_powerontest/20161215195203016694_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20161215 19:52:24.757" status="PASS" endtime="20161215 19:52:24.757"></status>
</kw>
<status starttime="20161215 19:52:24.756" status="PASS" endtime="20161215 19:52:24.757"></status>
</kw>
<status starttime="20161215 19:52:24.751" status="PASS" endtime="20161215 19:52:24.757"></status>
</kw>
<status starttime="20161215 19:52:24.746" status="PASS" endtime="20161215 19:52:24.757"></status>
</kw>
<kw library="SSHLibrary" name="Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20161215 19:52:24.758">Executing command 'df -hT'.</msg>
<msg level="INFO" timestamp="20161215 19:52:24.858">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20161215 19:52:24.858">${stdout} = Filesystem           Type            Size      Used Available Use% Mounted on
dev                  devtmpfs      242.4M         0    242.4M   0% /dev
tmpfs                tmpfs         243.7M      8.9...</msg>
<msg level="INFO" timestamp="20161215 19:52:24.858">${stderr} = </msg>
<status starttime="20161215 19:52:24.758" status="PASS" endtime="20161215 19:52:24.858"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${stderr}' == '${EMPTY}'</arg>
<arg>Write Data to File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>Write Data to File</arg>
<arg>${stderr}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data to File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20161215 19:52:24.863">Appended to file '&lt;a href="file:///tmp/root/17453/obmc-robot/logs/20161215195203016694_TestsTestBasicPoweron/20161215195203016694_powerontest/20161215195203016694_BMC_general.txt"&gt;/tmp/root/17453/obmc-robot/logs/20161215195203016694_TestsTestBasicPoweron/20161215195203016694_powerontest/20161215195203016694_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20161215 19:52:24.862" status="PASS" endtime="20161215 19:52:24.863"></status>
</kw>
<status starttime="20161215 19:52:24.862" status="PASS" endtime="20161215 19:52:24.863"></status>
</kw>
<status starttime="20161215 19:52:24.859" status="PASS" endtime="20161215 19:52:24.863"></status>
</kw>
<status starttime="20161215 19:52:24.745" status="PASS" endtime="20161215 19:52:24.863"></status>
</kw>
<status starttime="20161215 19:52:24.745" status="PASS" endtime="20161215 19:52:24.863"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC Uptime', 'uptime')">
<kw library="openbmc_ffdc_methods" name="Execute Command and Write FFDC">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Cmd Output to FFDC File">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data to File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20161215 19:52:24.869">Appended to file '&lt;a href="file:///tmp/root/17453/obmc-robot/logs/20161215195203016694_TestsTestBasicPoweron/20161215195203016694_powerontest/20161215195203016694_BMC_general.txt"&gt;/tmp/root/17453/obmc-robot/logs/20161215195203016694_TestsTestBasicPoweron/20161215195203016694_powerontest/20161215195203016694_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20161215 19:52:24.868" status="PASS" endtime="20161215 19:52:24.869"></status>
</kw>
<status starttime="20161215 19:52:24.868" status="PASS" endtime="20161215 19:52:24.869"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data to File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20161215 19:52:24.870">Appended to file '&lt;a href="file:///tmp/root/17453/obmc-robot/logs/20161215195203016694_TestsTestBasicPoweron/20161215195203016694_powerontest/20161215195203016694_BMC_general.txt"&gt;/tmp/root/17453/obmc-robot/logs/20161215195203016694_TestsTestBasicPoweron/20161215195203016694_powerontest/20161215195203016694_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20161215 19:52:24.870" status="PASS" endtime="20161215 19:52:24.870"></status>
</kw>
<status starttime="20161215 19:52:24.869" status="PASS" endtime="20161215 19:52:24.870"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data to File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20161215 19:52:24.871">Appended to file '&lt;a href="file:///tmp/root/17453/obmc-robot/logs/20161215195203016694_TestsTestBasicPoweron/20161215195203016694_powerontest/20161215195203016694_BMC_general.txt"&gt;/tmp/root/17453/obmc-robot/logs/20161215195203016694_TestsTestBasicPoweron/20161215195203016694_powerontest/20161215195203016694_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20161215 19:52:24.871" status="PASS" endtime="20161215 19:52:24.871"></status>
</kw>
<status starttime="20161215 19:52:24.870" status="PASS" endtime="20161215 19:52:24.871"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data to File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20161215 19:52:24.872">Appended to file '&lt;a href="file:///tmp/root/17453/obmc-robot/logs/20161215195203016694_TestsTestBasicPoweron/20161215195203016694_powerontest/20161215195203016694_BMC_general.txt"&gt;/tmp/root/17453/obmc-robot/logs/20161215195203016694_TestsTestBasicPoweron/20161215195203016694_powerontest/20161215195203016694_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20161215 19:52:24.872" status="PASS" endtime="20161215 19:52:24.873"></status>
</kw>
<status starttime="20161215 19:52:24.872" status="PASS" endtime="20161215 19:52:24.873"></status>
</kw>
<status starttime="20161215 19:52:24.867" status="PASS" endtime="20161215 19:52:24.873"></status>
</kw>
<status starttime="20161215 19:52:24.864" status="PASS" endtime="20161215 19:52:24.873"></status>
</kw>
<kw library="SSHLibrary" name="Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20161215 19:52:24.873">Executing command 'uptime'.</msg>
<msg level="INFO" timestamp="20161215 19:52:24.965">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20161215 19:52:24.965">${stdout} =  06:13:48 up 5 min,  load average: 3.18, 3.05, 1.57</msg>
<msg level="INFO" timestamp="20161215 19:52:24.965">${stderr} = </msg>
<status starttime="20161215 19:52:24.873" status="PASS" endtime="20161215 19:52:24.965"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${stderr}' == '${EMPTY}'</arg>
<arg>Write Data to File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>Write Data to File</arg>
<arg>${stderr}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data to File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20161215 19:52:24.969">Appended to file '&lt;a href="file:///tmp/root/17453/obmc-robot/logs/20161215195203016694_TestsTestBasicPoweron/20161215195203016694_powerontest/20161215195203016694_BMC_general.txt"&gt;/tmp/root/17453/obmc-robot/logs/20161215195203016694_TestsTestBasicPoweron/20161215195203016694_powerontest/20161215195203016694_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20161215 19:52:24.969" status="PASS" endtime="20161215 19:52:24.969"></status>
</kw>
<status starttime="20161215 19:52:24.968" status="PASS" endtime="20161215 19:52:24.969"></status>
</kw>
<status starttime="20161215 19:52:24.965" status="PASS" endtime="20161215 19:52:24.969"></status>
</kw>
<status starttime="20161215 19:52:24.863" status="PASS" endtime="20161215 19:52:24.970"></status>
</kw>
<status starttime="20161215 19:52:24.863" status="PASS" endtime="20161215 19:52:24.970"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC OS', 'uname -a')">
<kw library="openbmc_ffdc_methods" name="Execute Command and Write FFDC">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Cmd Output to FFDC File">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data to File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20161215 19:52:24.975">Appended to file '&lt;a href="file:///tmp/root/17453/obmc-robot/logs/20161215195203016694_TestsTestBasicPoweron/20161215195203016694_powerontest/20161215195203016694_BMC_general.txt"&gt;/tmp/root/17453/obmc-robot/logs/20161215195203016694_TestsTestBasicPoweron/20161215195203016694_powerontest/20161215195203016694_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20161215 19:52:24.975" status="PASS" endtime="20161215 19:52:24.975"></status>
</kw>
<status starttime="20161215 19:52:24.974" status="PASS" endtime="20161215 19:52:24.975"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data to File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20161215 19:52:24.977">Appended to file '&lt;a href="file:///tmp/root/17453/obmc-robot/logs/20161215195203016694_TestsTestBasicPoweron/20161215195203016694_powerontest/20161215195203016694_BMC_general.txt"&gt;/tmp/root/17453/obmc-robot/logs/20161215195203016694_TestsTestBasicPoweron/20161215195203016694_powerontest/20161215195203016694_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20161215 19:52:24.976" status="PASS" endtime="20161215 19:52:24.977"></status>
</kw>
<status starttime="20161215 19:52:24.976" status="PASS" endtime="20161215 19:52:24.977"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data to File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20161215 19:52:24.978">Appended to file '&lt;a href="file:///tmp/root/17453/obmc-robot/logs/20161215195203016694_TestsTestBasicPoweron/20161215195203016694_powerontest/20161215195203016694_BMC_general.txt"&gt;/tmp/root/17453/obmc-robot/logs/20161215195203016694_TestsTestBasicPoweron/20161215195203016694_powerontest/20161215195203016694_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20161215 19:52:24.978" status="PASS" endtime="20161215 19:52:24.978"></status>
</kw>
<status starttime="20161215 19:52:24.977" status="PASS" endtime="20161215 19:52:24.978"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data to File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20161215 19:52:24.979">Appended to file '&lt;a href="file:///tmp/root/17453/obmc-robot/logs/20161215195203016694_TestsTestBasicPoweron/20161215195203016694_powerontest/20161215195203016694_BMC_general.txt"&gt;/tmp/root/17453/obmc-robot/logs/20161215195203016694_TestsTestBasicPoweron/20161215195203016694_powerontest/20161215195203016694_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20161215 19:52:24.979" status="PASS" endtime="20161215 19:52:24.979"></status>
</kw>
<status starttime="20161215 19:52:24.978" status="PASS" endtime="20161215 19:52:24.979"></status>
</kw>
<status starttime="20161215 19:52:24.974" status="PASS" endtime="20161215 19:52:24.980"></status>
</kw>
<status starttime="20161215 19:52:24.970" status="PASS" endtime="20161215 19:52:24.980"></status>
</kw>
<kw library="SSHLibrary" name="Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20161215 19:52:24.980">Executing command 'uname -a'.</msg>
<msg level="INFO" timestamp="20161215 19:52:25.060">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20161215 19:52:25.060">${stdout} = Linux barreleye 4.7.10-6fcd70b7e3d37b9189c9cdbcb982cf0862f63dff #1 Mon Nov 28 09:47:45 UTC 2016 armv5tejl GNU/Linux</msg>
<msg level="INFO" timestamp="20161215 19:52:25.060">${stderr} = </msg>
<status starttime="20161215 19:52:24.980" status="PASS" endtime="20161215 19:52:25.060"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${stderr}' == '${EMPTY}'</arg>
<arg>Write Data to File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>Write Data to File</arg>
<arg>${stderr}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data to File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20161215 19:52:25.066">Appended to file '&lt;a href="file:///tmp/root/17453/obmc-robot/logs/20161215195203016694_TestsTestBasicPoweron/20161215195203016694_powerontest/20161215195203016694_BMC_general.txt"&gt;/tmp/root/17453/obmc-robot/logs/20161215195203016694_TestsTestBasicPoweron/20161215195203016694_powerontest/20161215195203016694_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20161215 19:52:25.065" status="PASS" endtime="20161215 19:52:25.066"></status>
</kw>
<status starttime="20161215 19:52:25.064" status="PASS" endtime="20161215 19:52:25.066"></status>
</kw>
<status starttime="20161215 19:52:25.061" status="PASS" endtime="20161215 19:52:25.066"></status>
</kw>
<status starttime="20161215 19:52:24.970" status="PASS" endtime="20161215 19:52:25.066"></status>
</kw>
<status starttime="20161215 19:52:24.970" status="PASS" endtime="20161215 19:52:25.066"></status>
</kw>
<status starttime="20161215 19:52:24.745" status="PASS" endtime="20161215 19:52:25.066"></status>
</kw>
<status starttime="20161215 19:52:24.742" status="PASS" endtime="20161215 19:52:25.066"></status>
</kw>
<status starttime="20161215 19:52:24.741" status="PASS" endtime="20161215 19:52:25.066"></status>
</kw>
<status starttime="20161215 19:52:22.639" status="PASS" endtime="20161215 19:52:25.066"></status>
</kw>
<status starttime="20161215 19:52:20.420" status="PASS" endtime="20161215 19:52:25.066"></status>
</kw>
<status starttime="20161215 19:52:20.420" status="PASS" endtime="20161215 19:52:25.066"></status>
</kw>
<status starttime="20161215 19:52:20.419" status="PASS" endtime="20161215 19:52:25.066"></status>
</kw>
<status starttime="20161215 19:52:20.419" status="PASS" endtime="20161215 19:52:25.066"></status>
</kw>
<kw type="foritem" name="${method} = ('OS FFDC', 'OS FFDC Files')">
<kw library="openbmc_ffdc_methods" name="Execute Keyword Method">
<doc>Calls into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[1]}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword And Continue On Failure">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>${keyword_name}</arg>
</arguments>
<kw library="openbmc_ffdc_methods" name="OS FFDC Files">
<doc>Get the command list and iterate</doc>
<kw library="BuiltIn" name="Return From Keyword If">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${OS_HOST}' == '${EMPTY}'</arg>
<arg>No OS Host Provided</arg>
</arguments>
<msg level="INFO" timestamp="20161215 19:52:25.071">Returning from the enclosing user keyword.</msg>
<status starttime="20161215 19:52:25.068" status="PASS" endtime="20161215 19:52:25.071"></status>
</kw>
<status starttime="20161215 19:52:25.068" status="PASS" endtime="20161215 19:52:25.071"></status>
</kw>
<status starttime="20161215 19:52:25.067" status="PASS" endtime="20161215 19:52:25.071"></status>
</kw>
<status starttime="20161215 19:52:25.067" status="PASS" endtime="20161215 19:52:25.072"></status>
</kw>
<status starttime="20161215 19:52:25.067" status="PASS" endtime="20161215 19:52:25.072"></status>
</kw>
<status starttime="20161215 19:52:03.077" status="FAIL" endtime="20161215 19:52:25.072"></status>
</kw>
<status starttime="20161215 19:52:03.076" status="FAIL" endtime="20161215 19:52:25.072"></status>
</kw>
<status starttime="20161215 19:52:03.076" status="FAIL" endtime="20161215 19:52:25.072"></status>
</kw>
<status starttime="20161215 19:52:03.076" status="FAIL" endtime="20161215 19:52:25.072"></status>
</kw>
<status starttime="20161215 19:52:03.075" status="FAIL" endtime="20161215 19:52:25.073"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Get Current Time Stamp">
<doc>Get the current time stamp data</doc>
<assign>
<var>${cur_time}</var>
</assign>
<kw library="DateTime" name="Get Current Date">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20161215 19:52:25.074">${cur_time} = 2016-12-15 19:52:25:073436</msg>
<status starttime="20161215 19:52:25.073" status="PASS" endtime="20161215 19:52:25.074"></status>
</kw>
<kw library="openbmc_ffdc_list" name="Get Strip String">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20161215 19:52:25.074">${cur_time} = 20161215195225073436</msg>
<status starttime="20161215 19:52:25.074" status="PASS" endtime="20161215 19:52:25.074"></status>
</kw>
<msg level="INFO" timestamp="20161215 19:52:25.074">${cur_time} = 20161215195225073436</msg>
<status starttime="20161215 19:52:25.073" status="PASS" endtime="20161215 19:52:25.074"></status>
</kw>
<kw library="BuiltIn" name="Log To Console">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>FFDC Collection Completed \t: ${cur_time}</arg>
</arguments>
<status starttime="20161215 19:52:25.075" status="PASS" endtime="20161215 19:52:25.075"></status>
</kw>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${\n}${FFDC_DIR_PATH}</arg>
</arguments>
<msg level="INFO" timestamp="20161215 19:52:25.075">
/tmp/root/17453/obmc-robot/logs/20161215195203016694_TestsTestBasicPoweron/20161215195203016694_powerontest</msg>
<status starttime="20161215 19:52:25.075" status="PASS" endtime="20161215 19:52:25.075"></status>
</kw>
<status starttime="20161215 19:52:03.015" status="FAIL" endtime="20161215 19:52:25.076"></status>
</kw>
<status starttime="20161215 19:52:03.011" status="FAIL" endtime="20161215 19:52:25.076"></status>
</kw>
<kw library="openbmc_ffdc_methods" name="Log Test Case Status">
<doc>Test case execution result history.</doc>
<kw library="OperatingSystem" name="Create Directory">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>${FFDC_LOG_PATH}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20161215 19:52:25.077">Directory '&lt;a href="file:///tmp/root/17453/obmc-robot/logs"&gt;/tmp/root/17453/obmc-robot/logs&lt;/a&gt;' already exists.</msg>
<status starttime="20161215 19:52:25.076" status="PASS" endtime="20161215 19:52:25.077"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>OperatingSystem.File Should Exist</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<assign>
<var>${exist}</var>
</assign>
<kw library="OperatingSystem" name="File Should Exist">
<doc>Fails unless the given ``path`` points to an existing file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20161215 19:52:25.078">File '&lt;a href="file:///tmp/root/17453/obmc-robot/logs/test_history.txt"&gt;/tmp/root/17453/obmc-robot/logs/test_history.txt&lt;/a&gt;' exists.</msg>
<status starttime="20161215 19:52:25.077" status="PASS" endtime="20161215 19:52:25.078"></status>
</kw>
<msg level="INFO" timestamp="20161215 19:52:25.078">${exist} = True</msg>
<status starttime="20161215 19:52:25.077" status="PASS" endtime="20161215 19:52:25.078"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${exist}' == '${False}'</arg>
<arg>Create File</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<status starttime="20161215 19:52:25.078" status="PASS" endtime="20161215 19:52:25.081"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Get Current Time Stamp">
<doc>Get the current time stamp data</doc>
<assign>
<var>${cur_time}</var>
</assign>
<kw library="DateTime" name="Get Current Date">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20161215 19:52:25.082">${cur_time} = 2016-12-15 19:52:25:081916</msg>
<status starttime="20161215 19:52:25.082" status="PASS" endtime="20161215 19:52:25.082"></status>
</kw>
<kw library="openbmc_ffdc_list" name="Get Strip String">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20161215 19:52:25.083">${cur_time} = 20161215195225081916</msg>
<status starttime="20161215 19:52:25.082" status="PASS" endtime="20161215 19:52:25.083"></status>
</kw>
<msg level="INFO" timestamp="20161215 19:52:25.083">${cur_time} = 20161215195225081916</msg>
<status starttime="20161215 19:52:25.081" status="PASS" endtime="20161215 19:52:25.083"></status>
</kw>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
<arg>${cur_time}:${SUITE_NAME}:${TEST_NAME}:${TEST_STATUS}${\n}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20161215 19:52:25.084">Appended to file '&lt;a href="file:///tmp/root/17453/obmc-robot/logs/test_history.txt"&gt;/tmp/root/17453/obmc-robot/logs/test_history.txt&lt;/a&gt;'.</msg>
<status starttime="20161215 19:52:25.083" status="PASS" endtime="20161215 19:52:25.084"></status>
</kw>
<status starttime="20161215 19:52:25.076" status="PASS" endtime="20161215 19:52:25.084"></status>
</kw>
<status starttime="20161215 19:52:03.010" status="FAIL" endtime="20161215 19:52:25.084"></status>
</kw>
<kw library="utils" name="Stop SOL Console Logging">
<doc>Stop obmc_console_client process, if any, and</doc>
<assign>
<var>${sol_log}</var>
</assign>
<kw library="connection_client" name="Open Connection And Log In">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw library="Collections" name="Dictionary Should Contain Key">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg level="FAIL" timestamp="20161215 19:52:25.086">Dictionary does not contain key 'host'.</msg>
<status starttime="20161215 19:52:25.086" status="FAIL" endtime="20161215 19:52:25.086"></status>
</kw>
<msg level="INFO" timestamp="20161215 19:52:25.086">${has_host} = False</msg>
<status starttime="20161215 19:52:25.085" status="PASS" endtime="20161215 19:52:25.086"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status starttime="20161215 19:52:25.089" status="PASS" endtime="20161215 19:52:25.090"></status>
</kw>
<status starttime="20161215 19:52:25.086" status="PASS" endtime="20161215 19:52:25.090"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<kw library="connection_client" name="User input SSH and HTTPs Ports">
<doc>Update the global SSH and HTTPs port variable for QEMU</doc>
<kw library="BuiltIn" name="Convert To Integer">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${SSH_PORT}</arg>
</arguments>
<assign>
<var>${port_num}</var>
</assign>
<msg level="INFO" timestamp="20161215 19:52:25.096">${port_num} = 22</msg>
<status starttime="20161215 19:52:25.095" status="PASS" endtime="20161215 19:52:25.096"></status>
</kw>
<kw library="BuiltIn" name="Replace Variables">
<doc>Replaces variables in the given text with their current values.</doc>
<arguments>
<arg>${port_num}</arg>
</arguments>
<assign>
<var>${SSH_PORT}</var>
</assign>
<msg level="INFO" timestamp="20161215 19:52:25.097">${SSH_PORT} = 22</msg>
<status starttime="20161215 19:52:25.096" status="PASS" endtime="20161215 19:52:25.097"></status>
</kw>
<kw library="BuiltIn" name="Convert To Integer">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${HTTPS_PORT}</arg>
</arguments>
<assign>
<var>${https_num}</var>
</assign>
<msg level="INFO" timestamp="20161215 19:52:25.097">${https_num} = 443</msg>
<status starttime="20161215 19:52:25.097" status="PASS" endtime="20161215 19:52:25.097"></status>
</kw>
<kw library="BuiltIn" name="Set Global Variable">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${AUTH_URI}</arg>
<arg>https://${OPENBMC_HOST}:${https_num}</arg>
</arguments>
<msg level="INFO" timestamp="20161215 19:52:25.098">${AUTH_URI} = https://9.3.23.30:443</msg>
<status starttime="20161215 19:52:25.098" status="PASS" endtime="20161215 19:52:25.098"></status>
</kw>
<status starttime="20161215 19:52:25.095" status="PASS" endtime="20161215 19:52:25.099"></status>
</kw>
<status starttime="20161215 19:52:25.090" status="PASS" endtime="20161215 19:52:25.099"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw library="Collections" name="Dictionary Should Contain Key">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg level="FAIL" timestamp="20161215 19:52:25.100">Dictionary does not contain key 'port'.</msg>
<status starttime="20161215 19:52:25.099" status="FAIL" endtime="20161215 19:52:25.100"></status>
</kw>
<msg level="INFO" timestamp="20161215 19:52:25.100">${has_port} = False</msg>
<status starttime="20161215 19:52:25.099" status="PASS" endtime="20161215 19:52:25.100"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keywords">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
</arguments>
<status starttime="20161215 19:52:25.106" status="PASS" endtime="20161215 19:52:25.106"></status>
</kw>
<kw library="SSHLibrary" name="Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status starttime="20161215 19:52:25.106" status="PASS" endtime="20161215 19:52:25.107"></status>
</kw>
<status starttime="20161215 19:52:25.105" status="PASS" endtime="20161215 19:52:25.107"></status>
</kw>
<status starttime="20161215 19:52:25.101" status="PASS" endtime="20161215 19:52:25.107"></status>
</kw>
<kw library="SSHLibrary" name="Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg level="INFO" timestamp="20161215 19:52:25.108">Logging into '9.3.23.30:22' as 'root'.</msg>
<msg level="INFO" timestamp="20161215 19:52:27.461">Read output: 7[r[999;999H[6n</msg>
<status starttime="20161215 19:52:25.107" status="PASS" endtime="20161215 19:52:27.461"></status>
</kw>
<status starttime="20161215 19:52:25.085" status="PASS" endtime="20161215 19:52:27.461"></status>
</kw>
<kw library="utils" name="Stop OBMC Console Client">
<doc>Stop any running obmc_console_client</doc>
<arguments>
<arg>${file_path}</arg>
</arguments>
<kw library="SSHLibrary" name="Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>ps ax | grep obmc-console-client | grep ${file_path} | grep -v grep | awk '{print $1}'</arg>
</arguments>
<assign>
<var>${pid}</var>
</assign>
<msg level="INFO" timestamp="20161215 19:52:27.463">Executing command 'ps ax | grep obmc-console-client | grep /tmp/obmc-console.log | grep -v grep | awk '{print $1}''.</msg>
<msg level="INFO" timestamp="20161215 19:52:27.889">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20161215 19:52:27.889">${pid} = 923</msg>
<status starttime="20161215 19:52:27.463" status="PASS" endtime="20161215 19:52:27.889"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${pid}' != '${EMPTY}'</arg>
<arg>Execute Command</arg>
<arg>kill -s KILL ${pid}</arg>
<arg>ELSE</arg>
<arg>Log</arg>
<arg>"No obmc-console-client process running"</arg>
</arguments>
<kw library="SSHLibrary" name="Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -s KILL ${pid}</arg>
</arguments>
<msg level="INFO" timestamp="20161215 19:52:27.896">Executing command 'kill -s KILL 923'.</msg>
<msg level="INFO" timestamp="20161215 19:52:27.978">Command exited with return code 0.</msg>
<status starttime="20161215 19:52:27.896" status="PASS" endtime="20161215 19:52:27.978"></status>
</kw>
<status starttime="20161215 19:52:27.890" status="PASS" endtime="20161215 19:52:27.979"></status>
</kw>
<status starttime="20161215 19:52:27.462" status="PASS" endtime="20161215 19:52:27.979"></status>
</kw>
<kw library="SSHLibrary" name="Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>cat ${file_path}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${console}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20161215 19:52:27.979">Executing command 'cat /tmp/obmc-console.log'.</msg>
<msg level="INFO" timestamp="20161215 19:52:28.108">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20161215 19:52:28.108">${console} = </msg>
<msg level="INFO" timestamp="20161215 19:52:28.108">${stderr} = </msg>
<status starttime="20161215 19:52:27.979" status="PASS" endtime="20161215 19:52:28.108"></status>
</kw>
<kw library="BuiltIn" name="Should Be Empty">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg level="INFO" timestamp="20161215 19:52:28.109">Length is 0</msg>
<status starttime="20161215 19:52:28.109" status="PASS" endtime="20161215 19:52:28.109"></status>
</kw>
<msg level="INFO" timestamp="20161215 19:52:28.109">${sol_log} = </msg>
<status starttime="20161215 19:52:25.084" status="PASS" endtime="20161215 19:52:28.109"></status>
</kw>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${sol_log}</arg>
</arguments>
<msg level="INFO" timestamp="20161215 19:52:28.110"></msg>
<status starttime="20161215 19:52:28.109" status="PASS" endtime="20161215 19:52:28.110"></status>
</kw>
<status starttime="20161215 19:52:03.009" status="FAIL" endtime="20161215 19:52:28.110">Several failures occurred:

1) ConnectionError: HTTPSConnectionPool(host='9.3.23.30', port=443): Max retries exceeded with url: /login (Caused by NewConnectionError('&lt;requests.packages.urllib3.connection.VerifiedHTTPSConnection object at 0x3fff7c5a3610&gt;: Failed to establish a new connection: [Errno 111] Connection refused',))

2) Resolving variable '${resp.status_code}' failed: AttributeError: 'NoneType' object has no attribute 'status_code'

3) ConnectionError: HTTPSConnectionPool(host='9.3.23.30', port=443): Max retries exceeded with url: /org/openbmc/control/led/enumerate (Caused by NewConnectionError('&lt;requests.packages.urllib3.connection.VerifiedHTTPSConnection object at 0x3fff7c5a37d0&gt;: Failed to establish a new connection: [Errno 111] Connection refused',))

4) ConnectionError: HTTPSConnectionPool(host='9.3.23.30', port=443): Max retries exceeded with url: /login (Caused by NewConnectionError('&lt;requests.packages.urllib3.connection.VerifiedHTTPSConnection object at 0x3fff7c5cd2d0&gt;: Failed to establish a new connection: [Errno 111] Connection refused',))
    [ Message content over the limit has been removed. ]

9) ConnectionError: HTTPSConnectionPool(host='9.3.23.30', port=443): Max retries exceeded with url: /org/openbmc/inventory/system/enumerate (Caused by NewConnectionError('&lt;requests.packages.urllib3.connection.VerifiedHTTPSConnection object at 0x3fff7c569850&gt;: Failed to establish a new connection: [Errno 111] Connection refused',))

10) ConnectionError: HTTPSConnectionPool(host='9.3.23.30', port=443): Max retries exceeded with url: /login (Caused by NewConnectionError('&lt;requests.packages.urllib3.connection.VerifiedHTTPSConnection object at 0x3fff7c5c5610&gt;: Failed to establish a new connection: [Errno 111] Connection refused',))

11) Resolving variable '${resp.status_code}' failed: AttributeError: 'NoneType' object has no attribute 'status_code'

12) ConnectionError: HTTPSConnectionPool(host='9.3.23.30', port=443): Max retries exceeded with url: /org/openbmc/sensors/enumerate (Caused by NewConnectionError('&lt;requests.packages.urllib3.connection.VerifiedHTTPSConnection object at 0x3fff7c5c5210&gt;: Failed to establish a new connection: [Errno 111] Connection refused',))</status>
</kw>
<doc>Power OFF and power ON</doc>
<tags>
<tag>chassisboot</tag>
<tag>power_on_test</tag>
</tags>
<status critical="yes" starttime="20161215 19:51:28.177" status="FAIL" endtime="20161215 19:52:28.110">ConnectionError: HTTPSConnectionPool(host='9.3.23.30', port=443): Max retries exceeded with url: /org/openbmc/control/chassis0//action/powerOn (Caused by NewConnectionError('&lt;requests.packages.urllib3.connection.VerifiedHTTPSConnection object at 0x3fff7f6f8310&gt;: Failed to establish a new connection: [Errno 111] Connection refused',))

Also teardown failed:
Several failures occurred:

1) ConnectionError: HTTPSConnectionPool(host='9.3.23.30', port=443): Max retries exceeded with url: /login (Caused by NewConnectionError('&lt;requests.packages.urllib3.connection.VerifiedHTTPSConnection object at 0x3fff7c5a3610&gt;: Failed to establish a new connection: [Errno 111] Connection refused',))

2) Resolving variable '${resp.status_code}' failed: AttributeError: 'NoneType' object has no attribute 'status_code'

3) ConnectionError: HTTPSConnectionPool(host='9.3.23.30', port=443): Max retries exceeded with url: /org/openbmc/control/led/enumerate (Caused by NewConnectionError('&lt;requests.packages.urllib3.connection.VerifiedHTTPSConnection object at 0x3fff7c5a37d0&gt;: Failed to establish a new connection: [Errno 111] Connection refused',))

4) ConnectionError: HTTPSConnectionPool(host='9.3.23.30', port=443): Max retries exceeded with url: /login (Caused by NewConnectionError('&lt;requests.packages.urllib3.connection.VerifiedHTTPSConnection object at 0x3fff7c5cd2d0&gt;: Failed to establish a new connection: [Errno 111] Connection refused',))
    [ Message content over the limit has been removed. ]

9) ConnectionError: HTTPSConnectionPool(host='9.3.23.30', port=443): Max retries exceeded with url: /org/openbmc/inventory/system/enumerate (Caused by NewConnectionError('&lt;requests.packages.urllib3.connection.VerifiedHTTPSConnection object at 0x3fff7c569850&gt;: Failed to establish a new connection: [Errno 111] Connection refused',))

10) ConnectionError: HTTPSConnectionPool(host='9.3.23.30', port=443): Max retries exceeded with url: /login (Caused by NewConnectionError('&lt;requests.packages.urllib3.connection.VerifiedHTTPSConnection object at 0x3fff7c5c5610&gt;: Failed to establish a new connection: [Errno 111] Connection refused',))

11) Resolving variable '${resp.status_code}' failed: AttributeError: 'NoneType' object has no attribute 'status_code'

12) ConnectionError: HTTPSConnectionPool(host='9.3.23.30', port=443): Max retries exceeded with url: /org/openbmc/sensors/enumerate (Caused by NewConnectionError('&lt;requests.packages.urllib3.connection.VerifiedHTTPSConnection object at 0x3fff7c5c5210&gt;: Failed to establish a new connection: [Errno 111] Connection refused',))</status>
</test>
<doc>This module will test basic power on use cases for CI</doc>
<status starttime="20161215 19:51:28.152" status="FAIL" endtime="20161215 19:52:28.111"></status>
</suite>
<suite source="/tmp/root/17453/obmc-robot/tests/test_eventlog.robot" name="Test Eventlog" id="s1-s4">
<kw library="connection_client" type="setup" name="Open Connection And Log In">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw library="Collections" name="Dictionary Should Contain Key">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg level="FAIL" timestamp="20161215 19:52:28.149">Dictionary does not contain key 'host'.</msg>
<status starttime="20161215 19:52:28.149" status="FAIL" endtime="20161215 19:52:28.149"></status>
</kw>
<msg level="INFO" timestamp="20161215 19:52:28.149">${has_host} = False</msg>
<status starttime="20161215 19:52:28.148" status="PASS" endtime="20161215 19:52:28.149"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status starttime="20161215 19:52:28.153" status="PASS" endtime="20161215 19:52:28.153"></status>
</kw>
<status starttime="20161215 19:52:28.149" status="PASS" endtime="20161215 19:52:28.153"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<kw library="connection_client" name="User input SSH and HTTPs Ports">
<doc>Update the global SSH and HTTPs port variable for QEMU</doc>
<kw library="BuiltIn" name="Convert To Integer">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${SSH_PORT}</arg>
</arguments>
<assign>
<var>${port_num}</var>
</assign>
<msg level="INFO" timestamp="20161215 19:52:28.158">${port_num} = 22</msg>
<status starttime="20161215 19:52:28.157" status="PASS" endtime="20161215 19:52:28.158"></status>
</kw>
<kw library="BuiltIn" name="Replace Variables">
<doc>Replaces variables in the given text with their current values.</doc>
<arguments>
<arg>${port_num}</arg>
</arguments>
<assign>
<var>${SSH_PORT}</var>
</assign>
<msg level="INFO" timestamp="20161215 19:52:28.159">${SSH_PORT} = 22</msg>
<status starttime="20161215 19:52:28.158" status="PASS" endtime="20161215 19:52:28.159"></status>
</kw>
<kw library="BuiltIn" name="Convert To Integer">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${HTTPS_PORT}</arg>
</arguments>
<assign>
<var>${https_num}</var>
</assign>
<msg level="INFO" timestamp="20161215 19:52:28.159">${https_num} = 443</msg>
<status starttime="20161215 19:52:28.159" status="PASS" endtime="20161215 19:52:28.159"></status>
</kw>
<kw library="BuiltIn" name="Set Global Variable">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${AUTH_URI}</arg>
<arg>https://${OPENBMC_HOST}:${https_num}</arg>
</arguments>
<msg level="INFO" timestamp="20161215 19:52:28.160">${AUTH_URI} = https://9.3.23.30:443</msg>
<status starttime="20161215 19:52:28.159" status="PASS" endtime="20161215 19:52:28.160"></status>
</kw>
<status starttime="20161215 19:52:28.156" status="PASS" endtime="20161215 19:52:28.160"></status>
</kw>
<status starttime="20161215 19:52:28.153" status="PASS" endtime="20161215 19:52:28.160"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw library="Collections" name="Dictionary Should Contain Key">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg level="FAIL" timestamp="20161215 19:52:28.161">Dictionary does not contain key 'port'.</msg>
<status starttime="20161215 19:52:28.161" status="FAIL" endtime="20161215 19:52:28.161"></status>
</kw>
<msg level="INFO" timestamp="20161215 19:52:28.161">${has_port} = False</msg>
<status starttime="20161215 19:52:28.160" status="PASS" endtime="20161215 19:52:28.161"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keywords">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
</arguments>
<status starttime="20161215 19:52:28.165" status="PASS" endtime="20161215 19:52:28.165"></status>
</kw>
<kw library="SSHLibrary" name="Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status starttime="20161215 19:52:28.166" status="PASS" endtime="20161215 19:52:28.166"></status>
</kw>
<status starttime="20161215 19:52:28.165" status="PASS" endtime="20161215 19:52:28.166"></status>
</kw>
<status starttime="20161215 19:52:28.162" status="PASS" endtime="20161215 19:52:28.166"></status>
</kw>
<kw library="SSHLibrary" name="Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg level="INFO" timestamp="20161215 19:52:28.166">Logging into '9.3.23.30:22' as 'root'.</msg>
<msg level="INFO" timestamp="20161215 19:52:30.354">Read output: 7[r[999;999H[6n</msg>
<status starttime="20161215 19:52:28.166" status="PASS" endtime="20161215 19:52:30.354"></status>
</kw>
<status starttime="20161215 19:52:28.147" status="PASS" endtime="20161215 19:52:30.355"></status>
</kw>
<test name="clear any logs" id="s1-s4-t1">
<kw library="rest_client" name="OpenBMC Post Request">
<arguments>
<arg>${EVENT_RECORD}action/clear</arg>
<arg>data=${NIL}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161215 19:52:30.358">${base_uri} = /org/openbmc/records/events/action/clear</msg>
<status starttime="20161215 19:52:30.357" status="PASS" endtime="20161215 19:52:30.358"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161215 19:52:30.359">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161215 19:52:30.358" status="PASS" endtime="20161215 19:52:30.359"></status>
</kw>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status starttime="20161215 19:52:30.359" status="PASS" endtime="20161215 19:52:30.360"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161215 19:52:30.370">${msg} = URI:https://9.3.23.30:443/org/openbmc/records/events/action/clear, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161215 19:52:30.369" status="PASS" endtime="20161215 19:52:30.370"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161215 19:52:30.371">URI:https://9.3.23.30:443/org/openbmc/records/events/action/clear, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161215 19:52:30.371" status="PASS" endtime="20161215 19:52:30.397"></status>
</kw>
<status starttime="20161215 19:52:30.370" status="PASS" endtime="20161215 19:52:30.397"></status>
</kw>
<status starttime="20161215 19:52:30.368" status="PASS" endtime="20161215 19:52:30.398"></status>
</kw>
<status starttime="20161215 19:52:30.361" status="PASS" endtime="20161215 19:52:30.398"></status>
</kw>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161215 19:52:30.400">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20161215 19:52:30.399" status="PASS" endtime="20161215 19:52:30.401"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161215 19:52:30.402">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161215 19:52:30.402" status="PASS" endtime="20161215 19:52:30.402"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161215 19:52:30.404">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20161215 19:52:30.403" status="PASS" endtime="20161215 19:52:30.404"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161215 19:52:30.405">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20161215 19:52:30.404" status="PASS" endtime="20161215 19:52:30.405"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161215 19:52:30.753">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161215 19:52:30.753">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161215 19:52:30.406" status="PASS" endtime="20161215 19:52:30.753"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161215 19:52:30.754">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161215 19:52:30.754" status="PASS" endtime="20161215 19:52:30.754"></status>
</kw>
<status starttime="20161215 19:52:30.398" status="PASS" endtime="20161215 19:52:30.755"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161215 19:52:31.027">Post Request using : alias=openbmc, uri=/org/openbmc/records/events/action/clear, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161215 19:52:31.027">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20161215 19:52:30.755" status="PASS" endtime="20161215 19:52:31.027"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161215 19:52:31.034">${msg} = Response code:200, Content:{
  "data": 0, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161215 19:52:31.034" status="PASS" endtime="20161215 19:52:31.034"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161215 19:52:31.035">Response code:200, Content:{
  "data": 0, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161215 19:52:31.035" status="PASS" endtime="20161215 19:52:31.035"></status>
</kw>
<status starttime="20161215 19:52:31.035" status="PASS" endtime="20161215 19:52:31.035"></status>
</kw>
<status starttime="20161215 19:52:31.033" status="PASS" endtime="20161215 19:52:31.036"></status>
</kw>
<status starttime="20161215 19:52:31.028" status="PASS" endtime="20161215 19:52:31.036"></status>
</kw>
<msg level="INFO" timestamp="20161215 19:52:31.036">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161215 19:52:30.356" status="PASS" endtime="20161215 19:52:31.036"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161215 19:52:31.036">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161215 19:52:31.036" status="PASS" endtime="20161215 19:52:31.036"></status>
</kw>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${EVENT_RECORD}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161215 19:52:31.037">${base_uri} = /org/openbmc/records/events/</msg>
<status starttime="20161215 19:52:31.037" status="PASS" endtime="20161215 19:52:31.037"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161215 19:52:31.045">${msg} = URI:https://9.3.23.30:443/org/openbmc/records/events/, method:Get, args:{}</msg>
<status starttime="20161215 19:52:31.044" status="PASS" endtime="20161215 19:52:31.045"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161215 19:52:31.046">URI:https://9.3.23.30:443/org/openbmc/records/events/, method:Get, args:{}</msg>
<status starttime="20161215 19:52:31.046" status="PASS" endtime="20161215 19:52:31.046"></status>
</kw>
<status starttime="20161215 19:52:31.045" status="PASS" endtime="20161215 19:52:31.047"></status>
</kw>
<status starttime="20161215 19:52:31.043" status="PASS" endtime="20161215 19:52:31.047"></status>
</kw>
<status starttime="20161215 19:52:31.038" status="PASS" endtime="20161215 19:52:31.047"></status>
</kw>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161215 19:52:31.048">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20161215 19:52:31.048" status="PASS" endtime="20161215 19:52:31.049"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161215 19:52:31.049">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161215 19:52:31.049" status="PASS" endtime="20161215 19:52:31.049"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161215 19:52:31.050">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20161215 19:52:31.049" status="PASS" endtime="20161215 19:52:31.050"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161215 19:52:31.050">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20161215 19:52:31.050" status="PASS" endtime="20161215 19:52:31.050"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161215 19:52:31.602">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161215 19:52:31.602">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161215 19:52:31.051" status="PASS" endtime="20161215 19:52:31.602"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161215 19:52:31.603">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161215 19:52:31.603" status="PASS" endtime="20161215 19:52:31.603"></status>
</kw>
<status starttime="20161215 19:52:31.047" status="PASS" endtime="20161215 19:52:31.603"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161215 19:52:31.667">Get Request using : alias=openbmc, uri=/org/openbmc/records/events/, headers=None </msg>
<msg level="INFO" timestamp="20161215 19:52:31.667">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20161215 19:52:31.604" status="PASS" endtime="20161215 19:52:31.668"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161215 19:52:31.676">${msg} = Response code:200, Content:{
  "data": [], 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161215 19:52:31.675" status="PASS" endtime="20161215 19:52:31.676"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161215 19:52:31.678">Response code:200, Content:{
  "data": [], 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161215 19:52:31.677" status="PASS" endtime="20161215 19:52:31.678"></status>
</kw>
<status starttime="20161215 19:52:31.676" status="PASS" endtime="20161215 19:52:31.678"></status>
</kw>
<status starttime="20161215 19:52:31.674" status="PASS" endtime="20161215 19:52:31.678"></status>
</kw>
<status starttime="20161215 19:52:31.668" status="PASS" endtime="20161215 19:52:31.678"></status>
</kw>
<msg level="INFO" timestamp="20161215 19:52:31.679">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161215 19:52:31.037" status="PASS" endtime="20161215 19:52:31.679"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${json}</var>
</assign>
<msg level="INFO" timestamp="20161215 19:52:31.679">To JSON using : content={
  "data": [], 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161215 19:52:31.679">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161215 19:52:31.679">${json} = {u'data': [], u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20161215 19:52:31.679" status="PASS" endtime="20161215 19:52:31.679"></status>
</kw>
<kw library="BuiltIn" name="Should Be Empty">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${json['data']}</arg>
</arguments>
<msg level="INFO" timestamp="20161215 19:52:31.680">Length is 0</msg>
<status starttime="20161215 19:52:31.680" status="PASS" endtime="20161215 19:52:31.680"></status>
</kw>
<kw library="openbmc_ffdc" type="teardown" name="FFDC On Test Case Fail">
<doc>Generic FFDC entry point. Place holder to hook in</doc>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${TEST_STATUS}' == 'FAIL'</arg>
<arg>FFDC</arg>
</arguments>
<status starttime="20161215 19:52:31.681" status="PASS" endtime="20161215 19:52:31.683"></status>
</kw>
<kw library="openbmc_ffdc_methods" name="Log Test Case Status">
<doc>Test case execution result history.</doc>
<kw library="OperatingSystem" name="Create Directory">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>${FFDC_LOG_PATH}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20161215 19:52:31.684">Directory '&lt;a href="file:///tmp/root/17453/obmc-robot/logs"&gt;/tmp/root/17453/obmc-robot/logs&lt;/a&gt;' already exists.</msg>
<status starttime="20161215 19:52:31.684" status="PASS" endtime="20161215 19:52:31.684"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>OperatingSystem.File Should Exist</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<assign>
<var>${exist}</var>
</assign>
<kw library="OperatingSystem" name="File Should Exist">
<doc>Fails unless the given ``path`` points to an existing file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20161215 19:52:31.685">File '&lt;a href="file:///tmp/root/17453/obmc-robot/logs/test_history.txt"&gt;/tmp/root/17453/obmc-robot/logs/test_history.txt&lt;/a&gt;' exists.</msg>
<status starttime="20161215 19:52:31.685" status="PASS" endtime="20161215 19:52:31.685"></status>
</kw>
<msg level="INFO" timestamp="20161215 19:52:31.685">${exist} = True</msg>
<status starttime="20161215 19:52:31.685" status="PASS" endtime="20161215 19:52:31.685"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${exist}' == '${False}'</arg>
<arg>Create File</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<status starttime="20161215 19:52:31.686" status="PASS" endtime="20161215 19:52:31.689"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Get Current Time Stamp">
<doc>Get the current time stamp data</doc>
<assign>
<var>${cur_time}</var>
</assign>
<kw library="DateTime" name="Get Current Date">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20161215 19:52:31.690">${cur_time} = 2016-12-15 19:52:31:689406</msg>
<status starttime="20161215 19:52:31.689" status="PASS" endtime="20161215 19:52:31.690"></status>
</kw>
<kw library="openbmc_ffdc_list" name="Get Strip String">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20161215 19:52:31.690">${cur_time} = 20161215195231689406</msg>
<status starttime="20161215 19:52:31.690" status="PASS" endtime="20161215 19:52:31.690"></status>
</kw>
<msg level="INFO" timestamp="20161215 19:52:31.690">${cur_time} = 20161215195231689406</msg>
<status starttime="20161215 19:52:31.689" status="PASS" endtime="20161215 19:52:31.690"></status>
</kw>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
<arg>${cur_time}:${SUITE_NAME}:${TEST_NAME}:${TEST_STATUS}${\n}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20161215 19:52:31.691">Appended to file '&lt;a href="file:///tmp/root/17453/obmc-robot/logs/test_history.txt"&gt;/tmp/root/17453/obmc-robot/logs/test_history.txt&lt;/a&gt;'.</msg>
<status starttime="20161215 19:52:31.691" status="PASS" endtime="20161215 19:52:31.691"></status>
</kw>
<status starttime="20161215 19:52:31.684" status="PASS" endtime="20161215 19:52:31.691"></status>
</kw>
<status starttime="20161215 19:52:31.680" status="PASS" endtime="20161215 19:52:31.691"></status>
</kw>
<doc>Test delete all events</doc>
<tags>
<tag>CI</tag>
<tag>clear_any_logs</tag>
</tags>
<status critical="yes" starttime="20161215 19:52:30.355" status="PASS" endtime="20161215 19:52:31.691"></status>
</test>
<test name="write a log" id="s1-s4-t2">
<kw name="create a test log">
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{EMPTY}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161215 19:52:31.693">${data} = {u'data': []}</msg>
<status starttime="20161215 19:52:31.693" status="PASS" endtime="20161215 19:52:31.693"></status>
</kw>
<kw library="rest_client" name="OpenBMC Post Request">
<arguments>
<arg>${EVENT_RECORD}action/acceptTestMessage</arg>
<arg>data=${data}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161215 19:52:31.694">${base_uri} = /org/openbmc/records/events/action/acceptTestMessage</msg>
<status starttime="20161215 19:52:31.694" status="PASS" endtime="20161215 19:52:31.694"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161215 19:52:31.695">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161215 19:52:31.694" status="PASS" endtime="20161215 19:52:31.695"></status>
</kw>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status starttime="20161215 19:52:31.695" status="PASS" endtime="20161215 19:52:31.695"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161215 19:52:31.700">${msg} = URI:https://9.3.23.30:443/org/openbmc/records/events/action/acceptTestMessage, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161215 19:52:31.699" status="PASS" endtime="20161215 19:52:31.700"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161215 19:52:31.701">URI:https://9.3.23.30:443/org/openbmc/records/events/action/acceptTestMessage, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20161215 19:52:31.700" status="PASS" endtime="20161215 19:52:31.701"></status>
</kw>
<status starttime="20161215 19:52:31.700" status="PASS" endtime="20161215 19:52:31.701"></status>
</kw>
<status starttime="20161215 19:52:31.699" status="PASS" endtime="20161215 19:52:31.701"></status>
</kw>
<status starttime="20161215 19:52:31.695" status="PASS" endtime="20161215 19:52:31.701"></status>
</kw>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161215 19:52:31.702">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20161215 19:52:31.702" status="PASS" endtime="20161215 19:52:31.702"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161215 19:52:31.703">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161215 19:52:31.702" status="PASS" endtime="20161215 19:52:31.703"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161215 19:52:31.703">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20161215 19:52:31.703" status="PASS" endtime="20161215 19:52:31.703"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161215 19:52:31.704">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20161215 19:52:31.703" status="PASS" endtime="20161215 19:52:31.704"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161215 19:52:32.034">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161215 19:52:32.034">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161215 19:52:31.704" status="PASS" endtime="20161215 19:52:32.034"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161215 19:52:32.034">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161215 19:52:32.034" status="PASS" endtime="20161215 19:52:32.035"></status>
</kw>
<status starttime="20161215 19:52:31.701" status="PASS" endtime="20161215 19:52:32.035"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161215 19:52:32.346">Post Request using : alias=openbmc, uri=/org/openbmc/records/events/action/acceptTestMessage, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161215 19:52:32.347">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20161215 19:52:32.035" status="PASS" endtime="20161215 19:52:32.347"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161215 19:52:32.351">${msg} = Response code:200, Content:{
  "data": 41, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161215 19:52:32.351" status="PASS" endtime="20161215 19:52:32.351"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161215 19:52:32.352">Response code:200, Content:{
  "data": 41, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161215 19:52:32.352" status="PASS" endtime="20161215 19:52:32.352"></status>
</kw>
<status starttime="20161215 19:52:32.351" status="PASS" endtime="20161215 19:52:32.352"></status>
</kw>
<status starttime="20161215 19:52:32.350" status="PASS" endtime="20161215 19:52:32.353"></status>
</kw>
<status starttime="20161215 19:52:32.347" status="PASS" endtime="20161215 19:52:32.353"></status>
</kw>
<msg level="INFO" timestamp="20161215 19:52:32.353">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161215 19:52:31.693" status="PASS" endtime="20161215 19:52:32.353"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161215 19:52:32.353">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161215 19:52:32.353" status="PASS" endtime="20161215 19:52:32.353"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${json}</var>
</assign>
<msg level="INFO" timestamp="20161215 19:52:32.354">To JSON using : content={
  "data": 41, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161215 19:52:32.354">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161215 19:52:32.354">${json} = {u'data': 41, u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20161215 19:52:32.354" status="PASS" endtime="20161215 19:52:32.354"></status>
</kw>
<kw library="BuiltIn" name="Convert To Integer">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${json['data']}</arg>
</arguments>
<assign>
<var>${LOGID}</var>
</assign>
<msg level="INFO" timestamp="20161215 19:52:32.355">${LOGID} = 41</msg>
<status starttime="20161215 19:52:32.354" status="PASS" endtime="20161215 19:52:32.355"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${EVENT_RECORD}</arg>
<arg>${LOGID}</arg>
</arguments>
<assign>
<var>${uri}</var>
</assign>
<msg level="INFO" timestamp="20161215 19:52:32.355">${uri} = /org/openbmc/records/events/41</msg>
<status starttime="20161215 19:52:32.355" status="PASS" endtime="20161215 19:52:32.355"></status>
</kw>
<status starttime="20161215 19:52:31.692" status="PASS" endtime="20161215 19:52:32.355"></status>
</kw>
<kw library="openbmc_ffdc" type="teardown" name="FFDC On Test Case Fail">
<doc>Generic FFDC entry point. Place holder to hook in</doc>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${TEST_STATUS}' == 'FAIL'</arg>
<arg>FFDC</arg>
</arguments>
<status starttime="20161215 19:52:32.356" status="PASS" endtime="20161215 19:52:32.359"></status>
</kw>
<kw library="openbmc_ffdc_methods" name="Log Test Case Status">
<doc>Test case execution result history.</doc>
<kw library="OperatingSystem" name="Create Directory">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>${FFDC_LOG_PATH}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20161215 19:52:32.360">Directory '&lt;a href="file:///tmp/root/17453/obmc-robot/logs"&gt;/tmp/root/17453/obmc-robot/logs&lt;/a&gt;' already exists.</msg>
<status starttime="20161215 19:52:32.359" status="PASS" endtime="20161215 19:52:32.360"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>OperatingSystem.File Should Exist</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<assign>
<var>${exist}</var>
</assign>
<kw library="OperatingSystem" name="File Should Exist">
<doc>Fails unless the given ``path`` points to an existing file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20161215 19:52:32.361">File '&lt;a href="file:///tmp/root/17453/obmc-robot/logs/test_history.txt"&gt;/tmp/root/17453/obmc-robot/logs/test_history.txt&lt;/a&gt;' exists.</msg>
<status starttime="20161215 19:52:32.360" status="PASS" endtime="20161215 19:52:32.361"></status>
</kw>
<msg level="INFO" timestamp="20161215 19:52:32.361">${exist} = True</msg>
<status starttime="20161215 19:52:32.360" status="PASS" endtime="20161215 19:52:32.361"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${exist}' == '${False}'</arg>
<arg>Create File</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<status starttime="20161215 19:52:32.361" status="PASS" endtime="20161215 19:52:32.364"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Get Current Time Stamp">
<doc>Get the current time stamp data</doc>
<assign>
<var>${cur_time}</var>
</assign>
<kw library="DateTime" name="Get Current Date">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20161215 19:52:32.365">${cur_time} = 2016-12-15 19:52:32:364760</msg>
<status starttime="20161215 19:52:32.365" status="PASS" endtime="20161215 19:52:32.365"></status>
</kw>
<kw library="openbmc_ffdc_list" name="Get Strip String">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20161215 19:52:32.365">${cur_time} = 20161215195232364760</msg>
<status starttime="20161215 19:52:32.365" status="PASS" endtime="20161215 19:52:32.365"></status>
</kw>
<msg level="INFO" timestamp="20161215 19:52:32.366">${cur_time} = 20161215195232364760</msg>
<status starttime="20161215 19:52:32.364" status="PASS" endtime="20161215 19:52:32.366"></status>
</kw>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
<arg>${cur_time}:${SUITE_NAME}:${TEST_NAME}:${TEST_STATUS}${\n}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20161215 19:52:32.366">Appended to file '&lt;a href="file:///tmp/root/17453/obmc-robot/logs/test_history.txt"&gt;/tmp/root/17453/obmc-robot/logs/test_history.txt&lt;/a&gt;'.</msg>
<status starttime="20161215 19:52:32.366" status="PASS" endtime="20161215 19:52:32.367"></status>
</kw>
<status starttime="20161215 19:52:32.359" status="PASS" endtime="20161215 19:52:32.367"></status>
</kw>
<status starttime="20161215 19:52:32.356" status="PASS" endtime="20161215 19:52:32.367"></status>
</kw>
<doc>Test create event</doc>
<tags>
<tag>CI</tag>
<tag>write_a_log</tag>
</tags>
<status critical="yes" starttime="20161215 19:52:31.692" status="PASS" endtime="20161215 19:52:32.367"></status>
</test>
<kw library="SSHLibrary" type="teardown" name="Close All Connections">
<doc>Closes all open connections.</doc>
<status starttime="20161215 19:52:32.368" status="PASS" endtime="20161215 19:52:32.695"></status>
</kw>
<doc>This suite is used for testing the error logging
capability from the host</doc>
<status starttime="20161215 19:52:28.114" status="PASS" endtime="20161215 19:52:32.695"></status>
</suite>
<suite source="/tmp/root/17453/obmc-robot/tests/test_obmcrest.robot" name="Test Obmcrest" id="s1-s5">
<test name="Get a Property" id="s1-s5-t1">
<kw library="utils" name="Get Endpoint Paths">
<doc>Returns all url paths ending with given endpoint</doc>
<arguments>
<arg>${INVENTORY_URI.rstrip("/")}</arg>
<arg>cpu</arg>
</arguments>
<assign>
<var>${url_list}</var>
</assign>
<kw library="rest_client" name="Read Properties">
<arguments>
<arg>${path}/enumerate</arg>
<arg>timeout=30</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161215 19:52:32.725">${base_uri} = /org/openbmc/inventory/enumerate</msg>
<status starttime="20161215 19:52:32.725" status="PASS" endtime="20161215 19:52:32.725"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161215 19:52:32.731">${msg} = URI:https://9.3.23.30:443/org/openbmc/inventory/enumerate, method:Get, args:{}</msg>
<status starttime="20161215 19:52:32.730" status="PASS" endtime="20161215 19:52:32.731"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161215 19:52:32.731">URI:https://9.3.23.30:443/org/openbmc/inventory/enumerate, method:Get, args:{}</msg>
<status starttime="20161215 19:52:32.731" status="PASS" endtime="20161215 19:52:32.731"></status>
</kw>
<status starttime="20161215 19:52:32.731" status="PASS" endtime="20161215 19:52:32.732"></status>
</kw>
<status starttime="20161215 19:52:32.729" status="PASS" endtime="20161215 19:52:32.732"></status>
</kw>
<status starttime="20161215 19:52:32.726" status="PASS" endtime="20161215 19:52:32.732"></status>
</kw>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161215 19:52:32.733">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=30, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20161215 19:52:32.732" status="PASS" endtime="20161215 19:52:32.733"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161215 19:52:32.734">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161215 19:52:32.733" status="PASS" endtime="20161215 19:52:32.734"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161215 19:52:32.734">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20161215 19:52:32.734" status="PASS" endtime="20161215 19:52:32.734"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161215 19:52:32.735">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20161215 19:52:32.734" status="PASS" endtime="20161215 19:52:32.735"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161215 19:52:33.702">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161215 19:52:33.702">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161215 19:52:32.735" status="PASS" endtime="20161215 19:52:33.703"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161215 19:52:33.704">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161215 19:52:33.703" status="PASS" endtime="20161215 19:52:33.704"></status>
</kw>
<status starttime="20161215 19:52:32.732" status="PASS" endtime="20161215 19:52:33.704"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161215 19:52:37.512">Get Request using : alias=openbmc, uri=/org/openbmc/inventory/enumerate, headers=None </msg>
<msg level="INFO" timestamp="20161215 19:52:37.513">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20161215 19:52:33.704" status="PASS" endtime="20161215 19:52:37.513"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161215 19:52:37.521">${msg} = Response code:200, Content:{
  "data": {
    "/org/openbmc/inventory/system": {
      "fault": "False", 
      "fru_type": "SYSTEM", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
...</msg>
<status starttime="20161215 19:52:37.520" status="PASS" endtime="20161215 19:52:37.521"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161215 19:52:37.523">Response code:200, Content:{
  "data": {
    "/org/openbmc/inventory/system": {
      "fault": "False", 
      "fru_type": "SYSTEM", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/bios": {
      "Asset Tag": "", 
      "Custom Field 1": "\tbuildroot-fda20bd", 
      "Custom Field 2": "\tskiboot-5.2.0-opdirty", 
      "Custom Field 3": "\thostboot-c223637-1d3dbf3", 
      "Custom Field 4": "\tlinux-4.4.6-openpower1-opdirty-99d283b", 
      "Custom Field 5": "\tpetitboot-72928ed-opdirty-47f54ff", 
      "Custom Field 6": "\tbarreleye-xml-1250f06-opdirty", 
      "Custom Field 7": "\tocc-1093bf9-opdir", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "", 
      "Model Number": "", 
      "Name": "OpenPOWER Firmware", 
      "Serial Number": "", 
      "Version": "open-power-barreleye-v1.8", 
      "fault": "False", 
      "fru_type": "SYSTEM", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis": {
      "fault": "False", 
      "fru_type": "SYSTEM", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/fan0": {
      "fault": "False", 
      "fru_type": "FAN", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/fan1": {
      "fault": "False", 
      "fru_type": "FAN", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/fan2": {
      "fault": "False", 
      "fru_type": "FAN", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/fan3": {
      "fault": "False", 
      "fru_type": "FAN", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/fan4": {
      "fault": "False", 
      "fru_type": "FAN", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/fan5": {
      "fault": "False", 
      "fru_type": "FAN", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/hdd_backplane": {
      "Custom Field 1": "Rackspace US, Inc.", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "FRU Ver 0.01", 
      "Manufacturer": "FOXCONN", 
      "Name": "BARRELEYE BPx15", 
      "Part Number": "10034HV00-600-G", 
      "Serial Number": "1A4218000-600-G64J000AX02", 
      "fault": "False", 
      "fru_type": "DAUGHTER_CARD", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/io_board": {
      "Custom Field 1": "Rackspace US, Inc.", 
      "Custom Field 2": "1C666D854AD0", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "FRU Ver 0.01", 
      "Manufacturer": "INGRASYS", 
      "Name": "BARRELEYE IO Board", 
      "Part Number": "10010VU00-600-G", 
      "Serial Number": "10010VU00X1571001", 
      "fault": "False", 
      "fru_type": "DAUGHTER_CARD", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/io_board/pcie_mezz0": {
      "fault": "False", 
      "fru_type": "PCIE_CARD", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/io_board/pcie_mezz1": {
      "fault": "False", 
      "fru_type": "PCIE_CARD", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/io_board/pcie_slot0": {
      "fault": "False", 
      "fru_type": "PCIE_CARD", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/io_board/pcie_slot0_riser": {
      "fault": "False", 
      "fru_type": "PCIE_RISER", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/io_board/pcie_slot1": {
      "fault": "False", 
      "fru_type": "PCIE_CARD", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/io_board/pcie_slot1_riser": {
      "fault": "False", 
      "fru_type": "PCIE_RISER", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/io_board/pcie_slot2": {
      "fault": "False", 
      "fru_type": "PCIE_CARD", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/io_board/pcie_slot2_riser": {
      "fault": "False", 
      "fru_type": "PCIE_RISER", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard": {
      "Custom Field 1": "", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "Part Number": "1A21GBR00-600-G", 
      "Serial Number": "65D0008X02", 
      "Type": 23, 
      "fault": "True", 
      "fru_type": "MAIN_PLANAR", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/apss": {
      "fault": "False", 
      "fru_type": "MAIN_PLANAR", 
      "is_fru": 0, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/bmc": {
      "fault": "False", 
      "fru_type": "BMC", 
      "is_fru": 0, 
      "manufacturer": "ASPEED", 
      "present": "False", 
      "version": "v1.99.0-328-g00da690-dirty"
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu0": {
      "Custom Field 1": "", 
      "Custom Field 2": "EC:20", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "0x2020", 
      "Manufacturer": "IBM", 
      "Name": "PROCESSOR MODULE", 
      "Part Number": "00UL864", 
      "Serial Number": "YA1933063160", 
      "fault": "False", 
      "fru_type": "CPU", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu0/core0": {
      "fault": "False", 
      "fru_type": "CORE", 
      "is_fru": 0, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu0/core1": {
      "fault": "False", 
      "fru_type": "CORE", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu0/core10": {
      "fault": "False", 
      "fru_type": "CORE", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu0/core11": {
      "fault": "False", 
      "fru_type": "CORE", 
      "is_fru": 0, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu0/core2": {
      "fault": "False", 
      "fru_type": "CORE", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu0/core3": {
      "fault": "False", 
      "fru_type": "CORE", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu0/core4": {
      "fault": "False", 
      "fru_type": "CORE", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu0/core5": {
      "fault": "False", 
      "fru_type": "CORE", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu0/core6": {
      "fault": "False", 
      "fru_type": "CORE", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu0/core7": {
      "fault": "False", 
      "fru_type": "CORE", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu0/core8": {
      "fault": "False", 
      "fru_type": "CORE", 
      "is_fru": 0, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu0/core9": {
      "fault": "False", 
      "fru_type": "CORE", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu1": {
      "Custom Field 1": "", 
      "Custom Field 2": "EC:20", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "0x2020", 
      "Manufacturer": "IBM", 
      "Name": "PROCESSOR MODULE", 
      "Part Number": "00UL864", 
      "Serial Number": "YA1933063136", 
      "fault": "False", 
      "fru_type": "CPU", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu1/core0": {
      "fault": "False", 
      "fru_type": "CORE", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu1/core1": {
      "fault": "False", 
      "fru_type": "CORE", 
      "is_fru": 0, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu1/core10": {
      "fault": "False", 
      "fru_type": "CORE", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu1/core11": {
      "fault": "False", 
      "fru_type": "CORE", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu1/core2": {
      "fault": "False", 
      "fru_type": "CORE", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu1/core3": {
      "fault": "False", 
      "fru_type": "CORE", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu1/core4": {
      "fault": "False", 
      "fru_type": "CORE", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu1/core5": {
      "fault": "False", 
      "fru_type": "CORE", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu1/core6": {
      "fault": "False", 
      "fru_type": "CORE", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu1/core7": {
      "fault": "False", 
      "fru_type": "CORE", 
      "is_fru": 0, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu1/core8": {
      "fault": "False", 
      "fru_type": "CORE", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu1/core9": {
      "fault": "False", 
      "fru_type": "CORE", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm0": {
      "Asset Tag": "", 
      "Custom Field 1": "", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "0xce80", 
      "Model Number": "M393B2G70DB0-YK0  ", 
      "Name": "0x0b", 
      "Serial Number": "0x317d9f30", 
      "Version": "0x0000", 
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm1": {
      "Asset Tag": "", 
      "Custom Field 1": "", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "0xce80", 
      "Model Number": "M393B2G70DB0-YK0  ", 
      "Name": "0x0b", 
      "Serial Number": "0x317d9f54", 
      "Version": "0x0000", 
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm10": {
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm11": {
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm12": {
      "Asset Tag": "", 
      "Custom Field 1": "", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "0xce80", 
      "Model Number": "M393B2G70DB0-YK0  ", 
      "Name": "0x0b", 
      "Serial Number": "0x317d9f25", 
      "Version": "0x0000", 
      "fault": "True", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm13": {
      "Asset Tag": "", 
      "Custom Field 1": "", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "0xce80", 
      "Model Number": "M393B2G70DB0-YK0  ", 
      "Name": "0x0b", 
      "Serial Number": "0x317d9f52", 
      "Version": "0x0000", 
      "fault": "True", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm14": {
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm15": {
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm16": {
      "Asset Tag": "", 
      "Custom Field 1": "", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "0xce80", 
      "Model Number": "M393B2G70DB0-YK0  ", 
      "Name": "0x0b", 
      "Serial Number": "0x317d9f2f", 
      "Version": "0x0000", 
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm17": {
      "Asset Tag": "", 
      "Custom Field 1": "", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "0xce80", 
      "Model Number": "M393B2G70DB0-YK0  ", 
      "Name": "0x0b", 
      "Serial Number": "0x317d9f37", 
      "Version": "0x0000", 
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm18": {
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm19": {
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm2": {
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm2/event": {
      "endpoints": [
        "/org/openbmc/records/events/41"
      ]
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm20": {
      "Asset Tag": "", 
      "Custom Field 1": "", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "0xce80", 
      "Model Number": "M393B2G70DB0-YK0  ", 
      "Name": "0x0b", 
      "Serial Number": "0x317d9f29", 
      "Version": "0x0000", 
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm21": {
      "Asset Tag": "", 
      "Custom Field 1": "", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "0xce80", 
      "Model Number": "M393B2G70DB0-YK0  ", 
      "Name": "0x0b", 
      "Serial Number": "0x317d9f33", 
      "Version": "0x0000", 
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm22": {
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm23": {
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm24": {
      "Asset Tag": "", 
      "Custom Field 1": "", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "0xce80", 
      "Model Number": "M393B2G70DB0-YK0  ", 
      "Name": "0x0b", 
      "Serial Number": "0x317da404", 
      "Version": "0x0000", 
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm25": {
      "Asset Tag": "", 
      "Custom Field 1": "", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "0xce80", 
      "Model Number": "M393B2G70DB0-YK0  ", 
      "Name": "0x0b", 
      "Serial Number": "0x317d9f93", 
      "Version": "0x0000", 
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm26": {
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm27": {
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm28": {
      "Asset Tag": "", 
      "Custom Field 1": "", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "0xce80", 
      "Model Number": "M393B2G70DB0-YK0  ", 
      "Name": "0x0b", 
      "Serial Number": "0x317d9f27", 
      "Version": "0x0000", 
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm29": {
      "Asset Tag": "", 
      "Custom Field 1": "", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "0xce80", 
      "Model Number": "M393B2G70DB0-YK0  ", 
      "Name": "0x0b", 
      "Serial Number": "0x317d9f2c", 
      "Version": "0x0000", 
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm3": {
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm3/event": {
      "endpoints": [
        "/org/openbmc/records/events/41"
      ]
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm30": {
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm31": {
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm4": {
      "Asset Tag": "", 
      "Custom Field 1": "", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "0xce80", 
      "Model Number": "M393B2G70DB0-YK0  ", 
      "Name": "0x0b", 
      "Serial Number": "0x317d9f2b", 
      "Version": "0x0000", 
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm5": {
      "Asset Tag": "", 
      "Custom Field 1": "", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "0xce80", 
      "Model Number": "M393B2G70DB0-YK0  ", 
      "Name": "0x0b", 
      "Serial Number": "0x317d9f53", 
      "Version": "0x0000", 
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm6": {
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm7": {
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm8": {
      "Asset Tag": "", 
      "Custom Field 1": "", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "0xce80", 
      "Model Number": "M393B2G70DB0-YK0  ", 
      "Name": "0x0b", 
      "Serial Number": "0x317d9f94", 
      "Version": "0x0000", 
      "fault": "True", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm9": {
      "Asset Tag": "", 
      "Custom Field 1": "", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "0xce80", 
      "Model Number": "M393B2G70DB0-YK0  ", 
      "Name": "0x0b", 
      "Serial Number": "0x317d9f56", 
      "Version": "0x0000", 
      "fault": "True", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/membuf0": {
      "Custom Field 1": "", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "INGRASYS", 
      "Name": "BARRELEYE", 
      "Part Number": "1A4218800-600-G", 
      "Serial Number": "64Q0004X02", 
      "fault": "False", 
      "fru_type": "MEMORY_BUFFER", 
      "is_fru": 0, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/membuf1": {
      "Custom Field 1": "", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "INGRASYS", 
      "Name": "BARRELEYE", 
      "Part Number": "1A4218800-600-G", 
      "Serial Number": "64Q0004X02", 
      "fault": "False", 
      "fru_type": "MEMORY_BUFFER", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/membuf2": {
      "Custom Field 1": "", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "INGRASYS", 
      "Name": "BARRELEYE", 
      "Part Number": "1A4218800-600-G", 
      "Serial Number": "64Q0004X02", 
      "fault": "True", 
      "fru_type": "MEMORY_BUFFER", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/membuf3": {
      "Custom Field 1": "", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "INGRASYS", 
      "Name": "BARRELEYE", 
      "Part Number": "1A4218800-600-G", 
      "Serial Number": "64Q0004X02", 
      "fault": "True", 
      "fru_type": "MEMORY_BUFFER", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/membuf4": {
      "Custom Field 1": "", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "INGRASYS", 
      "Name": "BARRELEYE", 
      "Part Number": "1A4218800-600-G", 
      "Serial Number": "64Q0004X02", 
      "fault": "False", 
      "fru_type": "MEMORY_BUFFER", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/membuf5": {
      "Custom Field 1": "", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "INGRASYS", 
      "Name": "BARRELEYE", 
      "Part Number": "1A4218800-600-G", 
      "Serial Number": "64Q0004X02", 
      "fault": "False", 
      "fru_type": "MEMORY_BUFFER", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/membuf6": {
      "Custom Field 1": "", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "INGRASYS", 
      "Name": "BARRELEYE", 
      "Part Number": "1A4218800-600-G", 
      "Serial Number": "64Q0004X02", 
      "fault": "False", 
      "fru_type": "MEMORY_BUFFER", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/membuf7": {
      "Custom Field 1": "", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "INGRASYS", 
      "Name": "BARRELEYE", 
      "Part Number": "1A4218800-600-G", 
      "Serial Number": "64Q0004X02", 
      "fault": "False", 
      "fru_type": "MEMORY_BUFFER", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/pcieclock": {
      "fault": "False", 
      "fru_type": "MAIN_PLANAR", 
      "is_fru": 0, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/refclock": {
      "fault": "False", 
      "fru_type": "MAIN_PLANAR", 
      "is_fru": 0, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/todclock": {
      "fault": "False", 
      "fru_type": "MAIN_PLANAR", 
      "is_fru": 0, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/sas_expander": {
      "Custom Field 1": "Rackspace US, Inc.", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "FRU Ver 0.01", 
      "Manufacturer": "FOXCONN", 
      "Name": "BARRELEYE PEB", 
      "Part Number": "10034HV00-600-G", 
      "Serial Number": "1A421AR00-600-G64J0002X02", 
      "fault": "False", 
      "fru_type": "DAUGHTER_CARD", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/misc": {
      "Custom Field 1": "", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "INGRASYS", 
      "Name": "BARRELEYE", 
      "Part Number": "1A4218800-600-G", 
      "Serial Number": "64Q0004X02", 
      "fault": "True", 
      "fru_type": "SYSTEM", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/systemevent": {
      "fault": "False", 
      "fru_type": "SYSTEM_EVENT", 
      "is_fru": 0, 
      "present": "False", 
      "version": ""
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161215 19:52:37.522" status="PASS" endtime="20161215 19:52:37.524"></status>
</kw>
<status starttime="20161215 19:52:37.522" status="PASS" endtime="20161215 19:52:37.525"></status>
</kw>
<status starttime="20161215 19:52:37.519" status="PASS" endtime="20161215 19:52:37.525"></status>
</kw>
<status starttime="20161215 19:52:37.513" status="PASS" endtime="20161215 19:52:37.525"></status>
</kw>
<msg level="INFO" timestamp="20161215 19:52:37.525">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161215 19:52:32.724" status="PASS" endtime="20161215 19:52:37.526"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161215 19:52:37.526">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161215 19:52:37.526" status="PASS" endtime="20161215 19:52:37.527"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161215 19:52:37.530">To JSON using : content={
  "data": {
    "/org/openbmc/inventory/system": {
      "fault": "False", 
      "fru_type": "SYSTEM", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/bios": {
      "Asset Tag": "", 
      "Custom Field 1": "\tbuildroot-fda20bd", 
      "Custom Field 2": "\tskiboot-5.2.0-opdirty", 
      "Custom Field 3": "\thostboot-c223637-1d3dbf3", 
      "Custom Field 4": "\tlinux-4.4.6-openpower1-opdirty-99d283b", 
      "Custom Field 5": "\tpetitboot-72928ed-opdirty-47f54ff", 
      "Custom Field 6": "\tbarreleye-xml-1250f06-opdirty", 
      "Custom Field 7": "\tocc-1093bf9-opdir", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "", 
      "Model Number": "", 
      "Name": "OpenPOWER Firmware", 
      "Serial Number": "", 
      "Version": "open-power-barreleye-v1.8", 
      "fault": "False", 
      "fru_type": "SYSTEM", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis": {
      "fault": "False", 
      "fru_type": "SYSTEM", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/fan0": {
      "fault": "False", 
      "fru_type": "FAN", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/fan1": {
      "fault": "False", 
      "fru_type": "FAN", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/fan2": {
      "fault": "False", 
      "fru_type": "FAN", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/fan3": {
      "fault": "False", 
      "fru_type": "FAN", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/fan4": {
      "fault": "False", 
      "fru_type": "FAN", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/fan5": {
      "fault": "False", 
      "fru_type": "FAN", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/hdd_backplane": {
      "Custom Field 1": "Rackspace US, Inc.", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "FRU Ver 0.01", 
      "Manufacturer": "FOXCONN", 
      "Name": "BARRELEYE BPx15", 
      "Part Number": "10034HV00-600-G", 
      "Serial Number": "1A4218000-600-G64J000AX02", 
      "fault": "False", 
      "fru_type": "DAUGHTER_CARD", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/io_board": {
      "Custom Field 1": "Rackspace US, Inc.", 
      "Custom Field 2": "1C666D854AD0", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "FRU Ver 0.01", 
      "Manufacturer": "INGRASYS", 
      "Name": "BARRELEYE IO Board", 
      "Part Number": "10010VU00-600-G", 
      "Serial Number": "10010VU00X1571001", 
      "fault": "False", 
      "fru_type": "DAUGHTER_CARD", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/io_board/pcie_mezz0": {
      "fault": "False", 
      "fru_type": "PCIE_CARD", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/io_board/pcie_mezz1": {
      "fault": "False", 
      "fru_type": "PCIE_CARD", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/io_board/pcie_slot0": {
      "fault": "False", 
      "fru_type": "PCIE_CARD", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/io_board/pcie_slot0_riser": {
      "fault": "False", 
      "fru_type": "PCIE_RISER", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/io_board/pcie_slot1": {
      "fault": "False", 
      "fru_type": "PCIE_CARD", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/io_board/pcie_slot1_riser": {
      "fault": "False", 
      "fru_type": "PCIE_RISER", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/io_board/pcie_slot2": {
      "fault": "False", 
      "fru_type": "PCIE_CARD", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/io_board/pcie_slot2_riser": {
      "fault": "False", 
      "fru_type": "PCIE_RISER", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard": {
      "Custom Field 1": "", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "Part Number": "1A21GBR00-600-G", 
      "Serial Number": "65D0008X02", 
      "Type": 23, 
      "fault": "True", 
      "fru_type": "MAIN_PLANAR", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/apss": {
      "fault": "False", 
      "fru_type": "MAIN_PLANAR", 
      "is_fru": 0, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/bmc": {
      "fault": "False", 
      "fru_type": "BMC", 
      "is_fru": 0, 
      "manufacturer": "ASPEED", 
      "present": "False", 
      "version": "v1.99.0-328-g00da690-dirty"
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu0": {
      "Custom Field 1": "", 
      "Custom Field 2": "EC:20", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "0x2020", 
      "Manufacturer": "IBM", 
      "Name": "PROCESSOR MODULE", 
      "Part Number": "00UL864", 
      "Serial Number": "YA1933063160", 
      "fault": "False", 
      "fru_type": "CPU", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu0/core0": {
      "fault": "False", 
      "fru_type": "CORE", 
      "is_fru": 0, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu0/core1": {
      "fault": "False", 
      "fru_type": "CORE", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu0/core10": {
      "fault": "False", 
      "fru_type": "CORE", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu0/core11": {
      "fault": "False", 
      "fru_type": "CORE", 
      "is_fru": 0, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu0/core2": {
      "fault": "False", 
      "fru_type": "CORE", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu0/core3": {
      "fault": "False", 
      "fru_type": "CORE", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu0/core4": {
      "fault": "False", 
      "fru_type": "CORE", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu0/core5": {
      "fault": "False", 
      "fru_type": "CORE", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu0/core6": {
      "fault": "False", 
      "fru_type": "CORE", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu0/core7": {
      "fault": "False", 
      "fru_type": "CORE", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu0/core8": {
      "fault": "False", 
      "fru_type": "CORE", 
      "is_fru": 0, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu0/core9": {
      "fault": "False", 
      "fru_type": "CORE", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu1": {
      "Custom Field 1": "", 
      "Custom Field 2": "EC:20", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "0x2020", 
      "Manufacturer": "IBM", 
      "Name": "PROCESSOR MODULE", 
      "Part Number": "00UL864", 
      "Serial Number": "YA1933063136", 
      "fault": "False", 
      "fru_type": "CPU", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu1/core0": {
      "fault": "False", 
      "fru_type": "CORE", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu1/core1": {
      "fault": "False", 
      "fru_type": "CORE", 
      "is_fru": 0, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu1/core10": {
      "fault": "False", 
      "fru_type": "CORE", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu1/core11": {
      "fault": "False", 
      "fru_type": "CORE", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu1/core2": {
      "fault": "False", 
      "fru_type": "CORE", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu1/core3": {
      "fault": "False", 
      "fru_type": "CORE", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu1/core4": {
      "fault": "False", 
      "fru_type": "CORE", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu1/core5": {
      "fault": "False", 
      "fru_type": "CORE", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu1/core6": {
      "fault": "False", 
      "fru_type": "CORE", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu1/core7": {
      "fault": "False", 
      "fru_type": "CORE", 
      "is_fru": 0, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu1/core8": {
      "fault": "False", 
      "fru_type": "CORE", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/cpu1/core9": {
      "fault": "False", 
      "fru_type": "CORE", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm0": {
      "Asset Tag": "", 
      "Custom Field 1": "", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "0xce80", 
      "Model Number": "M393B2G70DB0-YK0  ", 
      "Name": "0x0b", 
      "Serial Number": "0x317d9f30", 
      "Version": "0x0000", 
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm1": {
      "Asset Tag": "", 
      "Custom Field 1": "", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "0xce80", 
      "Model Number": "M393B2G70DB0-YK0  ", 
      "Name": "0x0b", 
      "Serial Number": "0x317d9f54", 
      "Version": "0x0000", 
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm10": {
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm11": {
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm12": {
      "Asset Tag": "", 
      "Custom Field 1": "", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "0xce80", 
      "Model Number": "M393B2G70DB0-YK0  ", 
      "Name": "0x0b", 
      "Serial Number": "0x317d9f25", 
      "Version": "0x0000", 
      "fault": "True", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm13": {
      "Asset Tag": "", 
      "Custom Field 1": "", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "0xce80", 
      "Model Number": "M393B2G70DB0-YK0  ", 
      "Name": "0x0b", 
      "Serial Number": "0x317d9f52", 
      "Version": "0x0000", 
      "fault": "True", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm14": {
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm15": {
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm16": {
      "Asset Tag": "", 
      "Custom Field 1": "", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "0xce80", 
      "Model Number": "M393B2G70DB0-YK0  ", 
      "Name": "0x0b", 
      "Serial Number": "0x317d9f2f", 
      "Version": "0x0000", 
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm17": {
      "Asset Tag": "", 
      "Custom Field 1": "", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "0xce80", 
      "Model Number": "M393B2G70DB0-YK0  ", 
      "Name": "0x0b", 
      "Serial Number": "0x317d9f37", 
      "Version": "0x0000", 
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm18": {
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm19": {
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm2": {
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm2/event": {
      "endpoints": [
        "/org/openbmc/records/events/41"
      ]
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm20": {
      "Asset Tag": "", 
      "Custom Field 1": "", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "0xce80", 
      "Model Number": "M393B2G70DB0-YK0  ", 
      "Name": "0x0b", 
      "Serial Number": "0x317d9f29", 
      "Version": "0x0000", 
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm21": {
      "Asset Tag": "", 
      "Custom Field 1": "", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "0xce80", 
      "Model Number": "M393B2G70DB0-YK0  ", 
      "Name": "0x0b", 
      "Serial Number": "0x317d9f33", 
      "Version": "0x0000", 
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm22": {
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm23": {
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm24": {
      "Asset Tag": "", 
      "Custom Field 1": "", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "0xce80", 
      "Model Number": "M393B2G70DB0-YK0  ", 
      "Name": "0x0b", 
      "Serial Number": "0x317da404", 
      "Version": "0x0000", 
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm25": {
      "Asset Tag": "", 
      "Custom Field 1": "", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "0xce80", 
      "Model Number": "M393B2G70DB0-YK0  ", 
      "Name": "0x0b", 
      "Serial Number": "0x317d9f93", 
      "Version": "0x0000", 
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm26": {
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm27": {
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm28": {
      "Asset Tag": "", 
      "Custom Field 1": "", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "0xce80", 
      "Model Number": "M393B2G70DB0-YK0  ", 
      "Name": "0x0b", 
      "Serial Number": "0x317d9f27", 
      "Version": "0x0000", 
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm29": {
      "Asset Tag": "", 
      "Custom Field 1": "", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "0xce80", 
      "Model Number": "M393B2G70DB0-YK0  ", 
      "Name": "0x0b", 
      "Serial Number": "0x317d9f2c", 
      "Version": "0x0000", 
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm3": {
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm3/event": {
      "endpoints": [
        "/org/openbmc/records/events/41"
      ]
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm30": {
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm31": {
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm4": {
      "Asset Tag": "", 
      "Custom Field 1": "", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "0xce80", 
      "Model Number": "M393B2G70DB0-YK0  ", 
      "Name": "0x0b", 
      "Serial Number": "0x317d9f2b", 
      "Version": "0x0000", 
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm5": {
      "Asset Tag": "", 
      "Custom Field 1": "", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "0xce80", 
      "Model Number": "M393B2G70DB0-YK0  ", 
      "Name": "0x0b", 
      "Serial Number": "0x317d9f53", 
      "Version": "0x0000", 
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm6": {
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm7": {
      "fault": "False", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm8": {
      "Asset Tag": "", 
      "Custom Field 1": "", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "0xce80", 
      "Model Number": "M393B2G70DB0-YK0  ", 
      "Name": "0x0b", 
      "Serial Number": "0x317d9f94", 
      "Version": "0x0000", 
      "fault": "True", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/dimm9": {
      "Asset Tag": "", 
      "Custom Field 1": "", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "0xce80", 
      "Model Number": "M393B2G70DB0-YK0  ", 
      "Name": "0x0b", 
      "Serial Number": "0x317d9f56", 
      "Version": "0x0000", 
      "fault": "True", 
      "fru_type": "DIMM", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/membuf0": {
      "Custom Field 1": "", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "INGRASYS", 
      "Name": "BARRELEYE", 
      "Part Number": "1A4218800-600-G", 
      "Serial Number": "64Q0004X02", 
      "fault": "False", 
      "fru_type": "MEMORY_BUFFER", 
      "is_fru": 0, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/membuf1": {
      "Custom Field 1": "", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "INGRASYS", 
      "Name": "BARRELEYE", 
      "Part Number": "1A4218800-600-G", 
      "Serial Number": "64Q0004X02", 
      "fault": "False", 
      "fru_type": "MEMORY_BUFFER", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/membuf2": {
      "Custom Field 1": "", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "INGRASYS", 
      "Name": "BARRELEYE", 
      "Part Number": "1A4218800-600-G", 
      "Serial Number": "64Q0004X02", 
      "fault": "True", 
      "fru_type": "MEMORY_BUFFER", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/membuf3": {
      "Custom Field 1": "", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "INGRASYS", 
      "Name": "BARRELEYE", 
      "Part Number": "1A4218800-600-G", 
      "Serial Number": "64Q0004X02", 
      "fault": "True", 
      "fru_type": "MEMORY_BUFFER", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/membuf4": {
      "Custom Field 1": "", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "INGRASYS", 
      "Name": "BARRELEYE", 
      "Part Number": "1A4218800-600-G", 
      "Serial Number": "64Q0004X02", 
      "fault": "False", 
      "fru_type": "MEMORY_BUFFER", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/membuf5": {
      "Custom Field 1": "", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "INGRASYS", 
      "Name": "BARRELEYE", 
      "Part Number": "1A4218800-600-G", 
      "Serial Number": "64Q0004X02", 
      "fault": "False", 
      "fru_type": "MEMORY_BUFFER", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/membuf6": {
      "Custom Field 1": "", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "INGRASYS", 
      "Name": "BARRELEYE", 
      "Part Number": "1A4218800-600-G", 
      "Serial Number": "64Q0004X02", 
      "fault": "False", 
      "fru_type": "MEMORY_BUFFER", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/membuf7": {
      "Custom Field 1": "", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "INGRASYS", 
      "Name": "BARRELEYE", 
      "Part Number": "1A4218800-600-G", 
      "Serial Number": "64Q0004X02", 
      "fault": "False", 
      "fru_type": "MEMORY_BUFFER", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/pcieclock": {
      "fault": "False", 
      "fru_type": "MAIN_PLANAR", 
      "is_fru": 0, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/refclock": {
      "fault": "False", 
      "fru_type": "MAIN_PLANAR", 
      "is_fru": 0, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/motherboard/todclock": {
      "fault": "False", 
      "fru_type": "MAIN_PLANAR", 
      "is_fru": 0, 
      "present": "False", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/chassis/sas_expander": {
      "Custom Field 1": "Rackspace US, Inc.", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "FRU Ver 0.01", 
      "Manufacturer": "FOXCONN", 
      "Name": "BARRELEYE PEB", 
      "Part Number": "10034HV00-600-G", 
      "Serial Number": "1A421AR00-600-G64J0002X02", 
      "fault": "False", 
      "fru_type": "DAUGHTER_CARD", 
      "is_fru": 1, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/misc": {
      "Custom Field 1": "", 
      "Custom Field 2": "", 
      "Custom Field 3": "", 
      "Custom Field 4": "", 
      "Custom Field 5": "", 
      "Custom Field 6": "", 
      "Custom Field 7": "", 
      "Custom Field 8": "", 
      "FRU File ID": "", 
      "Manufacturer": "INGRASYS", 
      "Name": "BARRELEYE", 
      "Part Number": "1A4218800-600-G", 
      "Serial Number": "64Q0004X02", 
      "fault": "True", 
      "fru_type": "SYSTEM", 
      "is_fru": 0, 
      "present": "True", 
      "version": ""
    }, 
    "/org/openbmc/inventory/system/systemevent": {
      "fault": "False", 
      "fru_type": "SYSTEM_EVENT", 
      "is_fru": 0, 
      "present": "False", 
      "version": ""
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161215 19:52:37.530">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161215 19:52:37.531">${content} = {u'data': {u'/org/openbmc/inventory/system/chassis/motherboard/refclock': {u'present': u'False', u'fru_type': u'MAIN_PLANAR', u'version': u'', u'is_fru': 0, u'fault': u'False'}, u'/org/openbmc/invento...</msg>
<status starttime="20161215 19:52:37.527" status="PASS" endtime="20161215 19:52:37.531"></status>
</kw>
<msg level="INFO" timestamp="20161215 19:52:37.532">${resp} = {u'/org/openbmc/inventory/system/chassis/motherboard/refclock': {u'present': u'False', u'fru_type': u'MAIN_PLANAR', u'version': u'', u'is_fru': 0, u'fault': u'False'}, u'/org/openbmc/inventory/system/...</msg>
<status starttime="20161215 19:52:32.723" status="PASS" endtime="20161215 19:52:37.532"></status>
</kw>
<kw library="Collections" name="Log Dictionary">
<doc>Logs the size and contents of the ``dictionary`` using given ``level``.</doc>
<arguments>
<arg>${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20161215 19:52:37.534">Dictionary size is 96 and it contains following items:
/org/openbmc/inventory/system: {u'present': u'True', u'fru_type': u'SYSTEM', u'version': u'', u'is_fru': 1, u'fault': u'False'}
/org/openbmc/inventory/system/bios: {u'FRU File ID': u'', u'Manufacturer': u'', u'fru_type': u'SYSTEM', u'Version': u'open-power-barreleye-v1.8', u'present': u'True', u'version': u'', u'Model Number': u'', u'Name': u'OpenPOWER Firmware', u'Custom Field 8': u'', u'Serial Number': u'', u'Custom Field 6': u'\tbarreleye-xml-1250f06-opdirty', u'fault': u'False', u'is_fru': 1, u'Custom Field 1': u'\tbuildroot-fda20bd', u'Custom Field 2': u'\tskiboot-5.2.0-opdirty', u'Custom Field 3': u'\thostboot-c223637-1d3dbf3', u'Custom Field 4': u'\tlinux-4.4.6-openpower1-opdirty-99d283b', u'Custom Field 5': u'\tpetitboot-72928ed-opdirty-47f54ff', u'Asset Tag': u'', u'Custom Field 7': u'\tocc-1093bf9-opdir'}
/org/openbmc/inventory/system/chassis: {u'present': u'True', u'fru_type': u'SYSTEM', u'version': u'', u'is_fru': 1, u'fault': u'False'}
/org/openbmc/inventory/system/chassis/fan0: {u'present': u'False', u'fru_type': u'FAN', u'version': u'', u'is_fru': 1, u'fault': u'False'}
/org/openbmc/inventory/system/chassis/fan1: {u'present': u'False', u'fru_type': u'FAN', u'version': u'', u'is_fru': 1, u'fault': u'False'}
/org/openbmc/inventory/system/chassis/fan2: {u'present': u'False', u'fru_type': u'FAN', u'version': u'', u'is_fru': 1, u'fault': u'False'}
/org/openbmc/inventory/system/chassis/fan3: {u'present': u'False', u'fru_type': u'FAN', u'version': u'', u'is_fru': 1, u'fault': u'False'}
/org/openbmc/inventory/system/chassis/fan4: {u'present': u'False', u'fru_type': u'FAN', u'version': u'', u'is_fru': 1, u'fault': u'False'}
/org/openbmc/inventory/system/chassis/fan5: {u'present': u'False', u'fru_type': u'FAN', u'version': u'', u'is_fru': 1, u'fault': u'False'}
/org/openbmc/inventory/system/chassis/hdd_backplane: {u'FRU File ID': u'FRU Ver 0.01', u'Manufacturer': u'FOXCONN', u'fru_type': u'DAUGHTER_CARD', u'version': u'', u'present': u'True', u'Name': u'BARRELEYE BPx15', u'Custom Field 8': u'', u'Serial Number': u'1A4218000-600-G64J000AX02', u'Part Number': u'10034HV00-600-G', u'fault': u'False', u'is_fru': 1, u'Custom Field 1': u'Rackspace US, Inc.', u'Custom Field 2': u'', u'Custom Field 3': u'', u'Custom Field 4': u'', u'Custom Field 5': u'', u'Custom Field 6': u'', u'Custom Field 7': u''}
/org/openbmc/inventory/system/chassis/io_board: {u'FRU File ID': u'FRU Ver 0.01', u'Manufacturer': u'INGRASYS', u'fru_type': u'DAUGHTER_CARD', u'version': u'', u'present': u'True', u'Name': u'BARRELEYE IO Board', u'Custom Field 8': u'', u'Serial Number': u'10010VU00X1571001', u'Part Number': u'10010VU00-600-G', u'fault': u'False', u'is_fru': 1, u'Custom Field 1': u'Rackspace US, Inc.', u'Custom Field 2': u'1C666D854AD0', u'Custom Field 3': u'', u'Custom Field 4': u'', u'Custom Field 5': u'', u'Custom Field 6': u'', u'Custom Field 7': u''}
/org/openbmc/inventory/system/chassis/io_board/pcie_mezz0: {u'present': u'False', u'fru_type': u'PCIE_CARD', u'version': u'', u'is_fru': 1, u'fault': u'False'}
/org/openbmc/inventory/system/chassis/io_board/pcie_mezz1: {u'present': u'False', u'fru_type': u'PCIE_CARD', u'version': u'', u'is_fru': 1, u'fault': u'False'}
/org/openbmc/inventory/system/chassis/io_board/pcie_slot0: {u'present': u'False', u'fru_type': u'PCIE_CARD', u'version': u'', u'is_fru': 1, u'fault': u'False'}
/org/openbmc/inventory/system/chassis/io_board/pcie_slot0_riser: {u'present': u'False', u'fru_type': u'PCIE_RISER', u'version': u'', u'is_fru': 1, u'fault': u'False'}
/org/openbmc/inventory/system/chassis/io_board/pcie_slot1: {u'present': u'False', u'fru_type': u'PCIE_CARD', u'version': u'', u'is_fru': 1, u'fault': u'False'}
/org/openbmc/inventory/system/chassis/io_board/pcie_slot1_riser: {u'present': u'False', u'fru_type': u'PCIE_RISER', u'version': u'', u'is_fru': 1, u'fault': u'False'}
/org/openbmc/inventory/system/chassis/io_board/pcie_slot2: {u'present': u'False', u'fru_type': u'PCIE_CARD', u'version': u'', u'is_fru': 1, u'fault': u'False'}
/org/openbmc/inventory/system/chassis/io_board/pcie_slot2_riser: {u'present': u'False', u'fru_type': u'PCIE_RISER', u'version': u'', u'is_fru': 1, u'fault': u'False'}
/org/openbmc/inventory/system/chassis/motherboard: {u'is_fru': 1, u'fru_type': u'MAIN_PLANAR', u'version': u'', u'present': u'True', u'Type': 23, u'Custom Field 8': u'', u'Serial Number': u'65D0008X02', u'Part Number': u'1A21GBR00-600-G', u'fault': u'True', u'Custom Field 1': u'', u'Custom Field 2': u'', u'Custom Field 3': u'', u'Custom Field 4': u'', u'Custom Field 5': u'', u'Custom Field 6': u'', u'Custom Field 7': u''}
/org/openbmc/inventory/system/chassis/motherboard/apss: {u'present': u'False', u'fru_type': u'MAIN_PLANAR', u'version': u'', u'is_fru': 0, u'fault': u'False'}
/org/openbmc/inventory/system/chassis/motherboard/bmc: {u'fru_type': u'BMC', u'version': u'v1.99.0-328-g00da690-dirty', u'manufacturer': u'ASPEED', u'present': u'False', u'is_fru': 0, u'fault': u'False'}
/org/openbmc/inventory/system/chassis/motherboard/cpu0: {u'FRU File ID': u'0x2020', u'Manufacturer': u'IBM', u'fru_type': u'CPU', u'version': u'', u'present': u'False', u'Name': u'PROCESSOR MODULE', u'Custom Field 8': u'', u'Serial Number': u'YA1933063160', u'Part Number': u'00UL864', u'fault': u'False', u'is_fru': 1, u'Custom Field 1': u'', u'Custom Field 2': u'EC:20', u'Custom Field 3': u'', u'Custom Field 4': u'', u'Custom Field 5': u'', u'Custom Field 6': u'', u'Custom Field 7': u''}
/org/openbmc/inventory/system/chassis/motherboard/cpu0/core0: {u'present': u'False', u'fru_type': u'CORE', u'version': u'', u'is_fru': 0, u'fault': u'False'}
/org/openbmc/inventory/system/chassis/motherboard/cpu0/core1: {u'present': u'True', u'fru_type': u'CORE', u'version': u'', u'is_fru': 0, u'fault': u'False'}
/org/openbmc/inventory/system/chassis/motherboard/cpu0/core10: {u'present': u'True', u'fru_type': u'CORE', u'version': u'', u'is_fru': 0, u'fault': u'False'}
/org/openbmc/inventory/system/chassis/motherboard/cpu0/core11: {u'present': u'False', u'fru_type': u'CORE', u'version': u'', u'is_fru': 0, u'fault': u'False'}
/org/openbmc/inventory/system/chassis/motherboard/cpu0/core2: {u'present': u'True', u'fru_type': u'CORE', u'version': u'', u'is_fru': 0, u'fault': u'False'}
/org/openbmc/inventory/system/chassis/motherboard/cpu0/core3: {u'present': u'True', u'fru_type': u'CORE', u'version': u'', u'is_fru': 0, u'fault': u'False'}
/org/openbmc/inventory/system/chassis/motherboard/cpu0/core4: {u'present': u'True', u'fru_type': u'CORE', u'version': u'', u'is_fru': 0, u'fault': u'False'}
/org/openbmc/inventory/system/chassis/motherboard/cpu0/core5: {u'present': u'True', u'fru_type': u'CORE', u'version': u'', u'is_fru': 0, u'fault': u'False'}
/org/openbmc/inventory/system/chassis/motherboard/cpu0/core6: {u'present': u'True', u'fru_type': u'CORE', u'version': u'', u'is_fru': 0, u'fault': u'False'}
/org/openbmc/inventory/system/chassis/motherboard/cpu0/core7: {u'present': u'True', u'fru_type': u'CORE', u'version': u'', u'is_fru': 0, u'fault': u'False'}
/org/openbmc/inventory/system/chassis/motherboard/cpu0/core8: {u'present': u'False', u'fru_type': u'CORE', u'version': u'', u'is_fru': 0, u'fault': u'False'}
/org/openbmc/inventory/system/chassis/motherboard/cpu0/core9: {u'present': u'True', u'fru_type': u'CORE', u'version': u'', u'is_fru': 0, u'fault': u'False'}
/org/openbmc/inventory/system/chassis/motherboard/cpu1: {u'FRU File ID': u'0x2020', u'Manufacturer': u'IBM', u'fru_type': u'CPU', u'version': u'', u'present': u'True', u'Name': u'PROCESSOR MODULE', u'Custom Field 8': u'', u'Serial Number': u'YA1933063136', u'Part Number': u'00UL864', u'fault': u'False', u'is_fru': 1, u'Custom Field 1': u'', u'Custom Field 2': u'EC:20', u'Custom Field 3': u'', u'Custom Field 4': u'', u'Custom Field 5': u'', u'Custom Field 6': u'', u'Custom Field 7': u''}
/org/openbmc/inventory/system/chassis/motherboard/cpu1/core0: {u'present': u'True', u'fru_type': u'CORE', u'version': u'', u'is_fru': 0, u'fault': u'False'}
/org/openbmc/inventory/system/chassis/motherboard/cpu1/core1: {u'present': u'False', u'fru_type': u'CORE', u'version': u'', u'is_fru': 0, u'fault': u'False'}
/org/openbmc/inventory/system/chassis/motherboard/cpu1/core10: {u'present': u'True', u'fru_type': u'CORE', u'version': u'', u'is_fru': 0, u'fault': u'False'}
/org/openbmc/inventory/system/chassis/motherboard/cpu1/core11: {u'present': u'True', u'fru_type': u'CORE', u'version': u'', u'is_fru': 0, u'fault': u'False'}
/org/openbmc/inventory/system/chassis/motherboard/cpu1/core2: {u'present': u'True', u'fru_type': u'CORE', u'version': u'', u'is_fru': 0, u'fault': u'False'}
/org/openbmc/inventory/system/chassis/motherboard/cpu1/core3: {u'present': u'True', u'fru_type': u'CORE', u'version': u'', u'is_fru': 0, u'fault': u'False'}
/org/openbmc/inventory/system/chassis/motherboard/cpu1/core4: {u'present': u'True', u'fru_type': u'CORE', u'version': u'', u'is_fru': 0, u'fault': u'False'}
/org/openbmc/inventory/system/chassis/motherboard/cpu1/core5: {u'present': u'True', u'fru_type': u'CORE', u'version': u'', u'is_fru': 0, u'fault': u'False'}
/org/openbmc/inventory/system/chassis/motherboard/cpu1/core6: {u'present': u'True', u'fru_type': u'CORE', u'version': u'', u'is_fru': 0, u'fault': u'False'}
/org/openbmc/inventory/system/chassis/motherboard/cpu1/core7: {u'present': u'False', u'fru_type': u'CORE', u'version': u'', u'is_fru': 0, u'fault': u'False'}
/org/openbmc/inventory/system/chassis/motherboard/cpu1/core8: {u'present': u'True', u'fru_type': u'CORE', u'version': u'', u'is_fru': 0, u'fault': u'False'}
/org/openbmc/inventory/system/chassis/motherboard/cpu1/core9: {u'present': u'True', u'fru_type': u'CORE', u'version': u'', u'is_fru': 0, u'fault': u'False'}
/org/openbmc/inventory/system/chassis/motherboard/dimm0: {u'FRU File ID': u'', u'Manufacturer': u'0xce80', u'fru_type': u'DIMM', u'Version': u'0x0000', u'present': u'True', u'version': u'', u'Model Number': u'M393B2G70DB0-YK0  ', u'Name': u'0x0b', u'Custom Field 8': u'', u'Serial Number': u'0x317d9f30', u'Custom Field 6': u'', u'fault': u'False', u'is_fru': 1, u'Custom Field 1': u'', u'Custom Field 2': u'', u'Custom Field 3': u'', u'Custom Field 4': u'', u'Custom Field 5': u'', u'Asset Tag': u'', u'Custom Field 7': u''}
/org/openbmc/inventory/system/chassis/motherboard/dimm1: {u'FRU File ID': u'', u'Manufacturer': u'0xce80', u'fru_type': u'DIMM', u'Version': u'0x0000', u'present': u'True', u'version': u'', u'Model Number': u'M393B2G70DB0-YK0  ', u'Name': u'0x0b', u'Custom Field 8': u'', u'Serial Number': u'0x317d9f54', u'Custom Field 6': u'', u'fault': u'False', u'is_fru': 1, u'Custom Field 1': u'', u'Custom Field 2': u'', u'Custom Field 3': u'', u'Custom Field 4': u'', u'Custom Field 5': u'', u'Asset Tag': u'', u'Custom Field 7': u''}
/org/openbmc/inventory/system/chassis/motherboard/dimm10: {u'present': u'False', u'fru_type': u'DIMM', u'version': u'', u'is_fru': 1, u'fault': u'False'}
/org/openbmc/inventory/system/chassis/motherboard/dimm11: {u'present': u'False', u'fru_type': u'DIMM', u'version': u'', u'is_fru': 1, u'fault': u'False'}
/org/openbmc/inventory/system/chassis/motherboard/dimm12: {u'FRU File ID': u'', u'Manufacturer': u'0xce80', u'fru_type': u'DIMM', u'Version': u'0x0000', u'present': u'True', u'version': u'', u'Model Number': u'M393B2G70DB0-YK0  ', u'Name': u'0x0b', u'Custom Field 8': u'', u'Serial Number': u'0x317d9f25', u'Custom Field 6': u'', u'fault': u'True', u'is_fru': 1, u'Custom Field 1': u'', u'Custom Field 2': u'', u'Custom Field 3': u'', u'Custom Field 4': u'', u'Custom Field 5': u'', u'Asset Tag': u'', u'Custom Field 7': u''}
/org/openbmc/inventory/system/chassis/motherboard/dimm13: {u'FRU File ID': u'', u'Manufacturer': u'0xce80', u'fru_type': u'DIMM', u'Version': u'0x0000', u'present': u'True', u'version': u'', u'Model Number': u'M393B2G70DB0-YK0  ', u'Name': u'0x0b', u'Custom Field 8': u'', u'Serial Number': u'0x317d9f52', u'Custom Field 6': u'', u'fault': u'True', u'is_fru': 1, u'Custom Field 1': u'', u'Custom Field 2': u'', u'Custom Field 3': u'', u'Custom Field 4': u'', u'Custom Field 5': u'', u'Asset Tag': u'', u'Custom Field 7': u''}
/org/openbmc/inventory/system/chassis/motherboard/dimm14: {u'present': u'False', u'fru_type': u'DIMM', u'version': u'', u'is_fru': 1, u'fault': u'False'}
/org/openbmc/inventory/system/chassis/motherboard/dimm15: {u'present': u'False', u'fru_type': u'DIMM', u'version': u'', u'is_fru': 1, u'fault': u'False'}
/org/openbmc/inventory/system/chassis/motherboard/dimm16: {u'FRU File ID': u'', u'Manufacturer': u'0xce80', u'fru_type': u'DIMM', u'Version': u'0x0000', u'present': u'True', u'version': u'', u'Model Number': u'M393B2G70DB0-YK0  ', u'Name': u'0x0b', u'Custom Field 8': u'', u'Serial Number': u'0x317d9f2f', u'Custom Field 6': u'', u'fault': u'False', u'is_fru': 1, u'Custom Field 1': u'', u'Custom Field 2': u'', u'Custom Field 3': u'', u'Custom Field 4': u'', u'Custom Field 5': u'', u'Asset Tag': u'', u'Custom Field 7': u''}
/org/openbmc/inventory/system/chassis/motherboard/dimm17: {u'FRU File ID': u'', u'Manufacturer': u'0xce80', u'fru_type': u'DIMM', u'Version': u'0x0000', u'present': u'True', u'version': u'', u'Model Number': u'M393B2G70DB0-YK0  ', u'Name': u'0x0b', u'Custom Field 8': u'', u'Serial Number': u'0x317d9f37', u'Custom Field 6': u'', u'fault': u'False', u'is_fru': 1, u'Custom Field 1': u'', u'Custom Field 2': u'', u'Custom Field 3': u'', u'Custom Field 4': u'', u'Custom Field 5': u'', u'Asset Tag': u'', u'Custom Field 7': u''}
/org/openbmc/inventory/system/chassis/motherboard/dimm18: {u'present': u'False', u'fru_type': u'DIMM', u'version': u'', u'is_fru': 1, u'fault': u'False'}
/org/openbmc/inventory/system/chassis/motherboard/dimm19: {u'present': u'False', u'fru_type': u'DIMM', u'version': u'', u'is_fru': 1, u'fault': u'False'}
/org/openbmc/inventory/system/chassis/motherboard/dimm2: {u'present': u'False', u'fru_type': u'DIMM', u'version': u'', u'is_fru': 1, u'fault': u'False'}
/org/openbmc/inventory/system/chassis/motherboard/dimm2/event: {u'endpoints': [u'/org/openbmc/records/events/41']}
/org/openbmc/inventory/system/chassis/motherboard/dimm20: {u'FRU File ID': u'', u'Manufacturer': u'0xce80', u'fru_type': u'DIMM', u'Version': u'0x0000', u'present': u'True', u'version': u'', u'Model Number': u'M393B2G70DB0-YK0  ', u'Name': u'0x0b', u'Custom Field 8': u'', u'Serial Number': u'0x317d9f29', u'Custom Field 6': u'', u'fault': u'False', u'is_fru': 1, u'Custom Field 1': u'', u'Custom Field 2': u'', u'Custom Field 3': u'', u'Custom Field 4': u'', u'Custom Field 5': u'', u'Asset Tag': u'', u'Custom Field 7': u''}
/org/openbmc/inventory/system/chassis/motherboard/dimm21: {u'FRU File ID': u'', u'Manufacturer': u'0xce80', u'fru_type': u'DIMM', u'Version': u'0x0000', u'present': u'True', u'version': u'', u'Model Number': u'M393B2G70DB0-YK0  ', u'Name': u'0x0b', u'Custom Field 8': u'', u'Serial Number': u'0x317d9f33', u'Custom Field 6': u'', u'fault': u'False', u'is_fru': 1, u'Custom Field 1': u'', u'Custom Field 2': u'', u'Custom Field 3': u'', u'Custom Field 4': u'', u'Custom Field 5': u'', u'Asset Tag': u'', u'Custom Field 7': u''}
/org/openbmc/inventory/system/chassis/motherboard/dimm22: {u'present': u'False', u'fru_type': u'DIMM', u'version': u'', u'is_fru': 1, u'fault': u'False'}
/org/openbmc/inventory/system/chassis/motherboard/dimm23: {u'present': u'False', u'fru_type': u'DIMM', u'version': u'', u'is_fru': 1, u'fault': u'False'}
/org/openbmc/inventory/system/chassis/motherboard/dimm24: {u'FRU File ID': u'', u'Manufacturer': u'0xce80', u'fru_type': u'DIMM', u'Version': u'0x0000', u'present': u'True', u'version': u'', u'Model Number': u'M393B2G70DB0-YK0  ', u'Name': u'0x0b', u'Custom Field 8': u'', u'Serial Number': u'0x317da404', u'Custom Field 6': u'', u'fault': u'False', u'is_fru': 1, u'Custom Field 1': u'', u'Custom Field 2': u'', u'Custom Field 3': u'', u'Custom Field 4': u'', u'Custom Field 5': u'', u'Asset Tag': u'', u'Custom Field 7': u''}
/org/openbmc/inventory/system/chassis/motherboard/dimm25: {u'FRU File ID': u'', u'Manufacturer': u'0xce80', u'fru_type': u'DIMM', u'Version': u'0x0000', u'present': u'True', u'version': u'', u'Model Number': u'M393B2G70DB0-YK0  ', u'Name': u'0x0b', u'Custom Field 8': u'', u'Serial Number': u'0x317d9f93', u'Custom Field 6': u'', u'fault': u'False', u'is_fru': 1, u'Custom Field 1': u'', u'Custom Field 2': u'', u'Custom Field 3': u'', u'Custom Field 4': u'', u'Custom Field 5': u'', u'Asset Tag': u'', u'Custom Field 7': u''}
/org/openbmc/inventory/system/chassis/motherboard/dimm26: {u'present': u'False', u'fru_type': u'DIMM', u'version': u'', u'is_fru': 1, u'fault': u'False'}
/org/openbmc/inventory/system/chassis/motherboard/dimm27: {u'present': u'False', u'fru_type': u'DIMM', u'version': u'', u'is_fru': 1, u'fault': u'False'}
/org/openbmc/inventory/system/chassis/motherboard/dimm28: {u'FRU File ID': u'', u'Manufacturer': u'0xce80', u'fru_type': u'DIMM', u'Version': u'0x0000', u'present': u'True', u'version': u'', u'Model Number': u'M393B2G70DB0-YK0  ', u'Name': u'0x0b', u'Custom Field 8': u'', u'Serial Number': u'0x317d9f27', u'Custom Field 6': u'', u'fault': u'False', u'is_fru': 1, u'Custom Field 1': u'', u'Custom Field 2': u'', u'Custom Field 3': u'', u'Custom Field 4': u'', u'Custom Field 5': u'', u'Asset Tag': u'', u'Custom Field 7': u''}
/org/openbmc/inventory/system/chassis/motherboard/dimm29: {u'FRU File ID': u'', u'Manufacturer': u'0xce80', u'fru_type': u'DIMM', u'Version': u'0x0000', u'present': u'True', u'version': u'', u'Model Number': u'M393B2G70DB0-YK0  ', u'Name': u'0x0b', u'Custom Field 8': u'', u'Serial Number': u'0x317d9f2c', u'Custom Field 6': u'', u'fault': u'False', u'is_fru': 1, u'Custom Field 1': u'', u'Custom Field 2': u'', u'Custom Field 3': u'', u'Custom Field 4': u'', u'Custom Field 5': u'', u'Asset Tag': u'', u'Custom Field 7': u''}
/org/openbmc/inventory/system/chassis/motherboard/dimm3: {u'present': u'False', u'fru_type': u'DIMM', u'version': u'', u'is_fru': 1, u'fault': u'False'}
/org/openbmc/inventory/system/chassis/motherboard/dimm3/event: {u'endpoints': [u'/org/openbmc/records/events/41']}
/org/openbmc/inventory/system/chassis/motherboard/dimm30: {u'present': u'False', u'fru_type': u'DIMM', u'version': u'', u'is_fru': 1, u'fault': u'False'}
/org/openbmc/inventory/system/chassis/motherboard/dimm31: {u'present': u'False', u'fru_type': u'DIMM', u'version': u'', u'is_fru': 1, u'fault': u'False'}
/org/openbmc/inventory/system/chassis/motherboard/dimm4: {u'FRU File ID': u'', u'Manufacturer': u'0xce80', u'fru_type': u'DIMM', u'Version': u'0x0000', u'present': u'True', u'version': u'', u'Model Number': u'M393B2G70DB0-YK0  ', u'Name': u'0x0b', u'Custom Field 8': u'', u'Serial Number': u'0x317d9f2b', u'Custom Field 6': u'', u'fault': u'False', u'is_fru': 1, u'Custom Field 1': u'', u'Custom Field 2': u'', u'Custom Field 3': u'', u'Custom Field 4': u'', u'Custom Field 5': u'', u'Asset Tag': u'', u'Custom Field 7': u''}
/org/openbmc/inventory/system/chassis/motherboard/dimm5: {u'FRU File ID': u'', u'Manufacturer': u'0xce80', u'fru_type': u'DIMM', u'Version': u'0x0000', u'present': u'True', u'version': u'', u'Model Number': u'M393B2G70DB0-YK0  ', u'Name': u'0x0b', u'Custom Field 8': u'', u'Serial Number': u'0x317d9f53', u'Custom Field 6': u'', u'fault': u'False', u'is_fru': 1, u'Custom Field 1': u'', u'Custom Field 2': u'', u'Custom Field 3': u'', u'Custom Field 4': u'', u'Custom Field 5': u'', u'Asset Tag': u'', u'Custom Field 7': u''}
/org/openbmc/inventory/system/chassis/motherboard/dimm6: {u'present': u'False', u'fru_type': u'DIMM', u'version': u'', u'is_fru': 1, u'fault': u'False'}
/org/openbmc/inventory/system/chassis/motherboard/dimm7: {u'present': u'False', u'fru_type': u'DIMM', u'version': u'', u'is_fru': 1, u'fault': u'False'}
/org/openbmc/inventory/system/chassis/motherboard/dimm8: {u'FRU File ID': u'', u'Manufacturer': u'0xce80', u'fru_type': u'DIMM', u'Version': u'0x0000', u'present': u'True', u'version': u'', u'Model Number': u'M393B2G70DB0-YK0  ', u'Name': u'0x0b', u'Custom Field 8': u'', u'Serial Number': u'0x317d9f94', u'Custom Field 6': u'', u'fault': u'True', u'is_fru': 1, u'Custom Field 1': u'', u'Custom Field 2': u'', u'Custom Field 3': u'', u'Custom Field 4': u'', u'Custom Field 5': u'', u'Asset Tag': u'', u'Custom Field 7': u''}
/org/openbmc/inventory/system/chassis/motherboard/dimm9: {u'FRU File ID': u'', u'Manufacturer': u'0xce80', u'fru_type': u'DIMM', u'Version': u'0x0000', u'present': u'True', u'version': u'', u'Model Number': u'M393B2G70DB0-YK0  ', u'Name': u'0x0b', u'Custom Field 8': u'', u'Serial Number': u'0x317d9f56', u'Custom Field 6': u'', u'fault': u'True', u'is_fru': 1, u'Custom Field 1': u'', u'Custom Field 2': u'', u'Custom Field 3': u'', u'Custom Field 4': u'', u'Custom Field 5': u'', u'Asset Tag': u'', u'Custom Field 7': u''}
/org/openbmc/inventory/system/chassis/motherboard/membuf0: {u'FRU File ID': u'', u'Manufacturer': u'INGRASYS', u'fru_type': u'MEMORY_BUFFER', u'version': u'', u'present': u'False', u'Name': u'BARRELEYE', u'Custom Field 8': u'', u'Serial Number': u'64Q0004X02', u'Part Number': u'1A4218800-600-G', u'fault': u'False', u'is_fru': 0, u'Custom Field 1': u'', u'Custom Field 2': u'', u'Custom Field 3': u'', u'Custom Field 4': u'', u'Custom Field 5': u'', u'Custom Field 6': u'', u'Custom Field 7': u''}
/org/openbmc/inventory/system/chassis/motherboard/membuf1: {u'FRU File ID': u'', u'Manufacturer': u'INGRASYS', u'fru_type': u'MEMORY_BUFFER', u'version': u'', u'present': u'True', u'Name': u'BARRELEYE', u'Custom Field 8': u'', u'Serial Number': u'64Q0004X02', u'Part Number': u'1A4218800-600-G', u'fault': u'False', u'is_fru': 0, u'Custom Field 1': u'', u'Custom Field 2': u'', u'Custom Field 3': u'', u'Custom Field 4': u'', u'Custom Field 5': u'', u'Custom Field 6': u'', u'Custom Field 7': u''}
/org/openbmc/inventory/system/chassis/motherboard/membuf2: {u'FRU File ID': u'', u'Manufacturer': u'INGRASYS', u'fru_type': u'MEMORY_BUFFER', u'version': u'', u'present': u'True', u'Name': u'BARRELEYE', u'Custom Field 8': u'', u'Serial Number': u'64Q0004X02', u'Part Number': u'1A4218800-600-G', u'fault': u'True', u'is_fru': 0, u'Custom Field 1': u'', u'Custom Field 2': u'', u'Custom Field 3': u'', u'Custom Field 4': u'', u'Custom Field 5': u'', u'Custom Field 6': u'', u'Custom Field 7': u''}
/org/openbmc/inventory/system/chassis/motherboard/membuf3: {u'FRU File ID': u'', u'Manufacturer': u'INGRASYS', u'fru_type': u'MEMORY_BUFFER', u'version': u'', u'present': u'True', u'Name': u'BARRELEYE', u'Custom Field 8': u'', u'Serial Number': u'64Q0004X02', u'Part Number': u'1A4218800-600-G', u'fault': u'True', u'is_fru': 0, u'Custom Field 1': u'', u'Custom Field 2': u'', u'Custom Field 3': u'', u'Custom Field 4': u'', u'Custom Field 5': u'', u'Custom Field 6': u'', u'Custom Field 7': u''}
/org/openbmc/inventory/system/chassis/motherboard/membuf4: {u'FRU File ID': u'', u'Manufacturer': u'INGRASYS', u'fru_type': u'MEMORY_BUFFER', u'version': u'', u'present': u'True', u'Name': u'BARRELEYE', u'Custom Field 8': u'', u'Serial Number': u'64Q0004X02', u'Part Number': u'1A4218800-600-G', u'fault': u'False', u'is_fru': 0, u'Custom Field 1': u'', u'Custom Field 2': u'', u'Custom Field 3': u'', u'Custom Field 4': u'', u'Custom Field 5': u'', u'Custom Field 6': u'', u'Custom Field 7': u''}
/org/openbmc/inventory/system/chassis/motherboard/membuf5: {u'FRU File ID': u'', u'Manufacturer': u'INGRASYS', u'fru_type': u'MEMORY_BUFFER', u'version': u'', u'present': u'True', u'Name': u'BARRELEYE', u'Custom Field 8': u'', u'Serial Number': u'64Q0004X02', u'Part Number': u'1A4218800-600-G', u'fault': u'False', u'is_fru': 0, u'Custom Field 1': u'', u'Custom Field 2': u'', u'Custom Field 3': u'', u'Custom Field 4': u'', u'Custom Field 5': u'', u'Custom Field 6': u'', u'Custom Field 7': u''}
/org/openbmc/inventory/system/chassis/motherboard/membuf6: {u'FRU File ID': u'', u'Manufacturer': u'INGRASYS', u'fru_type': u'MEMORY_BUFFER', u'version': u'', u'present': u'True', u'Name': u'BARRELEYE', u'Custom Field 8': u'', u'Serial Number': u'64Q0004X02', u'Part Number': u'1A4218800-600-G', u'fault': u'False', u'is_fru': 0, u'Custom Field 1': u'', u'Custom Field 2': u'', u'Custom Field 3': u'', u'Custom Field 4': u'', u'Custom Field 5': u'', u'Custom Field 6': u'', u'Custom Field 7': u''}
/org/openbmc/inventory/system/chassis/motherboard/membuf7: {u'FRU File ID': u'', u'Manufacturer': u'INGRASYS', u'fru_type': u'MEMORY_BUFFER', u'version': u'', u'present': u'True', u'Name': u'BARRELEYE', u'Custom Field 8': u'', u'Serial Number': u'64Q0004X02', u'Part Number': u'1A4218800-600-G', u'fault': u'False', u'is_fru': 0, u'Custom Field 1': u'', u'Custom Field 2': u'', u'Custom Field 3': u'', u'Custom Field 4': u'', u'Custom Field 5': u'', u'Custom Field 6': u'', u'Custom Field 7': u''}
/org/openbmc/inventory/system/chassis/motherboard/pcieclock: {u'present': u'False', u'fru_type': u'MAIN_PLANAR', u'version': u'', u'is_fru': 0, u'fault': u'False'}
/org/openbmc/inventory/system/chassis/motherboard/refclock: {u'present': u'False', u'fru_type': u'MAIN_PLANAR', u'version': u'', u'is_fru': 0, u'fault': u'False'}
/org/openbmc/inventory/system/chassis/motherboard/todclock: {u'present': u'False', u'fru_type': u'MAIN_PLANAR', u'version': u'', u'is_fru': 0, u'fault': u'False'}
/org/openbmc/inventory/system/chassis/sas_expander: {u'FRU File ID': u'FRU Ver 0.01', u'Manufacturer': u'FOXCONN', u'fru_type': u'DAUGHTER_CARD', u'version': u'', u'present': u'True', u'Name': u'BARRELEYE PEB', u'Custom Field 8': u'', u'Serial Number': u'1A421AR00-600-G64J0002X02', u'Part Number': u'10034HV00-600-G', u'fault': u'False', u'is_fru': 1, u'Custom Field 1': u'Rackspace US, Inc.', u'Custom Field 2': u'', u'Custom Field 3': u'', u'Custom Field 4': u'', u'Custom Field 5': u'', u'Custom Field 6': u'', u'Custom Field 7': u''}
/org/openbmc/inventory/system/misc: {u'FRU File ID': u'', u'Manufacturer': u'INGRASYS', u'fru_type': u'SYSTEM', u'version': u'', u'present': u'True', u'Name': u'BARRELEYE', u'Custom Field 8': u'', u'Serial Number': u'64Q0004X02', u'Part Number': u'1A4218800-600-G', u'fault': u'True', u'is_fru': 0, u'Custom Field 1': u'', u'Custom Field 2': u'', u'Custom Field 3': u'', u'Custom Field 4': u'', u'Custom Field 5': u'', u'Custom Field 6': u'', u'Custom Field 7': u''}
/org/openbmc/inventory/system/systemevent: {u'present': u'False', u'fru_type': u'SYSTEM_EVENT', u'version': u'', u'is_fru': 0, u'fault': u'False'}</msg>
<status starttime="20161215 19:52:37.533" status="PASS" endtime="20161215 19:52:37.534"></status>
</kw>
<kw library="Collections" name="Get Dictionary Keys">
<doc>Returns keys of the given ``dictionary``.</doc>
<arguments>
<arg>${resp}</arg>
</arguments>
<assign>
<var>${list}</var>
</assign>
<msg level="INFO" timestamp="20161215 19:52:37.535">${list} = [u'/org/openbmc/inventory/system', u'/org/openbmc/inventory/system/bios', u'/org/openbmc/inventory/system/chassis', u'/org/openbmc/inventory/system/chassis/fan0', u'/org/openbmc/inventory/system/chass...</msg>
<status starttime="20161215 19:52:37.534" status="PASS" endtime="20161215 19:52:37.535"></status>
</kw>
<kw library="Collections" name="Get Matches">
<doc>Returns a list of matches to ``pattern`` in ``list``.</doc>
<arguments>
<arg>${list}</arg>
<arg>regexp=^.*[0-9a-z_].${endpoint}[0-9]*$</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161215 19:52:37.536">${resp} = [u'/org/openbmc/inventory/system/chassis/motherboard/cpu0', u'/org/openbmc/inventory/system/chassis/motherboard/cpu1']</msg>
<status starttime="20161215 19:52:37.535" status="PASS" endtime="20161215 19:52:37.536"></status>
</kw>
<msg level="INFO" timestamp="20161215 19:52:37.536">${url_list} = [u'/org/openbmc/inventory/system/chassis/motherboard/cpu0', u'/org/openbmc/inventory/system/chassis/motherboard/cpu1']</msg>
<status starttime="20161215 19:52:32.723" status="PASS" endtime="20161215 19:52:37.537"></status>
</kw>
<kw library="Collections" name="Get From List">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${url_list}</arg>
<arg>0</arg>
</arguments>
<assign>
<var>${url}</var>
</assign>
<msg level="INFO" timestamp="20161215 19:52:37.537">${url} = /org/openbmc/inventory/system/chassis/motherboard/cpu0</msg>
<status starttime="20161215 19:52:37.537" status="PASS" endtime="20161215 19:52:37.537"></status>
</kw>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${url}</arg>
<arg>is_fru</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161215 19:52:37.539">${base_uri} = /org/openbmc/inventory/system/chassis/motherboard/cpu0/attr/is_fru</msg>
<status starttime="20161215 19:52:37.538" status="PASS" endtime="20161215 19:52:37.539"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161215 19:52:37.543">${msg} = URI:https://9.3.23.30:443/org/openbmc/inventory/system/chassis/motherboard/cpu0/attr/is_fru, method:Get, args:{}</msg>
<status starttime="20161215 19:52:37.542" status="PASS" endtime="20161215 19:52:37.543"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161215 19:52:37.544">URI:https://9.3.23.30:443/org/openbmc/inventory/system/chassis/motherboard/cpu0/attr/is_fru, method:Get, args:{}</msg>
<status starttime="20161215 19:52:37.544" status="PASS" endtime="20161215 19:52:37.544"></status>
</kw>
<status starttime="20161215 19:52:37.543" status="PASS" endtime="20161215 19:52:37.544"></status>
</kw>
<status starttime="20161215 19:52:37.542" status="PASS" endtime="20161215 19:52:37.544"></status>
</kw>
<status starttime="20161215 19:52:37.539" status="PASS" endtime="20161215 19:52:37.544"></status>
</kw>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161215 19:52:37.545">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20161215 19:52:37.545" status="PASS" endtime="20161215 19:52:37.545"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161215 19:52:37.546">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20161215 19:52:37.546" status="PASS" endtime="20161215 19:52:37.546"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161215 19:52:37.546">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20161215 19:52:37.546" status="PASS" endtime="20161215 19:52:37.546"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161215 19:52:37.547">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20161215 19:52:37.547" status="PASS" endtime="20161215 19:52:37.547"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161215 19:52:38.149">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161215 19:52:38.149">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161215 19:52:37.547" status="PASS" endtime="20161215 19:52:38.149"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161215 19:52:38.150">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20161215 19:52:38.150" status="PASS" endtime="20161215 19:52:38.150"></status>
</kw>
<status starttime="20161215 19:52:37.544" status="PASS" endtime="20161215 19:52:38.150"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161215 19:52:38.252">Get Request using : alias=openbmc, uri=/org/openbmc/inventory/system/chassis/motherboard/cpu0/attr/is_fru, headers=None </msg>
<msg level="INFO" timestamp="20161215 19:52:38.253">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20161215 19:52:38.151" status="PASS" endtime="20161215 19:52:38.253"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161215 19:52:38.259">${msg} = Response code:200, Content:{
  "data": 1, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161215 19:52:38.259" status="PASS" endtime="20161215 19:52:38.259"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161215 19:52:38.260">Response code:200, Content:{
  "data": 1, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20161215 19:52:38.260" status="PASS" endtime="20161215 19:52:38.260"></status>
</kw>
<status starttime="20161215 19:52:38.259" status="PASS" endtime="20161215 19:52:38.260"></status>
</kw>
<status starttime="20161215 19:52:38.258" status="PASS" endtime="20161215 19:52:38.261"></status>
</kw>
<status starttime="20161215 19:52:38.253" status="PASS" endtime="20161215 19:52:38.261"></status>
</kw>
<msg level="INFO" timestamp="20161215 19:52:38.261">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20161215 19:52:37.538" status="PASS" endtime="20161215 19:52:38.261"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161215 19:52:38.261">To JSON using : content={
  "data": 1, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161215 19:52:38.261">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161215 19:52:38.262">${content} = {u'data': 1, u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20161215 19:52:38.261" status="PASS" endtime="20161215 19:52:38.262"></status>
</kw>
<msg level="INFO" timestamp="20161215 19:52:38.262">${resp} = 1</msg>
<status starttime="20161215 19:52:37.537" status="PASS" endtime="20161215 19:52:38.262"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${resp}</arg>
<arg>${1}</arg>
</arguments>
<status starttime="20161215 19:52:38.262" status="PASS" endtime="20161215 19:52:38.262"></status>
</kw>
<kw library="openbmc_ffdc" type="teardown" name="FFDC On Test Case Fail">
<doc>Generic FFDC entry point. Place holder to hook in</doc>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${TEST_STATUS}' == 'FAIL'</arg>
<arg>FFDC</arg>
</arguments>
<status starttime="20161215 19:52:38.263" status="PASS" endtime="20161215 19:52:38.267"></status>
</kw>
<kw library="openbmc_ffdc_methods" name="Log Test Case Status">
<doc>Test case execution result history.</doc>
<kw library="OperatingSystem" name="Create Directory">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>${FFDC_LOG_PATH}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20161215 19:52:38.268">Directory '&lt;a href="file:///tmp/root/17453/obmc-robot/logs"&gt;/tmp/root/17453/obmc-robot/logs&lt;/a&gt;' already exists.</msg>
<status starttime="20161215 19:52:38.267" status="PASS" endtime="20161215 19:52:38.268"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>OperatingSystem.File Should Exist</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<assign>
<var>${exist}</var>
</assign>
<kw library="OperatingSystem" name="File Should Exist">
<doc>Fails unless the given ``path`` points to an existing file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20161215 19:52:38.269">File '&lt;a href="file:///tmp/root/17453/obmc-robot/logs/test_history.txt"&gt;/tmp/root/17453/obmc-robot/logs/test_history.txt&lt;/a&gt;' exists.</msg>
<status starttime="20161215 19:52:38.268" status="PASS" endtime="20161215 19:52:38.269"></status>
</kw>
<msg level="INFO" timestamp="20161215 19:52:38.269">${exist} = True</msg>
<status starttime="20161215 19:52:38.268" status="PASS" endtime="20161215 19:52:38.269"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${exist}' == '${False}'</arg>
<arg>Create File</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<status starttime="20161215 19:52:38.269" status="PASS" endtime="20161215 19:52:38.272"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Get Current Time Stamp">
<doc>Get the current time stamp data</doc>
<assign>
<var>${cur_time}</var>
</assign>
<kw library="DateTime" name="Get Current Date">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20161215 19:52:38.273">${cur_time} = 2016-12-15 19:52:38:272396</msg>
<status starttime="20161215 19:52:38.272" status="PASS" endtime="20161215 19:52:38.273"></status>
</kw>
<kw library="openbmc_ffdc_list" name="Get Strip String">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20161215 19:52:38.273">${cur_time} = 20161215195238272396</msg>
<status starttime="20161215 19:52:38.273" status="PASS" endtime="20161215 19:52:38.273"></status>
</kw>
<msg level="INFO" timestamp="20161215 19:52:38.273">${cur_time} = 20161215195238272396</msg>
<status starttime="20161215 19:52:38.272" status="PASS" endtime="20161215 19:52:38.273"></status>
</kw>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
<arg>${cur_time}:${SUITE_NAME}:${TEST_NAME}:${TEST_STATUS}${\n}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20161215 19:52:38.274">Appended to file '&lt;a href="file:///tmp/root/17453/obmc-robot/logs/test_history.txt"&gt;/tmp/root/17453/obmc-robot/logs/test_history.txt&lt;/a&gt;'.</msg>
<status starttime="20161215 19:52:38.273" status="PASS" endtime="20161215 19:52:38.274"></status>
</kw>
<status starttime="20161215 19:52:38.267" status="PASS" endtime="20161215 19:52:38.274"></status>
</kw>
<status starttime="20161215 19:52:38.263" status="PASS" endtime="20161215 19:52:38.274"></status>
</kw>
<tags>
<tag>Get_a_Property</tag>
</tags>
<status critical="yes" starttime="20161215 19:52:32.722" status="PASS" endtime="20161215 19:52:38.274"></status>
</test>
<doc>This suite will verifiy all OpenBMC rest interfaces
Details of valid interfaces can be found here...
https://github.com/openbmc/docs/blob/master/rest-api.md</doc>
<status starttime="20161215 19:52:32.699" status="PASS" endtime="20161215 19:52:38.275"></status>
</suite>
<status starttime="20161215 19:51:15.616" status="FAIL" endtime="20161215 19:52:38.279"></status>
</suite>
<statistics>
<total>
<stat fail="1" pass="6">Critical Tests</stat>
<stat fail="1" pass="6">All Tests</stat>
</total>
<tag>
<stat fail="1" pass="0">chassisboot</stat>
<stat fail="0" pass="2">CI</stat>
<stat fail="0" pass="1">clear_any_logs</stat>
<stat fail="0" pass="1">Create_error_log_on_single_FRU</stat>
<stat fail="0" pass="1">Delete_error_log</stat>
<stat fail="0" pass="1">Get_a_Property</stat>
<stat fail="1" pass="0">power_on_test</stat>
<stat fail="0" pass="1">Test_SSL_Connection</stat>
<stat fail="0" pass="1">write_a_log</stat>
</tag>
<suite>
<stat fail="1" pass="6" id="s1" name="Tests">Tests</stat>
<stat fail="0" pass="1" id="s1-s1" name="Security">Tests.Security</stat>
<stat fail="0" pass="1" id="s1-s1-s1" name="Test Ssl">Tests.Security.Test Ssl</stat>
<stat fail="0" pass="2" id="s1-s2" name="Test Association">Tests.Test Association</stat>
<stat fail="1" pass="0" id="s1-s3" name="Test Basic Poweron">Tests.Test Basic Poweron</stat>
<stat fail="0" pass="2" id="s1-s4" name="Test Eventlog">Tests.Test Eventlog</stat>
<stat fail="0" pass="1" id="s1-s5" name="Test Obmcrest">Tests.Test Obmcrest</stat>
</suite>
</statistics>
<errors>
</errors>
</robot>
