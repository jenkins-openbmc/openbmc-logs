<?xml version="1.0" encoding="UTF-8"?>
<robot generated="20170707 08:03:26.515" generator="Robot 3.0.2 (Python 2.7.12 on linux2)">
<suite source="/tmp/fspcibld/21345/obmc-robot/tests" name="Tests" id="s1">
<kw type="setup" name="System Driver Data">
<doc>System driver information.</doc>
<kw library="connection_client" name="Open Connection And Log In">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw library="Collections" name="Dictionary Should Contain Key">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg level="FAIL" timestamp="20170707 08:03:26.927">Dictionary does not contain key 'host'.</msg>
<status starttime="20170707 08:03:26.926" status="FAIL" endtime="20170707 08:03:26.927"></status>
</kw>
<msg level="INFO" timestamp="20170707 08:03:26.927">${has_host} = False</msg>
<status starttime="20170707 08:03:26.926" status="PASS" endtime="20170707 08:03:26.927"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status starttime="20170707 08:03:26.928" status="PASS" endtime="20170707 08:03:26.928"></status>
</kw>
<status starttime="20170707 08:03:26.927" status="PASS" endtime="20170707 08:03:26.928"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<kw library="connection_client" name="User input SSH and HTTPs Ports">
<doc>Update the global SSH and HTTPs port variable for QEMU</doc>
<kw library="BuiltIn" name="Convert To Integer">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${SSH_PORT}</arg>
</arguments>
<assign>
<var>${port_num}</var>
</assign>
<msg level="INFO" timestamp="20170707 08:03:26.930">${port_num} = 22</msg>
<status starttime="20170707 08:03:26.929" status="PASS" endtime="20170707 08:03:26.930"></status>
</kw>
<kw library="BuiltIn" name="Replace Variables">
<doc>Replaces variables in the given text with their current values.</doc>
<arguments>
<arg>${port_num}</arg>
</arguments>
<assign>
<var>${SSH_PORT}</var>
</assign>
<msg level="INFO" timestamp="20170707 08:03:26.930">${SSH_PORT} = 22</msg>
<status starttime="20170707 08:03:26.930" status="PASS" endtime="20170707 08:03:26.930"></status>
</kw>
<kw library="BuiltIn" name="Convert To Integer">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${HTTPS_PORT}</arg>
</arguments>
<assign>
<var>${https_num}</var>
</assign>
<msg level="INFO" timestamp="20170707 08:03:26.931">${https_num} = 443</msg>
<status starttime="20170707 08:03:26.930" status="PASS" endtime="20170707 08:03:26.931"></status>
</kw>
<kw library="BuiltIn" name="Set Global Variable">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${AUTH_URI}</arg>
<arg>https://${OPENBMC_HOST}:${https_num}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 08:03:26.931">${AUTH_URI} = https://9.3.21.61:443</msg>
<status starttime="20170707 08:03:26.931" status="PASS" endtime="20170707 08:03:26.931"></status>
</kw>
<status starttime="20170707 08:03:26.929" status="PASS" endtime="20170707 08:03:26.932"></status>
</kw>
<status starttime="20170707 08:03:26.928" status="PASS" endtime="20170707 08:03:26.932"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw library="Collections" name="Dictionary Should Contain Key">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg level="FAIL" timestamp="20170707 08:03:26.933">Dictionary does not contain key 'port'.</msg>
<status starttime="20170707 08:03:26.932" status="FAIL" endtime="20170707 08:03:26.933"></status>
</kw>
<msg level="INFO" timestamp="20170707 08:03:26.933">${has_port} = False</msg>
<status starttime="20170707 08:03:26.932" status="PASS" endtime="20170707 08:03:26.933"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keywords">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
</arguments>
<status starttime="20170707 08:03:26.934" status="PASS" endtime="20170707 08:03:26.934"></status>
</kw>
<kw library="SSHLibrary" name="Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status starttime="20170707 08:03:26.935" status="PASS" endtime="20170707 08:03:26.935"></status>
</kw>
<status starttime="20170707 08:03:26.934" status="PASS" endtime="20170707 08:03:26.935"></status>
</kw>
<status starttime="20170707 08:03:26.933" status="PASS" endtime="20170707 08:03:26.935"></status>
</kw>
<kw library="SSHLibrary" name="Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 08:03:26.936">Logging into '9.3.21.61:22' as 'root'.</msg>
<msg level="INFO" timestamp="20170707 08:03:28.710">Read output: root@witherspoon:~#</msg>
<status starttime="20170707 08:03:26.935" status="PASS" endtime="20170707 08:03:28.710"></status>
</kw>
<status starttime="20170707 08:03:26.925" status="PASS" endtime="20170707 08:03:28.711"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Log BMC Driver Details</arg>
</arguments>
<kw name="Log BMC Driver Details">
<doc>Get BMC driver details and log.</doc>
<kw library="SSHLibrary" name="Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${DRIVER_CMD}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${output}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170707 08:03:28.712">Executing command 'cat /etc/os-release | grep ^VERSION_ID='.</msg>
<msg level="INFO" timestamp="20170707 08:03:28.789">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20170707 08:03:28.789">${output} = VERSION_ID="v1.99.7-87-gdfb1c5b"</msg>
<msg level="INFO" timestamp="20170707 08:03:28.789">${stderr} = </msg>
<status starttime="20170707 08:03:28.712" status="PASS" endtime="20170707 08:03:28.789"></status>
</kw>
<kw library="BuiltIn" name="Should Be Empty">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 08:03:28.790">Length is 0</msg>
<status starttime="20170707 08:03:28.790" status="PASS" endtime="20170707 08:03:28.790"></status>
</kw>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 08:03:28.790">VERSION_ID="v1.99.7-87-gdfb1c5b"</msg>
<status starttime="20170707 08:03:28.790" status="PASS" endtime="20170707 08:03:28.790"></status>
</kw>
<status starttime="20170707 08:03:28.711" status="PASS" endtime="20170707 08:03:28.790"></status>
</kw>
<status starttime="20170707 08:03:28.711" status="PASS" endtime="20170707 08:03:28.791"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Log PNOR Driver Details</arg>
</arguments>
<kw name="Log PNOR Driver Details">
<doc>Get PNOR driver details and log.</doc>
<kw library="utils" name="Execute Command On BMC">
<doc>Execute given command on BMC and return output.</doc>
<arguments>
<arg>${PNOR_CMD}</arg>
</arguments>
<assign>
<var>${pnor_details}</var>
</assign>
<kw library="SSHLibrary" name="Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${command}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170707 08:03:28.792">Executing command '/usr/sbin/pflash -r /tmp/out.txt -P VERSION; cat /tmp/out.txt'.</msg>
<msg level="INFO" timestamp="20170707 08:03:28.929">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20170707 08:03:28.929">${stdout} = Reading to "/tmp/out.txt" from 0x02820000..0x02821000 !
[                                                  ] 0%[==================================================] 100%
IBM-witherspoon-ibm-OP9_v1.17...</msg>
<msg level="INFO" timestamp="20170707 08:03:28.929">${stderr} = </msg>
<status starttime="20170707 08:03:28.792" status="PASS" endtime="20170707 08:03:28.929"></status>
</kw>
<kw library="BuiltIn" name="Should Be Empty">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 08:03:28.930">Length is 0</msg>
<status starttime="20170707 08:03:28.929" status="PASS" endtime="20170707 08:03:28.930"></status>
</kw>
<msg level="INFO" timestamp="20170707 08:03:28.930">${pnor_details} = Reading to "/tmp/out.txt" from 0x02820000..0x02821000 !
[                                                  ] 0%[==================================================] 100%
IBM-witherspoon-ibm-OP9_v1.17...</msg>
<status starttime="20170707 08:03:28.791" status="PASS" endtime="20170707 08:03:28.930"></status>
</kw>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>PNOR_INFO=${pnor_details}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 08:03:28.930">PNOR_INFO=Reading to "/tmp/out.txt" from 0x02820000..0x02821000 !
[                                                  ] 0%[==================================================] 100%
IBM-witherspoon-ibm-OP9_v1.17_1.46
	op-build-v1.17-101-g1c57f18-dirty
	buildroot-2017.02.2-7-g23118ce
	skiboot-5.6.0-158-ga1e0a047b2a0
	hostboot-0ffbb55
	linux-4.11.6-openpower1-p57dd16e
	petitboot-v1.4.3-pfac92ff
	machine-xml-5b59a1d
	occ-1dc97a6
	hostboot-binaries-711147e
	capp-ucode-9c73e9f
	sbe-0df81aa
</msg>
<status starttime="20170707 08:03:28.930" status="PASS" endtime="20170707 08:03:28.931"></status>
</kw>
<status starttime="20170707 08:03:28.791" status="PASS" endtime="20170707 08:03:28.932"></status>
</kw>
<status starttime="20170707 08:03:28.791" status="PASS" endtime="20170707 08:03:28.932"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Log BMC Model</arg>
</arguments>
<kw name="Log BMC Model">
<doc>Fetch BMC Model name from system and log.</doc>
<kw library="utils" name="Get BMC System Model">
<doc>Get the BMC model from the device tree.</doc>
<assign>
<var>${bmc_model}</var>
</assign>
<kw library="connection_client" name="Open Connection And Log In">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw library="Collections" name="Dictionary Should Contain Key">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg level="FAIL" timestamp="20170707 08:03:28.934">Dictionary does not contain key 'host'.</msg>
<status starttime="20170707 08:03:28.934" status="FAIL" endtime="20170707 08:03:28.934"></status>
</kw>
<msg level="INFO" timestamp="20170707 08:03:28.934">${has_host} = False</msg>
<status starttime="20170707 08:03:28.933" status="PASS" endtime="20170707 08:03:28.934"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status starttime="20170707 08:03:28.935" status="PASS" endtime="20170707 08:03:28.935"></status>
</kw>
<status starttime="20170707 08:03:28.935" status="PASS" endtime="20170707 08:03:28.935"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<kw library="connection_client" name="User input SSH and HTTPs Ports">
<doc>Update the global SSH and HTTPs port variable for QEMU</doc>
<kw library="BuiltIn" name="Convert To Integer">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${SSH_PORT}</arg>
</arguments>
<assign>
<var>${port_num}</var>
</assign>
<msg level="INFO" timestamp="20170707 08:03:28.937">${port_num} = 22</msg>
<status starttime="20170707 08:03:28.936" status="PASS" endtime="20170707 08:03:28.937"></status>
</kw>
<kw library="BuiltIn" name="Replace Variables">
<doc>Replaces variables in the given text with their current values.</doc>
<arguments>
<arg>${port_num}</arg>
</arguments>
<assign>
<var>${SSH_PORT}</var>
</assign>
<msg level="INFO" timestamp="20170707 08:03:28.937">${SSH_PORT} = 22</msg>
<status starttime="20170707 08:03:28.937" status="PASS" endtime="20170707 08:03:28.937"></status>
</kw>
<kw library="BuiltIn" name="Convert To Integer">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${HTTPS_PORT}</arg>
</arguments>
<assign>
<var>${https_num}</var>
</assign>
<msg level="INFO" timestamp="20170707 08:03:28.938">${https_num} = 443</msg>
<status starttime="20170707 08:03:28.938" status="PASS" endtime="20170707 08:03:28.938"></status>
</kw>
<kw library="BuiltIn" name="Set Global Variable">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${AUTH_URI}</arg>
<arg>https://${OPENBMC_HOST}:${https_num}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 08:03:28.939">${AUTH_URI} = https://9.3.21.61:443</msg>
<status starttime="20170707 08:03:28.938" status="PASS" endtime="20170707 08:03:28.939"></status>
</kw>
<status starttime="20170707 08:03:28.936" status="PASS" endtime="20170707 08:03:28.939"></status>
</kw>
<status starttime="20170707 08:03:28.936" status="PASS" endtime="20170707 08:03:28.939"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw library="Collections" name="Dictionary Should Contain Key">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg level="FAIL" timestamp="20170707 08:03:28.940">Dictionary does not contain key 'port'.</msg>
<status starttime="20170707 08:03:28.940" status="FAIL" endtime="20170707 08:03:28.940"></status>
</kw>
<msg level="INFO" timestamp="20170707 08:03:28.940">${has_port} = False</msg>
<status starttime="20170707 08:03:28.939" status="PASS" endtime="20170707 08:03:28.940"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keywords">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
</arguments>
<status starttime="20170707 08:03:28.941" status="PASS" endtime="20170707 08:03:28.942"></status>
</kw>
<kw library="SSHLibrary" name="Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status starttime="20170707 08:03:28.942" status="PASS" endtime="20170707 08:03:28.942"></status>
</kw>
<status starttime="20170707 08:03:28.941" status="PASS" endtime="20170707 08:03:28.942"></status>
</kw>
<status starttime="20170707 08:03:28.940" status="PASS" endtime="20170707 08:03:28.942"></status>
</kw>
<kw library="SSHLibrary" name="Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 08:03:28.943">Logging into '9.3.21.61:22' as 'root'.</msg>
<msg level="INFO" timestamp="20170707 08:03:30.590">Read output: root@witherspoon:~#</msg>
<status starttime="20170707 08:03:28.943" status="PASS" endtime="20170707 08:03:30.590"></status>
</kw>
<status starttime="20170707 08:03:28.933" status="PASS" endtime="20170707 08:03:30.590"></status>
</kw>
<kw library="SSHLibrary" name="Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>cat ${devicetree_base} | cut -d " " -f 1</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${bmc_model}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170707 08:03:30.591">Executing command 'cat /sys/firmware/devicetree/base/model | cut -d " " -f 1'.</msg>
<msg level="INFO" timestamp="20170707 08:03:30.669">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20170707 08:03:30.669">${bmc_model} = Witherspoon</msg>
<msg level="INFO" timestamp="20170707 08:03:30.669">${stderr} = </msg>
<status starttime="20170707 08:03:30.590" status="PASS" endtime="20170707 08:03:30.669"></status>
</kw>
<kw library="BuiltIn" name="Should Be Empty">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 08:03:30.669">Length is 0</msg>
<status starttime="20170707 08:03:30.669" status="PASS" endtime="20170707 08:03:30.669"></status>
</kw>
<kw library="BuiltIn" name="Should Not Be Empty">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${bmc_model}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 08:03:30.670">Length is 11</msg>
<status starttime="20170707 08:03:30.670" status="PASS" endtime="20170707 08:03:30.670"></status>
</kw>
<msg level="INFO" timestamp="20170707 08:03:30.670">${bmc_model} = Witherspoon</msg>
<status starttime="20170707 08:03:28.932" status="PASS" endtime="20170707 08:03:30.670"></status>
</kw>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>BMC Model=${bmc_model}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 08:03:30.670">BMC Model=Witherspoon</msg>
<status starttime="20170707 08:03:30.670" status="PASS" endtime="20170707 08:03:30.671"></status>
</kw>
<status starttime="20170707 08:03:28.932" status="PASS" endtime="20170707 08:03:30.671"></status>
</kw>
<status starttime="20170707 08:03:28.932" status="PASS" endtime="20170707 08:03:30.671"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Enable Core Dump On BMC</arg>
</arguments>
<kw library="utils" name="Enable Core Dump On BMC">
<doc>Enable core dump collection.</doc>
<kw library="connection_client" name="Open Connection And Log In">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw library="Collections" name="Dictionary Should Contain Key">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg level="FAIL" timestamp="20170707 08:03:30.673">Dictionary does not contain key 'host'.</msg>
<status starttime="20170707 08:03:30.672" status="FAIL" endtime="20170707 08:03:30.673"></status>
</kw>
<msg level="INFO" timestamp="20170707 08:03:30.673">${has_host} = False</msg>
<status starttime="20170707 08:03:30.672" status="PASS" endtime="20170707 08:03:30.673"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status starttime="20170707 08:03:30.674" status="PASS" endtime="20170707 08:03:30.674"></status>
</kw>
<status starttime="20170707 08:03:30.673" status="PASS" endtime="20170707 08:03:30.674"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<kw library="connection_client" name="User input SSH and HTTPs Ports">
<doc>Update the global SSH and HTTPs port variable for QEMU</doc>
<kw library="BuiltIn" name="Convert To Integer">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${SSH_PORT}</arg>
</arguments>
<assign>
<var>${port_num}</var>
</assign>
<msg level="INFO" timestamp="20170707 08:03:30.676">${port_num} = 22</msg>
<status starttime="20170707 08:03:30.675" status="PASS" endtime="20170707 08:03:30.676"></status>
</kw>
<kw library="BuiltIn" name="Replace Variables">
<doc>Replaces variables in the given text with their current values.</doc>
<arguments>
<arg>${port_num}</arg>
</arguments>
<assign>
<var>${SSH_PORT}</var>
</assign>
<msg level="INFO" timestamp="20170707 08:03:30.676">${SSH_PORT} = 22</msg>
<status starttime="20170707 08:03:30.676" status="PASS" endtime="20170707 08:03:30.676"></status>
</kw>
<kw library="BuiltIn" name="Convert To Integer">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${HTTPS_PORT}</arg>
</arguments>
<assign>
<var>${https_num}</var>
</assign>
<msg level="INFO" timestamp="20170707 08:03:30.677">${https_num} = 443</msg>
<status starttime="20170707 08:03:30.677" status="PASS" endtime="20170707 08:03:30.677"></status>
</kw>
<kw library="BuiltIn" name="Set Global Variable">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${AUTH_URI}</arg>
<arg>https://${OPENBMC_HOST}:${https_num}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 08:03:30.678">${AUTH_URI} = https://9.3.21.61:443</msg>
<status starttime="20170707 08:03:30.677" status="PASS" endtime="20170707 08:03:30.678"></status>
</kw>
<status starttime="20170707 08:03:30.675" status="PASS" endtime="20170707 08:03:30.678"></status>
</kw>
<status starttime="20170707 08:03:30.674" status="PASS" endtime="20170707 08:03:30.678"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw library="Collections" name="Dictionary Should Contain Key">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg level="FAIL" timestamp="20170707 08:03:30.679">Dictionary does not contain key 'port'.</msg>
<status starttime="20170707 08:03:30.678" status="FAIL" endtime="20170707 08:03:30.679"></status>
</kw>
<msg level="INFO" timestamp="20170707 08:03:30.679">${has_port} = False</msg>
<status starttime="20170707 08:03:30.678" status="PASS" endtime="20170707 08:03:30.679"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keywords">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
</arguments>
<status starttime="20170707 08:03:30.680" status="PASS" endtime="20170707 08:03:30.680"></status>
</kw>
<kw library="SSHLibrary" name="Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status starttime="20170707 08:03:30.681" status="PASS" endtime="20170707 08:03:30.681"></status>
</kw>
<status starttime="20170707 08:03:30.680" status="PASS" endtime="20170707 08:03:30.681"></status>
</kw>
<status starttime="20170707 08:03:30.679" status="PASS" endtime="20170707 08:03:30.681"></status>
</kw>
<kw library="SSHLibrary" name="Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 08:03:30.682">Logging into '9.3.21.61:22' as 'root'.</msg>
<msg level="INFO" timestamp="20170707 08:03:32.491">Read output: root@witherspoon:~#</msg>
<status starttime="20170707 08:03:30.681" status="PASS" endtime="20170707 08:03:32.492"></status>
</kw>
<status starttime="20170707 08:03:30.672" status="PASS" endtime="20170707 08:03:32.492"></status>
</kw>
<kw library="utils" name="Execute Command On BMC">
<doc>Execute given command on BMC and return output.</doc>
<arguments>
<arg>echo '/tmp/core_%e.%p' | tee /proc/sys/kernel/core_pattern</arg>
</arguments>
<assign>
<var>${core_pattern}</var>
</assign>
<kw library="SSHLibrary" name="Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${command}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170707 08:03:32.493">Executing command 'echo '/tmp/core_%e.%p' | tee /proc/sys/kernel/core_pattern'.</msg>
<msg level="INFO" timestamp="20170707 08:03:32.580">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20170707 08:03:32.580">${stdout} = /tmp/core_%e.%p</msg>
<msg level="INFO" timestamp="20170707 08:03:32.580">${stderr} = </msg>
<status starttime="20170707 08:03:32.492" status="PASS" endtime="20170707 08:03:32.580"></status>
</kw>
<kw library="BuiltIn" name="Should Be Empty">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 08:03:32.580">Length is 0</msg>
<status starttime="20170707 08:03:32.580" status="PASS" endtime="20170707 08:03:32.580"></status>
</kw>
<msg level="INFO" timestamp="20170707 08:03:32.581">${core_pattern} = /tmp/core_%e.%p</msg>
<status starttime="20170707 08:03:32.492" status="PASS" endtime="20170707 08:03:32.581"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${core_pattern}</arg>
<arg>/tmp/core_%e.%p</arg>
</arguments>
<status starttime="20170707 08:03:32.581" status="PASS" endtime="20170707 08:03:32.581"></status>
</kw>
<status starttime="20170707 08:03:30.671" status="PASS" endtime="20170707 08:03:32.581"></status>
</kw>
<status starttime="20170707 08:03:30.671" status="PASS" endtime="20170707 08:03:32.581"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${DEBUG_TARBALL_PATH}' != '${EMPTY}'</arg>
<arg>Run Keyword And Ignore Error</arg>
<arg>Install Debug Tarball On BMC</arg>
<arg>${DEBUG_TARBALL_PATH}</arg>
</arguments>
<status starttime="20170707 08:03:32.581" status="PASS" endtime="20170707 08:03:32.582"></status>
</kw>
<status starttime="20170707 08:03:26.925" status="PASS" endtime="20170707 08:03:32.582"></status>
</kw>
<suite source="/tmp/fspcibld/21345/obmc-robot/tests/security" name="Security" id="s1-s1">
<suite source="/tmp/fspcibld/21345/obmc-robot/tests/security/test_ssl.robot" name="Test Ssl" id="s1-s1-s1">
<test name="Test SSL Connection" id="s1-s1-s1-t1">
<kw library="rest_client" name="Initialize OpenBMC">
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170707 08:03:32.840">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=20, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170707 08:03:32.840" status="PASS" endtime="20170707 08:03:32.841"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170707 08:03:32.841">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170707 08:03:32.841" status="PASS" endtime="20170707 08:03:32.841"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170707 08:03:32.842">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170707 08:03:32.842" status="PASS" endtime="20170707 08:03:32.842"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170707 08:03:32.843">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170707 08:03:32.842" status="PASS" endtime="20170707 08:03:32.843"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 08:03:33.093">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170707 08:03:32.843" status="PASS" endtime="20170707 08:03:33.093"></status>
</kw>
<msg level="INFO" timestamp="20170707 08:03:33.093">${status} = PASS</msg>
<msg level="INFO" timestamp="20170707 08:03:33.093">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170707 08:03:32.843" status="PASS" endtime="20170707 08:03:33.093"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 08:03:33.094">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170707 08:03:33.094" status="PASS" endtime="20170707 08:03:33.094"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 08:03:33.095">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170707 08:03:33.094" status="PASS" endtime="20170707 08:03:33.095"></status>
</kw>
<status starttime="20170707 08:03:32.839" status="PASS" endtime="20170707 08:03:33.095"></status>
</kw>
<status starttime="20170707 08:03:32.839" status="PASS" endtime="20170707 08:03:33.095"></status>
</kw>
<status starttime="20170707 08:03:32.838" status="PASS" endtime="20170707 08:03:33.095"></status>
</kw>
<kw library="openbmc_ffdc" type="teardown" name="FFDC On Test Case Fail">
<doc>Generic FFDC entry point. Place holder to hook in</doc>
<kw library="state_manager" name="Is Host Quiesced">
<doc>Check if host state is quiesced.</doc>
<assign>
<var>${status}</var>
</assign>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170707 08:03:33.100">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170707 08:03:33.099" status="PASS" endtime="20170707 08:03:33.100"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170707 08:03:33.101">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170707 08:03:33.101" status="PASS" endtime="20170707 08:03:33.101"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170707 08:03:33.102">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170707 08:03:33.102" status="PASS" endtime="20170707 08:03:33.102"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170707 08:03:33.103">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170707 08:03:33.102" status="PASS" endtime="20170707 08:03:33.103"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 08:03:33.368">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170707 08:03:33.103" status="PASS" endtime="20170707 08:03:33.368"></status>
</kw>
<msg level="INFO" timestamp="20170707 08:03:33.368">${status} = PASS</msg>
<msg level="INFO" timestamp="20170707 08:03:33.369">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170707 08:03:33.103" status="PASS" endtime="20170707 08:03:33.369"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 08:03:33.369">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170707 08:03:33.369" status="PASS" endtime="20170707 08:03:33.370"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 08:03:33.370">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170707 08:03:33.370" status="PASS" endtime="20170707 08:03:33.371"></status>
</kw>
<status starttime="20170707 08:03:33.099" status="PASS" endtime="20170707 08:03:33.371"></status>
</kw>
<status starttime="20170707 08:03:33.098" status="PASS" endtime="20170707 08:03:33.371"></status>
</kw>
<status starttime="20170707 08:03:33.098" status="PASS" endtime="20170707 08:03:33.371"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170707 08:03:33.372">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170707 08:03:33.371" status="PASS" endtime="20170707 08:03:33.372"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170707 08:03:33.375">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170707 08:03:33.374" status="PASS" endtime="20170707 08:03:33.375"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170707 08:03:33.377">URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170707 08:03:33.377" status="PASS" endtime="20170707 08:03:33.377"></status>
</kw>
<status starttime="20170707 08:03:33.375" status="PASS" endtime="20170707 08:03:33.377"></status>
</kw>
<status starttime="20170707 08:03:33.373" status="PASS" endtime="20170707 08:03:33.377"></status>
</kw>
<status starttime="20170707 08:03:33.372" status="PASS" endtime="20170707 08:03:33.377"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170707 08:03:33.461">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170707 08:03:33.461">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170707 08:03:33.378" status="PASS" endtime="20170707 08:03:33.462"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170707 08:03:33.463">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170707 08:03:33.463" status="PASS" endtime="20170707 08:03:33.463"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170707 08:03:33.465">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170707 08:03:33.464" status="PASS" endtime="20170707 08:03:33.465"></status>
</kw>
<status starttime="20170707 08:03:33.464" status="PASS" endtime="20170707 08:03:33.465"></status>
</kw>
<status starttime="20170707 08:03:33.462" status="PASS" endtime="20170707 08:03:33.465"></status>
</kw>
<status starttime="20170707 08:03:33.462" status="PASS" endtime="20170707 08:03:33.465"></status>
</kw>
<msg level="INFO" timestamp="20170707 08:03:33.465">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170707 08:03:33.097" status="PASS" endtime="20170707 08:03:33.465"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 08:03:33.466">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170707 08:03:33.466" status="PASS" endtime="20170707 08:03:33.466"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170707 08:03:33.466">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170707 08:03:33.467">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170707 08:03:33.467">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20170707 08:03:33.466" status="PASS" endtime="20170707 08:03:33.467"></status>
</kw>
<msg level="INFO" timestamp="20170707 08:03:33.467">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status starttime="20170707 08:03:33.097" status="PASS" endtime="20170707 08:03:33.467"></status>
</kw>
<msg level="INFO" timestamp="20170707 08:03:33.467">${host_state} = Running</msg>
<status starttime="20170707 08:03:33.096" status="PASS" endtime="20170707 08:03:33.467"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal</arg>
<arg>${host_state}</arg>
<arg>Quiesced</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${host_state}</arg>
<arg>Quiesced</arg>
</arguments>
<msg level="FAIL" timestamp="20170707 08:03:33.469">Running != Quiesced</msg>
<status starttime="20170707 08:03:33.468" status="FAIL" endtime="20170707 08:03:33.469"></status>
</kw>
<msg level="INFO" timestamp="20170707 08:03:33.469">${status} = False</msg>
<status starttime="20170707 08:03:33.468" status="PASS" endtime="20170707 08:03:33.469"></status>
</kw>
<msg level="INFO" timestamp="20170707 08:03:33.469">${status} = False</msg>
<status starttime="20170707 08:03:33.096" status="PASS" endtime="20170707 08:03:33.469"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${TEST_STATUS}' == 'FAIL' or '${status}'=='True'</arg>
<arg>FFDC</arg>
</arguments>
<status starttime="20170707 08:03:33.469" status="PASS" endtime="20170707 08:03:33.470"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}'=='True'</arg>
<arg>Recover Quiesced Host</arg>
</arguments>
<status starttime="20170707 08:03:33.470" status="PASS" endtime="20170707 08:03:33.470"></status>
</kw>
<kw library="openbmc_ffdc_methods" name="Log Test Case Status">
<doc>Test case execution result history.</doc>
<kw library="BuiltIn" name="Get Variable Value">
<doc>Returns variable value or ``default`` if the variable does not exist.</doc>
<arguments>
<arg>${FFDC_DIR_PATH_STYLE}</arg>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${FFDC_DIR_PATH_STYLE}</var>
</assign>
<msg level="INFO" timestamp="20170707 08:03:33.480">${FFDC_DIR_PATH_STYLE} = </msg>
<status starttime="20170707 08:03:33.471" status="PASS" endtime="20170707 08:03:33.480"></status>
</kw>
<kw library="BuiltIn" name="Get Variable Value">
<doc>Returns variable value or ``default`` if the variable does not exist.</doc>
<arguments>
<arg>${FFDC_DIR_PATH}</arg>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${FFDC_DIR_PATH}</var>
</assign>
<msg level="INFO" timestamp="20170707 08:03:33.493">${FFDC_DIR_PATH} = </msg>
<status starttime="20170707 08:03:33.480" status="PASS" endtime="20170707 08:03:33.493"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${FFDC_DIR_PATH}' == '${EMPTY}'</arg>
<arg>Set FFDC Defaults</arg>
</arguments>
<kw library="openbmc_ffdc" name="Set Ffdc Defaults">
<doc>Set a default value for ffdc_dir_path and ffdc_prefix if they don't</doc>
<kw library="openbmc_ffdc_utils" name="Get Current Time Stamp">
<doc>Get the current time stamp data</doc>
<kw library="DateTime" name="Get Current Date">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20170707 08:03:33.496">${cur_time} = 2017-07-07 08:03:33:495898</msg>
<status starttime="20170707 08:03:33.496" status="PASS" endtime="20170707 08:03:33.496"></status>
</kw>
<kw library="openbmc_ffdc_list" name="Get Strip String">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20170707 08:03:33.497">${cur_time} = 20170707080333495898</msg>
<status starttime="20170707 08:03:33.497" status="PASS" endtime="20170707 08:03:33.497"></status>
</kw>
<status starttime="20170707 08:03:33.495" status="PASS" endtime="20170707 08:03:33.497"></status>
</kw>
<msg level="INFO" timestamp="20170707 08:03:33.504">${FFDC_TIME} = 20170707080333495898</msg>
<kw library="openbmc_ffdc_utils" name="Get Test Dir and Name">
<doc>SUITE_NAME and TEST_NAME are automatic variables</doc>
<kw library="openbmc_ffdc_list" name="Get Strip String">
<doc>########################################################################</doc>
<arguments>
<arg>${SUITE_NAME}</arg>
</arguments>
<assign>
<var>${suite_name}</var>
</assign>
<msg level="INFO" timestamp="20170707 08:03:33.505">${suite_name} = TestsSecurityTestSsl</msg>
<status starttime="20170707 08:03:33.505" status="PASS" endtime="20170707 08:03:33.505"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${FFDC_TIME}_</arg>
<arg>${suite_name}</arg>
</arguments>
<assign>
<var>${suite_name}</var>
</assign>
<msg level="INFO" timestamp="20170707 08:03:33.505">${suite_name} = 20170707080333495898_TestsSecurityTestSsl</msg>
<status starttime="20170707 08:03:33.505" status="PASS" endtime="20170707 08:03:33.505"></status>
</kw>
<kw library="openbmc_ffdc_list" name="Get Strip String">
<doc>########################################################################</doc>
<arguments>
<arg>${TEST_NAME}</arg>
</arguments>
<assign>
<var>${test_name}</var>
</assign>
<msg level="INFO" timestamp="20170707 08:03:33.506">${test_name} = TestSSLConnection</msg>
<status starttime="20170707 08:03:33.506" status="PASS" endtime="20170707 08:03:33.506"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${FFDC_TIME}_</arg>
<arg>${test_name}</arg>
</arguments>
<assign>
<var>${test_name}</var>
</assign>
<msg level="INFO" timestamp="20170707 08:03:33.507">${test_name} = 20170707080333495898_TestSSLConnection</msg>
<status starttime="20170707 08:03:33.506" status="PASS" endtime="20170707 08:03:33.507"></status>
</kw>
<status starttime="20170707 08:03:33.504" status="PASS" endtime="20170707 08:03:33.507"></status>
</kw>
<msg level="INFO" timestamp="20170707 08:03:33.507">${FFDC_DIR_PATH} = /tmp/fspcibld/21345/obmc-robot/logs/20170707080333495898_TestsSecurityTestSsl/20170707080333495898_TestSSLConnection/</msg>
<msg level="INFO" timestamp="20170707 08:03:33.511">${FFDC_PREFIX} = 20170707080333495898_</msg>
<status starttime="20170707 08:03:33.495" status="PASS" endtime="20170707 08:03:33.511"></status>
</kw>
<status starttime="20170707 08:03:33.494" status="PASS" endtime="20170707 08:03:33.511"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${FFDC_DIR_PATH_STYLE}' == '${1}'</arg>
<arg>Run Keywords</arg>
<arg>Set Global Variable</arg>
<arg>${FFDC_LOG_PATH}</arg>
<arg>${FFDC_DIR_PATH}</arg>
<arg>AND</arg>
<arg>Set Global Variable</arg>
<arg>${TEST_HISTORY}</arg>
<arg>${FFDC_DIR_PATH}test_history.txt</arg>
</arguments>
<status starttime="20170707 08:03:33.512" status="PASS" endtime="20170707 08:03:33.512"></status>
</kw>
<kw library="OperatingSystem" name="Create Directory">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>${FFDC_LOG_PATH}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170707 08:03:33.513">Created directory '&lt;a href="file:///tmp/fspcibld/21345/obmc-robot/logs"&gt;/tmp/fspcibld/21345/obmc-robot/logs&lt;/a&gt;'.</msg>
<status starttime="20170707 08:03:33.512" status="PASS" endtime="20170707 08:03:33.513"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>OperatingSystem.File Should Exist</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<assign>
<var>${exist}</var>
</assign>
<kw library="OperatingSystem" name="File Should Exist">
<doc>Fails unless the given ``path`` points to an existing file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
</arguments>
<msg level="FAIL" timestamp="20170707 08:03:33.514">File '/tmp/fspcibld/21345/obmc-robot/logs/test_history.txt' does not exist.</msg>
<status starttime="20170707 08:03:33.514" status="FAIL" endtime="20170707 08:03:33.514"></status>
</kw>
<msg level="INFO" timestamp="20170707 08:03:33.514">${exist} = False</msg>
<status starttime="20170707 08:03:33.513" status="PASS" endtime="20170707 08:03:33.514"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${exist}' == '${False}'</arg>
<arg>Create File</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<kw library="OperatingSystem" name="Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170707 08:03:33.515">Created file '&lt;a href="file:///tmp/fspcibld/21345/obmc-robot/logs/test_history.txt"&gt;/tmp/fspcibld/21345/obmc-robot/logs/test_history.txt&lt;/a&gt;'.</msg>
<status starttime="20170707 08:03:33.515" status="PASS" endtime="20170707 08:03:33.515"></status>
</kw>
<status starttime="20170707 08:03:33.515" status="PASS" endtime="20170707 08:03:33.515"></status>
</kw>
<kw library="gen_robot_print" name="Rpvars">
<arguments>
<arg>TEST_HISTORY</arg>
</arguments>
<status starttime="20170707 08:03:33.516" status="PASS" endtime="20170707 08:03:33.516"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Get Current Time Stamp">
<doc>Get the current time stamp data</doc>
<assign>
<var>${cur_time}</var>
</assign>
<kw library="DateTime" name="Get Current Date">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20170707 08:03:33.517">${cur_time} = 2017-07-07 08:03:33:516793</msg>
<status starttime="20170707 08:03:33.517" status="PASS" endtime="20170707 08:03:33.517"></status>
</kw>
<kw library="openbmc_ffdc_list" name="Get Strip String">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20170707 08:03:33.517">${cur_time} = 20170707080333516793</msg>
<status starttime="20170707 08:03:33.517" status="PASS" endtime="20170707 08:03:33.518"></status>
</kw>
<msg level="INFO" timestamp="20170707 08:03:33.518">${cur_time} = 20170707080333516793</msg>
<status starttime="20170707 08:03:33.516" status="PASS" endtime="20170707 08:03:33.518"></status>
</kw>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
<arg>${cur_time}:${SUITE_NAME}:${TEST_NAME}:${TEST_STATUS}${\n}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170707 08:03:33.519">Appended to file '&lt;a href="file:///tmp/fspcibld/21345/obmc-robot/logs/test_history.txt"&gt;/tmp/fspcibld/21345/obmc-robot/logs/test_history.txt&lt;/a&gt;'.</msg>
<status starttime="20170707 08:03:33.518" status="PASS" endtime="20170707 08:03:33.519"></status>
</kw>
<status starttime="20170707 08:03:33.470" status="PASS" endtime="20170707 08:03:33.519"></status>
</kw>
<status starttime="20170707 08:03:33.096" status="PASS" endtime="20170707 08:03:33.519"></status>
</kw>
<doc>This testcase is for testing the SSL connection to the
OpenBMC machine.</doc>
<tags>
<tag>Test_SSL_Connection</tag>
</tags>
<status starttime="20170707 08:03:32.838" status="PASS" endtime="20170707 08:03:33.519" critical="yes"></status>
</test>
<kw library="RequestsLibrary.RequestsKeywords" type="teardown" name="Delete All Sessions">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170707 08:03:33.520">Delete All Sessions</msg>
<status starttime="20170707 08:03:33.520" status="PASS" endtime="20170707 08:03:33.520"></status>
</kw>
<doc>This testsuite is for testing SSL connection to OpenBMC</doc>
<status starttime="20170707 08:03:32.584" status="PASS" endtime="20170707 08:03:33.520"></status>
</suite>
<status starttime="20170707 08:03:32.582" status="PASS" endtime="20170707 08:03:33.522"></status>
</suite>
<suite source="/tmp/fspcibld/21345/obmc-robot/tests/test_basic_poweron.robot" name="Test Basic Poweron" id="s1-s2">
<test name="Power On Test" id="s1-s2-t1">
<kw library="utils" type="setup" name="Start SOL Console Logging">
<doc>Start system console log to file.</doc>
<kw library="utils" name="Create OS Console File Path">
<doc>Create OS console file path name and return it.</doc>
<arguments>
<arg>${log_file_path}</arg>
</arguments>
<assign>
<var>${log_file_path}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>/tmp/${OPENBMC_HOST}_os_console</arg>
</arguments>
<assign>
<var>${default_file_path}</var>
</assign>
<msg level="INFO" timestamp="20170707 08:03:33.557">${default_file_path} = /tmp/9.3.21.61_os_console</msg>
<status starttime="20170707 08:03:33.557" status="PASS" endtime="20170707 08:03:33.557"></status>
</kw>
<kw library="BuiltIn" name="Set Variable If">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${log_file_path}' == '${EMPTY}'</arg>
<arg>${default_file_path}</arg>
<arg>${log_file_path}</arg>
</arguments>
<assign>
<var>${log_file_path}</var>
</assign>
<msg level="INFO" timestamp="20170707 08:03:33.558">${log_file_path} = /tmp/9.3.21.61_os_console</msg>
<status starttime="20170707 08:03:33.557" status="PASS" endtime="20170707 08:03:33.558"></status>
</kw>
<msg level="INFO" timestamp="20170707 08:03:33.558">${log_file_path} = /tmp/9.3.21.61_os_console</msg>
<status starttime="20170707 08:03:33.556" status="PASS" endtime="20170707 08:03:33.558"></status>
</kw>
<kw library="utils" name="Stop SOL Console Logging">
<doc>Stop system console logging and return log output.</doc>
<arguments>
<arg>${log_file_path}</arg>
<arg>return_data=${return_data}</arg>
</arguments>
<assign>
<var>${log_output}</var>
</assign>
<kw library="utils" name="Create OS Console File Path">
<doc>Create OS console file path name and return it.</doc>
<arguments>
<arg>${log_file_path}</arg>
</arguments>
<assign>
<var>${log_file_path}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>/tmp/${OPENBMC_HOST}_os_console</arg>
</arguments>
<assign>
<var>${default_file_path}</var>
</assign>
<msg level="INFO" timestamp="20170707 08:03:33.560">${default_file_path} = /tmp/9.3.21.61_os_console</msg>
<status starttime="20170707 08:03:33.560" status="PASS" endtime="20170707 08:03:33.560"></status>
</kw>
<kw library="BuiltIn" name="Set Variable If">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${log_file_path}' == '${EMPTY}'</arg>
<arg>${default_file_path}</arg>
<arg>${log_file_path}</arg>
</arguments>
<assign>
<var>${log_file_path}</var>
</assign>
<msg level="INFO" timestamp="20170707 08:03:33.561">${log_file_path} = /tmp/9.3.21.61_os_console</msg>
<status starttime="20170707 08:03:33.560" status="PASS" endtime="20170707 08:03:33.561"></status>
</kw>
<msg level="INFO" timestamp="20170707 08:03:33.561">${log_file_path} = /tmp/9.3.21.61_os_console</msg>
<status starttime="20170707 08:03:33.559" status="PASS" endtime="20170707 08:03:33.561"></status>
</kw>
<kw library="utils" name="Create OS Console Command String">
<doc>Return a command string to start OS console logging.</doc>
<assign>
<var>${search_string}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>which ssh_pw 2&gt;&amp;1</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170707 08:03:33.562">${cmd_buf} = which ssh_pw 2&gt;&amp;1</msg>
<status starttime="20170707 08:03:33.562" status="PASS" endtime="20170707 08:03:33.562"></status>
</kw>
<kw library="gen_robot_print" name="Rdpissuing">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status starttime="20170707 08:03:33.562" status="PASS" endtime="20170707 08:03:33.562"></status>
</kw>
<kw library="OperatingSystem" name="Run And Return Rc And Output">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg level="INFO" timestamp="20170707 08:03:33.566">Running command 'which ssh_pw 2&gt;&amp;1'.</msg>
<msg level="INFO" timestamp="20170707 08:03:33.569">${rc} = 0</msg>
<msg level="INFO" timestamp="20170707 08:03:33.569">${output} = /tmp/fspcibld/21345/obmc-robot/.tox/witherspoon/bin/ssh_pw</msg>
<status starttime="20170707 08:03:33.563" status="PASS" endtime="20170707 08:03:33.569"></status>
</kw>
<kw library="gen_robot_print" name="Rdpvars">
<arguments>
<arg>rc</arg>
<arg>output</arg>
</arguments>
<status starttime="20170707 08:03:33.571" status="PASS" endtime="20170707 08:03:33.572"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${rc}</arg>
<arg>${0}</arg>
<arg>msg=${output}\n</arg>
</arguments>
<status starttime="20170707 08:03:33.572" status="PASS" endtime="20170707 08:03:33.573"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>ssh_pw ${OPENBMC_PASSWORD} -p 2200</arg>
<arg>-o "StrictHostKeyChecking no" ${OPENBMC_USERNAME}@${OPENBMC_HOST}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170707 08:03:33.573">${cmd_buf} = ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.3.21.61</msg>
<status starttime="20170707 08:03:33.573" status="PASS" endtime="20170707 08:03:33.573"></status>
</kw>
<msg level="INFO" timestamp="20170707 08:03:33.574">${search_string} = ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.3.21.61</msg>
<status starttime="20170707 08:03:33.561" status="PASS" endtime="20170707 08:03:33.574"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>echo $(ps -ef | egrep '${search_string}'</arg>
<arg>| egrep -v grep | cut -c10-14)</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170707 08:03:33.574">${cmd_buf} = echo $(ps -ef | egrep 'ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.3.21.61' | egrep -v grep | cut -c10-14)</msg>
<status starttime="20170707 08:03:33.574" status="PASS" endtime="20170707 08:03:33.574"></status>
</kw>
<kw library="gen_robot_print" name="Rdpissuing">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status starttime="20170707 08:03:33.574" status="PASS" endtime="20170707 08:03:33.575"></status>
</kw>
<kw library="OperatingSystem" name="Run And Return Rc And Output">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${os_con_pid}</var>
</assign>
<msg level="INFO" timestamp="20170707 08:03:33.578">Running command 'echo $(ps -ef | egrep 'ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.3.21.61' | egrep -v grep | cut -c10-14) 2&gt;&amp;1'.</msg>
<msg level="INFO" timestamp="20170707 08:03:33.588">${rc} = 0</msg>
<msg level="INFO" timestamp="20170707 08:03:33.588">${os_con_pid} = </msg>
<status starttime="20170707 08:03:33.575" status="PASS" endtime="20170707 08:03:33.588"></status>
</kw>
<kw library="gen_robot_print" name="Rdpvars">
<arguments>
<arg>os_con_pid</arg>
</arguments>
<status starttime="20170707 08:03:33.590" status="PASS" endtime="20170707 08:03:33.590"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>kill -9 ${os_con_pid}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170707 08:03:33.591">${cmd_buf} = kill -9 </msg>
<status starttime="20170707 08:03:33.591" status="PASS" endtime="20170707 08:03:33.591"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${os_con_pid}' != '${EMPTY}'</arg>
<arg>Rdpissuing</arg>
<arg>${cmd_buf}</arg>
</arguments>
<status starttime="20170707 08:03:33.592" status="PASS" endtime="20170707 08:03:33.592"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${os_con_pid}' != '${EMPTY}'</arg>
<arg>Run And Return Rc And Output</arg>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg level="INFO" timestamp="20170707 08:03:33.593">${rc} = None</msg>
<msg level="INFO" timestamp="20170707 08:03:33.593">${output} = None</msg>
<status starttime="20170707 08:03:33.592" status="PASS" endtime="20170707 08:03:33.593"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${os_con_pid}' != '${EMPTY}'</arg>
<arg>Rdpvars</arg>
<arg>rc</arg>
<arg>output</arg>
</arguments>
<status starttime="20170707 08:03:33.593" status="PASS" endtime="20170707 08:03:33.594"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${targ_file_path}' != '${EMPTY}'</arg>
<arg>Run Keyword And Ignore Error</arg>
<arg>Copy File</arg>
<arg>${log_file_path}</arg>
<arg>${targ_file_path}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Copy File</arg>
<arg>${log_file_path}</arg>
<arg>${targ_file_path}</arg>
</arguments>
<kw library="OperatingSystem" name="Copy File">
<doc>Copies the source file into the destination.</doc>
<arguments>
<arg>${log_file_path}</arg>
<arg>${targ_file_path}</arg>
</arguments>
<msg level="FAIL" timestamp="20170707 08:03:33.596">Source file '/tmp/9.3.21.61_os_console' does not exist.</msg>
<status starttime="20170707 08:03:33.595" status="FAIL" endtime="20170707 08:03:33.596"></status>
</kw>
<status starttime="20170707 08:03:33.595" status="PASS" endtime="20170707 08:03:33.596"></status>
</kw>
<status starttime="20170707 08:03:33.594" status="PASS" endtime="20170707 08:03:33.596"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${output}</var>
</assign>
<msg level="INFO" timestamp="20170707 08:03:33.596">${output} = </msg>
<status starttime="20170707 08:03:33.596" status="PASS" endtime="20170707 08:03:33.596"></status>
</kw>
<kw library="BuiltIn" name="Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${debug}^1</arg>
</arguments>
<assign>
<var>${loc_quiet}</var>
</assign>
<msg level="INFO" timestamp="20170707 08:03:33.597">${loc_quiet} = 1</msg>
<status starttime="20170707 08:03:33.597" status="PASS" endtime="20170707 08:03:33.597"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${return_data}' == '${1}'</arg>
<arg>Cmd Fnc</arg>
<arg>cat ${log_file_path}</arg>
<arg>quiet=${loc_quiet}</arg>
<arg>print_output=${0}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<kw library="gen_cmd" name="Cmd Fnc">
<doc>Run the given command in a shell and return the shell return code.</doc>
<arguments>
<arg>cat ${log_file_path}</arg>
<arg>quiet=${loc_quiet}</arg>
<arg>print_output=${0}</arg>
</arguments>
<status starttime="20170707 08:03:33.598" status="PASS" endtime="20170707 08:03:33.812"></status>
</kw>
<msg level="INFO" timestamp="20170707 08:03:33.813">${rc} = 1</msg>
<msg level="INFO" timestamp="20170707 08:03:33.813">${output} = cat: /tmp/9.3.21.61_os_console: No such file or directory
</msg>
<status starttime="20170707 08:03:33.597" status="PASS" endtime="20170707 08:03:33.813"></status>
</kw>
<msg level="INFO" timestamp="20170707 08:03:33.814">${log_output} = cat: /tmp/9.3.21.61_os_console: No such file or directory
</msg>
<status starttime="20170707 08:03:33.558" status="PASS" endtime="20170707 08:03:33.814"></status>
</kw>
<kw library="OperatingSystem" name="Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${log_file_path}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170707 08:03:33.816">Created file '&lt;a href="file:///tmp/9.3.21.61_os_console"&gt;/tmp/9.3.21.61_os_console&lt;/a&gt;'.</msg>
<status starttime="20170707 08:03:33.815" status="PASS" endtime="20170707 08:03:33.816"></status>
</kw>
<kw library="utils" name="Create OS Console Command String">
<doc>Return a command string to start OS console logging.</doc>
<assign>
<var>${sub_cmd_buf}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>which ssh_pw 2&gt;&amp;1</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170707 08:03:33.817">${cmd_buf} = which ssh_pw 2&gt;&amp;1</msg>
<status starttime="20170707 08:03:33.817" status="PASS" endtime="20170707 08:03:33.817"></status>
</kw>
<kw library="gen_robot_print" name="Rdpissuing">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status starttime="20170707 08:03:33.817" status="PASS" endtime="20170707 08:03:33.817"></status>
</kw>
<kw library="OperatingSystem" name="Run And Return Rc And Output">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg level="INFO" timestamp="20170707 08:03:33.821">Running command 'which ssh_pw 2&gt;&amp;1'.</msg>
<msg level="INFO" timestamp="20170707 08:03:33.824">${rc} = 0</msg>
<msg level="INFO" timestamp="20170707 08:03:33.824">${output} = /tmp/fspcibld/21345/obmc-robot/.tox/witherspoon/bin/ssh_pw</msg>
<status starttime="20170707 08:03:33.818" status="PASS" endtime="20170707 08:03:33.824"></status>
</kw>
<kw library="gen_robot_print" name="Rdpvars">
<arguments>
<arg>rc</arg>
<arg>output</arg>
</arguments>
<status starttime="20170707 08:03:33.826" status="PASS" endtime="20170707 08:03:33.827"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${rc}</arg>
<arg>${0}</arg>
<arg>msg=${output}\n</arg>
</arguments>
<status starttime="20170707 08:03:33.827" status="PASS" endtime="20170707 08:03:33.828"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>ssh_pw ${OPENBMC_PASSWORD} -p 2200</arg>
<arg>-o "StrictHostKeyChecking no" ${OPENBMC_USERNAME}@${OPENBMC_HOST}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170707 08:03:33.828">${cmd_buf} = ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.3.21.61</msg>
<status starttime="20170707 08:03:33.828" status="PASS" endtime="20170707 08:03:33.828"></status>
</kw>
<msg level="INFO" timestamp="20170707 08:03:33.829">${sub_cmd_buf} = ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.3.21.61</msg>
<status starttime="20170707 08:03:33.816" status="PASS" endtime="20170707 08:03:33.829"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${sub_cmd_buf} &gt; ${log_file_path} 2&gt;&amp;1 &amp;</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170707 08:03:33.829">${cmd_buf} = ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.3.21.61 &gt; /tmp/9.3.21.61_os_console 2&gt;&amp;1 &amp;</msg>
<status starttime="20170707 08:03:33.829" status="PASS" endtime="20170707 08:03:33.829"></status>
</kw>
<kw library="gen_robot_print" name="Rdpissuing">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status starttime="20170707 08:03:33.830" status="PASS" endtime="20170707 08:03:33.830"></status>
</kw>
<kw library="OperatingSystem" name="Run And Return Rc And Output">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg level="INFO" timestamp="20170707 08:03:33.833">Running command 'ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.3.21.61 &gt; /tmp/9.3.21.61_os_console 2&gt;&amp;1 &amp;'.</msg>
<msg level="INFO" timestamp="20170707 08:03:33.837">${rc} = 0</msg>
<msg level="INFO" timestamp="20170707 08:03:33.837">${output} = </msg>
<status starttime="20170707 08:03:33.830" status="PASS" endtime="20170707 08:03:33.838"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${rc}</arg>
<arg>${0}</arg>
</arguments>
<status starttime="20170707 08:03:33.840" status="PASS" endtime="20170707 08:03:33.841"></status>
</kw>
<status starttime="20170707 08:03:33.556" status="PASS" endtime="20170707 08:03:33.842"></status>
</kw>
<kw library="BuiltIn" name="Repeat Keyword">
<doc>Executes the specified keyword multiple times.</doc>
<arguments>
<arg>${LOOP_COUNT} times</arg>
<arg>Host Off And On</arg>
</arguments>
<msg level="INFO" timestamp="20170707 08:03:33.843">Repeating keyword, round 1/2.</msg>
<kw name="Host Off And On">
<doc>Verify power off and on.</doc>
<kw library="state_manager" name="Initiate Host PowerOff">
<doc>Initiate host power off.</doc>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=${HOST_POWEROFF_TRANS}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20170707 08:03:33.846">${args} = {u'data': 'xyz.openbmc_project.State.Host.Transition.Off'}</msg>
<status starttime="20170707 08:03:33.845" status="PASS" endtime="20170707 08:03:33.846"></status>
</kw>
<kw library="rest_client" name="Write Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>RequestedHostTransition</arg>
<arg>data=${args}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170707 08:03:33.848">${base_uri} = /xyz/openbmc_project/state/host0/</msg>
<status starttime="20170707 08:03:33.847" status="PASS" endtime="20170707 08:03:33.848"></status>
</kw>
<kw library="rest_client" name="OpenBMC Put Request">
<arguments>
<arg>${base_uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170707 08:03:33.856">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170707 08:03:33.855" status="PASS" endtime="20170707 08:03:33.857"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170707 08:03:33.858">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170707 08:03:33.857" status="PASS" endtime="20170707 08:03:33.858"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170707 08:03:33.859">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170707 08:03:33.858" status="PASS" endtime="20170707 08:03:33.859"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170707 08:03:33.859">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170707 08:03:33.859" status="PASS" endtime="20170707 08:03:33.859"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 08:03:34.328">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170707 08:03:33.860" status="PASS" endtime="20170707 08:03:34.328"></status>
</kw>
<msg level="INFO" timestamp="20170707 08:03:34.328">${status} = PASS</msg>
<msg level="INFO" timestamp="20170707 08:03:34.328">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170707 08:03:33.860" status="PASS" endtime="20170707 08:03:34.328"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 08:03:34.329">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170707 08:03:34.328" status="PASS" endtime="20170707 08:03:34.329"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 08:03:34.330">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170707 08:03:34.329" status="PASS" endtime="20170707 08:03:34.330"></status>
</kw>
<status starttime="20170707 08:03:33.854" status="PASS" endtime="20170707 08:03:34.330"></status>
</kw>
<status starttime="20170707 08:03:33.850" status="PASS" endtime="20170707 08:03:34.330"></status>
</kw>
<status starttime="20170707 08:03:33.849" status="PASS" endtime="20170707 08:03:34.330"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170707 08:03:34.331">${base_uri} = /xyz/openbmc_project/state/host0//attr/RequestedHostTransition</msg>
<status starttime="20170707 08:03:34.330" status="PASS" endtime="20170707 08:03:34.331"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170707 08:03:34.331">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170707 08:03:34.331" status="PASS" endtime="20170707 08:03:34.331"></status>
</kw>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status starttime="20170707 08:03:34.332" status="PASS" endtime="20170707 08:03:34.332"></status>
</kw>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Put</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170707 08:03:34.334">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, method:Put, args:{u'data': {u'data': 'xyz.openbmc_project.State.Host.Transition.Off'}, u'headers': {u'Content-T...</msg>
<status starttime="20170707 08:03:34.333" status="PASS" endtime="20170707 08:03:34.334"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170707 08:03:34.335">URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, method:Put, args:{u'data': {u'data': 'xyz.openbmc_project.State.Host.Transition.Off'}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20170707 08:03:34.335" status="PASS" endtime="20170707 08:03:34.335"></status>
</kw>
<status starttime="20170707 08:03:34.334" status="PASS" endtime="20170707 08:03:34.335"></status>
</kw>
<status starttime="20170707 08:03:34.332" status="PASS" endtime="20170707 08:03:34.336"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Put Request">
<doc>Send a PUT request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170707 08:03:34.691">Put Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, data={"data": "xyz.openbmc_project.State.Host.Transition.Off"},                     headers={u'Content-Type': u'application/json'}, allow_redirects=True </msg>
<msg level="INFO" timestamp="20170707 08:03:34.691">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170707 08:03:34.336" status="PASS" endtime="20170707 08:03:34.691"></status>
</kw>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170707 08:03:34.696">${msg} = Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170707 08:03:34.692" status="PASS" endtime="20170707 08:03:34.696"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170707 08:03:34.697">Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170707 08:03:34.696" status="PASS" endtime="20170707 08:03:34.697"></status>
</kw>
<status starttime="20170707 08:03:34.696" status="PASS" endtime="20170707 08:03:34.697"></status>
</kw>
<status starttime="20170707 08:03:34.692" status="PASS" endtime="20170707 08:03:34.697"></status>
</kw>
<msg level="INFO" timestamp="20170707 08:03:34.697">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170707 08:03:33.848" status="PASS" endtime="20170707 08:03:34.697"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 08:03:34.698">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170707 08:03:34.698" status="PASS" endtime="20170707 08:03:34.698"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${json}</var>
</assign>
<msg level="INFO" timestamp="20170707 08:03:34.698">To JSON using : content={
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170707 08:03:34.699">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170707 08:03:34.699">${json} = {u'data': None, u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20170707 08:03:34.698" status="PASS" endtime="20170707 08:03:34.699"></status>
</kw>
<status starttime="20170707 08:03:33.846" status="PASS" endtime="20170707 08:03:34.699"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${wait}' == '${0}'</arg>
<arg>Return From Keyword</arg>
</arguments>
<status starttime="20170707 08:03:34.699" status="PASS" endtime="20170707 08:03:34.699"></status>
</kw>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>3 min</arg>
<arg>10 sec</arg>
<arg>Is Host Off</arg>
</arguments>
<kw library="state_manager" name="Is Host Off">
<doc>Check if host state is "Off".</doc>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170707 08:03:34.704">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170707 08:03:34.703" status="PASS" endtime="20170707 08:03:34.704"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170707 08:03:34.705">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170707 08:03:34.704" status="PASS" endtime="20170707 08:03:34.705"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170707 08:03:34.705">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170707 08:03:34.705" status="PASS" endtime="20170707 08:03:34.705"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170707 08:03:34.706">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170707 08:03:34.706" status="PASS" endtime="20170707 08:03:34.706"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 08:03:36.667">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170707 08:03:34.707" status="PASS" endtime="20170707 08:03:36.667"></status>
</kw>
<msg level="INFO" timestamp="20170707 08:03:36.667">${status} = PASS</msg>
<msg level="INFO" timestamp="20170707 08:03:36.667">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170707 08:03:34.707" status="PASS" endtime="20170707 08:03:36.667"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 08:03:36.668">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170707 08:03:36.668" status="PASS" endtime="20170707 08:03:36.668"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 08:03:36.669">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170707 08:03:36.668" status="PASS" endtime="20170707 08:03:36.669"></status>
</kw>
<status starttime="20170707 08:03:34.703" status="PASS" endtime="20170707 08:03:36.669"></status>
</kw>
<status starttime="20170707 08:03:34.702" status="PASS" endtime="20170707 08:03:36.669"></status>
</kw>
<status starttime="20170707 08:03:34.702" status="PASS" endtime="20170707 08:03:36.669"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170707 08:03:36.670">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170707 08:03:36.670" status="PASS" endtime="20170707 08:03:36.670"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170707 08:03:36.672">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170707 08:03:36.671" status="PASS" endtime="20170707 08:03:36.672"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170707 08:03:36.673">URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170707 08:03:36.673" status="PASS" endtime="20170707 08:03:36.673"></status>
</kw>
<status starttime="20170707 08:03:36.672" status="PASS" endtime="20170707 08:03:36.673"></status>
</kw>
<status starttime="20170707 08:03:36.671" status="PASS" endtime="20170707 08:03:36.673"></status>
</kw>
<status starttime="20170707 08:03:36.670" status="PASS" endtime="20170707 08:03:36.674"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170707 08:03:43.853">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170707 08:03:43.854">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170707 08:03:36.674" status="PASS" endtime="20170707 08:03:43.854"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170707 08:03:43.856">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170707 08:03:43.855" status="PASS" endtime="20170707 08:03:43.856"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170707 08:03:43.857">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170707 08:03:43.857" status="PASS" endtime="20170707 08:03:43.857"></status>
</kw>
<status starttime="20170707 08:03:43.856" status="PASS" endtime="20170707 08:03:43.857"></status>
</kw>
<status starttime="20170707 08:03:43.855" status="PASS" endtime="20170707 08:03:43.857"></status>
</kw>
<status starttime="20170707 08:03:43.854" status="PASS" endtime="20170707 08:03:43.857"></status>
</kw>
<msg level="INFO" timestamp="20170707 08:03:43.858">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170707 08:03:34.701" status="PASS" endtime="20170707 08:03:43.858"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 08:03:43.858">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170707 08:03:43.858" status="PASS" endtime="20170707 08:03:43.858"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170707 08:03:43.859">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170707 08:03:43.859">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170707 08:03:43.859">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20170707 08:03:43.858" status="PASS" endtime="20170707 08:03:43.859"></status>
</kw>
<msg level="INFO" timestamp="20170707 08:03:43.859">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status starttime="20170707 08:03:34.701" status="PASS" endtime="20170707 08:03:43.859"></status>
</kw>
<msg level="INFO" timestamp="20170707 08:03:43.860">${host_state} = Running</msg>
<status starttime="20170707 08:03:34.700" status="PASS" endtime="20170707 08:03:43.860"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${host_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170707 08:03:43.860">Off != Running</msg>
<status starttime="20170707 08:03:43.860" status="FAIL" endtime="20170707 08:03:43.860"></status>
</kw>
<status starttime="20170707 08:03:34.700" status="FAIL" endtime="20170707 08:03:43.861"></status>
</kw>
<kw library="state_manager" name="Is Host Off">
<doc>Check if host state is "Off".</doc>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170707 08:03:53.866">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170707 08:03:53.866" status="PASS" endtime="20170707 08:03:53.866"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170707 08:03:53.867">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170707 08:03:53.867" status="PASS" endtime="20170707 08:03:53.867"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170707 08:03:53.868">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170707 08:03:53.867" status="PASS" endtime="20170707 08:03:53.868"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170707 08:03:53.868">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170707 08:03:53.868" status="PASS" endtime="20170707 08:03:53.868"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 08:03:54.059">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170707 08:03:53.869" status="PASS" endtime="20170707 08:03:54.059"></status>
</kw>
<msg level="INFO" timestamp="20170707 08:03:54.059">${status} = PASS</msg>
<msg level="INFO" timestamp="20170707 08:03:54.059">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170707 08:03:53.869" status="PASS" endtime="20170707 08:03:54.059"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 08:03:54.060">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170707 08:03:54.059" status="PASS" endtime="20170707 08:03:54.060"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 08:03:54.061">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170707 08:03:54.060" status="PASS" endtime="20170707 08:03:54.061"></status>
</kw>
<status starttime="20170707 08:03:53.865" status="PASS" endtime="20170707 08:03:54.061"></status>
</kw>
<status starttime="20170707 08:03:53.864" status="PASS" endtime="20170707 08:03:54.061"></status>
</kw>
<status starttime="20170707 08:03:53.864" status="PASS" endtime="20170707 08:03:54.061"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170707 08:03:54.061">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170707 08:03:54.061" status="PASS" endtime="20170707 08:03:54.062"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170707 08:03:54.064">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170707 08:03:54.063" status="PASS" endtime="20170707 08:03:54.064"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170707 08:03:54.065">URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170707 08:03:54.064" status="PASS" endtime="20170707 08:03:54.065"></status>
</kw>
<status starttime="20170707 08:03:54.064" status="PASS" endtime="20170707 08:03:54.065"></status>
</kw>
<status starttime="20170707 08:03:54.062" status="PASS" endtime="20170707 08:03:54.065"></status>
</kw>
<status starttime="20170707 08:03:54.062" status="PASS" endtime="20170707 08:03:54.065"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170707 08:03:54.130">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170707 08:03:54.130">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170707 08:03:54.065" status="PASS" endtime="20170707 08:03:54.130"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170707 08:03:54.132">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170707 08:03:54.131" status="PASS" endtime="20170707 08:03:54.132"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170707 08:03:54.133">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170707 08:03:54.133" status="PASS" endtime="20170707 08:03:54.133"></status>
</kw>
<status starttime="20170707 08:03:54.132" status="PASS" endtime="20170707 08:03:54.134"></status>
</kw>
<status starttime="20170707 08:03:54.131" status="PASS" endtime="20170707 08:03:54.134"></status>
</kw>
<status starttime="20170707 08:03:54.130" status="PASS" endtime="20170707 08:03:54.134"></status>
</kw>
<msg level="INFO" timestamp="20170707 08:03:54.134">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170707 08:03:53.863" status="PASS" endtime="20170707 08:03:54.134"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 08:03:54.135">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170707 08:03:54.134" status="PASS" endtime="20170707 08:03:54.135"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170707 08:03:54.135">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170707 08:03:54.135">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170707 08:03:54.136">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20170707 08:03:54.135" status="PASS" endtime="20170707 08:03:54.136"></status>
</kw>
<msg level="INFO" timestamp="20170707 08:03:54.136">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status starttime="20170707 08:03:53.862" status="PASS" endtime="20170707 08:03:54.136"></status>
</kw>
<msg level="INFO" timestamp="20170707 08:03:54.136">${host_state} = Running</msg>
<status starttime="20170707 08:03:53.862" status="PASS" endtime="20170707 08:03:54.136"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${host_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170707 08:03:54.137">Off != Running</msg>
<status starttime="20170707 08:03:54.136" status="FAIL" endtime="20170707 08:03:54.137"></status>
</kw>
<status starttime="20170707 08:03:53.861" status="FAIL" endtime="20170707 08:03:54.137"></status>
</kw>
<kw library="state_manager" name="Is Host Off">
<doc>Check if host state is "Off".</doc>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170707 08:04:04.142">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170707 08:04:04.141" status="PASS" endtime="20170707 08:04:04.142"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170707 08:04:04.143">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170707 08:04:04.142" status="PASS" endtime="20170707 08:04:04.143"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170707 08:04:04.143">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170707 08:04:04.143" status="PASS" endtime="20170707 08:04:04.143"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170707 08:04:04.144">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170707 08:04:04.144" status="PASS" endtime="20170707 08:04:04.144"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 08:04:04.366">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170707 08:04:04.145" status="PASS" endtime="20170707 08:04:04.366"></status>
</kw>
<msg level="INFO" timestamp="20170707 08:04:04.366">${status} = PASS</msg>
<msg level="INFO" timestamp="20170707 08:04:04.366">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170707 08:04:04.144" status="PASS" endtime="20170707 08:04:04.366"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 08:04:04.367">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170707 08:04:04.366" status="PASS" endtime="20170707 08:04:04.367"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 08:04:04.367">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170707 08:04:04.367" status="PASS" endtime="20170707 08:04:04.368"></status>
</kw>
<status starttime="20170707 08:04:04.141" status="PASS" endtime="20170707 08:04:04.368"></status>
</kw>
<status starttime="20170707 08:04:04.140" status="PASS" endtime="20170707 08:04:04.368"></status>
</kw>
<status starttime="20170707 08:04:04.140" status="PASS" endtime="20170707 08:04:04.368"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170707 08:04:04.369">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170707 08:04:04.368" status="PASS" endtime="20170707 08:04:04.369"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170707 08:04:04.371">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170707 08:04:04.370" status="PASS" endtime="20170707 08:04:04.371"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170707 08:04:04.372">URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170707 08:04:04.372" status="PASS" endtime="20170707 08:04:04.372"></status>
</kw>
<status starttime="20170707 08:04:04.371" status="PASS" endtime="20170707 08:04:04.372"></status>
</kw>
<status starttime="20170707 08:04:04.370" status="PASS" endtime="20170707 08:04:04.372"></status>
</kw>
<status starttime="20170707 08:04:04.369" status="PASS" endtime="20170707 08:04:04.372"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170707 08:04:04.437">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170707 08:04:04.438">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170707 08:04:04.372" status="PASS" endtime="20170707 08:04:04.438"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170707 08:04:04.439">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170707 08:04:04.439" status="PASS" endtime="20170707 08:04:04.439"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170707 08:04:04.440">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170707 08:04:04.440" status="PASS" endtime="20170707 08:04:04.440"></status>
</kw>
<status starttime="20170707 08:04:04.440" status="PASS" endtime="20170707 08:04:04.441"></status>
</kw>
<status starttime="20170707 08:04:04.438" status="PASS" endtime="20170707 08:04:04.441"></status>
</kw>
<status starttime="20170707 08:04:04.438" status="PASS" endtime="20170707 08:04:04.441"></status>
</kw>
<msg level="INFO" timestamp="20170707 08:04:04.441">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170707 08:04:04.139" status="PASS" endtime="20170707 08:04:04.441"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 08:04:04.442">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170707 08:04:04.441" status="PASS" endtime="20170707 08:04:04.442"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170707 08:04:04.442">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170707 08:04:04.442">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170707 08:04:04.442">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20170707 08:04:04.442" status="PASS" endtime="20170707 08:04:04.442"></status>
</kw>
<msg level="INFO" timestamp="20170707 08:04:04.443">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status starttime="20170707 08:04:04.139" status="PASS" endtime="20170707 08:04:04.443"></status>
</kw>
<msg level="INFO" timestamp="20170707 08:04:04.443">${host_state} = Running</msg>
<status starttime="20170707 08:04:04.138" status="PASS" endtime="20170707 08:04:04.443"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${host_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170707 08:04:04.444">Off != Running</msg>
<status starttime="20170707 08:04:04.443" status="FAIL" endtime="20170707 08:04:04.444"></status>
</kw>
<status starttime="20170707 08:04:04.138" status="FAIL" endtime="20170707 08:04:04.444"></status>
</kw>
<kw library="state_manager" name="Is Host Off">
<doc>Check if host state is "Off".</doc>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170707 08:04:14.449">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170707 08:04:14.449" status="PASS" endtime="20170707 08:04:14.449"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170707 08:04:14.450">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170707 08:04:14.450" status="PASS" endtime="20170707 08:04:14.450"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170707 08:04:14.451">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170707 08:04:14.450" status="PASS" endtime="20170707 08:04:14.451"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170707 08:04:14.451">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170707 08:04:14.451" status="PASS" endtime="20170707 08:04:14.451"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 08:04:14.742">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170707 08:04:14.452" status="PASS" endtime="20170707 08:04:14.742"></status>
</kw>
<msg level="INFO" timestamp="20170707 08:04:14.742">${status} = PASS</msg>
<msg level="INFO" timestamp="20170707 08:04:14.742">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170707 08:04:14.452" status="PASS" endtime="20170707 08:04:14.743"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 08:04:14.743">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170707 08:04:14.743" status="PASS" endtime="20170707 08:04:14.743"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 08:04:14.744">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170707 08:04:14.743" status="PASS" endtime="20170707 08:04:14.744"></status>
</kw>
<status starttime="20170707 08:04:14.448" status="PASS" endtime="20170707 08:04:14.744"></status>
</kw>
<status starttime="20170707 08:04:14.447" status="PASS" endtime="20170707 08:04:14.744"></status>
</kw>
<status starttime="20170707 08:04:14.447" status="PASS" endtime="20170707 08:04:14.744"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170707 08:04:14.745">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170707 08:04:14.745" status="PASS" endtime="20170707 08:04:14.745"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170707 08:04:14.747">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170707 08:04:14.746" status="PASS" endtime="20170707 08:04:14.747"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170707 08:04:14.748">URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170707 08:04:14.748" status="PASS" endtime="20170707 08:04:14.748"></status>
</kw>
<status starttime="20170707 08:04:14.747" status="PASS" endtime="20170707 08:04:14.748"></status>
</kw>
<status starttime="20170707 08:04:14.746" status="PASS" endtime="20170707 08:04:14.748"></status>
</kw>
<status starttime="20170707 08:04:14.745" status="PASS" endtime="20170707 08:04:14.748"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170707 08:04:14.813">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170707 08:04:14.814">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170707 08:04:14.749" status="PASS" endtime="20170707 08:04:14.814"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170707 08:04:14.816">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170707 08:04:14.815" status="PASS" endtime="20170707 08:04:14.816"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170707 08:04:14.817">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170707 08:04:14.816" status="PASS" endtime="20170707 08:04:14.817"></status>
</kw>
<status starttime="20170707 08:04:14.816" status="PASS" endtime="20170707 08:04:14.817"></status>
</kw>
<status starttime="20170707 08:04:14.815" status="PASS" endtime="20170707 08:04:14.817"></status>
</kw>
<status starttime="20170707 08:04:14.814" status="PASS" endtime="20170707 08:04:14.817"></status>
</kw>
<msg level="INFO" timestamp="20170707 08:04:14.817">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170707 08:04:14.446" status="PASS" endtime="20170707 08:04:14.817"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 08:04:14.818">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170707 08:04:14.818" status="PASS" endtime="20170707 08:04:14.818"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170707 08:04:14.819">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170707 08:04:14.819">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170707 08:04:14.819">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20170707 08:04:14.818" status="PASS" endtime="20170707 08:04:14.819"></status>
</kw>
<msg level="INFO" timestamp="20170707 08:04:14.819">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status starttime="20170707 08:04:14.445" status="PASS" endtime="20170707 08:04:14.819"></status>
</kw>
<msg level="INFO" timestamp="20170707 08:04:14.819">${host_state} = Running</msg>
<status starttime="20170707 08:04:14.445" status="PASS" endtime="20170707 08:04:14.819"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${host_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170707 08:04:14.820">Off != Running</msg>
<status starttime="20170707 08:04:14.820" status="FAIL" endtime="20170707 08:04:14.820"></status>
</kw>
<status starttime="20170707 08:04:14.444" status="FAIL" endtime="20170707 08:04:14.820"></status>
</kw>
<kw library="state_manager" name="Is Host Off">
<doc>Check if host state is "Off".</doc>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170707 08:04:24.826">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170707 08:04:24.825" status="PASS" endtime="20170707 08:04:24.826"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170707 08:04:24.827">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170707 08:04:24.826" status="PASS" endtime="20170707 08:04:24.827"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170707 08:04:24.827">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170707 08:04:24.827" status="PASS" endtime="20170707 08:04:24.827"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170707 08:04:24.828">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170707 08:04:24.827" status="PASS" endtime="20170707 08:04:24.828"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 08:04:25.104">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170707 08:04:24.829" status="PASS" endtime="20170707 08:04:25.104"></status>
</kw>
<msg level="INFO" timestamp="20170707 08:04:25.104">${status} = PASS</msg>
<msg level="INFO" timestamp="20170707 08:04:25.104">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170707 08:04:24.828" status="PASS" endtime="20170707 08:04:25.104"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 08:04:25.104">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170707 08:04:25.104" status="PASS" endtime="20170707 08:04:25.105"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 08:04:25.106">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170707 08:04:25.105" status="PASS" endtime="20170707 08:04:25.106"></status>
</kw>
<status starttime="20170707 08:04:24.825" status="PASS" endtime="20170707 08:04:25.106"></status>
</kw>
<status starttime="20170707 08:04:24.824" status="PASS" endtime="20170707 08:04:25.106"></status>
</kw>
<status starttime="20170707 08:04:24.823" status="PASS" endtime="20170707 08:04:25.106"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170707 08:04:25.107">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170707 08:04:25.106" status="PASS" endtime="20170707 08:04:25.107"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170707 08:04:25.109">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170707 08:04:25.108" status="PASS" endtime="20170707 08:04:25.109"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170707 08:04:25.111">URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170707 08:04:25.110" status="PASS" endtime="20170707 08:04:25.111"></status>
</kw>
<status starttime="20170707 08:04:25.110" status="PASS" endtime="20170707 08:04:25.111"></status>
</kw>
<status starttime="20170707 08:04:25.108" status="PASS" endtime="20170707 08:04:25.111"></status>
</kw>
<status starttime="20170707 08:04:25.107" status="PASS" endtime="20170707 08:04:25.111"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170707 08:04:25.178">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170707 08:04:25.178">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170707 08:04:25.111" status="PASS" endtime="20170707 08:04:25.178"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170707 08:04:25.180">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170707 08:04:25.179" status="PASS" endtime="20170707 08:04:25.180"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170707 08:04:25.181">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170707 08:04:25.180" status="PASS" endtime="20170707 08:04:25.181"></status>
</kw>
<status starttime="20170707 08:04:25.180" status="PASS" endtime="20170707 08:04:25.181"></status>
</kw>
<status starttime="20170707 08:04:25.179" status="PASS" endtime="20170707 08:04:25.181"></status>
</kw>
<status starttime="20170707 08:04:25.178" status="PASS" endtime="20170707 08:04:25.181"></status>
</kw>
<msg level="INFO" timestamp="20170707 08:04:25.181">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170707 08:04:24.823" status="PASS" endtime="20170707 08:04:25.181"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 08:04:25.182">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170707 08:04:25.181" status="PASS" endtime="20170707 08:04:25.182"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170707 08:04:25.182">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170707 08:04:25.182">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170707 08:04:25.183">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20170707 08:04:25.182" status="PASS" endtime="20170707 08:04:25.183"></status>
</kw>
<msg level="INFO" timestamp="20170707 08:04:25.183">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status starttime="20170707 08:04:24.822" status="PASS" endtime="20170707 08:04:25.183"></status>
</kw>
<msg level="INFO" timestamp="20170707 08:04:25.183">${host_state} = Running</msg>
<status starttime="20170707 08:04:24.822" status="PASS" endtime="20170707 08:04:25.183"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${host_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170707 08:04:25.184">Off != Running</msg>
<status starttime="20170707 08:04:25.183" status="FAIL" endtime="20170707 08:04:25.184"></status>
</kw>
<status starttime="20170707 08:04:24.821" status="FAIL" endtime="20170707 08:04:25.184"></status>
</kw>
<kw library="state_manager" name="Is Host Off">
<doc>Check if host state is "Off".</doc>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170707 08:04:35.191">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170707 08:04:35.190" status="PASS" endtime="20170707 08:04:35.191"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170707 08:04:35.192">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170707 08:04:35.191" status="PASS" endtime="20170707 08:04:35.192"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170707 08:04:35.192">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170707 08:04:35.192" status="PASS" endtime="20170707 08:04:35.192"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170707 08:04:35.193">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170707 08:04:35.193" status="PASS" endtime="20170707 08:04:35.193"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 08:04:35.452">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170707 08:04:35.194" status="PASS" endtime="20170707 08:04:35.452"></status>
</kw>
<msg level="INFO" timestamp="20170707 08:04:35.452">${status} = PASS</msg>
<msg level="INFO" timestamp="20170707 08:04:35.452">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170707 08:04:35.193" status="PASS" endtime="20170707 08:04:35.452"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 08:04:35.453">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170707 08:04:35.453" status="PASS" endtime="20170707 08:04:35.453"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 08:04:35.454">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170707 08:04:35.453" status="PASS" endtime="20170707 08:04:35.454"></status>
</kw>
<status starttime="20170707 08:04:35.189" status="PASS" endtime="20170707 08:04:35.454"></status>
</kw>
<status starttime="20170707 08:04:35.189" status="PASS" endtime="20170707 08:04:35.454"></status>
</kw>
<status starttime="20170707 08:04:35.188" status="PASS" endtime="20170707 08:04:35.454"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170707 08:04:35.455">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170707 08:04:35.454" status="PASS" endtime="20170707 08:04:35.455"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170707 08:04:35.457">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170707 08:04:35.456" status="PASS" endtime="20170707 08:04:35.457"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170707 08:04:35.458">URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170707 08:04:35.458" status="PASS" endtime="20170707 08:04:35.458"></status>
</kw>
<status starttime="20170707 08:04:35.457" status="PASS" endtime="20170707 08:04:35.458"></status>
</kw>
<status starttime="20170707 08:04:35.456" status="PASS" endtime="20170707 08:04:35.458"></status>
</kw>
<status starttime="20170707 08:04:35.455" status="PASS" endtime="20170707 08:04:35.458"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170707 08:04:35.537">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170707 08:04:35.538">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170707 08:04:35.458" status="PASS" endtime="20170707 08:04:35.538"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170707 08:04:35.540">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170707 08:04:35.539" status="PASS" endtime="20170707 08:04:35.540"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170707 08:04:35.541">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170707 08:04:35.541" status="PASS" endtime="20170707 08:04:35.541"></status>
</kw>
<status starttime="20170707 08:04:35.540" status="PASS" endtime="20170707 08:04:35.541"></status>
</kw>
<status starttime="20170707 08:04:35.539" status="PASS" endtime="20170707 08:04:35.541"></status>
</kw>
<status starttime="20170707 08:04:35.538" status="PASS" endtime="20170707 08:04:35.542"></status>
</kw>
<msg level="INFO" timestamp="20170707 08:04:35.542">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170707 08:04:35.187" status="PASS" endtime="20170707 08:04:35.542"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 08:04:35.542">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170707 08:04:35.542" status="PASS" endtime="20170707 08:04:35.542"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170707 08:04:35.543">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170707 08:04:35.543">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170707 08:04:35.543">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20170707 08:04:35.543" status="PASS" endtime="20170707 08:04:35.543"></status>
</kw>
<msg level="INFO" timestamp="20170707 08:04:35.543">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status starttime="20170707 08:04:35.186" status="PASS" endtime="20170707 08:04:35.543"></status>
</kw>
<msg level="INFO" timestamp="20170707 08:04:35.544">${host_state} = Running</msg>
<status starttime="20170707 08:04:35.185" status="PASS" endtime="20170707 08:04:35.544"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${host_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170707 08:04:35.544">Off != Running</msg>
<status starttime="20170707 08:04:35.544" status="FAIL" endtime="20170707 08:04:35.544"></status>
</kw>
<status starttime="20170707 08:04:35.185" status="FAIL" endtime="20170707 08:04:35.545"></status>
</kw>
<kw library="state_manager" name="Is Host Off">
<doc>Check if host state is "Off".</doc>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170707 08:04:45.550">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170707 08:04:45.549" status="PASS" endtime="20170707 08:04:45.550"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170707 08:04:45.551">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170707 08:04:45.551" status="PASS" endtime="20170707 08:04:45.551"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170707 08:04:45.551">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170707 08:04:45.551" status="PASS" endtime="20170707 08:04:45.551"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170707 08:04:45.552">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170707 08:04:45.552" status="PASS" endtime="20170707 08:04:45.552"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 08:04:45.797">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170707 08:04:45.553" status="PASS" endtime="20170707 08:04:45.797"></status>
</kw>
<msg level="INFO" timestamp="20170707 08:04:45.797">${status} = PASS</msg>
<msg level="INFO" timestamp="20170707 08:04:45.797">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170707 08:04:45.552" status="PASS" endtime="20170707 08:04:45.797"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 08:04:45.798">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170707 08:04:45.798" status="PASS" endtime="20170707 08:04:45.798"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 08:04:45.799">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170707 08:04:45.798" status="PASS" endtime="20170707 08:04:45.799"></status>
</kw>
<status starttime="20170707 08:04:45.549" status="PASS" endtime="20170707 08:04:45.799"></status>
</kw>
<status starttime="20170707 08:04:45.549" status="PASS" endtime="20170707 08:04:45.800"></status>
</kw>
<status starttime="20170707 08:04:45.548" status="PASS" endtime="20170707 08:04:45.800"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170707 08:04:45.800">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170707 08:04:45.800" status="PASS" endtime="20170707 08:04:45.800"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170707 08:04:45.802">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170707 08:04:45.802" status="PASS" endtime="20170707 08:04:45.802"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170707 08:04:45.804">URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170707 08:04:45.803" status="PASS" endtime="20170707 08:04:45.804"></status>
</kw>
<status starttime="20170707 08:04:45.803" status="PASS" endtime="20170707 08:04:45.804"></status>
</kw>
<status starttime="20170707 08:04:45.801" status="PASS" endtime="20170707 08:04:45.804"></status>
</kw>
<status starttime="20170707 08:04:45.801" status="PASS" endtime="20170707 08:04:45.804"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170707 08:04:45.912">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170707 08:04:45.913">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170707 08:04:45.804" status="PASS" endtime="20170707 08:04:45.913"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170707 08:04:45.914">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170707 08:04:45.914" status="PASS" endtime="20170707 08:04:45.915"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170707 08:04:45.915">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170707 08:04:45.915" status="PASS" endtime="20170707 08:04:45.916"></status>
</kw>
<status starttime="20170707 08:04:45.915" status="PASS" endtime="20170707 08:04:45.916"></status>
</kw>
<status starttime="20170707 08:04:45.913" status="PASS" endtime="20170707 08:04:45.916"></status>
</kw>
<status starttime="20170707 08:04:45.913" status="PASS" endtime="20170707 08:04:45.916"></status>
</kw>
<msg level="INFO" timestamp="20170707 08:04:45.916">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170707 08:04:45.547" status="PASS" endtime="20170707 08:04:45.916"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 08:04:45.917">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170707 08:04:45.916" status="PASS" endtime="20170707 08:04:45.917"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170707 08:04:45.917">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170707 08:04:45.917">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170707 08:04:45.917">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20170707 08:04:45.917" status="PASS" endtime="20170707 08:04:45.918"></status>
</kw>
<msg level="INFO" timestamp="20170707 08:04:45.918">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status starttime="20170707 08:04:45.546" status="PASS" endtime="20170707 08:04:45.918"></status>
</kw>
<msg level="INFO" timestamp="20170707 08:04:45.918">${host_state} = Running</msg>
<status starttime="20170707 08:04:45.546" status="PASS" endtime="20170707 08:04:45.918"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${host_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170707 08:04:45.919">Off != Running</msg>
<status starttime="20170707 08:04:45.918" status="FAIL" endtime="20170707 08:04:45.919"></status>
</kw>
<status starttime="20170707 08:04:45.545" status="FAIL" endtime="20170707 08:04:45.919"></status>
</kw>
<kw library="state_manager" name="Is Host Off">
<doc>Check if host state is "Off".</doc>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170707 08:04:55.926">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170707 08:04:55.926" status="PASS" endtime="20170707 08:04:55.926"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170707 08:04:55.927">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170707 08:04:55.927" status="PASS" endtime="20170707 08:04:55.927"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170707 08:04:55.928">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170707 08:04:55.927" status="PASS" endtime="20170707 08:04:55.928"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170707 08:04:55.928">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170707 08:04:55.928" status="PASS" endtime="20170707 08:04:55.928"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 08:04:56.149">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170707 08:04:55.929" status="PASS" endtime="20170707 08:04:56.149"></status>
</kw>
<msg level="INFO" timestamp="20170707 08:04:56.149">${status} = PASS</msg>
<msg level="INFO" timestamp="20170707 08:04:56.149">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170707 08:04:55.929" status="PASS" endtime="20170707 08:04:56.149"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 08:04:56.150">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170707 08:04:56.149" status="PASS" endtime="20170707 08:04:56.150"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 08:04:56.150">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170707 08:04:56.150" status="PASS" endtime="20170707 08:04:56.151"></status>
</kw>
<status starttime="20170707 08:04:55.924" status="PASS" endtime="20170707 08:04:56.151"></status>
</kw>
<status starttime="20170707 08:04:55.924" status="PASS" endtime="20170707 08:04:56.151"></status>
</kw>
<status starttime="20170707 08:04:55.923" status="PASS" endtime="20170707 08:04:56.151"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170707 08:04:56.151">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170707 08:04:56.151" status="PASS" endtime="20170707 08:04:56.151"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170707 08:04:56.154">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170707 08:04:56.153" status="PASS" endtime="20170707 08:04:56.154"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170707 08:04:56.154">URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170707 08:04:56.154" status="PASS" endtime="20170707 08:04:56.155"></status>
</kw>
<status starttime="20170707 08:04:56.154" status="PASS" endtime="20170707 08:04:56.155"></status>
</kw>
<status starttime="20170707 08:04:56.152" status="PASS" endtime="20170707 08:04:56.155"></status>
</kw>
<status starttime="20170707 08:04:56.152" status="PASS" endtime="20170707 08:04:56.155"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170707 08:04:56.311">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170707 08:04:56.311">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170707 08:04:56.155" status="PASS" endtime="20170707 08:04:56.311"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170707 08:04:56.313">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170707 08:04:56.312" status="PASS" endtime="20170707 08:04:56.313"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170707 08:04:56.317">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170707 08:04:56.314" status="PASS" endtime="20170707 08:04:56.317"></status>
</kw>
<status starttime="20170707 08:04:56.313" status="PASS" endtime="20170707 08:04:56.317"></status>
</kw>
<status starttime="20170707 08:04:56.312" status="PASS" endtime="20170707 08:04:56.317"></status>
</kw>
<status starttime="20170707 08:04:56.311" status="PASS" endtime="20170707 08:04:56.317"></status>
</kw>
<msg level="INFO" timestamp="20170707 08:04:56.317">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170707 08:04:55.922" status="PASS" endtime="20170707 08:04:56.317"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 08:04:56.318">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170707 08:04:56.318" status="PASS" endtime="20170707 08:04:56.318"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170707 08:04:56.319">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170707 08:04:56.319">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170707 08:04:56.319">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20170707 08:04:56.318" status="PASS" endtime="20170707 08:04:56.319"></status>
</kw>
<msg level="INFO" timestamp="20170707 08:04:56.319">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status starttime="20170707 08:04:55.922" status="PASS" endtime="20170707 08:04:56.319"></status>
</kw>
<msg level="INFO" timestamp="20170707 08:04:56.320">${host_state} = Running</msg>
<status starttime="20170707 08:04:55.921" status="PASS" endtime="20170707 08:04:56.320"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${host_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170707 08:04:56.321">Off != Running</msg>
<status starttime="20170707 08:04:56.320" status="FAIL" endtime="20170707 08:04:56.321"></status>
</kw>
<status starttime="20170707 08:04:55.920" status="FAIL" endtime="20170707 08:04:56.321"></status>
</kw>
<kw library="state_manager" name="Is Host Off">
<doc>Check if host state is "Off".</doc>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170707 08:05:06.326">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170707 08:05:06.326" status="PASS" endtime="20170707 08:05:06.326"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170707 08:05:06.327">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170707 08:05:06.327" status="PASS" endtime="20170707 08:05:06.327"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170707 08:05:06.328">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170707 08:05:06.327" status="PASS" endtime="20170707 08:05:06.328"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170707 08:05:06.328">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170707 08:05:06.328" status="PASS" endtime="20170707 08:05:06.328"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 08:05:06.519">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170707 08:05:06.329" status="PASS" endtime="20170707 08:05:06.519"></status>
</kw>
<msg level="INFO" timestamp="20170707 08:05:06.519">${status} = PASS</msg>
<msg level="INFO" timestamp="20170707 08:05:06.520">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170707 08:05:06.328" status="PASS" endtime="20170707 08:05:06.520"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 08:05:06.520">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170707 08:05:06.520" status="PASS" endtime="20170707 08:05:06.520"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 08:05:06.521">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170707 08:05:06.521" status="PASS" endtime="20170707 08:05:06.521"></status>
</kw>
<status starttime="20170707 08:05:06.325" status="PASS" endtime="20170707 08:05:06.521"></status>
</kw>
<status starttime="20170707 08:05:06.325" status="PASS" endtime="20170707 08:05:06.521"></status>
</kw>
<status starttime="20170707 08:05:06.324" status="PASS" endtime="20170707 08:05:06.521"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170707 08:05:06.522">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170707 08:05:06.522" status="PASS" endtime="20170707 08:05:06.522"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170707 08:05:06.524">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170707 08:05:06.524" status="PASS" endtime="20170707 08:05:06.524"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170707 08:05:06.525">URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170707 08:05:06.525" status="PASS" endtime="20170707 08:05:06.526"></status>
</kw>
<status starttime="20170707 08:05:06.525" status="PASS" endtime="20170707 08:05:06.526"></status>
</kw>
<status starttime="20170707 08:05:06.523" status="PASS" endtime="20170707 08:05:06.526"></status>
</kw>
<status starttime="20170707 08:05:06.522" status="PASS" endtime="20170707 08:05:06.526"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170707 08:05:06.596">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170707 08:05:06.596">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170707 08:05:06.526" status="PASS" endtime="20170707 08:05:06.596"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170707 08:05:06.598">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170707 08:05:06.597" status="PASS" endtime="20170707 08:05:06.598"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170707 08:05:06.598">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170707 08:05:06.598" status="PASS" endtime="20170707 08:05:06.599"></status>
</kw>
<status starttime="20170707 08:05:06.598" status="PASS" endtime="20170707 08:05:06.599"></status>
</kw>
<status starttime="20170707 08:05:06.597" status="PASS" endtime="20170707 08:05:06.599"></status>
</kw>
<status starttime="20170707 08:05:06.596" status="PASS" endtime="20170707 08:05:06.599"></status>
</kw>
<msg level="INFO" timestamp="20170707 08:05:06.599">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170707 08:05:06.323" status="PASS" endtime="20170707 08:05:06.599"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 08:05:06.600">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170707 08:05:06.599" status="PASS" endtime="20170707 08:05:06.600"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170707 08:05:06.600">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170707 08:05:06.601">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170707 08:05:06.601">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20170707 08:05:06.600" status="PASS" endtime="20170707 08:05:06.601"></status>
</kw>
<msg level="INFO" timestamp="20170707 08:05:06.601">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status starttime="20170707 08:05:06.323" status="PASS" endtime="20170707 08:05:06.601"></status>
</kw>
<msg level="INFO" timestamp="20170707 08:05:06.602">${host_state} = Running</msg>
<status starttime="20170707 08:05:06.322" status="PASS" endtime="20170707 08:05:06.602"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${host_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170707 08:05:06.603">Off != Running</msg>
<status starttime="20170707 08:05:06.602" status="FAIL" endtime="20170707 08:05:06.603"></status>
</kw>
<status starttime="20170707 08:05:06.322" status="FAIL" endtime="20170707 08:05:06.603"></status>
</kw>
<kw library="state_manager" name="Is Host Off">
<doc>Check if host state is "Off".</doc>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170707 08:05:16.608">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170707 08:05:16.608" status="PASS" endtime="20170707 08:05:16.609"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170707 08:05:16.610">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170707 08:05:16.609" status="PASS" endtime="20170707 08:05:16.610"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170707 08:05:16.610">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170707 08:05:16.610" status="PASS" endtime="20170707 08:05:16.610"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170707 08:05:16.611">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170707 08:05:16.610" status="PASS" endtime="20170707 08:05:16.611"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 08:05:16.797">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170707 08:05:16.612" status="PASS" endtime="20170707 08:05:16.797"></status>
</kw>
<msg level="INFO" timestamp="20170707 08:05:16.798">${status} = PASS</msg>
<msg level="INFO" timestamp="20170707 08:05:16.798">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170707 08:05:16.611" status="PASS" endtime="20170707 08:05:16.798"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 08:05:16.799">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170707 08:05:16.798" status="PASS" endtime="20170707 08:05:16.799"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 08:05:16.800">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170707 08:05:16.799" status="PASS" endtime="20170707 08:05:16.800"></status>
</kw>
<status starttime="20170707 08:05:16.607" status="PASS" endtime="20170707 08:05:16.800"></status>
</kw>
<status starttime="20170707 08:05:16.607" status="PASS" endtime="20170707 08:05:16.800"></status>
</kw>
<status starttime="20170707 08:05:16.606" status="PASS" endtime="20170707 08:05:16.800"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170707 08:05:16.801">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170707 08:05:16.801" status="PASS" endtime="20170707 08:05:16.801"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170707 08:05:16.804">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170707 08:05:16.803" status="PASS" endtime="20170707 08:05:16.804"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170707 08:05:16.806">URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170707 08:05:16.805" status="PASS" endtime="20170707 08:05:16.806"></status>
</kw>
<status starttime="20170707 08:05:16.804" status="PASS" endtime="20170707 08:05:16.806"></status>
</kw>
<status starttime="20170707 08:05:16.802" status="PASS" endtime="20170707 08:05:16.806"></status>
</kw>
<status starttime="20170707 08:05:16.802" status="PASS" endtime="20170707 08:05:16.806"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170707 08:05:16.881">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170707 08:05:16.882">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170707 08:05:16.806" status="PASS" endtime="20170707 08:05:16.882"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170707 08:05:16.884">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170707 08:05:16.883" status="PASS" endtime="20170707 08:05:16.884"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170707 08:05:16.884">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170707 08:05:16.884" status="PASS" endtime="20170707 08:05:16.885"></status>
</kw>
<status starttime="20170707 08:05:16.884" status="PASS" endtime="20170707 08:05:16.885"></status>
</kw>
<status starttime="20170707 08:05:16.883" status="PASS" endtime="20170707 08:05:16.885"></status>
</kw>
<status starttime="20170707 08:05:16.882" status="PASS" endtime="20170707 08:05:16.885"></status>
</kw>
<msg level="INFO" timestamp="20170707 08:05:16.885">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170707 08:05:16.605" status="PASS" endtime="20170707 08:05:16.885"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 08:05:16.886">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170707 08:05:16.885" status="PASS" endtime="20170707 08:05:16.886"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170707 08:05:16.886">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170707 08:05:16.886">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170707 08:05:16.887">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20170707 08:05:16.886" status="PASS" endtime="20170707 08:05:16.887"></status>
</kw>
<msg level="INFO" timestamp="20170707 08:05:16.887">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status starttime="20170707 08:05:16.605" status="PASS" endtime="20170707 08:05:16.887"></status>
</kw>
<msg level="INFO" timestamp="20170707 08:05:16.887">${host_state} = Running</msg>
<status starttime="20170707 08:05:16.604" status="PASS" endtime="20170707 08:05:16.887"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${host_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170707 08:05:16.888">Off != Running</msg>
<status starttime="20170707 08:05:16.887" status="FAIL" endtime="20170707 08:05:16.888"></status>
</kw>
<status starttime="20170707 08:05:16.603" status="FAIL" endtime="20170707 08:05:16.888"></status>
</kw>
<kw library="state_manager" name="Is Host Off">
<doc>Check if host state is "Off".</doc>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170707 08:05:26.893">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170707 08:05:26.893" status="PASS" endtime="20170707 08:05:26.894"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170707 08:05:26.894">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170707 08:05:26.894" status="PASS" endtime="20170707 08:05:26.894"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170707 08:05:26.895">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170707 08:05:26.895" status="PASS" endtime="20170707 08:05:26.895"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170707 08:05:26.896">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170707 08:05:26.895" status="PASS" endtime="20170707 08:05:26.896"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 08:05:27.079">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170707 08:05:26.896" status="PASS" endtime="20170707 08:05:27.079"></status>
</kw>
<msg level="INFO" timestamp="20170707 08:05:27.079">${status} = PASS</msg>
<msg level="INFO" timestamp="20170707 08:05:27.079">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170707 08:05:26.896" status="PASS" endtime="20170707 08:05:27.079"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 08:05:27.080">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170707 08:05:27.080" status="PASS" endtime="20170707 08:05:27.080"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 08:05:27.081">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170707 08:05:27.081" status="PASS" endtime="20170707 08:05:27.081"></status>
</kw>
<status starttime="20170707 08:05:26.893" status="PASS" endtime="20170707 08:05:27.081"></status>
</kw>
<status starttime="20170707 08:05:26.892" status="PASS" endtime="20170707 08:05:27.081"></status>
</kw>
<status starttime="20170707 08:05:26.891" status="PASS" endtime="20170707 08:05:27.081"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170707 08:05:27.082">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170707 08:05:27.082" status="PASS" endtime="20170707 08:05:27.082"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170707 08:05:27.084">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170707 08:05:27.083" status="PASS" endtime="20170707 08:05:27.084"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170707 08:05:27.085">URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170707 08:05:27.085" status="PASS" endtime="20170707 08:05:27.085"></status>
</kw>
<status starttime="20170707 08:05:27.084" status="PASS" endtime="20170707 08:05:27.085"></status>
</kw>
<status starttime="20170707 08:05:27.083" status="PASS" endtime="20170707 08:05:27.085"></status>
</kw>
<status starttime="20170707 08:05:27.082" status="PASS" endtime="20170707 08:05:27.085"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170707 08:05:27.154">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170707 08:05:27.154">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170707 08:05:27.086" status="PASS" endtime="20170707 08:05:27.154"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170707 08:05:27.156">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170707 08:05:27.156" status="PASS" endtime="20170707 08:05:27.156"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170707 08:05:27.157">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170707 08:05:27.157" status="PASS" endtime="20170707 08:05:27.157"></status>
</kw>
<status starttime="20170707 08:05:27.156" status="PASS" endtime="20170707 08:05:27.157"></status>
</kw>
<status starttime="20170707 08:05:27.155" status="PASS" endtime="20170707 08:05:27.158"></status>
</kw>
<status starttime="20170707 08:05:27.155" status="PASS" endtime="20170707 08:05:27.158"></status>
</kw>
<msg level="INFO" timestamp="20170707 08:05:27.158">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170707 08:05:26.891" status="PASS" endtime="20170707 08:05:27.158"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 08:05:27.158">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170707 08:05:27.158" status="PASS" endtime="20170707 08:05:27.158"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170707 08:05:27.159">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170707 08:05:27.159">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170707 08:05:27.159">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20170707 08:05:27.159" status="PASS" endtime="20170707 08:05:27.159"></status>
</kw>
<msg level="INFO" timestamp="20170707 08:05:27.159">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status starttime="20170707 08:05:26.890" status="PASS" endtime="20170707 08:05:27.159"></status>
</kw>
<msg level="INFO" timestamp="20170707 08:05:27.160">${host_state} = Running</msg>
<status starttime="20170707 08:05:26.889" status="PASS" endtime="20170707 08:05:27.160"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${host_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170707 08:05:27.161">Off != Running</msg>
<status starttime="20170707 08:05:27.160" status="FAIL" endtime="20170707 08:05:27.161"></status>
</kw>
<status starttime="20170707 08:05:26.889" status="FAIL" endtime="20170707 08:05:27.161"></status>
</kw>
<kw library="state_manager" name="Is Host Off">
<doc>Check if host state is "Off".</doc>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170707 08:05:37.166">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170707 08:05:37.165" status="PASS" endtime="20170707 08:05:37.166"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170707 08:05:37.167">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170707 08:05:37.166" status="PASS" endtime="20170707 08:05:37.167"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170707 08:05:37.167">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170707 08:05:37.167" status="PASS" endtime="20170707 08:05:37.167"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170707 08:05:37.168">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170707 08:05:37.168" status="PASS" endtime="20170707 08:05:37.168"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 08:05:37.349">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170707 08:05:37.169" status="PASS" endtime="20170707 08:05:37.349"></status>
</kw>
<msg level="INFO" timestamp="20170707 08:05:37.349">${status} = PASS</msg>
<msg level="INFO" timestamp="20170707 08:05:37.349">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170707 08:05:37.168" status="PASS" endtime="20170707 08:05:37.350"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 08:05:37.350">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170707 08:05:37.350" status="PASS" endtime="20170707 08:05:37.350"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 08:05:37.351">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170707 08:05:37.350" status="PASS" endtime="20170707 08:05:37.351"></status>
</kw>
<status starttime="20170707 08:05:37.165" status="PASS" endtime="20170707 08:05:37.351"></status>
</kw>
<status starttime="20170707 08:05:37.164" status="PASS" endtime="20170707 08:05:37.351"></status>
</kw>
<status starttime="20170707 08:05:37.164" status="PASS" endtime="20170707 08:05:37.351"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170707 08:05:37.352">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170707 08:05:37.351" status="PASS" endtime="20170707 08:05:37.352"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170707 08:05:37.354">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170707 08:05:37.353" status="PASS" endtime="20170707 08:05:37.354"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170707 08:05:37.355">URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170707 08:05:37.355" status="PASS" endtime="20170707 08:05:37.355"></status>
</kw>
<status starttime="20170707 08:05:37.354" status="PASS" endtime="20170707 08:05:37.355"></status>
</kw>
<status starttime="20170707 08:05:37.353" status="PASS" endtime="20170707 08:05:37.355"></status>
</kw>
<status starttime="20170707 08:05:37.352" status="PASS" endtime="20170707 08:05:37.355"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170707 08:05:37.421">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170707 08:05:37.421">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170707 08:05:37.355" status="PASS" endtime="20170707 08:05:37.421"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170707 08:05:37.423">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170707 08:05:37.422" status="PASS" endtime="20170707 08:05:37.423"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170707 08:05:37.424">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170707 08:05:37.423" status="PASS" endtime="20170707 08:05:37.424"></status>
</kw>
<status starttime="20170707 08:05:37.423" status="PASS" endtime="20170707 08:05:37.424"></status>
</kw>
<status starttime="20170707 08:05:37.422" status="PASS" endtime="20170707 08:05:37.424"></status>
</kw>
<status starttime="20170707 08:05:37.421" status="PASS" endtime="20170707 08:05:37.424"></status>
</kw>
<msg level="INFO" timestamp="20170707 08:05:37.424">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170707 08:05:37.163" status="PASS" endtime="20170707 08:05:37.424"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 08:05:37.425">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170707 08:05:37.425" status="PASS" endtime="20170707 08:05:37.425"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170707 08:05:37.425">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170707 08:05:37.425">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170707 08:05:37.426">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20170707 08:05:37.425" status="PASS" endtime="20170707 08:05:37.426"></status>
</kw>
<msg level="INFO" timestamp="20170707 08:05:37.426">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status starttime="20170707 08:05:37.162" status="PASS" endtime="20170707 08:05:37.426"></status>
</kw>
<msg level="INFO" timestamp="20170707 08:05:37.426">${host_state} = Running</msg>
<status starttime="20170707 08:05:37.162" status="PASS" endtime="20170707 08:05:37.426"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${host_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170707 08:05:37.427">Off != Running</msg>
<status starttime="20170707 08:05:37.427" status="FAIL" endtime="20170707 08:05:37.427"></status>
</kw>
<status starttime="20170707 08:05:37.161" status="FAIL" endtime="20170707 08:05:37.427"></status>
</kw>
<kw library="state_manager" name="Is Host Off">
<doc>Check if host state is "Off".</doc>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170707 08:05:47.432">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170707 08:05:47.432" status="PASS" endtime="20170707 08:05:47.433"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170707 08:05:47.433">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170707 08:05:47.433" status="PASS" endtime="20170707 08:05:47.433"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170707 08:05:47.434">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170707 08:05:47.434" status="PASS" endtime="20170707 08:05:47.434"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170707 08:05:47.435">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170707 08:05:47.434" status="PASS" endtime="20170707 08:05:47.435"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 08:05:47.619">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170707 08:05:47.435" status="PASS" endtime="20170707 08:05:47.619"></status>
</kw>
<msg level="INFO" timestamp="20170707 08:05:47.619">${status} = PASS</msg>
<msg level="INFO" timestamp="20170707 08:05:47.619">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170707 08:05:47.435" status="PASS" endtime="20170707 08:05:47.619"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 08:05:47.620">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170707 08:05:47.620" status="PASS" endtime="20170707 08:05:47.620"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 08:05:47.621">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170707 08:05:47.620" status="PASS" endtime="20170707 08:05:47.621"></status>
</kw>
<status starttime="20170707 08:05:47.431" status="PASS" endtime="20170707 08:05:47.621"></status>
</kw>
<status starttime="20170707 08:05:47.431" status="PASS" endtime="20170707 08:05:47.621"></status>
</kw>
<status starttime="20170707 08:05:47.430" status="PASS" endtime="20170707 08:05:47.621"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170707 08:05:47.622">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170707 08:05:47.621" status="PASS" endtime="20170707 08:05:47.622"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170707 08:05:47.624">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170707 08:05:47.623" status="PASS" endtime="20170707 08:05:47.624"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170707 08:05:47.625">URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170707 08:05:47.625" status="PASS" endtime="20170707 08:05:47.625"></status>
</kw>
<status starttime="20170707 08:05:47.624" status="PASS" endtime="20170707 08:05:47.625"></status>
</kw>
<status starttime="20170707 08:05:47.623" status="PASS" endtime="20170707 08:05:47.625"></status>
</kw>
<status starttime="20170707 08:05:47.622" status="PASS" endtime="20170707 08:05:47.625"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170707 08:05:47.691">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170707 08:05:47.691">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170707 08:05:47.625" status="PASS" endtime="20170707 08:05:47.691"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170707 08:05:47.693">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170707 08:05:47.692" status="PASS" endtime="20170707 08:05:47.693"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170707 08:05:47.694">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170707 08:05:47.693" status="PASS" endtime="20170707 08:05:47.694"></status>
</kw>
<status starttime="20170707 08:05:47.693" status="PASS" endtime="20170707 08:05:47.694"></status>
</kw>
<status starttime="20170707 08:05:47.692" status="PASS" endtime="20170707 08:05:47.694"></status>
</kw>
<status starttime="20170707 08:05:47.691" status="PASS" endtime="20170707 08:05:47.694"></status>
</kw>
<msg level="INFO" timestamp="20170707 08:05:47.695">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170707 08:05:47.429" status="PASS" endtime="20170707 08:05:47.695"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 08:05:47.695">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170707 08:05:47.695" status="PASS" endtime="20170707 08:05:47.695"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170707 08:05:47.696">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170707 08:05:47.696">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170707 08:05:47.696">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20170707 08:05:47.696" status="PASS" endtime="20170707 08:05:47.696"></status>
</kw>
<msg level="INFO" timestamp="20170707 08:05:47.696">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status starttime="20170707 08:05:47.429" status="PASS" endtime="20170707 08:05:47.696"></status>
</kw>
<msg level="INFO" timestamp="20170707 08:05:47.697">${host_state} = Running</msg>
<status starttime="20170707 08:05:47.428" status="PASS" endtime="20170707 08:05:47.697"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${host_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170707 08:05:47.697">Off != Running</msg>
<status starttime="20170707 08:05:47.697" status="FAIL" endtime="20170707 08:05:47.697"></status>
</kw>
<status starttime="20170707 08:05:47.428" status="FAIL" endtime="20170707 08:05:47.698"></status>
</kw>
<kw library="state_manager" name="Is Host Off">
<doc>Check if host state is "Off".</doc>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170707 08:05:57.703">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170707 08:05:57.703" status="PASS" endtime="20170707 08:05:57.704"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170707 08:05:57.705">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170707 08:05:57.704" status="PASS" endtime="20170707 08:05:57.705"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170707 08:05:57.706">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170707 08:05:57.705" status="PASS" endtime="20170707 08:05:57.706"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170707 08:05:57.707">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170707 08:05:57.706" status="PASS" endtime="20170707 08:05:57.707"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 08:05:57.889">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170707 08:05:57.708" status="PASS" endtime="20170707 08:05:57.889"></status>
</kw>
<msg level="INFO" timestamp="20170707 08:05:57.889">${status} = PASS</msg>
<msg level="INFO" timestamp="20170707 08:05:57.889">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170707 08:05:57.707" status="PASS" endtime="20170707 08:05:57.889"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 08:05:57.890">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170707 08:05:57.889" status="PASS" endtime="20170707 08:05:57.890"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 08:05:57.891">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170707 08:05:57.890" status="PASS" endtime="20170707 08:05:57.891"></status>
</kw>
<status starttime="20170707 08:05:57.702" status="PASS" endtime="20170707 08:05:57.891"></status>
</kw>
<status starttime="20170707 08:05:57.701" status="PASS" endtime="20170707 08:05:57.891"></status>
</kw>
<status starttime="20170707 08:05:57.700" status="PASS" endtime="20170707 08:05:57.891"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170707 08:05:57.892">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170707 08:05:57.891" status="PASS" endtime="20170707 08:05:57.892"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170707 08:05:57.894">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170707 08:05:57.893" status="PASS" endtime="20170707 08:05:57.894"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170707 08:05:57.895">URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170707 08:05:57.895" status="PASS" endtime="20170707 08:05:57.895"></status>
</kw>
<status starttime="20170707 08:05:57.894" status="PASS" endtime="20170707 08:05:57.895"></status>
</kw>
<status starttime="20170707 08:05:57.892" status="PASS" endtime="20170707 08:05:57.895"></status>
</kw>
<status starttime="20170707 08:05:57.892" status="PASS" endtime="20170707 08:05:57.895"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170707 08:05:57.961">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170707 08:05:57.961">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170707 08:05:57.896" status="PASS" endtime="20170707 08:05:57.961"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170707 08:05:57.963">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170707 08:05:57.962" status="PASS" endtime="20170707 08:05:57.963"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170707 08:05:57.964">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170707 08:05:57.964" status="PASS" endtime="20170707 08:05:57.964"></status>
</kw>
<status starttime="20170707 08:05:57.963" status="PASS" endtime="20170707 08:05:57.964"></status>
</kw>
<status starttime="20170707 08:05:57.962" status="PASS" endtime="20170707 08:05:57.964"></status>
</kw>
<status starttime="20170707 08:05:57.961" status="PASS" endtime="20170707 08:05:57.964"></status>
</kw>
<msg level="INFO" timestamp="20170707 08:05:57.964">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170707 08:05:57.700" status="PASS" endtime="20170707 08:05:57.964"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 08:05:57.965">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170707 08:05:57.965" status="PASS" endtime="20170707 08:05:57.965"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170707 08:05:57.966">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170707 08:05:57.966">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170707 08:05:57.966">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20170707 08:05:57.965" status="PASS" endtime="20170707 08:05:57.966"></status>
</kw>
<msg level="INFO" timestamp="20170707 08:05:57.966">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status starttime="20170707 08:05:57.699" status="PASS" endtime="20170707 08:05:57.966"></status>
</kw>
<msg level="INFO" timestamp="20170707 08:05:57.967">${host_state} = Running</msg>
<status starttime="20170707 08:05:57.699" status="PASS" endtime="20170707 08:05:57.967"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${host_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170707 08:05:57.967">Off != Running</msg>
<status starttime="20170707 08:05:57.967" status="FAIL" endtime="20170707 08:05:57.967"></status>
</kw>
<status starttime="20170707 08:05:57.698" status="FAIL" endtime="20170707 08:05:57.967"></status>
</kw>
<kw library="state_manager" name="Is Host Off">
<doc>Check if host state is "Off".</doc>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170707 08:06:07.972">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170707 08:06:07.972" status="PASS" endtime="20170707 08:06:07.973"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170707 08:06:07.974">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170707 08:06:07.974" status="PASS" endtime="20170707 08:06:07.974"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170707 08:06:07.975">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170707 08:06:07.974" status="PASS" endtime="20170707 08:06:07.975"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170707 08:06:07.976">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170707 08:06:07.975" status="PASS" endtime="20170707 08:06:07.976"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 08:06:08.156">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170707 08:06:07.977" status="PASS" endtime="20170707 08:06:08.157"></status>
</kw>
<msg level="INFO" timestamp="20170707 08:06:08.157">${status} = PASS</msg>
<msg level="INFO" timestamp="20170707 08:06:08.157">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170707 08:06:07.976" status="PASS" endtime="20170707 08:06:08.157"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 08:06:08.158">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170707 08:06:08.157" status="PASS" endtime="20170707 08:06:08.158"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 08:06:08.158">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170707 08:06:08.158" status="PASS" endtime="20170707 08:06:08.159"></status>
</kw>
<status starttime="20170707 08:06:07.971" status="PASS" endtime="20170707 08:06:08.159"></status>
</kw>
<status starttime="20170707 08:06:07.971" status="PASS" endtime="20170707 08:06:08.159"></status>
</kw>
<status starttime="20170707 08:06:07.970" status="PASS" endtime="20170707 08:06:08.159"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170707 08:06:08.159">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170707 08:06:08.159" status="PASS" endtime="20170707 08:06:08.159"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170707 08:06:08.161">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170707 08:06:08.161" status="PASS" endtime="20170707 08:06:08.162"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170707 08:06:08.162">URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170707 08:06:08.162" status="PASS" endtime="20170707 08:06:08.162"></status>
</kw>
<status starttime="20170707 08:06:08.162" status="PASS" endtime="20170707 08:06:08.163"></status>
</kw>
<status starttime="20170707 08:06:08.160" status="PASS" endtime="20170707 08:06:08.163"></status>
</kw>
<status starttime="20170707 08:06:08.160" status="PASS" endtime="20170707 08:06:08.163"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170707 08:06:08.227">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170707 08:06:08.227">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170707 08:06:08.163" status="PASS" endtime="20170707 08:06:08.227"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170707 08:06:08.229">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170707 08:06:08.229" status="PASS" endtime="20170707 08:06:08.229"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170707 08:06:08.230">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170707 08:06:08.230" status="PASS" endtime="20170707 08:06:08.230"></status>
</kw>
<status starttime="20170707 08:06:08.229" status="PASS" endtime="20170707 08:06:08.230"></status>
</kw>
<status starttime="20170707 08:06:08.228" status="PASS" endtime="20170707 08:06:08.230"></status>
</kw>
<status starttime="20170707 08:06:08.228" status="PASS" endtime="20170707 08:06:08.231"></status>
</kw>
<msg level="INFO" timestamp="20170707 08:06:08.231">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170707 08:06:07.970" status="PASS" endtime="20170707 08:06:08.231"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 08:06:08.231">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170707 08:06:08.231" status="PASS" endtime="20170707 08:06:08.231"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170707 08:06:08.232">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170707 08:06:08.232">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170707 08:06:08.232">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20170707 08:06:08.232" status="PASS" endtime="20170707 08:06:08.232"></status>
</kw>
<msg level="INFO" timestamp="20170707 08:06:08.233">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status starttime="20170707 08:06:07.969" status="PASS" endtime="20170707 08:06:08.233"></status>
</kw>
<msg level="INFO" timestamp="20170707 08:06:08.233">${host_state} = Running</msg>
<status starttime="20170707 08:06:07.969" status="PASS" endtime="20170707 08:06:08.233"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${host_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170707 08:06:08.233">Off != Running</msg>
<status starttime="20170707 08:06:08.233" status="FAIL" endtime="20170707 08:06:08.234"></status>
</kw>
<status starttime="20170707 08:06:07.968" status="FAIL" endtime="20170707 08:06:08.234"></status>
</kw>
<kw library="state_manager" name="Is Host Off">
<doc>Check if host state is "Off".</doc>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170707 08:06:18.241">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170707 08:06:18.240" status="PASS" endtime="20170707 08:06:18.241"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170707 08:06:18.242">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170707 08:06:18.241" status="PASS" endtime="20170707 08:06:18.242"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170707 08:06:18.243">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170707 08:06:18.242" status="PASS" endtime="20170707 08:06:18.243"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170707 08:06:18.244">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170707 08:06:18.243" status="PASS" endtime="20170707 08:06:18.244"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 08:06:18.445">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170707 08:06:18.245" status="PASS" endtime="20170707 08:06:18.445"></status>
</kw>
<msg level="INFO" timestamp="20170707 08:06:18.445">${status} = PASS</msg>
<msg level="INFO" timestamp="20170707 08:06:18.445">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170707 08:06:18.244" status="PASS" endtime="20170707 08:06:18.445"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 08:06:18.446">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170707 08:06:18.445" status="PASS" endtime="20170707 08:06:18.446"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 08:06:18.447">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170707 08:06:18.446" status="PASS" endtime="20170707 08:06:18.447"></status>
</kw>
<status starttime="20170707 08:06:18.239" status="PASS" endtime="20170707 08:06:18.447"></status>
</kw>
<status starttime="20170707 08:06:18.239" status="PASS" endtime="20170707 08:06:18.447"></status>
</kw>
<status starttime="20170707 08:06:18.238" status="PASS" endtime="20170707 08:06:18.447"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170707 08:06:18.448">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170707 08:06:18.448" status="PASS" endtime="20170707 08:06:18.448"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170707 08:06:18.451">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170707 08:06:18.450" status="PASS" endtime="20170707 08:06:18.451"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170707 08:06:18.452">URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170707 08:06:18.452" status="PASS" endtime="20170707 08:06:18.452"></status>
</kw>
<status starttime="20170707 08:06:18.452" status="PASS" endtime="20170707 08:06:18.453"></status>
</kw>
<status starttime="20170707 08:06:18.449" status="PASS" endtime="20170707 08:06:18.453"></status>
</kw>
<status starttime="20170707 08:06:18.449" status="PASS" endtime="20170707 08:06:18.453"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170707 08:06:18.527">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170707 08:06:18.527">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170707 08:06:18.453" status="PASS" endtime="20170707 08:06:18.527"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170707 08:06:18.529">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170707 08:06:18.528" status="PASS" endtime="20170707 08:06:18.529"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170707 08:06:18.530">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170707 08:06:18.530" status="PASS" endtime="20170707 08:06:18.530"></status>
</kw>
<status starttime="20170707 08:06:18.529" status="PASS" endtime="20170707 08:06:18.530"></status>
</kw>
<status starttime="20170707 08:06:18.528" status="PASS" endtime="20170707 08:06:18.530"></status>
</kw>
<status starttime="20170707 08:06:18.527" status="PASS" endtime="20170707 08:06:18.530"></status>
</kw>
<msg level="INFO" timestamp="20170707 08:06:18.531">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170707 08:06:18.237" status="PASS" endtime="20170707 08:06:18.531"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 08:06:18.531">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170707 08:06:18.531" status="PASS" endtime="20170707 08:06:18.531"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170707 08:06:18.532">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170707 08:06:18.532">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170707 08:06:18.532">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20170707 08:06:18.531" status="PASS" endtime="20170707 08:06:18.532"></status>
</kw>
<msg level="INFO" timestamp="20170707 08:06:18.532">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status starttime="20170707 08:06:18.235" status="PASS" endtime="20170707 08:06:18.532"></status>
</kw>
<msg level="INFO" timestamp="20170707 08:06:18.532">${host_state} = Running</msg>
<status starttime="20170707 08:06:18.235" status="PASS" endtime="20170707 08:06:18.533"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${host_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170707 08:06:18.533">Off != Running</msg>
<status starttime="20170707 08:06:18.533" status="FAIL" endtime="20170707 08:06:18.533"></status>
</kw>
<status starttime="20170707 08:06:18.234" status="FAIL" endtime="20170707 08:06:18.533"></status>
</kw>
<kw library="state_manager" name="Is Host Off">
<doc>Check if host state is "Off".</doc>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170707 08:06:28.539">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170707 08:06:28.539" status="PASS" endtime="20170707 08:06:28.540"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170707 08:06:28.540">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170707 08:06:28.540" status="PASS" endtime="20170707 08:06:28.540"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170707 08:06:28.541">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170707 08:06:28.541" status="PASS" endtime="20170707 08:06:28.541"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170707 08:06:28.542">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170707 08:06:28.541" status="PASS" endtime="20170707 08:06:28.542"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 08:06:28.845">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170707 08:06:28.542" status="PASS" endtime="20170707 08:06:28.845"></status>
</kw>
<msg level="INFO" timestamp="20170707 08:06:28.845">${status} = PASS</msg>
<msg level="INFO" timestamp="20170707 08:06:28.845">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170707 08:06:28.542" status="PASS" endtime="20170707 08:06:28.845"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 08:06:28.846">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170707 08:06:28.846" status="PASS" endtime="20170707 08:06:28.846"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 08:06:28.847">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170707 08:06:28.846" status="PASS" endtime="20170707 08:06:28.847"></status>
</kw>
<status starttime="20170707 08:06:28.538" status="PASS" endtime="20170707 08:06:28.847"></status>
</kw>
<status starttime="20170707 08:06:28.538" status="PASS" endtime="20170707 08:06:28.847"></status>
</kw>
<status starttime="20170707 08:06:28.537" status="PASS" endtime="20170707 08:06:28.847"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170707 08:06:28.848">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170707 08:06:28.847" status="PASS" endtime="20170707 08:06:28.848"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170707 08:06:28.850">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170707 08:06:28.849" status="PASS" endtime="20170707 08:06:28.850"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170707 08:06:28.851">URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170707 08:06:28.851" status="PASS" endtime="20170707 08:06:28.851"></status>
</kw>
<status starttime="20170707 08:06:28.850" status="PASS" endtime="20170707 08:06:28.851"></status>
</kw>
<status starttime="20170707 08:06:28.849" status="PASS" endtime="20170707 08:06:28.851"></status>
</kw>
<status starttime="20170707 08:06:28.848" status="PASS" endtime="20170707 08:06:28.851"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170707 08:06:28.916">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170707 08:06:28.916">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170707 08:06:28.851" status="PASS" endtime="20170707 08:06:28.916"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170707 08:06:28.918">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170707 08:06:28.917" status="PASS" endtime="20170707 08:06:28.918"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170707 08:06:28.919">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170707 08:06:28.919" status="PASS" endtime="20170707 08:06:28.919"></status>
</kw>
<status starttime="20170707 08:06:28.918" status="PASS" endtime="20170707 08:06:28.919"></status>
</kw>
<status starttime="20170707 08:06:28.917" status="PASS" endtime="20170707 08:06:28.919"></status>
</kw>
<status starttime="20170707 08:06:28.916" status="PASS" endtime="20170707 08:06:28.919"></status>
</kw>
<msg level="INFO" timestamp="20170707 08:06:28.919">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170707 08:06:28.536" status="PASS" endtime="20170707 08:06:28.919"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 08:06:28.920">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170707 08:06:28.920" status="PASS" endtime="20170707 08:06:28.920"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170707 08:06:28.921">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170707 08:06:28.921">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170707 08:06:28.921">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20170707 08:06:28.920" status="PASS" endtime="20170707 08:06:28.921"></status>
</kw>
<msg level="INFO" timestamp="20170707 08:06:28.921">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status starttime="20170707 08:06:28.536" status="PASS" endtime="20170707 08:06:28.921"></status>
</kw>
<msg level="INFO" timestamp="20170707 08:06:28.922">${host_state} = Running</msg>
<status starttime="20170707 08:06:28.535" status="PASS" endtime="20170707 08:06:28.922"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${host_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170707 08:06:28.922">Off != Running</msg>
<status starttime="20170707 08:06:28.922" status="FAIL" endtime="20170707 08:06:28.922"></status>
</kw>
<status starttime="20170707 08:06:28.535" status="FAIL" endtime="20170707 08:06:28.922"></status>
</kw>
<kw library="state_manager" name="Is Host Off">
<doc>Check if host state is "Off".</doc>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170707 08:06:38.928">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170707 08:06:38.928" status="PASS" endtime="20170707 08:06:38.929"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170707 08:06:38.929">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170707 08:06:38.929" status="PASS" endtime="20170707 08:06:38.929"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170707 08:06:38.930">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170707 08:06:38.929" status="PASS" endtime="20170707 08:06:38.930"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170707 08:06:38.930">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170707 08:06:38.930" status="PASS" endtime="20170707 08:06:38.930"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 08:06:39.197">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170707 08:06:38.931" status="PASS" endtime="20170707 08:06:39.197"></status>
</kw>
<msg level="INFO" timestamp="20170707 08:06:39.197">${status} = PASS</msg>
<msg level="INFO" timestamp="20170707 08:06:39.197">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170707 08:06:38.931" status="PASS" endtime="20170707 08:06:39.197"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 08:06:39.198">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170707 08:06:39.197" status="PASS" endtime="20170707 08:06:39.198"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 08:06:39.198">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170707 08:06:39.198" status="PASS" endtime="20170707 08:06:39.198"></status>
</kw>
<status starttime="20170707 08:06:38.927" status="PASS" endtime="20170707 08:06:39.199"></status>
</kw>
<status starttime="20170707 08:06:38.926" status="PASS" endtime="20170707 08:06:39.199"></status>
</kw>
<status starttime="20170707 08:06:38.926" status="PASS" endtime="20170707 08:06:39.199"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170707 08:06:39.199">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170707 08:06:39.199" status="PASS" endtime="20170707 08:06:39.199"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170707 08:06:39.202">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170707 08:06:39.201" status="PASS" endtime="20170707 08:06:39.202"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170707 08:06:39.203">URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170707 08:06:39.202" status="PASS" endtime="20170707 08:06:39.203"></status>
</kw>
<status starttime="20170707 08:06:39.202" status="PASS" endtime="20170707 08:06:39.203"></status>
</kw>
<status starttime="20170707 08:06:39.200" status="PASS" endtime="20170707 08:06:39.203"></status>
</kw>
<status starttime="20170707 08:06:39.200" status="PASS" endtime="20170707 08:06:39.203"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170707 08:06:39.268">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170707 08:06:39.268">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170707 08:06:39.203" status="PASS" endtime="20170707 08:06:39.268"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170707 08:06:39.270">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170707 08:06:39.269" status="PASS" endtime="20170707 08:06:39.270"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170707 08:06:39.271">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170707 08:06:39.270" status="PASS" endtime="20170707 08:06:39.271"></status>
</kw>
<status starttime="20170707 08:06:39.270" status="PASS" endtime="20170707 08:06:39.271"></status>
</kw>
<status starttime="20170707 08:06:39.269" status="PASS" endtime="20170707 08:06:39.271"></status>
</kw>
<status starttime="20170707 08:06:39.268" status="PASS" endtime="20170707 08:06:39.271"></status>
</kw>
<msg level="INFO" timestamp="20170707 08:06:39.272">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170707 08:06:38.925" status="PASS" endtime="20170707 08:06:39.272"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 08:06:39.272">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170707 08:06:39.272" status="PASS" endtime="20170707 08:06:39.272"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170707 08:06:39.273">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170707 08:06:39.273">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170707 08:06:39.273">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20170707 08:06:39.273" status="PASS" endtime="20170707 08:06:39.273"></status>
</kw>
<msg level="INFO" timestamp="20170707 08:06:39.273">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status starttime="20170707 08:06:38.924" status="PASS" endtime="20170707 08:06:39.273"></status>
</kw>
<msg level="INFO" timestamp="20170707 08:06:39.274">${host_state} = Running</msg>
<status starttime="20170707 08:06:38.924" status="PASS" endtime="20170707 08:06:39.274"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${host_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170707 08:06:39.274">Off != Running</msg>
<status starttime="20170707 08:06:39.274" status="FAIL" endtime="20170707 08:06:39.274"></status>
</kw>
<status starttime="20170707 08:06:38.923" status="FAIL" endtime="20170707 08:06:39.274"></status>
</kw>
<msg level="FAIL" timestamp="20170707 08:06:39.275">Keyword 'Is Host Off' failed after retrying for 3 minutes. The last error was: Off != Running</msg>
<status starttime="20170707 08:03:34.700" status="FAIL" endtime="20170707 08:06:39.275"></status>
</kw>
<status starttime="20170707 08:03:33.844" status="FAIL" endtime="20170707 08:06:39.275"></status>
</kw>
<status starttime="20170707 08:03:33.843" status="FAIL" endtime="20170707 08:06:39.275"></status>
</kw>
<status starttime="20170707 08:03:33.842" status="FAIL" endtime="20170707 08:06:39.275"></status>
</kw>
<kw type="teardown" name="Test Exit Logs">
<doc>Collect FFDC and SOL log.</doc>
<kw library="openbmc_ffdc" name="FFDC On Test Case Fail">
<doc>Generic FFDC entry point. Place holder to hook in</doc>
<kw library="state_manager" name="Is Host Quiesced">
<doc>Check if host state is quiesced.</doc>
<assign>
<var>${status}</var>
</assign>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170707 08:06:39.280">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170707 08:06:39.280" status="PASS" endtime="20170707 08:06:39.281"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170707 08:06:39.281">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170707 08:06:39.281" status="PASS" endtime="20170707 08:06:39.281"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170707 08:06:39.282">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170707 08:06:39.281" status="PASS" endtime="20170707 08:06:39.282"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170707 08:06:39.282">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170707 08:06:39.282" status="PASS" endtime="20170707 08:06:39.283"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 08:06:39.462">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170707 08:06:39.283" status="PASS" endtime="20170707 08:06:39.462"></status>
</kw>
<msg level="INFO" timestamp="20170707 08:06:39.462">${status} = PASS</msg>
<msg level="INFO" timestamp="20170707 08:06:39.462">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170707 08:06:39.283" status="PASS" endtime="20170707 08:06:39.462"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 08:06:39.463">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170707 08:06:39.462" status="PASS" endtime="20170707 08:06:39.463"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 08:06:39.463">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170707 08:06:39.463" status="PASS" endtime="20170707 08:06:39.464"></status>
</kw>
<status starttime="20170707 08:06:39.279" status="PASS" endtime="20170707 08:06:39.464"></status>
</kw>
<status starttime="20170707 08:06:39.279" status="PASS" endtime="20170707 08:06:39.464"></status>
</kw>
<status starttime="20170707 08:06:39.278" status="PASS" endtime="20170707 08:06:39.464"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170707 08:06:39.464">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170707 08:06:39.464" status="PASS" endtime="20170707 08:06:39.464"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170707 08:06:39.466">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170707 08:06:39.466" status="PASS" endtime="20170707 08:06:39.467"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170707 08:06:39.468">URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170707 08:06:39.467" status="PASS" endtime="20170707 08:06:39.468"></status>
</kw>
<status starttime="20170707 08:06:39.467" status="PASS" endtime="20170707 08:06:39.468"></status>
</kw>
<status starttime="20170707 08:06:39.465" status="PASS" endtime="20170707 08:06:39.468"></status>
</kw>
<status starttime="20170707 08:06:39.465" status="PASS" endtime="20170707 08:06:39.468"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170707 08:06:39.533">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170707 08:06:39.533">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170707 08:06:39.468" status="PASS" endtime="20170707 08:06:39.533"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170707 08:06:39.535">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170707 08:06:39.535" status="PASS" endtime="20170707 08:06:39.535"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170707 08:06:39.536">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170707 08:06:39.536" status="PASS" endtime="20170707 08:06:39.536"></status>
</kw>
<status starttime="20170707 08:06:39.535" status="PASS" endtime="20170707 08:06:39.537"></status>
</kw>
<status starttime="20170707 08:06:39.534" status="PASS" endtime="20170707 08:06:39.537"></status>
</kw>
<status starttime="20170707 08:06:39.534" status="PASS" endtime="20170707 08:06:39.537"></status>
</kw>
<msg level="INFO" timestamp="20170707 08:06:39.537">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170707 08:06:39.278" status="PASS" endtime="20170707 08:06:39.537"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 08:06:39.538">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170707 08:06:39.537" status="PASS" endtime="20170707 08:06:39.538"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170707 08:06:39.538">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170707 08:06:39.538">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170707 08:06:39.539">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'message': u'200 OK', u'status': u'ok'}</msg>
<status starttime="20170707 08:06:39.538" status="PASS" endtime="20170707 08:06:39.539"></status>
</kw>
<msg level="INFO" timestamp="20170707 08:06:39.539">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status starttime="20170707 08:06:39.277" status="PASS" endtime="20170707 08:06:39.539"></status>
</kw>
<msg level="INFO" timestamp="20170707 08:06:39.539">${host_state} = Running</msg>
<status starttime="20170707 08:06:39.277" status="PASS" endtime="20170707 08:06:39.539"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal</arg>
<arg>${host_state}</arg>
<arg>Quiesced</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${host_state}</arg>
<arg>Quiesced</arg>
</arguments>
<msg level="FAIL" timestamp="20170707 08:06:39.540">Running != Quiesced</msg>
<status starttime="20170707 08:06:39.540" status="FAIL" endtime="20170707 08:06:39.540"></status>
</kw>
<msg level="INFO" timestamp="20170707 08:06:39.540">${status} = False</msg>
<status starttime="20170707 08:06:39.539" status="PASS" endtime="20170707 08:06:39.540"></status>
</kw>
<msg level="INFO" timestamp="20170707 08:06:39.541">${status} = False</msg>
<status starttime="20170707 08:06:39.276" status="PASS" endtime="20170707 08:06:39.541"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${TEST_STATUS}' == 'FAIL' or '${status}'=='True'</arg>
<arg>FFDC</arg>
</arguments>
<kw library="openbmc_ffdc" name="Ffdc">
<doc>Gather First Failure Data Capture (FFDC).</doc>
<kw library="utils" name="Ping Host">
<arguments>
<arg>9.3.21.61</arg>
</arguments>
<kw library="BuiltIn" name="Should Not Be Empty">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${host}</arg>
<arg>msg=No host provided</arg>
</arguments>
<msg level="INFO" timestamp="20170707 08:06:39.562">Length is 9</msg>
<status starttime="20170707 08:06:39.562" status="PASS" endtime="20170707 08:06:39.562"></status>
</kw>
<kw library="OperatingSystem" name="Run And Return Rc And Output">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>ping -c 4 ${host}</arg>
</arguments>
<assign>
<var>${RC}</var>
<var>${output}</var>
</assign>
<msg level="INFO" timestamp="20170707 08:06:39.569">Running command 'ping -c 4 9.3.21.61 2&gt;&amp;1'.</msg>
<msg level="INFO" timestamp="20170707 08:06:42.575">${RC} = 0</msg>
<msg level="INFO" timestamp="20170707 08:06:42.575">${output} = PING 9.3.21.61 (9.3.21.61) 56(84) bytes of data.
64 bytes from 9.3.21.61: icmp_seq=1 ttl=62 time=0.783 ms
64 bytes from 9.3.21.61: icmp_seq=2 ttl=62 time=0.612 ms
64 bytes from 9.3.21.61: icmp_seq=3 t...</msg>
<status starttime="20170707 08:06:39.562" status="PASS" endtime="20170707 08:06:42.575"></status>
</kw>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>RC: ${RC}\nOutput:\n${output}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 08:06:42.578">RC: 0
Output:
PING 9.3.21.61 (9.3.21.61) 56(84) bytes of data.
64 bytes from 9.3.21.61: icmp_seq=1 ttl=62 time=0.783 ms
64 bytes from 9.3.21.61: icmp_seq=2 ttl=62 time=0.612 ms
64 bytes from 9.3.21.61: icmp_seq=3 ttl=62 time=0.561 ms
64 bytes from 9.3.21.61: icmp_seq=4 ttl=62 time=0.583 ms

--- 9.3.21.61 ping statistics ---
4 packets transmitted, 4 received, 0% packet loss, time 3001ms
rtt min/avg/max/mdev = 0.561/0.634/0.783/0.092 ms</msg>
<status starttime="20170707 08:06:42.577" status="PASS" endtime="20170707 08:06:42.578"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${RC}</arg>
<arg>${0}</arg>
</arguments>
<status starttime="20170707 08:06:42.578" status="PASS" endtime="20170707 08:06:42.579"></status>
</kw>
<status starttime="20170707 08:06:39.561" status="PASS" endtime="20170707 08:06:42.579"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Get Current Time Stamp">
<doc>Get the current time stamp data</doc>
<kw library="DateTime" name="Get Current Date">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20170707 08:06:42.593">${cur_time} = 2017-07-07 08:06:42:592994</msg>
<status starttime="20170707 08:06:42.593" status="PASS" endtime="20170707 08:06:42.593"></status>
</kw>
<kw library="openbmc_ffdc_list" name="Get Strip String">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20170707 08:06:42.594">${cur_time} = 20170707080642592994</msg>
<status starttime="20170707 08:06:42.594" status="PASS" endtime="20170707 08:06:42.594"></status>
</kw>
<status starttime="20170707 08:06:42.592" status="PASS" endtime="20170707 08:06:42.594"></status>
</kw>
<msg level="INFO" timestamp="20170707 08:06:42.595">${FFDC_TIME} = 20170707080642592994</msg>
<kw library="openbmc_ffdc_utils" name="Get Test Dir and Name">
<doc>SUITE_NAME and TEST_NAME are automatic variables</doc>
<kw library="openbmc_ffdc_list" name="Get Strip String">
<doc>########################################################################</doc>
<arguments>
<arg>${SUITE_NAME}</arg>
</arguments>
<assign>
<var>${suite_name}</var>
</assign>
<msg level="INFO" timestamp="20170707 08:06:42.609">${suite_name} = TestsTestBasicPoweron</msg>
<status starttime="20170707 08:06:42.609" status="PASS" endtime="20170707 08:06:42.609"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${FFDC_TIME}_</arg>
<arg>${suite_name}</arg>
</arguments>
<assign>
<var>${suite_name}</var>
</assign>
<msg level="INFO" timestamp="20170707 08:06:42.610">${suite_name} = 20170707080642592994_TestsTestBasicPoweron</msg>
<status starttime="20170707 08:06:42.610" status="PASS" endtime="20170707 08:06:42.610"></status>
</kw>
<kw library="openbmc_ffdc_list" name="Get Strip String">
<doc>########################################################################</doc>
<arguments>
<arg>${TEST_NAME}</arg>
</arguments>
<assign>
<var>${test_name}</var>
</assign>
<msg level="INFO" timestamp="20170707 08:06:42.611">${test_name} = PowerOnTest</msg>
<status starttime="20170707 08:06:42.610" status="PASS" endtime="20170707 08:06:42.611"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${FFDC_TIME}_</arg>
<arg>${test_name}</arg>
</arguments>
<assign>
<var>${test_name}</var>
</assign>
<msg level="INFO" timestamp="20170707 08:06:42.611">${test_name} = 20170707080642592994_PowerOnTest</msg>
<status starttime="20170707 08:06:42.611" status="PASS" endtime="20170707 08:06:42.611"></status>
</kw>
<status starttime="20170707 08:06:42.609" status="PASS" endtime="20170707 08:06:42.611"></status>
</kw>
<msg level="INFO" timestamp="20170707 08:06:42.612">${FFDC_DIR_PATH} = /tmp/fspcibld/21345/obmc-robot/logs/20170707080642592994_TestsTestBasicPoweron/20170707080642592994_PowerOnTest/</msg>
<msg level="INFO" timestamp="20170707 08:06:42.612">${FFDC_PREFIX} = 20170707080642592994_</msg>
<msg level="INFO" timestamp="20170707 08:06:42.631">${LOG_PREFIX} = /tmp/fspcibld/21345/obmc-robot/logs/20170707080642592994_TestsTestBasicPoweron/20170707080642592994_PowerOnTest/20170707080642592994_</msg>
<kw library="OperatingSystem" name="Create Directory">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>/tmp/fspcibld/21345/obmc-robot/logs/20170707080642592994_TestsTestBasicPoweron/20170707080642592994_PowerOnTest/</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170707 08:06:42.632">Created directory '&lt;a href="file:///tmp/fspcibld/21345/obmc-robot/logs/20170707080642592994_TestsTestBasicPoweron/20170707080642592994_PowerOnTest"&gt;/tmp/fspcibld/21345/obmc-robot/logs/20170707080642592994_TestsTestBasicPoweron/20170707080642592994_PowerOnTest&lt;/a&gt;'.</msg>
<status starttime="20170707 08:06:42.632" status="PASS" endtime="20170707 08:06:42.632"></status>
</kw>
<msg level="INFO" timestamp="20170707 08:06:42.636">${FFDC_FILE_PATH} = /tmp/fspcibld/21345/obmc-robot/logs/20170707080642592994_TestsTestBasicPoweron/20170707080642592994_PowerOnTest/20170707080642592994_BMC_general.txt</msg>
<kw library="openbmc_ffdc_utils" name="Header Message">
<doc>Write header message to the report document manifest.</doc>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${HEADER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170707 08:06:42.656">Appended to file '&lt;a href="file:///tmp/fspcibld/21345/obmc-robot/logs/20170707080642592994_TestsTestBasicPoweron/20170707080642592994_PowerOnTest/20170707080642592994_BMC_general.txt"&gt;/tmp/fspcibld/21345/obmc-robot/logs/20170707080642592994_TestsTestBasicPoweron/20170707080642592994_PowerOnTest/20170707080642592994_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170707 08:06:42.655" status="PASS" endtime="20170707 08:06:42.656"></status>
</kw>
<status starttime="20170707 08:06:42.655" status="PASS" endtime="20170707 08:06:42.656"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170707 08:06:42.657">Appended to file '&lt;a href="file:///tmp/fspcibld/21345/obmc-robot/logs/20170707080642592994_TestsTestBasicPoweron/20170707080642592994_PowerOnTest/20170707080642592994_BMC_general.txt"&gt;/tmp/fspcibld/21345/obmc-robot/logs/20170707080642592994_TestsTestBasicPoweron/20170707080642592994_PowerOnTest/20170707080642592994_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170707 08:06:42.657" status="PASS" endtime="20170707 08:06:42.657"></status>
</kw>
<status starttime="20170707 08:06:42.656" status="PASS" endtime="20170707 08:06:42.657"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Suite File\t\t: ${SUITE_NAME} ${\n}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170707 08:06:42.658">Appended to file '&lt;a href="file:///tmp/fspcibld/21345/obmc-robot/logs/20170707080642592994_TestsTestBasicPoweron/20170707080642592994_PowerOnTest/20170707080642592994_BMC_general.txt"&gt;/tmp/fspcibld/21345/obmc-robot/logs/20170707080642592994_TestsTestBasicPoweron/20170707080642592994_PowerOnTest/20170707080642592994_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170707 08:06:42.658" status="PASS" endtime="20170707 08:06:42.659"></status>
</kw>
<status starttime="20170707 08:06:42.658" status="PASS" endtime="20170707 08:06:42.659"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Case Name\t\t: ${TEST_NAME}${\n}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170707 08:06:42.660">Appended to file '&lt;a href="file:///tmp/fspcibld/21345/obmc-robot/logs/20170707080642592994_TestsTestBasicPoweron/20170707080642592994_PowerOnTest/20170707080642592994_BMC_general.txt"&gt;/tmp/fspcibld/21345/obmc-robot/logs/20170707080642592994_TestsTestBasicPoweron/20170707080642592994_PowerOnTest/20170707080642592994_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170707 08:06:42.660" status="PASS" endtime="20170707 08:06:42.660"></status>
</kw>
<status starttime="20170707 08:06:42.659" status="PASS" endtime="20170707 08:06:42.660"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Source File\t: ${SUITE_SOURCE}${\n}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170707 08:06:42.661">Appended to file '&lt;a href="file:///tmp/fspcibld/21345/obmc-robot/logs/20170707080642592994_TestsTestBasicPoweron/20170707080642592994_PowerOnTest/20170707080642592994_BMC_general.txt"&gt;/tmp/fspcibld/21345/obmc-robot/logs/20170707080642592994_TestsTestBasicPoweron/20170707080642592994_PowerOnTest/20170707080642592994_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170707 08:06:42.661" status="PASS" endtime="20170707 08:06:42.662"></status>
</kw>
<status starttime="20170707 08:06:42.661" status="PASS" endtime="20170707 08:06:42.662"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Failure Time Stamp\t: ${FFDC_TIME}${\n}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170707 08:06:42.663">Appended to file '&lt;a href="file:///tmp/fspcibld/21345/obmc-robot/logs/20170707080642592994_TestsTestBasicPoweron/20170707080642592994_PowerOnTest/20170707080642592994_BMC_general.txt"&gt;/tmp/fspcibld/21345/obmc-robot/logs/20170707080642592994_TestsTestBasicPoweron/20170707080642592994_PowerOnTest/20170707080642592994_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170707 08:06:42.662" status="PASS" endtime="20170707 08:06:42.663"></status>
</kw>
<status starttime="20170707 08:06:42.662" status="PASS" endtime="20170707 08:06:42.663"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Error Message\t: ${TEST_MESSAGE}${\n}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170707 08:06:42.664">Appended to file '&lt;a href="file:///tmp/fspcibld/21345/obmc-robot/logs/20170707080642592994_TestsTestBasicPoweron/20170707080642592994_PowerOnTest/20170707080642592994_BMC_general.txt"&gt;/tmp/fspcibld/21345/obmc-robot/logs/20170707080642592994_TestsTestBasicPoweron/20170707080642592994_PowerOnTest/20170707080642592994_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170707 08:06:42.664" status="PASS" endtime="20170707 08:06:42.664"></status>
</kw>
<status starttime="20170707 08:06:42.663" status="PASS" endtime="20170707 08:06:42.664"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Documentation\t:${\n}${TEST_DOCUMENTATION}${\n}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170707 08:06:42.665">Appended to file '&lt;a href="file:///tmp/fspcibld/21345/obmc-robot/logs/20170707080642592994_TestsTestBasicPoweron/20170707080642592994_PowerOnTest/20170707080642592994_BMC_general.txt"&gt;/tmp/fspcibld/21345/obmc-robot/logs/20170707080642592994_TestsTestBasicPoweron/20170707080642592994_PowerOnTest/20170707080642592994_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170707 08:06:42.665" status="PASS" endtime="20170707 08:06:42.666"></status>
</kw>
<status starttime="20170707 08:06:42.665" status="PASS" endtime="20170707 08:06:42.666"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170707 08:06:42.667">Appended to file '&lt;a href="file:///tmp/fspcibld/21345/obmc-robot/logs/20170707080642592994_TestsTestBasicPoweron/20170707080642592994_PowerOnTest/20170707080642592994_BMC_general.txt"&gt;/tmp/fspcibld/21345/obmc-robot/logs/20170707080642592994_TestsTestBasicPoweron/20170707080642592994_PowerOnTest/20170707080642592994_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170707 08:06:42.666" status="PASS" endtime="20170707 08:06:42.667"></status>
</kw>
<status starttime="20170707 08:06:42.666" status="PASS" endtime="20170707 08:06:42.667"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Test Setup Info">
<doc>BMC IP, Model and other information</doc>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}-----------------------${\n}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170707 08:06:42.668">Appended to file '&lt;a href="file:///tmp/fspcibld/21345/obmc-robot/logs/20170707080642592994_TestsTestBasicPoweron/20170707080642592994_PowerOnTest/20170707080642592994_BMC_general.txt"&gt;/tmp/fspcibld/21345/obmc-robot/logs/20170707080642592994_TestsTestBasicPoweron/20170707080642592994_PowerOnTest/20170707080642592994_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170707 08:06:42.668" status="PASS" endtime="20170707 08:06:42.669"></status>
</kw>
<status starttime="20170707 08:06:42.667" status="PASS" endtime="20170707 08:06:42.669"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Setup Information:</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170707 08:06:42.670">Appended to file '&lt;a href="file:///tmp/fspcibld/21345/obmc-robot/logs/20170707080642592994_TestsTestBasicPoweron/20170707080642592994_PowerOnTest/20170707080642592994_BMC_general.txt"&gt;/tmp/fspcibld/21345/obmc-robot/logs/20170707080642592994_TestsTestBasicPoweron/20170707080642592994_PowerOnTest/20170707080642592994_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170707 08:06:42.669" status="PASS" endtime="20170707 08:06:42.670"></status>
</kw>
<status starttime="20170707 08:06:42.669" status="PASS" endtime="20170707 08:06:42.670"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}-----------------------${\n}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170707 08:06:42.671">Appended to file '&lt;a href="file:///tmp/fspcibld/21345/obmc-robot/logs/20170707080642592994_TestsTestBasicPoweron/20170707080642592994_PowerOnTest/20170707080642592994_BMC_general.txt"&gt;/tmp/fspcibld/21345/obmc-robot/logs/20170707080642592994_TestsTestBasicPoweron/20170707080642592994_PowerOnTest/20170707080642592994_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170707 08:06:42.671" status="PASS" endtime="20170707 08:06:42.671"></status>
</kw>
<status starttime="20170707 08:06:42.670" status="PASS" endtime="20170707 08:06:42.671"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>OPENBMC HOST \t: ${OPENBMC_HOST}${\n}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170707 08:06:42.672">Appended to file '&lt;a href="file:///tmp/fspcibld/21345/obmc-robot/logs/20170707080642592994_TestsTestBasicPoweron/20170707080642592994_PowerOnTest/20170707080642592994_BMC_general.txt"&gt;/tmp/fspcibld/21345/obmc-robot/logs/20170707080642592994_TestsTestBasicPoweron/20170707080642592994_PowerOnTest/20170707080642592994_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170707 08:06:42.672" status="PASS" endtime="20170707 08:06:42.672"></status>
</kw>
<status starttime="20170707 08:06:42.671" status="PASS" endtime="20170707 08:06:42.673"></status>
</kw>
<kw library="utils" name="Get BMC System Model">
<doc>Get the BMC model from the device tree.</doc>
<assign>
<var>${model_name}</var>
</assign>
<kw library="connection_client" name="Open Connection And Log In">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw library="Collections" name="Dictionary Should Contain Key">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg level="FAIL" timestamp="20170707 08:06:42.675">Dictionary does not contain key 'host'.</msg>
<status starttime="20170707 08:06:42.674" status="FAIL" endtime="20170707 08:06:42.675"></status>
</kw>
<msg level="INFO" timestamp="20170707 08:06:42.675">${has_host} = False</msg>
<status starttime="20170707 08:06:42.674" status="PASS" endtime="20170707 08:06:42.675"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status starttime="20170707 08:06:42.676" status="PASS" endtime="20170707 08:06:42.676"></status>
</kw>
<status starttime="20170707 08:06:42.675" status="PASS" endtime="20170707 08:06:42.676"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<kw library="connection_client" name="User input SSH and HTTPs Ports">
<doc>Update the global SSH and HTTPs port variable for QEMU</doc>
<kw library="BuiltIn" name="Convert To Integer">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${SSH_PORT}</arg>
</arguments>
<assign>
<var>${port_num}</var>
</assign>
<msg level="INFO" timestamp="20170707 08:06:42.678">${port_num} = 22</msg>
<status starttime="20170707 08:06:42.678" status="PASS" endtime="20170707 08:06:42.678"></status>
</kw>
<kw library="BuiltIn" name="Replace Variables">
<doc>Replaces variables in the given text with their current values.</doc>
<arguments>
<arg>${port_num}</arg>
</arguments>
<assign>
<var>${SSH_PORT}</var>
</assign>
<msg level="INFO" timestamp="20170707 08:06:42.678">${SSH_PORT} = 22</msg>
<status starttime="20170707 08:06:42.678" status="PASS" endtime="20170707 08:06:42.678"></status>
</kw>
<kw library="BuiltIn" name="Convert To Integer">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${HTTPS_PORT}</arg>
</arguments>
<assign>
<var>${https_num}</var>
</assign>
<msg level="INFO" timestamp="20170707 08:06:42.679">${https_num} = 443</msg>
<status starttime="20170707 08:06:42.679" status="PASS" endtime="20170707 08:06:42.679"></status>
</kw>
<kw library="BuiltIn" name="Set Global Variable">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${AUTH_URI}</arg>
<arg>https://${OPENBMC_HOST}:${https_num}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 08:06:42.680">${AUTH_URI} = https://9.3.21.61:443</msg>
<status starttime="20170707 08:06:42.679" status="PASS" endtime="20170707 08:06:42.680"></status>
</kw>
<status starttime="20170707 08:06:42.677" status="PASS" endtime="20170707 08:06:42.680"></status>
</kw>
<status starttime="20170707 08:06:42.677" status="PASS" endtime="20170707 08:06:42.680"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw library="Collections" name="Dictionary Should Contain Key">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg level="FAIL" timestamp="20170707 08:06:42.681">Dictionary does not contain key 'port'.</msg>
<status starttime="20170707 08:06:42.681" status="FAIL" endtime="20170707 08:06:42.681"></status>
</kw>
<msg level="INFO" timestamp="20170707 08:06:42.681">${has_port} = False</msg>
<status starttime="20170707 08:06:42.680" status="PASS" endtime="20170707 08:06:42.681"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keywords">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
</arguments>
<status starttime="20170707 08:06:42.683" status="PASS" endtime="20170707 08:06:42.683"></status>
</kw>
<kw library="SSHLibrary" name="Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status starttime="20170707 08:06:42.683" status="PASS" endtime="20170707 08:06:42.684"></status>
</kw>
<status starttime="20170707 08:06:42.682" status="PASS" endtime="20170707 08:06:42.684"></status>
</kw>
<status starttime="20170707 08:06:42.682" status="PASS" endtime="20170707 08:06:42.684"></status>
</kw>
<kw library="SSHLibrary" name="Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 08:06:42.685">Logging into '9.3.21.61:22' as 'root'.</msg>
<msg level="INFO" timestamp="20170707 08:06:44.345">Read output: root@witherspoon:~#</msg>
<status starttime="20170707 08:06:42.684" status="PASS" endtime="20170707 08:06:44.345"></status>
</kw>
<status starttime="20170707 08:06:42.673" status="PASS" endtime="20170707 08:06:44.346"></status>
</kw>
<kw library="SSHLibrary" name="Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>cat ${devicetree_base} | cut -d " " -f 1</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${bmc_model}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170707 08:06:44.346">Executing command 'cat /sys/firmware/devicetree/base/model | cut -d " " -f 1'.</msg>
<msg level="INFO" timestamp="20170707 08:06:44.423">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20170707 08:06:44.423">${bmc_model} = Witherspoon</msg>
<msg level="INFO" timestamp="20170707 08:06:44.423">${stderr} = </msg>
<status starttime="20170707 08:06:44.346" status="PASS" endtime="20170707 08:06:44.423"></status>
</kw>
<kw library="BuiltIn" name="Should Be Empty">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 08:06:44.423">Length is 0</msg>
<status starttime="20170707 08:06:44.423" status="PASS" endtime="20170707 08:06:44.424"></status>
</kw>
<kw library="BuiltIn" name="Should Not Be Empty">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${bmc_model}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 08:06:44.424">Length is 11</msg>
<status starttime="20170707 08:06:44.424" status="PASS" endtime="20170707 08:06:44.424"></status>
</kw>
<msg level="INFO" timestamp="20170707 08:06:44.424">${model_name} = Witherspoon</msg>
<status starttime="20170707 08:06:42.673" status="PASS" endtime="20170707 08:06:44.424"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>SYSTEM TYPE \t: ${model_name}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170707 08:06:44.426">Appended to file '&lt;a href="file:///tmp/fspcibld/21345/obmc-robot/logs/20170707080642592994_TestsTestBasicPoweron/20170707080642592994_PowerOnTest/20170707080642592994_BMC_general.txt"&gt;/tmp/fspcibld/21345/obmc-robot/logs/20170707080642592994_TestsTestBasicPoweron/20170707080642592994_PowerOnTest/20170707080642592994_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170707 08:06:44.426" status="PASS" endtime="20170707 08:06:44.427"></status>
</kw>
<status starttime="20170707 08:06:44.425" status="PASS" endtime="20170707 08:06:44.427"></status>
</kw>
<status starttime="20170707 08:06:42.667" status="PASS" endtime="20170707 08:06:44.427"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${MSG_INTRO}${\n}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170707 08:06:44.429">Appended to file '&lt;a href="file:///tmp/fspcibld/21345/obmc-robot/logs/20170707080642592994_TestsTestBasicPoweron/20170707080642592994_PowerOnTest/20170707080642592994_BMC_general.txt"&gt;/tmp/fspcibld/21345/obmc-robot/logs/20170707080642592994_TestsTestBasicPoweron/20170707080642592994_PowerOnTest/20170707080642592994_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170707 08:06:44.428" status="PASS" endtime="20170707 08:06:44.429"></status>
</kw>
<status starttime="20170707 08:06:44.427" status="PASS" endtime="20170707 08:06:44.429"></status>
</kw>
<kw library="openbmc_ffdc_list" name="Get Ffdc Cmd Index">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg level="INFO" timestamp="20170707 08:06:44.429">@{entries} = [ APPLICATION DATA | DRIVER INFO | BMC DATA ]</msg>
<status starttime="20170707 08:06:44.429" status="PASS" endtime="20170707 08:06:44.429"></status>
</kw>
<kw type="for" name="${index} IN [ @{entries} ]">
<kw type="foritem" name="${index} = APPLICATION DATA">
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>* ${index.upper()}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170707 08:06:44.431">Appended to file '&lt;a href="file:///tmp/fspcibld/21345/obmc-robot/logs/20170707080642592994_TestsTestBasicPoweron/20170707080642592994_PowerOnTest/20170707080642592994_BMC_general.txt"&gt;/tmp/fspcibld/21345/obmc-robot/logs/20170707080642592994_TestsTestBasicPoweron/20170707080642592994_PowerOnTest/20170707080642592994_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170707 08:06:44.430" status="PASS" endtime="20170707 08:06:44.431"></status>
</kw>
<status starttime="20170707 08:06:44.430" status="PASS" endtime="20170707 08:06:44.431"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170707 08:06:44.432">Appended to file '&lt;a href="file:///tmp/fspcibld/21345/obmc-robot/logs/20170707080642592994_TestsTestBasicPoweron/20170707080642592994_PowerOnTest/20170707080642592994_BMC_general.txt"&gt;/tmp/fspcibld/21345/obmc-robot/logs/20170707080642592994_TestsTestBasicPoweron/20170707080642592994_PowerOnTest/20170707080642592994_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170707 08:06:44.432" status="PASS" endtime="20170707 08:06:44.432"></status>
</kw>
<status starttime="20170707 08:06:44.431" status="PASS" endtime="20170707 08:06:44.433"></status>
</kw>
<status starttime="20170707 08:06:44.430" status="PASS" endtime="20170707 08:06:44.433"></status>
</kw>
<kw type="foritem" name="${index} = DRIVER INFO">
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>* ${index.upper()}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170707 08:06:44.434">Appended to file '&lt;a href="file:///tmp/fspcibld/21345/obmc-robot/logs/20170707080642592994_TestsTestBasicPoweron/20170707080642592994_PowerOnTest/20170707080642592994_BMC_general.txt"&gt;/tmp/fspcibld/21345/obmc-robot/logs/20170707080642592994_TestsTestBasicPoweron/20170707080642592994_PowerOnTest/20170707080642592994_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170707 08:06:44.434" status="PASS" endtime="20170707 08:06:44.434"></status>
</kw>
<status starttime="20170707 08:06:44.433" status="PASS" endtime="20170707 08:06:44.434"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170707 08:06:44.435">Appended to file '&lt;a href="file:///tmp/fspcibld/21345/obmc-robot/logs/20170707080642592994_TestsTestBasicPoweron/20170707080642592994_PowerOnTest/20170707080642592994_BMC_general.txt"&gt;/tmp/fspcibld/21345/obmc-robot/logs/20170707080642592994_TestsTestBasicPoweron/20170707080642592994_PowerOnTest/20170707080642592994_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170707 08:06:44.435" status="PASS" endtime="20170707 08:06:44.435"></status>
</kw>
<status starttime="20170707 08:06:44.434" status="PASS" endtime="20170707 08:06:44.435"></status>
</kw>
<status starttime="20170707 08:06:44.433" status="PASS" endtime="20170707 08:06:44.435"></status>
</kw>
<kw type="foritem" name="${index} = BMC DATA">
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>* ${index.upper()}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170707 08:06:44.437">Appended to file '&lt;a href="file:///tmp/fspcibld/21345/obmc-robot/logs/20170707080642592994_TestsTestBasicPoweron/20170707080642592994_PowerOnTest/20170707080642592994_BMC_general.txt"&gt;/tmp/fspcibld/21345/obmc-robot/logs/20170707080642592994_TestsTestBasicPoweron/20170707080642592994_PowerOnTest/20170707080642592994_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170707 08:06:44.436" status="PASS" endtime="20170707 08:06:44.437"></status>
</kw>
<status starttime="20170707 08:06:44.436" status="PASS" endtime="20170707 08:06:44.437"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170707 08:06:44.438">Appended to file '&lt;a href="file:///tmp/fspcibld/21345/obmc-robot/logs/20170707080642592994_TestsTestBasicPoweron/20170707080642592994_PowerOnTest/20170707080642592994_BMC_general.txt"&gt;/tmp/fspcibld/21345/obmc-robot/logs/20170707080642592994_TestsTestBasicPoweron/20170707080642592994_PowerOnTest/20170707080642592994_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170707 08:06:44.438" status="PASS" endtime="20170707 08:06:44.438"></status>
</kw>
<status starttime="20170707 08:06:44.437" status="PASS" endtime="20170707 08:06:44.438"></status>
</kw>
<status starttime="20170707 08:06:44.435" status="PASS" endtime="20170707 08:06:44.438"></status>
</kw>
<status starttime="20170707 08:06:44.429" status="PASS" endtime="20170707 08:06:44.438"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${MSG_DETAIL}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170707 08:06:44.439">Appended to file '&lt;a href="file:///tmp/fspcibld/21345/obmc-robot/logs/20170707080642592994_TestsTestBasicPoweron/20170707080642592994_PowerOnTest/20170707080642592994_BMC_general.txt"&gt;/tmp/fspcibld/21345/obmc-robot/logs/20170707080642592994_TestsTestBasicPoweron/20170707080642592994_PowerOnTest/20170707080642592994_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170707 08:06:44.439" status="PASS" endtime="20170707 08:06:44.439"></status>
</kw>
<status starttime="20170707 08:06:44.438" status="PASS" endtime="20170707 08:06:44.439"></status>
</kw>
<status starttime="20170707 08:06:42.654" status="PASS" endtime="20170707 08:06:44.440"></status>
</kw>
<kw library="openbmc_ffdc_methods" name="Call FFDC Methods">
<doc>Call into FFDC Keyword index list.</doc>
<arguments>
<arg>ffdc_function_list=</arg>
</arguments>
<kw library="openbmc_ffdc_list" name="Get Ffdc Method Index">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg level="INFO" timestamp="20170707 08:06:44.446">@{entries} = [ BMC LOGS ]</msg>
<status starttime="20170707 08:06:44.446" status="PASS" endtime="20170707 08:06:44.446"></status>
</kw>
<kw type="for" name="${index} IN [ @{entries} ]">
<kw type="foritem" name="${index} = BMC LOGS">
<kw library="openbmc_ffdc_methods" name="Method Call Keyword List">
<doc>Iterate the list through keyword index.</doc>
<arguments>
<arg>${index}</arg>
<arg>${ffdc_function_list}</arg>
</arguments>
<kw library="openbmc_ffdc_list" name="Get Ffdc Method Call">
<doc>########################################################################</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<assign>
<var>@{method_list}</var>
</assign>
<msg level="INFO" timestamp="20170707 08:06:44.447">@{method_list} = [ ('Get Request FFDC', 'BMC FFDC Get Requests') | ('SEL Log', 'Collect eSEL Log') | ('Core Files', 'SCP Coredump Files') | ('FFDC Generic Report', 'BMC FFDC Manifest') | ('OS FFDC', 'OS FFDC Files') |...</msg>
<status starttime="20170707 08:06:44.447" status="PASS" endtime="20170707 08:06:44.447"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${ffdc_function_list}' == '${EMPTY}'</arg>
<arg>Get FFDC Method Desc</arg>
<arg>${index}</arg>
<arg>ELSE</arg>
<arg>Split String</arg>
<arg>${ffdc_function_list}</arg>
<arg>separator=:</arg>
</arguments>
<assign>
<var>@{ffdc_function_list}</var>
</assign>
<kw library="openbmc_ffdc_list" name="Get Ffdc Method Desc">
<doc>########################################################################</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<status starttime="20170707 08:06:44.448" status="PASS" endtime="20170707 08:06:44.449"></status>
</kw>
<msg level="INFO" timestamp="20170707 08:06:44.449">@{ffdc_function_list} = [ Get Request FFDC | SEL Log | Core Files | FFDC Generic Report | OS FFDC | BMC Specific Files ]</msg>
<status starttime="20170707 08:06:44.447" status="PASS" endtime="20170707 08:06:44.449"></status>
</kw>
<kw type="for" name="${method} IN [ @{method_list} ]">
<kw type="foritem" name="${method} = ('Get Request FFDC', 'BMC FFDC Get Requests')">
<kw library="openbmc_ffdc_methods" name="Execute Keyword Method">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw library="Collections" name="List Should Contain Value">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status starttime="20170707 08:06:44.450" status="PASS" endtime="20170707 08:06:44.451"></status>
</kw>
<msg level="INFO" timestamp="20170707 08:06:44.451">${status} = PASS</msg>
<msg level="INFO" timestamp="20170707 08:06:44.451">${ret_values} = None</msg>
<status starttime="20170707 08:06:44.450" status="PASS" endtime="20170707 08:06:44.451"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status starttime="20170707 08:06:44.451" status="PASS" endtime="20170707 08:06:44.451"></status>
</kw>
<kw library="gen_robot_keyword" name="Run Key">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw library="openbmc_ffdc_methods" name="BMC FFDC Get Requests">
<doc>Get the command list and iterate</doc>
<kw library="connection_client" name="Open Connection And Log In">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw library="Collections" name="Dictionary Should Contain Key">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg level="FAIL" timestamp="20170707 08:06:44.478">Dictionary does not contain key 'host'.</msg>
<status starttime="20170707 08:06:44.477" status="FAIL" endtime="20170707 08:06:44.478"></status>
</kw>
<msg level="INFO" timestamp="20170707 08:06:44.478">${has_host} = False</msg>
<status starttime="20170707 08:06:44.477" status="PASS" endtime="20170707 08:06:44.478"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status starttime="20170707 08:06:44.479" status="PASS" endtime="20170707 08:06:44.479"></status>
</kw>
<status starttime="20170707 08:06:44.478" status="PASS" endtime="20170707 08:06:44.479"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<kw library="connection_client" name="User input SSH and HTTPs Ports">
<doc>Update the global SSH and HTTPs port variable for QEMU</doc>
<kw library="BuiltIn" name="Convert To Integer">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${SSH_PORT}</arg>
</arguments>
<assign>
<var>${port_num}</var>
</assign>
<msg level="INFO" timestamp="20170707 08:06:44.481">${port_num} = 22</msg>
<status starttime="20170707 08:06:44.480" status="PASS" endtime="20170707 08:06:44.481"></status>
</kw>
<kw library="BuiltIn" name="Replace Variables">
<doc>Replaces variables in the given text with their current values.</doc>
<arguments>
<arg>${port_num}</arg>
</arguments>
<assign>
<var>${SSH_PORT}</var>
</assign>
<msg level="INFO" timestamp="20170707 08:06:44.481">${SSH_PORT} = 22</msg>
<status starttime="20170707 08:06:44.481" status="PASS" endtime="20170707 08:06:44.481"></status>
</kw>
<kw library="BuiltIn" name="Convert To Integer">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${HTTPS_PORT}</arg>
</arguments>
<assign>
<var>${https_num}</var>
</assign>
<msg level="INFO" timestamp="20170707 08:06:44.482">${https_num} = 443</msg>
<status starttime="20170707 08:06:44.481" status="PASS" endtime="20170707 08:06:44.482"></status>
</kw>
<kw library="BuiltIn" name="Set Global Variable">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${AUTH_URI}</arg>
<arg>https://${OPENBMC_HOST}:${https_num}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 08:06:44.483">${AUTH_URI} = https://9.3.21.61:443</msg>
<status starttime="20170707 08:06:44.482" status="PASS" endtime="20170707 08:06:44.483"></status>
</kw>
<status starttime="20170707 08:06:44.480" status="PASS" endtime="20170707 08:06:44.483"></status>
</kw>
<status starttime="20170707 08:06:44.479" status="PASS" endtime="20170707 08:06:44.483"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw library="Collections" name="Dictionary Should Contain Key">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg level="FAIL" timestamp="20170707 08:06:44.484">Dictionary does not contain key 'port'.</msg>
<status starttime="20170707 08:06:44.484" status="FAIL" endtime="20170707 08:06:44.484"></status>
</kw>
<msg level="INFO" timestamp="20170707 08:06:44.484">${has_port} = False</msg>
<status starttime="20170707 08:06:44.483" status="PASS" endtime="20170707 08:06:44.484"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keywords">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
</arguments>
<status starttime="20170707 08:06:44.486" status="PASS" endtime="20170707 08:06:44.486"></status>
</kw>
<kw library="SSHLibrary" name="Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status starttime="20170707 08:06:44.486" status="PASS" endtime="20170707 08:06:44.487"></status>
</kw>
<status starttime="20170707 08:06:44.485" status="PASS" endtime="20170707 08:06:44.487"></status>
</kw>
<status starttime="20170707 08:06:44.484" status="PASS" endtime="20170707 08:06:44.487"></status>
</kw>
<kw library="SSHLibrary" name="Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 08:06:44.487">Logging into '9.3.21.61:22' as 'root'.</msg>
<msg level="INFO" timestamp="20170707 08:06:46.229">Read output: root@witherspoon:~#</msg>
<status starttime="20170707 08:06:44.487" status="PASS" endtime="20170707 08:06:46.229"></status>
</kw>
<status starttime="20170707 08:06:44.476" status="PASS" endtime="20170707 08:06:46.230"></status>
</kw>
<kw library="openbmc_ffdc_list" name="Get Ffdc Get Request Index">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg level="INFO" timestamp="20170707 08:06:46.230">@{entries} = [ GET REQUESTS ]</msg>
<status starttime="20170707 08:06:46.230" status="PASS" endtime="20170707 08:06:46.230"></status>
</kw>
<kw type="for" name="${index} IN [ @{entries} ]">
<kw type="foritem" name="${index} = GET REQUESTS">
<kw library="openbmc_ffdc_methods" name="Log FFDC Get Requests">
<doc>Create file in current FFDC log directory.</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw library="openbmc_ffdc_list" name="Get Ffdc Get Request">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg level="INFO" timestamp="20170707 08:06:46.232">@{cmd_list} = [ ('BMC_record_log', '/org/openbmc/control/led/enumerate') | ('BMC_elog', '/xyz/openbmc_project/logging/entry/enumerate') | ('BMC_led', '/org/openbmc/records/events/enumerate') | ('BMC_inventory', '/x...</msg>
<status starttime="20170707 08:06:46.231" status="PASS" endtime="20170707 08:06:46.232"></status>
</kw>
<kw type="for" name="${cmd} IN [ @{cmd_list} ]">
<kw type="foritem" name="${cmd} = ('BMC_record_log', '/org/openbmc/control/led/enumerate')">
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20170707 08:06:46.233">${logpath} = /tmp/fspcibld/21345/obmc-robot/logs/20170707080642592994_TestsTestBasicPoweron/20170707080642592994_PowerOnTest/20170707080642592994_BMC_record_log.txt</msg>
<status starttime="20170707 08:06:46.232" status="PASS" endtime="20170707 08:06:46.233"></status>
</kw>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170707 08:06:46.236">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170707 08:06:46.235" status="PASS" endtime="20170707 08:06:46.237"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170707 08:06:46.238">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170707 08:06:46.237" status="PASS" endtime="20170707 08:06:46.238"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170707 08:06:46.239">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170707 08:06:46.238" status="PASS" endtime="20170707 08:06:46.239"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170707 08:06:46.239">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170707 08:06:46.239" status="PASS" endtime="20170707 08:06:46.239"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 08:06:46.420">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170707 08:06:46.240" status="PASS" endtime="20170707 08:06:46.420"></status>
</kw>
<msg level="INFO" timestamp="20170707 08:06:46.420">${status} = PASS</msg>
<msg level="INFO" timestamp="20170707 08:06:46.420">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170707 08:06:46.240" status="PASS" endtime="20170707 08:06:46.420"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 08:06:46.421">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170707 08:06:46.421" status="PASS" endtime="20170707 08:06:46.421"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 08:06:46.422">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170707 08:06:46.422" status="PASS" endtime="20170707 08:06:46.422"></status>
</kw>
<status starttime="20170707 08:06:46.234" status="PASS" endtime="20170707 08:06:46.423"></status>
</kw>
<status starttime="20170707 08:06:46.234" status="PASS" endtime="20170707 08:06:46.423"></status>
</kw>
<status starttime="20170707 08:06:46.233" status="PASS" endtime="20170707 08:06:46.423"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170707 08:06:46.424">${base_uri} = /org/openbmc/control/led/enumerate</msg>
<status starttime="20170707 08:06:46.423" status="PASS" endtime="20170707 08:06:46.424"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status starttime="20170707 08:06:46.424" status="PASS" endtime="20170707 08:06:46.425"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170707 08:06:46.469">Get Request using : alias=openbmc, uri=/org/openbmc/control/led/enumerate, headers=None json=None</msg>
<msg level="INFO" timestamp="20170707 08:06:46.469">${ret} = &lt;Response [404]&gt;</msg>
<status starttime="20170707 08:06:46.425" status="PASS" endtime="20170707 08:06:46.469"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status starttime="20170707 08:06:46.469" status="PASS" endtime="20170707 08:06:46.470"></status>
</kw>
<msg level="INFO" timestamp="20170707 08:06:46.470">${resp} = &lt;Response [404]&gt;</msg>
<status starttime="20170707 08:06:46.233" status="PASS" endtime="20170707 08:06:46.470"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 08:06:46.471">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg level="FAIL" timestamp="20170707 08:06:46.471">404 != 200</msg>
<status starttime="20170707 08:06:46.471" status="FAIL" endtime="20170707 08:06:46.471"></status>
</kw>
<msg level="INFO" timestamp="20170707 08:06:46.472">${status} = False</msg>
<status starttime="20170707 08:06:46.470" status="PASS" endtime="20170707 08:06:46.472"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<kw library="BuiltIn" name="Continue For Loop">
<doc>Skips the current for loop iteration and continues from the next.</doc>
<msg level="INFO" timestamp="20170707 08:06:46.472">Continuing for loop from the next iteration.</msg>
<status starttime="20170707 08:06:46.472" status="PASS" endtime="20170707 08:06:46.473"></status>
</kw>
<status starttime="20170707 08:06:46.472" status="PASS" endtime="20170707 08:06:46.473"></status>
</kw>
<status starttime="20170707 08:06:46.232" status="PASS" endtime="20170707 08:06:46.473"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_elog', '/xyz/openbmc_project/logging/entry/enumerate')">
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20170707 08:06:46.473">${logpath} = /tmp/fspcibld/21345/obmc-robot/logs/20170707080642592994_TestsTestBasicPoweron/20170707080642592994_PowerOnTest/20170707080642592994_BMC_elog.txt</msg>
<status starttime="20170707 08:06:46.473" status="PASS" endtime="20170707 08:06:46.473"></status>
</kw>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170707 08:06:46.476">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170707 08:06:46.476" status="PASS" endtime="20170707 08:06:46.477"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170707 08:06:46.478">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170707 08:06:46.477" status="PASS" endtime="20170707 08:06:46.478"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170707 08:06:46.478">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170707 08:06:46.478" status="PASS" endtime="20170707 08:06:46.478"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170707 08:06:46.479">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170707 08:06:46.478" status="PASS" endtime="20170707 08:06:46.479"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 08:06:46.659">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170707 08:06:46.479" status="PASS" endtime="20170707 08:06:46.659"></status>
</kw>
<msg level="INFO" timestamp="20170707 08:06:46.659">${status} = PASS</msg>
<msg level="INFO" timestamp="20170707 08:06:46.659">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170707 08:06:46.479" status="PASS" endtime="20170707 08:06:46.659"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 08:06:46.660">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170707 08:06:46.660" status="PASS" endtime="20170707 08:06:46.660"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 08:06:46.661">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170707 08:06:46.660" status="PASS" endtime="20170707 08:06:46.661"></status>
</kw>
<status starttime="20170707 08:06:46.475" status="PASS" endtime="20170707 08:06:46.661"></status>
</kw>
<status starttime="20170707 08:06:46.475" status="PASS" endtime="20170707 08:06:46.661"></status>
</kw>
<status starttime="20170707 08:06:46.474" status="PASS" endtime="20170707 08:06:46.661"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170707 08:06:46.662">${base_uri} = /xyz/openbmc_project/logging/entry/enumerate</msg>
<status starttime="20170707 08:06:46.661" status="PASS" endtime="20170707 08:06:46.662"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status starttime="20170707 08:06:46.662" status="PASS" endtime="20170707 08:06:46.662"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170707 08:06:46.707">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry/enumerate, headers=None json=None</msg>
<msg level="INFO" timestamp="20170707 08:06:46.707">${ret} = &lt;Response [404]&gt;</msg>
<status starttime="20170707 08:06:46.663" status="PASS" endtime="20170707 08:06:46.707"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status starttime="20170707 08:06:46.707" status="PASS" endtime="20170707 08:06:46.708"></status>
</kw>
<msg level="INFO" timestamp="20170707 08:06:46.708">${resp} = &lt;Response [404]&gt;</msg>
<status starttime="20170707 08:06:46.474" status="PASS" endtime="20170707 08:06:46.708"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 08:06:46.709">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg level="FAIL" timestamp="20170707 08:06:46.709">404 != 200</msg>
<status starttime="20170707 08:06:46.708" status="FAIL" endtime="20170707 08:06:46.709"></status>
</kw>
<msg level="INFO" timestamp="20170707 08:06:46.709">${status} = False</msg>
<status starttime="20170707 08:06:46.708" status="PASS" endtime="20170707 08:06:46.709"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<kw library="BuiltIn" name="Continue For Loop">
<doc>Skips the current for loop iteration and continues from the next.</doc>
<msg level="INFO" timestamp="20170707 08:06:46.710">Continuing for loop from the next iteration.</msg>
<status starttime="20170707 08:06:46.710" status="PASS" endtime="20170707 08:06:46.710"></status>
</kw>
<status starttime="20170707 08:06:46.709" status="PASS" endtime="20170707 08:06:46.710"></status>
</kw>
<status starttime="20170707 08:06:46.473" status="PASS" endtime="20170707 08:06:46.710"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_led', '/org/openbmc/records/events/enumerate')">
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20170707 08:06:46.711">${logpath} = /tmp/fspcibld/21345/obmc-robot/logs/20170707080642592994_TestsTestBasicPoweron/20170707080642592994_PowerOnTest/20170707080642592994_BMC_led.txt</msg>
<status starttime="20170707 08:06:46.711" status="PASS" endtime="20170707 08:06:46.711"></status>
</kw>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170707 08:06:46.715">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170707 08:06:46.714" status="PASS" endtime="20170707 08:06:46.717"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170707 08:06:46.718">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170707 08:06:46.717" status="PASS" endtime="20170707 08:06:46.718"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170707 08:06:46.719">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170707 08:06:46.718" status="PASS" endtime="20170707 08:06:46.719"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170707 08:06:46.720">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170707 08:06:46.719" status="PASS" endtime="20170707 08:06:46.720"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 08:06:46.910">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170707 08:06:46.721" status="PASS" endtime="20170707 08:06:46.910"></status>
</kw>
<msg level="INFO" timestamp="20170707 08:06:46.910">${status} = PASS</msg>
<msg level="INFO" timestamp="20170707 08:06:46.910">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170707 08:06:46.720" status="PASS" endtime="20170707 08:06:46.910"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 08:06:46.911">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170707 08:06:46.911" status="PASS" endtime="20170707 08:06:46.911"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 08:06:46.912">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170707 08:06:46.911" status="PASS" endtime="20170707 08:06:46.912"></status>
</kw>
<status starttime="20170707 08:06:46.713" status="PASS" endtime="20170707 08:06:46.912"></status>
</kw>
<status starttime="20170707 08:06:46.713" status="PASS" endtime="20170707 08:06:46.912"></status>
</kw>
<status starttime="20170707 08:06:46.712" status="PASS" endtime="20170707 08:06:46.912"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170707 08:06:46.913">${base_uri} = /org/openbmc/records/events/enumerate</msg>
<status starttime="20170707 08:06:46.912" status="PASS" endtime="20170707 08:06:46.913"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status starttime="20170707 08:06:46.913" status="PASS" endtime="20170707 08:06:46.913"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170707 08:06:46.960">Get Request using : alias=openbmc, uri=/org/openbmc/records/events/enumerate, headers=None json=None</msg>
<msg level="INFO" timestamp="20170707 08:06:46.960">${ret} = &lt;Response [404]&gt;</msg>
<status starttime="20170707 08:06:46.913" status="PASS" endtime="20170707 08:06:46.960"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status starttime="20170707 08:06:46.961" status="PASS" endtime="20170707 08:06:46.961"></status>
</kw>
<msg level="INFO" timestamp="20170707 08:06:46.961">${resp} = &lt;Response [404]&gt;</msg>
<status starttime="20170707 08:06:46.711" status="PASS" endtime="20170707 08:06:46.961"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 08:06:46.962">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg level="FAIL" timestamp="20170707 08:06:46.962">404 != 200</msg>
<status starttime="20170707 08:06:46.962" status="FAIL" endtime="20170707 08:06:46.962"></status>
</kw>
<msg level="INFO" timestamp="20170707 08:06:46.963">${status} = False</msg>
<status starttime="20170707 08:06:46.961" status="PASS" endtime="20170707 08:06:46.963"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<kw library="BuiltIn" name="Continue For Loop">
<doc>Skips the current for loop iteration and continues from the next.</doc>
<msg level="INFO" timestamp="20170707 08:06:46.963">Continuing for loop from the next iteration.</msg>
<status starttime="20170707 08:06:46.963" status="PASS" endtime="20170707 08:06:46.964"></status>
</kw>
<status starttime="20170707 08:06:46.963" status="PASS" endtime="20170707 08:06:46.964"></status>
</kw>
<status starttime="20170707 08:06:46.710" status="PASS" endtime="20170707 08:06:46.964"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_inventory', '/xyz/openbmc_project/inventory/enumerate')">
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20170707 08:06:46.964">${logpath} = /tmp/fspcibld/21345/obmc-robot/logs/20170707080642592994_TestsTestBasicPoweron/20170707080642592994_PowerOnTest/20170707080642592994_BMC_inventory.txt</msg>
<status starttime="20170707 08:06:46.964" status="PASS" endtime="20170707 08:06:46.965"></status>
</kw>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170707 08:06:46.967">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170707 08:06:46.967" status="PASS" endtime="20170707 08:06:46.996"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170707 08:06:46.997">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170707 08:06:46.996" status="PASS" endtime="20170707 08:06:46.997"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170707 08:06:46.997">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170707 08:06:46.997" status="PASS" endtime="20170707 08:06:46.997"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170707 08:06:46.998">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170707 08:06:46.998" status="PASS" endtime="20170707 08:06:46.998"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 08:06:47.283">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170707 08:06:46.999" status="PASS" endtime="20170707 08:06:47.283"></status>
</kw>
<msg level="INFO" timestamp="20170707 08:06:47.283">${status} = PASS</msg>
<msg level="INFO" timestamp="20170707 08:06:47.283">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170707 08:06:46.998" status="PASS" endtime="20170707 08:06:47.283"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 08:06:47.284">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170707 08:06:47.283" status="PASS" endtime="20170707 08:06:47.284"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 08:06:47.284">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170707 08:06:47.284" status="PASS" endtime="20170707 08:06:47.284"></status>
</kw>
<status starttime="20170707 08:06:46.966" status="PASS" endtime="20170707 08:06:47.284"></status>
</kw>
<status starttime="20170707 08:06:46.966" status="PASS" endtime="20170707 08:06:47.285"></status>
</kw>
<status starttime="20170707 08:06:46.965" status="PASS" endtime="20170707 08:06:47.285"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170707 08:06:47.285">${base_uri} = /xyz/openbmc_project/inventory/enumerate</msg>
<status starttime="20170707 08:06:47.285" status="PASS" endtime="20170707 08:06:47.285"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status starttime="20170707 08:06:47.285" status="PASS" endtime="20170707 08:06:47.286"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170707 08:06:49.109">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/inventory/enumerate, headers=None json=None</msg>
<msg level="INFO" timestamp="20170707 08:06:49.109">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170707 08:06:47.286" status="PASS" endtime="20170707 08:06:49.109"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status starttime="20170707 08:06:49.109" status="PASS" endtime="20170707 08:06:49.110"></status>
</kw>
<msg level="INFO" timestamp="20170707 08:06:49.110">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170707 08:06:46.965" status="PASS" endtime="20170707 08:06:49.110"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 08:06:49.111">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170707 08:06:49.111" status="PASS" endtime="20170707 08:06:49.111"></status>
</kw>
<msg level="INFO" timestamp="20170707 08:06:49.111">${status} = True</msg>
<status starttime="20170707 08:06:49.110" status="PASS" endtime="20170707 08:06:49.111"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status starttime="20170707 08:06:49.112" status="PASS" endtime="20170707 08:06:49.112"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg level="INFO" timestamp="20170707 08:06:49.115">To JSON using : content={
  "data": {
    "/xyz/openbmc_project/inventory/system": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 0, 
      "Manufacturer": "", 
      "Model": "8335-GTC", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "", 
      "SerialNumber": "13186FA"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis": {
      "AirCooled": 1, 
      "WaterCooled": 1
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard": {
      "BuildDate": "", 
      "Manufacturer": "0000000000000000", 
      "Model": "", 
      "PartNumber": "00VK614         ", 
      "Present": 0, 
      "PrettyName": "SYSTEM PLANAR   ", 
      "SerialNumber": "YL30UF759004    "
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc": {
      "BuildDate": "", 
      "FieldReplaceable": 0, 
      "Manufacturer": "IBM", 
      "Model": "", 
      "PartNumber": "01DH118", 
      "Present": 1, 
      "PrettyName": "BMC PLANAR  ", 
      "SerialNumber": "000000000000"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc/ethernet": {
      "FieldReplaceable": 0, 
      "MACAddress": "00:00:00:00:00:00", 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "IBM", 
      "Model": "", 
      "PartNumber": "01HL983", 
      "Present": 1, 
      "PrettyName": "PROCESSOR MODULE", 
      "SerialNumber": "YA3933820456", 
      "Version": "10"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core0": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core1": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core10": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core11": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core12": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core13": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core14": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core15": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core16": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core17": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core18": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core19": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core2": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core20": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core21": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core22": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core23": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core3": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core4": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core5": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core6": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core7": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core8": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core9": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "IBM", 
      "Model": "", 
      "PartNumber": "01HL983", 
      "Present": 1, 
      "PrettyName": "PROCESSOR MODULE", 
      "SerialNumber": "YA3933817667", 
      "Version": "10"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core0": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core1": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core10": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core11": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core12": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core13": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core14": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core15": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core16": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core17": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core18": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core19": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core2": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core20": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core21": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core22": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core23": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core3": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core4": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core5": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core6": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core7": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core8": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core9": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm0": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "18ASF1G72PZ-2G6B1   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x16c7bbd9", 
      "Version": "0x31"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm1": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "18ASF1G72PZ-2G6B1   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x16c7b8a5", 
      "Version": "0x31"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm10": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm11": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm12": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm13": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm14": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "18ASF1G72PZ-2G6B1   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x16c7b974", 
      "Version": "0x31"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm15": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm2": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm3": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm4": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm5": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm6": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "18ASF1G72PZ-2G6B1   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x16c7bbab", 
      "Version": "0x31"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm7": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "18ASF1G72PZ-2G6B1   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x16c7e64d", 
      "Version": "0x31"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm8": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "18ASF1G72PZ-2G6B1   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x16c7bbea", 
      "Version": "0x31"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm9": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "18ASF1G72PZ-2G6B1   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x16c7bbcf", 
      "Version": "0x31"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/fan0": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": "fan0"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/fan1": {
      "Functional": 0, 
      "Present": 1, 
      "PrettyName": "fan1"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/fan2": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": "fan2"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/fan3": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": "fan3"
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170707 08:06:49.115">To JSON using : pretty_print=True </msg>
<msg level="INFO" timestamp="20170707 08:06:49.115">${jsondata} = {
    "data": {
        "/xyz/openbmc_project/inventory/system": {
            "BuildDate": "",
            "Cached": 0,
            "FieldReplaceable": 0,
            "Manufacturer": "",
            ...</msg>
<status starttime="20170707 08:06:49.112" status="PASS" endtime="20170707 08:06:49.115"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170707 08:06:49.117">Appended to file '&lt;a href="file:///tmp/fspcibld/21345/obmc-robot/logs/20170707080642592994_TestsTestBasicPoweron/20170707080642592994_PowerOnTest/20170707080642592994_BMC_inventory.txt"&gt;/tmp/fspcibld/21345/obmc-robot/logs/20170707080642592994_TestsTestBasicPoweron/20170707080642592994_PowerOnTest/20170707080642592994_BMC_inventory.txt&lt;/a&gt;'.</msg>
<status starttime="20170707 08:06:49.116" status="PASS" endtime="20170707 08:06:49.117"></status>
</kw>
<status starttime="20170707 08:06:49.115" status="PASS" endtime="20170707 08:06:49.117"></status>
</kw>
<status starttime="20170707 08:06:46.964" status="PASS" endtime="20170707 08:06:49.117"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_sensor_list', '/org/openbmc/sensors/enumerate')">
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20170707 08:06:49.118">${logpath} = /tmp/fspcibld/21345/obmc-robot/logs/20170707080642592994_TestsTestBasicPoweron/20170707080642592994_PowerOnTest/20170707080642592994_BMC_sensor_list.txt</msg>
<status starttime="20170707 08:06:49.118" status="PASS" endtime="20170707 08:06:49.118"></status>
</kw>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170707 08:06:49.121">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170707 08:06:49.121" status="PASS" endtime="20170707 08:06:49.121"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170707 08:06:49.122">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170707 08:06:49.122" status="PASS" endtime="20170707 08:06:49.122"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170707 08:06:49.123">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170707 08:06:49.122" status="PASS" endtime="20170707 08:06:49.123"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170707 08:06:49.123">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170707 08:06:49.123" status="PASS" endtime="20170707 08:06:49.123"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 08:06:49.303">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170707 08:06:49.124" status="PASS" endtime="20170707 08:06:49.303"></status>
</kw>
<msg level="INFO" timestamp="20170707 08:06:49.304">${status} = PASS</msg>
<msg level="INFO" timestamp="20170707 08:06:49.304">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170707 08:06:49.124" status="PASS" endtime="20170707 08:06:49.304"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 08:06:49.304">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170707 08:06:49.304" status="PASS" endtime="20170707 08:06:49.304"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 08:06:49.305">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170707 08:06:49.305" status="PASS" endtime="20170707 08:06:49.305"></status>
</kw>
<status starttime="20170707 08:06:49.120" status="PASS" endtime="20170707 08:06:49.305"></status>
</kw>
<status starttime="20170707 08:06:49.120" status="PASS" endtime="20170707 08:06:49.305"></status>
</kw>
<status starttime="20170707 08:06:49.119" status="PASS" endtime="20170707 08:06:49.305"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170707 08:06:49.306">${base_uri} = /org/openbmc/sensors/enumerate</msg>
<status starttime="20170707 08:06:49.306" status="PASS" endtime="20170707 08:06:49.306"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status starttime="20170707 08:06:49.306" status="PASS" endtime="20170707 08:06:49.308"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170707 08:06:49.542">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/enumerate, headers=None json=None</msg>
<msg level="INFO" timestamp="20170707 08:06:49.542">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170707 08:06:49.308" status="PASS" endtime="20170707 08:06:49.542"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status starttime="20170707 08:06:49.542" status="PASS" endtime="20170707 08:06:49.543"></status>
</kw>
<msg level="INFO" timestamp="20170707 08:06:49.543">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170707 08:06:49.118" status="PASS" endtime="20170707 08:06:49.543"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 08:06:49.544">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170707 08:06:49.544" status="PASS" endtime="20170707 08:06:49.544"></status>
</kw>
<msg level="INFO" timestamp="20170707 08:06:49.545">${status} = True</msg>
<status starttime="20170707 08:06:49.543" status="PASS" endtime="20170707 08:06:49.545"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status starttime="20170707 08:06:49.545" status="PASS" endtime="20170707 08:06:49.545"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg level="INFO" timestamp="20170707 08:06:49.547">To JSON using : content={
  "data": {
    "/org/openbmc/sensors/host/BootCount": {
      "error": 0, 
      "units": "", 
      "value": 1
    }, 
    "/org/openbmc/sensors/host/BootProgress": {
      "error": 0, 
      "units": "", 
      "value": "FW Progress, Starting OS"
    }, 
    "/org/openbmc/sensors/host/OperatingSystemStatus": {
      "error": 0, 
      "units": "", 
      "value": "Off"
    }, 
    "/org/openbmc/sensors/host/PowerSupplyDerating": {
      "error": 0, 
      "units": "", 
      "value": 10
    }, 
    "/org/openbmc/sensors/host/PowerSupplyRedundancy": {
      "error": 0, 
      "units": "", 
      "value": "Disabled"
    }, 
    "/org/openbmc/sensors/host/TurboAllowed": {
      "error": 0, 
      "units": "", 
      "value": 0
    }, 
    "/org/openbmc/sensors/host/cpu0/OccStatus": {
      "error": 0, 
      "units": "", 
      "value": "Disabled"
    }, 
    "/org/openbmc/sensors/host/cpu1/OccStatus": {
      "error": 0, 
      "units": "", 
      "value": "Disabled"
    }, 
    "/org/openbmc/sensors/host/powercap": {
      "error": 0, 
      "units": "", 
      "value": 0
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170707 08:06:49.547">To JSON using : pretty_print=True </msg>
<msg level="INFO" timestamp="20170707 08:06:49.547">${jsondata} = {
    "data": {
        "/org/openbmc/sensors/host/BootCount": {
            "error": 0,
            "units": "",
            "value": 1
        },
        "/org/openbmc/sensors/host/BootProgress": {
...</msg>
<status starttime="20170707 08:06:49.546" status="PASS" endtime="20170707 08:06:49.547"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170707 08:06:49.550">Appended to file '&lt;a href="file:///tmp/fspcibld/21345/obmc-robot/logs/20170707080642592994_TestsTestBasicPoweron/20170707080642592994_PowerOnTest/20170707080642592994_BMC_sensor_list.txt"&gt;/tmp/fspcibld/21345/obmc-robot/logs/20170707080642592994_TestsTestBasicPoweron/20170707080642592994_PowerOnTest/20170707080642592994_BMC_sensor_list.txt&lt;/a&gt;'.</msg>
<status starttime="20170707 08:06:49.548" status="PASS" endtime="20170707 08:06:49.550"></status>
</kw>
<status starttime="20170707 08:06:49.547" status="PASS" endtime="20170707 08:06:49.550"></status>
</kw>
<status starttime="20170707 08:06:49.117" status="PASS" endtime="20170707 08:06:49.550"></status>
</kw>
<status starttime="20170707 08:06:46.232" status="PASS" endtime="20170707 08:06:49.550"></status>
</kw>
<status starttime="20170707 08:06:46.231" status="PASS" endtime="20170707 08:06:49.550"></status>
</kw>
<status starttime="20170707 08:06:46.230" status="PASS" endtime="20170707 08:06:49.550"></status>
</kw>
<status starttime="20170707 08:06:46.230" status="PASS" endtime="20170707 08:06:49.550"></status>
</kw>
<status starttime="20170707 08:06:44.476" status="PASS" endtime="20170707 08:06:49.550"></status>
</kw>
<status starttime="20170707 08:06:44.452" status="PASS" endtime="20170707 08:06:49.551"></status>
</kw>
<status starttime="20170707 08:06:44.449" status="PASS" endtime="20170707 08:06:49.551"></status>
</kw>
<status starttime="20170707 08:06:44.449" status="PASS" endtime="20170707 08:06:49.551"></status>
</kw>
<kw type="foritem" name="${method} = ('SEL Log', 'Collect eSEL Log')">
<kw library="openbmc_ffdc_methods" name="Execute Keyword Method">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw library="Collections" name="List Should Contain Value">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status starttime="20170707 08:06:49.552" status="PASS" endtime="20170707 08:06:49.553"></status>
</kw>
<msg level="INFO" timestamp="20170707 08:06:49.553">${status} = PASS</msg>
<msg level="INFO" timestamp="20170707 08:06:49.553">${ret_values} = None</msg>
<status starttime="20170707 08:06:49.552" status="PASS" endtime="20170707 08:06:49.553"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status starttime="20170707 08:06:49.553" status="PASS" endtime="20170707 08:06:49.553"></status>
</kw>
<kw library="gen_robot_keyword" name="Run Key">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw library="openbmc_ffdc_methods" name="Collect eSEL Log">
<doc>Collect eSEL log from logging entry and convert eSEL data</doc>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${BMC_LOGGING_ENTRY}/enumerate</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170707 08:06:49.580">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170707 08:06:49.580" status="PASS" endtime="20170707 08:06:49.581"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170707 08:06:49.581">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170707 08:06:49.581" status="PASS" endtime="20170707 08:06:49.581"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170707 08:06:49.582">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170707 08:06:49.581" status="PASS" endtime="20170707 08:06:49.582"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170707 08:06:49.582">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170707 08:06:49.582" status="PASS" endtime="20170707 08:06:49.583"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 08:06:49.853">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170707 08:06:49.583" status="PASS" endtime="20170707 08:06:49.853"></status>
</kw>
<msg level="INFO" timestamp="20170707 08:06:49.853">${status} = PASS</msg>
<msg level="INFO" timestamp="20170707 08:06:49.853">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170707 08:06:49.583" status="PASS" endtime="20170707 08:06:49.853"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 08:06:49.854">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170707 08:06:49.853" status="PASS" endtime="20170707 08:06:49.854"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 08:06:49.854">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170707 08:06:49.854" status="PASS" endtime="20170707 08:06:49.854"></status>
</kw>
<status starttime="20170707 08:06:49.579" status="PASS" endtime="20170707 08:06:49.855"></status>
</kw>
<status starttime="20170707 08:06:49.579" status="PASS" endtime="20170707 08:06:49.855"></status>
</kw>
<status starttime="20170707 08:06:49.578" status="PASS" endtime="20170707 08:06:49.855"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170707 08:06:49.855">${base_uri} = /xyz/openbmc_project/logging/entry//enumerate</msg>
<status starttime="20170707 08:06:49.855" status="PASS" endtime="20170707 08:06:49.855"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status starttime="20170707 08:06:49.856" status="PASS" endtime="20170707 08:06:49.856"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170707 08:06:49.900">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry//enumerate, headers=None json=None</msg>
<msg level="INFO" timestamp="20170707 08:06:49.900">${ret} = &lt;Response [404]&gt;</msg>
<status starttime="20170707 08:06:49.856" status="PASS" endtime="20170707 08:06:49.900"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status starttime="20170707 08:06:49.900" status="PASS" endtime="20170707 08:06:49.901"></status>
</kw>
<msg level="INFO" timestamp="20170707 08:06:49.901">${resp} = &lt;Response [404]&gt;</msg>
<status starttime="20170707 08:06:49.578" status="PASS" endtime="20170707 08:06:49.901"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 08:06:49.902">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg level="FAIL" timestamp="20170707 08:06:49.902">404 != 200</msg>
<status starttime="20170707 08:06:49.902" status="FAIL" endtime="20170707 08:06:49.902"></status>
</kw>
<msg level="INFO" timestamp="20170707 08:06:49.902">${status} = False</msg>
<status starttime="20170707 08:06:49.901" status="PASS" endtime="20170707 08:06:49.902"></status>
</kw>
<kw library="BuiltIn" name="Return From Keyword If">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
</arguments>
<msg level="INFO" timestamp="20170707 08:06:49.903">Returning from the enclosing user keyword.</msg>
<status starttime="20170707 08:06:49.902" status="PASS" endtime="20170707 08:06:49.903"></status>
</kw>
<status starttime="20170707 08:06:49.577" status="PASS" endtime="20170707 08:06:49.903"></status>
</kw>
<status starttime="20170707 08:06:49.553" status="PASS" endtime="20170707 08:06:49.903"></status>
</kw>
<status starttime="20170707 08:06:49.551" status="PASS" endtime="20170707 08:06:49.903"></status>
</kw>
<status starttime="20170707 08:06:49.551" status="PASS" endtime="20170707 08:06:49.903"></status>
</kw>
<kw type="foritem" name="${method} = ('Core Files', 'SCP Coredump Files')">
<kw library="openbmc_ffdc_methods" name="Execute Keyword Method">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw library="Collections" name="List Should Contain Value">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status starttime="20170707 08:06:49.905" status="PASS" endtime="20170707 08:06:49.905"></status>
</kw>
<msg level="INFO" timestamp="20170707 08:06:49.905">${status} = PASS</msg>
<msg level="INFO" timestamp="20170707 08:06:49.905">${ret_values} = None</msg>
<status starttime="20170707 08:06:49.904" status="PASS" endtime="20170707 08:06:49.905"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status starttime="20170707 08:06:49.906" status="PASS" endtime="20170707 08:06:49.906"></status>
</kw>
<kw library="gen_robot_keyword" name="Run Key">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw library="openbmc_ffdc_methods" name="SCP Coredump Files">
<doc>Copy core dump file from BMC to local system.</doc>
<kw library="connection_client" name="Open Connection And Log In">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw library="Collections" name="Dictionary Should Contain Key">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg level="FAIL" timestamp="20170707 08:06:49.937">Dictionary does not contain key 'host'.</msg>
<status starttime="20170707 08:06:49.937" status="FAIL" endtime="20170707 08:06:49.937"></status>
</kw>
<msg level="INFO" timestamp="20170707 08:06:49.937">${has_host} = False</msg>
<status starttime="20170707 08:06:49.936" status="PASS" endtime="20170707 08:06:49.937"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status starttime="20170707 08:06:49.938" status="PASS" endtime="20170707 08:06:49.939"></status>
</kw>
<status starttime="20170707 08:06:49.938" status="PASS" endtime="20170707 08:06:49.939"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<kw library="connection_client" name="User input SSH and HTTPs Ports">
<doc>Update the global SSH and HTTPs port variable for QEMU</doc>
<kw library="BuiltIn" name="Convert To Integer">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${SSH_PORT}</arg>
</arguments>
<assign>
<var>${port_num}</var>
</assign>
<msg level="INFO" timestamp="20170707 08:06:49.940">${port_num} = 22</msg>
<status starttime="20170707 08:06:49.940" status="PASS" endtime="20170707 08:06:49.940"></status>
</kw>
<kw library="BuiltIn" name="Replace Variables">
<doc>Replaces variables in the given text with their current values.</doc>
<arguments>
<arg>${port_num}</arg>
</arguments>
<assign>
<var>${SSH_PORT}</var>
</assign>
<msg level="INFO" timestamp="20170707 08:06:49.941">${SSH_PORT} = 22</msg>
<status starttime="20170707 08:06:49.940" status="PASS" endtime="20170707 08:06:49.941"></status>
</kw>
<kw library="BuiltIn" name="Convert To Integer">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${HTTPS_PORT}</arg>
</arguments>
<assign>
<var>${https_num}</var>
</assign>
<msg level="INFO" timestamp="20170707 08:06:49.942">${https_num} = 443</msg>
<status starttime="20170707 08:06:49.941" status="PASS" endtime="20170707 08:06:49.942"></status>
</kw>
<kw library="BuiltIn" name="Set Global Variable">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${AUTH_URI}</arg>
<arg>https://${OPENBMC_HOST}:${https_num}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 08:06:49.942">${AUTH_URI} = https://9.3.21.61:443</msg>
<status starttime="20170707 08:06:49.942" status="PASS" endtime="20170707 08:06:49.943"></status>
</kw>
<status starttime="20170707 08:06:49.939" status="PASS" endtime="20170707 08:06:49.943"></status>
</kw>
<status starttime="20170707 08:06:49.939" status="PASS" endtime="20170707 08:06:49.943"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw library="Collections" name="Dictionary Should Contain Key">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg level="FAIL" timestamp="20170707 08:06:49.944">Dictionary does not contain key 'port'.</msg>
<status starttime="20170707 08:06:49.943" status="FAIL" endtime="20170707 08:06:49.944"></status>
</kw>
<msg level="INFO" timestamp="20170707 08:06:49.944">${has_port} = False</msg>
<status starttime="20170707 08:06:49.943" status="PASS" endtime="20170707 08:06:49.944"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keywords">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
</arguments>
<status starttime="20170707 08:06:49.945" status="PASS" endtime="20170707 08:06:49.946"></status>
</kw>
<kw library="SSHLibrary" name="Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status starttime="20170707 08:06:49.946" status="PASS" endtime="20170707 08:06:49.946"></status>
</kw>
<status starttime="20170707 08:06:49.945" status="PASS" endtime="20170707 08:06:49.946"></status>
</kw>
<status starttime="20170707 08:06:49.944" status="PASS" endtime="20170707 08:06:49.946"></status>
</kw>
<kw library="SSHLibrary" name="Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 08:06:49.947">Logging into '9.3.21.61:22' as 'root'.</msg>
<msg level="INFO" timestamp="20170707 08:06:51.593">Read output: root@witherspoon:~#</msg>
<status starttime="20170707 08:06:49.947" status="PASS" endtime="20170707 08:06:51.594"></status>
</kw>
<status starttime="20170707 08:06:49.936" status="PASS" endtime="20170707 08:06:51.594"></status>
</kw>
<kw library="SSHLibrary" name="Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>ls /tmp/core_*</arg>
</arguments>
<assign>
<var>${core_files}</var>
</assign>
<msg level="INFO" timestamp="20170707 08:06:51.595">Executing command 'ls /tmp/core_*'.</msg>
<msg level="INFO" timestamp="20170707 08:06:51.651">Command exited with return code 1.</msg>
<msg level="INFO" timestamp="20170707 08:06:51.651">${core_files} = </msg>
<status starttime="20170707 08:06:51.594" status="PASS" endtime="20170707 08:06:51.651"></status>
</kw>
<kw library="String" name="Split String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${core_files}</arg>
</arguments>
<assign>
<var>@{core_list}</var>
</assign>
<msg level="INFO" timestamp="20170707 08:06:51.652">@{core_list} = [ ]</msg>
<status starttime="20170707 08:06:51.652" status="PASS" endtime="20170707 08:06:51.652"></status>
</kw>
<kw library="connection_client" name="Open Connection for SCP">
<kw library="BuiltIn" name="Import Library">
<doc>Imports a library with the given name and optional arguments.</doc>
<arguments>
<arg>SCPLibrary</arg>
<arg>WITH NAME</arg>
<arg>scp</arg>
</arguments>
<status starttime="20170707 08:06:51.653" status="PASS" endtime="20170707 08:06:51.660"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' == '${EMPTY}'</arg>
<arg>scp.Open connection</arg>
<arg>${OPENBMC_HOST}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>scp.Open connection</arg>
<arg>${OPENBMC_HOST}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>scp.Open connection</arg>
<arg>${OPENBMC_HOST}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
</arguments>
<kw library="scp" name="Open Connection">
<doc>Opens a new SCP connection to the given host.</doc>
<arguments>
<arg>${OPENBMC_HOST}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
</arguments>
<status starttime="20170707 08:06:51.661" status="PASS" endtime="20170707 08:06:52.360"></status>
</kw>
<status starttime="20170707 08:06:51.661" status="PASS" endtime="20170707 08:06:52.360"></status>
</kw>
<status starttime="20170707 08:06:51.660" status="PASS" endtime="20170707 08:06:52.360"></status>
</kw>
<status starttime="20170707 08:06:51.652" status="PASS" endtime="20170707 08:06:52.360"></status>
</kw>
<kw type="for" name="${index} IN [ @{core_list} ]">
<status starttime="20170707 08:06:52.360" status="PASS" endtime="20170707 08:06:52.360"></status>
</kw>
<status starttime="20170707 08:06:49.935" status="PASS" endtime="20170707 08:06:52.360"></status>
</kw>
<status starttime="20170707 08:06:49.906" status="PASS" endtime="20170707 08:06:52.360"></status>
</kw>
<status starttime="20170707 08:06:49.904" status="PASS" endtime="20170707 08:06:52.361"></status>
</kw>
<status starttime="20170707 08:06:49.903" status="PASS" endtime="20170707 08:06:52.361"></status>
</kw>
<kw type="foritem" name="${method} = ('FFDC Generic Report', 'BMC FFDC Manifest')">
<kw library="openbmc_ffdc_methods" name="Execute Keyword Method">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw library="Collections" name="List Should Contain Value">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status starttime="20170707 08:06:52.362" status="PASS" endtime="20170707 08:06:52.363"></status>
</kw>
<msg level="INFO" timestamp="20170707 08:06:52.363">${status} = PASS</msg>
<msg level="INFO" timestamp="20170707 08:06:52.363">${ret_values} = None</msg>
<status starttime="20170707 08:06:52.362" status="PASS" endtime="20170707 08:06:52.363"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status starttime="20170707 08:06:52.363" status="PASS" endtime="20170707 08:06:52.363"></status>
</kw>
<kw library="gen_robot_keyword" name="Run Key">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw library="openbmc_ffdc_methods" name="BMC FFDC Manifest">
<doc>Get the commands index for the FFDC_BMC_CMD,</doc>
<kw library="connection_client" name="Open Connection And Log In">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw library="Collections" name="Dictionary Should Contain Key">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg level="FAIL" timestamp="20170707 08:06:52.389">Dictionary does not contain key 'host'.</msg>
<status starttime="20170707 08:06:52.389" status="FAIL" endtime="20170707 08:06:52.389"></status>
</kw>
<msg level="INFO" timestamp="20170707 08:06:52.390">${has_host} = False</msg>
<status starttime="20170707 08:06:52.389" status="PASS" endtime="20170707 08:06:52.390"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status starttime="20170707 08:06:52.390" status="PASS" endtime="20170707 08:06:52.391"></status>
</kw>
<status starttime="20170707 08:06:52.390" status="PASS" endtime="20170707 08:06:52.391"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<kw library="connection_client" name="User input SSH and HTTPs Ports">
<doc>Update the global SSH and HTTPs port variable for QEMU</doc>
<kw library="BuiltIn" name="Convert To Integer">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${SSH_PORT}</arg>
</arguments>
<assign>
<var>${port_num}</var>
</assign>
<msg level="INFO" timestamp="20170707 08:06:52.392">${port_num} = 22</msg>
<status starttime="20170707 08:06:52.392" status="PASS" endtime="20170707 08:06:52.393"></status>
</kw>
<kw library="BuiltIn" name="Replace Variables">
<doc>Replaces variables in the given text with their current values.</doc>
<arguments>
<arg>${port_num}</arg>
</arguments>
<assign>
<var>${SSH_PORT}</var>
</assign>
<msg level="INFO" timestamp="20170707 08:06:52.393">${SSH_PORT} = 22</msg>
<status starttime="20170707 08:06:52.393" status="PASS" endtime="20170707 08:06:52.393"></status>
</kw>
<kw library="BuiltIn" name="Convert To Integer">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${HTTPS_PORT}</arg>
</arguments>
<assign>
<var>${https_num}</var>
</assign>
<msg level="INFO" timestamp="20170707 08:06:52.394">${https_num} = 443</msg>
<status starttime="20170707 08:06:52.394" status="PASS" endtime="20170707 08:06:52.394"></status>
</kw>
<kw library="BuiltIn" name="Set Global Variable">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${AUTH_URI}</arg>
<arg>https://${OPENBMC_HOST}:${https_num}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 08:06:52.395">${AUTH_URI} = https://9.3.21.61:443</msg>
<status starttime="20170707 08:06:52.394" status="PASS" endtime="20170707 08:06:52.395"></status>
</kw>
<status starttime="20170707 08:06:52.392" status="PASS" endtime="20170707 08:06:52.395"></status>
</kw>
<status starttime="20170707 08:06:52.391" status="PASS" endtime="20170707 08:06:52.395"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw library="Collections" name="Dictionary Should Contain Key">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg level="FAIL" timestamp="20170707 08:06:52.396">Dictionary does not contain key 'port'.</msg>
<status starttime="20170707 08:06:52.396" status="FAIL" endtime="20170707 08:06:52.396"></status>
</kw>
<msg level="INFO" timestamp="20170707 08:06:52.396">${has_port} = False</msg>
<status starttime="20170707 08:06:52.395" status="PASS" endtime="20170707 08:06:52.396"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keywords">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
</arguments>
<status starttime="20170707 08:06:52.398" status="PASS" endtime="20170707 08:06:52.398"></status>
</kw>
<kw library="SSHLibrary" name="Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status starttime="20170707 08:06:52.398" status="PASS" endtime="20170707 08:06:52.398"></status>
</kw>
<status starttime="20170707 08:06:52.397" status="PASS" endtime="20170707 08:06:52.399"></status>
</kw>
<status starttime="20170707 08:06:52.396" status="PASS" endtime="20170707 08:06:52.399"></status>
</kw>
<kw library="SSHLibrary" name="Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 08:06:52.399">Logging into '9.3.21.61:22' as 'root'.</msg>
<msg level="INFO" timestamp="20170707 08:06:54.046">Read output: root@witherspoon:~#</msg>
<status starttime="20170707 08:06:52.399" status="PASS" endtime="20170707 08:06:54.046"></status>
</kw>
<status starttime="20170707 08:06:52.388" status="PASS" endtime="20170707 08:06:54.047"></status>
</kw>
<kw library="openbmc_ffdc_list" name="Get Ffdc Cmd Index">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg level="INFO" timestamp="20170707 08:06:54.048">@{entries} = [ APPLICATION DATA | DRIVER INFO | BMC DATA ]</msg>
<status starttime="20170707 08:06:54.047" status="PASS" endtime="20170707 08:06:54.048"></status>
</kw>
<kw type="for" name="${index} IN [ @{entries} ]">
<kw type="foritem" name="${index} = APPLICATION DATA">
<kw library="openbmc_ffdc_methods" name="Iterate BMC Command List Pairs">
<doc>Feed in key pair list from dictionary to execute</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw library="openbmc_ffdc_list" name="Get Ffdc Bmc Cmd">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg level="INFO" timestamp="20170707 08:06:54.049">@{cmd_list} = [ ('BMC state', '/usr/sbin/obmcutil  state') ]</msg>
<status starttime="20170707 08:06:54.049" status="PASS" endtime="20170707 08:06:54.049"></status>
</kw>
<kw library="BuiltIn" name="Set Suite Variable">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${ENTRY_INDEX}</arg>
<arg>${key_index}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 08:06:54.054">${ENTRY_INDEX} = APPLICATION DATA</msg>
<status starttime="20170707 08:06:54.049" status="PASS" endtime="20170707 08:06:54.054"></status>
</kw>
<kw type="for" name="${cmd} IN [ @{cmd_list} ]">
<kw type="foritem" name="${cmd} = ('BMC state', '/usr/sbin/obmcutil  state')">
<kw library="openbmc_ffdc_methods" name="Execute Command and Write FFDC">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Cmd Output to FFDC File">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170707 08:06:54.057">Appended to file '&lt;a href="file:///tmp/fspcibld/21345/obmc-robot/logs/20170707080642592994_TestsTestBasicPoweron/20170707080642592994_PowerOnTest/20170707080642592994_BMC_general.txt"&gt;/tmp/fspcibld/21345/obmc-robot/logs/20170707080642592994_TestsTestBasicPoweron/20170707080642592994_PowerOnTest/20170707080642592994_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170707 08:06:54.057" status="PASS" endtime="20170707 08:06:54.057"></status>
</kw>
<status starttime="20170707 08:06:54.056" status="PASS" endtime="20170707 08:06:54.058"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170707 08:06:54.059">Appended to file '&lt;a href="file:///tmp/fspcibld/21345/obmc-robot/logs/20170707080642592994_TestsTestBasicPoweron/20170707080642592994_PowerOnTest/20170707080642592994_BMC_general.txt"&gt;/tmp/fspcibld/21345/obmc-robot/logs/20170707080642592994_TestsTestBasicPoweron/20170707080642592994_PowerOnTest/20170707080642592994_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170707 08:06:54.058" status="PASS" endtime="20170707 08:06:54.059"></status>
</kw>
<status starttime="20170707 08:06:54.058" status="PASS" endtime="20170707 08:06:54.059"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170707 08:06:54.060">Appended to file '&lt;a href="file:///tmp/fspcibld/21345/obmc-robot/logs/20170707080642592994_TestsTestBasicPoweron/20170707080642592994_PowerOnTest/20170707080642592994_BMC_general.txt"&gt;/tmp/fspcibld/21345/obmc-robot/logs/20170707080642592994_TestsTestBasicPoweron/20170707080642592994_PowerOnTest/20170707080642592994_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170707 08:06:54.060" status="PASS" endtime="20170707 08:06:54.060"></status>
</kw>
<status starttime="20170707 08:06:54.059" status="PASS" endtime="20170707 08:06:54.060"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170707 08:06:54.062">Appended to file '&lt;a href="file:///tmp/fspcibld/21345/obmc-robot/logs/20170707080642592994_TestsTestBasicPoweron/20170707080642592994_PowerOnTest/20170707080642592994_BMC_general.txt"&gt;/tmp/fspcibld/21345/obmc-robot/logs/20170707080642592994_TestsTestBasicPoweron/20170707080642592994_PowerOnTest/20170707080642592994_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170707 08:06:54.061" status="PASS" endtime="20170707 08:06:54.062"></status>
</kw>
<status starttime="20170707 08:06:54.060" status="PASS" endtime="20170707 08:06:54.062"></status>
</kw>
<status starttime="20170707 08:06:54.055" status="PASS" endtime="20170707 08:06:54.062"></status>
</kw>
<status starttime="20170707 08:06:54.055" status="PASS" endtime="20170707 08:06:54.062"></status>
</kw>
<kw library="SSHLibrary" name="Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170707 08:06:54.062">Executing command '/usr/sbin/obmcutil  state'.</msg>
<msg level="INFO" timestamp="20170707 08:06:55.511">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20170707 08:06:55.512">${stdout} = CurrentBMCState:    xyz.openbmc_project.State.BMC.BMCState.Ready
CurrentPowerState:  xyz.openbmc_project.State.Chassis.PowerState.On
CurrentHostState:   xyz.openbmc_project.State.Host.HostState.Runnin...</msg>
<msg level="INFO" timestamp="20170707 08:06:55.512">${stderr} = </msg>
<status starttime="20170707 08:06:54.062" status="PASS" endtime="20170707 08:06:55.512"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170707 08:06:55.518">Appended to file '&lt;a href="file:///tmp/fspcibld/21345/obmc-robot/logs/20170707080642592994_TestsTestBasicPoweron/20170707080642592994_PowerOnTest/20170707080642592994_BMC_general.txt"&gt;/tmp/fspcibld/21345/obmc-robot/logs/20170707080642592994_TestsTestBasicPoweron/20170707080642592994_PowerOnTest/20170707080642592994_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170707 08:06:55.518" status="PASS" endtime="20170707 08:06:55.518"></status>
</kw>
<status starttime="20170707 08:06:55.517" status="PASS" endtime="20170707 08:06:55.518"></status>
</kw>
<status starttime="20170707 08:06:55.512" status="PASS" endtime="20170707 08:06:55.518"></status>
</kw>
<status starttime="20170707 08:06:54.054" status="PASS" endtime="20170707 08:06:55.518"></status>
</kw>
<status starttime="20170707 08:06:54.054" status="PASS" endtime="20170707 08:06:55.519"></status>
</kw>
<status starttime="20170707 08:06:54.054" status="PASS" endtime="20170707 08:06:55.519"></status>
</kw>
<status starttime="20170707 08:06:54.048" status="PASS" endtime="20170707 08:06:55.519"></status>
</kw>
<status starttime="20170707 08:06:54.048" status="PASS" endtime="20170707 08:06:55.519"></status>
</kw>
<kw type="foritem" name="${index} = DRIVER INFO">
<kw library="openbmc_ffdc_methods" name="Iterate BMC Command List Pairs">
<doc>Feed in key pair list from dictionary to execute</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw library="openbmc_ffdc_list" name="Get Ffdc Bmc Cmd">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg level="INFO" timestamp="20170707 08:06:55.520">@{cmd_list} = [ ('FW Level', 'cat /etc/os-release') | ('Build Info', 'cat /etc/version') ]</msg>
<status starttime="20170707 08:06:55.519" status="PASS" endtime="20170707 08:06:55.520"></status>
</kw>
<kw library="BuiltIn" name="Set Suite Variable">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${ENTRY_INDEX}</arg>
<arg>${key_index}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 08:06:55.521">${ENTRY_INDEX} = DRIVER INFO</msg>
<status starttime="20170707 08:06:55.520" status="PASS" endtime="20170707 08:06:55.521"></status>
</kw>
<kw type="for" name="${cmd} IN [ @{cmd_list} ]">
<kw type="foritem" name="${cmd} = ('FW Level', 'cat /etc/os-release')">
<kw library="openbmc_ffdc_methods" name="Execute Command and Write FFDC">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Cmd Output to FFDC File">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170707 08:06:55.524">Appended to file '&lt;a href="file:///tmp/fspcibld/21345/obmc-robot/logs/20170707080642592994_TestsTestBasicPoweron/20170707080642592994_PowerOnTest/20170707080642592994_BMC_general.txt"&gt;/tmp/fspcibld/21345/obmc-robot/logs/20170707080642592994_TestsTestBasicPoweron/20170707080642592994_PowerOnTest/20170707080642592994_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170707 08:06:55.524" status="PASS" endtime="20170707 08:06:55.524"></status>
</kw>
<status starttime="20170707 08:06:55.523" status="PASS" endtime="20170707 08:06:55.524"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170707 08:06:55.526">Appended to file '&lt;a href="file:///tmp/fspcibld/21345/obmc-robot/logs/20170707080642592994_TestsTestBasicPoweron/20170707080642592994_PowerOnTest/20170707080642592994_BMC_general.txt"&gt;/tmp/fspcibld/21345/obmc-robot/logs/20170707080642592994_TestsTestBasicPoweron/20170707080642592994_PowerOnTest/20170707080642592994_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170707 08:06:55.525" status="PASS" endtime="20170707 08:06:55.526"></status>
</kw>
<status starttime="20170707 08:06:55.524" status="PASS" endtime="20170707 08:06:55.526"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170707 08:06:55.527">Appended to file '&lt;a href="file:///tmp/fspcibld/21345/obmc-robot/logs/20170707080642592994_TestsTestBasicPoweron/20170707080642592994_PowerOnTest/20170707080642592994_BMC_general.txt"&gt;/tmp/fspcibld/21345/obmc-robot/logs/20170707080642592994_TestsTestBasicPoweron/20170707080642592994_PowerOnTest/20170707080642592994_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170707 08:06:55.526" status="PASS" endtime="20170707 08:06:55.527"></status>
</kw>
<status starttime="20170707 08:06:55.526" status="PASS" endtime="20170707 08:06:55.527"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170707 08:06:55.528">Appended to file '&lt;a href="file:///tmp/fspcibld/21345/obmc-robot/logs/20170707080642592994_TestsTestBasicPoweron/20170707080642592994_PowerOnTest/20170707080642592994_BMC_general.txt"&gt;/tmp/fspcibld/21345/obmc-robot/logs/20170707080642592994_TestsTestBasicPoweron/20170707080642592994_PowerOnTest/20170707080642592994_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170707 08:06:55.528" status="PASS" endtime="20170707 08:06:55.528"></status>
</kw>
<status starttime="20170707 08:06:55.527" status="PASS" endtime="20170707 08:06:55.528"></status>
</kw>
<status starttime="20170707 08:06:55.522" status="PASS" endtime="20170707 08:06:55.528"></status>
</kw>
<status starttime="20170707 08:06:55.522" status="PASS" endtime="20170707 08:06:55.529"></status>
</kw>
<kw library="SSHLibrary" name="Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170707 08:06:55.529">Executing command 'cat /etc/os-release'.</msg>
<msg level="INFO" timestamp="20170707 08:06:55.624">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20170707 08:06:55.624">${stdout} = ID="openbmc-phosphor"
NAME="Phosphor OpenBMC (Phosphor OpenBMC Project Reference Distro)"
VERSION="v1.99.7-87"
VERSION_ID="v1.99.7-87-gdfb1c5b"
PRETTY_NAME="Phosphor OpenBMC (Phosphor OpenBMC Project ...</msg>
<msg level="INFO" timestamp="20170707 08:06:55.624">${stderr} = </msg>
<status starttime="20170707 08:06:55.529" status="PASS" endtime="20170707 08:06:55.624"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170707 08:06:55.630">Appended to file '&lt;a href="file:///tmp/fspcibld/21345/obmc-robot/logs/20170707080642592994_TestsTestBasicPoweron/20170707080642592994_PowerOnTest/20170707080642592994_BMC_general.txt"&gt;/tmp/fspcibld/21345/obmc-robot/logs/20170707080642592994_TestsTestBasicPoweron/20170707080642592994_PowerOnTest/20170707080642592994_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170707 08:06:55.630" status="PASS" endtime="20170707 08:06:55.630"></status>
</kw>
<status starttime="20170707 08:06:55.629" status="PASS" endtime="20170707 08:06:55.630"></status>
</kw>
<status starttime="20170707 08:06:55.625" status="PASS" endtime="20170707 08:06:55.630"></status>
</kw>
<status starttime="20170707 08:06:55.521" status="PASS" endtime="20170707 08:06:55.630"></status>
</kw>
<status starttime="20170707 08:06:55.521" status="PASS" endtime="20170707 08:06:55.630"></status>
</kw>
<kw type="foritem" name="${cmd} = ('Build Info', 'cat /etc/version')">
<kw library="openbmc_ffdc_methods" name="Execute Command and Write FFDC">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Cmd Output to FFDC File">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170707 08:06:55.633">Appended to file '&lt;a href="file:///tmp/fspcibld/21345/obmc-robot/logs/20170707080642592994_TestsTestBasicPoweron/20170707080642592994_PowerOnTest/20170707080642592994_BMC_general.txt"&gt;/tmp/fspcibld/21345/obmc-robot/logs/20170707080642592994_TestsTestBasicPoweron/20170707080642592994_PowerOnTest/20170707080642592994_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170707 08:06:55.633" status="PASS" endtime="20170707 08:06:55.633"></status>
</kw>
<status starttime="20170707 08:06:55.632" status="PASS" endtime="20170707 08:06:55.634"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170707 08:06:55.635">Appended to file '&lt;a href="file:///tmp/fspcibld/21345/obmc-robot/logs/20170707080642592994_TestsTestBasicPoweron/20170707080642592994_PowerOnTest/20170707080642592994_BMC_general.txt"&gt;/tmp/fspcibld/21345/obmc-robot/logs/20170707080642592994_TestsTestBasicPoweron/20170707080642592994_PowerOnTest/20170707080642592994_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170707 08:06:55.634" status="PASS" endtime="20170707 08:06:55.635"></status>
</kw>
<status starttime="20170707 08:06:55.634" status="PASS" endtime="20170707 08:06:55.635"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170707 08:06:55.636">Appended to file '&lt;a href="file:///tmp/fspcibld/21345/obmc-robot/logs/20170707080642592994_TestsTestBasicPoweron/20170707080642592994_PowerOnTest/20170707080642592994_BMC_general.txt"&gt;/tmp/fspcibld/21345/obmc-robot/logs/20170707080642592994_TestsTestBasicPoweron/20170707080642592994_PowerOnTest/20170707080642592994_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170707 08:06:55.636" status="PASS" endtime="20170707 08:06:55.636"></status>
</kw>
<status starttime="20170707 08:06:55.635" status="PASS" endtime="20170707 08:06:55.636"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170707 08:06:55.638">Appended to file '&lt;a href="file:///tmp/fspcibld/21345/obmc-robot/logs/20170707080642592994_TestsTestBasicPoweron/20170707080642592994_PowerOnTest/20170707080642592994_BMC_general.txt"&gt;/tmp/fspcibld/21345/obmc-robot/logs/20170707080642592994_TestsTestBasicPoweron/20170707080642592994_PowerOnTest/20170707080642592994_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170707 08:06:55.637" status="PASS" endtime="20170707 08:06:55.638"></status>
</kw>
<status starttime="20170707 08:06:55.636" status="PASS" endtime="20170707 08:06:55.638"></status>
</kw>
<status starttime="20170707 08:06:55.632" status="PASS" endtime="20170707 08:06:55.638"></status>
</kw>
<status starttime="20170707 08:06:55.631" status="PASS" endtime="20170707 08:06:55.638"></status>
</kw>
<kw library="SSHLibrary" name="Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170707 08:06:55.639">Executing command 'cat /etc/version'.</msg>
<msg level="INFO" timestamp="20170707 08:06:55.774">Command exited with return code 1.</msg>
<msg level="INFO" timestamp="20170707 08:06:55.774">${stdout} = </msg>
<msg level="INFO" timestamp="20170707 08:06:55.774">${stderr} = cat: can't open '/etc/version': No such file or directory</msg>
<status starttime="20170707 08:06:55.638" status="PASS" endtime="20170707 08:06:55.775"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170707 08:06:55.781">Appended to file '&lt;a href="file:///tmp/fspcibld/21345/obmc-robot/logs/20170707080642592994_TestsTestBasicPoweron/20170707080642592994_PowerOnTest/20170707080642592994_BMC_general.txt"&gt;/tmp/fspcibld/21345/obmc-robot/logs/20170707080642592994_TestsTestBasicPoweron/20170707080642592994_PowerOnTest/20170707080642592994_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170707 08:06:55.780" status="PASS" endtime="20170707 08:06:55.781"></status>
</kw>
<status starttime="20170707 08:06:55.780" status="PASS" endtime="20170707 08:06:55.781"></status>
</kw>
<status starttime="20170707 08:06:55.775" status="PASS" endtime="20170707 08:06:55.781"></status>
</kw>
<status starttime="20170707 08:06:55.631" status="PASS" endtime="20170707 08:06:55.781"></status>
</kw>
<status starttime="20170707 08:06:55.631" status="PASS" endtime="20170707 08:06:55.781"></status>
</kw>
<status starttime="20170707 08:06:55.521" status="PASS" endtime="20170707 08:06:55.781"></status>
</kw>
<status starttime="20170707 08:06:55.519" status="PASS" endtime="20170707 08:06:55.781"></status>
</kw>
<status starttime="20170707 08:06:55.519" status="PASS" endtime="20170707 08:06:55.781"></status>
</kw>
<kw type="foritem" name="${index} = BMC DATA">
<kw library="openbmc_ffdc_methods" name="Iterate BMC Command List Pairs">
<doc>Feed in key pair list from dictionary to execute</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw library="openbmc_ffdc_list" name="Get Ffdc Bmc Cmd">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg level="INFO" timestamp="20170707 08:06:55.782">@{cmd_list} = [ ('BMC File System Disk Space Usage', 'df -hT') | ('BMC Uptime', 'uptime') | ('BMC OS', 'uname -a') ]</msg>
<status starttime="20170707 08:06:55.782" status="PASS" endtime="20170707 08:06:55.782"></status>
</kw>
<kw library="BuiltIn" name="Set Suite Variable">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${ENTRY_INDEX}</arg>
<arg>${key_index}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 08:06:55.783">${ENTRY_INDEX} = BMC DATA</msg>
<status starttime="20170707 08:06:55.783" status="PASS" endtime="20170707 08:06:55.783"></status>
</kw>
<kw type="for" name="${cmd} IN [ @{cmd_list} ]">
<kw type="foritem" name="${cmd} = ('BMC File System Disk Space Usage', 'df -hT')">
<kw library="openbmc_ffdc_methods" name="Execute Command and Write FFDC">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Cmd Output to FFDC File">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170707 08:06:55.786">Appended to file '&lt;a href="file:///tmp/fspcibld/21345/obmc-robot/logs/20170707080642592994_TestsTestBasicPoweron/20170707080642592994_PowerOnTest/20170707080642592994_BMC_general.txt"&gt;/tmp/fspcibld/21345/obmc-robot/logs/20170707080642592994_TestsTestBasicPoweron/20170707080642592994_PowerOnTest/20170707080642592994_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170707 08:06:55.786" status="PASS" endtime="20170707 08:06:55.786"></status>
</kw>
<status starttime="20170707 08:06:55.785" status="PASS" endtime="20170707 08:06:55.786"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170707 08:06:55.788">Appended to file '&lt;a href="file:///tmp/fspcibld/21345/obmc-robot/logs/20170707080642592994_TestsTestBasicPoweron/20170707080642592994_PowerOnTest/20170707080642592994_BMC_general.txt"&gt;/tmp/fspcibld/21345/obmc-robot/logs/20170707080642592994_TestsTestBasicPoweron/20170707080642592994_PowerOnTest/20170707080642592994_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170707 08:06:55.787" status="PASS" endtime="20170707 08:06:55.788"></status>
</kw>
<status starttime="20170707 08:06:55.787" status="PASS" endtime="20170707 08:06:55.788"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170707 08:06:55.789">Appended to file '&lt;a href="file:///tmp/fspcibld/21345/obmc-robot/logs/20170707080642592994_TestsTestBasicPoweron/20170707080642592994_PowerOnTest/20170707080642592994_BMC_general.txt"&gt;/tmp/fspcibld/21345/obmc-robot/logs/20170707080642592994_TestsTestBasicPoweron/20170707080642592994_PowerOnTest/20170707080642592994_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170707 08:06:55.789" status="PASS" endtime="20170707 08:06:55.789"></status>
</kw>
<status starttime="20170707 08:06:55.788" status="PASS" endtime="20170707 08:06:55.789"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170707 08:06:55.790">Appended to file '&lt;a href="file:///tmp/fspcibld/21345/obmc-robot/logs/20170707080642592994_TestsTestBasicPoweron/20170707080642592994_PowerOnTest/20170707080642592994_BMC_general.txt"&gt;/tmp/fspcibld/21345/obmc-robot/logs/20170707080642592994_TestsTestBasicPoweron/20170707080642592994_PowerOnTest/20170707080642592994_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170707 08:06:55.790" status="PASS" endtime="20170707 08:06:55.790"></status>
</kw>
<status starttime="20170707 08:06:55.789" status="PASS" endtime="20170707 08:06:55.790"></status>
</kw>
<status starttime="20170707 08:06:55.785" status="PASS" endtime="20170707 08:06:55.791"></status>
</kw>
<status starttime="20170707 08:06:55.784" status="PASS" endtime="20170707 08:06:55.791"></status>
</kw>
<kw library="SSHLibrary" name="Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170707 08:06:55.791">Executing command 'df -hT'.</msg>
<msg level="INFO" timestamp="20170707 08:06:55.877">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20170707 08:06:55.877">${stdout} = Filesystem           Type            Size      Used Available Use% Mounted on
dev                  devtmpfs      210.2M         0    210.2M   0% /dev
tmpfs                tmpfs         211.1M     14.0...</msg>
<msg level="INFO" timestamp="20170707 08:06:55.877">${stderr} = </msg>
<status starttime="20170707 08:06:55.791" status="PASS" endtime="20170707 08:06:55.877"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170707 08:06:55.886">Appended to file '&lt;a href="file:///tmp/fspcibld/21345/obmc-robot/logs/20170707080642592994_TestsTestBasicPoweron/20170707080642592994_PowerOnTest/20170707080642592994_BMC_general.txt"&gt;/tmp/fspcibld/21345/obmc-robot/logs/20170707080642592994_TestsTestBasicPoweron/20170707080642592994_PowerOnTest/20170707080642592994_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170707 08:06:55.886" status="PASS" endtime="20170707 08:06:55.886"></status>
</kw>
<status starttime="20170707 08:06:55.885" status="PASS" endtime="20170707 08:06:55.887"></status>
</kw>
<status starttime="20170707 08:06:55.878" status="PASS" endtime="20170707 08:06:55.887"></status>
</kw>
<status starttime="20170707 08:06:55.784" status="PASS" endtime="20170707 08:06:55.887"></status>
</kw>
<status starttime="20170707 08:06:55.783" status="PASS" endtime="20170707 08:06:55.887"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC Uptime', 'uptime')">
<kw library="openbmc_ffdc_methods" name="Execute Command and Write FFDC">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Cmd Output to FFDC File">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170707 08:06:55.890">Appended to file '&lt;a href="file:///tmp/fspcibld/21345/obmc-robot/logs/20170707080642592994_TestsTestBasicPoweron/20170707080642592994_PowerOnTest/20170707080642592994_BMC_general.txt"&gt;/tmp/fspcibld/21345/obmc-robot/logs/20170707080642592994_TestsTestBasicPoweron/20170707080642592994_PowerOnTest/20170707080642592994_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170707 08:06:55.890" status="PASS" endtime="20170707 08:06:55.890"></status>
</kw>
<status starttime="20170707 08:06:55.889" status="PASS" endtime="20170707 08:06:55.891"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170707 08:06:55.892">Appended to file '&lt;a href="file:///tmp/fspcibld/21345/obmc-robot/logs/20170707080642592994_TestsTestBasicPoweron/20170707080642592994_PowerOnTest/20170707080642592994_BMC_general.txt"&gt;/tmp/fspcibld/21345/obmc-robot/logs/20170707080642592994_TestsTestBasicPoweron/20170707080642592994_PowerOnTest/20170707080642592994_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170707 08:06:55.891" status="PASS" endtime="20170707 08:06:55.892"></status>
</kw>
<status starttime="20170707 08:06:55.891" status="PASS" endtime="20170707 08:06:55.892"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170707 08:06:55.893">Appended to file '&lt;a href="file:///tmp/fspcibld/21345/obmc-robot/logs/20170707080642592994_TestsTestBasicPoweron/20170707080642592994_PowerOnTest/20170707080642592994_BMC_general.txt"&gt;/tmp/fspcibld/21345/obmc-robot/logs/20170707080642592994_TestsTestBasicPoweron/20170707080642592994_PowerOnTest/20170707080642592994_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170707 08:06:55.893" status="PASS" endtime="20170707 08:06:55.893"></status>
</kw>
<status starttime="20170707 08:06:55.892" status="PASS" endtime="20170707 08:06:55.893"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170707 08:06:55.894">Appended to file '&lt;a href="file:///tmp/fspcibld/21345/obmc-robot/logs/20170707080642592994_TestsTestBasicPoweron/20170707080642592994_PowerOnTest/20170707080642592994_BMC_general.txt"&gt;/tmp/fspcibld/21345/obmc-robot/logs/20170707080642592994_TestsTestBasicPoweron/20170707080642592994_PowerOnTest/20170707080642592994_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170707 08:06:55.894" status="PASS" endtime="20170707 08:06:55.894"></status>
</kw>
<status starttime="20170707 08:06:55.893" status="PASS" endtime="20170707 08:06:55.894"></status>
</kw>
<status starttime="20170707 08:06:55.888" status="PASS" endtime="20170707 08:06:55.895"></status>
</kw>
<status starttime="20170707 08:06:55.888" status="PASS" endtime="20170707 08:06:55.895"></status>
</kw>
<kw library="SSHLibrary" name="Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170707 08:06:55.895">Executing command 'uptime'.</msg>
<msg level="INFO" timestamp="20170707 08:06:55.964">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20170707 08:06:55.964">${stdout} =  08:06:56 up 15 min,  load average: 0.39, 0.91, 0.99</msg>
<msg level="INFO" timestamp="20170707 08:06:55.964">${stderr} = </msg>
<status starttime="20170707 08:06:55.895" status="PASS" endtime="20170707 08:06:55.964"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170707 08:06:55.973">Appended to file '&lt;a href="file:///tmp/fspcibld/21345/obmc-robot/logs/20170707080642592994_TestsTestBasicPoweron/20170707080642592994_PowerOnTest/20170707080642592994_BMC_general.txt"&gt;/tmp/fspcibld/21345/obmc-robot/logs/20170707080642592994_TestsTestBasicPoweron/20170707080642592994_PowerOnTest/20170707080642592994_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170707 08:06:55.972" status="PASS" endtime="20170707 08:06:55.973"></status>
</kw>
<status starttime="20170707 08:06:55.971" status="PASS" endtime="20170707 08:06:55.973"></status>
</kw>
<status starttime="20170707 08:06:55.964" status="PASS" endtime="20170707 08:06:55.973"></status>
</kw>
<status starttime="20170707 08:06:55.887" status="PASS" endtime="20170707 08:06:55.973"></status>
</kw>
<status starttime="20170707 08:06:55.887" status="PASS" endtime="20170707 08:06:55.973"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC OS', 'uname -a')">
<kw library="openbmc_ffdc_methods" name="Execute Command and Write FFDC">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Cmd Output to FFDC File">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170707 08:06:55.976">Appended to file '&lt;a href="file:///tmp/fspcibld/21345/obmc-robot/logs/20170707080642592994_TestsTestBasicPoweron/20170707080642592994_PowerOnTest/20170707080642592994_BMC_general.txt"&gt;/tmp/fspcibld/21345/obmc-robot/logs/20170707080642592994_TestsTestBasicPoweron/20170707080642592994_PowerOnTest/20170707080642592994_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170707 08:06:55.976" status="PASS" endtime="20170707 08:06:55.976"></status>
</kw>
<status starttime="20170707 08:06:55.975" status="PASS" endtime="20170707 08:06:55.976"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170707 08:06:55.978">Appended to file '&lt;a href="file:///tmp/fspcibld/21345/obmc-robot/logs/20170707080642592994_TestsTestBasicPoweron/20170707080642592994_PowerOnTest/20170707080642592994_BMC_general.txt"&gt;/tmp/fspcibld/21345/obmc-robot/logs/20170707080642592994_TestsTestBasicPoweron/20170707080642592994_PowerOnTest/20170707080642592994_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170707 08:06:55.977" status="PASS" endtime="20170707 08:06:55.978"></status>
</kw>
<status starttime="20170707 08:06:55.976" status="PASS" endtime="20170707 08:06:55.978"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170707 08:06:55.979">Appended to file '&lt;a href="file:///tmp/fspcibld/21345/obmc-robot/logs/20170707080642592994_TestsTestBasicPoweron/20170707080642592994_PowerOnTest/20170707080642592994_BMC_general.txt"&gt;/tmp/fspcibld/21345/obmc-robot/logs/20170707080642592994_TestsTestBasicPoweron/20170707080642592994_PowerOnTest/20170707080642592994_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170707 08:06:55.979" status="PASS" endtime="20170707 08:06:55.979"></status>
</kw>
<status starttime="20170707 08:06:55.978" status="PASS" endtime="20170707 08:06:55.979"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170707 08:06:55.981">Appended to file '&lt;a href="file:///tmp/fspcibld/21345/obmc-robot/logs/20170707080642592994_TestsTestBasicPoweron/20170707080642592994_PowerOnTest/20170707080642592994_BMC_general.txt"&gt;/tmp/fspcibld/21345/obmc-robot/logs/20170707080642592994_TestsTestBasicPoweron/20170707080642592994_PowerOnTest/20170707080642592994_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170707 08:06:55.980" status="PASS" endtime="20170707 08:06:55.981"></status>
</kw>
<status starttime="20170707 08:06:55.979" status="PASS" endtime="20170707 08:06:55.981"></status>
</kw>
<status starttime="20170707 08:06:55.975" status="PASS" endtime="20170707 08:06:55.981"></status>
</kw>
<status starttime="20170707 08:06:55.974" status="PASS" endtime="20170707 08:06:55.981"></status>
</kw>
<kw library="SSHLibrary" name="Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170707 08:06:55.982">Executing command 'uname -a'.</msg>
<msg level="INFO" timestamp="20170707 08:06:56.067">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20170707 08:06:56.068">${stdout} = Linux witherspoon 4.10.17-04c6ddff01cec5e54c6aeedcaa7691913f404796 #1 Fri Jul 7 06:56:05 UTC 2017 armv6l GNU/Linux</msg>
<msg level="INFO" timestamp="20170707 08:06:56.068">${stderr} = </msg>
<status starttime="20170707 08:06:55.981" status="PASS" endtime="20170707 08:06:56.068"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170707 08:06:56.074">Appended to file '&lt;a href="file:///tmp/fspcibld/21345/obmc-robot/logs/20170707080642592994_TestsTestBasicPoweron/20170707080642592994_PowerOnTest/20170707080642592994_BMC_general.txt"&gt;/tmp/fspcibld/21345/obmc-robot/logs/20170707080642592994_TestsTestBasicPoweron/20170707080642592994_PowerOnTest/20170707080642592994_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170707 08:06:56.073" status="PASS" endtime="20170707 08:06:56.074"></status>
</kw>
<status starttime="20170707 08:06:56.073" status="PASS" endtime="20170707 08:06:56.074"></status>
</kw>
<status starttime="20170707 08:06:56.068" status="PASS" endtime="20170707 08:06:56.074"></status>
</kw>
<status starttime="20170707 08:06:55.974" status="PASS" endtime="20170707 08:06:56.074"></status>
</kw>
<status starttime="20170707 08:06:55.973" status="PASS" endtime="20170707 08:06:56.074"></status>
</kw>
<status starttime="20170707 08:06:55.783" status="PASS" endtime="20170707 08:06:56.074"></status>
</kw>
<status starttime="20170707 08:06:55.782" status="PASS" endtime="20170707 08:06:56.074"></status>
</kw>
<status starttime="20170707 08:06:55.781" status="PASS" endtime="20170707 08:06:56.074"></status>
</kw>
<status starttime="20170707 08:06:54.048" status="PASS" endtime="20170707 08:06:56.075"></status>
</kw>
<status starttime="20170707 08:06:52.388" status="PASS" endtime="20170707 08:06:56.075"></status>
</kw>
<status starttime="20170707 08:06:52.364" status="PASS" endtime="20170707 08:06:56.075"></status>
</kw>
<status starttime="20170707 08:06:52.361" status="PASS" endtime="20170707 08:06:56.075"></status>
</kw>
<status starttime="20170707 08:06:52.361" status="PASS" endtime="20170707 08:06:56.075"></status>
</kw>
<kw type="foritem" name="${method} = ('OS FFDC', 'OS FFDC Files')">
<kw library="openbmc_ffdc_methods" name="Execute Keyword Method">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw library="Collections" name="List Should Contain Value">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status starttime="20170707 08:06:56.076" status="PASS" endtime="20170707 08:06:56.077"></status>
</kw>
<msg level="INFO" timestamp="20170707 08:06:56.077">${status} = PASS</msg>
<msg level="INFO" timestamp="20170707 08:06:56.077">${ret_values} = None</msg>
<status starttime="20170707 08:06:56.076" status="PASS" endtime="20170707 08:06:56.077"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status starttime="20170707 08:06:56.077" status="PASS" endtime="20170707 08:06:56.077"></status>
</kw>
<kw library="gen_robot_keyword" name="Run Key">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw library="openbmc_ffdc_methods" name="OS FFDC Files">
<doc>Get the command list and iterate</doc>
<kw library="BuiltIn" name="Return From Keyword If">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${OS_HOST}' == '${EMPTY}'</arg>
<arg>No OS Host Provided</arg>
</arguments>
<msg level="INFO" timestamp="20170707 08:06:56.103">Returning from the enclosing user keyword.</msg>
<status starttime="20170707 08:06:56.103" status="PASS" endtime="20170707 08:06:56.103"></status>
</kw>
<status starttime="20170707 08:06:56.102" status="PASS" endtime="20170707 08:06:56.104"></status>
</kw>
<status starttime="20170707 08:06:56.078" status="PASS" endtime="20170707 08:06:56.104"></status>
</kw>
<status starttime="20170707 08:06:56.075" status="PASS" endtime="20170707 08:06:56.104"></status>
</kw>
<status starttime="20170707 08:06:56.075" status="PASS" endtime="20170707 08:06:56.104"></status>
</kw>
<kw type="foritem" name="${method} = ('BMC Specific Files', 'BMC FFDC Files')">
<kw library="openbmc_ffdc_methods" name="Execute Keyword Method">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw library="Collections" name="List Should Contain Value">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status starttime="20170707 08:06:56.105" status="PASS" endtime="20170707 08:06:56.106"></status>
</kw>
<msg level="INFO" timestamp="20170707 08:06:56.106">${status} = PASS</msg>
<msg level="INFO" timestamp="20170707 08:06:56.106">${ret_values} = None</msg>
<status starttime="20170707 08:06:56.105" status="PASS" endtime="20170707 08:06:56.106"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status starttime="20170707 08:06:56.106" status="PASS" endtime="20170707 08:06:56.107"></status>
</kw>
<kw library="gen_robot_keyword" name="Run Key">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw library="openbmc_ffdc_methods" name="BMC FFDC Files">
<doc>Get the command list and iterate</doc>
<kw library="connection_client" name="Open Connection And Log In">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw library="Collections" name="Dictionary Should Contain Key">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg level="FAIL" timestamp="20170707 08:06:56.132">Dictionary does not contain key 'host'.</msg>
<status starttime="20170707 08:06:56.132" status="FAIL" endtime="20170707 08:06:56.132"></status>
</kw>
<msg level="INFO" timestamp="20170707 08:06:56.133">${has_host} = False</msg>
<status starttime="20170707 08:06:56.132" status="PASS" endtime="20170707 08:06:56.133"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status starttime="20170707 08:06:56.133" status="PASS" endtime="20170707 08:06:56.134"></status>
</kw>
<status starttime="20170707 08:06:56.133" status="PASS" endtime="20170707 08:06:56.134"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<kw library="connection_client" name="User input SSH and HTTPs Ports">
<doc>Update the global SSH and HTTPs port variable for QEMU</doc>
<kw library="BuiltIn" name="Convert To Integer">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${SSH_PORT}</arg>
</arguments>
<assign>
<var>${port_num}</var>
</assign>
<msg level="INFO" timestamp="20170707 08:06:56.135">${port_num} = 22</msg>
<status starttime="20170707 08:06:56.135" status="PASS" endtime="20170707 08:06:56.135"></status>
</kw>
<kw library="BuiltIn" name="Replace Variables">
<doc>Replaces variables in the given text with their current values.</doc>
<arguments>
<arg>${port_num}</arg>
</arguments>
<assign>
<var>${SSH_PORT}</var>
</assign>
<msg level="INFO" timestamp="20170707 08:06:56.136">${SSH_PORT} = 22</msg>
<status starttime="20170707 08:06:56.136" status="PASS" endtime="20170707 08:06:56.136"></status>
</kw>
<kw library="BuiltIn" name="Convert To Integer">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${HTTPS_PORT}</arg>
</arguments>
<assign>
<var>${https_num}</var>
</assign>
<msg level="INFO" timestamp="20170707 08:06:56.136">${https_num} = 443</msg>
<status starttime="20170707 08:06:56.136" status="PASS" endtime="20170707 08:06:56.136"></status>
</kw>
<kw library="BuiltIn" name="Set Global Variable">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${AUTH_URI}</arg>
<arg>https://${OPENBMC_HOST}:${https_num}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 08:06:56.139">${AUTH_URI} = https://9.3.21.61:443</msg>
<status starttime="20170707 08:06:56.137" status="PASS" endtime="20170707 08:06:56.139"></status>
</kw>
<status starttime="20170707 08:06:56.135" status="PASS" endtime="20170707 08:06:56.140"></status>
</kw>
<status starttime="20170707 08:06:56.134" status="PASS" endtime="20170707 08:06:56.140"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw library="Collections" name="Dictionary Should Contain Key">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg level="FAIL" timestamp="20170707 08:06:56.141">Dictionary does not contain key 'port'.</msg>
<status starttime="20170707 08:06:56.140" status="FAIL" endtime="20170707 08:06:56.141"></status>
</kw>
<msg level="INFO" timestamp="20170707 08:06:56.141">${has_port} = False</msg>
<status starttime="20170707 08:06:56.140" status="PASS" endtime="20170707 08:06:56.141"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keywords">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
</arguments>
<status starttime="20170707 08:06:56.142" status="PASS" endtime="20170707 08:06:56.143"></status>
</kw>
<kw library="SSHLibrary" name="Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status starttime="20170707 08:06:56.143" status="PASS" endtime="20170707 08:06:56.143"></status>
</kw>
<status starttime="20170707 08:06:56.142" status="PASS" endtime="20170707 08:06:56.143"></status>
</kw>
<status starttime="20170707 08:06:56.141" status="PASS" endtime="20170707 08:06:56.143"></status>
</kw>
<kw library="SSHLibrary" name="Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 08:06:56.144">Logging into '9.3.21.61:22' as 'root'.</msg>
<msg level="INFO" timestamp="20170707 08:06:57.824">Read output: root@witherspoon:~#</msg>
<status starttime="20170707 08:06:56.144" status="PASS" endtime="20170707 08:06:57.824"></status>
</kw>
<status starttime="20170707 08:06:56.131" status="PASS" endtime="20170707 08:06:57.824"></status>
</kw>
<kw library="openbmc_ffdc_list" name="Get Ffdc File Index">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg level="INFO" timestamp="20170707 08:06:57.825">@{entries} = [ BMC FILES ]</msg>
<status starttime="20170707 08:06:57.825" status="PASS" endtime="20170707 08:06:57.825"></status>
</kw>
<kw type="for" name="${index} IN [ @{entries} ]">
<kw type="foritem" name="${index} = BMC FILES">
<kw library="openbmc_ffdc_methods" name="Create File and Write Data">
<doc>Create files to current FFDC log directory,</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw library="openbmc_ffdc_list" name="Get Ffdc Bmc File">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg level="INFO" timestamp="20170707 08:06:57.827">@{cmd_list} = [ ('BMC_journalctl', 'journalctl --no-pager') | ('BMC_dmesg', 'dmesg') | ('BMC_proc_list', 'top -n 1 -b') | ('BMC_meminfo', 'cat /proc/meminfo') | ('BMC_procinfo', 'cat /proc/cpuinfo') ]</msg>
<status starttime="20170707 08:06:57.826" status="PASS" endtime="20170707 08:06:57.827"></status>
</kw>
<kw type="for" name="${cmd} IN [ @{cmd_list} ]">
<kw type="foritem" name="${cmd} = ('BMC_journalctl', 'journalctl --no-pager')">
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20170707 08:06:57.827">${logpath} = /tmp/fspcibld/21345/obmc-robot/logs/20170707080642592994_TestsTestBasicPoweron/20170707080642592994_PowerOnTest/20170707080642592994_BMC_journalctl.txt</msg>
<status starttime="20170707 08:06:57.827" status="PASS" endtime="20170707 08:06:57.828"></status>
</kw>
<kw library="openbmc_ffdc_methods" name="Execute Command and Write FFDC">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status starttime="20170707 08:06:57.829" status="PASS" endtime="20170707 08:06:57.829"></status>
</kw>
<kw library="SSHLibrary" name="Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170707 08:06:57.829">Executing command 'journalctl --no-pager'.</msg>
<msg level="INFO" timestamp="20170707 08:07:00.837">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20170707 08:07:00.839">${stdout} = -- Logs begin at Fri 2017-07-07 07:51:48 UTC, end at Fri 2017-07-07 08:06:57 UTC. --
Jul 07 07:51:48 witherspoon kernel: Booting Linux on physical CPU 0x0
Jul 07 07:51:48 witherspoon kernel: Linux ver...</msg>
<msg level="INFO" timestamp="20170707 08:07:00.839">${stderr} = </msg>
<status starttime="20170707 08:06:57.829" status="PASS" endtime="20170707 08:07:00.839"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170707 08:07:00.848">Appended to file '&lt;a href="file:///tmp/fspcibld/21345/obmc-robot/logs/20170707080642592994_TestsTestBasicPoweron/20170707080642592994_PowerOnTest/20170707080642592994_BMC_journalctl.txt"&gt;/tmp/fspcibld/21345/obmc-robot/logs/20170707080642592994_TestsTestBasicPoweron/20170707080642592994_PowerOnTest/20170707080642592994_BMC_journalctl.txt&lt;/a&gt;'.</msg>
<status starttime="20170707 08:07:00.846" status="PASS" endtime="20170707 08:07:00.848"></status>
</kw>
<status starttime="20170707 08:07:00.844" status="PASS" endtime="20170707 08:07:00.848"></status>
</kw>
<status starttime="20170707 08:07:00.839" status="PASS" endtime="20170707 08:07:00.848"></status>
</kw>
<status starttime="20170707 08:06:57.828" status="PASS" endtime="20170707 08:07:00.848"></status>
</kw>
<status starttime="20170707 08:06:57.827" status="PASS" endtime="20170707 08:07:00.848"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_dmesg', 'dmesg')">
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20170707 08:07:00.849">${logpath} = /tmp/fspcibld/21345/obmc-robot/logs/20170707080642592994_TestsTestBasicPoweron/20170707080642592994_PowerOnTest/20170707080642592994_BMC_dmesg.txt</msg>
<status starttime="20170707 08:07:00.849" status="PASS" endtime="20170707 08:07:00.849"></status>
</kw>
<kw library="openbmc_ffdc_methods" name="Execute Command and Write FFDC">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status starttime="20170707 08:07:00.850" status="PASS" endtime="20170707 08:07:00.851"></status>
</kw>
<kw library="SSHLibrary" name="Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170707 08:07:00.851">Executing command 'dmesg'.</msg>
<msg level="INFO" timestamp="20170707 08:07:00.978">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20170707 08:07:00.978">${stdout} = [    4.500000] ucd9000 11-0064: Device ID UCD90160|2.3.4.0000|110603
[    4.830000] leds-pca955x 11-0060: leds-pca955x: Using pca9552 16-bit LED driver at slave address 0x60
[    4.840000] leds-pca955...</msg>
<msg level="INFO" timestamp="20170707 08:07:00.978">${stderr} = </msg>
<status starttime="20170707 08:07:00.851" status="PASS" endtime="20170707 08:07:00.979"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170707 08:07:00.987">Appended to file '&lt;a href="file:///tmp/fspcibld/21345/obmc-robot/logs/20170707080642592994_TestsTestBasicPoweron/20170707080642592994_PowerOnTest/20170707080642592994_BMC_dmesg.txt"&gt;/tmp/fspcibld/21345/obmc-robot/logs/20170707080642592994_TestsTestBasicPoweron/20170707080642592994_PowerOnTest/20170707080642592994_BMC_dmesg.txt&lt;/a&gt;'.</msg>
<status starttime="20170707 08:07:00.986" status="PASS" endtime="20170707 08:07:00.987"></status>
</kw>
<status starttime="20170707 08:07:00.985" status="PASS" endtime="20170707 08:07:00.987"></status>
</kw>
<status starttime="20170707 08:07:00.979" status="PASS" endtime="20170707 08:07:00.987"></status>
</kw>
<status starttime="20170707 08:07:00.849" status="PASS" endtime="20170707 08:07:00.987"></status>
</kw>
<status starttime="20170707 08:07:00.849" status="PASS" endtime="20170707 08:07:00.987"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_proc_list', 'top -n 1 -b')">
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20170707 08:07:00.988">${logpath} = /tmp/fspcibld/21345/obmc-robot/logs/20170707080642592994_TestsTestBasicPoweron/20170707080642592994_PowerOnTest/20170707080642592994_BMC_proc_list.txt</msg>
<status starttime="20170707 08:07:00.988" status="PASS" endtime="20170707 08:07:00.988"></status>
</kw>
<kw library="openbmc_ffdc_methods" name="Execute Command and Write FFDC">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status starttime="20170707 08:07:00.989" status="PASS" endtime="20170707 08:07:00.990"></status>
</kw>
<kw library="SSHLibrary" name="Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170707 08:07:00.990">Executing command 'top -n 1 -b'.</msg>
<msg level="INFO" timestamp="20170707 08:07:01.311">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20170707 08:07:01.311">${stdout} = Mem: 159772K used, 272560K free, 14688K shrd, 10924K buff, 51112K cached
CPU:   0% usr  23% sys   0% nic  76% idle   0% io   0% irq   0% sirq
Load average: 0.44 0.91 1.00 1/152 1912
  PID  PPID USER  ...</msg>
<msg level="INFO" timestamp="20170707 08:07:01.311">${stderr} = </msg>
<status starttime="20170707 08:07:00.990" status="PASS" endtime="20170707 08:07:01.311"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170707 08:07:01.317">Appended to file '&lt;a href="file:///tmp/fspcibld/21345/obmc-robot/logs/20170707080642592994_TestsTestBasicPoweron/20170707080642592994_PowerOnTest/20170707080642592994_BMC_proc_list.txt"&gt;/tmp/fspcibld/21345/obmc-robot/logs/20170707080642592994_TestsTestBasicPoweron/20170707080642592994_PowerOnTest/20170707080642592994_BMC_proc_list.txt&lt;/a&gt;'.</msg>
<status starttime="20170707 08:07:01.317" status="PASS" endtime="20170707 08:07:01.317"></status>
</kw>
<status starttime="20170707 08:07:01.316" status="PASS" endtime="20170707 08:07:01.318"></status>
</kw>
<status starttime="20170707 08:07:01.312" status="PASS" endtime="20170707 08:07:01.318"></status>
</kw>
<status starttime="20170707 08:07:00.989" status="PASS" endtime="20170707 08:07:01.318"></status>
</kw>
<status starttime="20170707 08:07:00.988" status="PASS" endtime="20170707 08:07:01.318"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_meminfo', 'cat /proc/meminfo')">
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20170707 08:07:01.319">${logpath} = /tmp/fspcibld/21345/obmc-robot/logs/20170707080642592994_TestsTestBasicPoweron/20170707080642592994_PowerOnTest/20170707080642592994_BMC_meminfo.txt</msg>
<status starttime="20170707 08:07:01.318" status="PASS" endtime="20170707 08:07:01.319"></status>
</kw>
<kw library="openbmc_ffdc_methods" name="Execute Command and Write FFDC">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status starttime="20170707 08:07:01.320" status="PASS" endtime="20170707 08:07:01.320"></status>
</kw>
<kw library="SSHLibrary" name="Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170707 08:07:01.320">Executing command 'cat /proc/meminfo'.</msg>
<msg level="INFO" timestamp="20170707 08:07:01.405">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20170707 08:07:01.405">${stdout} = MemTotal:         432332 kB
MemFree:          272560 kB
MemAvailable:     317256 kB
Buffers:           10924 kB
Cached:            51112 kB
SwapCached:            0 kB
Active:           107228 kB
Inac...</msg>
<msg level="INFO" timestamp="20170707 08:07:01.405">${stderr} = </msg>
<status starttime="20170707 08:07:01.320" status="PASS" endtime="20170707 08:07:01.405"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170707 08:07:01.411">Appended to file '&lt;a href="file:///tmp/fspcibld/21345/obmc-robot/logs/20170707080642592994_TestsTestBasicPoweron/20170707080642592994_PowerOnTest/20170707080642592994_BMC_meminfo.txt"&gt;/tmp/fspcibld/21345/obmc-robot/logs/20170707080642592994_TestsTestBasicPoweron/20170707080642592994_PowerOnTest/20170707080642592994_BMC_meminfo.txt&lt;/a&gt;'.</msg>
<status starttime="20170707 08:07:01.411" status="PASS" endtime="20170707 08:07:01.412"></status>
</kw>
<status starttime="20170707 08:07:01.410" status="PASS" endtime="20170707 08:07:01.412"></status>
</kw>
<status starttime="20170707 08:07:01.406" status="PASS" endtime="20170707 08:07:01.412"></status>
</kw>
<status starttime="20170707 08:07:01.319" status="PASS" endtime="20170707 08:07:01.412"></status>
</kw>
<status starttime="20170707 08:07:01.318" status="PASS" endtime="20170707 08:07:01.412"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_procinfo', 'cat /proc/cpuinfo')">
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20170707 08:07:01.413">${logpath} = /tmp/fspcibld/21345/obmc-robot/logs/20170707080642592994_TestsTestBasicPoweron/20170707080642592994_PowerOnTest/20170707080642592994_BMC_procinfo.txt</msg>
<status starttime="20170707 08:07:01.412" status="PASS" endtime="20170707 08:07:01.413"></status>
</kw>
<kw library="openbmc_ffdc_methods" name="Execute Command and Write FFDC">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status starttime="20170707 08:07:01.414" status="PASS" endtime="20170707 08:07:01.414"></status>
</kw>
<kw library="SSHLibrary" name="Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170707 08:07:01.414">Executing command 'cat /proc/cpuinfo'.</msg>
<msg level="INFO" timestamp="20170707 08:07:01.490">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20170707 08:07:01.491">${stdout} = processor	: 0
model name	: ARMv6-compatible processor rev 7 (v6l)
BogoMIPS	: 789.70
Features	: half thumb fastmult edsp java tls 
CPU implementer	: 0x41
CPU architecture: 7
CPU variant	: 0x0
CPU part	...</msg>
<msg level="INFO" timestamp="20170707 08:07:01.491">${stderr} = </msg>
<status starttime="20170707 08:07:01.414" status="PASS" endtime="20170707 08:07:01.491"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170707 08:07:01.497">Appended to file '&lt;a href="file:///tmp/fspcibld/21345/obmc-robot/logs/20170707080642592994_TestsTestBasicPoweron/20170707080642592994_PowerOnTest/20170707080642592994_BMC_procinfo.txt"&gt;/tmp/fspcibld/21345/obmc-robot/logs/20170707080642592994_TestsTestBasicPoweron/20170707080642592994_PowerOnTest/20170707080642592994_BMC_procinfo.txt&lt;/a&gt;'.</msg>
<status starttime="20170707 08:07:01.497" status="PASS" endtime="20170707 08:07:01.497"></status>
</kw>
<status starttime="20170707 08:07:01.496" status="PASS" endtime="20170707 08:07:01.497"></status>
</kw>
<status starttime="20170707 08:07:01.491" status="PASS" endtime="20170707 08:07:01.497"></status>
</kw>
<status starttime="20170707 08:07:01.413" status="PASS" endtime="20170707 08:07:01.498"></status>
</kw>
<status starttime="20170707 08:07:01.412" status="PASS" endtime="20170707 08:07:01.498"></status>
</kw>
<status starttime="20170707 08:06:57.827" status="PASS" endtime="20170707 08:07:01.498"></status>
</kw>
<status starttime="20170707 08:06:57.826" status="PASS" endtime="20170707 08:07:01.498"></status>
</kw>
<status starttime="20170707 08:06:57.825" status="PASS" endtime="20170707 08:07:01.498"></status>
</kw>
<status starttime="20170707 08:06:57.825" status="PASS" endtime="20170707 08:07:01.498"></status>
</kw>
<status starttime="20170707 08:06:56.131" status="PASS" endtime="20170707 08:07:01.498"></status>
</kw>
<status starttime="20170707 08:06:56.107" status="PASS" endtime="20170707 08:07:01.498"></status>
</kw>
<status starttime="20170707 08:06:56.104" status="PASS" endtime="20170707 08:07:01.498"></status>
</kw>
<status starttime="20170707 08:06:56.104" status="PASS" endtime="20170707 08:07:01.498"></status>
</kw>
<status starttime="20170707 08:06:44.449" status="PASS" endtime="20170707 08:07:01.498"></status>
</kw>
<status starttime="20170707 08:06:44.446" status="PASS" endtime="20170707 08:07:01.498"></status>
</kw>
<status starttime="20170707 08:06:44.446" status="PASS" endtime="20170707 08:07:01.498"></status>
</kw>
<status starttime="20170707 08:06:44.446" status="PASS" endtime="20170707 08:07:01.498"></status>
</kw>
<kw library="SSHLibrary" name="Close All Connections">
<doc>Closes all open connections.</doc>
<status starttime="20170707 08:07:01.499" status="PASS" endtime="20170707 08:07:01.613"></status>
</kw>
<status starttime="20170707 08:06:44.445" status="PASS" endtime="20170707 08:07:01.613"></status>
</kw>
<status starttime="20170707 08:06:39.541" status="PASS" endtime="20170707 08:07:01.613"></status>
</kw>
<status starttime="20170707 08:06:39.541" status="PASS" endtime="20170707 08:07:01.613"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}'=='True'</arg>
<arg>Recover Quiesced Host</arg>
</arguments>
<status starttime="20170707 08:07:01.613" status="PASS" endtime="20170707 08:07:01.614"></status>
</kw>
<kw library="openbmc_ffdc_methods" name="Log Test Case Status">
<doc>Test case execution result history.</doc>
<kw library="BuiltIn" name="Get Variable Value">
<doc>Returns variable value or ``default`` if the variable does not exist.</doc>
<arguments>
<arg>${FFDC_DIR_PATH_STYLE}</arg>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${FFDC_DIR_PATH_STYLE}</var>
</assign>
<msg level="INFO" timestamp="20170707 08:07:01.623">${FFDC_DIR_PATH_STYLE} = </msg>
<status starttime="20170707 08:07:01.614" status="PASS" endtime="20170707 08:07:01.623"></status>
</kw>
<kw library="BuiltIn" name="Get Variable Value">
<doc>Returns variable value or ``default`` if the variable does not exist.</doc>
<arguments>
<arg>${FFDC_DIR_PATH}</arg>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${FFDC_DIR_PATH}</var>
</assign>
<msg level="INFO" timestamp="20170707 08:07:01.623">${FFDC_DIR_PATH} = /tmp/fspcibld/21345/obmc-robot/logs/20170707080642592994_TestsTestBasicPoweron/20170707080642592994_PowerOnTest/</msg>
<status starttime="20170707 08:07:01.623" status="PASS" endtime="20170707 08:07:01.623"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${FFDC_DIR_PATH}' == '${EMPTY}'</arg>
<arg>Set FFDC Defaults</arg>
</arguments>
<status starttime="20170707 08:07:01.623" status="PASS" endtime="20170707 08:07:01.624"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${FFDC_DIR_PATH_STYLE}' == '${1}'</arg>
<arg>Run Keywords</arg>
<arg>Set Global Variable</arg>
<arg>${FFDC_LOG_PATH}</arg>
<arg>${FFDC_DIR_PATH}</arg>
<arg>AND</arg>
<arg>Set Global Variable</arg>
<arg>${TEST_HISTORY}</arg>
<arg>${FFDC_DIR_PATH}test_history.txt</arg>
</arguments>
<status starttime="20170707 08:07:01.624" status="PASS" endtime="20170707 08:07:01.625"></status>
</kw>
<kw library="OperatingSystem" name="Create Directory">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>${FFDC_LOG_PATH}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170707 08:07:01.625">Directory '&lt;a href="file:///tmp/fspcibld/21345/obmc-robot/logs"&gt;/tmp/fspcibld/21345/obmc-robot/logs&lt;/a&gt;' already exists.</msg>
<status starttime="20170707 08:07:01.625" status="PASS" endtime="20170707 08:07:01.625"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>OperatingSystem.File Should Exist</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<assign>
<var>${exist}</var>
</assign>
<kw library="OperatingSystem" name="File Should Exist">
<doc>Fails unless the given ``path`` points to an existing file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170707 08:07:01.626">File '&lt;a href="file:///tmp/fspcibld/21345/obmc-robot/logs/test_history.txt"&gt;/tmp/fspcibld/21345/obmc-robot/logs/test_history.txt&lt;/a&gt;' exists.</msg>
<status starttime="20170707 08:07:01.626" status="PASS" endtime="20170707 08:07:01.626"></status>
</kw>
<msg level="INFO" timestamp="20170707 08:07:01.626">${exist} = True</msg>
<status starttime="20170707 08:07:01.625" status="PASS" endtime="20170707 08:07:01.626"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${exist}' == '${False}'</arg>
<arg>Create File</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<status starttime="20170707 08:07:01.627" status="PASS" endtime="20170707 08:07:01.627"></status>
</kw>
<kw library="gen_robot_print" name="Rpvars">
<arguments>
<arg>TEST_HISTORY</arg>
</arguments>
<status starttime="20170707 08:07:01.627" status="PASS" endtime="20170707 08:07:01.627"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Get Current Time Stamp">
<doc>Get the current time stamp data</doc>
<assign>
<var>${cur_time}</var>
</assign>
<kw library="DateTime" name="Get Current Date">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20170707 08:07:01.628">${cur_time} = 2017-07-07 08:07:01:628224</msg>
<status starttime="20170707 08:07:01.628" status="PASS" endtime="20170707 08:07:01.628"></status>
</kw>
<kw library="openbmc_ffdc_list" name="Get Strip String">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20170707 08:07:01.629">${cur_time} = 20170707080701628224</msg>
<status starttime="20170707 08:07:01.629" status="PASS" endtime="20170707 08:07:01.629"></status>
</kw>
<msg level="INFO" timestamp="20170707 08:07:01.629">${cur_time} = 20170707080701628224</msg>
<status starttime="20170707 08:07:01.628" status="PASS" endtime="20170707 08:07:01.629"></status>
</kw>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
<arg>${cur_time}:${SUITE_NAME}:${TEST_NAME}:${TEST_STATUS}${\n}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170707 08:07:01.630">Appended to file '&lt;a href="file:///tmp/fspcibld/21345/obmc-robot/logs/test_history.txt"&gt;/tmp/fspcibld/21345/obmc-robot/logs/test_history.txt&lt;/a&gt;'.</msg>
<status starttime="20170707 08:07:01.629" status="PASS" endtime="20170707 08:07:01.630"></status>
</kw>
<status starttime="20170707 08:07:01.614" status="PASS" endtime="20170707 08:07:01.630"></status>
</kw>
<status starttime="20170707 08:06:39.276" status="PASS" endtime="20170707 08:07:01.630"></status>
</kw>
<kw library="utils" name="Stop SOL Console Logging">
<doc>Stop system console logging and return log output.</doc>
<assign>
<var>${sol_log}</var>
</assign>
<kw library="utils" name="Create OS Console File Path">
<doc>Create OS console file path name and return it.</doc>
<arguments>
<arg>${log_file_path}</arg>
</arguments>
<assign>
<var>${log_file_path}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>/tmp/${OPENBMC_HOST}_os_console</arg>
</arguments>
<assign>
<var>${default_file_path}</var>
</assign>
<msg level="INFO" timestamp="20170707 08:07:01.632">${default_file_path} = /tmp/9.3.21.61_os_console</msg>
<status starttime="20170707 08:07:01.632" status="PASS" endtime="20170707 08:07:01.632"></status>
</kw>
<kw library="BuiltIn" name="Set Variable If">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${log_file_path}' == '${EMPTY}'</arg>
<arg>${default_file_path}</arg>
<arg>${log_file_path}</arg>
</arguments>
<assign>
<var>${log_file_path}</var>
</assign>
<msg level="INFO" timestamp="20170707 08:07:01.633">${log_file_path} = /tmp/9.3.21.61_os_console</msg>
<status starttime="20170707 08:07:01.632" status="PASS" endtime="20170707 08:07:01.633"></status>
</kw>
<msg level="INFO" timestamp="20170707 08:07:01.633">${log_file_path} = /tmp/9.3.21.61_os_console</msg>
<status starttime="20170707 08:07:01.631" status="PASS" endtime="20170707 08:07:01.633"></status>
</kw>
<kw library="utils" name="Create OS Console Command String">
<doc>Return a command string to start OS console logging.</doc>
<assign>
<var>${search_string}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>which ssh_pw 2&gt;&amp;1</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170707 08:07:01.634">${cmd_buf} = which ssh_pw 2&gt;&amp;1</msg>
<status starttime="20170707 08:07:01.634" status="PASS" endtime="20170707 08:07:01.634"></status>
</kw>
<kw library="gen_robot_print" name="Rdpissuing">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status starttime="20170707 08:07:01.634" status="PASS" endtime="20170707 08:07:01.634"></status>
</kw>
<kw library="OperatingSystem" name="Run And Return Rc And Output">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg level="INFO" timestamp="20170707 08:07:01.640">Running command 'which ssh_pw 2&gt;&amp;1'.</msg>
<msg level="INFO" timestamp="20170707 08:07:01.643">${rc} = 0</msg>
<msg level="INFO" timestamp="20170707 08:07:01.644">${output} = /tmp/fspcibld/21345/obmc-robot/.tox/witherspoon/bin/ssh_pw</msg>
<status starttime="20170707 08:07:01.635" status="PASS" endtime="20170707 08:07:01.644"></status>
</kw>
<kw library="gen_robot_print" name="Rdpvars">
<arguments>
<arg>rc</arg>
<arg>output</arg>
</arguments>
<status starttime="20170707 08:07:01.646" status="PASS" endtime="20170707 08:07:01.647"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${rc}</arg>
<arg>${0}</arg>
<arg>msg=${output}\n</arg>
</arguments>
<status starttime="20170707 08:07:01.647" status="PASS" endtime="20170707 08:07:01.648"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>ssh_pw ${OPENBMC_PASSWORD} -p 2200</arg>
<arg>-o "StrictHostKeyChecking no" ${OPENBMC_USERNAME}@${OPENBMC_HOST}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170707 08:07:01.649">${cmd_buf} = ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.3.21.61</msg>
<status starttime="20170707 08:07:01.648" status="PASS" endtime="20170707 08:07:01.649"></status>
</kw>
<msg level="INFO" timestamp="20170707 08:07:01.650">${search_string} = ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.3.21.61</msg>
<status starttime="20170707 08:07:01.633" status="PASS" endtime="20170707 08:07:01.650"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>echo $(ps -ef | egrep '${search_string}'</arg>
<arg>| egrep -v grep | cut -c10-14)</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170707 08:07:01.651">${cmd_buf} = echo $(ps -ef | egrep 'ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.3.21.61' | egrep -v grep | cut -c10-14)</msg>
<status starttime="20170707 08:07:01.650" status="PASS" endtime="20170707 08:07:01.651"></status>
</kw>
<kw library="gen_robot_print" name="Rdpissuing">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status starttime="20170707 08:07:01.651" status="PASS" endtime="20170707 08:07:01.651"></status>
</kw>
<kw library="OperatingSystem" name="Run And Return Rc And Output">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${os_con_pid}</var>
</assign>
<msg level="INFO" timestamp="20170707 08:07:01.656">Running command 'echo $(ps -ef | egrep 'ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.3.21.61' | egrep -v grep | cut -c10-14) 2&gt;&amp;1'.</msg>
<msg level="INFO" timestamp="20170707 08:07:01.666">${rc} = 0</msg>
<msg level="INFO" timestamp="20170707 08:07:01.666">${os_con_pid} = </msg>
<status starttime="20170707 08:07:01.652" status="PASS" endtime="20170707 08:07:01.666"></status>
</kw>
<kw library="gen_robot_print" name="Rdpvars">
<arguments>
<arg>os_con_pid</arg>
</arguments>
<status starttime="20170707 08:07:01.668" status="PASS" endtime="20170707 08:07:01.669"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>kill -9 ${os_con_pid}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170707 08:07:01.669">${cmd_buf} = kill -9 </msg>
<status starttime="20170707 08:07:01.669" status="PASS" endtime="20170707 08:07:01.669"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${os_con_pid}' != '${EMPTY}'</arg>
<arg>Rdpissuing</arg>
<arg>${cmd_buf}</arg>
</arguments>
<status starttime="20170707 08:07:01.670" status="PASS" endtime="20170707 08:07:01.672"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${os_con_pid}' != '${EMPTY}'</arg>
<arg>Run And Return Rc And Output</arg>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg level="INFO" timestamp="20170707 08:07:01.673">${rc} = None</msg>
<msg level="INFO" timestamp="20170707 08:07:01.673">${output} = None</msg>
<status starttime="20170707 08:07:01.672" status="PASS" endtime="20170707 08:07:01.673"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${os_con_pid}' != '${EMPTY}'</arg>
<arg>Rdpvars</arg>
<arg>rc</arg>
<arg>output</arg>
</arguments>
<status starttime="20170707 08:07:01.673" status="PASS" endtime="20170707 08:07:01.674"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${targ_file_path}' != '${EMPTY}'</arg>
<arg>Run Keyword And Ignore Error</arg>
<arg>Copy File</arg>
<arg>${log_file_path}</arg>
<arg>${targ_file_path}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Copy File</arg>
<arg>${log_file_path}</arg>
<arg>${targ_file_path}</arg>
</arguments>
<kw library="OperatingSystem" name="Copy File">
<doc>Copies the source file into the destination.</doc>
<arguments>
<arg>${log_file_path}</arg>
<arg>${targ_file_path}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170707 08:07:01.677">Copied file from '&lt;a href="file:///tmp/9.3.21.61_os_console"&gt;/tmp/9.3.21.61_os_console&lt;/a&gt;' to '&lt;a href="file:///tmp/fspcibld/21345/obmc-robot/logs/9.3.21.61_os_console"&gt;/tmp/fspcibld/21345/obmc-robot/logs/9.3.21.61_os_console&lt;/a&gt;'.</msg>
<status starttime="20170707 08:07:01.675" status="PASS" endtime="20170707 08:07:01.677"></status>
</kw>
<status starttime="20170707 08:07:01.675" status="PASS" endtime="20170707 08:07:01.677"></status>
</kw>
<status starttime="20170707 08:07:01.674" status="PASS" endtime="20170707 08:07:01.677"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${output}</var>
</assign>
<msg level="INFO" timestamp="20170707 08:07:01.678">${output} = </msg>
<status starttime="20170707 08:07:01.678" status="PASS" endtime="20170707 08:07:01.678"></status>
</kw>
<kw library="BuiltIn" name="Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${debug}^1</arg>
</arguments>
<assign>
<var>${loc_quiet}</var>
</assign>
<msg level="INFO" timestamp="20170707 08:07:01.679">${loc_quiet} = 1</msg>
<status starttime="20170707 08:07:01.678" status="PASS" endtime="20170707 08:07:01.679"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${return_data}' == '${1}'</arg>
<arg>Cmd Fnc</arg>
<arg>cat ${log_file_path}</arg>
<arg>quiet=${loc_quiet}</arg>
<arg>print_output=${0}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<kw library="gen_cmd" name="Cmd Fnc">
<doc>Run the given command in a shell and return the shell return code.</doc>
<arguments>
<arg>cat ${log_file_path}</arg>
<arg>quiet=${loc_quiet}</arg>
<arg>print_output=${0}</arg>
</arguments>
<status starttime="20170707 08:07:01.680" status="PASS" endtime="20170707 08:07:01.718"></status>
</kw>
<msg level="INFO" timestamp="20170707 08:07:01.719">${rc} = 0</msg>
<msg level="INFO" timestamp="20170707 08:07:01.720">${output} = spawn ssh -p 2200 -o StrictHostKeyChecking no root@9.3.21.61
Warning: Permanently added '[9.3.21.61]:2200' (RSA) to the list of known hosts.
root@9.3.21.61's password: 
[24;13H1[24;26H[24;10HUb...</msg>
<status starttime="20170707 08:07:01.679" status="PASS" endtime="20170707 08:07:01.720"></status>
</kw>
<msg level="INFO" timestamp="20170707 08:07:01.721">${sol_log} = spawn ssh -p 2200 -o StrictHostKeyChecking no root@9.3.21.61
Warning: Permanently added '[9.3.21.61]:2200' (RSA) to the list of known hosts.
root@9.3.21.61's password: 
[24;13H1[24;26H[24;10HUb...</msg>
<status starttime="20170707 08:07:01.631" status="PASS" endtime="20170707 08:07:01.721"></status>
</kw>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${sol_log}</arg>
</arguments>
<msg level="INFO" timestamp="20170707 08:07:01.723">spawn ssh -p 2200 -o StrictHostKeyChecking no root@9.3.21.61
Warning: Permanently added '[9.3.21.61]:2200' (RSA) to the list of known hosts.
root@9.3.21.61's password: 
[24;13H1[24;26H[24;10HUbuntu          [24;16H Loaded kernel image from file:///var/petitboot/mnt/dev/sda2/boot/vmlinux-4.10.[?7l0[?7h[24;9Hinitrd from file:///var/petitboot/mnt/dev/sda2/boot/initrd.img-4.10.0-2[?7l6[?7h Running boot hooks[K Performing kexec loadreboot[   46.128813792,5] IPMI: Soft shutdown requested
The system is going down NOW!
Sent SIGTERM to all processes
Sent SIGKILL to all processes
[   32.014448] kexec_core: Starting new kernel
[   50.012551456,5] OPAL: Switch to big-endian OS
[   50.100076672,5] OPAL: Switch to little-endian OS
 -&gt; smp_release_cpus()
spinning_secondaries = 15
 &lt;- smp_release_cpus()
[    1.724052] Unable to open file: /etc/keys/x509_ima.der (-2)
[    1.724057] Unable to open file: /etc/keys/x509_evm.der (-2)
[40m[2J[-1;-1f[?25l[-1;-1f[40m[37mUbuntu 17.04[-1;-1f[37m.  [37m.  [37m.  [37m.[-1;-1f[40m[37mUbuntu 17.04[-1;-1f[33m.  [37m.  [37m.  [37m.[-1;-1f[40m[37mUbuntu 17.04[-1;-1f[33m.  [33m.  [37m.  [37m.[-1;-1f[40m[37mUbuntu 17.04[-1;-1f[33m.  [33m.  [33m.  [37m.[-1;-1f[40m[37mUbuntu 17.04[-1;-1f[33m.  [33m.  [33m.  [33m.[-1;-1f[40m[37mUbuntu 17.04[-1;-1f[37m.  [33m.  [33m.  [33m.[-1;-1f[40m[37mUbuntu 17.04[-1;-1f[37m.  [37m.  [33m.  [33m.[-1;-1f[40m[37mUbuntu 17.04[-1;-1f[37m.  [37m.  [37m.  [33m.[-1;-1f[40m[37mUbuntu 17.04[-1;-1f[37m.  [37m.  [37m.  [37m.[-1;-1f[40m[37mUbuntu 17.04[-1;-1f[33m.  [37m.  [37m.  [37m.[-1;-1f[40m[37mUbuntu 17.04[-1;-1f[33m.  [33m.  [37m.  [37m.[-1;-1f[40m[37mUbuntu 17.04[-1;-1f[33m.  [33m.  [33m.  [37m.[-1;-1f[40m[37mUbuntu 17.04[-1;-1f[33m.  [33m.  [33m.  [33m.[49m[2J[-1;-1f[?25h[[0;32m  OK  [0m] Started OpenBSD Secure Shell server.

Ubuntu 17.04 ws017p1 hvc0

ws017p1 login: </msg>
<status starttime="20170707 08:07:01.723" status="PASS" endtime="20170707 08:07:01.724"></status>
</kw>
<status starttime="20170707 08:06:39.275" status="PASS" endtime="20170707 08:07:01.724"></status>
</kw>
<doc>Power off and on.</doc>
<tags>
<tag>chassisboot</tag>
<tag>Power_On_Test</tag>
</tags>
<status starttime="20170707 08:03:33.555" status="FAIL" endtime="20170707 08:07:01.724" critical="yes">Keyword 'Is Host Off' failed after retrying for 3 minutes. The last error was: Off != Running</status>
</test>
<doc>Test power on for HW CI.</doc>
<status starttime="20170707 08:03:33.523" status="FAIL" endtime="20170707 08:07:01.725"></status>
</suite>
<doc>Set metadata for test suite.</doc>
<status starttime="20170707 08:03:26.516" status="FAIL" endtime="20170707 08:07:01.728"></status>
</suite>
<statistics>
<total>
<stat fail="1" pass="1">Critical Tests</stat>
<stat fail="1" pass="1">All Tests</stat>
</total>
<tag>
<stat fail="1" pass="0">chassisboot</stat>
<stat fail="1" pass="0">Power_On_Test</stat>
<stat fail="0" pass="1">Test_SSL_Connection</stat>
</tag>
<suite>
<stat fail="1" pass="1" id="s1" name="Tests">Tests</stat>
<stat fail="0" pass="1" id="s1-s1" name="Security">Tests.Security</stat>
<stat fail="0" pass="1" id="s1-s1-s1" name="Test Ssl">Tests.Security.Test Ssl</stat>
<stat fail="1" pass="0" id="s1-s2" name="Test Basic Poweron">Tests.Test Basic Poweron</stat>
</suite>
</statistics>
<errors>
</errors>
</robot>
