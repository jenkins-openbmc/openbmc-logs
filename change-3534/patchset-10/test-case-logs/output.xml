<?xml version="1.0" encoding="UTF-8"?>
<robot generator="Robot 3.0.2 (Python 2.7.12 on linux2)" generated="20170419 22:14:50.396">
<suite id="s1" source="/tmp/root/9272/obmc-robot/tests" name="Tests">
<kw type="setup" name="System Driver Data">
<doc>System driver information.</doc>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg level="FAIL" timestamp="20170419 22:14:50.926">Dictionary does not contain key 'host'.</msg>
<status starttime="20170419 22:14:50.925" status="FAIL" endtime="20170419 22:14:50.926"></status>
</kw>
<msg level="INFO" timestamp="20170419 22:14:50.926">${has_host} = False</msg>
<status starttime="20170419 22:14:50.925" status="PASS" endtime="20170419 22:14:50.926"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status starttime="20170419 22:14:50.927" status="PASS" endtime="20170419 22:14:50.927"></status>
</kw>
<status starttime="20170419 22:14:50.926" status="PASS" endtime="20170419 22:14:50.927"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<kw name="User input SSH and HTTPs Ports" library="connection_client">
<doc>Update the global SSH and HTTPs port variable for QEMU</doc>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${SSH_PORT}</arg>
</arguments>
<assign>
<var>${port_num}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:14:50.928">${port_num} = 22</msg>
<status starttime="20170419 22:14:50.928" status="PASS" endtime="20170419 22:14:50.928"></status>
</kw>
<kw name="Replace Variables" library="BuiltIn">
<doc>Replaces variables in the given text with their current values.</doc>
<arguments>
<arg>${port_num}</arg>
</arguments>
<assign>
<var>${SSH_PORT}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:14:50.929">${SSH_PORT} = 22</msg>
<status starttime="20170419 22:14:50.928" status="PASS" endtime="20170419 22:14:50.929"></status>
</kw>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${HTTPS_PORT}</arg>
</arguments>
<assign>
<var>${https_num}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:14:50.929">${https_num} = 443</msg>
<status starttime="20170419 22:14:50.929" status="PASS" endtime="20170419 22:14:50.929"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${AUTH_URI}</arg>
<arg>https://${OPENBMC_HOST}:${https_num}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:14:50.930">${AUTH_URI} = https://9.3.86.161:443</msg>
<status starttime="20170419 22:14:50.930" status="PASS" endtime="20170419 22:14:50.930"></status>
</kw>
<status starttime="20170419 22:14:50.928" status="PASS" endtime="20170419 22:14:50.930"></status>
</kw>
<status starttime="20170419 22:14:50.927" status="PASS" endtime="20170419 22:14:50.930"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg level="FAIL" timestamp="20170419 22:14:50.931">Dictionary does not contain key 'port'.</msg>
<status starttime="20170419 22:14:50.931" status="FAIL" endtime="20170419 22:14:50.931"></status>
</kw>
<msg level="INFO" timestamp="20170419 22:14:50.931">${has_port} = False</msg>
<status starttime="20170419 22:14:50.931" status="PASS" endtime="20170419 22:14:50.931"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keywords" library="BuiltIn">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
</arguments>
<status starttime="20170419 22:14:50.933" status="PASS" endtime="20170419 22:14:50.933"></status>
</kw>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status starttime="20170419 22:14:50.933" status="PASS" endtime="20170419 22:14:50.934"></status>
</kw>
<status starttime="20170419 22:14:50.932" status="PASS" endtime="20170419 22:14:50.934"></status>
</kw>
<status starttime="20170419 22:14:50.932" status="PASS" endtime="20170419 22:14:50.934"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:14:50.934">Logging into '9.3.86.161:22' as 'root'.</msg>
<msg level="INFO" timestamp="20170419 22:14:52.810">Read output: root@witherspoon:~#</msg>
<status starttime="20170419 22:14:50.934" status="PASS" endtime="20170419 22:14:52.810"></status>
</kw>
<status starttime="20170419 22:14:50.924" status="PASS" endtime="20170419 22:14:52.810"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Log BMC Driver Details</arg>
</arguments>
<kw name="Log BMC Driver Details">
<doc>Get BMC driver details and log.</doc>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${DRIVER_CMD}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${output}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:14:52.812">Executing command 'cat /etc/os-release | grep ^VERSION_ID='.</msg>
<msg level="INFO" timestamp="20170419 22:14:52.878">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20170419 22:14:52.879">${output} = VERSION_ID="v1.99.4-40-g4e3ec01"</msg>
<msg level="INFO" timestamp="20170419 22:14:52.879">${stderr} = </msg>
<status starttime="20170419 22:14:52.811" status="PASS" endtime="20170419 22:14:52.879"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:14:52.879">Length is 0</msg>
<status starttime="20170419 22:14:52.879" status="PASS" endtime="20170419 22:14:52.879"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:14:52.880">VERSION_ID="v1.99.4-40-g4e3ec01"</msg>
<status starttime="20170419 22:14:52.880" status="PASS" endtime="20170419 22:14:52.880"></status>
</kw>
<status starttime="20170419 22:14:52.811" status="PASS" endtime="20170419 22:14:52.880"></status>
</kw>
<status starttime="20170419 22:14:52.811" status="PASS" endtime="20170419 22:14:52.880"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Log PNOR Driver Details</arg>
</arguments>
<kw name="Log PNOR Driver Details">
<doc>Get PNOR driver details and log.</doc>
<kw name="Execute Command On BMC" library="utils">
<doc>Execute given command on BMC and return output.</doc>
<arguments>
<arg>${PNOR_CMD}</arg>
</arguments>
<assign>
<var>${pnor_details}</var>
</assign>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${command}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:14:52.882">Executing command '/usr/sbin/pflash -r /tmp/out.txt -P VERSION; cat /tmp/out.txt'.</msg>
<msg level="INFO" timestamp="20170419 22:14:53.016">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20170419 22:14:53.017">${stdout} = Reading to "/tmp/out.txt" from 0x027e0000..0x027e1000 !
[                                                  ] 0%[==================================================] 100%
IBM-witherspoon-ibm-OP9_v1.15...</msg>
<msg level="INFO" timestamp="20170419 22:14:53.017">${stderr} = </msg>
<status starttime="20170419 22:14:52.881" status="PASS" endtime="20170419 22:14:53.017"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:14:53.017">Length is 0</msg>
<status starttime="20170419 22:14:53.017" status="PASS" endtime="20170419 22:14:53.017"></status>
</kw>
<msg level="INFO" timestamp="20170419 22:14:53.018">${pnor_details} = Reading to "/tmp/out.txt" from 0x027e0000..0x027e1000 !
[                                                  ] 0%[==================================================] 100%
IBM-witherspoon-ibm-OP9_v1.15...</msg>
<status starttime="20170419 22:14:52.881" status="PASS" endtime="20170419 22:14:53.018"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>PNOR_INFO=${pnor_details}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:14:53.018">PNOR_INFO=Reading to "/tmp/out.txt" from 0x027e0000..0x027e1000 !
[                                                  ] 0%[==================================================] 100%
IBM-witherspoon-ibm-OP9_v1.15_1.22
	op-build-v1.15-115-ge46df0d-dirty
	buildroot-2017.02-4-gc28573e
	skiboot-5.5.0-rc3
	hostboot-3a3d65e
	linux-4.10.7-openpower1-pb32b856
	petitboot-v1.4.2-pa470686
	witherspoon-xml-07ef29d
	occ-e1889e5
	hostboot-binaries-46670e3
	capp-ucode-1bb7503
</msg>
<status starttime="20170419 22:14:53.018" status="PASS" endtime="20170419 22:14:53.019"></status>
</kw>
<status starttime="20170419 22:14:52.881" status="PASS" endtime="20170419 22:14:53.019"></status>
</kw>
<status starttime="20170419 22:14:52.880" status="PASS" endtime="20170419 22:14:53.019"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Log BMC Model</arg>
</arguments>
<kw name="Log BMC Model">
<doc>Fetch BMC Model name from system and log.</doc>
<kw name="Get BMC System Model" library="utils">
<doc>Get the BMC model from the device tree.</doc>
<assign>
<var>${bmc_model}</var>
</assign>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>cat ${devicetree_base} | cut -d " " -f 1</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${bmc_model}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:14:53.021">Executing command 'cat /sys/firmware/devicetree/base/model | cut -d " " -f 1'.</msg>
<msg level="INFO" timestamp="20170419 22:14:53.116">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20170419 22:14:53.116">${bmc_model} = Witherspoon</msg>
<msg level="INFO" timestamp="20170419 22:14:53.116">${stderr} = </msg>
<status starttime="20170419 22:14:53.021" status="PASS" endtime="20170419 22:14:53.116"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:14:53.116">Length is 0</msg>
<status starttime="20170419 22:14:53.116" status="PASS" endtime="20170419 22:14:53.116"></status>
</kw>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${bmc_model}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:14:53.117">Length is 11</msg>
<status starttime="20170419 22:14:53.116" status="PASS" endtime="20170419 22:14:53.117"></status>
</kw>
<msg level="INFO" timestamp="20170419 22:14:53.117">${bmc_model} = Witherspoon</msg>
<status starttime="20170419 22:14:53.020" status="PASS" endtime="20170419 22:14:53.117"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>BMC Model=${bmc_model}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:14:53.117">BMC Model=Witherspoon</msg>
<status starttime="20170419 22:14:53.117" status="PASS" endtime="20170419 22:14:53.117"></status>
</kw>
<status starttime="20170419 22:14:53.020" status="PASS" endtime="20170419 22:14:53.118"></status>
</kw>
<status starttime="20170419 22:14:53.020" status="PASS" endtime="20170419 22:14:53.118"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Enable Core Dump On BMC</arg>
</arguments>
<kw name="Enable Core Dump On BMC" library="utils">
<doc>Enable core dump collection.</doc>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg level="FAIL" timestamp="20170419 22:14:53.120">Dictionary does not contain key 'host'.</msg>
<status starttime="20170419 22:14:53.119" status="FAIL" endtime="20170419 22:14:53.120"></status>
</kw>
<msg level="INFO" timestamp="20170419 22:14:53.120">${has_host} = False</msg>
<status starttime="20170419 22:14:53.119" status="PASS" endtime="20170419 22:14:53.120"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status starttime="20170419 22:14:53.121" status="PASS" endtime="20170419 22:14:53.121"></status>
</kw>
<status starttime="20170419 22:14:53.120" status="PASS" endtime="20170419 22:14:53.121"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<kw name="User input SSH and HTTPs Ports" library="connection_client">
<doc>Update the global SSH and HTTPs port variable for QEMU</doc>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${SSH_PORT}</arg>
</arguments>
<assign>
<var>${port_num}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:14:53.122">${port_num} = 22</msg>
<status starttime="20170419 22:14:53.122" status="PASS" endtime="20170419 22:14:53.122"></status>
</kw>
<kw name="Replace Variables" library="BuiltIn">
<doc>Replaces variables in the given text with their current values.</doc>
<arguments>
<arg>${port_num}</arg>
</arguments>
<assign>
<var>${SSH_PORT}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:14:53.123">${SSH_PORT} = 22</msg>
<status starttime="20170419 22:14:53.123" status="PASS" endtime="20170419 22:14:53.123"></status>
</kw>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${HTTPS_PORT}</arg>
</arguments>
<assign>
<var>${https_num}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:14:53.123">${https_num} = 443</msg>
<status starttime="20170419 22:14:53.123" status="PASS" endtime="20170419 22:14:53.124"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${AUTH_URI}</arg>
<arg>https://${OPENBMC_HOST}:${https_num}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:14:53.124">${AUTH_URI} = https://9.3.86.161:443</msg>
<status starttime="20170419 22:14:53.124" status="PASS" endtime="20170419 22:14:53.124"></status>
</kw>
<status starttime="20170419 22:14:53.122" status="PASS" endtime="20170419 22:14:53.124"></status>
</kw>
<status starttime="20170419 22:14:53.121" status="PASS" endtime="20170419 22:14:53.124"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg level="FAIL" timestamp="20170419 22:14:53.125">Dictionary does not contain key 'port'.</msg>
<status starttime="20170419 22:14:53.125" status="FAIL" endtime="20170419 22:14:53.125"></status>
</kw>
<msg level="INFO" timestamp="20170419 22:14:53.125">${has_port} = False</msg>
<status starttime="20170419 22:14:53.125" status="PASS" endtime="20170419 22:14:53.125"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keywords" library="BuiltIn">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
</arguments>
<status starttime="20170419 22:14:53.127" status="PASS" endtime="20170419 22:14:53.127"></status>
</kw>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status starttime="20170419 22:14:53.127" status="PASS" endtime="20170419 22:14:53.128"></status>
</kw>
<status starttime="20170419 22:14:53.126" status="PASS" endtime="20170419 22:14:53.128"></status>
</kw>
<status starttime="20170419 22:14:53.126" status="PASS" endtime="20170419 22:14:53.128"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:14:53.128">Logging into '9.3.86.161:22' as 'root'.</msg>
<msg level="INFO" timestamp="20170419 22:14:54.774">Read output: root@witherspoon:~#</msg>
<status starttime="20170419 22:14:53.128" status="PASS" endtime="20170419 22:14:54.774"></status>
</kw>
<status starttime="20170419 22:14:53.118" status="PASS" endtime="20170419 22:14:54.774"></status>
</kw>
<kw name="Execute Command On BMC" library="utils">
<doc>Execute given command on BMC and return output.</doc>
<arguments>
<arg>echo '/tmp/core_%e.%p' | tee /proc/sys/kernel/core_pattern</arg>
</arguments>
<assign>
<var>${core_pattern}</var>
</assign>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${command}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:14:54.775">Executing command 'echo '/tmp/core_%e.%p' | tee /proc/sys/kernel/core_pattern'.</msg>
<msg level="INFO" timestamp="20170419 22:14:54.831">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20170419 22:14:54.832">${stdout} = /tmp/core_%e.%p</msg>
<msg level="INFO" timestamp="20170419 22:14:54.832">${stderr} = </msg>
<status starttime="20170419 22:14:54.775" status="PASS" endtime="20170419 22:14:54.832"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:14:54.832">Length is 0</msg>
<status starttime="20170419 22:14:54.832" status="PASS" endtime="20170419 22:14:54.832"></status>
</kw>
<msg level="INFO" timestamp="20170419 22:14:54.833">${core_pattern} = /tmp/core_%e.%p</msg>
<status starttime="20170419 22:14:54.774" status="PASS" endtime="20170419 22:14:54.833"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${core_pattern}</arg>
<arg>/tmp/core_%e.%p</arg>
</arguments>
<status starttime="20170419 22:14:54.833" status="PASS" endtime="20170419 22:14:54.833"></status>
</kw>
<status starttime="20170419 22:14:53.118" status="PASS" endtime="20170419 22:14:54.834"></status>
</kw>
<status starttime="20170419 22:14:53.118" status="PASS" endtime="20170419 22:14:54.834"></status>
</kw>
<status starttime="20170419 22:14:50.924" status="PASS" endtime="20170419 22:14:54.834"></status>
</kw>
<suite id="s1-s1" source="/tmp/root/9272/obmc-robot/tests/security" name="Security">
<suite id="s1-s1-s1" source="/tmp/root/9272/obmc-robot/tests/security/test_ssl.robot" name="Test Ssl">
<test id="s1-s1-s1-t1" name="Test SSL Connection">
<kw name="Initialize OpenBMC" library="rest_client">
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:14:54.909">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=20, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170419 22:14:54.908" status="PASS" endtime="20170419 22:14:54.909"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:14:54.910">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170419 22:14:54.909" status="PASS" endtime="20170419 22:14:54.910"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:14:54.910">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170419 22:14:54.910" status="PASS" endtime="20170419 22:14:54.910"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:14:54.911">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170419 22:14:54.911" status="PASS" endtime="20170419 22:14:54.911"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:14:55.117">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170419 22:14:54.912" status="PASS" endtime="20170419 22:14:55.117"></status>
</kw>
<msg level="INFO" timestamp="20170419 22:14:55.117">${status} = PASS</msg>
<msg level="INFO" timestamp="20170419 22:14:55.118">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 22:14:54.911" status="PASS" endtime="20170419 22:14:55.118"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:14:55.118">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 22:14:55.118" status="PASS" endtime="20170419 22:14:55.119"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:14:55.119">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 22:14:55.119" status="PASS" endtime="20170419 22:14:55.120"></status>
</kw>
<status starttime="20170419 22:14:54.908" status="PASS" endtime="20170419 22:14:55.120"></status>
</kw>
<kw type="teardown" name="FFDC On Test Case Fail" library="openbmc_ffdc">
<doc>Generic FFDC entry point. Place holder to hook in</doc>
<kw name="Is Host Quiesced" library="state_manager">
<doc>Check if host state is quiesced.</doc>
<assign>
<var>${status}</var>
</assign>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:14:55.127">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170419 22:14:55.126" status="PASS" endtime="20170419 22:14:55.127"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:14:55.128">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170419 22:14:55.127" status="PASS" endtime="20170419 22:14:55.128"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:14:55.129">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170419 22:14:55.128" status="PASS" endtime="20170419 22:14:55.129"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:14:55.135">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170419 22:14:55.129" status="PASS" endtime="20170419 22:14:55.135"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:14:55.323">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170419 22:14:55.136" status="PASS" endtime="20170419 22:14:55.323"></status>
</kw>
<msg level="INFO" timestamp="20170419 22:14:55.323">${status} = PASS</msg>
<msg level="INFO" timestamp="20170419 22:14:55.323">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 22:14:55.135" status="PASS" endtime="20170419 22:14:55.323"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:14:55.324">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 22:14:55.324" status="PASS" endtime="20170419 22:14:55.324"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:14:55.325">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 22:14:55.324" status="PASS" endtime="20170419 22:14:55.325"></status>
</kw>
<status starttime="20170419 22:14:55.125" status="PASS" endtime="20170419 22:14:55.325"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:14:55.326">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170419 22:14:55.325" status="PASS" endtime="20170419 22:14:55.326"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:14:55.328">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170419 22:14:55.327" status="PASS" endtime="20170419 22:14:55.328"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:14:55.329">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170419 22:14:55.328" status="PASS" endtime="20170419 22:14:55.329"></status>
</kw>
<status starttime="20170419 22:14:55.328" status="PASS" endtime="20170419 22:14:55.329"></status>
</kw>
<status starttime="20170419 22:14:55.326" status="PASS" endtime="20170419 22:14:55.329"></status>
</kw>
<status starttime="20170419 22:14:55.326" status="PASS" endtime="20170419 22:14:55.329"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:14:55.404">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170419 22:14:55.405">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 22:14:55.329" status="PASS" endtime="20170419 22:14:55.405"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:14:55.406">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170419 22:14:55.406" status="PASS" endtime="20170419 22:14:55.406"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:14:55.407">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170419 22:14:55.407" status="PASS" endtime="20170419 22:14:55.407"></status>
</kw>
<status starttime="20170419 22:14:55.406" status="PASS" endtime="20170419 22:14:55.407"></status>
</kw>
<status starttime="20170419 22:14:55.405" status="PASS" endtime="20170419 22:14:55.408"></status>
</kw>
<status starttime="20170419 22:14:55.405" status="PASS" endtime="20170419 22:14:55.408"></status>
</kw>
<msg level="INFO" timestamp="20170419 22:14:55.408">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 22:14:55.124" status="PASS" endtime="20170419 22:14:55.408"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:14:55.408">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 22:14:55.408" status="PASS" endtime="20170419 22:14:55.408"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:14:55.409">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170419 22:14:55.409">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170419 22:14:55.409">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170419 22:14:55.409" status="PASS" endtime="20170419 22:14:55.409"></status>
</kw>
<msg level="INFO" timestamp="20170419 22:14:55.409">${state} = xyz.openbmc_project.State.Host.HostState.Off</msg>
<status starttime="20170419 22:14:55.122" status="PASS" endtime="20170419 22:14:55.409"></status>
</kw>
<msg level="INFO" timestamp="20170419 22:14:55.410">${host_state} = Off</msg>
<status starttime="20170419 22:14:55.121" status="PASS" endtime="20170419 22:14:55.410"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal</arg>
<arg>${host_state}</arg>
<arg>Quiesced</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${host_state}</arg>
<arg>Quiesced</arg>
</arguments>
<msg level="FAIL" timestamp="20170419 22:14:55.411">Off != Quiesced</msg>
<status starttime="20170419 22:14:55.410" status="FAIL" endtime="20170419 22:14:55.411"></status>
</kw>
<msg level="INFO" timestamp="20170419 22:14:55.411">${status} = False</msg>
<status starttime="20170419 22:14:55.410" status="PASS" endtime="20170419 22:14:55.411"></status>
</kw>
<msg level="INFO" timestamp="20170419 22:14:55.411">${status} = False</msg>
<status starttime="20170419 22:14:55.121" status="PASS" endtime="20170419 22:14:55.411"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${TEST_STATUS}' == 'FAIL' or '${status}'=='True'</arg>
<arg>FFDC</arg>
</arguments>
<status starttime="20170419 22:14:55.412" status="PASS" endtime="20170419 22:14:55.412"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}'=='True'</arg>
<arg>Recover Quiesced Host</arg>
</arguments>
<status starttime="20170419 22:14:55.412" status="PASS" endtime="20170419 22:14:55.412"></status>
</kw>
<kw name="Log Test Case Status" library="openbmc_ffdc_methods">
<doc>Test case execution result history.</doc>
<kw name="Create Directory" library="OperatingSystem">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>${FFDC_LOG_PATH}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:14:55.413" html="yes">Created directory '&lt;a href="file:///tmp/root/9272/obmc-robot/logs"&gt;/tmp/root/9272/obmc-robot/logs&lt;/a&gt;'.</msg>
<status starttime="20170419 22:14:55.413" status="PASS" endtime="20170419 22:14:55.414"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>OperatingSystem.File Should Exist</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<assign>
<var>${exist}</var>
</assign>
<kw name="File Should Exist" library="OperatingSystem">
<doc>Fails unless the given ``path`` points to an existing file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
</arguments>
<msg level="FAIL" timestamp="20170419 22:14:55.415">File '/tmp/root/9272/obmc-robot/logs/test_history.txt' does not exist.</msg>
<status starttime="20170419 22:14:55.414" status="FAIL" endtime="20170419 22:14:55.415"></status>
</kw>
<msg level="INFO" timestamp="20170419 22:14:55.415">${exist} = False</msg>
<status starttime="20170419 22:14:55.414" status="PASS" endtime="20170419 22:14:55.415"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${exist}' == '${False}'</arg>
<arg>Create File</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<kw name="Create File" library="OperatingSystem">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:14:55.416" html="yes">Created file '&lt;a href="file:///tmp/root/9272/obmc-robot/logs/test_history.txt"&gt;/tmp/root/9272/obmc-robot/logs/test_history.txt&lt;/a&gt;'.</msg>
<status starttime="20170419 22:14:55.416" status="PASS" endtime="20170419 22:14:55.416"></status>
</kw>
<status starttime="20170419 22:14:55.415" status="PASS" endtime="20170419 22:14:55.416"></status>
</kw>
<kw name="Get Current Time Stamp" library="openbmc_ffdc_utils">
<doc>Get the current time stamp data</doc>
<assign>
<var>${cur_time}</var>
</assign>
<kw name="Get Current Date" library="DateTime">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:14:55.417">${cur_time} = 2017-04-19 22:14:55:416753</msg>
<status starttime="20170419 22:14:55.417" status="PASS" endtime="20170419 22:14:55.417"></status>
</kw>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:14:55.417">${cur_time} = 20170419221455416753</msg>
<status starttime="20170419 22:14:55.417" status="PASS" endtime="20170419 22:14:55.418"></status>
</kw>
<msg level="INFO" timestamp="20170419 22:14:55.418">${cur_time} = 20170419221455416753</msg>
<status starttime="20170419 22:14:55.416" status="PASS" endtime="20170419 22:14:55.418"></status>
</kw>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
<arg>${cur_time}:${SUITE_NAME}:${TEST_NAME}:${TEST_STATUS}${\n}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:14:55.419" html="yes">Appended to file '&lt;a href="file:///tmp/root/9272/obmc-robot/logs/test_history.txt"&gt;/tmp/root/9272/obmc-robot/logs/test_history.txt&lt;/a&gt;'.</msg>
<status starttime="20170419 22:14:55.418" status="PASS" endtime="20170419 22:14:55.419"></status>
</kw>
<status starttime="20170419 22:14:55.413" status="PASS" endtime="20170419 22:14:55.419"></status>
</kw>
<status starttime="20170419 22:14:55.120" status="PASS" endtime="20170419 22:14:55.419"></status>
</kw>
<doc>This testcase is for testing the SSL connection to the
OpenBMC machine.</doc>
<tags>
<tag>Test_SSL_Connection</tag>
</tags>
<status starttime="20170419 22:14:54.907" critical="yes" status="PASS" endtime="20170419 22:14:55.419"></status>
</test>
<kw type="teardown" name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170419 22:14:55.420">Delete All Sessions</msg>
<status starttime="20170419 22:14:55.420" status="PASS" endtime="20170419 22:14:55.420"></status>
</kw>
<doc>This testsuite is for testing SSL connection to OpenBMC</doc>
<status starttime="20170419 22:14:54.836" status="PASS" endtime="20170419 22:14:55.420"></status>
</suite>
<status starttime="20170419 22:14:54.834" status="PASS" endtime="20170419 22:14:55.423"></status>
</suite>
<suite id="s1-s2" source="/tmp/root/9272/obmc-robot/tests/test_basic_poweron.robot" name="Test Basic Poweron">
<test id="s1-s2-t1" name="Power On Test">
<kw type="setup" name="Start SOL Console Logging" library="utils">
<doc>Start system console log to file.</doc>
<kw name="Create OS Console File Path" library="utils">
<doc>Create OS console file path name and return it.</doc>
<arguments>
<arg>${log_file_path}</arg>
</arguments>
<assign>
<var>${log_file_path}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>/tmp/${OPENBMC_HOST}_os_console</arg>
</arguments>
<assign>
<var>${default_file_path}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:14:55.457">${default_file_path} = /tmp/9.3.86.161_os_console</msg>
<status starttime="20170419 22:14:55.457" status="PASS" endtime="20170419 22:14:55.457"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${log_file_path}' == '${EMPTY}'</arg>
<arg>${default_file_path}</arg>
<arg>${log_file_path}</arg>
</arguments>
<assign>
<var>${log_file_path}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:14:55.458">${log_file_path} = /tmp/9.3.86.161_os_console</msg>
<status starttime="20170419 22:14:55.458" status="PASS" endtime="20170419 22:14:55.458"></status>
</kw>
<msg level="INFO" timestamp="20170419 22:14:55.458">${log_file_path} = /tmp/9.3.86.161_os_console</msg>
<status starttime="20170419 22:14:55.456" status="PASS" endtime="20170419 22:14:55.458"></status>
</kw>
<kw name="Stop SOL Console Logging" library="utils">
<doc>Stop system console logging and return log output.</doc>
<arguments>
<arg>${log_file_path}</arg>
</arguments>
<assign>
<var>${log_output}</var>
</assign>
<kw name="Create OS Console File Path" library="utils">
<doc>Create OS console file path name and return it.</doc>
<arguments>
<arg>${log_file_path}</arg>
</arguments>
<assign>
<var>${log_file_path}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>/tmp/${OPENBMC_HOST}_os_console</arg>
</arguments>
<assign>
<var>${default_file_path}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:14:55.460">${default_file_path} = /tmp/9.3.86.161_os_console</msg>
<status starttime="20170419 22:14:55.459" status="PASS" endtime="20170419 22:14:55.460"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${log_file_path}' == '${EMPTY}'</arg>
<arg>${default_file_path}</arg>
<arg>${log_file_path}</arg>
</arguments>
<assign>
<var>${log_file_path}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:14:55.460">${log_file_path} = /tmp/9.3.86.161_os_console</msg>
<status starttime="20170419 22:14:55.460" status="PASS" endtime="20170419 22:14:55.461"></status>
</kw>
<msg level="INFO" timestamp="20170419 22:14:55.461">${log_file_path} = /tmp/9.3.86.161_os_console</msg>
<status starttime="20170419 22:14:55.459" status="PASS" endtime="20170419 22:14:55.461"></status>
</kw>
<kw name="Create OS Console Command String" library="utils">
<doc>Return a command string to start OS console logging.</doc>
<assign>
<var>${search_string}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>which ssh_pw 2&gt;&amp;1</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:14:55.462">${cmd_buf} = which ssh_pw 2&gt;&amp;1</msg>
<status starttime="20170419 22:14:55.461" status="PASS" endtime="20170419 22:14:55.462"></status>
</kw>
<kw name="Rdpissuing" library="gen_robot_print">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status starttime="20170419 22:14:55.462" status="PASS" endtime="20170419 22:14:55.469"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:14:55.473">Running command 'which ssh_pw 2&gt;&amp;1'.</msg>
<msg level="INFO" timestamp="20170419 22:14:55.476">${rc} = 0</msg>
<msg level="INFO" timestamp="20170419 22:14:55.476">${output} = /tmp/root/9272/obmc-robot/.tox/witherspoon/bin/ssh_pw</msg>
<status starttime="20170419 22:14:55.469" status="PASS" endtime="20170419 22:14:55.477"></status>
</kw>
<kw name="Rdpvars" library="gen_robot_print">
<arguments>
<arg>rc</arg>
<arg>output</arg>
</arguments>
<status starttime="20170419 22:14:55.479" status="PASS" endtime="20170419 22:14:55.487"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${rc}</arg>
<arg>${0}</arg>
<arg>msg=${output}\n</arg>
</arguments>
<status starttime="20170419 22:14:55.487" status="PASS" endtime="20170419 22:14:55.488"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>ssh_pw ${OPENBMC_PASSWORD} -p 2200</arg>
<arg>${OPENBMC_USERNAME}@${OPENBMC_HOST}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:14:55.489">${cmd_buf} = ssh_pw 0penBmc -p 2200 root@9.3.86.161</msg>
<status starttime="20170419 22:14:55.488" status="PASS" endtime="20170419 22:14:55.489"></status>
</kw>
<msg level="INFO" timestamp="20170419 22:14:55.489">${search_string} = ssh_pw 0penBmc -p 2200 root@9.3.86.161</msg>
<status starttime="20170419 22:14:55.461" status="PASS" endtime="20170419 22:14:55.489"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>echo $(ps -ef | egrep '${search_string}'</arg>
<arg>| egrep -v grep | cut -c10-14)</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:14:55.489">${cmd_buf} = echo $(ps -ef | egrep 'ssh_pw 0penBmc -p 2200 root@9.3.86.161' | egrep -v grep | cut -c10-14)</msg>
<status starttime="20170419 22:14:55.489" status="PASS" endtime="20170419 22:14:55.489"></status>
</kw>
<kw name="Rdpissuing" library="gen_robot_print">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status starttime="20170419 22:14:55.490" status="PASS" endtime="20170419 22:14:55.496"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${os_con_pid}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:14:55.501">Running command 'echo $(ps -ef | egrep 'ssh_pw 0penBmc -p 2200 root@9.3.86.161' | egrep -v grep | cut -c10-14) 2&gt;&amp;1'.</msg>
<msg level="INFO" timestamp="20170419 22:14:55.512">${rc} = 0</msg>
<msg level="INFO" timestamp="20170419 22:14:55.512">${os_con_pid} = </msg>
<status starttime="20170419 22:14:55.497" status="PASS" endtime="20170419 22:14:55.512"></status>
</kw>
<kw name="Rdpvars" library="gen_robot_print">
<arguments>
<arg>os_con_pid</arg>
</arguments>
<status starttime="20170419 22:14:55.514" status="PASS" endtime="20170419 22:14:55.521"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>kill -9 ${os_con_pid}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:14:55.522">${cmd_buf} = kill -9 </msg>
<status starttime="20170419 22:14:55.522" status="PASS" endtime="20170419 22:14:55.522"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${os_con_pid}' != '${EMPTY}'</arg>
<arg>Rdpissuing</arg>
<arg>${cmd_buf}</arg>
</arguments>
<status starttime="20170419 22:14:55.522" status="PASS" endtime="20170419 22:14:55.523"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${os_con_pid}' != '${EMPTY}'</arg>
<arg>Run And Return Rc And Output</arg>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:14:55.523">${rc} = None</msg>
<msg level="INFO" timestamp="20170419 22:14:55.524">${output} = None</msg>
<status starttime="20170419 22:14:55.523" status="PASS" endtime="20170419 22:14:55.524"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${os_con_pid}' != '${EMPTY}'</arg>
<arg>Rdpvars</arg>
<arg>rc</arg>
<arg>output</arg>
</arguments>
<status starttime="20170419 22:14:55.524" status="PASS" endtime="20170419 22:14:55.524"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>cat ${log_file_path} 2&gt;&amp;1</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:14:55.525">${cmd_buf} = cat /tmp/9.3.86.161_os_console 2&gt;&amp;1</msg>
<status starttime="20170419 22:14:55.524" status="PASS" endtime="20170419 22:14:55.525"></status>
</kw>
<kw name="Rdpissuing" library="gen_robot_print">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status starttime="20170419 22:14:55.525" status="PASS" endtime="20170419 22:14:55.533"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:14:55.537">Running command 'cat /tmp/9.3.86.161_os_console 2&gt;&amp;1'.</msg>
<msg level="INFO" timestamp="20170419 22:14:55.541">${rc} = 1</msg>
<msg level="INFO" timestamp="20170419 22:14:55.541">${output} = cat: /tmp/9.3.86.161_os_console: No such file or directory</msg>
<status starttime="20170419 22:14:55.533" status="PASS" endtime="20170419 22:14:55.541"></status>
</kw>
<kw name="Rdpvars" library="gen_robot_print">
<arguments>
<arg>rc</arg>
</arguments>
<status starttime="20170419 22:14:55.543" status="PASS" endtime="20170419 22:14:55.551"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${targ_file_path}' != '${EMPTY}'</arg>
<arg>Run Keyword And Ignore Error</arg>
<arg>Copy File</arg>
<arg>${log_file_path}</arg>
<arg>${targ_file_path}</arg>
</arguments>
<status starttime="20170419 22:14:55.551" status="PASS" endtime="20170419 22:14:55.552"></status>
</kw>
<msg level="INFO" timestamp="20170419 22:14:55.552">${log_output} = cat: /tmp/9.3.86.161_os_console: No such file or directory</msg>
<status starttime="20170419 22:14:55.458" status="PASS" endtime="20170419 22:14:55.552"></status>
</kw>
<kw name="Create File" library="OperatingSystem">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${log_file_path}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:14:55.553" html="yes">Created file '&lt;a href="file:///tmp/9.3.86.161_os_console"&gt;/tmp/9.3.86.161_os_console&lt;/a&gt;'.</msg>
<status starttime="20170419 22:14:55.553" status="PASS" endtime="20170419 22:14:55.553"></status>
</kw>
<kw name="Create OS Console Command String" library="utils">
<doc>Return a command string to start OS console logging.</doc>
<assign>
<var>${sub_cmd_buf}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>which ssh_pw 2&gt;&amp;1</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:14:55.554">${cmd_buf} = which ssh_pw 2&gt;&amp;1</msg>
<status starttime="20170419 22:14:55.554" status="PASS" endtime="20170419 22:14:55.554"></status>
</kw>
<kw name="Rdpissuing" library="gen_robot_print">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status starttime="20170419 22:14:55.554" status="PASS" endtime="20170419 22:14:55.561"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:14:55.565">Running command 'which ssh_pw 2&gt;&amp;1'.</msg>
<msg level="INFO" timestamp="20170419 22:14:55.568">${rc} = 0</msg>
<msg level="INFO" timestamp="20170419 22:14:55.568">${output} = /tmp/root/9272/obmc-robot/.tox/witherspoon/bin/ssh_pw</msg>
<status starttime="20170419 22:14:55.561" status="PASS" endtime="20170419 22:14:55.568"></status>
</kw>
<kw name="Rdpvars" library="gen_robot_print">
<arguments>
<arg>rc</arg>
<arg>output</arg>
</arguments>
<status starttime="20170419 22:14:55.570" status="PASS" endtime="20170419 22:14:55.579"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${rc}</arg>
<arg>${0}</arg>
<arg>msg=${output}\n</arg>
</arguments>
<status starttime="20170419 22:14:55.579" status="PASS" endtime="20170419 22:14:55.580"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>ssh_pw ${OPENBMC_PASSWORD} -p 2200</arg>
<arg>${OPENBMC_USERNAME}@${OPENBMC_HOST}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:14:55.581">${cmd_buf} = ssh_pw 0penBmc -p 2200 root@9.3.86.161</msg>
<status starttime="20170419 22:14:55.580" status="PASS" endtime="20170419 22:14:55.581"></status>
</kw>
<msg level="INFO" timestamp="20170419 22:14:55.581">${sub_cmd_buf} = ssh_pw 0penBmc -p 2200 root@9.3.86.161</msg>
<status starttime="20170419 22:14:55.553" status="PASS" endtime="20170419 22:14:55.581"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${sub_cmd_buf} &gt; ${log_file_path} 2&gt;&amp;1 &amp;</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:14:55.581">${cmd_buf} = ssh_pw 0penBmc -p 2200 root@9.3.86.161 &gt; /tmp/9.3.86.161_os_console 2&gt;&amp;1 &amp;</msg>
<status starttime="20170419 22:14:55.581" status="PASS" endtime="20170419 22:14:55.582"></status>
</kw>
<kw name="Rdpissuing" library="gen_robot_print">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status starttime="20170419 22:14:55.582" status="PASS" endtime="20170419 22:14:55.589"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:14:55.593">Running command 'ssh_pw 0penBmc -p 2200 root@9.3.86.161 &gt; /tmp/9.3.86.161_os_console 2&gt;&amp;1 &amp;'.</msg>
<msg level="INFO" timestamp="20170419 22:14:55.596">${rc} = 0</msg>
<msg level="INFO" timestamp="20170419 22:14:55.596">${output} = </msg>
<status starttime="20170419 22:14:55.589" status="PASS" endtime="20170419 22:14:55.596"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${rc}</arg>
<arg>${0}</arg>
</arguments>
<status starttime="20170419 22:14:55.598" status="PASS" endtime="20170419 22:14:55.599"></status>
</kw>
<status starttime="20170419 22:14:55.456" status="PASS" endtime="20170419 22:14:55.599"></status>
</kw>
<kw name="Repeat Keyword" library="BuiltIn">
<doc>Executes the specified keyword multiple times.</doc>
<arguments>
<arg>${LOOP_COUNT} times</arg>
<arg>Host Off And On</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:14:55.599">Repeating keyword, round 1/2.</msg>
<kw name="Host Off And On">
<doc>Verify power off and on.</doc>
<kw name="Initiate Host PowerOff" library="state_manager">
<doc>Initiate host power off.</doc>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=${HOST_POWEROFF_TRANS}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:14:55.602">${args} = {u'data': 'xyz.openbmc_project.State.Host.Transition.Off'}</msg>
<status starttime="20170419 22:14:55.602" status="PASS" endtime="20170419 22:14:55.602"></status>
</kw>
<kw name="Write Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>RequestedHostTransition</arg>
<arg>data=${args}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:14:55.604">${base_uri} = /xyz/openbmc_project/state/host0/</msg>
<status starttime="20170419 22:14:55.603" status="PASS" endtime="20170419 22:14:55.604"></status>
</kw>
<kw name="OpenBMC Put Request" library="rest_client">
<arguments>
<arg>${base_uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:14:55.606">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170419 22:14:55.605" status="PASS" endtime="20170419 22:14:55.607"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:14:55.607">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170419 22:14:55.607" status="PASS" endtime="20170419 22:14:55.607"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:14:55.608">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170419 22:14:55.608" status="PASS" endtime="20170419 22:14:55.608"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:14:55.609">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170419 22:14:55.608" status="PASS" endtime="20170419 22:14:55.609"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:14:56.078">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170419 22:14:55.610" status="PASS" endtime="20170419 22:14:56.078"></status>
</kw>
<msg level="INFO" timestamp="20170419 22:14:56.078">${status} = PASS</msg>
<msg level="INFO" timestamp="20170419 22:14:56.078">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 22:14:55.609" status="PASS" endtime="20170419 22:14:56.078"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:14:56.079">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 22:14:56.079" status="PASS" endtime="20170419 22:14:56.079"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:14:56.080">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 22:14:56.079" status="PASS" endtime="20170419 22:14:56.080"></status>
</kw>
<status starttime="20170419 22:14:55.605" status="PASS" endtime="20170419 22:14:56.080"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:14:56.081">${base_uri} = /xyz/openbmc_project/state/host0//attr/RequestedHostTransition</msg>
<status starttime="20170419 22:14:56.080" status="PASS" endtime="20170419 22:14:56.081"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:14:56.081">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170419 22:14:56.081" status="PASS" endtime="20170419 22:14:56.081"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status starttime="20170419 22:14:56.081" status="PASS" endtime="20170419 22:14:56.082"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Put</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:14:56.083">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, method:Put, args:{u'data': {u'data': 'xyz.openbmc_project.State.Host.Transition.Off'}, u'headers': {u'Content-...</msg>
<status starttime="20170419 22:14:56.082" status="PASS" endtime="20170419 22:14:56.083"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:14:56.084">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, method:Put, args:{u'data': {u'data': 'xyz.openbmc_project.State.Host.Transition.Off'}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20170419 22:14:56.084" status="PASS" endtime="20170419 22:14:56.084"></status>
</kw>
<status starttime="20170419 22:14:56.083" status="PASS" endtime="20170419 22:14:56.084"></status>
</kw>
<status starttime="20170419 22:14:56.082" status="PASS" endtime="20170419 22:14:56.084"></status>
</kw>
<kw name="Put Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a PUT request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:14:56.594">Put Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, data={"data": "xyz.openbmc_project.State.Host.Transition.Off"},                     headers={u'Content-Type': u'application/json'}, allow_redirects=True </msg>
<msg level="INFO" timestamp="20170419 22:14:56.594">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 22:14:56.085" status="PASS" endtime="20170419 22:14:56.594"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:14:56.595">${msg} = Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170419 22:14:56.595" status="PASS" endtime="20170419 22:14:56.595"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:14:56.596">Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170419 22:14:56.596" status="PASS" endtime="20170419 22:14:56.596"></status>
</kw>
<status starttime="20170419 22:14:56.595" status="PASS" endtime="20170419 22:14:56.596"></status>
</kw>
<status starttime="20170419 22:14:56.594" status="PASS" endtime="20170419 22:14:56.596"></status>
</kw>
<msg level="INFO" timestamp="20170419 22:14:56.597">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 22:14:55.604" status="PASS" endtime="20170419 22:14:56.597"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:14:56.597">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 22:14:56.597" status="PASS" endtime="20170419 22:14:56.597"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${json}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:14:56.598">To JSON using : content={
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170419 22:14:56.598">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170419 22:14:56.598">${json} = {u'data': None, u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170419 22:14:56.598" status="PASS" endtime="20170419 22:14:56.598"></status>
</kw>
<status starttime="20170419 22:14:55.603" status="PASS" endtime="20170419 22:14:56.598"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${wait}' == '${0}'</arg>
<arg>Return From Keyword</arg>
</arguments>
<status starttime="20170419 22:14:56.599" status="PASS" endtime="20170419 22:14:56.599"></status>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>3 min</arg>
<arg>10 sec</arg>
<arg>Is Host Off</arg>
</arguments>
<kw name="Is Host Off" library="state_manager">
<doc>Check if host state is "Off".</doc>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:14:56.603">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170419 22:14:56.603" status="PASS" endtime="20170419 22:14:56.603"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:14:56.604">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170419 22:14:56.604" status="PASS" endtime="20170419 22:14:56.604"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:14:56.604">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170419 22:14:56.604" status="PASS" endtime="20170419 22:14:56.605"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:14:56.605">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170419 22:14:56.605" status="PASS" endtime="20170419 22:14:56.605"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:14:56.795">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170419 22:14:56.606" status="PASS" endtime="20170419 22:14:56.795"></status>
</kw>
<msg level="INFO" timestamp="20170419 22:14:56.795">${status} = PASS</msg>
<msg level="INFO" timestamp="20170419 22:14:56.795">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 22:14:56.605" status="PASS" endtime="20170419 22:14:56.795"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:14:56.796">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 22:14:56.796" status="PASS" endtime="20170419 22:14:56.796"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:14:56.797">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 22:14:56.796" status="PASS" endtime="20170419 22:14:56.797"></status>
</kw>
<status starttime="20170419 22:14:56.601" status="PASS" endtime="20170419 22:14:56.797"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:14:56.798">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170419 22:14:56.797" status="PASS" endtime="20170419 22:14:56.798"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:14:56.800">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170419 22:14:56.799" status="PASS" endtime="20170419 22:14:56.800"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:14:56.801">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170419 22:14:56.800" status="PASS" endtime="20170419 22:14:56.801"></status>
</kw>
<status starttime="20170419 22:14:56.800" status="PASS" endtime="20170419 22:14:56.801"></status>
</kw>
<status starttime="20170419 22:14:56.798" status="PASS" endtime="20170419 22:14:56.801"></status>
</kw>
<status starttime="20170419 22:14:56.798" status="PASS" endtime="20170419 22:14:56.801"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:14:56.864">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170419 22:14:56.864">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 22:14:56.801" status="PASS" endtime="20170419 22:14:56.864"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:14:56.866">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170419 22:14:56.865" status="PASS" endtime="20170419 22:14:56.866"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:14:56.867">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170419 22:14:56.867" status="PASS" endtime="20170419 22:14:56.867"></status>
</kw>
<status starttime="20170419 22:14:56.866" status="PASS" endtime="20170419 22:14:56.867"></status>
</kw>
<status starttime="20170419 22:14:56.865" status="PASS" endtime="20170419 22:14:56.867"></status>
</kw>
<status starttime="20170419 22:14:56.864" status="PASS" endtime="20170419 22:14:56.867"></status>
</kw>
<msg level="INFO" timestamp="20170419 22:14:56.867">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 22:14:56.601" status="PASS" endtime="20170419 22:14:56.867"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:14:56.868">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 22:14:56.868" status="PASS" endtime="20170419 22:14:56.868"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:14:56.869">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170419 22:14:56.869">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170419 22:14:56.869">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170419 22:14:56.868" status="PASS" endtime="20170419 22:14:56.869"></status>
</kw>
<msg level="INFO" timestamp="20170419 22:14:56.869">${state} = xyz.openbmc_project.State.Host.HostState.Off</msg>
<status starttime="20170419 22:14:56.600" status="PASS" endtime="20170419 22:14:56.869"></status>
</kw>
<msg level="INFO" timestamp="20170419 22:14:56.869">${host_state} = Off</msg>
<status starttime="20170419 22:14:56.600" status="PASS" endtime="20170419 22:14:56.869"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${host_state}</arg>
</arguments>
<status starttime="20170419 22:14:56.870" status="PASS" endtime="20170419 22:14:56.870"></status>
</kw>
<status starttime="20170419 22:14:56.600" status="PASS" endtime="20170419 22:14:56.870"></status>
</kw>
<status starttime="20170419 22:14:56.599" status="PASS" endtime="20170419 22:14:56.870"></status>
</kw>
<status starttime="20170419 22:14:55.600" status="PASS" endtime="20170419 22:14:56.870"></status>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>5 min</arg>
<arg>10 sec</arg>
<arg>Is OS Off</arg>
</arguments>
<kw name="Is OS Off" library="utils">
<doc>Check if boot progress is "Off".</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:14:56.874">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170419 22:14:56.873" status="PASS" endtime="20170419 22:14:56.874"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:14:56.875">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170419 22:14:56.874" status="PASS" endtime="20170419 22:14:56.875"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:14:56.875">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170419 22:14:56.875" status="PASS" endtime="20170419 22:14:56.875"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:14:56.876">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170419 22:14:56.875" status="PASS" endtime="20170419 22:14:56.876"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:14:57.051">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170419 22:14:56.876" status="PASS" endtime="20170419 22:14:57.051"></status>
</kw>
<msg level="INFO" timestamp="20170419 22:14:57.051">${status} = PASS</msg>
<msg level="INFO" timestamp="20170419 22:14:57.051">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 22:14:56.876" status="PASS" endtime="20170419 22:14:57.051"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:14:57.052">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 22:14:57.051" status="PASS" endtime="20170419 22:14:57.052"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:14:57.052">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 22:14:57.052" status="PASS" endtime="20170419 22:14:57.052"></status>
</kw>
<status starttime="20170419 22:14:56.873" status="PASS" endtime="20170419 22:14:57.052"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:14:57.053">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170419 22:14:57.053" status="PASS" endtime="20170419 22:14:57.053"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:14:57.055">${msg} = URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170419 22:14:57.055" status="PASS" endtime="20170419 22:14:57.055"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:14:57.056">URI:https://9.3.86.161:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170419 22:14:57.056" status="PASS" endtime="20170419 22:14:57.056"></status>
</kw>
<status starttime="20170419 22:14:57.056" status="PASS" endtime="20170419 22:14:57.056"></status>
</kw>
<status starttime="20170419 22:14:57.054" status="PASS" endtime="20170419 22:14:57.057"></status>
</kw>
<status starttime="20170419 22:14:57.053" status="PASS" endtime="20170419 22:14:57.057"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:14:57.122">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170419 22:14:57.123">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 22:14:57.057" status="PASS" endtime="20170419 22:14:57.123"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:14:57.124">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170419 22:14:57.124" status="PASS" endtime="20170419 22:14:57.124"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:14:57.125">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170419 22:14:57.125" status="PASS" endtime="20170419 22:14:57.125"></status>
</kw>
<status starttime="20170419 22:14:57.124" status="PASS" endtime="20170419 22:14:57.125"></status>
</kw>
<status starttime="20170419 22:14:57.123" status="PASS" endtime="20170419 22:14:57.126"></status>
</kw>
<status starttime="20170419 22:14:57.123" status="PASS" endtime="20170419 22:14:57.126"></status>
</kw>
<msg level="INFO" timestamp="20170419 22:14:57.126">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 22:14:56.872" status="PASS" endtime="20170419 22:14:57.126"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:14:57.126">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 22:14:57.126" status="PASS" endtime="20170419 22:14:57.126"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:14:57.127">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170419 22:14:57.127">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170419 22:14:57.127">${content} = {u'data': u'Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170419 22:14:57.127" status="PASS" endtime="20170419 22:14:57.127"></status>
</kw>
<msg level="INFO" timestamp="20170419 22:14:57.127">${state} = Off</msg>
<status starttime="20170419 22:14:56.872" status="PASS" endtime="20170419 22:14:57.128"></status>
</kw>
<msg level="INFO" timestamp="20170419 22:14:57.128">${boot_progress} = Off</msg>
<status starttime="20170419 22:14:56.871" status="PASS" endtime="20170419 22:14:57.128"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>Off</arg>
</arguments>
<status starttime="20170419 22:14:57.128" status="PASS" endtime="20170419 22:14:57.128"></status>
</kw>
<status starttime="20170419 22:14:56.871" status="PASS" endtime="20170419 22:14:57.128"></status>
</kw>
<status starttime="20170419 22:14:56.871" status="PASS" endtime="20170419 22:14:57.128"></status>
</kw>
<kw name="Initiate Host Boot" library="state_manager">
<doc>Initiate host power on.</doc>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=${HOST_POWERON_TRANS}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:14:57.129">${args} = {u'data': 'xyz.openbmc_project.State.Host.Transition.On'}</msg>
<status starttime="20170419 22:14:57.129" status="PASS" endtime="20170419 22:14:57.129"></status>
</kw>
<kw name="Write Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>RequestedHostTransition</arg>
<arg>data=${args}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:14:57.131">${base_uri} = /xyz/openbmc_project/state/host0/</msg>
<status starttime="20170419 22:14:57.130" status="PASS" endtime="20170419 22:14:57.131"></status>
</kw>
<kw name="OpenBMC Put Request" library="rest_client">
<arguments>
<arg>${base_uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:14:57.132">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170419 22:14:57.132" status="PASS" endtime="20170419 22:14:57.133"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:14:57.133">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170419 22:14:57.133" status="PASS" endtime="20170419 22:14:57.133"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:14:57.134">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170419 22:14:57.134" status="PASS" endtime="20170419 22:14:57.134"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:14:57.135">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170419 22:14:57.134" status="PASS" endtime="20170419 22:14:57.135"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:14:57.313">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170419 22:14:57.136" status="PASS" endtime="20170419 22:14:57.313"></status>
</kw>
<msg level="INFO" timestamp="20170419 22:14:57.313">${status} = PASS</msg>
<msg level="INFO" timestamp="20170419 22:14:57.313">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 22:14:57.135" status="PASS" endtime="20170419 22:14:57.313"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:14:57.314">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 22:14:57.313" status="PASS" endtime="20170419 22:14:57.314"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:14:57.314">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 22:14:57.314" status="PASS" endtime="20170419 22:14:57.314"></status>
</kw>
<status starttime="20170419 22:14:57.132" status="PASS" endtime="20170419 22:14:57.314"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:14:57.315">${base_uri} = /xyz/openbmc_project/state/host0//attr/RequestedHostTransition</msg>
<status starttime="20170419 22:14:57.315" status="PASS" endtime="20170419 22:14:57.315"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:14:57.315">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170419 22:14:57.315" status="PASS" endtime="20170419 22:14:57.316"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status starttime="20170419 22:14:57.316" status="PASS" endtime="20170419 22:14:57.316"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Put</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:14:57.318">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, method:Put, args:{u'data': {u'data': 'xyz.openbmc_project.State.Host.Transition.On'}, u'headers': {u'Content-T...</msg>
<status starttime="20170419 22:14:57.317" status="PASS" endtime="20170419 22:14:57.318"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:14:57.318">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, method:Put, args:{u'data': {u'data': 'xyz.openbmc_project.State.Host.Transition.On'}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20170419 22:14:57.318" status="PASS" endtime="20170419 22:14:57.319"></status>
</kw>
<status starttime="20170419 22:14:57.318" status="PASS" endtime="20170419 22:14:57.319"></status>
</kw>
<status starttime="20170419 22:14:57.316" status="PASS" endtime="20170419 22:14:57.319"></status>
</kw>
<kw name="Put Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a PUT request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:14:57.477">Put Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, data={"data": "xyz.openbmc_project.State.Host.Transition.On"},                     headers={u'Content-Type': u'application/json'}, allow_redirects=True </msg>
<msg level="INFO" timestamp="20170419 22:14:57.477">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 22:14:57.319" status="PASS" endtime="20170419 22:14:57.477"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:14:57.478">${msg} = Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170419 22:14:57.478" status="PASS" endtime="20170419 22:14:57.479"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:14:57.479">Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170419 22:14:57.479" status="PASS" endtime="20170419 22:14:57.479"></status>
</kw>
<status starttime="20170419 22:14:57.479" status="PASS" endtime="20170419 22:14:57.480"></status>
</kw>
<status starttime="20170419 22:14:57.477" status="PASS" endtime="20170419 22:14:57.480"></status>
</kw>
<msg level="INFO" timestamp="20170419 22:14:57.480">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 22:14:57.131" status="PASS" endtime="20170419 22:14:57.480"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:14:57.481">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 22:14:57.480" status="PASS" endtime="20170419 22:14:57.481"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${json}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:14:57.481">To JSON using : content={
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170419 22:14:57.481">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170419 22:14:57.481">${json} = {u'data': None, u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170419 22:14:57.481" status="PASS" endtime="20170419 22:14:57.481"></status>
</kw>
<status starttime="20170419 22:14:57.130" status="PASS" endtime="20170419 22:14:57.481"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${wait}' == '${0}'</arg>
<arg>Return From Keyword</arg>
</arguments>
<status starttime="20170419 22:14:57.482" status="PASS" endtime="20170419 22:14:57.482"></status>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>10 min</arg>
<arg>10 sec</arg>
<arg>Is Host Running</arg>
</arguments>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:14:57.486">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170419 22:14:57.485" status="PASS" endtime="20170419 22:14:57.486"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:14:57.487">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170419 22:14:57.486" status="PASS" endtime="20170419 22:14:57.487"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:14:57.487">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170419 22:14:57.487" status="PASS" endtime="20170419 22:14:57.487"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:14:57.488">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170419 22:14:57.488" status="PASS" endtime="20170419 22:14:57.488"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:14:57.677">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170419 22:14:57.489" status="PASS" endtime="20170419 22:14:57.677"></status>
</kw>
<msg level="INFO" timestamp="20170419 22:14:57.677">${status} = PASS</msg>
<msg level="INFO" timestamp="20170419 22:14:57.677">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 22:14:57.488" status="PASS" endtime="20170419 22:14:57.677"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:14:57.678">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 22:14:57.677" status="PASS" endtime="20170419 22:14:57.678"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:14:57.678">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 22:14:57.678" status="PASS" endtime="20170419 22:14:57.678"></status>
</kw>
<status starttime="20170419 22:14:57.485" status="PASS" endtime="20170419 22:14:57.678"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:14:57.679">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170419 22:14:57.679" status="PASS" endtime="20170419 22:14:57.679"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:14:57.681">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170419 22:14:57.680" status="PASS" endtime="20170419 22:14:57.681"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:14:57.682">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170419 22:14:57.682" status="PASS" endtime="20170419 22:14:57.682"></status>
</kw>
<status starttime="20170419 22:14:57.681" status="PASS" endtime="20170419 22:14:57.682"></status>
</kw>
<status starttime="20170419 22:14:57.680" status="PASS" endtime="20170419 22:14:57.682"></status>
</kw>
<status starttime="20170419 22:14:57.679" status="PASS" endtime="20170419 22:14:57.682"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:14:57.745">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170419 22:14:57.746">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 22:14:57.683" status="PASS" endtime="20170419 22:14:57.746"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:14:57.747">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170419 22:14:57.747" status="PASS" endtime="20170419 22:14:57.747"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:14:57.748">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170419 22:14:57.748" status="PASS" endtime="20170419 22:14:57.749"></status>
</kw>
<status starttime="20170419 22:14:57.747" status="PASS" endtime="20170419 22:14:57.749"></status>
</kw>
<status starttime="20170419 22:14:57.746" status="PASS" endtime="20170419 22:14:57.749"></status>
</kw>
<status starttime="20170419 22:14:57.746" status="PASS" endtime="20170419 22:14:57.749"></status>
</kw>
<msg level="INFO" timestamp="20170419 22:14:57.749">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 22:14:57.484" status="PASS" endtime="20170419 22:14:57.749"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:14:57.750">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 22:14:57.749" status="PASS" endtime="20170419 22:14:57.750"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:14:57.750">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170419 22:14:57.750">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170419 22:14:57.750">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170419 22:14:57.750" status="PASS" endtime="20170419 22:14:57.751"></status>
</kw>
<msg level="INFO" timestamp="20170419 22:14:57.751">${state} = xyz.openbmc_project.State.Host.HostState.Off</msg>
<status starttime="20170419 22:14:57.483" status="PASS" endtime="20170419 22:14:57.751"></status>
</kw>
<msg level="INFO" timestamp="20170419 22:14:57.751">${host_state} = Off</msg>
<status starttime="20170419 22:14:57.483" status="PASS" endtime="20170419 22:14:57.751"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170419 22:14:57.752">Running != Off</msg>
<status starttime="20170419 22:14:57.751" status="FAIL" endtime="20170419 22:14:57.752"></status>
</kw>
<status starttime="20170419 22:14:57.483" status="FAIL" endtime="20170419 22:14:57.752"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:15:07.756">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170419 22:15:07.755" status="PASS" endtime="20170419 22:15:07.756"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:15:07.757">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170419 22:15:07.757" status="PASS" endtime="20170419 22:15:07.757"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:15:07.758">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170419 22:15:07.757" status="PASS" endtime="20170419 22:15:07.758"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:15:07.759">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170419 22:15:07.758" status="PASS" endtime="20170419 22:15:07.759"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:15:07.944">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170419 22:15:07.760" status="PASS" endtime="20170419 22:15:07.945"></status>
</kw>
<msg level="INFO" timestamp="20170419 22:15:07.945">${status} = PASS</msg>
<msg level="INFO" timestamp="20170419 22:15:07.945">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 22:15:07.759" status="PASS" endtime="20170419 22:15:07.945"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:15:07.946">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 22:15:07.945" status="PASS" endtime="20170419 22:15:07.946"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:15:07.946">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 22:15:07.946" status="PASS" endtime="20170419 22:15:07.946"></status>
</kw>
<status starttime="20170419 22:15:07.755" status="PASS" endtime="20170419 22:15:07.947"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:15:07.947">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170419 22:15:07.947" status="PASS" endtime="20170419 22:15:07.947"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:15:07.949">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170419 22:15:07.949" status="PASS" endtime="20170419 22:15:07.950"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:15:07.951">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170419 22:15:07.950" status="PASS" endtime="20170419 22:15:07.951"></status>
</kw>
<status starttime="20170419 22:15:07.950" status="PASS" endtime="20170419 22:15:07.951"></status>
</kw>
<status starttime="20170419 22:15:07.948" status="PASS" endtime="20170419 22:15:07.951"></status>
</kw>
<status starttime="20170419 22:15:07.947" status="PASS" endtime="20170419 22:15:07.951"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:15:08.014">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170419 22:15:08.014">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 22:15:07.951" status="PASS" endtime="20170419 22:15:08.014"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:15:08.016">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170419 22:15:08.015" status="PASS" endtime="20170419 22:15:08.016"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:15:08.016">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170419 22:15:08.016" status="PASS" endtime="20170419 22:15:08.017"></status>
</kw>
<status starttime="20170419 22:15:08.016" status="PASS" endtime="20170419 22:15:08.017"></status>
</kw>
<status starttime="20170419 22:15:08.015" status="PASS" endtime="20170419 22:15:08.017"></status>
</kw>
<status starttime="20170419 22:15:08.014" status="PASS" endtime="20170419 22:15:08.017"></status>
</kw>
<msg level="INFO" timestamp="20170419 22:15:08.017">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 22:15:07.754" status="PASS" endtime="20170419 22:15:08.017"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:15:08.018">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 22:15:08.017" status="PASS" endtime="20170419 22:15:08.018"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:15:08.018">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170419 22:15:08.018">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170419 22:15:08.018">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170419 22:15:08.018" status="PASS" endtime="20170419 22:15:08.018"></status>
</kw>
<msg level="INFO" timestamp="20170419 22:15:08.019">${state} = xyz.openbmc_project.State.Host.HostState.Off</msg>
<status starttime="20170419 22:15:07.753" status="PASS" endtime="20170419 22:15:08.019"></status>
</kw>
<msg level="INFO" timestamp="20170419 22:15:08.019">${host_state} = Off</msg>
<status starttime="20170419 22:15:07.753" status="PASS" endtime="20170419 22:15:08.019"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170419 22:15:08.020">Running != Off</msg>
<status starttime="20170419 22:15:08.019" status="FAIL" endtime="20170419 22:15:08.020"></status>
</kw>
<status starttime="20170419 22:15:07.752" status="FAIL" endtime="20170419 22:15:08.020"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:15:18.023">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170419 22:15:18.023" status="PASS" endtime="20170419 22:15:18.024"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:15:18.024">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170419 22:15:18.024" status="PASS" endtime="20170419 22:15:18.024"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:15:18.025">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170419 22:15:18.024" status="PASS" endtime="20170419 22:15:18.025"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:15:18.025">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170419 22:15:18.025" status="PASS" endtime="20170419 22:15:18.025"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:15:18.204">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170419 22:15:18.026" status="PASS" endtime="20170419 22:15:18.204"></status>
</kw>
<msg level="INFO" timestamp="20170419 22:15:18.204">${status} = PASS</msg>
<msg level="INFO" timestamp="20170419 22:15:18.204">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 22:15:18.026" status="PASS" endtime="20170419 22:15:18.204"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:15:18.205">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 22:15:18.205" status="PASS" endtime="20170419 22:15:18.205"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:15:18.206">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 22:15:18.205" status="PASS" endtime="20170419 22:15:18.206"></status>
</kw>
<status starttime="20170419 22:15:18.022" status="PASS" endtime="20170419 22:15:18.206"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:15:18.206">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170419 22:15:18.206" status="PASS" endtime="20170419 22:15:18.206"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:15:18.208">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170419 22:15:18.208" status="PASS" endtime="20170419 22:15:18.208"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:15:18.209">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170419 22:15:18.209" status="PASS" endtime="20170419 22:15:18.209"></status>
</kw>
<status starttime="20170419 22:15:18.209" status="PASS" endtime="20170419 22:15:18.210"></status>
</kw>
<status starttime="20170419 22:15:18.207" status="PASS" endtime="20170419 22:15:18.210"></status>
</kw>
<status starttime="20170419 22:15:18.207" status="PASS" endtime="20170419 22:15:18.210"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:15:18.273">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170419 22:15:18.273">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 22:15:18.210" status="PASS" endtime="20170419 22:15:18.273"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:15:18.275">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170419 22:15:18.274" status="PASS" endtime="20170419 22:15:18.275"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:15:18.277">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170419 22:15:18.277" status="PASS" endtime="20170419 22:15:18.277"></status>
</kw>
<status starttime="20170419 22:15:18.275" status="PASS" endtime="20170419 22:15:18.277"></status>
</kw>
<status starttime="20170419 22:15:18.274" status="PASS" endtime="20170419 22:15:18.277"></status>
</kw>
<status starttime="20170419 22:15:18.273" status="PASS" endtime="20170419 22:15:18.277"></status>
</kw>
<msg level="INFO" timestamp="20170419 22:15:18.278">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 22:15:18.022" status="PASS" endtime="20170419 22:15:18.278"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:15:18.278">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 22:15:18.278" status="PASS" endtime="20170419 22:15:18.278"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:15:18.279">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170419 22:15:18.279">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170419 22:15:18.279">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170419 22:15:18.279" status="PASS" endtime="20170419 22:15:18.279"></status>
</kw>
<msg level="INFO" timestamp="20170419 22:15:18.279">${state} = xyz.openbmc_project.State.Host.HostState.Off</msg>
<status starttime="20170419 22:15:18.021" status="PASS" endtime="20170419 22:15:18.279"></status>
</kw>
<msg level="INFO" timestamp="20170419 22:15:18.280">${host_state} = Off</msg>
<status starttime="20170419 22:15:18.021" status="PASS" endtime="20170419 22:15:18.280"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170419 22:15:18.280">Running != Off</msg>
<status starttime="20170419 22:15:18.280" status="FAIL" endtime="20170419 22:15:18.280"></status>
</kw>
<status starttime="20170419 22:15:18.020" status="FAIL" endtime="20170419 22:15:18.281"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:15:28.285">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170419 22:15:28.284" status="PASS" endtime="20170419 22:15:28.285"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:15:28.286">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170419 22:15:28.285" status="PASS" endtime="20170419 22:15:28.286"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:15:28.286">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170419 22:15:28.286" status="PASS" endtime="20170419 22:15:28.286"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:15:28.287">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170419 22:15:28.287" status="PASS" endtime="20170419 22:15:28.287"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:15:28.463">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170419 22:15:28.288" status="PASS" endtime="20170419 22:15:28.464"></status>
</kw>
<msg level="INFO" timestamp="20170419 22:15:28.464">${status} = PASS</msg>
<msg level="INFO" timestamp="20170419 22:15:28.464">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 22:15:28.287" status="PASS" endtime="20170419 22:15:28.464"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:15:28.464">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 22:15:28.464" status="PASS" endtime="20170419 22:15:28.464"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:15:28.465">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 22:15:28.465" status="PASS" endtime="20170419 22:15:28.465"></status>
</kw>
<status starttime="20170419 22:15:28.283" status="PASS" endtime="20170419 22:15:28.465"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:15:28.466">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170419 22:15:28.465" status="PASS" endtime="20170419 22:15:28.466"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:15:28.468">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170419 22:15:28.467" status="PASS" endtime="20170419 22:15:28.468"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:15:28.469">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170419 22:15:28.469" status="PASS" endtime="20170419 22:15:28.469"></status>
</kw>
<status starttime="20170419 22:15:28.468" status="PASS" endtime="20170419 22:15:28.469"></status>
</kw>
<status starttime="20170419 22:15:28.467" status="PASS" endtime="20170419 22:15:28.469"></status>
</kw>
<status starttime="20170419 22:15:28.466" status="PASS" endtime="20170419 22:15:28.469"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:15:28.533">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170419 22:15:28.533">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 22:15:28.470" status="PASS" endtime="20170419 22:15:28.533"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:15:28.534">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170419 22:15:28.534" status="PASS" endtime="20170419 22:15:28.535"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:15:28.536">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170419 22:15:28.535" status="PASS" endtime="20170419 22:15:28.536"></status>
</kw>
<status starttime="20170419 22:15:28.535" status="PASS" endtime="20170419 22:15:28.536"></status>
</kw>
<status starttime="20170419 22:15:28.534" status="PASS" endtime="20170419 22:15:28.536"></status>
</kw>
<status starttime="20170419 22:15:28.533" status="PASS" endtime="20170419 22:15:28.536"></status>
</kw>
<msg level="INFO" timestamp="20170419 22:15:28.536">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 22:15:28.283" status="PASS" endtime="20170419 22:15:28.536"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:15:28.537">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 22:15:28.537" status="PASS" endtime="20170419 22:15:28.537"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:15:28.537">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170419 22:15:28.537">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170419 22:15:28.538">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170419 22:15:28.537" status="PASS" endtime="20170419 22:15:28.538"></status>
</kw>
<msg level="INFO" timestamp="20170419 22:15:28.538">${state} = xyz.openbmc_project.State.Host.HostState.Off</msg>
<status starttime="20170419 22:15:28.282" status="PASS" endtime="20170419 22:15:28.538"></status>
</kw>
<msg level="INFO" timestamp="20170419 22:15:28.538">${host_state} = Off</msg>
<status starttime="20170419 22:15:28.282" status="PASS" endtime="20170419 22:15:28.538"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170419 22:15:28.539">Running != Off</msg>
<status starttime="20170419 22:15:28.538" status="FAIL" endtime="20170419 22:15:28.539"></status>
</kw>
<status starttime="20170419 22:15:28.281" status="FAIL" endtime="20170419 22:15:28.539"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:15:38.543">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170419 22:15:38.542" status="PASS" endtime="20170419 22:15:38.543"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:15:38.544">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170419 22:15:38.543" status="PASS" endtime="20170419 22:15:38.544"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:15:38.544">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170419 22:15:38.544" status="PASS" endtime="20170419 22:15:38.544"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:15:38.545">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170419 22:15:38.544" status="PASS" endtime="20170419 22:15:38.545"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:15:38.719">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170419 22:15:38.545" status="PASS" endtime="20170419 22:15:38.719"></status>
</kw>
<msg level="INFO" timestamp="20170419 22:15:38.719">${status} = PASS</msg>
<msg level="INFO" timestamp="20170419 22:15:38.719">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 22:15:38.545" status="PASS" endtime="20170419 22:15:38.720"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:15:38.720">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 22:15:38.720" status="PASS" endtime="20170419 22:15:38.720"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:15:38.721">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 22:15:38.721" status="PASS" endtime="20170419 22:15:38.721"></status>
</kw>
<status starttime="20170419 22:15:38.542" status="PASS" endtime="20170419 22:15:38.721"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:15:38.722">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170419 22:15:38.721" status="PASS" endtime="20170419 22:15:38.722"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:15:38.724">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170419 22:15:38.723" status="PASS" endtime="20170419 22:15:38.724"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:15:38.727">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170419 22:15:38.727" status="PASS" endtime="20170419 22:15:38.727"></status>
</kw>
<status starttime="20170419 22:15:38.725" status="PASS" endtime="20170419 22:15:38.727"></status>
</kw>
<status starttime="20170419 22:15:38.723" status="PASS" endtime="20170419 22:15:38.727"></status>
</kw>
<status starttime="20170419 22:15:38.722" status="PASS" endtime="20170419 22:15:38.727"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:15:38.790">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170419 22:15:38.790">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 22:15:38.727" status="PASS" endtime="20170419 22:15:38.790"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:15:38.792">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170419 22:15:38.791" status="PASS" endtime="20170419 22:15:38.792"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:15:38.793">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170419 22:15:38.793" status="PASS" endtime="20170419 22:15:38.793"></status>
</kw>
<status starttime="20170419 22:15:38.792" status="PASS" endtime="20170419 22:15:38.793"></status>
</kw>
<status starttime="20170419 22:15:38.791" status="PASS" endtime="20170419 22:15:38.793"></status>
</kw>
<status starttime="20170419 22:15:38.790" status="PASS" endtime="20170419 22:15:38.793"></status>
</kw>
<msg level="INFO" timestamp="20170419 22:15:38.793">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 22:15:38.541" status="PASS" endtime="20170419 22:15:38.794"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:15:38.794">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 22:15:38.794" status="PASS" endtime="20170419 22:15:38.794"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:15:38.795">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170419 22:15:38.795">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170419 22:15:38.795">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170419 22:15:38.794" status="PASS" endtime="20170419 22:15:38.795"></status>
</kw>
<msg level="INFO" timestamp="20170419 22:15:38.795">${state} = xyz.openbmc_project.State.Host.HostState.Off</msg>
<status starttime="20170419 22:15:38.540" status="PASS" endtime="20170419 22:15:38.795"></status>
</kw>
<msg level="INFO" timestamp="20170419 22:15:38.795">${host_state} = Off</msg>
<status starttime="20170419 22:15:38.540" status="PASS" endtime="20170419 22:15:38.796"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170419 22:15:38.796">Running != Off</msg>
<status starttime="20170419 22:15:38.796" status="FAIL" endtime="20170419 22:15:38.796"></status>
</kw>
<status starttime="20170419 22:15:38.539" status="FAIL" endtime="20170419 22:15:38.796"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:15:48.801">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170419 22:15:48.800" status="PASS" endtime="20170419 22:15:48.801"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:15:48.802">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170419 22:15:48.801" status="PASS" endtime="20170419 22:15:48.802"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:15:48.802">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170419 22:15:48.802" status="PASS" endtime="20170419 22:15:48.803"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:15:48.803">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170419 22:15:48.803" status="PASS" endtime="20170419 22:15:48.803"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:15:48.981">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170419 22:15:48.804" status="PASS" endtime="20170419 22:15:48.981"></status>
</kw>
<msg level="INFO" timestamp="20170419 22:15:48.981">${status} = PASS</msg>
<msg level="INFO" timestamp="20170419 22:15:48.982">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 22:15:48.804" status="PASS" endtime="20170419 22:15:48.982"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:15:48.982">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 22:15:48.982" status="PASS" endtime="20170419 22:15:48.982"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:15:48.983">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 22:15:48.983" status="PASS" endtime="20170419 22:15:48.983"></status>
</kw>
<status starttime="20170419 22:15:48.800" status="PASS" endtime="20170419 22:15:48.983"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:15:48.984">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170419 22:15:48.983" status="PASS" endtime="20170419 22:15:48.984"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:15:48.989">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170419 22:15:48.987" status="PASS" endtime="20170419 22:15:48.989"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:15:48.992">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170419 22:15:48.992" status="PASS" endtime="20170419 22:15:48.992"></status>
</kw>
<status starttime="20170419 22:15:48.990" status="PASS" endtime="20170419 22:15:48.993"></status>
</kw>
<status starttime="20170419 22:15:48.984" status="PASS" endtime="20170419 22:15:48.993"></status>
</kw>
<status starttime="20170419 22:15:48.984" status="PASS" endtime="20170419 22:15:48.993"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:15:49.058">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170419 22:15:49.059">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 22:15:48.993" status="PASS" endtime="20170419 22:15:49.059"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:15:49.061">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170419 22:15:49.060" status="PASS" endtime="20170419 22:15:49.061"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:15:49.062">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170419 22:15:49.062" status="PASS" endtime="20170419 22:15:49.062"></status>
</kw>
<status starttime="20170419 22:15:49.061" status="PASS" endtime="20170419 22:15:49.062"></status>
</kw>
<status starttime="20170419 22:15:49.060" status="PASS" endtime="20170419 22:15:49.063"></status>
</kw>
<status starttime="20170419 22:15:49.059" status="PASS" endtime="20170419 22:15:49.063"></status>
</kw>
<msg level="INFO" timestamp="20170419 22:15:49.063">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 22:15:48.799" status="PASS" endtime="20170419 22:15:49.063"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:15:49.063">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 22:15:49.063" status="PASS" endtime="20170419 22:15:49.063"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:15:49.064">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170419 22:15:49.064">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170419 22:15:49.064">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170419 22:15:49.064" status="PASS" endtime="20170419 22:15:49.064"></status>
</kw>
<msg level="INFO" timestamp="20170419 22:15:49.064">${state} = xyz.openbmc_project.State.Host.HostState.Off</msg>
<status starttime="20170419 22:15:48.798" status="PASS" endtime="20170419 22:15:49.064"></status>
</kw>
<msg level="INFO" timestamp="20170419 22:15:49.065">${host_state} = Off</msg>
<status starttime="20170419 22:15:48.798" status="PASS" endtime="20170419 22:15:49.065"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170419 22:15:49.065">Running != Off</msg>
<status starttime="20170419 22:15:49.065" status="FAIL" endtime="20170419 22:15:49.065"></status>
</kw>
<status starttime="20170419 22:15:48.797" status="FAIL" endtime="20170419 22:15:49.066"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:15:59.070">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170419 22:15:59.069" status="PASS" endtime="20170419 22:15:59.070"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:15:59.071">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170419 22:15:59.070" status="PASS" endtime="20170419 22:15:59.071"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:15:59.071">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170419 22:15:59.071" status="PASS" endtime="20170419 22:15:59.071"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:15:59.072">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170419 22:15:59.071" status="PASS" endtime="20170419 22:15:59.072"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:15:59.248">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170419 22:15:59.073" status="PASS" endtime="20170419 22:15:59.248"></status>
</kw>
<msg level="INFO" timestamp="20170419 22:15:59.248">${status} = PASS</msg>
<msg level="INFO" timestamp="20170419 22:15:59.248">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 22:15:59.072" status="PASS" endtime="20170419 22:15:59.248"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:15:59.248">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 22:15:59.248" status="PASS" endtime="20170419 22:15:59.249"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:15:59.249">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 22:15:59.249" status="PASS" endtime="20170419 22:15:59.249"></status>
</kw>
<status starttime="20170419 22:15:59.068" status="PASS" endtime="20170419 22:15:59.249"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:15:59.250">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170419 22:15:59.250" status="PASS" endtime="20170419 22:15:59.250"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:15:59.252">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170419 22:15:59.251" status="PASS" endtime="20170419 22:15:59.252"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:15:59.253">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170419 22:15:59.253" status="PASS" endtime="20170419 22:15:59.253"></status>
</kw>
<status starttime="20170419 22:15:59.252" status="PASS" endtime="20170419 22:15:59.253"></status>
</kw>
<status starttime="20170419 22:15:59.251" status="PASS" endtime="20170419 22:15:59.253"></status>
</kw>
<status starttime="20170419 22:15:59.250" status="PASS" endtime="20170419 22:15:59.253"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:15:59.324">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170419 22:15:59.324">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 22:15:59.254" status="PASS" endtime="20170419 22:15:59.324"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:15:59.326">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170419 22:15:59.326" status="PASS" endtime="20170419 22:15:59.326"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:15:59.327">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170419 22:15:59.327" status="PASS" endtime="20170419 22:15:59.327"></status>
</kw>
<status starttime="20170419 22:15:59.326" status="PASS" endtime="20170419 22:15:59.327"></status>
</kw>
<status starttime="20170419 22:15:59.325" status="PASS" endtime="20170419 22:15:59.328"></status>
</kw>
<status starttime="20170419 22:15:59.325" status="PASS" endtime="20170419 22:15:59.328"></status>
</kw>
<msg level="INFO" timestamp="20170419 22:15:59.328">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 22:15:59.068" status="PASS" endtime="20170419 22:15:59.328"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:15:59.329">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 22:15:59.328" status="PASS" endtime="20170419 22:15:59.329"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:15:59.329">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170419 22:15:59.330">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170419 22:15:59.330">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170419 22:15:59.329" status="PASS" endtime="20170419 22:15:59.330"></status>
</kw>
<msg level="INFO" timestamp="20170419 22:15:59.330">${state} = xyz.openbmc_project.State.Host.HostState.Off</msg>
<status starttime="20170419 22:15:59.067" status="PASS" endtime="20170419 22:15:59.330"></status>
</kw>
<msg level="INFO" timestamp="20170419 22:15:59.331">${host_state} = Off</msg>
<status starttime="20170419 22:15:59.067" status="PASS" endtime="20170419 22:15:59.331"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170419 22:15:59.332">Running != Off</msg>
<status starttime="20170419 22:15:59.331" status="FAIL" endtime="20170419 22:15:59.332"></status>
</kw>
<status starttime="20170419 22:15:59.066" status="FAIL" endtime="20170419 22:15:59.332"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:16:09.336">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170419 22:16:09.335" status="PASS" endtime="20170419 22:16:09.336"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:16:09.337">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170419 22:16:09.336" status="PASS" endtime="20170419 22:16:09.337"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:16:09.337">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170419 22:16:09.337" status="PASS" endtime="20170419 22:16:09.337"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:16:09.338">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170419 22:16:09.337" status="PASS" endtime="20170419 22:16:09.338"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:16:09.515">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170419 22:16:09.338" status="PASS" endtime="20170419 22:16:09.515"></status>
</kw>
<msg level="INFO" timestamp="20170419 22:16:09.516">${status} = PASS</msg>
<msg level="INFO" timestamp="20170419 22:16:09.516">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 22:16:09.338" status="PASS" endtime="20170419 22:16:09.516"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:16:09.516">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 22:16:09.516" status="PASS" endtime="20170419 22:16:09.516"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:16:09.517">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 22:16:09.517" status="PASS" endtime="20170419 22:16:09.517"></status>
</kw>
<status starttime="20170419 22:16:09.335" status="PASS" endtime="20170419 22:16:09.517"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:16:09.518">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170419 22:16:09.517" status="PASS" endtime="20170419 22:16:09.518"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:16:09.520">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170419 22:16:09.519" status="PASS" endtime="20170419 22:16:09.520"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:16:09.521">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170419 22:16:09.521" status="PASS" endtime="20170419 22:16:09.521"></status>
</kw>
<status starttime="20170419 22:16:09.520" status="PASS" endtime="20170419 22:16:09.521"></status>
</kw>
<status starttime="20170419 22:16:09.518" status="PASS" endtime="20170419 22:16:09.521"></status>
</kw>
<status starttime="20170419 22:16:09.518" status="PASS" endtime="20170419 22:16:09.521"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:16:09.584">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170419 22:16:09.585">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 22:16:09.522" status="PASS" endtime="20170419 22:16:09.585"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:16:09.586">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170419 22:16:09.586" status="PASS" endtime="20170419 22:16:09.586"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:16:09.587">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170419 22:16:09.587" status="PASS" endtime="20170419 22:16:09.587"></status>
</kw>
<status starttime="20170419 22:16:09.586" status="PASS" endtime="20170419 22:16:09.587"></status>
</kw>
<status starttime="20170419 22:16:09.585" status="PASS" endtime="20170419 22:16:09.588"></status>
</kw>
<status starttime="20170419 22:16:09.585" status="PASS" endtime="20170419 22:16:09.588"></status>
</kw>
<msg level="INFO" timestamp="20170419 22:16:09.588">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 22:16:09.334" status="PASS" endtime="20170419 22:16:09.588"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:16:09.588">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 22:16:09.588" status="PASS" endtime="20170419 22:16:09.588"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:16:09.589">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170419 22:16:09.589">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170419 22:16:09.589">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170419 22:16:09.589" status="PASS" endtime="20170419 22:16:09.589"></status>
</kw>
<msg level="INFO" timestamp="20170419 22:16:09.589">${state} = xyz.openbmc_project.State.Host.HostState.Off</msg>
<status starttime="20170419 22:16:09.333" status="PASS" endtime="20170419 22:16:09.589"></status>
</kw>
<msg level="INFO" timestamp="20170419 22:16:09.590">${host_state} = Off</msg>
<status starttime="20170419 22:16:09.333" status="PASS" endtime="20170419 22:16:09.590"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170419 22:16:09.590">Running != Off</msg>
<status starttime="20170419 22:16:09.590" status="FAIL" endtime="20170419 22:16:09.590"></status>
</kw>
<status starttime="20170419 22:16:09.332" status="FAIL" endtime="20170419 22:16:09.591"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:16:19.594">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170419 22:16:19.594" status="PASS" endtime="20170419 22:16:19.594"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:16:19.595">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170419 22:16:19.595" status="PASS" endtime="20170419 22:16:19.595"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:16:19.596">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170419 22:16:19.595" status="PASS" endtime="20170419 22:16:19.596"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:16:19.596">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170419 22:16:19.596" status="PASS" endtime="20170419 22:16:19.596"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:16:19.773">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170419 22:16:19.597" status="PASS" endtime="20170419 22:16:19.773"></status>
</kw>
<msg level="INFO" timestamp="20170419 22:16:19.773">${status} = PASS</msg>
<msg level="INFO" timestamp="20170419 22:16:19.773">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 22:16:19.596" status="PASS" endtime="20170419 22:16:19.773"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:16:19.774">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 22:16:19.774" status="PASS" endtime="20170419 22:16:19.774"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:16:19.775">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 22:16:19.774" status="PASS" endtime="20170419 22:16:19.775"></status>
</kw>
<status starttime="20170419 22:16:19.593" status="PASS" endtime="20170419 22:16:19.775"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:16:19.775">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170419 22:16:19.775" status="PASS" endtime="20170419 22:16:19.776"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:16:19.778">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170419 22:16:19.777" status="PASS" endtime="20170419 22:16:19.778"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:16:19.778">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170419 22:16:19.778" status="PASS" endtime="20170419 22:16:19.779"></status>
</kw>
<status starttime="20170419 22:16:19.778" status="PASS" endtime="20170419 22:16:19.779"></status>
</kw>
<status starttime="20170419 22:16:19.776" status="PASS" endtime="20170419 22:16:19.779"></status>
</kw>
<status starttime="20170419 22:16:19.776" status="PASS" endtime="20170419 22:16:19.779"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:16:19.842">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170419 22:16:19.842">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 22:16:19.779" status="PASS" endtime="20170419 22:16:19.842"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:16:19.844">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170419 22:16:19.843" status="PASS" endtime="20170419 22:16:19.844"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:16:19.845">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170419 22:16:19.844" status="PASS" endtime="20170419 22:16:19.845"></status>
</kw>
<status starttime="20170419 22:16:19.844" status="PASS" endtime="20170419 22:16:19.845"></status>
</kw>
<status starttime="20170419 22:16:19.843" status="PASS" endtime="20170419 22:16:19.845"></status>
</kw>
<status starttime="20170419 22:16:19.842" status="PASS" endtime="20170419 22:16:19.845"></status>
</kw>
<msg level="INFO" timestamp="20170419 22:16:19.845">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 22:16:19.592" status="PASS" endtime="20170419 22:16:19.845"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:16:19.846">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 22:16:19.846" status="PASS" endtime="20170419 22:16:19.846"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:16:19.847">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170419 22:16:19.847">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170419 22:16:19.847">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170419 22:16:19.846" status="PASS" endtime="20170419 22:16:19.847"></status>
</kw>
<msg level="INFO" timestamp="20170419 22:16:19.847">${state} = xyz.openbmc_project.State.Host.HostState.Off</msg>
<status starttime="20170419 22:16:19.592" status="PASS" endtime="20170419 22:16:19.847"></status>
</kw>
<msg level="INFO" timestamp="20170419 22:16:19.847">${host_state} = Off</msg>
<status starttime="20170419 22:16:19.591" status="PASS" endtime="20170419 22:16:19.847"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170419 22:16:19.848">Running != Off</msg>
<status starttime="20170419 22:16:19.848" status="FAIL" endtime="20170419 22:16:19.848"></status>
</kw>
<status starttime="20170419 22:16:19.591" status="FAIL" endtime="20170419 22:16:19.848"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:16:29.852">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170419 22:16:29.851" status="PASS" endtime="20170419 22:16:29.853"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:16:29.853">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170419 22:16:29.853" status="PASS" endtime="20170419 22:16:29.853"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:16:29.854">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170419 22:16:29.853" status="PASS" endtime="20170419 22:16:29.854"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:16:29.854">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170419 22:16:29.854" status="PASS" endtime="20170419 22:16:29.854"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:16:30.031">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170419 22:16:29.855" status="PASS" endtime="20170419 22:16:30.031"></status>
</kw>
<msg level="INFO" timestamp="20170419 22:16:30.031">${status} = PASS</msg>
<msg level="INFO" timestamp="20170419 22:16:30.031">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 22:16:29.855" status="PASS" endtime="20170419 22:16:30.031"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:16:30.032">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 22:16:30.031" status="PASS" endtime="20170419 22:16:30.032"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:16:30.032">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 22:16:30.032" status="PASS" endtime="20170419 22:16:30.033"></status>
</kw>
<status starttime="20170419 22:16:29.851" status="PASS" endtime="20170419 22:16:30.033"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:16:30.033">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170419 22:16:30.033" status="PASS" endtime="20170419 22:16:30.033"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:16:30.035">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170419 22:16:30.035" status="PASS" endtime="20170419 22:16:30.035"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:16:30.036">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170419 22:16:30.036" status="PASS" endtime="20170419 22:16:30.036"></status>
</kw>
<status starttime="20170419 22:16:30.035" status="PASS" endtime="20170419 22:16:30.036"></status>
</kw>
<status starttime="20170419 22:16:30.034" status="PASS" endtime="20170419 22:16:30.037"></status>
</kw>
<status starttime="20170419 22:16:30.034" status="PASS" endtime="20170419 22:16:30.037"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:16:30.099">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170419 22:16:30.099">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 22:16:30.037" status="PASS" endtime="20170419 22:16:30.099"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:16:30.101">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170419 22:16:30.100" status="PASS" endtime="20170419 22:16:30.101"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:16:30.102">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170419 22:16:30.102" status="PASS" endtime="20170419 22:16:30.102"></status>
</kw>
<status starttime="20170419 22:16:30.101" status="PASS" endtime="20170419 22:16:30.102"></status>
</kw>
<status starttime="20170419 22:16:30.100" status="PASS" endtime="20170419 22:16:30.102"></status>
</kw>
<status starttime="20170419 22:16:30.100" status="PASS" endtime="20170419 22:16:30.103"></status>
</kw>
<msg level="INFO" timestamp="20170419 22:16:30.103">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 22:16:29.850" status="PASS" endtime="20170419 22:16:30.103"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:16:30.103">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 22:16:30.103" status="PASS" endtime="20170419 22:16:30.103"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:16:30.104">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170419 22:16:30.104">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170419 22:16:30.104">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170419 22:16:30.104" status="PASS" endtime="20170419 22:16:30.104"></status>
</kw>
<msg level="INFO" timestamp="20170419 22:16:30.104">${state} = xyz.openbmc_project.State.Host.HostState.Off</msg>
<status starttime="20170419 22:16:29.850" status="PASS" endtime="20170419 22:16:30.104"></status>
</kw>
<msg level="INFO" timestamp="20170419 22:16:30.105">${host_state} = Off</msg>
<status starttime="20170419 22:16:29.849" status="PASS" endtime="20170419 22:16:30.105"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170419 22:16:30.105">Running != Off</msg>
<status starttime="20170419 22:16:30.105" status="FAIL" endtime="20170419 22:16:30.105"></status>
</kw>
<status starttime="20170419 22:16:29.849" status="FAIL" endtime="20170419 22:16:30.106"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:16:40.109">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170419 22:16:40.109" status="PASS" endtime="20170419 22:16:40.110"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:16:40.110">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170419 22:16:40.110" status="PASS" endtime="20170419 22:16:40.110"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:16:40.111">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170419 22:16:40.110" status="PASS" endtime="20170419 22:16:40.111"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:16:40.111">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170419 22:16:40.111" status="PASS" endtime="20170419 22:16:40.111"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:16:40.292">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170419 22:16:40.112" status="PASS" endtime="20170419 22:16:40.292"></status>
</kw>
<msg level="INFO" timestamp="20170419 22:16:40.293">${status} = PASS</msg>
<msg level="INFO" timestamp="20170419 22:16:40.293">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 22:16:40.112" status="PASS" endtime="20170419 22:16:40.293"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:16:40.293">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 22:16:40.293" status="PASS" endtime="20170419 22:16:40.293"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:16:40.294">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 22:16:40.294" status="PASS" endtime="20170419 22:16:40.294"></status>
</kw>
<status starttime="20170419 22:16:40.108" status="PASS" endtime="20170419 22:16:40.294"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:16:40.295">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170419 22:16:40.294" status="PASS" endtime="20170419 22:16:40.295"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:16:40.297">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170419 22:16:40.296" status="PASS" endtime="20170419 22:16:40.297"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:16:40.298">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170419 22:16:40.298" status="PASS" endtime="20170419 22:16:40.298"></status>
</kw>
<status starttime="20170419 22:16:40.297" status="PASS" endtime="20170419 22:16:40.298"></status>
</kw>
<status starttime="20170419 22:16:40.295" status="PASS" endtime="20170419 22:16:40.298"></status>
</kw>
<status starttime="20170419 22:16:40.295" status="PASS" endtime="20170419 22:16:40.298"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:16:40.361">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170419 22:16:40.361">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 22:16:40.299" status="PASS" endtime="20170419 22:16:40.362"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:16:40.363">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170419 22:16:40.363" status="PASS" endtime="20170419 22:16:40.363"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:16:40.364">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170419 22:16:40.364" status="PASS" endtime="20170419 22:16:40.364"></status>
</kw>
<status starttime="20170419 22:16:40.363" status="PASS" endtime="20170419 22:16:40.364"></status>
</kw>
<status starttime="20170419 22:16:40.362" status="PASS" endtime="20170419 22:16:40.364"></status>
</kw>
<status starttime="20170419 22:16:40.362" status="PASS" endtime="20170419 22:16:40.365"></status>
</kw>
<msg level="INFO" timestamp="20170419 22:16:40.365">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 22:16:40.108" status="PASS" endtime="20170419 22:16:40.365"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:16:40.365">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 22:16:40.365" status="PASS" endtime="20170419 22:16:40.365"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:16:40.366">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170419 22:16:40.366">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170419 22:16:40.366">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170419 22:16:40.366" status="PASS" endtime="20170419 22:16:40.366"></status>
</kw>
<msg level="INFO" timestamp="20170419 22:16:40.366">${state} = xyz.openbmc_project.State.Host.HostState.Off</msg>
<status starttime="20170419 22:16:40.107" status="PASS" endtime="20170419 22:16:40.366"></status>
</kw>
<msg level="INFO" timestamp="20170419 22:16:40.367">${host_state} = Off</msg>
<status starttime="20170419 22:16:40.106" status="PASS" endtime="20170419 22:16:40.367"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170419 22:16:40.367">Running != Off</msg>
<status starttime="20170419 22:16:40.367" status="FAIL" endtime="20170419 22:16:40.367"></status>
</kw>
<status starttime="20170419 22:16:40.106" status="FAIL" endtime="20170419 22:16:40.368"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:16:50.371">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170419 22:16:50.371" status="PASS" endtime="20170419 22:16:50.372"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:16:50.372">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170419 22:16:50.372" status="PASS" endtime="20170419 22:16:50.372"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:16:50.373">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170419 22:16:50.372" status="PASS" endtime="20170419 22:16:50.373"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:16:50.374">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170419 22:16:50.373" status="PASS" endtime="20170419 22:16:50.374"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:16:50.553">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170419 22:16:50.374" status="PASS" endtime="20170419 22:16:50.553"></status>
</kw>
<msg level="INFO" timestamp="20170419 22:16:50.553">${status} = PASS</msg>
<msg level="INFO" timestamp="20170419 22:16:50.553">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 22:16:50.374" status="PASS" endtime="20170419 22:16:50.553"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:16:50.553">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 22:16:50.553" status="PASS" endtime="20170419 22:16:50.554"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:16:50.554">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 22:16:50.554" status="PASS" endtime="20170419 22:16:50.554"></status>
</kw>
<status starttime="20170419 22:16:50.370" status="PASS" endtime="20170419 22:16:50.554"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:16:50.555">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170419 22:16:50.555" status="PASS" endtime="20170419 22:16:50.555"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:16:50.557">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170419 22:16:50.556" status="PASS" endtime="20170419 22:16:50.557"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:16:50.558">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170419 22:16:50.558" status="PASS" endtime="20170419 22:16:50.558"></status>
</kw>
<status starttime="20170419 22:16:50.557" status="PASS" endtime="20170419 22:16:50.558"></status>
</kw>
<status starttime="20170419 22:16:50.556" status="PASS" endtime="20170419 22:16:50.558"></status>
</kw>
<status starttime="20170419 22:16:50.555" status="PASS" endtime="20170419 22:16:50.558"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:16:50.621">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170419 22:16:50.621">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 22:16:50.558" status="PASS" endtime="20170419 22:16:50.621"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:16:50.623">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170419 22:16:50.623" status="PASS" endtime="20170419 22:16:50.623"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:16:50.624">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170419 22:16:50.624" status="PASS" endtime="20170419 22:16:50.624"></status>
</kw>
<status starttime="20170419 22:16:50.623" status="PASS" endtime="20170419 22:16:50.624"></status>
</kw>
<status starttime="20170419 22:16:50.622" status="PASS" endtime="20170419 22:16:50.624"></status>
</kw>
<status starttime="20170419 22:16:50.622" status="PASS" endtime="20170419 22:16:50.624"></status>
</kw>
<msg level="INFO" timestamp="20170419 22:16:50.625">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 22:16:50.369" status="PASS" endtime="20170419 22:16:50.625"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:16:50.625">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 22:16:50.625" status="PASS" endtime="20170419 22:16:50.625"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:16:50.626">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170419 22:16:50.626">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170419 22:16:50.626">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170419 22:16:50.626" status="PASS" endtime="20170419 22:16:50.626"></status>
</kw>
<msg level="INFO" timestamp="20170419 22:16:50.626">${state} = xyz.openbmc_project.State.Host.HostState.Off</msg>
<status starttime="20170419 22:16:50.369" status="PASS" endtime="20170419 22:16:50.626"></status>
</kw>
<msg level="INFO" timestamp="20170419 22:16:50.627">${host_state} = Off</msg>
<status starttime="20170419 22:16:50.369" status="PASS" endtime="20170419 22:16:50.627"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170419 22:16:50.627">Running != Off</msg>
<status starttime="20170419 22:16:50.627" status="FAIL" endtime="20170419 22:16:50.627"></status>
</kw>
<status starttime="20170419 22:16:50.368" status="FAIL" endtime="20170419 22:16:50.628"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:17:00.631">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170419 22:17:00.631" status="PASS" endtime="20170419 22:17:00.632"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:17:00.633">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170419 22:17:00.632" status="PASS" endtime="20170419 22:17:00.633"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:17:00.633">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170419 22:17:00.633" status="PASS" endtime="20170419 22:17:00.633"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:17:00.634">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170419 22:17:00.633" status="PASS" endtime="20170419 22:17:00.634"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:17:00.817">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170419 22:17:00.635" status="PASS" endtime="20170419 22:17:00.817"></status>
</kw>
<msg level="INFO" timestamp="20170419 22:17:00.817">${status} = PASS</msg>
<msg level="INFO" timestamp="20170419 22:17:00.817">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 22:17:00.634" status="PASS" endtime="20170419 22:17:00.817"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:17:00.818">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 22:17:00.817" status="PASS" endtime="20170419 22:17:00.818"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:17:00.818">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 22:17:00.818" status="PASS" endtime="20170419 22:17:00.818"></status>
</kw>
<status starttime="20170419 22:17:00.630" status="PASS" endtime="20170419 22:17:00.819"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:17:00.819">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170419 22:17:00.819" status="PASS" endtime="20170419 22:17:00.819"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:17:00.821">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170419 22:17:00.821" status="PASS" endtime="20170419 22:17:00.821"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:17:00.822">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170419 22:17:00.822" status="PASS" endtime="20170419 22:17:00.822"></status>
</kw>
<status starttime="20170419 22:17:00.821" status="PASS" endtime="20170419 22:17:00.822"></status>
</kw>
<status starttime="20170419 22:17:00.820" status="PASS" endtime="20170419 22:17:00.823"></status>
</kw>
<status starttime="20170419 22:17:00.819" status="PASS" endtime="20170419 22:17:00.823"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:17:00.888">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170419 22:17:00.888">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 22:17:00.823" status="PASS" endtime="20170419 22:17:00.888"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:17:00.889">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170419 22:17:00.889" status="PASS" endtime="20170419 22:17:00.890"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:17:00.890">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170419 22:17:00.890" status="PASS" endtime="20170419 22:17:00.891"></status>
</kw>
<status starttime="20170419 22:17:00.890" status="PASS" endtime="20170419 22:17:00.891"></status>
</kw>
<status starttime="20170419 22:17:00.889" status="PASS" endtime="20170419 22:17:00.891"></status>
</kw>
<status starttime="20170419 22:17:00.888" status="PASS" endtime="20170419 22:17:00.891"></status>
</kw>
<msg level="INFO" timestamp="20170419 22:17:00.891">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 22:17:00.630" status="PASS" endtime="20170419 22:17:00.891"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:17:00.892">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 22:17:00.891" status="PASS" endtime="20170419 22:17:00.892"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:17:00.892">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170419 22:17:00.892">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170419 22:17:00.892">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170419 22:17:00.892" status="PASS" endtime="20170419 22:17:00.893"></status>
</kw>
<msg level="INFO" timestamp="20170419 22:17:00.893">${state} = xyz.openbmc_project.State.Host.HostState.Off</msg>
<status starttime="20170419 22:17:00.629" status="PASS" endtime="20170419 22:17:00.893"></status>
</kw>
<msg level="INFO" timestamp="20170419 22:17:00.893">${host_state} = Off</msg>
<status starttime="20170419 22:17:00.629" status="PASS" endtime="20170419 22:17:00.893"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170419 22:17:00.894">Running != Off</msg>
<status starttime="20170419 22:17:00.893" status="FAIL" endtime="20170419 22:17:00.894"></status>
</kw>
<status starttime="20170419 22:17:00.628" status="FAIL" endtime="20170419 22:17:00.894"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:17:10.898">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170419 22:17:10.898" status="PASS" endtime="20170419 22:17:10.898"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:17:10.899">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170419 22:17:10.899" status="PASS" endtime="20170419 22:17:10.899"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:17:10.900">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170419 22:17:10.899" status="PASS" endtime="20170419 22:17:10.900"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:17:10.900">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170419 22:17:10.900" status="PASS" endtime="20170419 22:17:10.900"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:17:11.080">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170419 22:17:10.901" status="PASS" endtime="20170419 22:17:11.080"></status>
</kw>
<msg level="INFO" timestamp="20170419 22:17:11.080">${status} = PASS</msg>
<msg level="INFO" timestamp="20170419 22:17:11.080">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 22:17:10.901" status="PASS" endtime="20170419 22:17:11.080"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:17:11.081">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 22:17:11.081" status="PASS" endtime="20170419 22:17:11.081"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:17:11.082">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 22:17:11.081" status="PASS" endtime="20170419 22:17:11.082"></status>
</kw>
<status starttime="20170419 22:17:10.897" status="PASS" endtime="20170419 22:17:11.082"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:17:11.082">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170419 22:17:11.082" status="PASS" endtime="20170419 22:17:11.082"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:17:11.085">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170419 22:17:11.084" status="PASS" endtime="20170419 22:17:11.085"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:17:11.086">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170419 22:17:11.085" status="PASS" endtime="20170419 22:17:11.086"></status>
</kw>
<status starttime="20170419 22:17:11.085" status="PASS" endtime="20170419 22:17:11.086"></status>
</kw>
<status starttime="20170419 22:17:11.083" status="PASS" endtime="20170419 22:17:11.086"></status>
</kw>
<status starttime="20170419 22:17:11.083" status="PASS" endtime="20170419 22:17:11.086"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:17:11.150">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170419 22:17:11.150">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 22:17:11.086" status="PASS" endtime="20170419 22:17:11.150"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:17:11.152">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170419 22:17:11.151" status="PASS" endtime="20170419 22:17:11.152"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:17:11.153">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170419 22:17:11.152" status="PASS" endtime="20170419 22:17:11.153"></status>
</kw>
<status starttime="20170419 22:17:11.152" status="PASS" endtime="20170419 22:17:11.153"></status>
</kw>
<status starttime="20170419 22:17:11.151" status="PASS" endtime="20170419 22:17:11.153"></status>
</kw>
<status starttime="20170419 22:17:11.150" status="PASS" endtime="20170419 22:17:11.153"></status>
</kw>
<msg level="INFO" timestamp="20170419 22:17:11.153">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 22:17:10.896" status="PASS" endtime="20170419 22:17:11.153"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:17:11.154">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 22:17:11.154" status="PASS" endtime="20170419 22:17:11.154"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:17:11.154">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170419 22:17:11.155">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170419 22:17:11.155">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170419 22:17:11.154" status="PASS" endtime="20170419 22:17:11.155"></status>
</kw>
<msg level="INFO" timestamp="20170419 22:17:11.155">${state} = xyz.openbmc_project.State.Host.HostState.Off</msg>
<status starttime="20170419 22:17:10.896" status="PASS" endtime="20170419 22:17:11.155"></status>
</kw>
<msg level="INFO" timestamp="20170419 22:17:11.155">${host_state} = Off</msg>
<status starttime="20170419 22:17:10.895" status="PASS" endtime="20170419 22:17:11.155"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170419 22:17:11.156">Running != Off</msg>
<status starttime="20170419 22:17:11.156" status="FAIL" endtime="20170419 22:17:11.156"></status>
</kw>
<status starttime="20170419 22:17:10.894" status="FAIL" endtime="20170419 22:17:11.156"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:17:21.160">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170419 22:17:21.159" status="PASS" endtime="20170419 22:17:21.160"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:17:21.161">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170419 22:17:21.160" status="PASS" endtime="20170419 22:17:21.161"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:17:21.161">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170419 22:17:21.161" status="PASS" endtime="20170419 22:17:21.161"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:17:21.162">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170419 22:17:21.162" status="PASS" endtime="20170419 22:17:21.162"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:17:21.337">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170419 22:17:21.163" status="PASS" endtime="20170419 22:17:21.337"></status>
</kw>
<msg level="INFO" timestamp="20170419 22:17:21.337">${status} = PASS</msg>
<msg level="INFO" timestamp="20170419 22:17:21.337">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 22:17:21.162" status="PASS" endtime="20170419 22:17:21.337"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:17:21.338">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 22:17:21.337" status="PASS" endtime="20170419 22:17:21.338"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:17:21.338">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 22:17:21.338" status="PASS" endtime="20170419 22:17:21.338"></status>
</kw>
<status starttime="20170419 22:17:21.159" status="PASS" endtime="20170419 22:17:21.339"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:17:21.339">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170419 22:17:21.339" status="PASS" endtime="20170419 22:17:21.339"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:17:21.341">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170419 22:17:21.340" status="PASS" endtime="20170419 22:17:21.341"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:17:21.342">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170419 22:17:21.342" status="PASS" endtime="20170419 22:17:21.342"></status>
</kw>
<status starttime="20170419 22:17:21.341" status="PASS" endtime="20170419 22:17:21.342"></status>
</kw>
<status starttime="20170419 22:17:21.340" status="PASS" endtime="20170419 22:17:21.342"></status>
</kw>
<status starttime="20170419 22:17:21.339" status="PASS" endtime="20170419 22:17:21.342"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:17:21.405">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170419 22:17:21.405">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 22:17:21.343" status="PASS" endtime="20170419 22:17:21.405"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:17:21.407">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170419 22:17:21.406" status="PASS" endtime="20170419 22:17:21.407"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:17:21.408">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170419 22:17:21.408" status="PASS" endtime="20170419 22:17:21.408"></status>
</kw>
<status starttime="20170419 22:17:21.407" status="PASS" endtime="20170419 22:17:21.408"></status>
</kw>
<status starttime="20170419 22:17:21.406" status="PASS" endtime="20170419 22:17:21.408"></status>
</kw>
<status starttime="20170419 22:17:21.406" status="PASS" endtime="20170419 22:17:21.408"></status>
</kw>
<msg level="INFO" timestamp="20170419 22:17:21.408">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 22:17:21.158" status="PASS" endtime="20170419 22:17:21.408"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:17:21.409">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 22:17:21.409" status="PASS" endtime="20170419 22:17:21.409"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:17:21.410">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170419 22:17:21.410">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170419 22:17:21.410">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170419 22:17:21.409" status="PASS" endtime="20170419 22:17:21.410"></status>
</kw>
<msg level="INFO" timestamp="20170419 22:17:21.410">${state} = xyz.openbmc_project.State.Host.HostState.Off</msg>
<status starttime="20170419 22:17:21.158" status="PASS" endtime="20170419 22:17:21.410"></status>
</kw>
<msg level="INFO" timestamp="20170419 22:17:21.410">${host_state} = Off</msg>
<status starttime="20170419 22:17:21.157" status="PASS" endtime="20170419 22:17:21.410"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170419 22:17:21.411">Running != Off</msg>
<status starttime="20170419 22:17:21.411" status="FAIL" endtime="20170419 22:17:21.411"></status>
</kw>
<status starttime="20170419 22:17:21.157" status="FAIL" endtime="20170419 22:17:21.411"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:17:31.415">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170419 22:17:31.415" status="PASS" endtime="20170419 22:17:31.416"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:17:31.416">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170419 22:17:31.416" status="PASS" endtime="20170419 22:17:31.416"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:17:31.417">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170419 22:17:31.416" status="PASS" endtime="20170419 22:17:31.417"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:17:31.417">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170419 22:17:31.417" status="PASS" endtime="20170419 22:17:31.417"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:17:31.593">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170419 22:17:31.418" status="PASS" endtime="20170419 22:17:31.593"></status>
</kw>
<msg level="INFO" timestamp="20170419 22:17:31.593">${status} = PASS</msg>
<msg level="INFO" timestamp="20170419 22:17:31.593">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 22:17:31.418" status="PASS" endtime="20170419 22:17:31.593"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:17:31.594">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 22:17:31.594" status="PASS" endtime="20170419 22:17:31.594"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:17:31.595">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 22:17:31.595" status="PASS" endtime="20170419 22:17:31.595"></status>
</kw>
<status starttime="20170419 22:17:31.414" status="PASS" endtime="20170419 22:17:31.595"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:17:31.596">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170419 22:17:31.595" status="PASS" endtime="20170419 22:17:31.596"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:17:31.598">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170419 22:17:31.597" status="PASS" endtime="20170419 22:17:31.598"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:17:31.599">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170419 22:17:31.598" status="PASS" endtime="20170419 22:17:31.599"></status>
</kw>
<status starttime="20170419 22:17:31.598" status="PASS" endtime="20170419 22:17:31.599"></status>
</kw>
<status starttime="20170419 22:17:31.596" status="PASS" endtime="20170419 22:17:31.599"></status>
</kw>
<status starttime="20170419 22:17:31.596" status="PASS" endtime="20170419 22:17:31.599"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:17:31.686">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170419 22:17:31.686">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 22:17:31.599" status="PASS" endtime="20170419 22:17:31.686"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:17:31.688">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170419 22:17:31.687" status="PASS" endtime="20170419 22:17:31.688"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:17:31.688">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170419 22:17:31.688" status="PASS" endtime="20170419 22:17:31.689"></status>
</kw>
<status starttime="20170419 22:17:31.688" status="PASS" endtime="20170419 22:17:31.689"></status>
</kw>
<status starttime="20170419 22:17:31.687" status="PASS" endtime="20170419 22:17:31.689"></status>
</kw>
<status starttime="20170419 22:17:31.686" status="PASS" endtime="20170419 22:17:31.689"></status>
</kw>
<msg level="INFO" timestamp="20170419 22:17:31.689">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 22:17:31.413" status="PASS" endtime="20170419 22:17:31.689"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:17:31.690">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 22:17:31.689" status="PASS" endtime="20170419 22:17:31.690"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:17:31.690">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170419 22:17:31.690">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170419 22:17:31.690">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170419 22:17:31.690" status="PASS" endtime="20170419 22:17:31.690"></status>
</kw>
<msg level="INFO" timestamp="20170419 22:17:31.691">${state} = xyz.openbmc_project.State.Host.HostState.Off</msg>
<status starttime="20170419 22:17:31.413" status="PASS" endtime="20170419 22:17:31.691"></status>
</kw>
<msg level="INFO" timestamp="20170419 22:17:31.691">${host_state} = Off</msg>
<status starttime="20170419 22:17:31.412" status="PASS" endtime="20170419 22:17:31.691"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170419 22:17:31.692">Running != Off</msg>
<status starttime="20170419 22:17:31.691" status="FAIL" endtime="20170419 22:17:31.692"></status>
</kw>
<status starttime="20170419 22:17:31.412" status="FAIL" endtime="20170419 22:17:31.692"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:17:41.696">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170419 22:17:41.696" status="PASS" endtime="20170419 22:17:41.697"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:17:41.697">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170419 22:17:41.697" status="PASS" endtime="20170419 22:17:41.697"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:17:41.698">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170419 22:17:41.698" status="PASS" endtime="20170419 22:17:41.698"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:17:41.699">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170419 22:17:41.698" status="PASS" endtime="20170419 22:17:41.699"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:17:41.874">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170419 22:17:41.699" status="PASS" endtime="20170419 22:17:41.874"></status>
</kw>
<msg level="INFO" timestamp="20170419 22:17:41.874">${status} = PASS</msg>
<msg level="INFO" timestamp="20170419 22:17:41.874">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 22:17:41.699" status="PASS" endtime="20170419 22:17:41.874"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:17:41.875">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 22:17:41.875" status="PASS" endtime="20170419 22:17:41.875"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:17:41.876">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 22:17:41.875" status="PASS" endtime="20170419 22:17:41.876"></status>
</kw>
<status starttime="20170419 22:17:41.695" status="PASS" endtime="20170419 22:17:41.876"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:17:41.876">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170419 22:17:41.876" status="PASS" endtime="20170419 22:17:41.876"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:17:41.878">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170419 22:17:41.878" status="PASS" endtime="20170419 22:17:41.879"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:17:41.880">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170419 22:17:41.879" status="PASS" endtime="20170419 22:17:41.880"></status>
</kw>
<status starttime="20170419 22:17:41.879" status="PASS" endtime="20170419 22:17:41.880"></status>
</kw>
<status starttime="20170419 22:17:41.877" status="PASS" endtime="20170419 22:17:41.880"></status>
</kw>
<status starttime="20170419 22:17:41.877" status="PASS" endtime="20170419 22:17:41.880"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:17:41.943">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170419 22:17:41.944">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 22:17:41.880" status="PASS" endtime="20170419 22:17:41.944"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:17:41.945">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170419 22:17:41.945" status="PASS" endtime="20170419 22:17:41.945"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:17:41.946">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170419 22:17:41.946" status="PASS" endtime="20170419 22:17:41.946"></status>
</kw>
<status starttime="20170419 22:17:41.946" status="PASS" endtime="20170419 22:17:41.946"></status>
</kw>
<status starttime="20170419 22:17:41.944" status="PASS" endtime="20170419 22:17:41.947"></status>
</kw>
<status starttime="20170419 22:17:41.944" status="PASS" endtime="20170419 22:17:41.947"></status>
</kw>
<msg level="INFO" timestamp="20170419 22:17:41.947">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 22:17:41.695" status="PASS" endtime="20170419 22:17:41.947"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:17:41.947">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 22:17:41.947" status="PASS" endtime="20170419 22:17:41.947"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:17:41.948">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170419 22:17:41.948">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170419 22:17:41.948">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170419 22:17:41.948" status="PASS" endtime="20170419 22:17:41.948"></status>
</kw>
<msg level="INFO" timestamp="20170419 22:17:41.948">${state} = xyz.openbmc_project.State.Host.HostState.Off</msg>
<status starttime="20170419 22:17:41.694" status="PASS" endtime="20170419 22:17:41.949"></status>
</kw>
<msg level="INFO" timestamp="20170419 22:17:41.949">${host_state} = Off</msg>
<status starttime="20170419 22:17:41.693" status="PASS" endtime="20170419 22:17:41.949"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170419 22:17:41.950">Running != Off</msg>
<status starttime="20170419 22:17:41.949" status="FAIL" endtime="20170419 22:17:41.950"></status>
</kw>
<status starttime="20170419 22:17:41.692" status="FAIL" endtime="20170419 22:17:41.950"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:17:51.954">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170419 22:17:51.954" status="PASS" endtime="20170419 22:17:51.954"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:17:51.955">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170419 22:17:51.955" status="PASS" endtime="20170419 22:17:51.955"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:17:51.955">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170419 22:17:51.955" status="PASS" endtime="20170419 22:17:51.956"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:17:51.956">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170419 22:17:51.956" status="PASS" endtime="20170419 22:17:51.956"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:17:52.131">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170419 22:17:51.957" status="PASS" endtime="20170419 22:17:52.131"></status>
</kw>
<msg level="INFO" timestamp="20170419 22:17:52.131">${status} = PASS</msg>
<msg level="INFO" timestamp="20170419 22:17:52.131">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 22:17:51.956" status="PASS" endtime="20170419 22:17:52.132"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:17:52.132">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 22:17:52.132" status="PASS" endtime="20170419 22:17:52.132"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:17:52.133">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 22:17:52.132" status="PASS" endtime="20170419 22:17:52.133"></status>
</kw>
<status starttime="20170419 22:17:51.953" status="PASS" endtime="20170419 22:17:52.133"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:17:52.134">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170419 22:17:52.133" status="PASS" endtime="20170419 22:17:52.134"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:17:52.136">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170419 22:17:52.135" status="PASS" endtime="20170419 22:17:52.136"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:17:52.137">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170419 22:17:52.136" status="PASS" endtime="20170419 22:17:52.137"></status>
</kw>
<status starttime="20170419 22:17:52.136" status="PASS" endtime="20170419 22:17:52.137"></status>
</kw>
<status starttime="20170419 22:17:52.134" status="PASS" endtime="20170419 22:17:52.137"></status>
</kw>
<status starttime="20170419 22:17:52.134" status="PASS" endtime="20170419 22:17:52.137"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:17:52.200">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170419 22:17:52.200">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 22:17:52.137" status="PASS" endtime="20170419 22:17:52.200"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:17:52.202">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170419 22:17:52.201" status="PASS" endtime="20170419 22:17:52.202"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:17:52.203">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170419 22:17:52.202" status="PASS" endtime="20170419 22:17:52.203"></status>
</kw>
<status starttime="20170419 22:17:52.202" status="PASS" endtime="20170419 22:17:52.203"></status>
</kw>
<status starttime="20170419 22:17:52.201" status="PASS" endtime="20170419 22:17:52.203"></status>
</kw>
<status starttime="20170419 22:17:52.200" status="PASS" endtime="20170419 22:17:52.203"></status>
</kw>
<msg level="INFO" timestamp="20170419 22:17:52.203">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 22:17:51.952" status="PASS" endtime="20170419 22:17:52.203"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:17:52.204">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 22:17:52.204" status="PASS" endtime="20170419 22:17:52.204"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:17:52.205">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170419 22:17:52.205">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170419 22:17:52.205">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170419 22:17:52.204" status="PASS" endtime="20170419 22:17:52.205"></status>
</kw>
<msg level="INFO" timestamp="20170419 22:17:52.205">${state} = xyz.openbmc_project.State.Host.HostState.Off</msg>
<status starttime="20170419 22:17:51.952" status="PASS" endtime="20170419 22:17:52.205"></status>
</kw>
<msg level="INFO" timestamp="20170419 22:17:52.205">${host_state} = Off</msg>
<status starttime="20170419 22:17:51.951" status="PASS" endtime="20170419 22:17:52.205"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170419 22:17:52.206">Running != Off</msg>
<status starttime="20170419 22:17:52.206" status="FAIL" endtime="20170419 22:17:52.206"></status>
</kw>
<status starttime="20170419 22:17:51.951" status="FAIL" endtime="20170419 22:17:52.206"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:18:02.210">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170419 22:18:02.209" status="PASS" endtime="20170419 22:18:02.211"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:18:02.211">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170419 22:18:02.211" status="PASS" endtime="20170419 22:18:02.211"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:18:02.212">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170419 22:18:02.211" status="PASS" endtime="20170419 22:18:02.212"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:18:02.212">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170419 22:18:02.212" status="PASS" endtime="20170419 22:18:02.212"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:18:02.397">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170419 22:18:02.213" status="PASS" endtime="20170419 22:18:02.397"></status>
</kw>
<msg level="INFO" timestamp="20170419 22:18:02.397">${status} = PASS</msg>
<msg level="INFO" timestamp="20170419 22:18:02.397">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 22:18:02.213" status="PASS" endtime="20170419 22:18:02.397"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:18:02.398">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 22:18:02.397" status="PASS" endtime="20170419 22:18:02.398"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:18:02.398">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 22:18:02.398" status="PASS" endtime="20170419 22:18:02.398"></status>
</kw>
<status starttime="20170419 22:18:02.209" status="PASS" endtime="20170419 22:18:02.399"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:18:02.399">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170419 22:18:02.399" status="PASS" endtime="20170419 22:18:02.399"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:18:02.401">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170419 22:18:02.401" status="PASS" endtime="20170419 22:18:02.401"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:18:02.402">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170419 22:18:02.402" status="PASS" endtime="20170419 22:18:02.402"></status>
</kw>
<status starttime="20170419 22:18:02.401" status="PASS" endtime="20170419 22:18:02.402"></status>
</kw>
<status starttime="20170419 22:18:02.400" status="PASS" endtime="20170419 22:18:02.402"></status>
</kw>
<status starttime="20170419 22:18:02.400" status="PASS" endtime="20170419 22:18:02.403"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:18:02.465">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170419 22:18:02.465">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 22:18:02.403" status="PASS" endtime="20170419 22:18:02.465"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:18:02.467">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170419 22:18:02.466" status="PASS" endtime="20170419 22:18:02.467"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:18:02.468">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170419 22:18:02.467" status="PASS" endtime="20170419 22:18:02.468"></status>
</kw>
<status starttime="20170419 22:18:02.467" status="PASS" endtime="20170419 22:18:02.468"></status>
</kw>
<status starttime="20170419 22:18:02.466" status="PASS" endtime="20170419 22:18:02.468"></status>
</kw>
<status starttime="20170419 22:18:02.465" status="PASS" endtime="20170419 22:18:02.468"></status>
</kw>
<msg level="INFO" timestamp="20170419 22:18:02.468">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 22:18:02.208" status="PASS" endtime="20170419 22:18:02.468"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:18:02.469">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 22:18:02.469" status="PASS" endtime="20170419 22:18:02.469"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:18:02.469">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170419 22:18:02.470">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170419 22:18:02.470">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170419 22:18:02.469" status="PASS" endtime="20170419 22:18:02.470"></status>
</kw>
<msg level="INFO" timestamp="20170419 22:18:02.470">${state} = xyz.openbmc_project.State.Host.HostState.Off</msg>
<status starttime="20170419 22:18:02.208" status="PASS" endtime="20170419 22:18:02.470"></status>
</kw>
<msg level="INFO" timestamp="20170419 22:18:02.470">${host_state} = Off</msg>
<status starttime="20170419 22:18:02.207" status="PASS" endtime="20170419 22:18:02.470"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170419 22:18:02.471">Running != Off</msg>
<status starttime="20170419 22:18:02.471" status="FAIL" endtime="20170419 22:18:02.471"></status>
</kw>
<status starttime="20170419 22:18:02.207" status="FAIL" endtime="20170419 22:18:02.471"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:18:12.475">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170419 22:18:12.475" status="PASS" endtime="20170419 22:18:12.476"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:18:12.476">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170419 22:18:12.476" status="PASS" endtime="20170419 22:18:12.476"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:18:12.477">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170419 22:18:12.477" status="PASS" endtime="20170419 22:18:12.477"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:18:12.477">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170419 22:18:12.477" status="PASS" endtime="20170419 22:18:12.478"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:18:12.656">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170419 22:18:12.478" status="PASS" endtime="20170419 22:18:12.656"></status>
</kw>
<msg level="INFO" timestamp="20170419 22:18:12.657">${status} = PASS</msg>
<msg level="INFO" timestamp="20170419 22:18:12.657">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 22:18:12.478" status="PASS" endtime="20170419 22:18:12.657"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:18:12.657">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 22:18:12.657" status="PASS" endtime="20170419 22:18:12.657"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:18:12.658">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 22:18:12.658" status="PASS" endtime="20170419 22:18:12.658"></status>
</kw>
<status starttime="20170419 22:18:12.474" status="PASS" endtime="20170419 22:18:12.658"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:18:12.659">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170419 22:18:12.658" status="PASS" endtime="20170419 22:18:12.659"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:18:12.661">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170419 22:18:12.660" status="PASS" endtime="20170419 22:18:12.661"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:18:12.662">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170419 22:18:12.662" status="PASS" endtime="20170419 22:18:12.663"></status>
</kw>
<status starttime="20170419 22:18:12.661" status="PASS" endtime="20170419 22:18:12.663"></status>
</kw>
<status starttime="20170419 22:18:12.660" status="PASS" endtime="20170419 22:18:12.663"></status>
</kw>
<status starttime="20170419 22:18:12.659" status="PASS" endtime="20170419 22:18:12.663"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:18:12.726">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170419 22:18:12.726">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 22:18:12.663" status="PASS" endtime="20170419 22:18:12.726"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:18:12.728">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170419 22:18:12.727" status="PASS" endtime="20170419 22:18:12.728"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:18:12.729">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170419 22:18:12.728" status="PASS" endtime="20170419 22:18:12.729"></status>
</kw>
<status starttime="20170419 22:18:12.728" status="PASS" endtime="20170419 22:18:12.729"></status>
</kw>
<status starttime="20170419 22:18:12.727" status="PASS" endtime="20170419 22:18:12.729"></status>
</kw>
<status starttime="20170419 22:18:12.726" status="PASS" endtime="20170419 22:18:12.729"></status>
</kw>
<msg level="INFO" timestamp="20170419 22:18:12.729">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 22:18:12.474" status="PASS" endtime="20170419 22:18:12.729"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:18:12.730">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 22:18:12.729" status="PASS" endtime="20170419 22:18:12.730"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:18:12.730">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170419 22:18:12.730">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170419 22:18:12.731">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170419 22:18:12.730" status="PASS" endtime="20170419 22:18:12.731"></status>
</kw>
<msg level="INFO" timestamp="20170419 22:18:12.731">${state} = xyz.openbmc_project.State.Host.HostState.Off</msg>
<status starttime="20170419 22:18:12.473" status="PASS" endtime="20170419 22:18:12.731"></status>
</kw>
<msg level="INFO" timestamp="20170419 22:18:12.731">${host_state} = Off</msg>
<status starttime="20170419 22:18:12.472" status="PASS" endtime="20170419 22:18:12.731"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170419 22:18:12.732">Running != Off</msg>
<status starttime="20170419 22:18:12.731" status="FAIL" endtime="20170419 22:18:12.732"></status>
</kw>
<status starttime="20170419 22:18:12.472" status="FAIL" endtime="20170419 22:18:12.732"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:18:22.736">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170419 22:18:22.735" status="PASS" endtime="20170419 22:18:22.736"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:18:22.737">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170419 22:18:22.736" status="PASS" endtime="20170419 22:18:22.737"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:18:22.737">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170419 22:18:22.737" status="PASS" endtime="20170419 22:18:22.737"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:18:22.738">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170419 22:18:22.738" status="PASS" endtime="20170419 22:18:22.738"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:18:22.914">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170419 22:18:22.739" status="PASS" endtime="20170419 22:18:22.915"></status>
</kw>
<msg level="INFO" timestamp="20170419 22:18:22.915">${status} = PASS</msg>
<msg level="INFO" timestamp="20170419 22:18:22.915">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 22:18:22.738" status="PASS" endtime="20170419 22:18:22.915"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:18:22.916">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 22:18:22.915" status="PASS" endtime="20170419 22:18:22.916"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:18:22.917">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 22:18:22.916" status="PASS" endtime="20170419 22:18:22.917"></status>
</kw>
<status starttime="20170419 22:18:22.735" status="PASS" endtime="20170419 22:18:22.917"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:18:22.918">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170419 22:18:22.917" status="PASS" endtime="20170419 22:18:22.918"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:18:22.920">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170419 22:18:22.920" status="PASS" endtime="20170419 22:18:22.921"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:18:22.922">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170419 22:18:22.921" status="PASS" endtime="20170419 22:18:22.922"></status>
</kw>
<status starttime="20170419 22:18:22.921" status="PASS" endtime="20170419 22:18:22.922"></status>
</kw>
<status starttime="20170419 22:18:22.919" status="PASS" endtime="20170419 22:18:22.922"></status>
</kw>
<status starttime="20170419 22:18:22.918" status="PASS" endtime="20170419 22:18:22.922"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:18:22.986">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170419 22:18:22.986">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 22:18:22.923" status="PASS" endtime="20170419 22:18:22.986"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:18:22.987">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170419 22:18:22.987" status="PASS" endtime="20170419 22:18:22.987"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:18:22.988">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170419 22:18:22.988" status="PASS" endtime="20170419 22:18:22.988"></status>
</kw>
<status starttime="20170419 22:18:22.988" status="PASS" endtime="20170419 22:18:22.989"></status>
</kw>
<status starttime="20170419 22:18:22.986" status="PASS" endtime="20170419 22:18:22.989"></status>
</kw>
<status starttime="20170419 22:18:22.986" status="PASS" endtime="20170419 22:18:22.989"></status>
</kw>
<msg level="INFO" timestamp="20170419 22:18:22.989">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 22:18:22.734" status="PASS" endtime="20170419 22:18:22.989"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:18:22.990">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 22:18:22.989" status="PASS" endtime="20170419 22:18:22.990"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:18:22.990">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170419 22:18:22.991">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170419 22:18:22.991">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170419 22:18:22.990" status="PASS" endtime="20170419 22:18:22.991"></status>
</kw>
<msg level="INFO" timestamp="20170419 22:18:22.991">${state} = xyz.openbmc_project.State.Host.HostState.Off</msg>
<status starttime="20170419 22:18:22.733" status="PASS" endtime="20170419 22:18:22.991"></status>
</kw>
<msg level="INFO" timestamp="20170419 22:18:22.991">${host_state} = Off</msg>
<status starttime="20170419 22:18:22.733" status="PASS" endtime="20170419 22:18:22.991"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170419 22:18:22.992">Running != Off</msg>
<status starttime="20170419 22:18:22.992" status="FAIL" endtime="20170419 22:18:22.992"></status>
</kw>
<status starttime="20170419 22:18:22.732" status="FAIL" endtime="20170419 22:18:22.992"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:18:32.996">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170419 22:18:32.996" status="PASS" endtime="20170419 22:18:32.997"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:18:32.997">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170419 22:18:32.997" status="PASS" endtime="20170419 22:18:32.998"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:18:32.998">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170419 22:18:32.998" status="PASS" endtime="20170419 22:18:32.998"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:18:32.999">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170419 22:18:32.998" status="PASS" endtime="20170419 22:18:32.999"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:18:33.179">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170419 22:18:32.999" status="PASS" endtime="20170419 22:18:33.179"></status>
</kw>
<msg level="INFO" timestamp="20170419 22:18:33.179">${status} = PASS</msg>
<msg level="INFO" timestamp="20170419 22:18:33.179">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 22:18:32.999" status="PASS" endtime="20170419 22:18:33.179"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:18:33.179">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 22:18:33.179" status="PASS" endtime="20170419 22:18:33.180"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:18:33.180">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 22:18:33.180" status="PASS" endtime="20170419 22:18:33.180"></status>
</kw>
<status starttime="20170419 22:18:32.995" status="PASS" endtime="20170419 22:18:33.180"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:18:33.181">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170419 22:18:33.181" status="PASS" endtime="20170419 22:18:33.181"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:18:33.183">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170419 22:18:33.182" status="PASS" endtime="20170419 22:18:33.183"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:18:33.184">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170419 22:18:33.184" status="PASS" endtime="20170419 22:18:33.184"></status>
</kw>
<status starttime="20170419 22:18:33.183" status="PASS" endtime="20170419 22:18:33.184"></status>
</kw>
<status starttime="20170419 22:18:33.182" status="PASS" endtime="20170419 22:18:33.184"></status>
</kw>
<status starttime="20170419 22:18:33.181" status="PASS" endtime="20170419 22:18:33.185"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:18:33.248">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170419 22:18:33.248">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 22:18:33.185" status="PASS" endtime="20170419 22:18:33.248"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:18:33.249">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170419 22:18:33.249" status="PASS" endtime="20170419 22:18:33.250"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:18:33.251">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170419 22:18:33.251" status="PASS" endtime="20170419 22:18:33.251"></status>
</kw>
<status starttime="20170419 22:18:33.250" status="PASS" endtime="20170419 22:18:33.251"></status>
</kw>
<status starttime="20170419 22:18:33.248" status="PASS" endtime="20170419 22:18:33.251"></status>
</kw>
<status starttime="20170419 22:18:33.248" status="PASS" endtime="20170419 22:18:33.251"></status>
</kw>
<msg level="INFO" timestamp="20170419 22:18:33.252">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 22:18:32.994" status="PASS" endtime="20170419 22:18:33.252"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:18:33.252">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 22:18:33.252" status="PASS" endtime="20170419 22:18:33.252"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:18:33.253">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170419 22:18:33.253">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170419 22:18:33.253">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170419 22:18:33.253" status="PASS" endtime="20170419 22:18:33.253"></status>
</kw>
<msg level="INFO" timestamp="20170419 22:18:33.253">${state} = xyz.openbmc_project.State.Host.HostState.Off</msg>
<status starttime="20170419 22:18:32.994" status="PASS" endtime="20170419 22:18:33.254"></status>
</kw>
<msg level="INFO" timestamp="20170419 22:18:33.254">${host_state} = Off</msg>
<status starttime="20170419 22:18:32.993" status="PASS" endtime="20170419 22:18:33.254"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170419 22:18:33.255">Running != Off</msg>
<status starttime="20170419 22:18:33.254" status="FAIL" endtime="20170419 22:18:33.255"></status>
</kw>
<status starttime="20170419 22:18:32.993" status="FAIL" endtime="20170419 22:18:33.255"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:18:43.259">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170419 22:18:43.258" status="PASS" endtime="20170419 22:18:43.259"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:18:43.260">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170419 22:18:43.259" status="PASS" endtime="20170419 22:18:43.260"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:18:43.260">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170419 22:18:43.260" status="PASS" endtime="20170419 22:18:43.260"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:18:43.261">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170419 22:18:43.260" status="PASS" endtime="20170419 22:18:43.261"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:18:43.436">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170419 22:18:43.262" status="PASS" endtime="20170419 22:18:43.436"></status>
</kw>
<msg level="INFO" timestamp="20170419 22:18:43.436">${status} = PASS</msg>
<msg level="INFO" timestamp="20170419 22:18:43.436">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 22:18:43.261" status="PASS" endtime="20170419 22:18:43.436"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:18:43.437">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 22:18:43.437" status="PASS" endtime="20170419 22:18:43.437"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:18:43.438">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 22:18:43.437" status="PASS" endtime="20170419 22:18:43.438"></status>
</kw>
<status starttime="20170419 22:18:43.258" status="PASS" endtime="20170419 22:18:43.438"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:18:43.439">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170419 22:18:43.438" status="PASS" endtime="20170419 22:18:43.439"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:18:43.441">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170419 22:18:43.440" status="PASS" endtime="20170419 22:18:43.441"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:18:43.442">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170419 22:18:43.441" status="PASS" endtime="20170419 22:18:43.442"></status>
</kw>
<status starttime="20170419 22:18:43.441" status="PASS" endtime="20170419 22:18:43.442"></status>
</kw>
<status starttime="20170419 22:18:43.439" status="PASS" endtime="20170419 22:18:43.442"></status>
</kw>
<status starttime="20170419 22:18:43.439" status="PASS" endtime="20170419 22:18:43.442"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:18:43.505">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170419 22:18:43.506">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 22:18:43.442" status="PASS" endtime="20170419 22:18:43.506"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:18:43.507">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170419 22:18:43.507" status="PASS" endtime="20170419 22:18:43.507"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:18:43.508">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170419 22:18:43.508" status="PASS" endtime="20170419 22:18:43.508"></status>
</kw>
<status starttime="20170419 22:18:43.508" status="PASS" endtime="20170419 22:18:43.508"></status>
</kw>
<status starttime="20170419 22:18:43.506" status="PASS" endtime="20170419 22:18:43.509"></status>
</kw>
<status starttime="20170419 22:18:43.506" status="PASS" endtime="20170419 22:18:43.509"></status>
</kw>
<msg level="INFO" timestamp="20170419 22:18:43.509">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 22:18:43.257" status="PASS" endtime="20170419 22:18:43.509"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:18:43.509">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 22:18:43.509" status="PASS" endtime="20170419 22:18:43.509"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:18:43.510">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170419 22:18:43.510">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170419 22:18:43.510">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170419 22:18:43.510" status="PASS" endtime="20170419 22:18:43.510"></status>
</kw>
<msg level="INFO" timestamp="20170419 22:18:43.511">${state} = xyz.openbmc_project.State.Host.HostState.Off</msg>
<status starttime="20170419 22:18:43.257" status="PASS" endtime="20170419 22:18:43.511"></status>
</kw>
<msg level="INFO" timestamp="20170419 22:18:43.511">${host_state} = Off</msg>
<status starttime="20170419 22:18:43.256" status="PASS" endtime="20170419 22:18:43.511"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170419 22:18:43.512">Running != Off</msg>
<status starttime="20170419 22:18:43.511" status="FAIL" endtime="20170419 22:18:43.512"></status>
</kw>
<status starttime="20170419 22:18:43.255" status="FAIL" endtime="20170419 22:18:43.512"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:18:53.516">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170419 22:18:53.515" status="PASS" endtime="20170419 22:18:53.516"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:18:53.517">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170419 22:18:53.516" status="PASS" endtime="20170419 22:18:53.517"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:18:53.517">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170419 22:18:53.517" status="PASS" endtime="20170419 22:18:53.517"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:18:53.518">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170419 22:18:53.518" status="PASS" endtime="20170419 22:18:53.518"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:18:53.761">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170419 22:18:53.519" status="PASS" endtime="20170419 22:18:53.761"></status>
</kw>
<msg level="INFO" timestamp="20170419 22:18:53.761">${status} = PASS</msg>
<msg level="INFO" timestamp="20170419 22:18:53.761">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 22:18:53.518" status="PASS" endtime="20170419 22:18:53.761"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:18:53.762">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 22:18:53.761" status="PASS" endtime="20170419 22:18:53.762"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:18:53.763">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 22:18:53.762" status="PASS" endtime="20170419 22:18:53.763"></status>
</kw>
<status starttime="20170419 22:18:53.514" status="PASS" endtime="20170419 22:18:53.763"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:18:53.764">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170419 22:18:53.763" status="PASS" endtime="20170419 22:18:53.764"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:18:53.767">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170419 22:18:53.766" status="PASS" endtime="20170419 22:18:53.767"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:18:53.768">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170419 22:18:53.768" status="PASS" endtime="20170419 22:18:53.768"></status>
</kw>
<status starttime="20170419 22:18:53.767" status="PASS" endtime="20170419 22:18:53.768"></status>
</kw>
<status starttime="20170419 22:18:53.765" status="PASS" endtime="20170419 22:18:53.768"></status>
</kw>
<status starttime="20170419 22:18:53.764" status="PASS" endtime="20170419 22:18:53.768"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:18:53.831">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170419 22:18:53.832">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 22:18:53.769" status="PASS" endtime="20170419 22:18:53.832"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:18:53.833">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170419 22:18:53.833" status="PASS" endtime="20170419 22:18:53.833"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:18:53.834">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170419 22:18:53.834" status="PASS" endtime="20170419 22:18:53.834"></status>
</kw>
<status starttime="20170419 22:18:53.833" status="PASS" endtime="20170419 22:18:53.834"></status>
</kw>
<status starttime="20170419 22:18:53.832" status="PASS" endtime="20170419 22:18:53.835"></status>
</kw>
<status starttime="20170419 22:18:53.832" status="PASS" endtime="20170419 22:18:53.835"></status>
</kw>
<msg level="INFO" timestamp="20170419 22:18:53.835">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 22:18:53.514" status="PASS" endtime="20170419 22:18:53.835"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:18:53.835">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 22:18:53.835" status="PASS" endtime="20170419 22:18:53.836"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:18:53.836">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170419 22:18:53.836">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170419 22:18:53.836">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170419 22:18:53.836" status="PASS" endtime="20170419 22:18:53.836"></status>
</kw>
<msg level="INFO" timestamp="20170419 22:18:53.836">${state} = xyz.openbmc_project.State.Host.HostState.Off</msg>
<status starttime="20170419 22:18:53.513" status="PASS" endtime="20170419 22:18:53.837"></status>
</kw>
<msg level="INFO" timestamp="20170419 22:18:53.837">${host_state} = Off</msg>
<status starttime="20170419 22:18:53.513" status="PASS" endtime="20170419 22:18:53.837"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170419 22:18:53.837">Running != Off</msg>
<status starttime="20170419 22:18:53.837" status="FAIL" endtime="20170419 22:18:53.837"></status>
</kw>
<status starttime="20170419 22:18:53.512" status="FAIL" endtime="20170419 22:18:53.838"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:19:03.841">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170419 22:19:03.841" status="PASS" endtime="20170419 22:19:03.875"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:19:03.876">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170419 22:19:03.876" status="PASS" endtime="20170419 22:19:03.876"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:19:03.877">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170419 22:19:03.877" status="PASS" endtime="20170419 22:19:03.877"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:19:03.878">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170419 22:19:03.878" status="PASS" endtime="20170419 22:19:03.878"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:19:04.064">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170419 22:19:03.879" status="PASS" endtime="20170419 22:19:04.064"></status>
</kw>
<msg level="INFO" timestamp="20170419 22:19:04.064">${status} = PASS</msg>
<msg level="INFO" timestamp="20170419 22:19:04.064">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 22:19:03.878" status="PASS" endtime="20170419 22:19:04.064"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:19:04.065">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 22:19:04.065" status="PASS" endtime="20170419 22:19:04.065"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:19:04.066">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 22:19:04.065" status="PASS" endtime="20170419 22:19:04.066"></status>
</kw>
<status starttime="20170419 22:19:03.840" status="PASS" endtime="20170419 22:19:04.066"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:19:04.067">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170419 22:19:04.066" status="PASS" endtime="20170419 22:19:04.067"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:19:04.069">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170419 22:19:04.068" status="PASS" endtime="20170419 22:19:04.069"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:19:04.070">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170419 22:19:04.069" status="PASS" endtime="20170419 22:19:04.070"></status>
</kw>
<status starttime="20170419 22:19:04.069" status="PASS" endtime="20170419 22:19:04.070"></status>
</kw>
<status starttime="20170419 22:19:04.068" status="PASS" endtime="20170419 22:19:04.070"></status>
</kw>
<status starttime="20170419 22:19:04.067" status="PASS" endtime="20170419 22:19:04.070"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:19:04.134">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170419 22:19:04.135">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 22:19:04.070" status="PASS" endtime="20170419 22:19:04.135"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:19:04.137">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170419 22:19:04.136" status="PASS" endtime="20170419 22:19:04.137"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:19:04.137">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170419 22:19:04.137" status="PASS" endtime="20170419 22:19:04.137"></status>
</kw>
<status starttime="20170419 22:19:04.137" status="PASS" endtime="20170419 22:19:04.138"></status>
</kw>
<status starttime="20170419 22:19:04.135" status="PASS" endtime="20170419 22:19:04.138"></status>
</kw>
<status starttime="20170419 22:19:04.135" status="PASS" endtime="20170419 22:19:04.138"></status>
</kw>
<msg level="INFO" timestamp="20170419 22:19:04.138">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 22:19:03.840" status="PASS" endtime="20170419 22:19:04.138"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:19:04.139">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 22:19:04.138" status="PASS" endtime="20170419 22:19:04.139"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:19:04.139">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170419 22:19:04.139">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170419 22:19:04.139">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170419 22:19:04.139" status="PASS" endtime="20170419 22:19:04.139"></status>
</kw>
<msg level="INFO" timestamp="20170419 22:19:04.140">${state} = xyz.openbmc_project.State.Host.HostState.Off</msg>
<status starttime="20170419 22:19:03.839" status="PASS" endtime="20170419 22:19:04.140"></status>
</kw>
<msg level="INFO" timestamp="20170419 22:19:04.140">${host_state} = Off</msg>
<status starttime="20170419 22:19:03.839" status="PASS" endtime="20170419 22:19:04.140"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170419 22:19:04.141">Running != Off</msg>
<status starttime="20170419 22:19:04.140" status="FAIL" endtime="20170419 22:19:04.141"></status>
</kw>
<status starttime="20170419 22:19:03.838" status="FAIL" endtime="20170419 22:19:04.141"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:19:14.145">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170419 22:19:14.144" status="PASS" endtime="20170419 22:19:14.145"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:19:14.146">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170419 22:19:14.145" status="PASS" endtime="20170419 22:19:14.146"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:19:14.146">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170419 22:19:14.146" status="PASS" endtime="20170419 22:19:14.146"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:19:14.147">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170419 22:19:14.146" status="PASS" endtime="20170419 22:19:14.147"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:19:14.328">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170419 22:19:14.148" status="PASS" endtime="20170419 22:19:14.328"></status>
</kw>
<msg level="INFO" timestamp="20170419 22:19:14.328">${status} = PASS</msg>
<msg level="INFO" timestamp="20170419 22:19:14.328">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 22:19:14.147" status="PASS" endtime="20170419 22:19:14.328"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:19:14.329">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 22:19:14.328" status="PASS" endtime="20170419 22:19:14.329"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:19:14.329">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 22:19:14.329" status="PASS" endtime="20170419 22:19:14.329"></status>
</kw>
<status starttime="20170419 22:19:14.144" status="PASS" endtime="20170419 22:19:14.329"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:19:14.330">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170419 22:19:14.330" status="PASS" endtime="20170419 22:19:14.330"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:19:14.332">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170419 22:19:14.332" status="PASS" endtime="20170419 22:19:14.332"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:19:14.333">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170419 22:19:14.333" status="PASS" endtime="20170419 22:19:14.333"></status>
</kw>
<status starttime="20170419 22:19:14.333" status="PASS" endtime="20170419 22:19:14.334"></status>
</kw>
<status starttime="20170419 22:19:14.331" status="PASS" endtime="20170419 22:19:14.334"></status>
</kw>
<status starttime="20170419 22:19:14.330" status="PASS" endtime="20170419 22:19:14.334"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:19:14.399">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170419 22:19:14.399">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 22:19:14.334" status="PASS" endtime="20170419 22:19:14.399"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:19:14.400">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170419 22:19:14.400" status="PASS" endtime="20170419 22:19:14.401"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:19:14.401">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170419 22:19:14.401" status="PASS" endtime="20170419 22:19:14.401"></status>
</kw>
<status starttime="20170419 22:19:14.401" status="PASS" endtime="20170419 22:19:14.402"></status>
</kw>
<status starttime="20170419 22:19:14.399" status="PASS" endtime="20170419 22:19:14.402"></status>
</kw>
<status starttime="20170419 22:19:14.399" status="PASS" endtime="20170419 22:19:14.402"></status>
</kw>
<msg level="INFO" timestamp="20170419 22:19:14.402">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 22:19:14.143" status="PASS" endtime="20170419 22:19:14.402"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:19:14.403">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 22:19:14.402" status="PASS" endtime="20170419 22:19:14.403"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:19:14.403">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170419 22:19:14.403">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170419 22:19:14.403">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170419 22:19:14.403" status="PASS" endtime="20170419 22:19:14.403"></status>
</kw>
<msg level="INFO" timestamp="20170419 22:19:14.404">${state} = xyz.openbmc_project.State.Host.HostState.Off</msg>
<status starttime="20170419 22:19:14.142" status="PASS" endtime="20170419 22:19:14.404"></status>
</kw>
<msg level="INFO" timestamp="20170419 22:19:14.404">${host_state} = Off</msg>
<status starttime="20170419 22:19:14.142" status="PASS" endtime="20170419 22:19:14.404"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170419 22:19:14.405">Running != Off</msg>
<status starttime="20170419 22:19:14.404" status="FAIL" endtime="20170419 22:19:14.405"></status>
</kw>
<status starttime="20170419 22:19:14.141" status="FAIL" endtime="20170419 22:19:14.405"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:19:24.409">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170419 22:19:24.409" status="PASS" endtime="20170419 22:19:24.410"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:19:24.410">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170419 22:19:24.410" status="PASS" endtime="20170419 22:19:24.411"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:19:24.411">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170419 22:19:24.411" status="PASS" endtime="20170419 22:19:24.411"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:19:24.413">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170419 22:19:24.412" status="PASS" endtime="20170419 22:19:24.413"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:19:24.592">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170419 22:19:24.414" status="PASS" endtime="20170419 22:19:24.593"></status>
</kw>
<msg level="INFO" timestamp="20170419 22:19:24.593">${status} = PASS</msg>
<msg level="INFO" timestamp="20170419 22:19:24.593">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 22:19:24.413" status="PASS" endtime="20170419 22:19:24.593"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:19:24.593">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 22:19:24.593" status="PASS" endtime="20170419 22:19:24.594"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:19:24.594">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 22:19:24.594" status="PASS" endtime="20170419 22:19:24.594"></status>
</kw>
<status starttime="20170419 22:19:24.408" status="PASS" endtime="20170419 22:19:24.594"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:19:24.595">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170419 22:19:24.595" status="PASS" endtime="20170419 22:19:24.595"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:19:24.597">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170419 22:19:24.596" status="PASS" endtime="20170419 22:19:24.597"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:19:24.598">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170419 22:19:24.598" status="PASS" endtime="20170419 22:19:24.598"></status>
</kw>
<status starttime="20170419 22:19:24.597" status="PASS" endtime="20170419 22:19:24.598"></status>
</kw>
<status starttime="20170419 22:19:24.596" status="PASS" endtime="20170419 22:19:24.598"></status>
</kw>
<status starttime="20170419 22:19:24.595" status="PASS" endtime="20170419 22:19:24.598"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:19:24.669">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170419 22:19:24.669">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 22:19:24.599" status="PASS" endtime="20170419 22:19:24.669"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:19:24.670">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170419 22:19:24.670" status="PASS" endtime="20170419 22:19:24.670"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:19:24.671">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170419 22:19:24.671" status="PASS" endtime="20170419 22:19:24.671"></status>
</kw>
<status starttime="20170419 22:19:24.671" status="PASS" endtime="20170419 22:19:24.672"></status>
</kw>
<status starttime="20170419 22:19:24.669" status="PASS" endtime="20170419 22:19:24.672"></status>
</kw>
<status starttime="20170419 22:19:24.669" status="PASS" endtime="20170419 22:19:24.672"></status>
</kw>
<msg level="INFO" timestamp="20170419 22:19:24.672">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 22:19:24.407" status="PASS" endtime="20170419 22:19:24.672"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:19:24.673">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 22:19:24.672" status="PASS" endtime="20170419 22:19:24.673"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:19:24.673">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170419 22:19:24.673">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170419 22:19:24.673">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170419 22:19:24.673" status="PASS" endtime="20170419 22:19:24.673"></status>
</kw>
<msg level="INFO" timestamp="20170419 22:19:24.674">${state} = xyz.openbmc_project.State.Host.HostState.Off</msg>
<status starttime="20170419 22:19:24.406" status="PASS" endtime="20170419 22:19:24.674"></status>
</kw>
<msg level="INFO" timestamp="20170419 22:19:24.674">${host_state} = Off</msg>
<status starttime="20170419 22:19:24.406" status="PASS" endtime="20170419 22:19:24.674"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170419 22:19:24.675">Running != Off</msg>
<status starttime="20170419 22:19:24.674" status="FAIL" endtime="20170419 22:19:24.675"></status>
</kw>
<status starttime="20170419 22:19:24.405" status="FAIL" endtime="20170419 22:19:24.675"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:19:34.679">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170419 22:19:34.679" status="PASS" endtime="20170419 22:19:34.680"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:19:34.680">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170419 22:19:34.680" status="PASS" endtime="20170419 22:19:34.680"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:19:34.681">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170419 22:19:34.680" status="PASS" endtime="20170419 22:19:34.681"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:19:34.681">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170419 22:19:34.681" status="PASS" endtime="20170419 22:19:34.681"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:19:34.860">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170419 22:19:34.682" status="PASS" endtime="20170419 22:19:34.860"></status>
</kw>
<msg level="INFO" timestamp="20170419 22:19:34.860">${status} = PASS</msg>
<msg level="INFO" timestamp="20170419 22:19:34.860">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 22:19:34.682" status="PASS" endtime="20170419 22:19:34.860"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:19:34.861">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 22:19:34.861" status="PASS" endtime="20170419 22:19:34.861"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:19:34.862">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 22:19:34.861" status="PASS" endtime="20170419 22:19:34.862"></status>
</kw>
<status starttime="20170419 22:19:34.678" status="PASS" endtime="20170419 22:19:34.862"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:19:34.862">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170419 22:19:34.862" status="PASS" endtime="20170419 22:19:34.862"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:19:34.864">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170419 22:19:34.864" status="PASS" endtime="20170419 22:19:34.864"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:19:34.865">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170419 22:19:34.865" status="PASS" endtime="20170419 22:19:34.865"></status>
</kw>
<status starttime="20170419 22:19:34.865" status="PASS" endtime="20170419 22:19:34.866"></status>
</kw>
<status starttime="20170419 22:19:34.863" status="PASS" endtime="20170419 22:19:34.866"></status>
</kw>
<status starttime="20170419 22:19:34.863" status="PASS" endtime="20170419 22:19:34.866"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:19:34.929">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170419 22:19:34.930">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 22:19:34.866" status="PASS" endtime="20170419 22:19:34.930"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:19:34.931">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170419 22:19:34.931" status="PASS" endtime="20170419 22:19:34.931"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:19:34.932">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170419 22:19:34.932" status="PASS" endtime="20170419 22:19:34.932"></status>
</kw>
<status starttime="20170419 22:19:34.932" status="PASS" endtime="20170419 22:19:34.933"></status>
</kw>
<status starttime="20170419 22:19:34.930" status="PASS" endtime="20170419 22:19:34.933"></status>
</kw>
<status starttime="20170419 22:19:34.930" status="PASS" endtime="20170419 22:19:34.933"></status>
</kw>
<msg level="INFO" timestamp="20170419 22:19:34.933">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 22:19:34.677" status="PASS" endtime="20170419 22:19:34.933"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:19:34.934">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 22:19:34.933" status="PASS" endtime="20170419 22:19:34.934"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:19:34.934">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170419 22:19:34.934">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170419 22:19:34.934">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170419 22:19:34.934" status="PASS" endtime="20170419 22:19:34.934"></status>
</kw>
<msg level="INFO" timestamp="20170419 22:19:34.935">${state} = xyz.openbmc_project.State.Host.HostState.Off</msg>
<status starttime="20170419 22:19:34.676" status="PASS" endtime="20170419 22:19:34.935"></status>
</kw>
<msg level="INFO" timestamp="20170419 22:19:34.935">${host_state} = Off</msg>
<status starttime="20170419 22:19:34.676" status="PASS" endtime="20170419 22:19:34.935"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170419 22:19:34.936">Running != Off</msg>
<status starttime="20170419 22:19:34.935" status="FAIL" endtime="20170419 22:19:34.936"></status>
</kw>
<status starttime="20170419 22:19:34.675" status="FAIL" endtime="20170419 22:19:34.936"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:19:44.940">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170419 22:19:44.939" status="PASS" endtime="20170419 22:19:44.940"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:19:44.941">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170419 22:19:44.940" status="PASS" endtime="20170419 22:19:44.941"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:19:44.941">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170419 22:19:44.941" status="PASS" endtime="20170419 22:19:44.941"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:19:44.942">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170419 22:19:44.942" status="PASS" endtime="20170419 22:19:44.942"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:19:45.122">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170419 22:19:44.943" status="PASS" endtime="20170419 22:19:45.122"></status>
</kw>
<msg level="INFO" timestamp="20170419 22:19:45.122">${status} = PASS</msg>
<msg level="INFO" timestamp="20170419 22:19:45.122">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 22:19:44.942" status="PASS" endtime="20170419 22:19:45.122"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:19:45.123">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 22:19:45.122" status="PASS" endtime="20170419 22:19:45.123"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:19:45.123">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 22:19:45.123" status="PASS" endtime="20170419 22:19:45.123"></status>
</kw>
<status starttime="20170419 22:19:44.939" status="PASS" endtime="20170419 22:19:45.124"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:19:45.124">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170419 22:19:45.124" status="PASS" endtime="20170419 22:19:45.124"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:19:45.126">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170419 22:19:45.126" status="PASS" endtime="20170419 22:19:45.126"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:19:45.127">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170419 22:19:45.127" status="PASS" endtime="20170419 22:19:45.127"></status>
</kw>
<status starttime="20170419 22:19:45.127" status="PASS" endtime="20170419 22:19:45.128"></status>
</kw>
<status starttime="20170419 22:19:45.125" status="PASS" endtime="20170419 22:19:45.128"></status>
</kw>
<status starttime="20170419 22:19:45.124" status="PASS" endtime="20170419 22:19:45.128"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:19:45.197">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170419 22:19:45.197">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 22:19:45.128" status="PASS" endtime="20170419 22:19:45.198"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:19:45.199">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170419 22:19:45.199" status="PASS" endtime="20170419 22:19:45.199"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:19:45.200">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170419 22:19:45.200" status="PASS" endtime="20170419 22:19:45.200"></status>
</kw>
<status starttime="20170419 22:19:45.199" status="PASS" endtime="20170419 22:19:45.200"></status>
</kw>
<status starttime="20170419 22:19:45.198" status="PASS" endtime="20170419 22:19:45.200"></status>
</kw>
<status starttime="20170419 22:19:45.198" status="PASS" endtime="20170419 22:19:45.200"></status>
</kw>
<msg level="INFO" timestamp="20170419 22:19:45.201">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 22:19:44.938" status="PASS" endtime="20170419 22:19:45.201"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:19:45.201">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 22:19:45.201" status="PASS" endtime="20170419 22:19:45.201"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:19:45.202">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170419 22:19:45.202">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170419 22:19:45.202">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170419 22:19:45.202" status="PASS" endtime="20170419 22:19:45.202"></status>
</kw>
<msg level="INFO" timestamp="20170419 22:19:45.202">${state} = xyz.openbmc_project.State.Host.HostState.Off</msg>
<status starttime="20170419 22:19:44.937" status="PASS" endtime="20170419 22:19:45.202"></status>
</kw>
<msg level="INFO" timestamp="20170419 22:19:45.203">${host_state} = Off</msg>
<status starttime="20170419 22:19:44.937" status="PASS" endtime="20170419 22:19:45.203"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170419 22:19:45.203">Running != Off</msg>
<status starttime="20170419 22:19:45.203" status="FAIL" endtime="20170419 22:19:45.203"></status>
</kw>
<status starttime="20170419 22:19:44.936" status="FAIL" endtime="20170419 22:19:45.204"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:19:55.208">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170419 22:19:55.207" status="PASS" endtime="20170419 22:19:55.208"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:19:55.209">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170419 22:19:55.208" status="PASS" endtime="20170419 22:19:55.209"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:19:55.209">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170419 22:19:55.209" status="PASS" endtime="20170419 22:19:55.209"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:19:55.210">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170419 22:19:55.210" status="PASS" endtime="20170419 22:19:55.210"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:19:55.391">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170419 22:19:55.211" status="PASS" endtime="20170419 22:19:55.391"></status>
</kw>
<msg level="INFO" timestamp="20170419 22:19:55.392">${status} = PASS</msg>
<msg level="INFO" timestamp="20170419 22:19:55.392">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 22:19:55.210" status="PASS" endtime="20170419 22:19:55.392"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:19:55.392">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 22:19:55.392" status="PASS" endtime="20170419 22:19:55.392"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:19:55.393">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 22:19:55.393" status="PASS" endtime="20170419 22:19:55.393"></status>
</kw>
<status starttime="20170419 22:19:55.206" status="PASS" endtime="20170419 22:19:55.393"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:19:55.394">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170419 22:19:55.394" status="PASS" endtime="20170419 22:19:55.394"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:19:55.396">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170419 22:19:55.395" status="PASS" endtime="20170419 22:19:55.396"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:19:55.399">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170419 22:19:55.399" status="PASS" endtime="20170419 22:19:55.399"></status>
</kw>
<status starttime="20170419 22:19:55.396" status="PASS" endtime="20170419 22:19:55.399"></status>
</kw>
<status starttime="20170419 22:19:55.395" status="PASS" endtime="20170419 22:19:55.399"></status>
</kw>
<status starttime="20170419 22:19:55.394" status="PASS" endtime="20170419 22:19:55.399"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:19:55.594">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170419 22:19:55.594">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 22:19:55.400" status="PASS" endtime="20170419 22:19:55.594"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:19:55.596">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170419 22:19:55.596" status="PASS" endtime="20170419 22:19:55.596"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:19:55.597">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170419 22:19:55.597" status="PASS" endtime="20170419 22:19:55.598"></status>
</kw>
<status starttime="20170419 22:19:55.596" status="PASS" endtime="20170419 22:19:55.598"></status>
</kw>
<status starttime="20170419 22:19:55.595" status="PASS" endtime="20170419 22:19:55.598"></status>
</kw>
<status starttime="20170419 22:19:55.595" status="PASS" endtime="20170419 22:19:55.598"></status>
</kw>
<msg level="INFO" timestamp="20170419 22:19:55.598">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 22:19:55.206" status="PASS" endtime="20170419 22:19:55.598"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:19:55.599">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 22:19:55.599" status="PASS" endtime="20170419 22:19:55.599"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:19:55.600">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170419 22:19:55.600">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170419 22:19:55.600">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170419 22:19:55.599" status="PASS" endtime="20170419 22:19:55.600"></status>
</kw>
<msg level="INFO" timestamp="20170419 22:19:55.600">${state} = xyz.openbmc_project.State.Host.HostState.Off</msg>
<status starttime="20170419 22:19:55.205" status="PASS" endtime="20170419 22:19:55.600"></status>
</kw>
<msg level="INFO" timestamp="20170419 22:19:55.600">${host_state} = Off</msg>
<status starttime="20170419 22:19:55.205" status="PASS" endtime="20170419 22:19:55.600"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170419 22:19:55.601">Running != Off</msg>
<status starttime="20170419 22:19:55.601" status="FAIL" endtime="20170419 22:19:55.601"></status>
</kw>
<status starttime="20170419 22:19:55.204" status="FAIL" endtime="20170419 22:19:55.601"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:20:05.605">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170419 22:20:05.605" status="PASS" endtime="20170419 22:20:05.606"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:20:05.606">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170419 22:20:05.606" status="PASS" endtime="20170419 22:20:05.606"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:20:05.607">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170419 22:20:05.606" status="PASS" endtime="20170419 22:20:05.607"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:20:05.607">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170419 22:20:05.607" status="PASS" endtime="20170419 22:20:05.608"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:20:05.783">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170419 22:20:05.608" status="PASS" endtime="20170419 22:20:05.783"></status>
</kw>
<msg level="INFO" timestamp="20170419 22:20:05.783">${status} = PASS</msg>
<msg level="INFO" timestamp="20170419 22:20:05.783">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 22:20:05.608" status="PASS" endtime="20170419 22:20:05.783"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:20:05.784">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 22:20:05.783" status="PASS" endtime="20170419 22:20:05.784"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:20:05.784">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 22:20:05.784" status="PASS" endtime="20170419 22:20:05.784"></status>
</kw>
<status starttime="20170419 22:20:05.604" status="PASS" endtime="20170419 22:20:05.785"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:20:05.785">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170419 22:20:05.785" status="PASS" endtime="20170419 22:20:05.785"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:20:05.788">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170419 22:20:05.787" status="PASS" endtime="20170419 22:20:05.788"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:20:05.789">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170419 22:20:05.788" status="PASS" endtime="20170419 22:20:05.789"></status>
</kw>
<status starttime="20170419 22:20:05.788" status="PASS" endtime="20170419 22:20:05.789"></status>
</kw>
<status starttime="20170419 22:20:05.786" status="PASS" endtime="20170419 22:20:05.789"></status>
</kw>
<status starttime="20170419 22:20:05.785" status="PASS" endtime="20170419 22:20:05.789"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:20:05.852">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170419 22:20:05.852">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 22:20:05.789" status="PASS" endtime="20170419 22:20:05.852"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:20:05.854">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170419 22:20:05.853" status="PASS" endtime="20170419 22:20:05.854"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:20:05.855">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170419 22:20:05.854" status="PASS" endtime="20170419 22:20:05.855"></status>
</kw>
<status starttime="20170419 22:20:05.854" status="PASS" endtime="20170419 22:20:05.855"></status>
</kw>
<status starttime="20170419 22:20:05.853" status="PASS" endtime="20170419 22:20:05.855"></status>
</kw>
<status starttime="20170419 22:20:05.852" status="PASS" endtime="20170419 22:20:05.855"></status>
</kw>
<msg level="INFO" timestamp="20170419 22:20:05.855">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 22:20:05.604" status="PASS" endtime="20170419 22:20:05.855"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:20:05.856">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 22:20:05.856" status="PASS" endtime="20170419 22:20:05.856"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:20:05.857">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170419 22:20:05.857">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170419 22:20:05.857">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170419 22:20:05.856" status="PASS" endtime="20170419 22:20:05.857"></status>
</kw>
<msg level="INFO" timestamp="20170419 22:20:05.857">${state} = xyz.openbmc_project.State.Host.HostState.Off</msg>
<status starttime="20170419 22:20:05.603" status="PASS" endtime="20170419 22:20:05.857"></status>
</kw>
<msg level="INFO" timestamp="20170419 22:20:05.857">${host_state} = Off</msg>
<status starttime="20170419 22:20:05.603" status="PASS" endtime="20170419 22:20:05.857"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170419 22:20:05.858">Running != Off</msg>
<status starttime="20170419 22:20:05.858" status="FAIL" endtime="20170419 22:20:05.858"></status>
</kw>
<status starttime="20170419 22:20:05.602" status="FAIL" endtime="20170419 22:20:05.858"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:20:15.862">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170419 22:20:15.862" status="PASS" endtime="20170419 22:20:15.862"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:20:15.863">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170419 22:20:15.863" status="PASS" endtime="20170419 22:20:15.863"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:20:15.864">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170419 22:20:15.863" status="PASS" endtime="20170419 22:20:15.864"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:20:15.864">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170419 22:20:15.864" status="PASS" endtime="20170419 22:20:15.864"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:20:16.045">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170419 22:20:15.865" status="PASS" endtime="20170419 22:20:16.045"></status>
</kw>
<msg level="INFO" timestamp="20170419 22:20:16.045">${status} = PASS</msg>
<msg level="INFO" timestamp="20170419 22:20:16.045">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 22:20:15.865" status="PASS" endtime="20170419 22:20:16.045"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:20:16.046">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 22:20:16.046" status="PASS" endtime="20170419 22:20:16.046"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:20:16.047">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 22:20:16.046" status="PASS" endtime="20170419 22:20:16.047"></status>
</kw>
<status starttime="20170419 22:20:15.861" status="PASS" endtime="20170419 22:20:16.047"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:20:16.048">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170419 22:20:16.047" status="PASS" endtime="20170419 22:20:16.048"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:20:16.050">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170419 22:20:16.049" status="PASS" endtime="20170419 22:20:16.050"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:20:16.051">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170419 22:20:16.051" status="PASS" endtime="20170419 22:20:16.051"></status>
</kw>
<status starttime="20170419 22:20:16.050" status="PASS" endtime="20170419 22:20:16.051"></status>
</kw>
<status starttime="20170419 22:20:16.048" status="PASS" endtime="20170419 22:20:16.051"></status>
</kw>
<status starttime="20170419 22:20:16.048" status="PASS" endtime="20170419 22:20:16.051"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:20:16.115">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170419 22:20:16.115">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 22:20:16.051" status="PASS" endtime="20170419 22:20:16.115"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:20:16.117">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170419 22:20:16.116" status="PASS" endtime="20170419 22:20:16.117"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:20:16.118">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170419 22:20:16.117" status="PASS" endtime="20170419 22:20:16.118"></status>
</kw>
<status starttime="20170419 22:20:16.117" status="PASS" endtime="20170419 22:20:16.118"></status>
</kw>
<status starttime="20170419 22:20:16.116" status="PASS" endtime="20170419 22:20:16.118"></status>
</kw>
<status starttime="20170419 22:20:16.115" status="PASS" endtime="20170419 22:20:16.118"></status>
</kw>
<msg level="INFO" timestamp="20170419 22:20:16.118">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 22:20:15.860" status="PASS" endtime="20170419 22:20:16.118"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:20:16.119">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 22:20:16.118" status="PASS" endtime="20170419 22:20:16.119"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:20:16.119">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170419 22:20:16.119">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170419 22:20:16.120">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170419 22:20:16.119" status="PASS" endtime="20170419 22:20:16.120"></status>
</kw>
<msg level="INFO" timestamp="20170419 22:20:16.120">${state} = xyz.openbmc_project.State.Host.HostState.Off</msg>
<status starttime="20170419 22:20:15.860" status="PASS" endtime="20170419 22:20:16.120"></status>
</kw>
<msg level="INFO" timestamp="20170419 22:20:16.120">${host_state} = Off</msg>
<status starttime="20170419 22:20:15.859" status="PASS" endtime="20170419 22:20:16.120"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170419 22:20:16.121">Running != Off</msg>
<status starttime="20170419 22:20:16.120" status="FAIL" endtime="20170419 22:20:16.121"></status>
</kw>
<status starttime="20170419 22:20:15.859" status="FAIL" endtime="20170419 22:20:16.121"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:20:26.125">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170419 22:20:26.125" status="PASS" endtime="20170419 22:20:26.125"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:20:26.126">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170419 22:20:26.126" status="PASS" endtime="20170419 22:20:26.126"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:20:26.127">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170419 22:20:26.126" status="PASS" endtime="20170419 22:20:26.127"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:20:26.127">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170419 22:20:26.127" status="PASS" endtime="20170419 22:20:26.127"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:20:26.308">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170419 22:20:26.128" status="PASS" endtime="20170419 22:20:26.308"></status>
</kw>
<msg level="INFO" timestamp="20170419 22:20:26.308">${status} = PASS</msg>
<msg level="INFO" timestamp="20170419 22:20:26.308">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 22:20:26.128" status="PASS" endtime="20170419 22:20:26.308"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:20:26.309">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 22:20:26.308" status="PASS" endtime="20170419 22:20:26.309"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:20:26.309">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 22:20:26.309" status="PASS" endtime="20170419 22:20:26.309"></status>
</kw>
<status starttime="20170419 22:20:26.124" status="PASS" endtime="20170419 22:20:26.309"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:20:26.310">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170419 22:20:26.310" status="PASS" endtime="20170419 22:20:26.310"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:20:26.312">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170419 22:20:26.311" status="PASS" endtime="20170419 22:20:26.312"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:20:26.313">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170419 22:20:26.313" status="PASS" endtime="20170419 22:20:26.313"></status>
</kw>
<status starttime="20170419 22:20:26.312" status="PASS" endtime="20170419 22:20:26.313"></status>
</kw>
<status starttime="20170419 22:20:26.311" status="PASS" endtime="20170419 22:20:26.314"></status>
</kw>
<status starttime="20170419 22:20:26.310" status="PASS" endtime="20170419 22:20:26.314"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:20:26.377">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170419 22:20:26.377">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 22:20:26.314" status="PASS" endtime="20170419 22:20:26.377"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:20:26.381">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170419 22:20:26.380" status="PASS" endtime="20170419 22:20:26.381"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:20:26.382">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170419 22:20:26.381" status="PASS" endtime="20170419 22:20:26.382"></status>
</kw>
<status starttime="20170419 22:20:26.381" status="PASS" endtime="20170419 22:20:26.382"></status>
</kw>
<status starttime="20170419 22:20:26.378" status="PASS" endtime="20170419 22:20:26.382"></status>
</kw>
<status starttime="20170419 22:20:26.377" status="PASS" endtime="20170419 22:20:26.382"></status>
</kw>
<msg level="INFO" timestamp="20170419 22:20:26.382">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 22:20:26.123" status="PASS" endtime="20170419 22:20:26.382"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:20:26.383">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 22:20:26.383" status="PASS" endtime="20170419 22:20:26.383"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:20:26.383">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170419 22:20:26.383">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170419 22:20:26.384">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170419 22:20:26.383" status="PASS" endtime="20170419 22:20:26.384"></status>
</kw>
<msg level="INFO" timestamp="20170419 22:20:26.384">${state} = xyz.openbmc_project.State.Host.HostState.Off</msg>
<status starttime="20170419 22:20:26.123" status="PASS" endtime="20170419 22:20:26.384"></status>
</kw>
<msg level="INFO" timestamp="20170419 22:20:26.384">${host_state} = Off</msg>
<status starttime="20170419 22:20:26.122" status="PASS" endtime="20170419 22:20:26.384"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170419 22:20:26.385">Running != Off</msg>
<status starttime="20170419 22:20:26.384" status="FAIL" endtime="20170419 22:20:26.385"></status>
</kw>
<status starttime="20170419 22:20:26.122" status="FAIL" endtime="20170419 22:20:26.385"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:20:36.389">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170419 22:20:36.389" status="PASS" endtime="20170419 22:20:36.389"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:20:36.390">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170419 22:20:36.390" status="PASS" endtime="20170419 22:20:36.390"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:20:36.390">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170419 22:20:36.390" status="PASS" endtime="20170419 22:20:36.391"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:20:36.391">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170419 22:20:36.391" status="PASS" endtime="20170419 22:20:36.391"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:20:36.570">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170419 22:20:36.392" status="PASS" endtime="20170419 22:20:36.571"></status>
</kw>
<msg level="INFO" timestamp="20170419 22:20:36.571">${status} = PASS</msg>
<msg level="INFO" timestamp="20170419 22:20:36.571">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 22:20:36.391" status="PASS" endtime="20170419 22:20:36.571"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:20:36.571">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 22:20:36.571" status="PASS" endtime="20170419 22:20:36.572"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:20:36.572">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 22:20:36.572" status="PASS" endtime="20170419 22:20:36.572"></status>
</kw>
<status starttime="20170419 22:20:36.388" status="PASS" endtime="20170419 22:20:36.572"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:20:36.573">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170419 22:20:36.573" status="PASS" endtime="20170419 22:20:36.573"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:20:36.575">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170419 22:20:36.575" status="PASS" endtime="20170419 22:20:36.575"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:20:36.576">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170419 22:20:36.576" status="PASS" endtime="20170419 22:20:36.576"></status>
</kw>
<status starttime="20170419 22:20:36.576" status="PASS" endtime="20170419 22:20:36.577"></status>
</kw>
<status starttime="20170419 22:20:36.574" status="PASS" endtime="20170419 22:20:36.577"></status>
</kw>
<status starttime="20170419 22:20:36.573" status="PASS" endtime="20170419 22:20:36.577"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:20:36.640">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170419 22:20:36.640">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 22:20:36.577" status="PASS" endtime="20170419 22:20:36.640"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:20:36.641">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170419 22:20:36.641" status="PASS" endtime="20170419 22:20:36.642"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:20:36.642">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170419 22:20:36.642" status="PASS" endtime="20170419 22:20:36.642"></status>
</kw>
<status starttime="20170419 22:20:36.642" status="PASS" endtime="20170419 22:20:36.643"></status>
</kw>
<status starttime="20170419 22:20:36.641" status="PASS" endtime="20170419 22:20:36.643"></status>
</kw>
<status starttime="20170419 22:20:36.640" status="PASS" endtime="20170419 22:20:36.643"></status>
</kw>
<msg level="INFO" timestamp="20170419 22:20:36.643">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 22:20:36.387" status="PASS" endtime="20170419 22:20:36.643"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:20:36.644">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 22:20:36.643" status="PASS" endtime="20170419 22:20:36.644"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:20:36.644">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170419 22:20:36.644">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170419 22:20:36.644">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170419 22:20:36.644" status="PASS" endtime="20170419 22:20:36.644"></status>
</kw>
<msg level="INFO" timestamp="20170419 22:20:36.645">${state} = xyz.openbmc_project.State.Host.HostState.Off</msg>
<status starttime="20170419 22:20:36.387" status="PASS" endtime="20170419 22:20:36.645"></status>
</kw>
<msg level="INFO" timestamp="20170419 22:20:36.645">${host_state} = Off</msg>
<status starttime="20170419 22:20:36.386" status="PASS" endtime="20170419 22:20:36.645"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170419 22:20:36.646">Running != Off</msg>
<status starttime="20170419 22:20:36.645" status="FAIL" endtime="20170419 22:20:36.646"></status>
</kw>
<status starttime="20170419 22:20:36.386" status="FAIL" endtime="20170419 22:20:36.646"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:20:46.650">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170419 22:20:46.649" status="PASS" endtime="20170419 22:20:46.650"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:20:46.651">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170419 22:20:46.650" status="PASS" endtime="20170419 22:20:46.651"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:20:46.651">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170419 22:20:46.651" status="PASS" endtime="20170419 22:20:46.651"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:20:46.652">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170419 22:20:46.651" status="PASS" endtime="20170419 22:20:46.652"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:20:46.835">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170419 22:20:46.652" status="PASS" endtime="20170419 22:20:46.835"></status>
</kw>
<msg level="INFO" timestamp="20170419 22:20:46.835">${status} = PASS</msg>
<msg level="INFO" timestamp="20170419 22:20:46.835">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 22:20:46.652" status="PASS" endtime="20170419 22:20:46.836"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:20:46.836">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 22:20:46.836" status="PASS" endtime="20170419 22:20:46.836"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:20:46.837">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 22:20:46.836" status="PASS" endtime="20170419 22:20:46.837"></status>
</kw>
<status starttime="20170419 22:20:46.649" status="PASS" endtime="20170419 22:20:46.837"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:20:46.838">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170419 22:20:46.837" status="PASS" endtime="20170419 22:20:46.838"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:20:46.840">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170419 22:20:46.839" status="PASS" endtime="20170419 22:20:46.840"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:20:46.841">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170419 22:20:46.840" status="PASS" endtime="20170419 22:20:46.841"></status>
</kw>
<status starttime="20170419 22:20:46.840" status="PASS" endtime="20170419 22:20:46.841"></status>
</kw>
<status starttime="20170419 22:20:46.838" status="PASS" endtime="20170419 22:20:46.841"></status>
</kw>
<status starttime="20170419 22:20:46.838" status="PASS" endtime="20170419 22:20:46.841"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:20:46.904">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170419 22:20:46.904">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 22:20:46.841" status="PASS" endtime="20170419 22:20:46.904"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:20:46.906">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170419 22:20:46.905" status="PASS" endtime="20170419 22:20:46.906"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:20:46.907">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170419 22:20:46.907" status="PASS" endtime="20170419 22:20:46.907"></status>
</kw>
<status starttime="20170419 22:20:46.906" status="PASS" endtime="20170419 22:20:46.907"></status>
</kw>
<status starttime="20170419 22:20:46.905" status="PASS" endtime="20170419 22:20:46.907"></status>
</kw>
<status starttime="20170419 22:20:46.904" status="PASS" endtime="20170419 22:20:46.907"></status>
</kw>
<msg level="INFO" timestamp="20170419 22:20:46.907">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 22:20:46.648" status="PASS" endtime="20170419 22:20:46.908"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:20:46.908">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 22:20:46.908" status="PASS" endtime="20170419 22:20:46.908"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:20:46.909">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170419 22:20:46.909">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170419 22:20:46.909">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170419 22:20:46.908" status="PASS" endtime="20170419 22:20:46.909"></status>
</kw>
<msg level="INFO" timestamp="20170419 22:20:46.909">${state} = xyz.openbmc_project.State.Host.HostState.Off</msg>
<status starttime="20170419 22:20:46.647" status="PASS" endtime="20170419 22:20:46.909"></status>
</kw>
<msg level="INFO" timestamp="20170419 22:20:46.909">${host_state} = Off</msg>
<status starttime="20170419 22:20:46.647" status="PASS" endtime="20170419 22:20:46.909"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170419 22:20:46.910">Running != Off</msg>
<status starttime="20170419 22:20:46.910" status="FAIL" endtime="20170419 22:20:46.910"></status>
</kw>
<status starttime="20170419 22:20:46.646" status="FAIL" endtime="20170419 22:20:46.910"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:20:56.914">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170419 22:20:56.914" status="PASS" endtime="20170419 22:20:56.915"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:20:56.915">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170419 22:20:56.915" status="PASS" endtime="20170419 22:20:56.915"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:20:56.916">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170419 22:20:56.916" status="PASS" endtime="20170419 22:20:56.916"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:20:56.917">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170419 22:20:56.916" status="PASS" endtime="20170419 22:20:56.917"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:20:57.094">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170419 22:20:56.917" status="PASS" endtime="20170419 22:20:57.094"></status>
</kw>
<msg level="INFO" timestamp="20170419 22:20:57.094">${status} = PASS</msg>
<msg level="INFO" timestamp="20170419 22:20:57.094">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 22:20:56.917" status="PASS" endtime="20170419 22:20:57.094"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:20:57.095">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 22:20:57.095" status="PASS" endtime="20170419 22:20:57.095"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:20:57.096">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 22:20:57.095" status="PASS" endtime="20170419 22:20:57.096"></status>
</kw>
<status starttime="20170419 22:20:56.913" status="PASS" endtime="20170419 22:20:57.096"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:20:57.096">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170419 22:20:57.096" status="PASS" endtime="20170419 22:20:57.097"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:20:57.099">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170419 22:20:57.098" status="PASS" endtime="20170419 22:20:57.099"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:20:57.099">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170419 22:20:57.099" status="PASS" endtime="20170419 22:20:57.100"></status>
</kw>
<status starttime="20170419 22:20:57.099" status="PASS" endtime="20170419 22:20:57.100"></status>
</kw>
<status starttime="20170419 22:20:57.097" status="PASS" endtime="20170419 22:20:57.100"></status>
</kw>
<status starttime="20170419 22:20:57.097" status="PASS" endtime="20170419 22:20:57.100"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:20:57.164">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170419 22:20:57.164">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 22:20:57.100" status="PASS" endtime="20170419 22:20:57.164"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:20:57.166">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170419 22:20:57.165" status="PASS" endtime="20170419 22:20:57.166"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:20:57.167">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170419 22:20:57.166" status="PASS" endtime="20170419 22:20:57.167"></status>
</kw>
<status starttime="20170419 22:20:57.166" status="PASS" endtime="20170419 22:20:57.167"></status>
</kw>
<status starttime="20170419 22:20:57.165" status="PASS" endtime="20170419 22:20:57.167"></status>
</kw>
<status starttime="20170419 22:20:57.164" status="PASS" endtime="20170419 22:20:57.167"></status>
</kw>
<msg level="INFO" timestamp="20170419 22:20:57.168">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 22:20:56.912" status="PASS" endtime="20170419 22:20:57.168"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:20:57.168">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 22:20:57.168" status="PASS" endtime="20170419 22:20:57.168"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:20:57.169">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170419 22:20:57.169">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170419 22:20:57.169">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170419 22:20:57.168" status="PASS" endtime="20170419 22:20:57.169"></status>
</kw>
<msg level="INFO" timestamp="20170419 22:20:57.169">${state} = xyz.openbmc_project.State.Host.HostState.Off</msg>
<status starttime="20170419 22:20:56.912" status="PASS" endtime="20170419 22:20:57.169"></status>
</kw>
<msg level="INFO" timestamp="20170419 22:20:57.170">${host_state} = Off</msg>
<status starttime="20170419 22:20:56.911" status="PASS" endtime="20170419 22:20:57.170"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170419 22:20:57.170">Running != Off</msg>
<status starttime="20170419 22:20:57.170" status="FAIL" endtime="20170419 22:20:57.170"></status>
</kw>
<status starttime="20170419 22:20:56.911" status="FAIL" endtime="20170419 22:20:57.170"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:21:07.174">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170419 22:21:07.174" status="PASS" endtime="20170419 22:21:07.175"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:21:07.175">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170419 22:21:07.175" status="PASS" endtime="20170419 22:21:07.175"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:21:07.176">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170419 22:21:07.176" status="PASS" endtime="20170419 22:21:07.176"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:21:07.177">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170419 22:21:07.176" status="PASS" endtime="20170419 22:21:07.177"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:21:07.352">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170419 22:21:07.177" status="PASS" endtime="20170419 22:21:07.352"></status>
</kw>
<msg level="INFO" timestamp="20170419 22:21:07.352">${status} = PASS</msg>
<msg level="INFO" timestamp="20170419 22:21:07.352">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 22:21:07.177" status="PASS" endtime="20170419 22:21:07.352"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:21:07.352">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 22:21:07.352" status="PASS" endtime="20170419 22:21:07.353"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:21:07.353">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 22:21:07.353" status="PASS" endtime="20170419 22:21:07.353"></status>
</kw>
<status starttime="20170419 22:21:07.173" status="PASS" endtime="20170419 22:21:07.353"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:21:07.354">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170419 22:21:07.354" status="PASS" endtime="20170419 22:21:07.354"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:21:07.357">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170419 22:21:07.356" status="PASS" endtime="20170419 22:21:07.357"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:21:07.358">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170419 22:21:07.358" status="PASS" endtime="20170419 22:21:07.358"></status>
</kw>
<status starttime="20170419 22:21:07.357" status="PASS" endtime="20170419 22:21:07.358"></status>
</kw>
<status starttime="20170419 22:21:07.355" status="PASS" endtime="20170419 22:21:07.358"></status>
</kw>
<status starttime="20170419 22:21:07.354" status="PASS" endtime="20170419 22:21:07.359"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:21:07.422">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170419 22:21:07.422">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 22:21:07.359" status="PASS" endtime="20170419 22:21:07.422"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:21:07.423">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170419 22:21:07.423" status="PASS" endtime="20170419 22:21:07.424"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:21:07.424">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170419 22:21:07.424" status="PASS" endtime="20170419 22:21:07.424"></status>
</kw>
<status starttime="20170419 22:21:07.424" status="PASS" endtime="20170419 22:21:07.425"></status>
</kw>
<status starttime="20170419 22:21:07.422" status="PASS" endtime="20170419 22:21:07.425"></status>
</kw>
<status starttime="20170419 22:21:07.422" status="PASS" endtime="20170419 22:21:07.425"></status>
</kw>
<msg level="INFO" timestamp="20170419 22:21:07.425">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 22:21:07.173" status="PASS" endtime="20170419 22:21:07.425"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:21:07.426">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 22:21:07.425" status="PASS" endtime="20170419 22:21:07.426"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:21:07.426">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170419 22:21:07.426">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170419 22:21:07.426">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170419 22:21:07.426" status="PASS" endtime="20170419 22:21:07.426"></status>
</kw>
<msg level="INFO" timestamp="20170419 22:21:07.427">${state} = xyz.openbmc_project.State.Host.HostState.Off</msg>
<status starttime="20170419 22:21:07.172" status="PASS" endtime="20170419 22:21:07.427"></status>
</kw>
<msg level="INFO" timestamp="20170419 22:21:07.427">${host_state} = Off</msg>
<status starttime="20170419 22:21:07.171" status="PASS" endtime="20170419 22:21:07.427"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170419 22:21:07.428">Running != Off</msg>
<status starttime="20170419 22:21:07.427" status="FAIL" endtime="20170419 22:21:07.428"></status>
</kw>
<status starttime="20170419 22:21:07.171" status="FAIL" endtime="20170419 22:21:07.428"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:21:17.431">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170419 22:21:17.431" status="PASS" endtime="20170419 22:21:17.432"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:21:17.432">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170419 22:21:17.432" status="PASS" endtime="20170419 22:21:17.432"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:21:17.433">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170419 22:21:17.433" status="PASS" endtime="20170419 22:21:17.433"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:21:17.434">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170419 22:21:17.433" status="PASS" endtime="20170419 22:21:17.434"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:21:17.609">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170419 22:21:17.434" status="PASS" endtime="20170419 22:21:17.609"></status>
</kw>
<msg level="INFO" timestamp="20170419 22:21:17.609">${status} = PASS</msg>
<msg level="INFO" timestamp="20170419 22:21:17.609">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 22:21:17.434" status="PASS" endtime="20170419 22:21:17.609"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:21:17.610">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 22:21:17.610" status="PASS" endtime="20170419 22:21:17.610"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:21:17.611">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 22:21:17.610" status="PASS" endtime="20170419 22:21:17.611"></status>
</kw>
<status starttime="20170419 22:21:17.431" status="PASS" endtime="20170419 22:21:17.611"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:21:17.611">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170419 22:21:17.611" status="PASS" endtime="20170419 22:21:17.611"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:21:17.613">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170419 22:21:17.613" status="PASS" endtime="20170419 22:21:17.613"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:21:17.614">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170419 22:21:17.614" status="PASS" endtime="20170419 22:21:17.614"></status>
</kw>
<status starttime="20170419 22:21:17.614" status="PASS" endtime="20170419 22:21:17.615"></status>
</kw>
<status starttime="20170419 22:21:17.612" status="PASS" endtime="20170419 22:21:17.615"></status>
</kw>
<status starttime="20170419 22:21:17.612" status="PASS" endtime="20170419 22:21:17.615"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:21:17.678">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170419 22:21:17.678">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 22:21:17.615" status="PASS" endtime="20170419 22:21:17.678"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:21:17.680">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170419 22:21:17.679" status="PASS" endtime="20170419 22:21:17.680"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:21:17.681">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170419 22:21:17.680" status="PASS" endtime="20170419 22:21:17.681"></status>
</kw>
<status starttime="20170419 22:21:17.680" status="PASS" endtime="20170419 22:21:17.681"></status>
</kw>
<status starttime="20170419 22:21:17.679" status="PASS" endtime="20170419 22:21:17.681"></status>
</kw>
<status starttime="20170419 22:21:17.678" status="PASS" endtime="20170419 22:21:17.681"></status>
</kw>
<msg level="INFO" timestamp="20170419 22:21:17.681">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 22:21:17.430" status="PASS" endtime="20170419 22:21:17.681"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:21:17.682">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 22:21:17.682" status="PASS" endtime="20170419 22:21:17.682"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:21:17.683">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170419 22:21:17.683">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170419 22:21:17.683">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170419 22:21:17.682" status="PASS" endtime="20170419 22:21:17.683"></status>
</kw>
<msg level="INFO" timestamp="20170419 22:21:17.683">${state} = xyz.openbmc_project.State.Host.HostState.Off</msg>
<status starttime="20170419 22:21:17.429" status="PASS" endtime="20170419 22:21:17.683"></status>
</kw>
<msg level="INFO" timestamp="20170419 22:21:17.683">${host_state} = Off</msg>
<status starttime="20170419 22:21:17.429" status="PASS" endtime="20170419 22:21:17.683"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170419 22:21:17.684">Running != Off</msg>
<status starttime="20170419 22:21:17.684" status="FAIL" endtime="20170419 22:21:17.684"></status>
</kw>
<status starttime="20170419 22:21:17.428" status="FAIL" endtime="20170419 22:21:17.684"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:21:27.690">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170419 22:21:27.689" status="PASS" endtime="20170419 22:21:27.691"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:21:27.691">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170419 22:21:27.691" status="PASS" endtime="20170419 22:21:27.691"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:21:27.692">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170419 22:21:27.691" status="PASS" endtime="20170419 22:21:27.692"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:21:27.692">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170419 22:21:27.692" status="PASS" endtime="20170419 22:21:27.692"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:21:27.870">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170419 22:21:27.693" status="PASS" endtime="20170419 22:21:27.870"></status>
</kw>
<msg level="INFO" timestamp="20170419 22:21:27.870">${status} = PASS</msg>
<msg level="INFO" timestamp="20170419 22:21:27.870">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 22:21:27.693" status="PASS" endtime="20170419 22:21:27.870"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:21:27.871">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 22:21:27.870" status="PASS" endtime="20170419 22:21:27.871"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:21:27.871">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 22:21:27.871" status="PASS" endtime="20170419 22:21:27.871"></status>
</kw>
<status starttime="20170419 22:21:27.688" status="PASS" endtime="20170419 22:21:27.871"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:21:27.872">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170419 22:21:27.872" status="PASS" endtime="20170419 22:21:27.872"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:21:27.874">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170419 22:21:27.873" status="PASS" endtime="20170419 22:21:27.874"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:21:27.875">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170419 22:21:27.875" status="PASS" endtime="20170419 22:21:27.875"></status>
</kw>
<status starttime="20170419 22:21:27.874" status="PASS" endtime="20170419 22:21:27.875"></status>
</kw>
<status starttime="20170419 22:21:27.873" status="PASS" endtime="20170419 22:21:27.875"></status>
</kw>
<status starttime="20170419 22:21:27.872" status="PASS" endtime="20170419 22:21:27.875"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:21:27.940">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170419 22:21:27.940">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 22:21:27.876" status="PASS" endtime="20170419 22:21:27.940"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:21:27.943">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170419 22:21:27.942" status="PASS" endtime="20170419 22:21:27.943"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:21:27.944">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170419 22:21:27.943" status="PASS" endtime="20170419 22:21:27.944"></status>
</kw>
<status starttime="20170419 22:21:27.943" status="PASS" endtime="20170419 22:21:27.944"></status>
</kw>
<status starttime="20170419 22:21:27.941" status="PASS" endtime="20170419 22:21:27.944"></status>
</kw>
<status starttime="20170419 22:21:27.941" status="PASS" endtime="20170419 22:21:27.944"></status>
</kw>
<msg level="INFO" timestamp="20170419 22:21:27.944">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 22:21:27.687" status="PASS" endtime="20170419 22:21:27.944"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:21:27.945">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 22:21:27.944" status="PASS" endtime="20170419 22:21:27.945"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:21:27.945">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170419 22:21:27.945">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170419 22:21:27.946">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170419 22:21:27.945" status="PASS" endtime="20170419 22:21:27.946"></status>
</kw>
<msg level="INFO" timestamp="20170419 22:21:27.946">${state} = xyz.openbmc_project.State.Host.HostState.Off</msg>
<status starttime="20170419 22:21:27.686" status="PASS" endtime="20170419 22:21:27.946"></status>
</kw>
<msg level="INFO" timestamp="20170419 22:21:27.946">${host_state} = Off</msg>
<status starttime="20170419 22:21:27.685" status="PASS" endtime="20170419 22:21:27.946"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170419 22:21:27.947">Running != Off</msg>
<status starttime="20170419 22:21:27.946" status="FAIL" endtime="20170419 22:21:27.947"></status>
</kw>
<status starttime="20170419 22:21:27.685" status="FAIL" endtime="20170419 22:21:27.947"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:21:37.951">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170419 22:21:37.950" status="PASS" endtime="20170419 22:21:37.951"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:21:37.952">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170419 22:21:37.951" status="PASS" endtime="20170419 22:21:37.952"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:21:37.952">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170419 22:21:37.952" status="PASS" endtime="20170419 22:21:37.952"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:21:37.953">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170419 22:21:37.952" status="PASS" endtime="20170419 22:21:37.953"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:21:38.135">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170419 22:21:37.953" status="PASS" endtime="20170419 22:21:38.135"></status>
</kw>
<msg level="INFO" timestamp="20170419 22:21:38.135">${status} = PASS</msg>
<msg level="INFO" timestamp="20170419 22:21:38.135">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 22:21:37.953" status="PASS" endtime="20170419 22:21:38.135"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:21:38.136">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 22:21:38.135" status="PASS" endtime="20170419 22:21:38.136"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:21:38.136">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 22:21:38.136" status="PASS" endtime="20170419 22:21:38.136"></status>
</kw>
<status starttime="20170419 22:21:37.950" status="PASS" endtime="20170419 22:21:38.137"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:21:38.137">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170419 22:21:38.137" status="PASS" endtime="20170419 22:21:38.137"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:21:38.140">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170419 22:21:38.139" status="PASS" endtime="20170419 22:21:38.140"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:21:38.141">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170419 22:21:38.140" status="PASS" endtime="20170419 22:21:38.141"></status>
</kw>
<status starttime="20170419 22:21:38.140" status="PASS" endtime="20170419 22:21:38.141"></status>
</kw>
<status starttime="20170419 22:21:38.138" status="PASS" endtime="20170419 22:21:38.141"></status>
</kw>
<status starttime="20170419 22:21:38.137" status="PASS" endtime="20170419 22:21:38.141"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:21:38.203">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170419 22:21:38.204">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 22:21:38.141" status="PASS" endtime="20170419 22:21:38.204"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:21:38.206">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170419 22:21:38.205" status="PASS" endtime="20170419 22:21:38.206"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:21:38.206">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170419 22:21:38.206" status="PASS" endtime="20170419 22:21:38.208"></status>
</kw>
<status starttime="20170419 22:21:38.206" status="PASS" endtime="20170419 22:21:38.208"></status>
</kw>
<status starttime="20170419 22:21:38.204" status="PASS" endtime="20170419 22:21:38.208"></status>
</kw>
<status starttime="20170419 22:21:38.204" status="PASS" endtime="20170419 22:21:38.208"></status>
</kw>
<msg level="INFO" timestamp="20170419 22:21:38.208">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 22:21:37.949" status="PASS" endtime="20170419 22:21:38.208"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:21:38.209">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 22:21:38.208" status="PASS" endtime="20170419 22:21:38.209"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:21:38.209">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170419 22:21:38.209">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170419 22:21:38.210">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170419 22:21:38.209" status="PASS" endtime="20170419 22:21:38.210"></status>
</kw>
<msg level="INFO" timestamp="20170419 22:21:38.210">${state} = xyz.openbmc_project.State.Host.HostState.Off</msg>
<status starttime="20170419 22:21:37.948" status="PASS" endtime="20170419 22:21:38.210"></status>
</kw>
<msg level="INFO" timestamp="20170419 22:21:38.210">${host_state} = Off</msg>
<status starttime="20170419 22:21:37.948" status="PASS" endtime="20170419 22:21:38.210"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170419 22:21:38.211">Running != Off</msg>
<status starttime="20170419 22:21:38.210" status="FAIL" endtime="20170419 22:21:38.211"></status>
</kw>
<status starttime="20170419 22:21:37.947" status="FAIL" endtime="20170419 22:21:38.211"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:21:48.214">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170419 22:21:48.214" status="PASS" endtime="20170419 22:21:48.215"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:21:48.215">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170419 22:21:48.215" status="PASS" endtime="20170419 22:21:48.215"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:21:48.216">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170419 22:21:48.216" status="PASS" endtime="20170419 22:21:48.216"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:21:48.217">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170419 22:21:48.217" status="PASS" endtime="20170419 22:21:48.217"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:21:48.395">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170419 22:21:48.218" status="PASS" endtime="20170419 22:21:48.395"></status>
</kw>
<msg level="INFO" timestamp="20170419 22:21:48.395">${status} = PASS</msg>
<msg level="INFO" timestamp="20170419 22:21:48.395">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 22:21:48.217" status="PASS" endtime="20170419 22:21:48.395"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:21:48.396">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 22:21:48.396" status="PASS" endtime="20170419 22:21:48.396"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:21:48.397">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 22:21:48.396" status="PASS" endtime="20170419 22:21:48.397"></status>
</kw>
<status starttime="20170419 22:21:48.214" status="PASS" endtime="20170419 22:21:48.397"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:21:48.397">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170419 22:21:48.397" status="PASS" endtime="20170419 22:21:48.398"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:21:48.400">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170419 22:21:48.399" status="PASS" endtime="20170419 22:21:48.400"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:21:48.400">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170419 22:21:48.400" status="PASS" endtime="20170419 22:21:48.401"></status>
</kw>
<status starttime="20170419 22:21:48.400" status="PASS" endtime="20170419 22:21:48.401"></status>
</kw>
<status starttime="20170419 22:21:48.398" status="PASS" endtime="20170419 22:21:48.401"></status>
</kw>
<status starttime="20170419 22:21:48.398" status="PASS" endtime="20170419 22:21:48.401"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:21:48.464">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170419 22:21:48.464">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 22:21:48.401" status="PASS" endtime="20170419 22:21:48.464"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:21:48.466">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170419 22:21:48.465" status="PASS" endtime="20170419 22:21:48.466"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:21:48.466">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170419 22:21:48.466" status="PASS" endtime="20170419 22:21:48.467"></status>
</kw>
<status starttime="20170419 22:21:48.466" status="PASS" endtime="20170419 22:21:48.467"></status>
</kw>
<status starttime="20170419 22:21:48.465" status="PASS" endtime="20170419 22:21:48.467"></status>
</kw>
<status starttime="20170419 22:21:48.464" status="PASS" endtime="20170419 22:21:48.467"></status>
</kw>
<msg level="INFO" timestamp="20170419 22:21:48.467">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 22:21:48.213" status="PASS" endtime="20170419 22:21:48.467"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:21:48.468">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 22:21:48.467" status="PASS" endtime="20170419 22:21:48.468"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:21:48.469">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170419 22:21:48.469">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170419 22:21:48.469">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170419 22:21:48.468" status="PASS" endtime="20170419 22:21:48.469"></status>
</kw>
<msg level="INFO" timestamp="20170419 22:21:48.469">${state} = xyz.openbmc_project.State.Host.HostState.Off</msg>
<status starttime="20170419 22:21:48.212" status="PASS" endtime="20170419 22:21:48.469"></status>
</kw>
<msg level="INFO" timestamp="20170419 22:21:48.469">${host_state} = Off</msg>
<status starttime="20170419 22:21:48.212" status="PASS" endtime="20170419 22:21:48.469"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170419 22:21:48.470">Running != Off</msg>
<status starttime="20170419 22:21:48.470" status="FAIL" endtime="20170419 22:21:48.470"></status>
</kw>
<status starttime="20170419 22:21:48.211" status="FAIL" endtime="20170419 22:21:48.470"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:21:58.474">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170419 22:21:58.474" status="PASS" endtime="20170419 22:21:58.475"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:21:58.475">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170419 22:21:58.475" status="PASS" endtime="20170419 22:21:58.476"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:21:58.476">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170419 22:21:58.476" status="PASS" endtime="20170419 22:21:58.476"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:21:58.477">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170419 22:21:58.476" status="PASS" endtime="20170419 22:21:58.477"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:21:58.653">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170419 22:21:58.477" status="PASS" endtime="20170419 22:21:58.653"></status>
</kw>
<msg level="INFO" timestamp="20170419 22:21:58.653">${status} = PASS</msg>
<msg level="INFO" timestamp="20170419 22:21:58.653">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 22:21:58.477" status="PASS" endtime="20170419 22:21:58.653"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:21:58.654">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 22:21:58.653" status="PASS" endtime="20170419 22:21:58.654"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:21:58.654">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 22:21:58.654" status="PASS" endtime="20170419 22:21:58.654"></status>
</kw>
<status starttime="20170419 22:21:58.473" status="PASS" endtime="20170419 22:21:58.655"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:21:58.655">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170419 22:21:58.655" status="PASS" endtime="20170419 22:21:58.655"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:21:58.657">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170419 22:21:58.656" status="PASS" endtime="20170419 22:21:58.657"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:21:58.658">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170419 22:21:58.658" status="PASS" endtime="20170419 22:21:58.658"></status>
</kw>
<status starttime="20170419 22:21:58.657" status="PASS" endtime="20170419 22:21:58.658"></status>
</kw>
<status starttime="20170419 22:21:58.656" status="PASS" endtime="20170419 22:21:58.659"></status>
</kw>
<status starttime="20170419 22:21:58.655" status="PASS" endtime="20170419 22:21:58.659"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:21:58.722">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170419 22:21:58.722">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 22:21:58.659" status="PASS" endtime="20170419 22:21:58.722"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:21:58.725">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170419 22:21:58.725" status="PASS" endtime="20170419 22:21:58.725"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:21:58.726">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170419 22:21:58.726" status="PASS" endtime="20170419 22:21:58.726"></status>
</kw>
<status starttime="20170419 22:21:58.726" status="PASS" endtime="20170419 22:21:58.727"></status>
</kw>
<status starttime="20170419 22:21:58.723" status="PASS" endtime="20170419 22:21:58.727"></status>
</kw>
<status starttime="20170419 22:21:58.722" status="PASS" endtime="20170419 22:21:58.727"></status>
</kw>
<msg level="INFO" timestamp="20170419 22:21:58.727">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 22:21:58.472" status="PASS" endtime="20170419 22:21:58.727"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:21:58.728">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 22:21:58.728" status="PASS" endtime="20170419 22:21:58.728"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:21:58.728">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170419 22:21:58.729">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170419 22:21:58.729">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170419 22:21:58.728" status="PASS" endtime="20170419 22:21:58.729"></status>
</kw>
<msg level="INFO" timestamp="20170419 22:21:58.729">${state} = xyz.openbmc_project.State.Host.HostState.Off</msg>
<status starttime="20170419 22:21:58.472" status="PASS" endtime="20170419 22:21:58.729"></status>
</kw>
<msg level="INFO" timestamp="20170419 22:21:58.729">${host_state} = Off</msg>
<status starttime="20170419 22:21:58.472" status="PASS" endtime="20170419 22:21:58.729"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170419 22:21:58.731">Running != Off</msg>
<status starttime="20170419 22:21:58.731" status="FAIL" endtime="20170419 22:21:58.731"></status>
</kw>
<status starttime="20170419 22:21:58.471" status="FAIL" endtime="20170419 22:21:58.731"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:22:08.735">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170419 22:22:08.734" status="PASS" endtime="20170419 22:22:08.735"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:22:08.736">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170419 22:22:08.735" status="PASS" endtime="20170419 22:22:08.736"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:22:08.736">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170419 22:22:08.736" status="PASS" endtime="20170419 22:22:08.736"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:22:08.737">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170419 22:22:08.736" status="PASS" endtime="20170419 22:22:08.737"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:22:08.916">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170419 22:22:08.738" status="PASS" endtime="20170419 22:22:08.917"></status>
</kw>
<msg level="INFO" timestamp="20170419 22:22:08.917">${status} = PASS</msg>
<msg level="INFO" timestamp="20170419 22:22:08.917">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 22:22:08.737" status="PASS" endtime="20170419 22:22:08.917"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:22:08.918">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 22:22:08.917" status="PASS" endtime="20170419 22:22:08.918"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:22:08.918">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 22:22:08.918" status="PASS" endtime="20170419 22:22:08.918"></status>
</kw>
<status starttime="20170419 22:22:08.734" status="PASS" endtime="20170419 22:22:08.918"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:22:08.919">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170419 22:22:08.919" status="PASS" endtime="20170419 22:22:08.919"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:22:08.922">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170419 22:22:08.920" status="PASS" endtime="20170419 22:22:08.922"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:22:08.923">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170419 22:22:08.922" status="PASS" endtime="20170419 22:22:08.923"></status>
</kw>
<status starttime="20170419 22:22:08.922" status="PASS" endtime="20170419 22:22:08.923"></status>
</kw>
<status starttime="20170419 22:22:08.920" status="PASS" endtime="20170419 22:22:08.923"></status>
</kw>
<status starttime="20170419 22:22:08.919" status="PASS" endtime="20170419 22:22:08.923"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:22:08.987">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170419 22:22:08.987">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 22:22:08.923" status="PASS" endtime="20170419 22:22:08.987"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:22:08.989">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170419 22:22:08.988" status="PASS" endtime="20170419 22:22:08.989"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:22:08.990">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170419 22:22:08.990" status="PASS" endtime="20170419 22:22:08.990"></status>
</kw>
<status starttime="20170419 22:22:08.989" status="PASS" endtime="20170419 22:22:08.990"></status>
</kw>
<status starttime="20170419 22:22:08.988" status="PASS" endtime="20170419 22:22:08.990"></status>
</kw>
<status starttime="20170419 22:22:08.987" status="PASS" endtime="20170419 22:22:08.990"></status>
</kw>
<msg level="INFO" timestamp="20170419 22:22:08.991">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 22:22:08.733" status="PASS" endtime="20170419 22:22:08.991"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:22:08.991">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 22:22:08.991" status="PASS" endtime="20170419 22:22:08.991"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:22:08.992">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170419 22:22:08.992">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170419 22:22:08.992">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170419 22:22:08.991" status="PASS" endtime="20170419 22:22:08.992"></status>
</kw>
<msg level="INFO" timestamp="20170419 22:22:08.992">${state} = xyz.openbmc_project.State.Host.HostState.Off</msg>
<status starttime="20170419 22:22:08.733" status="PASS" endtime="20170419 22:22:08.992"></status>
</kw>
<msg level="INFO" timestamp="20170419 22:22:08.993">${host_state} = Off</msg>
<status starttime="20170419 22:22:08.732" status="PASS" endtime="20170419 22:22:08.993"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170419 22:22:08.993">Running != Off</msg>
<status starttime="20170419 22:22:08.993" status="FAIL" endtime="20170419 22:22:08.993"></status>
</kw>
<status starttime="20170419 22:22:08.732" status="FAIL" endtime="20170419 22:22:08.993"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:22:18.997">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170419 22:22:18.997" status="PASS" endtime="20170419 22:22:18.997"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:22:18.998">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170419 22:22:18.998" status="PASS" endtime="20170419 22:22:18.998"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:22:18.999">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170419 22:22:18.998" status="PASS" endtime="20170419 22:22:18.999"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:22:18.999">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170419 22:22:18.999" status="PASS" endtime="20170419 22:22:18.999"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:22:19.177">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170419 22:22:19.000" status="PASS" endtime="20170419 22:22:19.177"></status>
</kw>
<msg level="INFO" timestamp="20170419 22:22:19.177">${status} = PASS</msg>
<msg level="INFO" timestamp="20170419 22:22:19.177">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 22:22:19.000" status="PASS" endtime="20170419 22:22:19.177"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:22:19.178">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 22:22:19.177" status="PASS" endtime="20170419 22:22:19.178"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:22:19.178">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 22:22:19.178" status="PASS" endtime="20170419 22:22:19.178"></status>
</kw>
<status starttime="20170419 22:22:18.996" status="PASS" endtime="20170419 22:22:19.179"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:22:19.179">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170419 22:22:19.179" status="PASS" endtime="20170419 22:22:19.179"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:22:19.181">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170419 22:22:19.181" status="PASS" endtime="20170419 22:22:19.181"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:22:19.182">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170419 22:22:19.182" status="PASS" endtime="20170419 22:22:19.182"></status>
</kw>
<status starttime="20170419 22:22:19.181" status="PASS" endtime="20170419 22:22:19.182"></status>
</kw>
<status starttime="20170419 22:22:19.180" status="PASS" endtime="20170419 22:22:19.182"></status>
</kw>
<status starttime="20170419 22:22:19.179" status="PASS" endtime="20170419 22:22:19.183"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:22:19.246">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170419 22:22:19.246">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 22:22:19.183" status="PASS" endtime="20170419 22:22:19.246"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:22:19.248">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170419 22:22:19.248" status="PASS" endtime="20170419 22:22:19.248"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:22:19.249">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170419 22:22:19.249" status="PASS" endtime="20170419 22:22:19.249"></status>
</kw>
<status starttime="20170419 22:22:19.248" status="PASS" endtime="20170419 22:22:19.249"></status>
</kw>
<status starttime="20170419 22:22:19.247" status="PASS" endtime="20170419 22:22:19.249"></status>
</kw>
<status starttime="20170419 22:22:19.247" status="PASS" endtime="20170419 22:22:19.250"></status>
</kw>
<msg level="INFO" timestamp="20170419 22:22:19.250">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 22:22:18.995" status="PASS" endtime="20170419 22:22:19.250"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:22:19.250">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 22:22:19.250" status="PASS" endtime="20170419 22:22:19.250"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:22:19.251">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170419 22:22:19.251">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170419 22:22:19.251">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170419 22:22:19.251" status="PASS" endtime="20170419 22:22:19.251"></status>
</kw>
<msg level="INFO" timestamp="20170419 22:22:19.251">${state} = xyz.openbmc_project.State.Host.HostState.Off</msg>
<status starttime="20170419 22:22:18.995" status="PASS" endtime="20170419 22:22:19.251"></status>
</kw>
<msg level="INFO" timestamp="20170419 22:22:19.252">${host_state} = Off</msg>
<status starttime="20170419 22:22:18.994" status="PASS" endtime="20170419 22:22:19.252"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170419 22:22:19.252">Running != Off</msg>
<status starttime="20170419 22:22:19.252" status="FAIL" endtime="20170419 22:22:19.252"></status>
</kw>
<status starttime="20170419 22:22:18.994" status="FAIL" endtime="20170419 22:22:19.253"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:22:29.256">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170419 22:22:29.256" status="PASS" endtime="20170419 22:22:29.257"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:22:29.258">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170419 22:22:29.257" status="PASS" endtime="20170419 22:22:29.258"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:22:29.258">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170419 22:22:29.258" status="PASS" endtime="20170419 22:22:29.258"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:22:29.259">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170419 22:22:29.259" status="PASS" endtime="20170419 22:22:29.259"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:22:29.441">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170419 22:22:29.260" status="PASS" endtime="20170419 22:22:29.442"></status>
</kw>
<msg level="INFO" timestamp="20170419 22:22:29.442">${status} = PASS</msg>
<msg level="INFO" timestamp="20170419 22:22:29.442">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 22:22:29.259" status="PASS" endtime="20170419 22:22:29.442"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:22:29.443">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 22:22:29.442" status="PASS" endtime="20170419 22:22:29.443"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:22:29.443">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 22:22:29.443" status="PASS" endtime="20170419 22:22:29.443"></status>
</kw>
<status starttime="20170419 22:22:29.255" status="PASS" endtime="20170419 22:22:29.443"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:22:29.444">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170419 22:22:29.444" status="PASS" endtime="20170419 22:22:29.444"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:22:29.446">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170419 22:22:29.445" status="PASS" endtime="20170419 22:22:29.446"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:22:29.447">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170419 22:22:29.447" status="PASS" endtime="20170419 22:22:29.447"></status>
</kw>
<status starttime="20170419 22:22:29.446" status="PASS" endtime="20170419 22:22:29.447"></status>
</kw>
<status starttime="20170419 22:22:29.445" status="PASS" endtime="20170419 22:22:29.447"></status>
</kw>
<status starttime="20170419 22:22:29.444" status="PASS" endtime="20170419 22:22:29.447"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:22:29.517">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170419 22:22:29.518">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 22:22:29.448" status="PASS" endtime="20170419 22:22:29.518"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:22:29.519">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170419 22:22:29.519" status="PASS" endtime="20170419 22:22:29.519"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:22:29.520">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170419 22:22:29.520" status="PASS" endtime="20170419 22:22:29.520"></status>
</kw>
<status starttime="20170419 22:22:29.520" status="PASS" endtime="20170419 22:22:29.520"></status>
</kw>
<status starttime="20170419 22:22:29.518" status="PASS" endtime="20170419 22:22:29.521"></status>
</kw>
<status starttime="20170419 22:22:29.518" status="PASS" endtime="20170419 22:22:29.521"></status>
</kw>
<msg level="INFO" timestamp="20170419 22:22:29.521">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 22:22:29.255" status="PASS" endtime="20170419 22:22:29.521"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:22:29.521">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 22:22:29.521" status="PASS" endtime="20170419 22:22:29.522"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:22:29.522">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170419 22:22:29.522">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170419 22:22:29.522">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170419 22:22:29.522" status="PASS" endtime="20170419 22:22:29.522"></status>
</kw>
<msg level="INFO" timestamp="20170419 22:22:29.523">${state} = xyz.openbmc_project.State.Host.HostState.Off</msg>
<status starttime="20170419 22:22:29.254" status="PASS" endtime="20170419 22:22:29.523"></status>
</kw>
<msg level="INFO" timestamp="20170419 22:22:29.523">${host_state} = Off</msg>
<status starttime="20170419 22:22:29.254" status="PASS" endtime="20170419 22:22:29.523"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170419 22:22:29.523">Running != Off</msg>
<status starttime="20170419 22:22:29.523" status="FAIL" endtime="20170419 22:22:29.524"></status>
</kw>
<status starttime="20170419 22:22:29.253" status="FAIL" endtime="20170419 22:22:29.524"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:22:39.528">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170419 22:22:39.528" status="PASS" endtime="20170419 22:22:39.528"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:22:39.529">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170419 22:22:39.529" status="PASS" endtime="20170419 22:22:39.529"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:22:39.530">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170419 22:22:39.529" status="PASS" endtime="20170419 22:22:39.530"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:22:39.530">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170419 22:22:39.530" status="PASS" endtime="20170419 22:22:39.530"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:22:39.710">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170419 22:22:39.531" status="PASS" endtime="20170419 22:22:39.710"></status>
</kw>
<msg level="INFO" timestamp="20170419 22:22:39.710">${status} = PASS</msg>
<msg level="INFO" timestamp="20170419 22:22:39.710">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 22:22:39.530" status="PASS" endtime="20170419 22:22:39.710"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:22:39.711">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 22:22:39.710" status="PASS" endtime="20170419 22:22:39.711"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:22:39.711">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 22:22:39.711" status="PASS" endtime="20170419 22:22:39.711"></status>
</kw>
<status starttime="20170419 22:22:39.527" status="PASS" endtime="20170419 22:22:39.712"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:22:39.712">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170419 22:22:39.712" status="PASS" endtime="20170419 22:22:39.712"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:22:39.714">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170419 22:22:39.713" status="PASS" endtime="20170419 22:22:39.714"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:22:39.715">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170419 22:22:39.715" status="PASS" endtime="20170419 22:22:39.715"></status>
</kw>
<status starttime="20170419 22:22:39.714" status="PASS" endtime="20170419 22:22:39.716"></status>
</kw>
<status starttime="20170419 22:22:39.713" status="PASS" endtime="20170419 22:22:39.716"></status>
</kw>
<status starttime="20170419 22:22:39.712" status="PASS" endtime="20170419 22:22:39.716"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:22:39.779">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170419 22:22:39.779">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 22:22:39.716" status="PASS" endtime="20170419 22:22:39.779"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:22:39.781">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170419 22:22:39.780" status="PASS" endtime="20170419 22:22:39.781"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:22:39.782">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170419 22:22:39.781" status="PASS" endtime="20170419 22:22:39.782"></status>
</kw>
<status starttime="20170419 22:22:39.781" status="PASS" endtime="20170419 22:22:39.782"></status>
</kw>
<status starttime="20170419 22:22:39.780" status="PASS" endtime="20170419 22:22:39.782"></status>
</kw>
<status starttime="20170419 22:22:39.779" status="PASS" endtime="20170419 22:22:39.782"></status>
</kw>
<msg level="INFO" timestamp="20170419 22:22:39.782">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 22:22:39.526" status="PASS" endtime="20170419 22:22:39.782"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:22:39.783">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 22:22:39.783" status="PASS" endtime="20170419 22:22:39.783"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:22:39.783">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170419 22:22:39.784">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170419 22:22:39.784">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170419 22:22:39.783" status="PASS" endtime="20170419 22:22:39.784"></status>
</kw>
<msg level="INFO" timestamp="20170419 22:22:39.784">${state} = xyz.openbmc_project.State.Host.HostState.Off</msg>
<status starttime="20170419 22:22:39.526" status="PASS" endtime="20170419 22:22:39.784"></status>
</kw>
<msg level="INFO" timestamp="20170419 22:22:39.784">${host_state} = Off</msg>
<status starttime="20170419 22:22:39.525" status="PASS" endtime="20170419 22:22:39.784"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170419 22:22:39.785">Running != Off</msg>
<status starttime="20170419 22:22:39.785" status="FAIL" endtime="20170419 22:22:39.785"></status>
</kw>
<status starttime="20170419 22:22:39.524" status="FAIL" endtime="20170419 22:22:39.785"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:22:49.789">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170419 22:22:49.788" status="PASS" endtime="20170419 22:22:49.789"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:22:49.790">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170419 22:22:49.789" status="PASS" endtime="20170419 22:22:49.790"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:22:49.790">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170419 22:22:49.790" status="PASS" endtime="20170419 22:22:49.790"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:22:49.791">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170419 22:22:49.791" status="PASS" endtime="20170419 22:22:49.791"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:22:49.973">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170419 22:22:49.792" status="PASS" endtime="20170419 22:22:49.973"></status>
</kw>
<msg level="INFO" timestamp="20170419 22:22:49.973">${status} = PASS</msg>
<msg level="INFO" timestamp="20170419 22:22:49.973">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 22:22:49.791" status="PASS" endtime="20170419 22:22:49.973"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:22:49.974">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 22:22:49.973" status="PASS" endtime="20170419 22:22:49.974"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:22:49.975">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 22:22:49.974" status="PASS" endtime="20170419 22:22:49.975"></status>
</kw>
<status starttime="20170419 22:22:49.788" status="PASS" endtime="20170419 22:22:49.975"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:22:49.975">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170419 22:22:49.975" status="PASS" endtime="20170419 22:22:49.975"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:22:49.977">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170419 22:22:49.977" status="PASS" endtime="20170419 22:22:49.977"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:22:49.978">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170419 22:22:49.978" status="PASS" endtime="20170419 22:22:49.978"></status>
</kw>
<status starttime="20170419 22:22:49.978" status="PASS" endtime="20170419 22:22:49.979"></status>
</kw>
<status starttime="20170419 22:22:49.976" status="PASS" endtime="20170419 22:22:49.979"></status>
</kw>
<status starttime="20170419 22:22:49.976" status="PASS" endtime="20170419 22:22:49.979"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:22:50.042">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170419 22:22:50.042">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 22:22:49.979" status="PASS" endtime="20170419 22:22:50.042"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:22:50.044">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170419 22:22:50.043" status="PASS" endtime="20170419 22:22:50.044"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:22:50.045">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170419 22:22:50.045" status="PASS" endtime="20170419 22:22:50.045"></status>
</kw>
<status starttime="20170419 22:22:50.044" status="PASS" endtime="20170419 22:22:50.045"></status>
</kw>
<status starttime="20170419 22:22:50.043" status="PASS" endtime="20170419 22:22:50.045"></status>
</kw>
<status starttime="20170419 22:22:50.042" status="PASS" endtime="20170419 22:22:50.045"></status>
</kw>
<msg level="INFO" timestamp="20170419 22:22:50.045">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 22:22:49.787" status="PASS" endtime="20170419 22:22:50.045"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:22:50.046">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 22:22:50.046" status="PASS" endtime="20170419 22:22:50.046"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:22:50.047">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170419 22:22:50.047">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170419 22:22:50.047">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170419 22:22:50.046" status="PASS" endtime="20170419 22:22:50.047"></status>
</kw>
<msg level="INFO" timestamp="20170419 22:22:50.047">${state} = xyz.openbmc_project.State.Host.HostState.Off</msg>
<status starttime="20170419 22:22:49.787" status="PASS" endtime="20170419 22:22:50.047"></status>
</kw>
<msg level="INFO" timestamp="20170419 22:22:50.047">${host_state} = Off</msg>
<status starttime="20170419 22:22:49.786" status="PASS" endtime="20170419 22:22:50.047"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170419 22:22:50.048">Running != Off</msg>
<status starttime="20170419 22:22:50.048" status="FAIL" endtime="20170419 22:22:50.048"></status>
</kw>
<status starttime="20170419 22:22:49.786" status="FAIL" endtime="20170419 22:22:50.048"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:23:00.052">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170419 22:23:00.052" status="PASS" endtime="20170419 22:23:00.053"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:23:00.053">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170419 22:23:00.053" status="PASS" endtime="20170419 22:23:00.053"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:23:00.054">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170419 22:23:00.053" status="PASS" endtime="20170419 22:23:00.054"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:23:00.054">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170419 22:23:00.054" status="PASS" endtime="20170419 22:23:00.055"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:23:00.230">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170419 22:23:00.055" status="PASS" endtime="20170419 22:23:00.230"></status>
</kw>
<msg level="INFO" timestamp="20170419 22:23:00.230">${status} = PASS</msg>
<msg level="INFO" timestamp="20170419 22:23:00.230">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 22:23:00.055" status="PASS" endtime="20170419 22:23:00.230"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:23:00.231">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 22:23:00.231" status="PASS" endtime="20170419 22:23:00.231"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:23:00.232">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 22:23:00.231" status="PASS" endtime="20170419 22:23:00.232"></status>
</kw>
<status starttime="20170419 22:23:00.051" status="PASS" endtime="20170419 22:23:00.232"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:23:00.232">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170419 22:23:00.232" status="PASS" endtime="20170419 22:23:00.233"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:23:00.235">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170419 22:23:00.234" status="PASS" endtime="20170419 22:23:00.235"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:23:00.235">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170419 22:23:00.235" status="PASS" endtime="20170419 22:23:00.236"></status>
</kw>
<status starttime="20170419 22:23:00.235" status="PASS" endtime="20170419 22:23:00.236"></status>
</kw>
<status starttime="20170419 22:23:00.233" status="PASS" endtime="20170419 22:23:00.236"></status>
</kw>
<status starttime="20170419 22:23:00.233" status="PASS" endtime="20170419 22:23:00.236"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:23:00.300">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170419 22:23:00.300">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 22:23:00.236" status="PASS" endtime="20170419 22:23:00.300"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:23:00.302">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170419 22:23:00.302" status="PASS" endtime="20170419 22:23:00.302"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:23:00.303">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170419 22:23:00.303" status="PASS" endtime="20170419 22:23:00.303"></status>
</kw>
<status starttime="20170419 22:23:00.302" status="PASS" endtime="20170419 22:23:00.304"></status>
</kw>
<status starttime="20170419 22:23:00.301" status="PASS" endtime="20170419 22:23:00.304"></status>
</kw>
<status starttime="20170419 22:23:00.301" status="PASS" endtime="20170419 22:23:00.304"></status>
</kw>
<msg level="INFO" timestamp="20170419 22:23:00.304">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 22:23:00.050" status="PASS" endtime="20170419 22:23:00.304"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:23:00.305">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 22:23:00.304" status="PASS" endtime="20170419 22:23:00.305"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:23:00.305">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170419 22:23:00.305">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170419 22:23:00.305">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170419 22:23:00.305" status="PASS" endtime="20170419 22:23:00.305"></status>
</kw>
<msg level="INFO" timestamp="20170419 22:23:00.306">${state} = xyz.openbmc_project.State.Host.HostState.Off</msg>
<status starttime="20170419 22:23:00.050" status="PASS" endtime="20170419 22:23:00.306"></status>
</kw>
<msg level="INFO" timestamp="20170419 22:23:00.306">${host_state} = Off</msg>
<status starttime="20170419 22:23:00.049" status="PASS" endtime="20170419 22:23:00.306"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170419 22:23:00.307">Running != Off</msg>
<status starttime="20170419 22:23:00.306" status="FAIL" endtime="20170419 22:23:00.307"></status>
</kw>
<status starttime="20170419 22:23:00.049" status="FAIL" endtime="20170419 22:23:00.307"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:23:10.311">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170419 22:23:10.310" status="PASS" endtime="20170419 22:23:10.311"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:23:10.312">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170419 22:23:10.311" status="PASS" endtime="20170419 22:23:10.312"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:23:10.312">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170419 22:23:10.312" status="PASS" endtime="20170419 22:23:10.312"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:23:10.313">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170419 22:23:10.313" status="PASS" endtime="20170419 22:23:10.313"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:23:10.491">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170419 22:23:10.314" status="PASS" endtime="20170419 22:23:10.491"></status>
</kw>
<msg level="INFO" timestamp="20170419 22:23:10.491">${status} = PASS</msg>
<msg level="INFO" timestamp="20170419 22:23:10.492">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 22:23:10.313" status="PASS" endtime="20170419 22:23:10.492"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:23:10.492">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 22:23:10.492" status="PASS" endtime="20170419 22:23:10.492"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:23:10.493">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 22:23:10.493" status="PASS" endtime="20170419 22:23:10.493"></status>
</kw>
<status starttime="20170419 22:23:10.310" status="PASS" endtime="20170419 22:23:10.493"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:23:10.494">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170419 22:23:10.493" status="PASS" endtime="20170419 22:23:10.494"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:23:10.496">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170419 22:23:10.495" status="PASS" endtime="20170419 22:23:10.496"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:23:10.497">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170419 22:23:10.497" status="PASS" endtime="20170419 22:23:10.497"></status>
</kw>
<status starttime="20170419 22:23:10.496" status="PASS" endtime="20170419 22:23:10.497"></status>
</kw>
<status starttime="20170419 22:23:10.494" status="PASS" endtime="20170419 22:23:10.497"></status>
</kw>
<status starttime="20170419 22:23:10.494" status="PASS" endtime="20170419 22:23:10.497"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:23:10.560">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170419 22:23:10.560">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 22:23:10.498" status="PASS" endtime="20170419 22:23:10.560"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:23:10.562">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170419 22:23:10.561" status="PASS" endtime="20170419 22:23:10.562"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:23:10.563">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170419 22:23:10.563" status="PASS" endtime="20170419 22:23:10.563"></status>
</kw>
<status starttime="20170419 22:23:10.562" status="PASS" endtime="20170419 22:23:10.563"></status>
</kw>
<status starttime="20170419 22:23:10.561" status="PASS" endtime="20170419 22:23:10.563"></status>
</kw>
<status starttime="20170419 22:23:10.560" status="PASS" endtime="20170419 22:23:10.563"></status>
</kw>
<msg level="INFO" timestamp="20170419 22:23:10.563">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 22:23:10.309" status="PASS" endtime="20170419 22:23:10.564"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:23:10.564">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 22:23:10.564" status="PASS" endtime="20170419 22:23:10.564"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:23:10.565">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170419 22:23:10.565">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170419 22:23:10.565">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170419 22:23:10.564" status="PASS" endtime="20170419 22:23:10.565"></status>
</kw>
<msg level="INFO" timestamp="20170419 22:23:10.565">${state} = xyz.openbmc_project.State.Host.HostState.Off</msg>
<status starttime="20170419 22:23:10.308" status="PASS" endtime="20170419 22:23:10.565"></status>
</kw>
<msg level="INFO" timestamp="20170419 22:23:10.565">${host_state} = Off</msg>
<status starttime="20170419 22:23:10.308" status="PASS" endtime="20170419 22:23:10.566"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170419 22:23:10.566">Running != Off</msg>
<status starttime="20170419 22:23:10.566" status="FAIL" endtime="20170419 22:23:10.566"></status>
</kw>
<status starttime="20170419 22:23:10.307" status="FAIL" endtime="20170419 22:23:10.566"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:23:20.570">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170419 22:23:20.570" status="PASS" endtime="20170419 22:23:20.570"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:23:20.571">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170419 22:23:20.571" status="PASS" endtime="20170419 22:23:20.571"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:23:20.572">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170419 22:23:20.571" status="PASS" endtime="20170419 22:23:20.572"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:23:20.572">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170419 22:23:20.572" status="PASS" endtime="20170419 22:23:20.572"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:23:20.749">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170419 22:23:20.573" status="PASS" endtime="20170419 22:23:20.749"></status>
</kw>
<msg level="INFO" timestamp="20170419 22:23:20.749">${status} = PASS</msg>
<msg level="INFO" timestamp="20170419 22:23:20.749">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 22:23:20.573" status="PASS" endtime="20170419 22:23:20.749"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:23:20.750">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 22:23:20.750" status="PASS" endtime="20170419 22:23:20.750"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:23:20.751">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 22:23:20.750" status="PASS" endtime="20170419 22:23:20.751"></status>
</kw>
<status starttime="20170419 22:23:20.569" status="PASS" endtime="20170419 22:23:20.751"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:23:20.751">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170419 22:23:20.751" status="PASS" endtime="20170419 22:23:20.751"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:23:20.753">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170419 22:23:20.753" status="PASS" endtime="20170419 22:23:20.753"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:23:20.754">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170419 22:23:20.754" status="PASS" endtime="20170419 22:23:20.754"></status>
</kw>
<status starttime="20170419 22:23:20.754" status="PASS" endtime="20170419 22:23:20.755"></status>
</kw>
<status starttime="20170419 22:23:20.752" status="PASS" endtime="20170419 22:23:20.755"></status>
</kw>
<status starttime="20170419 22:23:20.752" status="PASS" endtime="20170419 22:23:20.755"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:23:20.824">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170419 22:23:20.824">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 22:23:20.755" status="PASS" endtime="20170419 22:23:20.824"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:23:20.826">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170419 22:23:20.825" status="PASS" endtime="20170419 22:23:20.826"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:23:20.827">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170419 22:23:20.827" status="PASS" endtime="20170419 22:23:20.827"></status>
</kw>
<status starttime="20170419 22:23:20.826" status="PASS" endtime="20170419 22:23:20.827"></status>
</kw>
<status starttime="20170419 22:23:20.825" status="PASS" endtime="20170419 22:23:20.827"></status>
</kw>
<status starttime="20170419 22:23:20.824" status="PASS" endtime="20170419 22:23:20.827"></status>
</kw>
<msg level="INFO" timestamp="20170419 22:23:20.827">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 22:23:20.568" status="PASS" endtime="20170419 22:23:20.828"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:23:20.828">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 22:23:20.828" status="PASS" endtime="20170419 22:23:20.828"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:23:20.829">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170419 22:23:20.829">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170419 22:23:20.829">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170419 22:23:20.828" status="PASS" endtime="20170419 22:23:20.829"></status>
</kw>
<msg level="INFO" timestamp="20170419 22:23:20.829">${state} = xyz.openbmc_project.State.Host.HostState.Off</msg>
<status starttime="20170419 22:23:20.568" status="PASS" endtime="20170419 22:23:20.829"></status>
</kw>
<msg level="INFO" timestamp="20170419 22:23:20.829">${host_state} = Off</msg>
<status starttime="20170419 22:23:20.567" status="PASS" endtime="20170419 22:23:20.830"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170419 22:23:20.830">Running != Off</msg>
<status starttime="20170419 22:23:20.830" status="FAIL" endtime="20170419 22:23:20.830"></status>
</kw>
<status starttime="20170419 22:23:20.567" status="FAIL" endtime="20170419 22:23:20.830"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:23:30.834">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170419 22:23:30.834" status="PASS" endtime="20170419 22:23:30.835"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:23:30.835">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170419 22:23:30.835" status="PASS" endtime="20170419 22:23:30.835"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:23:30.836">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170419 22:23:30.836" status="PASS" endtime="20170419 22:23:30.836"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:23:30.837">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170419 22:23:30.836" status="PASS" endtime="20170419 22:23:30.837"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:23:31.026">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170419 22:23:30.837" status="PASS" endtime="20170419 22:23:31.026"></status>
</kw>
<msg level="INFO" timestamp="20170419 22:23:31.026">${status} = PASS</msg>
<msg level="INFO" timestamp="20170419 22:23:31.026">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 22:23:30.837" status="PASS" endtime="20170419 22:23:31.026"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:23:31.027">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 22:23:31.027" status="PASS" endtime="20170419 22:23:31.027"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:23:31.028">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 22:23:31.027" status="PASS" endtime="20170419 22:23:31.028"></status>
</kw>
<status starttime="20170419 22:23:30.833" status="PASS" endtime="20170419 22:23:31.028"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:23:31.028">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170419 22:23:31.028" status="PASS" endtime="20170419 22:23:31.028"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:23:31.031">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170419 22:23:31.030" status="PASS" endtime="20170419 22:23:31.031"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:23:31.032">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170419 22:23:31.031" status="PASS" endtime="20170419 22:23:31.032"></status>
</kw>
<status starttime="20170419 22:23:31.031" status="PASS" endtime="20170419 22:23:31.032"></status>
</kw>
<status starttime="20170419 22:23:31.029" status="PASS" endtime="20170419 22:23:31.032"></status>
</kw>
<status starttime="20170419 22:23:31.029" status="PASS" endtime="20170419 22:23:31.032"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:23:31.094">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170419 22:23:31.094">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 22:23:31.032" status="PASS" endtime="20170419 22:23:31.094"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:23:31.098">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170419 22:23:31.095" status="PASS" endtime="20170419 22:23:31.098"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:23:31.099">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170419 22:23:31.099" status="PASS" endtime="20170419 22:23:31.099"></status>
</kw>
<status starttime="20170419 22:23:31.098" status="PASS" endtime="20170419 22:23:31.099"></status>
</kw>
<status starttime="20170419 22:23:31.095" status="PASS" endtime="20170419 22:23:31.099"></status>
</kw>
<status starttime="20170419 22:23:31.095" status="PASS" endtime="20170419 22:23:31.099"></status>
</kw>
<msg level="INFO" timestamp="20170419 22:23:31.099">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 22:23:30.832" status="PASS" endtime="20170419 22:23:31.100"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:23:31.100">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 22:23:31.100" status="PASS" endtime="20170419 22:23:31.100"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:23:31.101">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170419 22:23:31.101">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170419 22:23:31.101">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170419 22:23:31.101" status="PASS" endtime="20170419 22:23:31.101"></status>
</kw>
<msg level="INFO" timestamp="20170419 22:23:31.101">${state} = xyz.openbmc_project.State.Host.HostState.Off</msg>
<status starttime="20170419 22:23:30.832" status="PASS" endtime="20170419 22:23:31.101"></status>
</kw>
<msg level="INFO" timestamp="20170419 22:23:31.102">${host_state} = Off</msg>
<status starttime="20170419 22:23:30.831" status="PASS" endtime="20170419 22:23:31.102"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170419 22:23:31.102">Running != Off</msg>
<status starttime="20170419 22:23:31.102" status="FAIL" endtime="20170419 22:23:31.102"></status>
</kw>
<status starttime="20170419 22:23:30.831" status="FAIL" endtime="20170419 22:23:31.102"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:23:41.106">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170419 22:23:41.105" status="PASS" endtime="20170419 22:23:41.106"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:23:41.107">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170419 22:23:41.106" status="PASS" endtime="20170419 22:23:41.107"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:23:41.107">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170419 22:23:41.107" status="PASS" endtime="20170419 22:23:41.107"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:23:41.108">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170419 22:23:41.108" status="PASS" endtime="20170419 22:23:41.108"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:23:41.285">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170419 22:23:41.109" status="PASS" endtime="20170419 22:23:41.285"></status>
</kw>
<msg level="INFO" timestamp="20170419 22:23:41.285">${status} = PASS</msg>
<msg level="INFO" timestamp="20170419 22:23:41.285">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 22:23:41.108" status="PASS" endtime="20170419 22:23:41.285"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:23:41.286">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 22:23:41.286" status="PASS" endtime="20170419 22:23:41.286"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:23:41.287">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 22:23:41.286" status="PASS" endtime="20170419 22:23:41.287"></status>
</kw>
<status starttime="20170419 22:23:41.105" status="PASS" endtime="20170419 22:23:41.287"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:23:41.287">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170419 22:23:41.287" status="PASS" endtime="20170419 22:23:41.287"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:23:41.290">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170419 22:23:41.289" status="PASS" endtime="20170419 22:23:41.290"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:23:41.291">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170419 22:23:41.290" status="PASS" endtime="20170419 22:23:41.291"></status>
</kw>
<status starttime="20170419 22:23:41.290" status="PASS" endtime="20170419 22:23:41.291"></status>
</kw>
<status starttime="20170419 22:23:41.288" status="PASS" endtime="20170419 22:23:41.291"></status>
</kw>
<status starttime="20170419 22:23:41.288" status="PASS" endtime="20170419 22:23:41.291"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:23:41.354">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170419 22:23:41.354">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 22:23:41.291" status="PASS" endtime="20170419 22:23:41.354"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:23:41.355">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170419 22:23:41.355" status="PASS" endtime="20170419 22:23:41.355"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:23:41.356">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170419 22:23:41.356" status="PASS" endtime="20170419 22:23:41.356"></status>
</kw>
<status starttime="20170419 22:23:41.356" status="PASS" endtime="20170419 22:23:41.356"></status>
</kw>
<status starttime="20170419 22:23:41.354" status="PASS" endtime="20170419 22:23:41.357"></status>
</kw>
<status starttime="20170419 22:23:41.354" status="PASS" endtime="20170419 22:23:41.357"></status>
</kw>
<msg level="INFO" timestamp="20170419 22:23:41.357">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 22:23:41.104" status="PASS" endtime="20170419 22:23:41.357"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:23:41.357">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 22:23:41.357" status="PASS" endtime="20170419 22:23:41.357"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:23:41.358">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170419 22:23:41.358">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170419 22:23:41.358">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170419 22:23:41.358" status="PASS" endtime="20170419 22:23:41.358"></status>
</kw>
<msg level="INFO" timestamp="20170419 22:23:41.359">${state} = xyz.openbmc_project.State.Host.HostState.Off</msg>
<status starttime="20170419 22:23:41.104" status="PASS" endtime="20170419 22:23:41.359"></status>
</kw>
<msg level="INFO" timestamp="20170419 22:23:41.359">${host_state} = Off</msg>
<status starttime="20170419 22:23:41.103" status="PASS" endtime="20170419 22:23:41.359"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170419 22:23:41.360">Running != Off</msg>
<status starttime="20170419 22:23:41.359" status="FAIL" endtime="20170419 22:23:41.360"></status>
</kw>
<status starttime="20170419 22:23:41.103" status="FAIL" endtime="20170419 22:23:41.360"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:23:51.364">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170419 22:23:51.363" status="PASS" endtime="20170419 22:23:51.364"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:23:51.365">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170419 22:23:51.364" status="PASS" endtime="20170419 22:23:51.365"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:23:51.365">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170419 22:23:51.365" status="PASS" endtime="20170419 22:23:51.365"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:23:51.366">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170419 22:23:51.365" status="PASS" endtime="20170419 22:23:51.366"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:23:51.542">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170419 22:23:51.367" status="PASS" endtime="20170419 22:23:51.543"></status>
</kw>
<msg level="INFO" timestamp="20170419 22:23:51.543">${status} = PASS</msg>
<msg level="INFO" timestamp="20170419 22:23:51.543">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 22:23:51.366" status="PASS" endtime="20170419 22:23:51.543"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:23:51.543">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 22:23:51.543" status="PASS" endtime="20170419 22:23:51.544"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:23:51.544">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 22:23:51.544" status="PASS" endtime="20170419 22:23:51.544"></status>
</kw>
<status starttime="20170419 22:23:51.363" status="PASS" endtime="20170419 22:23:51.544"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:23:51.545">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170419 22:23:51.545" status="PASS" endtime="20170419 22:23:51.545"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:23:51.547">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170419 22:23:51.546" status="PASS" endtime="20170419 22:23:51.547"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:23:51.548">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170419 22:23:51.548" status="PASS" endtime="20170419 22:23:51.548"></status>
</kw>
<status starttime="20170419 22:23:51.547" status="PASS" endtime="20170419 22:23:51.548"></status>
</kw>
<status starttime="20170419 22:23:51.546" status="PASS" endtime="20170419 22:23:51.548"></status>
</kw>
<status starttime="20170419 22:23:51.545" status="PASS" endtime="20170419 22:23:51.548"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:23:51.611">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170419 22:23:51.611">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 22:23:51.549" status="PASS" endtime="20170419 22:23:51.611"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:23:51.613">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170419 22:23:51.612" status="PASS" endtime="20170419 22:23:51.613"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:23:51.614">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170419 22:23:51.614" status="PASS" endtime="20170419 22:23:51.614"></status>
</kw>
<status starttime="20170419 22:23:51.613" status="PASS" endtime="20170419 22:23:51.614"></status>
</kw>
<status starttime="20170419 22:23:51.612" status="PASS" endtime="20170419 22:23:51.614"></status>
</kw>
<status starttime="20170419 22:23:51.612" status="PASS" endtime="20170419 22:23:51.614"></status>
</kw>
<msg level="INFO" timestamp="20170419 22:23:51.615">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 22:23:51.362" status="PASS" endtime="20170419 22:23:51.615"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:23:51.615">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 22:23:51.615" status="PASS" endtime="20170419 22:23:51.615"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:23:51.616">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170419 22:23:51.616">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170419 22:23:51.616">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170419 22:23:51.615" status="PASS" endtime="20170419 22:23:51.616"></status>
</kw>
<msg level="INFO" timestamp="20170419 22:23:51.616">${state} = xyz.openbmc_project.State.Host.HostState.Off</msg>
<status starttime="20170419 22:23:51.361" status="PASS" endtime="20170419 22:23:51.616"></status>
</kw>
<msg level="INFO" timestamp="20170419 22:23:51.617">${host_state} = Off</msg>
<status starttime="20170419 22:23:51.361" status="PASS" endtime="20170419 22:23:51.617"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170419 22:23:51.617">Running != Off</msg>
<status starttime="20170419 22:23:51.617" status="FAIL" endtime="20170419 22:23:51.617"></status>
</kw>
<status starttime="20170419 22:23:51.360" status="FAIL" endtime="20170419 22:23:51.617"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:24:01.621">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170419 22:24:01.621" status="PASS" endtime="20170419 22:24:01.622"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:24:01.623">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170419 22:24:01.622" status="PASS" endtime="20170419 22:24:01.623"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:24:01.623">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170419 22:24:01.623" status="PASS" endtime="20170419 22:24:01.623"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:24:01.624">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170419 22:24:01.623" status="PASS" endtime="20170419 22:24:01.624"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:24:01.800">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170419 22:24:01.625" status="PASS" endtime="20170419 22:24:01.801"></status>
</kw>
<msg level="INFO" timestamp="20170419 22:24:01.801">${status} = PASS</msg>
<msg level="INFO" timestamp="20170419 22:24:01.801">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 22:24:01.624" status="PASS" endtime="20170419 22:24:01.801"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:24:01.801">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 22:24:01.801" status="PASS" endtime="20170419 22:24:01.801"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:24:01.802">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 22:24:01.802" status="PASS" endtime="20170419 22:24:01.802"></status>
</kw>
<status starttime="20170419 22:24:01.620" status="PASS" endtime="20170419 22:24:01.802"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:24:01.803">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170419 22:24:01.803" status="PASS" endtime="20170419 22:24:01.803"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:24:01.805">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170419 22:24:01.804" status="PASS" endtime="20170419 22:24:01.805"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:24:01.806">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170419 22:24:01.806" status="PASS" endtime="20170419 22:24:01.807"></status>
</kw>
<status starttime="20170419 22:24:01.805" status="PASS" endtime="20170419 22:24:01.807"></status>
</kw>
<status starttime="20170419 22:24:01.804" status="PASS" endtime="20170419 22:24:01.807"></status>
</kw>
<status starttime="20170419 22:24:01.803" status="PASS" endtime="20170419 22:24:01.807"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:24:01.870">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170419 22:24:01.870">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 22:24:01.807" status="PASS" endtime="20170419 22:24:01.870"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:24:01.872">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170419 22:24:01.872" status="PASS" endtime="20170419 22:24:01.872"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:24:01.873">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170419 22:24:01.873" status="PASS" endtime="20170419 22:24:01.873"></status>
</kw>
<status starttime="20170419 22:24:01.872" status="PASS" endtime="20170419 22:24:01.873"></status>
</kw>
<status starttime="20170419 22:24:01.871" status="PASS" endtime="20170419 22:24:01.873"></status>
</kw>
<status starttime="20170419 22:24:01.871" status="PASS" endtime="20170419 22:24:01.873"></status>
</kw>
<msg level="INFO" timestamp="20170419 22:24:01.874">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 22:24:01.619" status="PASS" endtime="20170419 22:24:01.874"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:24:01.874">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 22:24:01.874" status="PASS" endtime="20170419 22:24:01.874"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:24:01.875">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170419 22:24:01.875">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170419 22:24:01.875">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170419 22:24:01.875" status="PASS" endtime="20170419 22:24:01.875"></status>
</kw>
<msg level="INFO" timestamp="20170419 22:24:01.875">${state} = xyz.openbmc_project.State.Host.HostState.Off</msg>
<status starttime="20170419 22:24:01.619" status="PASS" endtime="20170419 22:24:01.875"></status>
</kw>
<msg level="INFO" timestamp="20170419 22:24:01.876">${host_state} = Off</msg>
<status starttime="20170419 22:24:01.618" status="PASS" endtime="20170419 22:24:01.876"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170419 22:24:01.876">Running != Off</msg>
<status starttime="20170419 22:24:01.876" status="FAIL" endtime="20170419 22:24:01.876"></status>
</kw>
<status starttime="20170419 22:24:01.618" status="FAIL" endtime="20170419 22:24:01.877"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:24:11.881">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170419 22:24:11.880" status="PASS" endtime="20170419 22:24:11.881"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:24:11.881">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170419 22:24:11.881" status="PASS" endtime="20170419 22:24:11.882"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:24:11.882">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170419 22:24:11.882" status="PASS" endtime="20170419 22:24:11.882"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:24:11.883">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170419 22:24:11.882" status="PASS" endtime="20170419 22:24:11.883"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:24:12.059">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170419 22:24:11.884" status="PASS" endtime="20170419 22:24:12.060"></status>
</kw>
<msg level="INFO" timestamp="20170419 22:24:12.060">${status} = PASS</msg>
<msg level="INFO" timestamp="20170419 22:24:12.060">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 22:24:11.883" status="PASS" endtime="20170419 22:24:12.060"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:24:12.060">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 22:24:12.060" status="PASS" endtime="20170419 22:24:12.061"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:24:12.061">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 22:24:12.061" status="PASS" endtime="20170419 22:24:12.061"></status>
</kw>
<status starttime="20170419 22:24:11.880" status="PASS" endtime="20170419 22:24:12.061"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:24:12.062">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170419 22:24:12.062" status="PASS" endtime="20170419 22:24:12.062"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:24:12.064">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170419 22:24:12.063" status="PASS" endtime="20170419 22:24:12.064"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:24:12.065">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170419 22:24:12.065" status="PASS" endtime="20170419 22:24:12.065"></status>
</kw>
<status starttime="20170419 22:24:12.064" status="PASS" endtime="20170419 22:24:12.066"></status>
</kw>
<status starttime="20170419 22:24:12.063" status="PASS" endtime="20170419 22:24:12.066"></status>
</kw>
<status starttime="20170419 22:24:12.062" status="PASS" endtime="20170419 22:24:12.066"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:24:12.129">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170419 22:24:12.129">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 22:24:12.066" status="PASS" endtime="20170419 22:24:12.129"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:24:12.131">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170419 22:24:12.131" status="PASS" endtime="20170419 22:24:12.131"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:24:12.132">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170419 22:24:12.132" status="PASS" endtime="20170419 22:24:12.132"></status>
</kw>
<status starttime="20170419 22:24:12.131" status="PASS" endtime="20170419 22:24:12.132"></status>
</kw>
<status starttime="20170419 22:24:12.130" status="PASS" endtime="20170419 22:24:12.132"></status>
</kw>
<status starttime="20170419 22:24:12.130" status="PASS" endtime="20170419 22:24:12.132"></status>
</kw>
<msg level="INFO" timestamp="20170419 22:24:12.132">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 22:24:11.879" status="PASS" endtime="20170419 22:24:12.133"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:24:12.133">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 22:24:12.133" status="PASS" endtime="20170419 22:24:12.133"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:24:12.134">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170419 22:24:12.134">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170419 22:24:12.134">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170419 22:24:12.133" status="PASS" endtime="20170419 22:24:12.134"></status>
</kw>
<msg level="INFO" timestamp="20170419 22:24:12.134">${state} = xyz.openbmc_project.State.Host.HostState.Off</msg>
<status starttime="20170419 22:24:11.878" status="PASS" endtime="20170419 22:24:12.134"></status>
</kw>
<msg level="INFO" timestamp="20170419 22:24:12.134">${host_state} = Off</msg>
<status starttime="20170419 22:24:11.878" status="PASS" endtime="20170419 22:24:12.135"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170419 22:24:12.135">Running != Off</msg>
<status starttime="20170419 22:24:12.135" status="FAIL" endtime="20170419 22:24:12.135"></status>
</kw>
<status starttime="20170419 22:24:11.877" status="FAIL" endtime="20170419 22:24:12.135"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:24:22.139">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170419 22:24:22.138" status="PASS" endtime="20170419 22:24:22.139"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:24:22.140">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170419 22:24:22.139" status="PASS" endtime="20170419 22:24:22.140"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:24:22.140">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170419 22:24:22.140" status="PASS" endtime="20170419 22:24:22.140"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:24:22.141">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170419 22:24:22.141" status="PASS" endtime="20170419 22:24:22.141"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:24:22.370">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170419 22:24:22.142" status="PASS" endtime="20170419 22:24:22.371"></status>
</kw>
<msg level="INFO" timestamp="20170419 22:24:22.371">${status} = PASS</msg>
<msg level="INFO" timestamp="20170419 22:24:22.371">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 22:24:22.141" status="PASS" endtime="20170419 22:24:22.371"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:24:22.372">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 22:24:22.371" status="PASS" endtime="20170419 22:24:22.372"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:24:22.372">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 22:24:22.372" status="PASS" endtime="20170419 22:24:22.372"></status>
</kw>
<status starttime="20170419 22:24:22.138" status="PASS" endtime="20170419 22:24:22.372"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:24:22.373">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170419 22:24:22.373" status="PASS" endtime="20170419 22:24:22.373"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:24:22.375">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170419 22:24:22.374" status="PASS" endtime="20170419 22:24:22.375"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:24:22.376">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170419 22:24:22.376" status="PASS" endtime="20170419 22:24:22.376"></status>
</kw>
<status starttime="20170419 22:24:22.375" status="PASS" endtime="20170419 22:24:22.376"></status>
</kw>
<status starttime="20170419 22:24:22.374" status="PASS" endtime="20170419 22:24:22.376"></status>
</kw>
<status starttime="20170419 22:24:22.373" status="PASS" endtime="20170419 22:24:22.376"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:24:22.439">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170419 22:24:22.440">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 22:24:22.377" status="PASS" endtime="20170419 22:24:22.440"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:24:22.441">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170419 22:24:22.441" status="PASS" endtime="20170419 22:24:22.442"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:24:22.442">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170419 22:24:22.442" status="PASS" endtime="20170419 22:24:22.442"></status>
</kw>
<status starttime="20170419 22:24:22.442" status="PASS" endtime="20170419 22:24:22.443"></status>
</kw>
<status starttime="20170419 22:24:22.440" status="PASS" endtime="20170419 22:24:22.443"></status>
</kw>
<status starttime="20170419 22:24:22.440" status="PASS" endtime="20170419 22:24:22.443"></status>
</kw>
<msg level="INFO" timestamp="20170419 22:24:22.443">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 22:24:22.137" status="PASS" endtime="20170419 22:24:22.443"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:24:22.444">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 22:24:22.443" status="PASS" endtime="20170419 22:24:22.444"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:24:22.444">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170419 22:24:22.444">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170419 22:24:22.444">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170419 22:24:22.444" status="PASS" endtime="20170419 22:24:22.444"></status>
</kw>
<msg level="INFO" timestamp="20170419 22:24:22.445">${state} = xyz.openbmc_project.State.Host.HostState.Off</msg>
<status starttime="20170419 22:24:22.137" status="PASS" endtime="20170419 22:24:22.445"></status>
</kw>
<msg level="INFO" timestamp="20170419 22:24:22.445">${host_state} = Off</msg>
<status starttime="20170419 22:24:22.136" status="PASS" endtime="20170419 22:24:22.445"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170419 22:24:22.446">Running != Off</msg>
<status starttime="20170419 22:24:22.445" status="FAIL" endtime="20170419 22:24:22.446"></status>
</kw>
<status starttime="20170419 22:24:22.136" status="FAIL" endtime="20170419 22:24:22.446"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:24:32.450">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170419 22:24:32.450" status="PASS" endtime="20170419 22:24:32.451"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:24:32.452">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170419 22:24:32.452" status="PASS" endtime="20170419 22:24:32.452"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:24:32.453">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170419 22:24:32.453" status="PASS" endtime="20170419 22:24:32.453"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:24:32.454">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170419 22:24:32.453" status="PASS" endtime="20170419 22:24:32.454"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:24:32.636">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170419 22:24:32.455" status="PASS" endtime="20170419 22:24:32.636"></status>
</kw>
<msg level="INFO" timestamp="20170419 22:24:32.636">${status} = PASS</msg>
<msg level="INFO" timestamp="20170419 22:24:32.637">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 22:24:32.454" status="PASS" endtime="20170419 22:24:32.637"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:24:32.637">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 22:24:32.637" status="PASS" endtime="20170419 22:24:32.637"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:24:32.638">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 22:24:32.638" status="PASS" endtime="20170419 22:24:32.638"></status>
</kw>
<status starttime="20170419 22:24:32.449" status="PASS" endtime="20170419 22:24:32.638"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:24:32.639">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170419 22:24:32.638" status="PASS" endtime="20170419 22:24:32.639"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:24:32.641">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170419 22:24:32.640" status="PASS" endtime="20170419 22:24:32.641"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:24:32.642">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170419 22:24:32.641" status="PASS" endtime="20170419 22:24:32.642"></status>
</kw>
<status starttime="20170419 22:24:32.641" status="PASS" endtime="20170419 22:24:32.642"></status>
</kw>
<status starttime="20170419 22:24:32.639" status="PASS" endtime="20170419 22:24:32.642"></status>
</kw>
<status starttime="20170419 22:24:32.639" status="PASS" endtime="20170419 22:24:32.642"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:24:32.706">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170419 22:24:32.706">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 22:24:32.642" status="PASS" endtime="20170419 22:24:32.707"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:24:32.708">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170419 22:24:32.708" status="PASS" endtime="20170419 22:24:32.708"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:24:32.709">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170419 22:24:32.709" status="PASS" endtime="20170419 22:24:32.710"></status>
</kw>
<status starttime="20170419 22:24:32.708" status="PASS" endtime="20170419 22:24:32.710"></status>
</kw>
<status starttime="20170419 22:24:32.707" status="PASS" endtime="20170419 22:24:32.710"></status>
</kw>
<status starttime="20170419 22:24:32.707" status="PASS" endtime="20170419 22:24:32.710"></status>
</kw>
<msg level="INFO" timestamp="20170419 22:24:32.710">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 22:24:32.448" status="PASS" endtime="20170419 22:24:32.710"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:24:32.711">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 22:24:32.710" status="PASS" endtime="20170419 22:24:32.711"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:24:32.711">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170419 22:24:32.711">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170419 22:24:32.711">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170419 22:24:32.711" status="PASS" endtime="20170419 22:24:32.712"></status>
</kw>
<msg level="INFO" timestamp="20170419 22:24:32.712">${state} = xyz.openbmc_project.State.Host.HostState.Off</msg>
<status starttime="20170419 22:24:32.447" status="PASS" endtime="20170419 22:24:32.712"></status>
</kw>
<msg level="INFO" timestamp="20170419 22:24:32.712">${host_state} = Off</msg>
<status starttime="20170419 22:24:32.447" status="PASS" endtime="20170419 22:24:32.712"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170419 22:24:32.713">Running != Off</msg>
<status starttime="20170419 22:24:32.712" status="FAIL" endtime="20170419 22:24:32.713"></status>
</kw>
<status starttime="20170419 22:24:32.446" status="FAIL" endtime="20170419 22:24:32.713"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:24:42.717">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170419 22:24:42.716" status="PASS" endtime="20170419 22:24:42.717"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:24:42.717">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170419 22:24:42.717" status="PASS" endtime="20170419 22:24:42.718"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:24:42.718">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170419 22:24:42.718" status="PASS" endtime="20170419 22:24:42.718"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:24:42.719">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170419 22:24:42.718" status="PASS" endtime="20170419 22:24:42.719"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:24:42.894">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170419 22:24:42.719" status="PASS" endtime="20170419 22:24:42.895"></status>
</kw>
<msg level="INFO" timestamp="20170419 22:24:42.895">${status} = PASS</msg>
<msg level="INFO" timestamp="20170419 22:24:42.895">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 22:24:42.719" status="PASS" endtime="20170419 22:24:42.895"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:24:42.895">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 22:24:42.895" status="PASS" endtime="20170419 22:24:42.896"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:24:42.896">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 22:24:42.896" status="PASS" endtime="20170419 22:24:42.896"></status>
</kw>
<status starttime="20170419 22:24:42.716" status="PASS" endtime="20170419 22:24:42.896"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:24:42.897">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170419 22:24:42.897" status="PASS" endtime="20170419 22:24:42.897"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:24:42.899">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170419 22:24:42.899" status="PASS" endtime="20170419 22:24:42.899"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:24:42.900">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170419 22:24:42.900" status="PASS" endtime="20170419 22:24:42.900"></status>
</kw>
<status starttime="20170419 22:24:42.900" status="PASS" endtime="20170419 22:24:42.900"></status>
</kw>
<status starttime="20170419 22:24:42.898" status="PASS" endtime="20170419 22:24:42.901"></status>
</kw>
<status starttime="20170419 22:24:42.897" status="PASS" endtime="20170419 22:24:42.901"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:24:42.964">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170419 22:24:42.964">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 22:24:42.901" status="PASS" endtime="20170419 22:24:42.964"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:24:42.966">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170419 22:24:42.965" status="PASS" endtime="20170419 22:24:42.966"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:24:42.967">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170419 22:24:42.967" status="PASS" endtime="20170419 22:24:42.967"></status>
</kw>
<status starttime="20170419 22:24:42.966" status="PASS" endtime="20170419 22:24:42.967"></status>
</kw>
<status starttime="20170419 22:24:42.965" status="PASS" endtime="20170419 22:24:42.967"></status>
</kw>
<status starttime="20170419 22:24:42.965" status="PASS" endtime="20170419 22:24:42.967"></status>
</kw>
<msg level="INFO" timestamp="20170419 22:24:42.968">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 22:24:42.715" status="PASS" endtime="20170419 22:24:42.968"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:24:42.968">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 22:24:42.968" status="PASS" endtime="20170419 22:24:42.968"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:24:42.969">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170419 22:24:42.969">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170419 22:24:42.969">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170419 22:24:42.968" status="PASS" endtime="20170419 22:24:42.969"></status>
</kw>
<msg level="INFO" timestamp="20170419 22:24:42.969">${state} = xyz.openbmc_project.State.Host.HostState.Off</msg>
<status starttime="20170419 22:24:42.714" status="PASS" endtime="20170419 22:24:42.969"></status>
</kw>
<msg level="INFO" timestamp="20170419 22:24:42.970">${host_state} = Off</msg>
<status starttime="20170419 22:24:42.714" status="PASS" endtime="20170419 22:24:42.970"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170419 22:24:42.970">Running != Off</msg>
<status starttime="20170419 22:24:42.970" status="FAIL" endtime="20170419 22:24:42.970"></status>
</kw>
<status starttime="20170419 22:24:42.713" status="FAIL" endtime="20170419 22:24:42.971"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:24:52.974">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170419 22:24:52.974" status="PASS" endtime="20170419 22:24:52.975"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:24:52.975">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170419 22:24:52.975" status="PASS" endtime="20170419 22:24:52.975"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:24:52.976">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170419 22:24:52.976" status="PASS" endtime="20170419 22:24:52.976"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:24:52.977">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170419 22:24:52.976" status="PASS" endtime="20170419 22:24:52.977"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:24:53.154">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170419 22:24:52.977" status="PASS" endtime="20170419 22:24:53.154"></status>
</kw>
<msg level="INFO" timestamp="20170419 22:24:53.154">${status} = PASS</msg>
<msg level="INFO" timestamp="20170419 22:24:53.154">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 22:24:52.977" status="PASS" endtime="20170419 22:24:53.154"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:24:53.155">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 22:24:53.154" status="PASS" endtime="20170419 22:24:53.155"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:24:53.155">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 22:24:53.155" status="PASS" endtime="20170419 22:24:53.156"></status>
</kw>
<status starttime="20170419 22:24:52.973" status="PASS" endtime="20170419 22:24:53.156"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:24:53.156">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170419 22:24:53.156" status="PASS" endtime="20170419 22:24:53.156"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:24:53.158">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170419 22:24:53.158" status="PASS" endtime="20170419 22:24:53.158"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:24:53.159">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170419 22:24:53.159" status="PASS" endtime="20170419 22:24:53.159"></status>
</kw>
<status starttime="20170419 22:24:53.158" status="PASS" endtime="20170419 22:24:53.159"></status>
</kw>
<status starttime="20170419 22:24:53.157" status="PASS" endtime="20170419 22:24:53.160"></status>
</kw>
<status starttime="20170419 22:24:53.157" status="PASS" endtime="20170419 22:24:53.160"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:24:53.223">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170419 22:24:53.223">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 22:24:53.160" status="PASS" endtime="20170419 22:24:53.223"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:24:53.225">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170419 22:24:53.224" status="PASS" endtime="20170419 22:24:53.225"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:24:53.226">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170419 22:24:53.226" status="PASS" endtime="20170419 22:24:53.226"></status>
</kw>
<status starttime="20170419 22:24:53.225" status="PASS" endtime="20170419 22:24:53.226"></status>
</kw>
<status starttime="20170419 22:24:53.224" status="PASS" endtime="20170419 22:24:53.226"></status>
</kw>
<status starttime="20170419 22:24:53.223" status="PASS" endtime="20170419 22:24:53.226"></status>
</kw>
<msg level="INFO" timestamp="20170419 22:24:53.226">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 22:24:52.973" status="PASS" endtime="20170419 22:24:53.227"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:24:53.227">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 22:24:53.227" status="PASS" endtime="20170419 22:24:53.227"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:24:53.228">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170419 22:24:53.228">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170419 22:24:53.228">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170419 22:24:53.227" status="PASS" endtime="20170419 22:24:53.228"></status>
</kw>
<msg level="INFO" timestamp="20170419 22:24:53.228">${state} = xyz.openbmc_project.State.Host.HostState.Off</msg>
<status starttime="20170419 22:24:52.972" status="PASS" endtime="20170419 22:24:53.228"></status>
</kw>
<msg level="INFO" timestamp="20170419 22:24:53.228">${host_state} = Off</msg>
<status starttime="20170419 22:24:52.972" status="PASS" endtime="20170419 22:24:53.229"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170419 22:24:53.229">Running != Off</msg>
<status starttime="20170419 22:24:53.229" status="FAIL" endtime="20170419 22:24:53.229"></status>
</kw>
<status starttime="20170419 22:24:52.971" status="FAIL" endtime="20170419 22:24:53.229"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:25:03.233">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170419 22:25:03.233" status="PASS" endtime="20170419 22:25:03.234"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:25:03.234">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170419 22:25:03.234" status="PASS" endtime="20170419 22:25:03.235"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:25:03.235">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170419 22:25:03.235" status="PASS" endtime="20170419 22:25:03.235"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:25:03.236">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170419 22:25:03.235" status="PASS" endtime="20170419 22:25:03.236"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:25:03.412">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170419 22:25:03.236" status="PASS" endtime="20170419 22:25:03.412"></status>
</kw>
<msg level="INFO" timestamp="20170419 22:25:03.412">${status} = PASS</msg>
<msg level="INFO" timestamp="20170419 22:25:03.412">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 22:25:03.236" status="PASS" endtime="20170419 22:25:03.412"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:25:03.412">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 22:25:03.412" status="PASS" endtime="20170419 22:25:03.413"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:25:03.413">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 22:25:03.413" status="PASS" endtime="20170419 22:25:03.413"></status>
</kw>
<status starttime="20170419 22:25:03.232" status="PASS" endtime="20170419 22:25:03.413"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:25:03.414">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170419 22:25:03.414" status="PASS" endtime="20170419 22:25:03.414"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:25:03.416">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170419 22:25:03.415" status="PASS" endtime="20170419 22:25:03.416"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:25:03.417">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170419 22:25:03.417" status="PASS" endtime="20170419 22:25:03.417"></status>
</kw>
<status starttime="20170419 22:25:03.416" status="PASS" endtime="20170419 22:25:03.417"></status>
</kw>
<status starttime="20170419 22:25:03.415" status="PASS" endtime="20170419 22:25:03.417"></status>
</kw>
<status starttime="20170419 22:25:03.414" status="PASS" endtime="20170419 22:25:03.417"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:25:03.480">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170419 22:25:03.480">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 22:25:03.418" status="PASS" endtime="20170419 22:25:03.480"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:25:03.484">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170419 22:25:03.481" status="PASS" endtime="20170419 22:25:03.484"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:25:03.485">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170419 22:25:03.484" status="PASS" endtime="20170419 22:25:03.485"></status>
</kw>
<status starttime="20170419 22:25:03.484" status="PASS" endtime="20170419 22:25:03.485"></status>
</kw>
<status starttime="20170419 22:25:03.481" status="PASS" endtime="20170419 22:25:03.485"></status>
</kw>
<status starttime="20170419 22:25:03.480" status="PASS" endtime="20170419 22:25:03.485"></status>
</kw>
<msg level="INFO" timestamp="20170419 22:25:03.485">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 22:25:03.231" status="PASS" endtime="20170419 22:25:03.485"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:25:03.486">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 22:25:03.486" status="PASS" endtime="20170419 22:25:03.486"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:25:03.487">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170419 22:25:03.487">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170419 22:25:03.487">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170419 22:25:03.486" status="PASS" endtime="20170419 22:25:03.487"></status>
</kw>
<msg level="INFO" timestamp="20170419 22:25:03.487">${state} = xyz.openbmc_project.State.Host.HostState.Off</msg>
<status starttime="20170419 22:25:03.231" status="PASS" endtime="20170419 22:25:03.487"></status>
</kw>
<msg level="INFO" timestamp="20170419 22:25:03.487">${host_state} = Off</msg>
<status starttime="20170419 22:25:03.230" status="PASS" endtime="20170419 22:25:03.487"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170419 22:25:03.488">Running != Off</msg>
<status starttime="20170419 22:25:03.488" status="FAIL" endtime="20170419 22:25:03.488"></status>
</kw>
<status starttime="20170419 22:25:03.230" status="FAIL" endtime="20170419 22:25:03.488"></status>
</kw>
<msg level="FAIL" timestamp="20170419 22:25:03.488">Keyword 'Is Host Running' failed after retrying for 10 minutes. The last error was: Running != Off</msg>
<status starttime="20170419 22:14:57.482" status="FAIL" endtime="20170419 22:25:03.488"></status>
</kw>
<status starttime="20170419 22:14:57.129" status="FAIL" endtime="20170419 22:25:03.489"></status>
</kw>
<status starttime="20170419 22:14:55.600" status="FAIL" endtime="20170419 22:25:03.489"></status>
</kw>
<status starttime="20170419 22:14:55.599" status="FAIL" endtime="20170419 22:25:03.489"></status>
</kw>
<kw type="teardown" name="Test Exit Logs">
<doc>Collect FFDC and SOL log.</doc>
<kw name="FFDC On Test Case Fail" library="openbmc_ffdc">
<doc>Generic FFDC entry point. Place holder to hook in</doc>
<kw name="Is Host Quiesced" library="state_manager">
<doc>Check if host state is quiesced.</doc>
<assign>
<var>${status}</var>
</assign>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:25:03.493">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170419 22:25:03.493" status="PASS" endtime="20170419 22:25:03.493"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:25:03.494">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170419 22:25:03.493" status="PASS" endtime="20170419 22:25:03.494"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:25:03.494">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170419 22:25:03.494" status="PASS" endtime="20170419 22:25:03.494"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:25:03.495">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170419 22:25:03.495" status="PASS" endtime="20170419 22:25:03.495"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:25:03.677">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170419 22:25:03.496" status="PASS" endtime="20170419 22:25:03.677"></status>
</kw>
<msg level="INFO" timestamp="20170419 22:25:03.677">${status} = PASS</msg>
<msg level="INFO" timestamp="20170419 22:25:03.677">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 22:25:03.495" status="PASS" endtime="20170419 22:25:03.677"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:25:03.678">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 22:25:03.678" status="PASS" endtime="20170419 22:25:03.678"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:25:03.679">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 22:25:03.678" status="PASS" endtime="20170419 22:25:03.679"></status>
</kw>
<status starttime="20170419 22:25:03.492" status="PASS" endtime="20170419 22:25:03.679"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:25:03.680">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170419 22:25:03.679" status="PASS" endtime="20170419 22:25:03.680"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:25:03.682">${msg} = URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170419 22:25:03.681" status="PASS" endtime="20170419 22:25:03.682"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:25:03.683">URI:https://9.3.86.161:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170419 22:25:03.683" status="PASS" endtime="20170419 22:25:03.683"></status>
</kw>
<status starttime="20170419 22:25:03.682" status="PASS" endtime="20170419 22:25:03.683"></status>
</kw>
<status starttime="20170419 22:25:03.681" status="PASS" endtime="20170419 22:25:03.683"></status>
</kw>
<status starttime="20170419 22:25:03.680" status="PASS" endtime="20170419 22:25:03.683"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:25:03.745">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170419 22:25:03.745">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 22:25:03.684" status="PASS" endtime="20170419 22:25:03.746"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:25:03.747">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170419 22:25:03.747" status="PASS" endtime="20170419 22:25:03.747"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:25:03.748">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170419 22:25:03.748" status="PASS" endtime="20170419 22:25:03.748"></status>
</kw>
<status starttime="20170419 22:25:03.747" status="PASS" endtime="20170419 22:25:03.748"></status>
</kw>
<status starttime="20170419 22:25:03.746" status="PASS" endtime="20170419 22:25:03.749"></status>
</kw>
<status starttime="20170419 22:25:03.746" status="PASS" endtime="20170419 22:25:03.749"></status>
</kw>
<msg level="INFO" timestamp="20170419 22:25:03.749">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 22:25:03.491" status="PASS" endtime="20170419 22:25:03.749"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:25:03.749">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 22:25:03.749" status="PASS" endtime="20170419 22:25:03.749"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:25:03.750">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170419 22:25:03.750">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170419 22:25:03.750">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170419 22:25:03.750" status="PASS" endtime="20170419 22:25:03.750"></status>
</kw>
<msg level="INFO" timestamp="20170419 22:25:03.750">${state} = xyz.openbmc_project.State.Host.HostState.Off</msg>
<status starttime="20170419 22:25:03.491" status="PASS" endtime="20170419 22:25:03.750"></status>
</kw>
<msg level="INFO" timestamp="20170419 22:25:03.751">${host_state} = Off</msg>
<status starttime="20170419 22:25:03.490" status="PASS" endtime="20170419 22:25:03.751"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal</arg>
<arg>${host_state}</arg>
<arg>Quiesced</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${host_state}</arg>
<arg>Quiesced</arg>
</arguments>
<msg level="FAIL" timestamp="20170419 22:25:03.752">Off != Quiesced</msg>
<status starttime="20170419 22:25:03.751" status="FAIL" endtime="20170419 22:25:03.752"></status>
</kw>
<msg level="INFO" timestamp="20170419 22:25:03.752">${status} = False</msg>
<status starttime="20170419 22:25:03.751" status="PASS" endtime="20170419 22:25:03.752"></status>
</kw>
<msg level="INFO" timestamp="20170419 22:25:03.752">${status} = False</msg>
<status starttime="20170419 22:25:03.490" status="PASS" endtime="20170419 22:25:03.752"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${TEST_STATUS}' == 'FAIL' or '${status}'=='True'</arg>
<arg>FFDC</arg>
</arguments>
<kw name="Ffdc" library="openbmc_ffdc">
<doc>Gather First Failure Data Capture (FFDC).</doc>
<kw name="Ping Host" library="utils">
<arguments>
<arg>9.3.86.161</arg>
</arguments>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${host}</arg>
<arg>msg=No host provided</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:25:03.754">Length is 10</msg>
<status starttime="20170419 22:25:03.754" status="PASS" endtime="20170419 22:25:03.754"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>ping -c 4 ${host}</arg>
</arguments>
<assign>
<var>${RC}</var>
<var>${output}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:25:03.759">Running command 'ping -c 4 9.3.86.161 2&gt;&amp;1'.</msg>
<msg level="INFO" timestamp="20170419 22:25:06.764">${RC} = 0</msg>
<msg level="INFO" timestamp="20170419 22:25:06.765">${output} = PING 9.3.86.161 (9.3.86.161) 56(84) bytes of data.
64 bytes from 9.3.86.161: icmp_seq=1 ttl=62 time=1.40 ms
64 bytes from 9.3.86.161: icmp_seq=2 ttl=62 time=0.619 ms
64 bytes from 9.3.86.161: icmp_seq...</msg>
<status starttime="20170419 22:25:03.755" status="PASS" endtime="20170419 22:25:06.765"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>RC: ${RC}\nOutput:\n${output}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:25:06.768">RC: 0
Output:
PING 9.3.86.161 (9.3.86.161) 56(84) bytes of data.
64 bytes from 9.3.86.161: icmp_seq=1 ttl=62 time=1.40 ms
64 bytes from 9.3.86.161: icmp_seq=2 ttl=62 time=0.619 ms
64 bytes from 9.3.86.161: icmp_seq=3 ttl=62 time=0.611 ms
64 bytes from 9.3.86.161: icmp_seq=4 ttl=62 time=0.612 ms

--- 9.3.86.161 ping statistics ---
4 packets transmitted, 4 received, 0% packet loss, time 3000ms
rtt min/avg/max/mdev = 0.611/0.812/1.406/0.342 ms</msg>
<status starttime="20170419 22:25:06.767" status="PASS" endtime="20170419 22:25:06.768"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${RC}</arg>
<arg>${0}</arg>
</arguments>
<status starttime="20170419 22:25:06.768" status="PASS" endtime="20170419 22:25:06.769"></status>
</kw>
<status starttime="20170419 22:25:03.754" status="PASS" endtime="20170419 22:25:06.769"></status>
</kw>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg level="FAIL" timestamp="20170419 22:25:07.099">Dictionary does not contain key 'host'.</msg>
<status starttime="20170419 22:25:07.099" status="FAIL" endtime="20170419 22:25:07.099"></status>
</kw>
<msg level="INFO" timestamp="20170419 22:25:07.099">${has_host} = False</msg>
<status starttime="20170419 22:25:07.098" status="PASS" endtime="20170419 22:25:07.099"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status starttime="20170419 22:25:07.100" status="PASS" endtime="20170419 22:25:07.101"></status>
</kw>
<status starttime="20170419 22:25:07.100" status="PASS" endtime="20170419 22:25:07.101"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<kw name="User input SSH and HTTPs Ports" library="connection_client">
<doc>Update the global SSH and HTTPs port variable for QEMU</doc>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${SSH_PORT}</arg>
</arguments>
<assign>
<var>${port_num}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:25:07.103">${port_num} = 22</msg>
<status starttime="20170419 22:25:07.103" status="PASS" endtime="20170419 22:25:07.103"></status>
</kw>
<kw name="Replace Variables" library="BuiltIn">
<doc>Replaces variables in the given text with their current values.</doc>
<arguments>
<arg>${port_num}</arg>
</arguments>
<assign>
<var>${SSH_PORT}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:25:07.103">${SSH_PORT} = 22</msg>
<status starttime="20170419 22:25:07.103" status="PASS" endtime="20170419 22:25:07.104"></status>
</kw>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${HTTPS_PORT}</arg>
</arguments>
<assign>
<var>${https_num}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:25:07.104">${https_num} = 443</msg>
<status starttime="20170419 22:25:07.104" status="PASS" endtime="20170419 22:25:07.104"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${AUTH_URI}</arg>
<arg>https://${OPENBMC_HOST}:${https_num}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:25:07.105">${AUTH_URI} = https://9.3.86.161:443</msg>
<status starttime="20170419 22:25:07.105" status="PASS" endtime="20170419 22:25:07.106"></status>
</kw>
<status starttime="20170419 22:25:07.102" status="PASS" endtime="20170419 22:25:07.106"></status>
</kw>
<status starttime="20170419 22:25:07.101" status="PASS" endtime="20170419 22:25:07.106"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg level="FAIL" timestamp="20170419 22:25:07.107">Dictionary does not contain key 'port'.</msg>
<status starttime="20170419 22:25:07.106" status="FAIL" endtime="20170419 22:25:07.107"></status>
</kw>
<msg level="INFO" timestamp="20170419 22:25:07.107">${has_port} = False</msg>
<status starttime="20170419 22:25:07.106" status="PASS" endtime="20170419 22:25:07.107"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keywords" library="BuiltIn">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
</arguments>
<status starttime="20170419 22:25:07.108" status="PASS" endtime="20170419 22:25:07.109"></status>
</kw>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status starttime="20170419 22:25:07.109" status="PASS" endtime="20170419 22:25:07.109"></status>
</kw>
<status starttime="20170419 22:25:07.108" status="PASS" endtime="20170419 22:25:07.110"></status>
</kw>
<status starttime="20170419 22:25:07.107" status="PASS" endtime="20170419 22:25:07.111"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:25:07.112">Logging into '9.3.86.161:22' as 'root'.</msg>
<msg level="INFO" timestamp="20170419 22:25:08.757">Read output: root@witherspoon:~#</msg>
<status starttime="20170419 22:25:07.111" status="PASS" endtime="20170419 22:25:08.758"></status>
</kw>
<status starttime="20170419 22:25:07.097" status="PASS" endtime="20170419 22:25:08.758"></status>
</kw>
<kw name="Get Current Time Stamp" library="openbmc_ffdc_utils">
<doc>Get the current time stamp data</doc>
<kw name="Get Current Date" library="DateTime">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:25:08.777">${cur_time} = 2017-04-19 22:25:08:776485</msg>
<status starttime="20170419 22:25:08.776" status="PASS" endtime="20170419 22:25:08.777"></status>
</kw>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:25:08.777">${cur_time} = 20170419222508776485</msg>
<status starttime="20170419 22:25:08.777" status="PASS" endtime="20170419 22:25:08.777"></status>
</kw>
<status starttime="20170419 22:25:08.776" status="PASS" endtime="20170419 22:25:08.779"></status>
</kw>
<msg level="INFO" timestamp="20170419 22:25:08.783">${FFDC_TIME} = 20170419222508776485</msg>
<kw name="Get Test Dir and Name" library="openbmc_ffdc_utils">
<doc>SUITE_NAME and TEST_NAME are automatic variables</doc>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${SUITE_NAME}</arg>
</arguments>
<assign>
<var>${suite_name}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:25:08.792">${suite_name} = TestsTestBasicPoweron</msg>
<status starttime="20170419 22:25:08.791" status="PASS" endtime="20170419 22:25:08.792"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${FFDC_TIME}_</arg>
<arg>${suite_name}</arg>
</arguments>
<assign>
<var>${suite_name}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:25:08.792">${suite_name} = 20170419222508776485_TestsTestBasicPoweron</msg>
<status starttime="20170419 22:25:08.792" status="PASS" endtime="20170419 22:25:08.792"></status>
</kw>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${TEST_NAME}</arg>
</arguments>
<assign>
<var>${test_name}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:25:08.793">${test_name} = PowerOnTest</msg>
<status starttime="20170419 22:25:08.792" status="PASS" endtime="20170419 22:25:08.793"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${FFDC_TIME}_</arg>
<arg>${test_name}</arg>
</arguments>
<assign>
<var>${test_name}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:25:08.793">${test_name} = 20170419222508776485_PowerOnTest</msg>
<status starttime="20170419 22:25:08.793" status="PASS" endtime="20170419 22:25:08.793"></status>
</kw>
<status starttime="20170419 22:25:08.791" status="PASS" endtime="20170419 22:25:08.794"></status>
</kw>
<msg level="INFO" timestamp="20170419 22:25:08.819">${LOG_PREFIX} = /tmp/root/9272/obmc-robot/logs/20170419222508776485_TestsTestBasicPoweron/20170419222508776485_PowerOnTest/20170419222508776485_</msg>
<kw name="Create Directory" library="OperatingSystem">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>/tmp/root/9272/obmc-robot/logs/20170419222508776485_TestsTestBasicPoweron/20170419222508776485_PowerOnTest/</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:25:08.820" html="yes">Created directory '&lt;a href="file:///tmp/root/9272/obmc-robot/logs/20170419222508776485_TestsTestBasicPoweron/20170419222508776485_PowerOnTest"&gt;/tmp/root/9272/obmc-robot/logs/20170419222508776485_TestsTestBasicPoweron/20170419222508776485_PowerOnTest&lt;/a&gt;'.</msg>
<status starttime="20170419 22:25:08.820" status="PASS" endtime="20170419 22:25:08.821"></status>
</kw>
<msg level="INFO" timestamp="20170419 22:25:08.824">${FFDC_FILE_PATH} = /tmp/root/9272/obmc-robot/logs/20170419222508776485_TestsTestBasicPoweron/20170419222508776485_PowerOnTest/20170419222508776485_BMC_general.txt</msg>
<kw name="Header Message" library="openbmc_ffdc_utils">
<doc>Write header message to the report document manifest.</doc>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${HEADER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:25:08.827" html="yes">Appended to file '&lt;a href="file:///tmp/root/9272/obmc-robot/logs/20170419222508776485_TestsTestBasicPoweron/20170419222508776485_PowerOnTest/20170419222508776485_BMC_general.txt"&gt;/tmp/root/9272/obmc-robot/logs/20170419222508776485_TestsTestBasicPoweron/20170419222508776485_PowerOnTest/20170419222508776485_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170419 22:25:08.827" status="PASS" endtime="20170419 22:25:08.827"></status>
</kw>
<status starttime="20170419 22:25:08.825" status="PASS" endtime="20170419 22:25:08.828"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:25:08.829" html="yes">Appended to file '&lt;a href="file:///tmp/root/9272/obmc-robot/logs/20170419222508776485_TestsTestBasicPoweron/20170419222508776485_PowerOnTest/20170419222508776485_BMC_general.txt"&gt;/tmp/root/9272/obmc-robot/logs/20170419222508776485_TestsTestBasicPoweron/20170419222508776485_PowerOnTest/20170419222508776485_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170419 22:25:08.828" status="PASS" endtime="20170419 22:25:08.829"></status>
</kw>
<status starttime="20170419 22:25:08.828" status="PASS" endtime="20170419 22:25:08.829"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Suite File\t\t: ${SUITE_NAME} ${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:25:08.830" html="yes">Appended to file '&lt;a href="file:///tmp/root/9272/obmc-robot/logs/20170419222508776485_TestsTestBasicPoweron/20170419222508776485_PowerOnTest/20170419222508776485_BMC_general.txt"&gt;/tmp/root/9272/obmc-robot/logs/20170419222508776485_TestsTestBasicPoweron/20170419222508776485_PowerOnTest/20170419222508776485_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170419 22:25:08.830" status="PASS" endtime="20170419 22:25:08.830"></status>
</kw>
<status starttime="20170419 22:25:08.829" status="PASS" endtime="20170419 22:25:08.830"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Case Name\t\t: ${TEST_NAME}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:25:08.832" html="yes">Appended to file '&lt;a href="file:///tmp/root/9272/obmc-robot/logs/20170419222508776485_TestsTestBasicPoweron/20170419222508776485_PowerOnTest/20170419222508776485_BMC_general.txt"&gt;/tmp/root/9272/obmc-robot/logs/20170419222508776485_TestsTestBasicPoweron/20170419222508776485_PowerOnTest/20170419222508776485_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170419 22:25:08.831" status="PASS" endtime="20170419 22:25:08.832"></status>
</kw>
<status starttime="20170419 22:25:08.830" status="PASS" endtime="20170419 22:25:08.832"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Source File\t: ${SUITE_SOURCE}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:25:08.833" html="yes">Appended to file '&lt;a href="file:///tmp/root/9272/obmc-robot/logs/20170419222508776485_TestsTestBasicPoweron/20170419222508776485_PowerOnTest/20170419222508776485_BMC_general.txt"&gt;/tmp/root/9272/obmc-robot/logs/20170419222508776485_TestsTestBasicPoweron/20170419222508776485_PowerOnTest/20170419222508776485_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170419 22:25:08.833" status="PASS" endtime="20170419 22:25:08.833"></status>
</kw>
<status starttime="20170419 22:25:08.832" status="PASS" endtime="20170419 22:25:08.833"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Failure Time Stamp\t: ${FFDC_TIME}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:25:08.835" html="yes">Appended to file '&lt;a href="file:///tmp/root/9272/obmc-robot/logs/20170419222508776485_TestsTestBasicPoweron/20170419222508776485_PowerOnTest/20170419222508776485_BMC_general.txt"&gt;/tmp/root/9272/obmc-robot/logs/20170419222508776485_TestsTestBasicPoweron/20170419222508776485_PowerOnTest/20170419222508776485_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170419 22:25:08.834" status="PASS" endtime="20170419 22:25:08.835"></status>
</kw>
<status starttime="20170419 22:25:08.833" status="PASS" endtime="20170419 22:25:08.835"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Error Message\t: ${TEST_MESSAGE}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:25:08.836" html="yes">Appended to file '&lt;a href="file:///tmp/root/9272/obmc-robot/logs/20170419222508776485_TestsTestBasicPoweron/20170419222508776485_PowerOnTest/20170419222508776485_BMC_general.txt"&gt;/tmp/root/9272/obmc-robot/logs/20170419222508776485_TestsTestBasicPoweron/20170419222508776485_PowerOnTest/20170419222508776485_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170419 22:25:08.836" status="PASS" endtime="20170419 22:25:08.836"></status>
</kw>
<status starttime="20170419 22:25:08.835" status="PASS" endtime="20170419 22:25:08.836"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Documentation\t:${\n}${TEST_DOCUMENTATION}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:25:08.838" html="yes">Appended to file '&lt;a href="file:///tmp/root/9272/obmc-robot/logs/20170419222508776485_TestsTestBasicPoweron/20170419222508776485_PowerOnTest/20170419222508776485_BMC_general.txt"&gt;/tmp/root/9272/obmc-robot/logs/20170419222508776485_TestsTestBasicPoweron/20170419222508776485_PowerOnTest/20170419222508776485_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170419 22:25:08.837" status="PASS" endtime="20170419 22:25:08.838"></status>
</kw>
<status starttime="20170419 22:25:08.836" status="PASS" endtime="20170419 22:25:08.838"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:25:08.839" html="yes">Appended to file '&lt;a href="file:///tmp/root/9272/obmc-robot/logs/20170419222508776485_TestsTestBasicPoweron/20170419222508776485_PowerOnTest/20170419222508776485_BMC_general.txt"&gt;/tmp/root/9272/obmc-robot/logs/20170419222508776485_TestsTestBasicPoweron/20170419222508776485_PowerOnTest/20170419222508776485_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170419 22:25:08.838" status="PASS" endtime="20170419 22:25:08.839"></status>
</kw>
<status starttime="20170419 22:25:08.838" status="PASS" endtime="20170419 22:25:08.839"></status>
</kw>
<kw name="Test Setup Info" library="openbmc_ffdc_utils">
<doc>BMC IP, Model and other information</doc>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}-----------------------${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:25:08.840" html="yes">Appended to file '&lt;a href="file:///tmp/root/9272/obmc-robot/logs/20170419222508776485_TestsTestBasicPoweron/20170419222508776485_PowerOnTest/20170419222508776485_BMC_general.txt"&gt;/tmp/root/9272/obmc-robot/logs/20170419222508776485_TestsTestBasicPoweron/20170419222508776485_PowerOnTest/20170419222508776485_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170419 22:25:08.840" status="PASS" endtime="20170419 22:25:08.840"></status>
</kw>
<status starttime="20170419 22:25:08.839" status="PASS" endtime="20170419 22:25:08.841"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Setup Information:</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:25:08.842" html="yes">Appended to file '&lt;a href="file:///tmp/root/9272/obmc-robot/logs/20170419222508776485_TestsTestBasicPoweron/20170419222508776485_PowerOnTest/20170419222508776485_BMC_general.txt"&gt;/tmp/root/9272/obmc-robot/logs/20170419222508776485_TestsTestBasicPoweron/20170419222508776485_PowerOnTest/20170419222508776485_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170419 22:25:08.841" status="PASS" endtime="20170419 22:25:08.842"></status>
</kw>
<status starttime="20170419 22:25:08.841" status="PASS" endtime="20170419 22:25:08.842"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}-----------------------${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:25:08.843" html="yes">Appended to file '&lt;a href="file:///tmp/root/9272/obmc-robot/logs/20170419222508776485_TestsTestBasicPoweron/20170419222508776485_PowerOnTest/20170419222508776485_BMC_general.txt"&gt;/tmp/root/9272/obmc-robot/logs/20170419222508776485_TestsTestBasicPoweron/20170419222508776485_PowerOnTest/20170419222508776485_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170419 22:25:08.843" status="PASS" endtime="20170419 22:25:08.843"></status>
</kw>
<status starttime="20170419 22:25:08.842" status="PASS" endtime="20170419 22:25:08.843"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>OPENBMC HOST \t: ${OPENBMC_HOST}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:25:08.844" html="yes">Appended to file '&lt;a href="file:///tmp/root/9272/obmc-robot/logs/20170419222508776485_TestsTestBasicPoweron/20170419222508776485_PowerOnTest/20170419222508776485_BMC_general.txt"&gt;/tmp/root/9272/obmc-robot/logs/20170419222508776485_TestsTestBasicPoweron/20170419222508776485_PowerOnTest/20170419222508776485_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170419 22:25:08.844" status="PASS" endtime="20170419 22:25:08.844"></status>
</kw>
<status starttime="20170419 22:25:08.843" status="PASS" endtime="20170419 22:25:08.845"></status>
</kw>
<kw name="Get BMC System Model" library="utils">
<doc>Get the BMC model from the device tree.</doc>
<assign>
<var>${model_name}</var>
</assign>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>cat ${devicetree_base} | cut -d " " -f 1</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${bmc_model}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:25:08.845">Executing command 'cat /sys/firmware/devicetree/base/model | cut -d " " -f 1'.</msg>
<msg level="INFO" timestamp="20170419 22:25:08.912">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20170419 22:25:08.912">${bmc_model} = Witherspoon</msg>
<msg level="INFO" timestamp="20170419 22:25:08.913">${stderr} = </msg>
<status starttime="20170419 22:25:08.845" status="PASS" endtime="20170419 22:25:08.913"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:25:08.913">Length is 0</msg>
<status starttime="20170419 22:25:08.913" status="PASS" endtime="20170419 22:25:08.913"></status>
</kw>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${bmc_model}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:25:08.914">Length is 11</msg>
<status starttime="20170419 22:25:08.913" status="PASS" endtime="20170419 22:25:08.914"></status>
</kw>
<msg level="INFO" timestamp="20170419 22:25:08.914">${model_name} = Witherspoon</msg>
<status starttime="20170419 22:25:08.845" status="PASS" endtime="20170419 22:25:08.914"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>SYSTEM TYPE \t: ${model_name}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:25:08.915" html="yes">Appended to file '&lt;a href="file:///tmp/root/9272/obmc-robot/logs/20170419222508776485_TestsTestBasicPoweron/20170419222508776485_PowerOnTest/20170419222508776485_BMC_general.txt"&gt;/tmp/root/9272/obmc-robot/logs/20170419222508776485_TestsTestBasicPoweron/20170419222508776485_PowerOnTest/20170419222508776485_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170419 22:25:08.915" status="PASS" endtime="20170419 22:25:08.915"></status>
</kw>
<status starttime="20170419 22:25:08.914" status="PASS" endtime="20170419 22:25:08.915"></status>
</kw>
<status starttime="20170419 22:25:08.839" status="PASS" endtime="20170419 22:25:08.915"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${MSG_INTRO}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:25:08.917" html="yes">Appended to file '&lt;a href="file:///tmp/root/9272/obmc-robot/logs/20170419222508776485_TestsTestBasicPoweron/20170419222508776485_PowerOnTest/20170419222508776485_BMC_general.txt"&gt;/tmp/root/9272/obmc-robot/logs/20170419222508776485_TestsTestBasicPoweron/20170419222508776485_PowerOnTest/20170419222508776485_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170419 22:25:08.916" status="PASS" endtime="20170419 22:25:08.917"></status>
</kw>
<status starttime="20170419 22:25:08.916" status="PASS" endtime="20170419 22:25:08.917"></status>
</kw>
<kw name="Get Ffdc Cmd Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:25:08.918">@{entries} = [ DRIVER INFO | BMC DATA | APPLICATION DATA ]</msg>
<status starttime="20170419 22:25:08.917" status="PASS" endtime="20170419 22:25:08.918"></status>
</kw>
<kw type="for" name="${index} IN [ @{entries} ]">
<kw type="foritem" name="${index} = DRIVER INFO">
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>* ${index.upper()}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:25:08.919" html="yes">Appended to file '&lt;a href="file:///tmp/root/9272/obmc-robot/logs/20170419222508776485_TestsTestBasicPoweron/20170419222508776485_PowerOnTest/20170419222508776485_BMC_general.txt"&gt;/tmp/root/9272/obmc-robot/logs/20170419222508776485_TestsTestBasicPoweron/20170419222508776485_PowerOnTest/20170419222508776485_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170419 22:25:08.919" status="PASS" endtime="20170419 22:25:08.919"></status>
</kw>
<status starttime="20170419 22:25:08.918" status="PASS" endtime="20170419 22:25:08.919"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:25:08.920" html="yes">Appended to file '&lt;a href="file:///tmp/root/9272/obmc-robot/logs/20170419222508776485_TestsTestBasicPoweron/20170419222508776485_PowerOnTest/20170419222508776485_BMC_general.txt"&gt;/tmp/root/9272/obmc-robot/logs/20170419222508776485_TestsTestBasicPoweron/20170419222508776485_PowerOnTest/20170419222508776485_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170419 22:25:08.920" status="PASS" endtime="20170419 22:25:08.920"></status>
</kw>
<status starttime="20170419 22:25:08.919" status="PASS" endtime="20170419 22:25:08.921"></status>
</kw>
<status starttime="20170419 22:25:08.918" status="PASS" endtime="20170419 22:25:08.921"></status>
</kw>
<kw type="foritem" name="${index} = BMC DATA">
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>* ${index.upper()}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:25:08.922" html="yes">Appended to file '&lt;a href="file:///tmp/root/9272/obmc-robot/logs/20170419222508776485_TestsTestBasicPoweron/20170419222508776485_PowerOnTest/20170419222508776485_BMC_general.txt"&gt;/tmp/root/9272/obmc-robot/logs/20170419222508776485_TestsTestBasicPoweron/20170419222508776485_PowerOnTest/20170419222508776485_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170419 22:25:08.921" status="PASS" endtime="20170419 22:25:08.922"></status>
</kw>
<status starttime="20170419 22:25:08.921" status="PASS" endtime="20170419 22:25:08.922"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:25:08.923" html="yes">Appended to file '&lt;a href="file:///tmp/root/9272/obmc-robot/logs/20170419222508776485_TestsTestBasicPoweron/20170419222508776485_PowerOnTest/20170419222508776485_BMC_general.txt"&gt;/tmp/root/9272/obmc-robot/logs/20170419222508776485_TestsTestBasicPoweron/20170419222508776485_PowerOnTest/20170419222508776485_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170419 22:25:08.923" status="PASS" endtime="20170419 22:25:08.923"></status>
</kw>
<status starttime="20170419 22:25:08.922" status="PASS" endtime="20170419 22:25:08.923"></status>
</kw>
<status starttime="20170419 22:25:08.921" status="PASS" endtime="20170419 22:25:08.923"></status>
</kw>
<kw type="foritem" name="${index} = APPLICATION DATA">
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>* ${index.upper()}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:25:08.925" html="yes">Appended to file '&lt;a href="file:///tmp/root/9272/obmc-robot/logs/20170419222508776485_TestsTestBasicPoweron/20170419222508776485_PowerOnTest/20170419222508776485_BMC_general.txt"&gt;/tmp/root/9272/obmc-robot/logs/20170419222508776485_TestsTestBasicPoweron/20170419222508776485_PowerOnTest/20170419222508776485_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170419 22:25:08.924" status="PASS" endtime="20170419 22:25:08.925"></status>
</kw>
<status starttime="20170419 22:25:08.924" status="PASS" endtime="20170419 22:25:08.925"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:25:08.926" html="yes">Appended to file '&lt;a href="file:///tmp/root/9272/obmc-robot/logs/20170419222508776485_TestsTestBasicPoweron/20170419222508776485_PowerOnTest/20170419222508776485_BMC_general.txt"&gt;/tmp/root/9272/obmc-robot/logs/20170419222508776485_TestsTestBasicPoweron/20170419222508776485_PowerOnTest/20170419222508776485_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170419 22:25:08.925" status="PASS" endtime="20170419 22:25:08.926"></status>
</kw>
<status starttime="20170419 22:25:08.925" status="PASS" endtime="20170419 22:25:08.926"></status>
</kw>
<status starttime="20170419 22:25:08.923" status="PASS" endtime="20170419 22:25:08.926"></status>
</kw>
<status starttime="20170419 22:25:08.918" status="PASS" endtime="20170419 22:25:08.926"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${MSG_DETAIL}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:25:08.927" html="yes">Appended to file '&lt;a href="file:///tmp/root/9272/obmc-robot/logs/20170419222508776485_TestsTestBasicPoweron/20170419222508776485_PowerOnTest/20170419222508776485_BMC_general.txt"&gt;/tmp/root/9272/obmc-robot/logs/20170419222508776485_TestsTestBasicPoweron/20170419222508776485_PowerOnTest/20170419222508776485_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170419 22:25:08.927" status="PASS" endtime="20170419 22:25:08.927"></status>
</kw>
<status starttime="20170419 22:25:08.926" status="PASS" endtime="20170419 22:25:08.927"></status>
</kw>
<status starttime="20170419 22:25:08.825" status="PASS" endtime="20170419 22:25:08.927"></status>
</kw>
<kw name="Call FFDC Methods" library="openbmc_ffdc_methods">
<doc>Calls into FFDC Keyword index list</doc>
<kw name="Get Ffdc Method Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:25:08.928">@{entries} = [ BMC LOGS ]</msg>
<status starttime="20170419 22:25:08.928" status="PASS" endtime="20170419 22:25:08.928"></status>
</kw>
<kw type="for" name="${index} IN [ @{entries} ]">
<kw type="foritem" name="${index} = BMC LOGS">
<kw name="Method Call Keyword List" library="openbmc_ffdc_methods">
<doc>Iterate the list through keyword index</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Method Call" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<assign>
<var>@{method_list}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:25:08.930">@{method_list} = [ ('BMC Specific Files', 'BMC FFDC Files') | ('Get Request FFDC', 'BMC FFDC Get Requests') | ('FFDC Generic Report', 'BMC FFDC Manifest') | ('Core Files', 'SCP Coredump Files') | ('OS FFDC', 'OS FFDC ...</msg>
<status starttime="20170419 22:25:08.929" status="PASS" endtime="20170419 22:25:08.930"></status>
</kw>
<kw type="for" name="${method} IN [ @{method_list} ]">
<kw type="foritem" name="${method} = ('BMC Specific Files', 'BMC FFDC Files')">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Calls into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[1]}</arg>
</arguments>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>${keyword_name}</arg>
</arguments>
<kw name="BMC FFDC Files" library="openbmc_ffdc_methods">
<doc>Get the command list and iterate</doc>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg level="FAIL" timestamp="20170419 22:25:08.933">Dictionary does not contain key 'host'.</msg>
<status starttime="20170419 22:25:08.933" status="FAIL" endtime="20170419 22:25:08.933"></status>
</kw>
<msg level="INFO" timestamp="20170419 22:25:08.933">${has_host} = False</msg>
<status starttime="20170419 22:25:08.932" status="PASS" endtime="20170419 22:25:08.933"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status starttime="20170419 22:25:08.934" status="PASS" endtime="20170419 22:25:08.934"></status>
</kw>
<status starttime="20170419 22:25:08.933" status="PASS" endtime="20170419 22:25:08.934"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<kw name="User input SSH and HTTPs Ports" library="connection_client">
<doc>Update the global SSH and HTTPs port variable for QEMU</doc>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${SSH_PORT}</arg>
</arguments>
<assign>
<var>${port_num}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:25:08.936">${port_num} = 22</msg>
<status starttime="20170419 22:25:08.936" status="PASS" endtime="20170419 22:25:08.936"></status>
</kw>
<kw name="Replace Variables" library="BuiltIn">
<doc>Replaces variables in the given text with their current values.</doc>
<arguments>
<arg>${port_num}</arg>
</arguments>
<assign>
<var>${SSH_PORT}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:25:08.936">${SSH_PORT} = 22</msg>
<status starttime="20170419 22:25:08.936" status="PASS" endtime="20170419 22:25:08.937"></status>
</kw>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${HTTPS_PORT}</arg>
</arguments>
<assign>
<var>${https_num}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:25:08.937">${https_num} = 443</msg>
<status starttime="20170419 22:25:08.937" status="PASS" endtime="20170419 22:25:08.937"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${AUTH_URI}</arg>
<arg>https://${OPENBMC_HOST}:${https_num}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:25:08.938">${AUTH_URI} = https://9.3.86.161:443</msg>
<status starttime="20170419 22:25:08.937" status="PASS" endtime="20170419 22:25:08.938"></status>
</kw>
<status starttime="20170419 22:25:08.935" status="PASS" endtime="20170419 22:25:08.938"></status>
</kw>
<status starttime="20170419 22:25:08.935" status="PASS" endtime="20170419 22:25:08.938"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg level="FAIL" timestamp="20170419 22:25:08.939">Dictionary does not contain key 'port'.</msg>
<status starttime="20170419 22:25:08.939" status="FAIL" endtime="20170419 22:25:08.939"></status>
</kw>
<msg level="INFO" timestamp="20170419 22:25:08.939">${has_port} = False</msg>
<status starttime="20170419 22:25:08.938" status="PASS" endtime="20170419 22:25:08.939"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keywords" library="BuiltIn">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
</arguments>
<status starttime="20170419 22:25:08.941" status="PASS" endtime="20170419 22:25:08.941"></status>
</kw>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status starttime="20170419 22:25:08.941" status="PASS" endtime="20170419 22:25:08.942"></status>
</kw>
<status starttime="20170419 22:25:08.940" status="PASS" endtime="20170419 22:25:08.942"></status>
</kw>
<status starttime="20170419 22:25:08.939" status="PASS" endtime="20170419 22:25:08.942"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:25:08.942">Logging into '9.3.86.161:22' as 'root'.</msg>
<msg level="INFO" timestamp="20170419 22:25:10.589">Read output: root@witherspoon:~#</msg>
<status starttime="20170419 22:25:08.942" status="PASS" endtime="20170419 22:25:10.589"></status>
</kw>
<status starttime="20170419 22:25:08.932" status="PASS" endtime="20170419 22:25:10.589"></status>
</kw>
<kw name="Get Ffdc File Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:25:10.590">@{entries} = [ BMC FILES ]</msg>
<status starttime="20170419 22:25:10.590" status="PASS" endtime="20170419 22:25:10.590"></status>
</kw>
<kw type="for" name="${index} IN [ @{entries} ]">
<kw type="foritem" name="${index} = BMC FILES">
<kw name="Create File and Write Data" library="openbmc_ffdc_methods">
<doc>Create files to current FFDC log directory,</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Run" library="OperatingSystem">
<doc>Runs the given command in the system and returns the output.</doc>
<arguments>
<arg>echo ${OPENBMC_HOST} | sed 's/\(\.\)/\\\1/g'</arg>
</arguments>
<assign>
<var>${OPENBMC_HOST_REGEX}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:25:10.597">Running command 'echo 9.3.86.161 | sed 's/(.)/\1/g' 2&gt;&amp;1'.</msg>
<msg level="INFO" timestamp="20170419 22:25:10.600">${OPENBMC_HOST_REGEX} = sed: -e expression #1, char 10: invalid reference \1 on `s' command's RHS</msg>
<status starttime="20170419 22:25:10.591" status="PASS" endtime="20170419 22:25:10.601"></status>
</kw>
<kw name="Get Ffdc Bmc File" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:25:10.603">@{cmd_list} = [ ('BMC_meminfo', 'cat /proc/meminfo') | ('BMC_journalctl', 'journalctl --no-pager') | ('BMC_proc_list', 'top -n 1 -b') | ('BMC_dmesg', 'dmesg') | ('BMC_procinfo', 'cat /proc/cpuinfo') ]</msg>
<status starttime="20170419 22:25:10.603" status="PASS" endtime="20170419 22:25:10.603"></status>
</kw>
<kw type="for" name="${cmd} IN [ @{cmd_list} ]">
<kw type="foritem" name="${cmd} = ('BMC_meminfo', 'cat /proc/meminfo')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:25:10.605">${logpath} = /tmp/root/9272/obmc-robot/logs/20170419222508776485_TestsTestBasicPoweron/20170419222508776485_PowerOnTest/20170419222508776485_BMC_meminfo.txt</msg>
<status starttime="20170419 22:25:10.604" status="PASS" endtime="20170419 22:25:10.605"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status starttime="20170419 22:25:10.607" status="PASS" endtime="20170419 22:25:10.607"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:25:10.608">Executing command 'cat /proc/meminfo'.</msg>
<msg level="INFO" timestamp="20170419 22:25:10.666">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20170419 22:25:10.666">${stdout} = MemTotal:         432932 kB
MemFree:          289688 kB
MemAvailable:     329316 kB
Buffers:           10304 kB
Cached:            48112 kB
SwapCached:            0 kB
Active:            92916 kB
Inac...</msg>
<msg level="INFO" timestamp="20170419 22:25:10.666">${stderr} = </msg>
<status starttime="20170419 22:25:10.607" status="PASS" endtime="20170419 22:25:10.666"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:25:10.673" html="yes">Appended to file '&lt;a href="file:///tmp/root/9272/obmc-robot/logs/20170419222508776485_TestsTestBasicPoweron/20170419222508776485_PowerOnTest/20170419222508776485_BMC_meminfo.txt"&gt;/tmp/root/9272/obmc-robot/logs/20170419222508776485_TestsTestBasicPoweron/20170419222508776485_PowerOnTest/20170419222508776485_BMC_meminfo.txt&lt;/a&gt;'.</msg>
<status starttime="20170419 22:25:10.672" status="PASS" endtime="20170419 22:25:10.673"></status>
</kw>
<status starttime="20170419 22:25:10.671" status="PASS" endtime="20170419 22:25:10.673"></status>
</kw>
<status starttime="20170419 22:25:10.666" status="PASS" endtime="20170419 22:25:10.673"></status>
</kw>
<status starttime="20170419 22:25:10.605" status="PASS" endtime="20170419 22:25:10.673"></status>
</kw>
<kw name="Run" library="OperatingSystem">
<doc>Runs the given command in the system and returns the output.</doc>
<arguments>
<arg>sed -i 's/'${OPENBMC_HOST_REGEX}'/DUMMYIP/g' ${logpath}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:25:10.678">Running command 'sed -i 's/'sed: -e expression #1, char 10: invalid reference \1 on `s' command's RHS'/DUMMYIP/g' /tmp/root/9272/obmc-robot/logs/20170419222508776485_TestsTestBasicPoweron/20170419222508776485_PowerOnTest/20170419222508776485_BMC_meminfo.txt 2&gt;&amp;1'.</msg>
<status starttime="20170419 22:25:10.673" status="PASS" endtime="20170419 22:25:10.684"></status>
</kw>
<status starttime="20170419 22:25:10.604" status="PASS" endtime="20170419 22:25:10.685"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_journalctl', 'journalctl --no-pager')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:25:10.689">${logpath} = /tmp/root/9272/obmc-robot/logs/20170419222508776485_TestsTestBasicPoweron/20170419222508776485_PowerOnTest/20170419222508776485_BMC_journalctl.txt</msg>
<status starttime="20170419 22:25:10.688" status="PASS" endtime="20170419 22:25:10.689"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status starttime="20170419 22:25:10.691" status="PASS" endtime="20170419 22:25:10.691"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:25:10.692">Executing command 'journalctl --no-pager'.</msg>
<msg level="INFO" timestamp="20170419 22:25:11.623">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20170419 22:25:11.624">${stdout} = -- Logs begin at Wed 2017-04-19 22:04:57 UTC, end at Wed 2017-04-19 22:25:11 UTC. --
Apr 19 22:04:57 witherspoon kernel: Booting Linux on physical CPU 0x0
Apr 19 22:04:57 witherspoon kernel: Linux ver...</msg>
<msg level="INFO" timestamp="20170419 22:25:11.624">${stderr} = </msg>
<status starttime="20170419 22:25:10.691" status="PASS" endtime="20170419 22:25:11.624"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:25:11.633" html="yes">Appended to file '&lt;a href="file:///tmp/root/9272/obmc-robot/logs/20170419222508776485_TestsTestBasicPoweron/20170419222508776485_PowerOnTest/20170419222508776485_BMC_journalctl.txt"&gt;/tmp/root/9272/obmc-robot/logs/20170419222508776485_TestsTestBasicPoweron/20170419222508776485_PowerOnTest/20170419222508776485_BMC_journalctl.txt&lt;/a&gt;'.</msg>
<status starttime="20170419 22:25:11.631" status="PASS" endtime="20170419 22:25:11.634"></status>
</kw>
<status starttime="20170419 22:25:11.630" status="PASS" endtime="20170419 22:25:11.634"></status>
</kw>
<status starttime="20170419 22:25:11.625" status="PASS" endtime="20170419 22:25:11.634"></status>
</kw>
<status starttime="20170419 22:25:10.689" status="PASS" endtime="20170419 22:25:11.634"></status>
</kw>
<kw name="Run" library="OperatingSystem">
<doc>Runs the given command in the system and returns the output.</doc>
<arguments>
<arg>sed -i 's/'${OPENBMC_HOST_REGEX}'/DUMMYIP/g' ${logpath}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:25:11.649">Running command 'sed -i 's/'sed: -e expression #1, char 10: invalid reference \1 on `s' command's RHS'/DUMMYIP/g' /tmp/root/9272/obmc-robot/logs/20170419222508776485_TestsTestBasicPoweron/20170419222508776485_PowerOnTest/20170419222508776485_BMC_journalctl.txt 2&gt;&amp;1'.</msg>
<status starttime="20170419 22:25:11.634" status="PASS" endtime="20170419 22:25:11.663"></status>
</kw>
<status starttime="20170419 22:25:10.685" status="PASS" endtime="20170419 22:25:11.664"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_proc_list', 'top -n 1 -b')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:25:11.674">${logpath} = /tmp/root/9272/obmc-robot/logs/20170419222508776485_TestsTestBasicPoweron/20170419222508776485_PowerOnTest/20170419222508776485_BMC_proc_list.txt</msg>
<status starttime="20170419 22:25:11.673" status="PASS" endtime="20170419 22:25:11.674"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status starttime="20170419 22:25:11.677" status="PASS" endtime="20170419 22:25:11.678"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:25:11.678">Executing command 'top -n 1 -b'.</msg>
<msg level="INFO" timestamp="20170419 22:25:11.939">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20170419 22:25:11.939">${stdout} = Mem: 143360K used, 289572K free, 14344K shrd, 10304K buff, 48116K cached
CPU:   0% usr  16% sys   0% nic  83% idle   0% io   0% irq   0% sirq
Load average: 0.02 0.12 0.27 1/122 911
  PID  PPID USER   ...</msg>
<msg level="INFO" timestamp="20170419 22:25:11.939">${stderr} = </msg>
<status starttime="20170419 22:25:11.678" status="PASS" endtime="20170419 22:25:11.939"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:25:11.946" html="yes">Appended to file '&lt;a href="file:///tmp/root/9272/obmc-robot/logs/20170419222508776485_TestsTestBasicPoweron/20170419222508776485_PowerOnTest/20170419222508776485_BMC_proc_list.txt"&gt;/tmp/root/9272/obmc-robot/logs/20170419222508776485_TestsTestBasicPoweron/20170419222508776485_PowerOnTest/20170419222508776485_BMC_proc_list.txt&lt;/a&gt;'.</msg>
<status starttime="20170419 22:25:11.945" status="PASS" endtime="20170419 22:25:11.946"></status>
</kw>
<status starttime="20170419 22:25:11.945" status="PASS" endtime="20170419 22:25:11.947"></status>
</kw>
<status starttime="20170419 22:25:11.939" status="PASS" endtime="20170419 22:25:11.947"></status>
</kw>
<status starttime="20170419 22:25:11.675" status="PASS" endtime="20170419 22:25:11.947"></status>
</kw>
<kw name="Run" library="OperatingSystem">
<doc>Runs the given command in the system and returns the output.</doc>
<arguments>
<arg>sed -i 's/'${OPENBMC_HOST_REGEX}'/DUMMYIP/g' ${logpath}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:25:11.952">Running command 'sed -i 's/'sed: -e expression #1, char 10: invalid reference \1 on `s' command's RHS'/DUMMYIP/g' /tmp/root/9272/obmc-robot/logs/20170419222508776485_TestsTestBasicPoweron/20170419222508776485_PowerOnTest/20170419222508776485_BMC_proc_list.txt 2&gt;&amp;1'.</msg>
<status starttime="20170419 22:25:11.947" status="PASS" endtime="20170419 22:25:11.954"></status>
</kw>
<status starttime="20170419 22:25:11.668" status="PASS" endtime="20170419 22:25:11.955"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_dmesg', 'dmesg')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:25:11.958">${logpath} = /tmp/root/9272/obmc-robot/logs/20170419222508776485_TestsTestBasicPoweron/20170419222508776485_PowerOnTest/20170419222508776485_BMC_dmesg.txt</msg>
<status starttime="20170419 22:25:11.957" status="PASS" endtime="20170419 22:25:11.958"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status starttime="20170419 22:25:11.960" status="PASS" endtime="20170419 22:25:11.960"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:25:11.961">Executing command 'dmesg'.</msg>
<msg level="INFO" timestamp="20170419 22:25:12.023">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20170419 22:25:12.024">${stdout} = Booting Linux on physical CPU 0x0
Linux version 4.7.10-6786cab8778ba96d84d89c7aec34374b5f4f1968 (jenkins@openbmc-builder1) (gcc version 6.2.0 (GCC) ) #1 Wed Apr 19 21:46:50 UTC 2017
CPU: ARMv6-compati...</msg>
<msg level="INFO" timestamp="20170419 22:25:12.024">${stderr} = </msg>
<status starttime="20170419 22:25:11.961" status="PASS" endtime="20170419 22:25:12.024"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:25:12.030" html="yes">Appended to file '&lt;a href="file:///tmp/root/9272/obmc-robot/logs/20170419222508776485_TestsTestBasicPoweron/20170419222508776485_PowerOnTest/20170419222508776485_BMC_dmesg.txt"&gt;/tmp/root/9272/obmc-robot/logs/20170419222508776485_TestsTestBasicPoweron/20170419222508776485_PowerOnTest/20170419222508776485_BMC_dmesg.txt&lt;/a&gt;'.</msg>
<status starttime="20170419 22:25:12.029" status="PASS" endtime="20170419 22:25:12.030"></status>
</kw>
<status starttime="20170419 22:25:12.029" status="PASS" endtime="20170419 22:25:12.030"></status>
</kw>
<status starttime="20170419 22:25:12.024" status="PASS" endtime="20170419 22:25:12.030"></status>
</kw>
<status starttime="20170419 22:25:11.959" status="PASS" endtime="20170419 22:25:12.030"></status>
</kw>
<kw name="Run" library="OperatingSystem">
<doc>Runs the given command in the system and returns the output.</doc>
<arguments>
<arg>sed -i 's/'${OPENBMC_HOST_REGEX}'/DUMMYIP/g' ${logpath}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:25:12.036">Running command 'sed -i 's/'sed: -e expression #1, char 10: invalid reference \1 on `s' command's RHS'/DUMMYIP/g' /tmp/root/9272/obmc-robot/logs/20170419222508776485_TestsTestBasicPoweron/20170419222508776485_PowerOnTest/20170419222508776485_BMC_dmesg.txt 2&gt;&amp;1'.</msg>
<status starttime="20170419 22:25:12.031" status="PASS" endtime="20170419 22:25:12.038"></status>
</kw>
<status starttime="20170419 22:25:11.955" status="PASS" endtime="20170419 22:25:12.038"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_procinfo', 'cat /proc/cpuinfo')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:25:12.042">${logpath} = /tmp/root/9272/obmc-robot/logs/20170419222508776485_TestsTestBasicPoweron/20170419222508776485_PowerOnTest/20170419222508776485_BMC_procinfo.txt</msg>
<status starttime="20170419 22:25:12.041" status="PASS" endtime="20170419 22:25:12.042"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status starttime="20170419 22:25:12.044" status="PASS" endtime="20170419 22:25:12.045"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:25:12.045">Executing command 'cat /proc/cpuinfo'.</msg>
<msg level="INFO" timestamp="20170419 22:25:12.093">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20170419 22:25:12.094">${stdout} = processor	: 0
model name	: ARMv6-compatible processor rev 7 (v6l)
BogoMIPS	: 789.70
Features	: half thumb fastmult edsp java tls 
CPU implementer	: 0x41
CPU architecture: 7
CPU variant	: 0x0
CPU part	...</msg>
<msg level="INFO" timestamp="20170419 22:25:12.094">${stderr} = </msg>
<status starttime="20170419 22:25:12.045" status="PASS" endtime="20170419 22:25:12.094"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:25:12.100" html="yes">Appended to file '&lt;a href="file:///tmp/root/9272/obmc-robot/logs/20170419222508776485_TestsTestBasicPoweron/20170419222508776485_PowerOnTest/20170419222508776485_BMC_procinfo.txt"&gt;/tmp/root/9272/obmc-robot/logs/20170419222508776485_TestsTestBasicPoweron/20170419222508776485_PowerOnTest/20170419222508776485_BMC_procinfo.txt&lt;/a&gt;'.</msg>
<status starttime="20170419 22:25:12.099" status="PASS" endtime="20170419 22:25:12.100"></status>
</kw>
<status starttime="20170419 22:25:12.099" status="PASS" endtime="20170419 22:25:12.100"></status>
</kw>
<status starttime="20170419 22:25:12.094" status="PASS" endtime="20170419 22:25:12.100"></status>
</kw>
<status starttime="20170419 22:25:12.043" status="PASS" endtime="20170419 22:25:12.100"></status>
</kw>
<kw name="Run" library="OperatingSystem">
<doc>Runs the given command in the system and returns the output.</doc>
<arguments>
<arg>sed -i 's/'${OPENBMC_HOST_REGEX}'/DUMMYIP/g' ${logpath}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:25:12.105">Running command 'sed -i 's/'sed: -e expression #1, char 10: invalid reference \1 on `s' command's RHS'/DUMMYIP/g' /tmp/root/9272/obmc-robot/logs/20170419222508776485_TestsTestBasicPoweron/20170419222508776485_PowerOnTest/20170419222508776485_BMC_procinfo.txt 2&gt;&amp;1'.</msg>
<status starttime="20170419 22:25:12.101" status="PASS" endtime="20170419 22:25:12.107"></status>
</kw>
<status starttime="20170419 22:25:12.039" status="PASS" endtime="20170419 22:25:12.108"></status>
</kw>
<status starttime="20170419 22:25:10.604" status="PASS" endtime="20170419 22:25:12.108"></status>
</kw>
<status starttime="20170419 22:25:10.590" status="PASS" endtime="20170419 22:25:12.109"></status>
</kw>
<status starttime="20170419 22:25:10.590" status="PASS" endtime="20170419 22:25:12.109"></status>
</kw>
<status starttime="20170419 22:25:10.590" status="PASS" endtime="20170419 22:25:12.109"></status>
</kw>
<status starttime="20170419 22:25:08.931" status="PASS" endtime="20170419 22:25:12.110"></status>
</kw>
<status starttime="20170419 22:25:08.931" status="PASS" endtime="20170419 22:25:12.110"></status>
</kw>
<status starttime="20170419 22:25:08.930" status="PASS" endtime="20170419 22:25:12.110"></status>
</kw>
<status starttime="20170419 22:25:08.930" status="PASS" endtime="20170419 22:25:12.110"></status>
</kw>
<kw type="foritem" name="${method} = ('Get Request FFDC', 'BMC FFDC Get Requests')">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Calls into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[1]}</arg>
</arguments>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>${keyword_name}</arg>
</arguments>
<kw name="BMC FFDC Get Requests" library="openbmc_ffdc_methods">
<doc>Get the command list and iterate</doc>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg level="FAIL" timestamp="20170419 22:25:12.117">Dictionary does not contain key 'host'.</msg>
<status starttime="20170419 22:25:12.116" status="FAIL" endtime="20170419 22:25:12.117"></status>
</kw>
<msg level="INFO" timestamp="20170419 22:25:12.117">${has_host} = False</msg>
<status starttime="20170419 22:25:12.115" status="PASS" endtime="20170419 22:25:12.117"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status starttime="20170419 22:25:12.118" status="PASS" endtime="20170419 22:25:12.119"></status>
</kw>
<status starttime="20170419 22:25:12.118" status="PASS" endtime="20170419 22:25:12.119"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<kw name="User input SSH and HTTPs Ports" library="connection_client">
<doc>Update the global SSH and HTTPs port variable for QEMU</doc>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${SSH_PORT}</arg>
</arguments>
<assign>
<var>${port_num}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:25:12.120">${port_num} = 22</msg>
<status starttime="20170419 22:25:12.120" status="PASS" endtime="20170419 22:25:12.120"></status>
</kw>
<kw name="Replace Variables" library="BuiltIn">
<doc>Replaces variables in the given text with their current values.</doc>
<arguments>
<arg>${port_num}</arg>
</arguments>
<assign>
<var>${SSH_PORT}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:25:12.121">${SSH_PORT} = 22</msg>
<status starttime="20170419 22:25:12.120" status="PASS" endtime="20170419 22:25:12.121"></status>
</kw>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${HTTPS_PORT}</arg>
</arguments>
<assign>
<var>${https_num}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:25:12.121">${https_num} = 443</msg>
<status starttime="20170419 22:25:12.121" status="PASS" endtime="20170419 22:25:12.121"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${AUTH_URI}</arg>
<arg>https://${OPENBMC_HOST}:${https_num}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:25:12.122">${AUTH_URI} = https://9.3.86.161:443</msg>
<status starttime="20170419 22:25:12.122" status="PASS" endtime="20170419 22:25:12.122"></status>
</kw>
<status starttime="20170419 22:25:12.119" status="PASS" endtime="20170419 22:25:12.123"></status>
</kw>
<status starttime="20170419 22:25:12.119" status="PASS" endtime="20170419 22:25:12.123"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg level="FAIL" timestamp="20170419 22:25:12.124">Dictionary does not contain key 'port'.</msg>
<status starttime="20170419 22:25:12.123" status="FAIL" endtime="20170419 22:25:12.124"></status>
</kw>
<msg level="INFO" timestamp="20170419 22:25:12.124">${has_port} = False</msg>
<status starttime="20170419 22:25:12.123" status="PASS" endtime="20170419 22:25:12.124"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keywords" library="BuiltIn">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
</arguments>
<status starttime="20170419 22:25:12.125" status="PASS" endtime="20170419 22:25:12.126"></status>
</kw>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status starttime="20170419 22:25:12.126" status="PASS" endtime="20170419 22:25:12.127"></status>
</kw>
<status starttime="20170419 22:25:12.125" status="PASS" endtime="20170419 22:25:12.127"></status>
</kw>
<status starttime="20170419 22:25:12.124" status="PASS" endtime="20170419 22:25:12.127"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:25:12.128">Logging into '9.3.86.161:22' as 'root'.</msg>
<msg level="INFO" timestamp="20170419 22:25:13.775">Read output: root@witherspoon:~#</msg>
<status starttime="20170419 22:25:12.127" status="PASS" endtime="20170419 22:25:13.776"></status>
</kw>
<status starttime="20170419 22:25:12.114" status="PASS" endtime="20170419 22:25:13.776"></status>
</kw>
<kw name="Get Ffdc Get Request Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:25:13.776">@{entries} = [ GET REQUESTS ]</msg>
<status starttime="20170419 22:25:13.776" status="PASS" endtime="20170419 22:25:13.776"></status>
</kw>
<kw type="for" name="${index} IN [ @{entries} ]">
<kw type="foritem" name="${index} = GET REQUESTS">
<kw name="Log FFDC Get Requests" library="openbmc_ffdc_methods">
<doc>Create file in current FFDC log directory.</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Get Request" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:25:13.778">@{cmd_list} = [ ('BMC_record_log', '/org/openbmc/control/led/enumerate') | ('BMC_elog', '/xyz/openbmc_project/logging/entry/enumerate') | ('BMC_sensor_list', '/org/openbmc/sensors/enumerate') | ('BMC_inventory', '/...</msg>
<status starttime="20170419 22:25:13.777" status="PASS" endtime="20170419 22:25:13.778"></status>
</kw>
<kw type="for" name="${cmd} IN [ @{cmd_list} ]">
<kw type="foritem" name="${cmd} = ('BMC_record_log', '/org/openbmc/control/led/enumerate')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:25:13.779">${logpath} = /tmp/root/9272/obmc-robot/logs/20170419222508776485_TestsTestBasicPoweron/20170419222508776485_PowerOnTest/20170419222508776485_BMC_record_log.txt</msg>
<status starttime="20170419 22:25:13.778" status="PASS" endtime="20170419 22:25:13.779"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:25:13.781">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170419 22:25:13.780" status="PASS" endtime="20170419 22:25:13.781"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:25:13.782">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170419 22:25:13.782" status="PASS" endtime="20170419 22:25:13.782"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:25:13.783">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170419 22:25:13.782" status="PASS" endtime="20170419 22:25:13.783"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:25:13.783">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170419 22:25:13.783" status="PASS" endtime="20170419 22:25:13.783"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:25:13.958">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170419 22:25:13.784" status="PASS" endtime="20170419 22:25:13.958"></status>
</kw>
<msg level="INFO" timestamp="20170419 22:25:13.958">${status} = PASS</msg>
<msg level="INFO" timestamp="20170419 22:25:13.958">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 22:25:13.784" status="PASS" endtime="20170419 22:25:13.958"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:25:13.959">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 22:25:13.959" status="PASS" endtime="20170419 22:25:13.959"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:25:13.960">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 22:25:13.959" status="PASS" endtime="20170419 22:25:13.960"></status>
</kw>
<status starttime="20170419 22:25:13.780" status="PASS" endtime="20170419 22:25:13.960"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:25:13.960">${base_uri} = /org/openbmc/control/led/enumerate</msg>
<status starttime="20170419 22:25:13.960" status="PASS" endtime="20170419 22:25:13.960"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status starttime="20170419 22:25:13.961" status="PASS" endtime="20170419 22:25:13.961"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:25:14.005">Get Request using : alias=openbmc, uri=/org/openbmc/control/led/enumerate, headers=None json=None</msg>
<msg level="INFO" timestamp="20170419 22:25:14.005">${ret} = &lt;Response [404]&gt;</msg>
<status starttime="20170419 22:25:13.961" status="PASS" endtime="20170419 22:25:14.005"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status starttime="20170419 22:25:14.006" status="PASS" endtime="20170419 22:25:14.006"></status>
</kw>
<msg level="INFO" timestamp="20170419 22:25:14.006">${resp} = &lt;Response [404]&gt;</msg>
<status starttime="20170419 22:25:13.779" status="PASS" endtime="20170419 22:25:14.006"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:25:14.007">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg level="FAIL" timestamp="20170419 22:25:14.007">404 != 200</msg>
<status starttime="20170419 22:25:14.007" status="FAIL" endtime="20170419 22:25:14.007"></status>
</kw>
<msg level="INFO" timestamp="20170419 22:25:14.008">${status} = False</msg>
<status starttime="20170419 22:25:14.006" status="PASS" endtime="20170419 22:25:14.008"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<kw name="Continue For Loop" library="BuiltIn">
<doc>Skips the current for loop iteration and continues from the next.</doc>
<msg level="INFO" timestamp="20170419 22:25:14.008">Continuing for loop from the next iteration.</msg>
<status starttime="20170419 22:25:14.008" status="PASS" endtime="20170419 22:25:14.009"></status>
</kw>
<status starttime="20170419 22:25:14.008" status="PASS" endtime="20170419 22:25:14.009"></status>
</kw>
<status starttime="20170419 22:25:13.778" status="PASS" endtime="20170419 22:25:14.009"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_elog', '/xyz/openbmc_project/logging/entry/enumerate')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:25:14.009">${logpath} = /tmp/root/9272/obmc-robot/logs/20170419222508776485_TestsTestBasicPoweron/20170419222508776485_PowerOnTest/20170419222508776485_BMC_elog.txt</msg>
<status starttime="20170419 22:25:14.009" status="PASS" endtime="20170419 22:25:14.009"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:25:14.013">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170419 22:25:14.013" status="PASS" endtime="20170419 22:25:14.014"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:25:14.014">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170419 22:25:14.014" status="PASS" endtime="20170419 22:25:14.014"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:25:14.015">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170419 22:25:14.015" status="PASS" endtime="20170419 22:25:14.015"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:25:14.016">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170419 22:25:14.015" status="PASS" endtime="20170419 22:25:14.016"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:25:14.190">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170419 22:25:14.016" status="PASS" endtime="20170419 22:25:14.190"></status>
</kw>
<msg level="INFO" timestamp="20170419 22:25:14.190">${status} = PASS</msg>
<msg level="INFO" timestamp="20170419 22:25:14.190">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 22:25:14.016" status="PASS" endtime="20170419 22:25:14.190"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:25:14.191">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 22:25:14.190" status="PASS" endtime="20170419 22:25:14.191"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:25:14.191">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 22:25:14.191" status="PASS" endtime="20170419 22:25:14.191"></status>
</kw>
<status starttime="20170419 22:25:14.012" status="PASS" endtime="20170419 22:25:14.191"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:25:14.192">${base_uri} = /xyz/openbmc_project/logging/entry/enumerate</msg>
<status starttime="20170419 22:25:14.192" status="PASS" endtime="20170419 22:25:14.192"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status starttime="20170419 22:25:14.192" status="PASS" endtime="20170419 22:25:14.193"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:25:14.236">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry/enumerate, headers=None json=None</msg>
<msg level="INFO" timestamp="20170419 22:25:14.236">${ret} = &lt;Response [404]&gt;</msg>
<status starttime="20170419 22:25:14.193" status="PASS" endtime="20170419 22:25:14.236"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status starttime="20170419 22:25:14.236" status="PASS" endtime="20170419 22:25:14.237"></status>
</kw>
<msg level="INFO" timestamp="20170419 22:25:14.237">${resp} = &lt;Response [404]&gt;</msg>
<status starttime="20170419 22:25:14.010" status="PASS" endtime="20170419 22:25:14.237"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:25:14.238">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg level="FAIL" timestamp="20170419 22:25:14.238">404 != 200</msg>
<status starttime="20170419 22:25:14.238" status="FAIL" endtime="20170419 22:25:14.238"></status>
</kw>
<msg level="INFO" timestamp="20170419 22:25:14.238">${status} = False</msg>
<status starttime="20170419 22:25:14.237" status="PASS" endtime="20170419 22:25:14.238"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<kw name="Continue For Loop" library="BuiltIn">
<doc>Skips the current for loop iteration and continues from the next.</doc>
<msg level="INFO" timestamp="20170419 22:25:14.239">Continuing for loop from the next iteration.</msg>
<status starttime="20170419 22:25:14.239" status="PASS" endtime="20170419 22:25:14.239"></status>
</kw>
<status starttime="20170419 22:25:14.239" status="PASS" endtime="20170419 22:25:14.239"></status>
</kw>
<status starttime="20170419 22:25:14.009" status="PASS" endtime="20170419 22:25:14.239"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_sensor_list', '/org/openbmc/sensors/enumerate')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:25:14.240">${logpath} = /tmp/root/9272/obmc-robot/logs/20170419222508776485_TestsTestBasicPoweron/20170419222508776485_PowerOnTest/20170419222508776485_BMC_sensor_list.txt</msg>
<status starttime="20170419 22:25:14.240" status="PASS" endtime="20170419 22:25:14.240"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:25:14.242">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170419 22:25:14.242" status="PASS" endtime="20170419 22:25:14.243"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:25:14.243">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170419 22:25:14.243" status="PASS" endtime="20170419 22:25:14.243"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:25:14.244">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170419 22:25:14.243" status="PASS" endtime="20170419 22:25:14.244"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:25:14.244">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170419 22:25:14.244" status="PASS" endtime="20170419 22:25:14.244"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:25:14.426">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170419 22:25:14.245" status="PASS" endtime="20170419 22:25:14.426"></status>
</kw>
<msg level="INFO" timestamp="20170419 22:25:14.426">${status} = PASS</msg>
<msg level="INFO" timestamp="20170419 22:25:14.426">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 22:25:14.245" status="PASS" endtime="20170419 22:25:14.426"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:25:14.427">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 22:25:14.426" status="PASS" endtime="20170419 22:25:14.427"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:25:14.427">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 22:25:14.427" status="PASS" endtime="20170419 22:25:14.428"></status>
</kw>
<status starttime="20170419 22:25:14.241" status="PASS" endtime="20170419 22:25:14.428"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:25:14.428">${base_uri} = /org/openbmc/sensors/enumerate</msg>
<status starttime="20170419 22:25:14.428" status="PASS" endtime="20170419 22:25:14.428"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status starttime="20170419 22:25:14.429" status="PASS" endtime="20170419 22:25:14.429"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:25:14.643">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/enumerate, headers=None json=None</msg>
<msg level="INFO" timestamp="20170419 22:25:14.643">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 22:25:14.429" status="PASS" endtime="20170419 22:25:14.643"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status starttime="20170419 22:25:14.644" status="PASS" endtime="20170419 22:25:14.644"></status>
</kw>
<msg level="INFO" timestamp="20170419 22:25:14.644">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 22:25:14.240" status="PASS" endtime="20170419 22:25:14.644"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:25:14.645">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 22:25:14.645" status="PASS" endtime="20170419 22:25:14.645"></status>
</kw>
<msg level="INFO" timestamp="20170419 22:25:14.646">${status} = True</msg>
<status starttime="20170419 22:25:14.645" status="PASS" endtime="20170419 22:25:14.646"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status starttime="20170419 22:25:14.646" status="PASS" endtime="20170419 22:25:14.646"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:25:14.647">To JSON using : content={
  "data": {
    "/org/openbmc/sensors/host/BootCount": {
      "error": 0, 
      "units": "", 
      "value": 2
    }, 
    "/org/openbmc/sensors/host/BootProgress": {
      "error": 0, 
      "units": "", 
      "value": "Off"
    }, 
    "/org/openbmc/sensors/host/OperatingSystemStatus": {
      "error": 0, 
      "units": "", 
      "value": "Off"
    }, 
    "/org/openbmc/sensors/host/PowerSupplyDerating": {
      "error": 0, 
      "units": "", 
      "value": 10
    }, 
    "/org/openbmc/sensors/host/PowerSupplyRedundancy": {
      "error": 0, 
      "units": "", 
      "value": "Disabled"
    }, 
    "/org/openbmc/sensors/host/TurboAllowed": {
      "error": 0, 
      "units": "", 
      "value": 0
    }, 
    "/org/openbmc/sensors/host/cpu0/OccStatus": {
      "error": 0, 
      "units": "", 
      "value": "Disabled"
    }, 
    "/org/openbmc/sensors/host/cpu1/OccStatus": {
      "error": 0, 
      "units": "", 
      "value": "Disabled"
    }, 
    "/org/openbmc/sensors/host/powercap": {
      "error": 0, 
      "units": "", 
      "value": 0
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170419 22:25:14.647">To JSON using : pretty_print=True </msg>
<msg level="INFO" timestamp="20170419 22:25:14.647">${jsondata} = {
    "data": {
        "/org/openbmc/sensors/host/BootCount": {
            "error": 0,
            "units": "",
            "value": 2
        },
        "/org/openbmc/sensors/host/BootProgress": {
...</msg>
<status starttime="20170419 22:25:14.646" status="PASS" endtime="20170419 22:25:14.647"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:25:14.649" html="yes">Appended to file '&lt;a href="file:///tmp/root/9272/obmc-robot/logs/20170419222508776485_TestsTestBasicPoweron/20170419222508776485_PowerOnTest/20170419222508776485_BMC_sensor_list.txt"&gt;/tmp/root/9272/obmc-robot/logs/20170419222508776485_TestsTestBasicPoweron/20170419222508776485_PowerOnTest/20170419222508776485_BMC_sensor_list.txt&lt;/a&gt;'.</msg>
<status starttime="20170419 22:25:14.648" status="PASS" endtime="20170419 22:25:14.649"></status>
</kw>
<status starttime="20170419 22:25:14.647" status="PASS" endtime="20170419 22:25:14.649"></status>
</kw>
<status starttime="20170419 22:25:14.240" status="PASS" endtime="20170419 22:25:14.649"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_inventory', '/xyz/openbmc_project/inventory/enumerate')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:25:14.650">${logpath} = /tmp/root/9272/obmc-robot/logs/20170419222508776485_TestsTestBasicPoweron/20170419222508776485_PowerOnTest/20170419222508776485_BMC_inventory.txt</msg>
<status starttime="20170419 22:25:14.649" status="PASS" endtime="20170419 22:25:14.650"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:25:14.652">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170419 22:25:14.651" status="PASS" endtime="20170419 22:25:14.652"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:25:14.653">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170419 22:25:14.653" status="PASS" endtime="20170419 22:25:14.653"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:25:14.654">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170419 22:25:14.653" status="PASS" endtime="20170419 22:25:14.654"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:25:14.654">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170419 22:25:14.654" status="PASS" endtime="20170419 22:25:14.654"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:25:14.829">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170419 22:25:14.655" status="PASS" endtime="20170419 22:25:14.830"></status>
</kw>
<msg level="INFO" timestamp="20170419 22:25:14.830">${status} = PASS</msg>
<msg level="INFO" timestamp="20170419 22:25:14.830">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 22:25:14.654" status="PASS" endtime="20170419 22:25:14.830"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:25:14.830">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 22:25:14.830" status="PASS" endtime="20170419 22:25:14.830"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:25:14.831">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 22:25:14.831" status="PASS" endtime="20170419 22:25:14.831"></status>
</kw>
<status starttime="20170419 22:25:14.650" status="PASS" endtime="20170419 22:25:14.831"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:25:14.832">${base_uri} = /xyz/openbmc_project/inventory/enumerate</msg>
<status starttime="20170419 22:25:14.831" status="PASS" endtime="20170419 22:25:14.832"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status starttime="20170419 22:25:14.832" status="PASS" endtime="20170419 22:25:14.832"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:25:14.992">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/inventory/enumerate, headers=None json=None</msg>
<msg level="INFO" timestamp="20170419 22:25:14.992">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 22:25:14.833" status="PASS" endtime="20170419 22:25:14.992"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status starttime="20170419 22:25:14.992" status="PASS" endtime="20170419 22:25:14.993"></status>
</kw>
<msg level="INFO" timestamp="20170419 22:25:14.993">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 22:25:14.650" status="PASS" endtime="20170419 22:25:14.993"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:25:14.994">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 22:25:14.994" status="PASS" endtime="20170419 22:25:14.994"></status>
</kw>
<msg level="INFO" timestamp="20170419 22:25:14.994">${status} = True</msg>
<status starttime="20170419 22:25:14.993" status="PASS" endtime="20170419 22:25:14.994"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status starttime="20170419 22:25:14.995" status="PASS" endtime="20170419 22:25:14.995"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:25:14.995">To JSON using : content={
  "data": {
    "/xyz/openbmc_project/inventory/createme3": {
      "ExampleProperty1": "foo"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc": {
      "BuildDate": "", 
      "FieldReplaceable": 0, 
      "Manufacturer": "IBM", 
      "Model": "", 
      "PartNumber": "01DH051", 
      "Present": 1, 
      "PrettyName": "BMC PLANAR  ", 
      "SerialNumber": "000000000000"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc/ethernet": {
      "FieldReplaceable": 0, 
      "MACAddress": "00:00:00:00:00:00", 
      "Present": 1, 
      "PrettyName": ""
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170419 22:25:14.996">To JSON using : pretty_print=True </msg>
<msg level="INFO" timestamp="20170419 22:25:14.996">${jsondata} = {
    "data": {
        "/xyz/openbmc_project/inventory/createme3": {
            "ExampleProperty1": "foo"
        },
        "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc":...</msg>
<status starttime="20170419 22:25:14.995" status="PASS" endtime="20170419 22:25:14.996"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:25:14.997" html="yes">Appended to file '&lt;a href="file:///tmp/root/9272/obmc-robot/logs/20170419222508776485_TestsTestBasicPoweron/20170419222508776485_PowerOnTest/20170419222508776485_BMC_inventory.txt"&gt;/tmp/root/9272/obmc-robot/logs/20170419222508776485_TestsTestBasicPoweron/20170419222508776485_PowerOnTest/20170419222508776485_BMC_inventory.txt&lt;/a&gt;'.</msg>
<status starttime="20170419 22:25:14.997" status="PASS" endtime="20170419 22:25:14.997"></status>
</kw>
<status starttime="20170419 22:25:14.996" status="PASS" endtime="20170419 22:25:14.997"></status>
</kw>
<status starttime="20170419 22:25:14.649" status="PASS" endtime="20170419 22:25:14.997"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_led', '/org/openbmc/records/events/enumerate')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:25:14.998">${logpath} = /tmp/root/9272/obmc-robot/logs/20170419222508776485_TestsTestBasicPoweron/20170419222508776485_PowerOnTest/20170419222508776485_BMC_led.txt</msg>
<status starttime="20170419 22:25:14.998" status="PASS" endtime="20170419 22:25:14.998"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:25:15.000">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170419 22:25:15.000" status="PASS" endtime="20170419 22:25:15.001"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:25:15.001">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170419 22:25:15.001" status="PASS" endtime="20170419 22:25:15.001"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:25:15.002">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170419 22:25:15.001" status="PASS" endtime="20170419 22:25:15.002"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:25:15.003">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170419 22:25:15.002" status="PASS" endtime="20170419 22:25:15.003"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:25:15.178">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170419 22:25:15.004" status="PASS" endtime="20170419 22:25:15.178"></status>
</kw>
<msg level="INFO" timestamp="20170419 22:25:15.178">${status} = PASS</msg>
<msg level="INFO" timestamp="20170419 22:25:15.179">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 22:25:15.003" status="PASS" endtime="20170419 22:25:15.179"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:25:15.179">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 22:25:15.179" status="PASS" endtime="20170419 22:25:15.179"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:25:15.180">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 22:25:15.180" status="PASS" endtime="20170419 22:25:15.180"></status>
</kw>
<status starttime="20170419 22:25:14.999" status="PASS" endtime="20170419 22:25:15.180"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:25:15.181">${base_uri} = /org/openbmc/records/events/enumerate</msg>
<status starttime="20170419 22:25:15.180" status="PASS" endtime="20170419 22:25:15.181"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status starttime="20170419 22:25:15.181" status="PASS" endtime="20170419 22:25:15.181"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:25:15.263">Get Request using : alias=openbmc, uri=/org/openbmc/records/events/enumerate, headers=None json=None</msg>
<msg level="INFO" timestamp="20170419 22:25:15.264">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 22:25:15.182" status="PASS" endtime="20170419 22:25:15.264"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status starttime="20170419 22:25:15.264" status="PASS" endtime="20170419 22:25:15.264"></status>
</kw>
<msg level="INFO" timestamp="20170419 22:25:15.264">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 22:25:14.998" status="PASS" endtime="20170419 22:25:15.264"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:25:15.265">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 22:25:15.265" status="PASS" endtime="20170419 22:25:15.266"></status>
</kw>
<msg level="INFO" timestamp="20170419 22:25:15.266">${status} = True</msg>
<status starttime="20170419 22:25:15.265" status="PASS" endtime="20170419 22:25:15.266"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status starttime="20170419 22:25:15.266" status="PASS" endtime="20170419 22:25:15.266"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:25:15.267">To JSON using : content={
  "data": {}, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170419 22:25:15.267">To JSON using : pretty_print=True </msg>
<msg level="INFO" timestamp="20170419 22:25:15.267">${jsondata} = {
    "data": {},
    "message": "200 OK",
    "status": "ok"
}</msg>
<status starttime="20170419 22:25:15.266" status="PASS" endtime="20170419 22:25:15.267"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:25:15.268" html="yes">Appended to file '&lt;a href="file:///tmp/root/9272/obmc-robot/logs/20170419222508776485_TestsTestBasicPoweron/20170419222508776485_PowerOnTest/20170419222508776485_BMC_led.txt"&gt;/tmp/root/9272/obmc-robot/logs/20170419222508776485_TestsTestBasicPoweron/20170419222508776485_PowerOnTest/20170419222508776485_BMC_led.txt&lt;/a&gt;'.</msg>
<status starttime="20170419 22:25:15.268" status="PASS" endtime="20170419 22:25:15.268"></status>
</kw>
<status starttime="20170419 22:25:15.267" status="PASS" endtime="20170419 22:25:15.269"></status>
</kw>
<status starttime="20170419 22:25:14.997" status="PASS" endtime="20170419 22:25:15.269"></status>
</kw>
<status starttime="20170419 22:25:13.778" status="PASS" endtime="20170419 22:25:15.269"></status>
</kw>
<status starttime="20170419 22:25:13.777" status="PASS" endtime="20170419 22:25:15.269"></status>
</kw>
<status starttime="20170419 22:25:13.777" status="PASS" endtime="20170419 22:25:15.269"></status>
</kw>
<status starttime="20170419 22:25:13.776" status="PASS" endtime="20170419 22:25:15.269"></status>
</kw>
<status starttime="20170419 22:25:12.114" status="PASS" endtime="20170419 22:25:15.269"></status>
</kw>
<status starttime="20170419 22:25:12.113" status="PASS" endtime="20170419 22:25:15.269"></status>
</kw>
<status starttime="20170419 22:25:12.111" status="PASS" endtime="20170419 22:25:15.269"></status>
</kw>
<status starttime="20170419 22:25:12.111" status="PASS" endtime="20170419 22:25:15.269"></status>
</kw>
<kw type="foritem" name="${method} = ('FFDC Generic Report', 'BMC FFDC Manifest')">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Calls into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[1]}</arg>
</arguments>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>${keyword_name}</arg>
</arguments>
<kw name="BMC FFDC Manifest" library="openbmc_ffdc_methods">
<doc>Get the commands index for the FFDC_BMC_CMD,</doc>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg level="FAIL" timestamp="20170419 22:25:15.273">Dictionary does not contain key 'host'.</msg>
<status starttime="20170419 22:25:15.272" status="FAIL" endtime="20170419 22:25:15.273"></status>
</kw>
<msg level="INFO" timestamp="20170419 22:25:15.273">${has_host} = False</msg>
<status starttime="20170419 22:25:15.272" status="PASS" endtime="20170419 22:25:15.273"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status starttime="20170419 22:25:15.274" status="PASS" endtime="20170419 22:25:15.274"></status>
</kw>
<status starttime="20170419 22:25:15.273" status="PASS" endtime="20170419 22:25:15.274"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<kw name="User input SSH and HTTPs Ports" library="connection_client">
<doc>Update the global SSH and HTTPs port variable for QEMU</doc>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${SSH_PORT}</arg>
</arguments>
<assign>
<var>${port_num}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:25:15.275">${port_num} = 22</msg>
<status starttime="20170419 22:25:15.275" status="PASS" endtime="20170419 22:25:15.276"></status>
</kw>
<kw name="Replace Variables" library="BuiltIn">
<doc>Replaces variables in the given text with their current values.</doc>
<arguments>
<arg>${port_num}</arg>
</arguments>
<assign>
<var>${SSH_PORT}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:25:15.276">${SSH_PORT} = 22</msg>
<status starttime="20170419 22:25:15.276" status="PASS" endtime="20170419 22:25:15.276"></status>
</kw>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${HTTPS_PORT}</arg>
</arguments>
<assign>
<var>${https_num}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:25:15.277">${https_num} = 443</msg>
<status starttime="20170419 22:25:15.276" status="PASS" endtime="20170419 22:25:15.277"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${AUTH_URI}</arg>
<arg>https://${OPENBMC_HOST}:${https_num}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:25:15.277">${AUTH_URI} = https://9.3.86.161:443</msg>
<status starttime="20170419 22:25:15.277" status="PASS" endtime="20170419 22:25:15.277"></status>
</kw>
<status starttime="20170419 22:25:15.275" status="PASS" endtime="20170419 22:25:15.278"></status>
</kw>
<status starttime="20170419 22:25:15.274" status="PASS" endtime="20170419 22:25:15.278"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg level="FAIL" timestamp="20170419 22:25:15.279">Dictionary does not contain key 'port'.</msg>
<status starttime="20170419 22:25:15.278" status="FAIL" endtime="20170419 22:25:15.279"></status>
</kw>
<msg level="INFO" timestamp="20170419 22:25:15.279">${has_port} = False</msg>
<status starttime="20170419 22:25:15.278" status="PASS" endtime="20170419 22:25:15.279"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keywords" library="BuiltIn">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
</arguments>
<status starttime="20170419 22:25:15.280" status="PASS" endtime="20170419 22:25:15.280"></status>
</kw>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status starttime="20170419 22:25:15.281" status="PASS" endtime="20170419 22:25:15.281"></status>
</kw>
<status starttime="20170419 22:25:15.280" status="PASS" endtime="20170419 22:25:15.281"></status>
</kw>
<status starttime="20170419 22:25:15.279" status="PASS" endtime="20170419 22:25:15.281"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:25:15.282">Logging into '9.3.86.161:22' as 'root'.</msg>
<msg level="INFO" timestamp="20170419 22:25:16.964">Read output: root@witherspoon:~#</msg>
<status starttime="20170419 22:25:15.281" status="PASS" endtime="20170419 22:25:16.965"></status>
</kw>
<status starttime="20170419 22:25:15.271" status="PASS" endtime="20170419 22:25:16.965"></status>
</kw>
<kw name="Get Ffdc Cmd Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:25:16.965">@{entries} = [ DRIVER INFO | BMC DATA | APPLICATION DATA ]</msg>
<status starttime="20170419 22:25:16.965" status="PASS" endtime="20170419 22:25:16.965"></status>
</kw>
<kw type="for" name="${index} IN [ @{entries} ]">
<kw type="foritem" name="${index} = DRIVER INFO">
<kw name="Iterate BMC Command List Pairs" library="openbmc_ffdc_methods">
<doc>Feed in key pair list from dictionary to execute</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Bmc Cmd" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:25:16.967">@{cmd_list} = [ ('Build Info', 'cat /etc/version') | ('FW Level', 'cat /etc/os-release') ]</msg>
<status starttime="20170419 22:25:16.966" status="PASS" endtime="20170419 22:25:16.967"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${ENTRY_INDEX}</arg>
<arg>${key_index}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:25:16.971">${ENTRY_INDEX} = DRIVER INFO</msg>
<status starttime="20170419 22:25:16.967" status="PASS" endtime="20170419 22:25:16.972"></status>
</kw>
<kw type="for" name="${cmd} IN [ @{cmd_list} ]">
<kw type="foritem" name="${cmd} = ('Build Info', 'cat /etc/version')">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:25:16.975" html="yes">Appended to file '&lt;a href="file:///tmp/root/9272/obmc-robot/logs/20170419222508776485_TestsTestBasicPoweron/20170419222508776485_PowerOnTest/20170419222508776485_BMC_general.txt"&gt;/tmp/root/9272/obmc-robot/logs/20170419222508776485_TestsTestBasicPoweron/20170419222508776485_PowerOnTest/20170419222508776485_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170419 22:25:16.974" status="PASS" endtime="20170419 22:25:16.975"></status>
</kw>
<status starttime="20170419 22:25:16.974" status="PASS" endtime="20170419 22:25:16.975"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:25:16.976" html="yes">Appended to file '&lt;a href="file:///tmp/root/9272/obmc-robot/logs/20170419222508776485_TestsTestBasicPoweron/20170419222508776485_PowerOnTest/20170419222508776485_BMC_general.txt"&gt;/tmp/root/9272/obmc-robot/logs/20170419222508776485_TestsTestBasicPoweron/20170419222508776485_PowerOnTest/20170419222508776485_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170419 22:25:16.976" status="PASS" endtime="20170419 22:25:16.976"></status>
</kw>
<status starttime="20170419 22:25:16.975" status="PASS" endtime="20170419 22:25:16.976"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:25:16.977" html="yes">Appended to file '&lt;a href="file:///tmp/root/9272/obmc-robot/logs/20170419222508776485_TestsTestBasicPoweron/20170419222508776485_PowerOnTest/20170419222508776485_BMC_general.txt"&gt;/tmp/root/9272/obmc-robot/logs/20170419222508776485_TestsTestBasicPoweron/20170419222508776485_PowerOnTest/20170419222508776485_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170419 22:25:16.977" status="PASS" endtime="20170419 22:25:16.978"></status>
</kw>
<status starttime="20170419 22:25:16.976" status="PASS" endtime="20170419 22:25:16.978"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:25:16.979" html="yes">Appended to file '&lt;a href="file:///tmp/root/9272/obmc-robot/logs/20170419222508776485_TestsTestBasicPoweron/20170419222508776485_PowerOnTest/20170419222508776485_BMC_general.txt"&gt;/tmp/root/9272/obmc-robot/logs/20170419222508776485_TestsTestBasicPoweron/20170419222508776485_PowerOnTest/20170419222508776485_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170419 22:25:16.978" status="PASS" endtime="20170419 22:25:16.979"></status>
</kw>
<status starttime="20170419 22:25:16.978" status="PASS" endtime="20170419 22:25:16.979"></status>
</kw>
<status starttime="20170419 22:25:16.973" status="PASS" endtime="20170419 22:25:16.979"></status>
</kw>
<status starttime="20170419 22:25:16.973" status="PASS" endtime="20170419 22:25:16.979"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:25:16.980">Executing command 'cat /etc/version'.</msg>
<msg level="INFO" timestamp="20170419 22:25:17.026">Command exited with return code 1.</msg>
<msg level="INFO" timestamp="20170419 22:25:17.026">${stdout} = </msg>
<msg level="INFO" timestamp="20170419 22:25:17.026">${stderr} = cat: can't open '/etc/version': No such file or directory</msg>
<status starttime="20170419 22:25:16.979" status="PASS" endtime="20170419 22:25:17.026"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:25:17.032" html="yes">Appended to file '&lt;a href="file:///tmp/root/9272/obmc-robot/logs/20170419222508776485_TestsTestBasicPoweron/20170419222508776485_PowerOnTest/20170419222508776485_BMC_general.txt"&gt;/tmp/root/9272/obmc-robot/logs/20170419222508776485_TestsTestBasicPoweron/20170419222508776485_PowerOnTest/20170419222508776485_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170419 22:25:17.032" status="PASS" endtime="20170419 22:25:17.032"></status>
</kw>
<status starttime="20170419 22:25:17.031" status="PASS" endtime="20170419 22:25:17.033"></status>
</kw>
<status starttime="20170419 22:25:17.027" status="PASS" endtime="20170419 22:25:17.033"></status>
</kw>
<status starttime="20170419 22:25:16.972" status="PASS" endtime="20170419 22:25:17.033"></status>
</kw>
<status starttime="20170419 22:25:16.972" status="PASS" endtime="20170419 22:25:17.033"></status>
</kw>
<kw type="foritem" name="${cmd} = ('FW Level', 'cat /etc/os-release')">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:25:17.036" html="yes">Appended to file '&lt;a href="file:///tmp/root/9272/obmc-robot/logs/20170419222508776485_TestsTestBasicPoweron/20170419222508776485_PowerOnTest/20170419222508776485_BMC_general.txt"&gt;/tmp/root/9272/obmc-robot/logs/20170419222508776485_TestsTestBasicPoweron/20170419222508776485_PowerOnTest/20170419222508776485_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170419 22:25:17.035" status="PASS" endtime="20170419 22:25:17.036"></status>
</kw>
<status starttime="20170419 22:25:17.035" status="PASS" endtime="20170419 22:25:17.036"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:25:17.037" html="yes">Appended to file '&lt;a href="file:///tmp/root/9272/obmc-robot/logs/20170419222508776485_TestsTestBasicPoweron/20170419222508776485_PowerOnTest/20170419222508776485_BMC_general.txt"&gt;/tmp/root/9272/obmc-robot/logs/20170419222508776485_TestsTestBasicPoweron/20170419222508776485_PowerOnTest/20170419222508776485_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170419 22:25:17.037" status="PASS" endtime="20170419 22:25:17.037"></status>
</kw>
<status starttime="20170419 22:25:17.036" status="PASS" endtime="20170419 22:25:17.037"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:25:17.039" html="yes">Appended to file '&lt;a href="file:///tmp/root/9272/obmc-robot/logs/20170419222508776485_TestsTestBasicPoweron/20170419222508776485_PowerOnTest/20170419222508776485_BMC_general.txt"&gt;/tmp/root/9272/obmc-robot/logs/20170419222508776485_TestsTestBasicPoweron/20170419222508776485_PowerOnTest/20170419222508776485_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170419 22:25:17.038" status="PASS" endtime="20170419 22:25:17.039"></status>
</kw>
<status starttime="20170419 22:25:17.038" status="PASS" endtime="20170419 22:25:17.039"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:25:17.040" html="yes">Appended to file '&lt;a href="file:///tmp/root/9272/obmc-robot/logs/20170419222508776485_TestsTestBasicPoweron/20170419222508776485_PowerOnTest/20170419222508776485_BMC_general.txt"&gt;/tmp/root/9272/obmc-robot/logs/20170419222508776485_TestsTestBasicPoweron/20170419222508776485_PowerOnTest/20170419222508776485_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170419 22:25:17.039" status="PASS" endtime="20170419 22:25:17.040"></status>
</kw>
<status starttime="20170419 22:25:17.039" status="PASS" endtime="20170419 22:25:17.040"></status>
</kw>
<status starttime="20170419 22:25:17.034" status="PASS" endtime="20170419 22:25:17.040"></status>
</kw>
<status starttime="20170419 22:25:17.034" status="PASS" endtime="20170419 22:25:17.040"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:25:17.041">Executing command 'cat /etc/os-release'.</msg>
<msg level="INFO" timestamp="20170419 22:25:17.116">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20170419 22:25:17.116">${stdout} = ID="openbmc-phosphor"
NAME="Phosphor OpenBMC (Phosphor OpenBMC Project Reference Distro)"
VERSION="v1.99.4-40"
VERSION_ID="v1.99.4-40-g4e3ec01"
PRETTY_NAME="Phosphor OpenBMC (Phosphor OpenBMC Project ...</msg>
<msg level="INFO" timestamp="20170419 22:25:17.116">${stderr} = </msg>
<status starttime="20170419 22:25:17.040" status="PASS" endtime="20170419 22:25:17.116"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:25:17.122" html="yes">Appended to file '&lt;a href="file:///tmp/root/9272/obmc-robot/logs/20170419222508776485_TestsTestBasicPoweron/20170419222508776485_PowerOnTest/20170419222508776485_BMC_general.txt"&gt;/tmp/root/9272/obmc-robot/logs/20170419222508776485_TestsTestBasicPoweron/20170419222508776485_PowerOnTest/20170419222508776485_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170419 22:25:17.121" status="PASS" endtime="20170419 22:25:17.122"></status>
</kw>
<status starttime="20170419 22:25:17.121" status="PASS" endtime="20170419 22:25:17.122"></status>
</kw>
<status starttime="20170419 22:25:17.117" status="PASS" endtime="20170419 22:25:17.122"></status>
</kw>
<status starttime="20170419 22:25:17.033" status="PASS" endtime="20170419 22:25:17.122"></status>
</kw>
<status starttime="20170419 22:25:17.033" status="PASS" endtime="20170419 22:25:17.122"></status>
</kw>
<status starttime="20170419 22:25:16.972" status="PASS" endtime="20170419 22:25:17.123"></status>
</kw>
<status starttime="20170419 22:25:16.966" status="PASS" endtime="20170419 22:25:17.123"></status>
</kw>
<status starttime="20170419 22:25:16.966" status="PASS" endtime="20170419 22:25:17.123"></status>
</kw>
<kw type="foritem" name="${index} = BMC DATA">
<kw name="Iterate BMC Command List Pairs" library="openbmc_ffdc_methods">
<doc>Feed in key pair list from dictionary to execute</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Bmc Cmd" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:25:17.124">@{cmd_list} = [ ('BMC Uptime', 'uptime') | ('BMC File System Disk Space Usage', 'df -hT') | ('BMC OS', 'uname -a') ]</msg>
<status starttime="20170419 22:25:17.123" status="PASS" endtime="20170419 22:25:17.124"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${ENTRY_INDEX}</arg>
<arg>${key_index}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:25:17.124">${ENTRY_INDEX} = BMC DATA</msg>
<status starttime="20170419 22:25:17.124" status="PASS" endtime="20170419 22:25:17.124"></status>
</kw>
<kw type="for" name="${cmd} IN [ @{cmd_list} ]">
<kw type="foritem" name="${cmd} = ('BMC Uptime', 'uptime')">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:25:17.127" html="yes">Appended to file '&lt;a href="file:///tmp/root/9272/obmc-robot/logs/20170419222508776485_TestsTestBasicPoweron/20170419222508776485_PowerOnTest/20170419222508776485_BMC_general.txt"&gt;/tmp/root/9272/obmc-robot/logs/20170419222508776485_TestsTestBasicPoweron/20170419222508776485_PowerOnTest/20170419222508776485_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170419 22:25:17.127" status="PASS" endtime="20170419 22:25:17.128"></status>
</kw>
<status starttime="20170419 22:25:17.127" status="PASS" endtime="20170419 22:25:17.128"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:25:17.129" html="yes">Appended to file '&lt;a href="file:///tmp/root/9272/obmc-robot/logs/20170419222508776485_TestsTestBasicPoweron/20170419222508776485_PowerOnTest/20170419222508776485_BMC_general.txt"&gt;/tmp/root/9272/obmc-robot/logs/20170419222508776485_TestsTestBasicPoweron/20170419222508776485_PowerOnTest/20170419222508776485_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170419 22:25:17.128" status="PASS" endtime="20170419 22:25:17.129"></status>
</kw>
<status starttime="20170419 22:25:17.128" status="PASS" endtime="20170419 22:25:17.129"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:25:17.130" html="yes">Appended to file '&lt;a href="file:///tmp/root/9272/obmc-robot/logs/20170419222508776485_TestsTestBasicPoweron/20170419222508776485_PowerOnTest/20170419222508776485_BMC_general.txt"&gt;/tmp/root/9272/obmc-robot/logs/20170419222508776485_TestsTestBasicPoweron/20170419222508776485_PowerOnTest/20170419222508776485_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170419 22:25:17.130" status="PASS" endtime="20170419 22:25:17.130"></status>
</kw>
<status starttime="20170419 22:25:17.129" status="PASS" endtime="20170419 22:25:17.130"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:25:17.132" html="yes">Appended to file '&lt;a href="file:///tmp/root/9272/obmc-robot/logs/20170419222508776485_TestsTestBasicPoweron/20170419222508776485_PowerOnTest/20170419222508776485_BMC_general.txt"&gt;/tmp/root/9272/obmc-robot/logs/20170419222508776485_TestsTestBasicPoweron/20170419222508776485_PowerOnTest/20170419222508776485_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170419 22:25:17.131" status="PASS" endtime="20170419 22:25:17.132"></status>
</kw>
<status starttime="20170419 22:25:17.130" status="PASS" endtime="20170419 22:25:17.132"></status>
</kw>
<status starttime="20170419 22:25:17.126" status="PASS" endtime="20170419 22:25:17.132"></status>
</kw>
<status starttime="20170419 22:25:17.126" status="PASS" endtime="20170419 22:25:17.132"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:25:17.133">Executing command 'uptime'.</msg>
<msg level="INFO" timestamp="20170419 22:25:17.191">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20170419 22:25:17.191">${stdout} =  22:25:19 up 20 min,  load average: 0.02, 0.11, 0.26</msg>
<msg level="INFO" timestamp="20170419 22:25:17.191">${stderr} = </msg>
<status starttime="20170419 22:25:17.132" status="PASS" endtime="20170419 22:25:17.191"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:25:17.197" html="yes">Appended to file '&lt;a href="file:///tmp/root/9272/obmc-robot/logs/20170419222508776485_TestsTestBasicPoweron/20170419222508776485_PowerOnTest/20170419222508776485_BMC_general.txt"&gt;/tmp/root/9272/obmc-robot/logs/20170419222508776485_TestsTestBasicPoweron/20170419222508776485_PowerOnTest/20170419222508776485_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170419 22:25:17.197" status="PASS" endtime="20170419 22:25:17.197"></status>
</kw>
<status starttime="20170419 22:25:17.196" status="PASS" endtime="20170419 22:25:17.197"></status>
</kw>
<status starttime="20170419 22:25:17.192" status="PASS" endtime="20170419 22:25:17.197"></status>
</kw>
<status starttime="20170419 22:25:17.125" status="PASS" endtime="20170419 22:25:17.197"></status>
</kw>
<status starttime="20170419 22:25:17.125" status="PASS" endtime="20170419 22:25:17.197"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC File System Disk Space Usage', 'df -hT')">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:25:17.200" html="yes">Appended to file '&lt;a href="file:///tmp/root/9272/obmc-robot/logs/20170419222508776485_TestsTestBasicPoweron/20170419222508776485_PowerOnTest/20170419222508776485_BMC_general.txt"&gt;/tmp/root/9272/obmc-robot/logs/20170419222508776485_TestsTestBasicPoweron/20170419222508776485_PowerOnTest/20170419222508776485_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170419 22:25:17.200" status="PASS" endtime="20170419 22:25:17.200"></status>
</kw>
<status starttime="20170419 22:25:17.199" status="PASS" endtime="20170419 22:25:17.200"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:25:17.202" html="yes">Appended to file '&lt;a href="file:///tmp/root/9272/obmc-robot/logs/20170419222508776485_TestsTestBasicPoweron/20170419222508776485_PowerOnTest/20170419222508776485_BMC_general.txt"&gt;/tmp/root/9272/obmc-robot/logs/20170419222508776485_TestsTestBasicPoweron/20170419222508776485_PowerOnTest/20170419222508776485_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170419 22:25:17.201" status="PASS" endtime="20170419 22:25:17.202"></status>
</kw>
<status starttime="20170419 22:25:17.201" status="PASS" endtime="20170419 22:25:17.202"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:25:17.203" html="yes">Appended to file '&lt;a href="file:///tmp/root/9272/obmc-robot/logs/20170419222508776485_TestsTestBasicPoweron/20170419222508776485_PowerOnTest/20170419222508776485_BMC_general.txt"&gt;/tmp/root/9272/obmc-robot/logs/20170419222508776485_TestsTestBasicPoweron/20170419222508776485_PowerOnTest/20170419222508776485_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170419 22:25:17.203" status="PASS" endtime="20170419 22:25:17.203"></status>
</kw>
<status starttime="20170419 22:25:17.202" status="PASS" endtime="20170419 22:25:17.203"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:25:17.204" html="yes">Appended to file '&lt;a href="file:///tmp/root/9272/obmc-robot/logs/20170419222508776485_TestsTestBasicPoweron/20170419222508776485_PowerOnTest/20170419222508776485_BMC_general.txt"&gt;/tmp/root/9272/obmc-robot/logs/20170419222508776485_TestsTestBasicPoweron/20170419222508776485_PowerOnTest/20170419222508776485_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170419 22:25:17.204" status="PASS" endtime="20170419 22:25:17.204"></status>
</kw>
<status starttime="20170419 22:25:17.203" status="PASS" endtime="20170419 22:25:17.204"></status>
</kw>
<status starttime="20170419 22:25:17.199" status="PASS" endtime="20170419 22:25:17.204"></status>
</kw>
<status starttime="20170419 22:25:17.198" status="PASS" endtime="20170419 22:25:17.205"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:25:17.205">Executing command 'df -hT'.</msg>
<msg level="INFO" timestamp="20170419 22:25:17.280">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20170419 22:25:17.280">${stdout} = Filesystem           Type            Size      Used Available Use% Mounted on
dev                  devtmpfs      210.1M         0    210.1M   0% /dev
tmpfs                tmpfs         211.4M     13.9...</msg>
<msg level="INFO" timestamp="20170419 22:25:17.280">${stderr} = </msg>
<status starttime="20170419 22:25:17.205" status="PASS" endtime="20170419 22:25:17.280"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:25:17.285" html="yes">Appended to file '&lt;a href="file:///tmp/root/9272/obmc-robot/logs/20170419222508776485_TestsTestBasicPoweron/20170419222508776485_PowerOnTest/20170419222508776485_BMC_general.txt"&gt;/tmp/root/9272/obmc-robot/logs/20170419222508776485_TestsTestBasicPoweron/20170419222508776485_PowerOnTest/20170419222508776485_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170419 22:25:17.285" status="PASS" endtime="20170419 22:25:17.286"></status>
</kw>
<status starttime="20170419 22:25:17.284" status="PASS" endtime="20170419 22:25:17.286"></status>
</kw>
<status starttime="20170419 22:25:17.280" status="PASS" endtime="20170419 22:25:17.286"></status>
</kw>
<status starttime="20170419 22:25:17.198" status="PASS" endtime="20170419 22:25:17.286"></status>
</kw>
<status starttime="20170419 22:25:17.198" status="PASS" endtime="20170419 22:25:17.286"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC OS', 'uname -a')">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:25:17.289" html="yes">Appended to file '&lt;a href="file:///tmp/root/9272/obmc-robot/logs/20170419222508776485_TestsTestBasicPoweron/20170419222508776485_PowerOnTest/20170419222508776485_BMC_general.txt"&gt;/tmp/root/9272/obmc-robot/logs/20170419222508776485_TestsTestBasicPoweron/20170419222508776485_PowerOnTest/20170419222508776485_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170419 22:25:17.288" status="PASS" endtime="20170419 22:25:17.289"></status>
</kw>
<status starttime="20170419 22:25:17.288" status="PASS" endtime="20170419 22:25:17.289"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:25:17.290" html="yes">Appended to file '&lt;a href="file:///tmp/root/9272/obmc-robot/logs/20170419222508776485_TestsTestBasicPoweron/20170419222508776485_PowerOnTest/20170419222508776485_BMC_general.txt"&gt;/tmp/root/9272/obmc-robot/logs/20170419222508776485_TestsTestBasicPoweron/20170419222508776485_PowerOnTest/20170419222508776485_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170419 22:25:17.290" status="PASS" endtime="20170419 22:25:17.291"></status>
</kw>
<status starttime="20170419 22:25:17.289" status="PASS" endtime="20170419 22:25:17.291"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:25:17.292" html="yes">Appended to file '&lt;a href="file:///tmp/root/9272/obmc-robot/logs/20170419222508776485_TestsTestBasicPoweron/20170419222508776485_PowerOnTest/20170419222508776485_BMC_general.txt"&gt;/tmp/root/9272/obmc-robot/logs/20170419222508776485_TestsTestBasicPoweron/20170419222508776485_PowerOnTest/20170419222508776485_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170419 22:25:17.291" status="PASS" endtime="20170419 22:25:17.292"></status>
</kw>
<status starttime="20170419 22:25:17.291" status="PASS" endtime="20170419 22:25:17.292"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:25:17.293" html="yes">Appended to file '&lt;a href="file:///tmp/root/9272/obmc-robot/logs/20170419222508776485_TestsTestBasicPoweron/20170419222508776485_PowerOnTest/20170419222508776485_BMC_general.txt"&gt;/tmp/root/9272/obmc-robot/logs/20170419222508776485_TestsTestBasicPoweron/20170419222508776485_PowerOnTest/20170419222508776485_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170419 22:25:17.293" status="PASS" endtime="20170419 22:25:17.293"></status>
</kw>
<status starttime="20170419 22:25:17.292" status="PASS" endtime="20170419 22:25:17.293"></status>
</kw>
<status starttime="20170419 22:25:17.287" status="PASS" endtime="20170419 22:25:17.293"></status>
</kw>
<status starttime="20170419 22:25:17.287" status="PASS" endtime="20170419 22:25:17.293"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:25:17.294">Executing command 'uname -a'.</msg>
<msg level="INFO" timestamp="20170419 22:25:17.368">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20170419 22:25:17.369">${stdout} = Linux witherspoon 4.7.10-6786cab8778ba96d84d89c7aec34374b5f4f1968 #1 Wed Apr 19 21:46:50 UTC 2017 armv6l GNU/Linux</msg>
<msg level="INFO" timestamp="20170419 22:25:17.369">${stderr} = </msg>
<status starttime="20170419 22:25:17.294" status="PASS" endtime="20170419 22:25:17.369"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:25:17.374" html="yes">Appended to file '&lt;a href="file:///tmp/root/9272/obmc-robot/logs/20170419222508776485_TestsTestBasicPoweron/20170419222508776485_PowerOnTest/20170419222508776485_BMC_general.txt"&gt;/tmp/root/9272/obmc-robot/logs/20170419222508776485_TestsTestBasicPoweron/20170419222508776485_PowerOnTest/20170419222508776485_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170419 22:25:17.374" status="PASS" endtime="20170419 22:25:17.375"></status>
</kw>
<status starttime="20170419 22:25:17.373" status="PASS" endtime="20170419 22:25:17.375"></status>
</kw>
<status starttime="20170419 22:25:17.369" status="PASS" endtime="20170419 22:25:17.375"></status>
</kw>
<status starttime="20170419 22:25:17.286" status="PASS" endtime="20170419 22:25:17.375"></status>
</kw>
<status starttime="20170419 22:25:17.286" status="PASS" endtime="20170419 22:25:17.375"></status>
</kw>
<status starttime="20170419 22:25:17.125" status="PASS" endtime="20170419 22:25:17.375"></status>
</kw>
<status starttime="20170419 22:25:17.123" status="PASS" endtime="20170419 22:25:17.375"></status>
</kw>
<status starttime="20170419 22:25:17.123" status="PASS" endtime="20170419 22:25:17.375"></status>
</kw>
<kw type="foritem" name="${index} = APPLICATION DATA">
<kw name="Iterate BMC Command List Pairs" library="openbmc_ffdc_methods">
<doc>Feed in key pair list from dictionary to execute</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Bmc Cmd" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:25:17.376">@{cmd_list} = [ ('BMC state', '/usr/sbin/obmcutil  state') ]</msg>
<status starttime="20170419 22:25:17.376" status="PASS" endtime="20170419 22:25:17.376"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${ENTRY_INDEX}</arg>
<arg>${key_index}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:25:17.377">${ENTRY_INDEX} = APPLICATION DATA</msg>
<status starttime="20170419 22:25:17.376" status="PASS" endtime="20170419 22:25:17.377"></status>
</kw>
<kw type="for" name="${cmd} IN [ @{cmd_list} ]">
<kw type="foritem" name="${cmd} = ('BMC state', '/usr/sbin/obmcutil  state')">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:25:17.380" html="yes">Appended to file '&lt;a href="file:///tmp/root/9272/obmc-robot/logs/20170419222508776485_TestsTestBasicPoweron/20170419222508776485_PowerOnTest/20170419222508776485_BMC_general.txt"&gt;/tmp/root/9272/obmc-robot/logs/20170419222508776485_TestsTestBasicPoweron/20170419222508776485_PowerOnTest/20170419222508776485_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170419 22:25:17.379" status="PASS" endtime="20170419 22:25:17.380"></status>
</kw>
<status starttime="20170419 22:25:17.379" status="PASS" endtime="20170419 22:25:17.380"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:25:17.381" html="yes">Appended to file '&lt;a href="file:///tmp/root/9272/obmc-robot/logs/20170419222508776485_TestsTestBasicPoweron/20170419222508776485_PowerOnTest/20170419222508776485_BMC_general.txt"&gt;/tmp/root/9272/obmc-robot/logs/20170419222508776485_TestsTestBasicPoweron/20170419222508776485_PowerOnTest/20170419222508776485_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170419 22:25:17.381" status="PASS" endtime="20170419 22:25:17.381"></status>
</kw>
<status starttime="20170419 22:25:17.380" status="PASS" endtime="20170419 22:25:17.381"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:25:17.382" html="yes">Appended to file '&lt;a href="file:///tmp/root/9272/obmc-robot/logs/20170419222508776485_TestsTestBasicPoweron/20170419222508776485_PowerOnTest/20170419222508776485_BMC_general.txt"&gt;/tmp/root/9272/obmc-robot/logs/20170419222508776485_TestsTestBasicPoweron/20170419222508776485_PowerOnTest/20170419222508776485_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170419 22:25:17.382" status="PASS" endtime="20170419 22:25:17.383"></status>
</kw>
<status starttime="20170419 22:25:17.381" status="PASS" endtime="20170419 22:25:17.383"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:25:17.384" html="yes">Appended to file '&lt;a href="file:///tmp/root/9272/obmc-robot/logs/20170419222508776485_TestsTestBasicPoweron/20170419222508776485_PowerOnTest/20170419222508776485_BMC_general.txt"&gt;/tmp/root/9272/obmc-robot/logs/20170419222508776485_TestsTestBasicPoweron/20170419222508776485_PowerOnTest/20170419222508776485_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170419 22:25:17.383" status="PASS" endtime="20170419 22:25:17.384"></status>
</kw>
<status starttime="20170419 22:25:17.383" status="PASS" endtime="20170419 22:25:17.384"></status>
</kw>
<status starttime="20170419 22:25:17.378" status="PASS" endtime="20170419 22:25:17.384"></status>
</kw>
<status starttime="20170419 22:25:17.378" status="PASS" endtime="20170419 22:25:17.384"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:25:17.385">Executing command '/usr/sbin/obmcutil  state'.</msg>
<msg level="INFO" timestamp="20170419 22:25:18.673">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20170419 22:25:18.674">${stdout} = CurrentBMCState:    xyz.openbmc_project.State.BMC.BMCState.Ready
CurrentPowerState:  xyz.openbmc_project.State.Chassis.PowerState.Off
CurrentHostState:   xyz.openbmc_project.State.Host.HostState.Off</msg>
<msg level="INFO" timestamp="20170419 22:25:18.674">${stderr} = </msg>
<status starttime="20170419 22:25:17.385" status="PASS" endtime="20170419 22:25:18.674"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:25:18.682" html="yes">Appended to file '&lt;a href="file:///tmp/root/9272/obmc-robot/logs/20170419222508776485_TestsTestBasicPoweron/20170419222508776485_PowerOnTest/20170419222508776485_BMC_general.txt"&gt;/tmp/root/9272/obmc-robot/logs/20170419222508776485_TestsTestBasicPoweron/20170419222508776485_PowerOnTest/20170419222508776485_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170419 22:25:18.681" status="PASS" endtime="20170419 22:25:18.682"></status>
</kw>
<status starttime="20170419 22:25:18.681" status="PASS" endtime="20170419 22:25:18.682"></status>
</kw>
<status starttime="20170419 22:25:18.674" status="PASS" endtime="20170419 22:25:18.682"></status>
</kw>
<status starttime="20170419 22:25:17.377" status="PASS" endtime="20170419 22:25:18.682"></status>
</kw>
<status starttime="20170419 22:25:17.377" status="PASS" endtime="20170419 22:25:18.683"></status>
</kw>
<status starttime="20170419 22:25:17.377" status="PASS" endtime="20170419 22:25:18.683"></status>
</kw>
<status starttime="20170419 22:25:17.375" status="PASS" endtime="20170419 22:25:18.683"></status>
</kw>
<status starttime="20170419 22:25:17.375" status="PASS" endtime="20170419 22:25:18.683"></status>
</kw>
<status starttime="20170419 22:25:16.966" status="PASS" endtime="20170419 22:25:18.683"></status>
</kw>
<status starttime="20170419 22:25:15.270" status="PASS" endtime="20170419 22:25:18.683"></status>
</kw>
<status starttime="20170419 22:25:15.270" status="PASS" endtime="20170419 22:25:18.683"></status>
</kw>
<status starttime="20170419 22:25:15.269" status="PASS" endtime="20170419 22:25:18.683"></status>
</kw>
<status starttime="20170419 22:25:15.269" status="PASS" endtime="20170419 22:25:18.683"></status>
</kw>
<kw type="foritem" name="${method} = ('Core Files', 'SCP Coredump Files')">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Calls into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[1]}</arg>
</arguments>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>${keyword_name}</arg>
</arguments>
<kw name="SCP Coredump Files" library="openbmc_ffdc_methods">
<doc>Copy core dump file from BMC to local system.</doc>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg level="FAIL" timestamp="20170419 22:25:18.687">Dictionary does not contain key 'host'.</msg>
<status starttime="20170419 22:25:18.687" status="FAIL" endtime="20170419 22:25:18.687"></status>
</kw>
<msg level="INFO" timestamp="20170419 22:25:18.687">${has_host} = False</msg>
<status starttime="20170419 22:25:18.686" status="PASS" endtime="20170419 22:25:18.687"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status starttime="20170419 22:25:18.688" status="PASS" endtime="20170419 22:25:18.689"></status>
</kw>
<status starttime="20170419 22:25:18.688" status="PASS" endtime="20170419 22:25:18.689"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<kw name="User input SSH and HTTPs Ports" library="connection_client">
<doc>Update the global SSH and HTTPs port variable for QEMU</doc>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${SSH_PORT}</arg>
</arguments>
<assign>
<var>${port_num}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:25:18.691">${port_num} = 22</msg>
<status starttime="20170419 22:25:18.690" status="PASS" endtime="20170419 22:25:18.691"></status>
</kw>
<kw name="Replace Variables" library="BuiltIn">
<doc>Replaces variables in the given text with their current values.</doc>
<arguments>
<arg>${port_num}</arg>
</arguments>
<assign>
<var>${SSH_PORT}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:25:18.692">${SSH_PORT} = 22</msg>
<status starttime="20170419 22:25:18.691" status="PASS" endtime="20170419 22:25:18.692"></status>
</kw>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${HTTPS_PORT}</arg>
</arguments>
<assign>
<var>${https_num}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:25:18.692">${https_num} = 443</msg>
<status starttime="20170419 22:25:18.692" status="PASS" endtime="20170419 22:25:18.692"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${AUTH_URI}</arg>
<arg>https://${OPENBMC_HOST}:${https_num}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:25:18.693">${AUTH_URI} = https://9.3.86.161:443</msg>
<status starttime="20170419 22:25:18.693" status="PASS" endtime="20170419 22:25:18.694"></status>
</kw>
<status starttime="20170419 22:25:18.690" status="PASS" endtime="20170419 22:25:18.694"></status>
</kw>
<status starttime="20170419 22:25:18.689" status="PASS" endtime="20170419 22:25:18.694"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg level="FAIL" timestamp="20170419 22:25:18.695">Dictionary does not contain key 'port'.</msg>
<status starttime="20170419 22:25:18.695" status="FAIL" endtime="20170419 22:25:18.696"></status>
</kw>
<msg level="INFO" timestamp="20170419 22:25:18.696">${has_port} = False</msg>
<status starttime="20170419 22:25:18.694" status="PASS" endtime="20170419 22:25:18.696"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keywords" library="BuiltIn">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
</arguments>
<status starttime="20170419 22:25:18.698" status="PASS" endtime="20170419 22:25:18.698"></status>
</kw>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status starttime="20170419 22:25:18.698" status="PASS" endtime="20170419 22:25:18.699"></status>
</kw>
<status starttime="20170419 22:25:18.697" status="PASS" endtime="20170419 22:25:18.699"></status>
</kw>
<status starttime="20170419 22:25:18.696" status="PASS" endtime="20170419 22:25:18.699"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:25:18.700">Logging into '9.3.86.161:22' as 'root'.</msg>
<msg level="INFO" timestamp="20170419 22:25:20.345">Read output: root@witherspoon:~#</msg>
<status starttime="20170419 22:25:18.699" status="PASS" endtime="20170419 22:25:20.345"></status>
</kw>
<status starttime="20170419 22:25:18.685" status="PASS" endtime="20170419 22:25:20.346"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>ls /tmp/core_*</arg>
</arguments>
<assign>
<var>${core_files}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:25:20.346">Executing command 'ls /tmp/core_*'.</msg>
<msg level="INFO" timestamp="20170419 22:25:20.402">Command exited with return code 1.</msg>
<msg level="INFO" timestamp="20170419 22:25:20.403">${core_files} = </msg>
<status starttime="20170419 22:25:20.346" status="PASS" endtime="20170419 22:25:20.403"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${core_files}</arg>
</arguments>
<assign>
<var>@{core_list}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:25:20.403">@{core_list} = [ ]</msg>
<status starttime="20170419 22:25:20.403" status="PASS" endtime="20170419 22:25:20.403"></status>
</kw>
<kw name="Open Connection for SCP" library="connection_client">
<kw name="Import Library" library="BuiltIn">
<doc>Imports a library with the given name and optional arguments.</doc>
<arguments>
<arg>SCPLibrary</arg>
<arg>WITH NAME</arg>
<arg>scp</arg>
</arguments>
<status starttime="20170419 22:25:20.404" status="PASS" endtime="20170419 22:25:20.413"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' == '${EMPTY}'</arg>
<arg>scp.Open connection</arg>
<arg>${OPENBMC_HOST}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>scp.Open connection</arg>
<arg>${OPENBMC_HOST}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>scp.Open connection</arg>
<arg>${OPENBMC_HOST}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
</arguments>
<kw name="Open Connection" library="scp">
<doc>Opens a new SCP connection to the given host.</doc>
<arguments>
<arg>${OPENBMC_HOST}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
</arguments>
<status starttime="20170419 22:25:20.415" status="PASS" endtime="20170419 22:25:21.050"></status>
</kw>
<status starttime="20170419 22:25:20.414" status="PASS" endtime="20170419 22:25:21.050"></status>
</kw>
<status starttime="20170419 22:25:20.414" status="PASS" endtime="20170419 22:25:21.050"></status>
</kw>
<status starttime="20170419 22:25:20.403" status="PASS" endtime="20170419 22:25:21.050"></status>
</kw>
<kw type="for" name="${index} IN [ @{core_list} ]">
<status starttime="20170419 22:25:21.050" status="PASS" endtime="20170419 22:25:21.051"></status>
</kw>
<status starttime="20170419 22:25:18.685" status="PASS" endtime="20170419 22:25:21.051"></status>
</kw>
<status starttime="20170419 22:25:18.684" status="PASS" endtime="20170419 22:25:21.051"></status>
</kw>
<status starttime="20170419 22:25:18.683" status="PASS" endtime="20170419 22:25:21.051"></status>
</kw>
<status starttime="20170419 22:25:18.683" status="PASS" endtime="20170419 22:25:21.051"></status>
</kw>
<kw type="foritem" name="${method} = ('OS FFDC', 'OS FFDC Files')">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Calls into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[1]}</arg>
</arguments>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>${keyword_name}</arg>
</arguments>
<kw name="OS FFDC Files" library="openbmc_ffdc_methods">
<doc>Get the command list and iterate</doc>
<kw name="Return From Keyword If" library="BuiltIn">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${OS_HOST}' == '${EMPTY}'</arg>
<arg>No OS Host Provided</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:25:21.053">Returning from the enclosing user keyword.</msg>
<status starttime="20170419 22:25:21.053" status="PASS" endtime="20170419 22:25:21.054"></status>
</kw>
<status starttime="20170419 22:25:21.052" status="PASS" endtime="20170419 22:25:21.054"></status>
</kw>
<status starttime="20170419 22:25:21.052" status="PASS" endtime="20170419 22:25:21.054"></status>
</kw>
<status starttime="20170419 22:25:21.051" status="PASS" endtime="20170419 22:25:21.054"></status>
</kw>
<status starttime="20170419 22:25:21.051" status="PASS" endtime="20170419 22:25:21.054"></status>
</kw>
<kw type="foritem" name="${method} = ('SEL Log', 'Collect eSEL Log')">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Calls into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[1]}</arg>
</arguments>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>${keyword_name}</arg>
</arguments>
<kw name="Collect eSEL Log" library="openbmc_ffdc_methods">
<doc>Collect eSEL log from logging entry and convert eSEL data</doc>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${BMC_LOGGING_ENTRY}/enumerate</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:25:21.057">Creating Session using : alias=openbmc, url=https://9.3.86.161:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170419 22:25:21.057" status="PASS" endtime="20170419 22:25:21.057"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:25:21.058">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170419 22:25:21.058" status="PASS" endtime="20170419 22:25:21.058"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:25:21.058">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170419 22:25:21.058" status="PASS" endtime="20170419 22:25:21.059"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:25:21.059">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170419 22:25:21.059" status="PASS" endtime="20170419 22:25:21.059"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:25:21.235">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170419 22:25:21.060" status="PASS" endtime="20170419 22:25:21.235"></status>
</kw>
<msg level="INFO" timestamp="20170419 22:25:21.235">${status} = PASS</msg>
<msg level="INFO" timestamp="20170419 22:25:21.235">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170419 22:25:21.059" status="PASS" endtime="20170419 22:25:21.235"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:25:21.236">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 22:25:21.235" status="PASS" endtime="20170419 22:25:21.236"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:25:21.236">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170419 22:25:21.236" status="PASS" endtime="20170419 22:25:21.236"></status>
</kw>
<status starttime="20170419 22:25:21.056" status="PASS" endtime="20170419 22:25:21.237"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:25:21.237">${base_uri} = /xyz/openbmc_project/logging/entry//enumerate</msg>
<status starttime="20170419 22:25:21.237" status="PASS" endtime="20170419 22:25:21.237"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status starttime="20170419 22:25:21.237" status="PASS" endtime="20170419 22:25:21.238"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:25:21.284">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry//enumerate, headers=None json=None</msg>
<msg level="INFO" timestamp="20170419 22:25:21.284">${ret} = &lt;Response [404]&gt;</msg>
<status starttime="20170419 22:25:21.238" status="PASS" endtime="20170419 22:25:21.284"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status starttime="20170419 22:25:21.285" status="PASS" endtime="20170419 22:25:21.285"></status>
</kw>
<msg level="INFO" timestamp="20170419 22:25:21.285">${resp} = &lt;Response [404]&gt;</msg>
<status starttime="20170419 22:25:21.055" status="PASS" endtime="20170419 22:25:21.285"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:25:21.286">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg level="FAIL" timestamp="20170419 22:25:21.287">404 != 200</msg>
<status starttime="20170419 22:25:21.286" status="FAIL" endtime="20170419 22:25:21.287"></status>
</kw>
<msg level="INFO" timestamp="20170419 22:25:21.287">${status} = False</msg>
<status starttime="20170419 22:25:21.286" status="PASS" endtime="20170419 22:25:21.287"></status>
</kw>
<kw name="Return From Keyword If" library="BuiltIn">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:25:21.287">Returning from the enclosing user keyword.</msg>
<status starttime="20170419 22:25:21.287" status="PASS" endtime="20170419 22:25:21.288"></status>
</kw>
<status starttime="20170419 22:25:21.055" status="PASS" endtime="20170419 22:25:21.288"></status>
</kw>
<status starttime="20170419 22:25:21.055" status="PASS" endtime="20170419 22:25:21.288"></status>
</kw>
<status starttime="20170419 22:25:21.054" status="PASS" endtime="20170419 22:25:21.288"></status>
</kw>
<status starttime="20170419 22:25:21.054" status="PASS" endtime="20170419 22:25:21.288"></status>
</kw>
<status starttime="20170419 22:25:08.930" status="PASS" endtime="20170419 22:25:21.288"></status>
</kw>
<status starttime="20170419 22:25:08.929" status="PASS" endtime="20170419 22:25:21.288"></status>
</kw>
<status starttime="20170419 22:25:08.929" status="PASS" endtime="20170419 22:25:21.288"></status>
</kw>
<status starttime="20170419 22:25:08.929" status="PASS" endtime="20170419 22:25:21.288"></status>
</kw>
<kw name="Close All Connections" library="SSHLibrary">
<doc>Closes all open connections.</doc>
<status starttime="20170419 22:25:21.291" status="PASS" endtime="20170419 22:25:21.414"></status>
</kw>
<status starttime="20170419 22:25:08.928" status="PASS" endtime="20170419 22:25:21.414"></status>
</kw>
<status starttime="20170419 22:25:03.753" status="PASS" endtime="20170419 22:25:21.414"></status>
</kw>
<status starttime="20170419 22:25:03.753" status="PASS" endtime="20170419 22:25:21.414"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}'=='True'</arg>
<arg>Recover Quiesced Host</arg>
</arguments>
<status starttime="20170419 22:25:21.415" status="PASS" endtime="20170419 22:25:21.415"></status>
</kw>
<kw name="Log Test Case Status" library="openbmc_ffdc_methods">
<doc>Test case execution result history.</doc>
<kw name="Create Directory" library="OperatingSystem">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>${FFDC_LOG_PATH}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:25:21.416" html="yes">Directory '&lt;a href="file:///tmp/root/9272/obmc-robot/logs"&gt;/tmp/root/9272/obmc-robot/logs&lt;/a&gt;' already exists.</msg>
<status starttime="20170419 22:25:21.416" status="PASS" endtime="20170419 22:25:21.416"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>OperatingSystem.File Should Exist</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<assign>
<var>${exist}</var>
</assign>
<kw name="File Should Exist" library="OperatingSystem">
<doc>Fails unless the given ``path`` points to an existing file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:25:21.417" html="yes">File '&lt;a href="file:///tmp/root/9272/obmc-robot/logs/test_history.txt"&gt;/tmp/root/9272/obmc-robot/logs/test_history.txt&lt;/a&gt;' exists.</msg>
<status starttime="20170419 22:25:21.417" status="PASS" endtime="20170419 22:25:21.417"></status>
</kw>
<msg level="INFO" timestamp="20170419 22:25:21.417">${exist} = True</msg>
<status starttime="20170419 22:25:21.416" status="PASS" endtime="20170419 22:25:21.417"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${exist}' == '${False}'</arg>
<arg>Create File</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<status starttime="20170419 22:25:21.417" status="PASS" endtime="20170419 22:25:21.418"></status>
</kw>
<kw name="Get Current Time Stamp" library="openbmc_ffdc_utils">
<doc>Get the current time stamp data</doc>
<assign>
<var>${cur_time}</var>
</assign>
<kw name="Get Current Date" library="DateTime">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:25:21.419">${cur_time} = 2017-04-19 22:25:21:418412</msg>
<status starttime="20170419 22:25:21.418" status="PASS" endtime="20170419 22:25:21.419"></status>
</kw>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:25:21.419">${cur_time} = 20170419222521418412</msg>
<status starttime="20170419 22:25:21.419" status="PASS" endtime="20170419 22:25:21.419"></status>
</kw>
<msg level="INFO" timestamp="20170419 22:25:21.419">${cur_time} = 20170419222521418412</msg>
<status starttime="20170419 22:25:21.418" status="PASS" endtime="20170419 22:25:21.419"></status>
</kw>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
<arg>${cur_time}:${SUITE_NAME}:${TEST_NAME}:${TEST_STATUS}${\n}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:25:21.420" html="yes">Appended to file '&lt;a href="file:///tmp/root/9272/obmc-robot/logs/test_history.txt"&gt;/tmp/root/9272/obmc-robot/logs/test_history.txt&lt;/a&gt;'.</msg>
<status starttime="20170419 22:25:21.420" status="PASS" endtime="20170419 22:25:21.420"></status>
</kw>
<status starttime="20170419 22:25:21.415" status="PASS" endtime="20170419 22:25:21.420"></status>
</kw>
<status starttime="20170419 22:25:03.489" status="PASS" endtime="20170419 22:25:21.421"></status>
</kw>
<kw name="Stop SOL Console Logging" library="utils">
<doc>Stop system console logging and return log output.</doc>
<assign>
<var>${sol_log}</var>
</assign>
<kw name="Create OS Console File Path" library="utils">
<doc>Create OS console file path name and return it.</doc>
<arguments>
<arg>${log_file_path}</arg>
</arguments>
<assign>
<var>${log_file_path}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>/tmp/${OPENBMC_HOST}_os_console</arg>
</arguments>
<assign>
<var>${default_file_path}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:25:21.422">${default_file_path} = /tmp/9.3.86.161_os_console</msg>
<status starttime="20170419 22:25:21.422" status="PASS" endtime="20170419 22:25:21.422"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${log_file_path}' == '${EMPTY}'</arg>
<arg>${default_file_path}</arg>
<arg>${log_file_path}</arg>
</arguments>
<assign>
<var>${log_file_path}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:25:21.423">${log_file_path} = /tmp/9.3.86.161_os_console</msg>
<status starttime="20170419 22:25:21.423" status="PASS" endtime="20170419 22:25:21.423"></status>
</kw>
<msg level="INFO" timestamp="20170419 22:25:21.423">${log_file_path} = /tmp/9.3.86.161_os_console</msg>
<status starttime="20170419 22:25:21.421" status="PASS" endtime="20170419 22:25:21.423"></status>
</kw>
<kw name="Create OS Console Command String" library="utils">
<doc>Return a command string to start OS console logging.</doc>
<assign>
<var>${search_string}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>which ssh_pw 2&gt;&amp;1</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:25:21.424">${cmd_buf} = which ssh_pw 2&gt;&amp;1</msg>
<status starttime="20170419 22:25:21.424" status="PASS" endtime="20170419 22:25:21.424"></status>
</kw>
<kw name="Rdpissuing" library="gen_robot_print">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status starttime="20170419 22:25:21.424" status="PASS" endtime="20170419 22:25:21.433"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:25:21.438">Running command 'which ssh_pw 2&gt;&amp;1'.</msg>
<msg level="INFO" timestamp="20170419 22:25:21.442">${rc} = 0</msg>
<msg level="INFO" timestamp="20170419 22:25:21.442">${output} = /tmp/root/9272/obmc-robot/.tox/witherspoon/bin/ssh_pw</msg>
<status starttime="20170419 22:25:21.433" status="PASS" endtime="20170419 22:25:21.442"></status>
</kw>
<kw name="Rdpvars" library="gen_robot_print">
<arguments>
<arg>rc</arg>
<arg>output</arg>
</arguments>
<status starttime="20170419 22:25:21.445" status="PASS" endtime="20170419 22:25:21.456"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${rc}</arg>
<arg>${0}</arg>
<arg>msg=${output}\n</arg>
</arguments>
<status starttime="20170419 22:25:21.456" status="PASS" endtime="20170419 22:25:21.457"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>ssh_pw ${OPENBMC_PASSWORD} -p 2200</arg>
<arg>${OPENBMC_USERNAME}@${OPENBMC_HOST}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:25:21.457">${cmd_buf} = ssh_pw 0penBmc -p 2200 root@9.3.86.161</msg>
<status starttime="20170419 22:25:21.457" status="PASS" endtime="20170419 22:25:21.457"></status>
</kw>
<msg level="INFO" timestamp="20170419 22:25:21.458">${search_string} = ssh_pw 0penBmc -p 2200 root@9.3.86.161</msg>
<status starttime="20170419 22:25:21.423" status="PASS" endtime="20170419 22:25:21.458"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>echo $(ps -ef | egrep '${search_string}'</arg>
<arg>| egrep -v grep | cut -c10-14)</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:25:21.459">${cmd_buf} = echo $(ps -ef | egrep 'ssh_pw 0penBmc -p 2200 root@9.3.86.161' | egrep -v grep | cut -c10-14)</msg>
<status starttime="20170419 22:25:21.458" status="PASS" endtime="20170419 22:25:21.459"></status>
</kw>
<kw name="Rdpissuing" library="gen_robot_print">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status starttime="20170419 22:25:21.459" status="PASS" endtime="20170419 22:25:21.466"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${os_con_pid}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:25:21.471">Running command 'echo $(ps -ef | egrep 'ssh_pw 0penBmc -p 2200 root@9.3.86.161' | egrep -v grep | cut -c10-14) 2&gt;&amp;1'.</msg>
<msg level="INFO" timestamp="20170419 22:25:21.482">${rc} = 0</msg>
<msg level="INFO" timestamp="20170419 22:25:21.482">${os_con_pid} = 170</msg>
<status starttime="20170419 22:25:21.466" status="PASS" endtime="20170419 22:25:21.482"></status>
</kw>
<kw name="Rdpvars" library="gen_robot_print">
<arguments>
<arg>os_con_pid</arg>
</arguments>
<status starttime="20170419 22:25:21.485" status="PASS" endtime="20170419 22:25:21.496"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>kill -9 ${os_con_pid}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:25:21.496">${cmd_buf} = kill -9 170</msg>
<status starttime="20170419 22:25:21.496" status="PASS" endtime="20170419 22:25:21.496"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${os_con_pid}' != '${EMPTY}'</arg>
<arg>Rdpissuing</arg>
<arg>${cmd_buf}</arg>
</arguments>
<kw name="Rdpissuing" library="gen_robot_print">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status starttime="20170419 22:25:21.497" status="PASS" endtime="20170419 22:25:21.504"></status>
</kw>
<status starttime="20170419 22:25:21.496" status="PASS" endtime="20170419 22:25:21.505"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${os_con_pid}' != '${EMPTY}'</arg>
<arg>Run And Return Rc And Output</arg>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:25:21.509">Running command 'kill -9 170 2&gt;&amp;1'.</msg>
<status starttime="20170419 22:25:21.505" status="PASS" endtime="20170419 22:25:21.512"></status>
</kw>
<msg level="INFO" timestamp="20170419 22:25:21.513">${rc} = 0</msg>
<msg level="INFO" timestamp="20170419 22:25:21.513">${output} = </msg>
<status starttime="20170419 22:25:21.505" status="PASS" endtime="20170419 22:25:21.514"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${os_con_pid}' != '${EMPTY}'</arg>
<arg>Rdpvars</arg>
<arg>rc</arg>
<arg>output</arg>
</arguments>
<kw name="Rdpvars" library="gen_robot_print">
<arguments>
<arg>rc</arg>
<arg>output</arg>
</arguments>
<status starttime="20170419 22:25:21.517" status="PASS" endtime="20170419 22:25:21.525"></status>
</kw>
<status starttime="20170419 22:25:21.516" status="PASS" endtime="20170419 22:25:21.525"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>cat ${log_file_path} 2&gt;&amp;1</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:25:21.526">${cmd_buf} = cat /tmp/9.3.86.161_os_console 2&gt;&amp;1</msg>
<status starttime="20170419 22:25:21.526" status="PASS" endtime="20170419 22:25:21.526"></status>
</kw>
<kw name="Rdpissuing" library="gen_robot_print">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status starttime="20170419 22:25:21.526" status="PASS" endtime="20170419 22:25:21.533"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg level="INFO" timestamp="20170419 22:25:21.538">Running command 'cat /tmp/9.3.86.161_os_console 2&gt;&amp;1'.</msg>
<msg level="INFO" timestamp="20170419 22:25:21.543">${rc} = 0</msg>
<msg level="INFO" timestamp="20170419 22:25:21.543">${output} = spawn ssh -p 2200 root@9.3.86.161
The authenticity of host '[9.3.86.161]:2200 ([9.3.86.161]:2200)' can't be established.
RSA key fingerprint is SHA256:ZIQ9EwwDVn5VT8G4YjbFDwg5zd11CmKi9jXhPu077c4.
Are ...</msg>
<status starttime="20170419 22:25:21.534" status="PASS" endtime="20170419 22:25:21.543"></status>
</kw>
<kw name="Rdpvars" library="gen_robot_print">
<arguments>
<arg>rc</arg>
</arguments>
<status starttime="20170419 22:25:21.545" status="PASS" endtime="20170419 22:25:21.554"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${targ_file_path}' != '${EMPTY}'</arg>
<arg>Run Keyword And Ignore Error</arg>
<arg>Copy File</arg>
<arg>${log_file_path}</arg>
<arg>${targ_file_path}</arg>
</arguments>
<status starttime="20170419 22:25:21.555" status="PASS" endtime="20170419 22:25:21.555"></status>
</kw>
<msg level="INFO" timestamp="20170419 22:25:21.556">${sol_log} = spawn ssh -p 2200 root@9.3.86.161
The authenticity of host '[9.3.86.161]:2200 ([9.3.86.161]:2200)' can't be established.
RSA key fingerprint is SHA256:ZIQ9EwwDVn5VT8G4YjbFDwg5zd11CmKi9jXhPu077c4.
Are ...</msg>
<status starttime="20170419 22:25:21.421" status="PASS" endtime="20170419 22:25:21.556"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${sol_log}</arg>
</arguments>
<msg level="INFO" timestamp="20170419 22:25:21.557">spawn ssh -p 2200 root@9.3.86.161
The authenticity of host '[9.3.86.161]:2200 ([9.3.86.161]:2200)' can't be established.
RSA key fingerprint is SHA256:ZIQ9EwwDVn5VT8G4YjbFDwg5zd11CmKi9jXhPu077c4.
Are you sure you want to continue connecting (yes/no)? yes
Warning: Permanently added '[9.3.86.161]:2200' (RSA) to the list of known hosts.
root@9.3.86.161's password: </msg>
<status starttime="20170419 22:25:21.556" status="PASS" endtime="20170419 22:25:21.557"></status>
</kw>
<status starttime="20170419 22:25:03.489" status="PASS" endtime="20170419 22:25:21.557"></status>
</kw>
<doc>Power off and on.</doc>
<tags>
<tag>chassisboot</tag>
<tag>Power_On_Test</tag>
</tags>
<status starttime="20170419 22:14:55.456" critical="yes" status="FAIL" endtime="20170419 22:25:21.557">Keyword 'Is Host Running' failed after retrying for 10 minutes. The last error was: Running != Off</status>
</test>
<doc>Test power on for HW CI.</doc>
<status starttime="20170419 22:14:55.424" status="FAIL" endtime="20170419 22:25:21.559"></status>
</suite>
<doc>Set metadata for test suite.</doc>
<status starttime="20170419 22:14:50.398" status="FAIL" endtime="20170419 22:25:21.563"></status>
</suite>
<statistics>
<total>
<stat pass="1" fail="1">Critical Tests</stat>
<stat pass="1" fail="1">All Tests</stat>
</total>
<tag>
<stat pass="0" fail="1">chassisboot</stat>
<stat pass="0" fail="1">Power_On_Test</stat>
<stat pass="1" fail="0">Test_SSL_Connection</stat>
</tag>
<suite>
<stat id="s1" pass="1" fail="1" name="Tests">Tests</stat>
<stat id="s1-s1" pass="1" fail="0" name="Security">Tests.Security</stat>
<stat id="s1-s1-s1" pass="1" fail="0" name="Test Ssl">Tests.Security.Test Ssl</stat>
<stat id="s1-s2" pass="0" fail="1" name="Test Basic Poweron">Tests.Test Basic Poweron</stat>
</suite>
</statistics>
<errors>
</errors>
</robot>
