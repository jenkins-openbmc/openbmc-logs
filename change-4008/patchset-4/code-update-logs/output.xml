<?xml version="1.0" encoding="UTF-8"?>
<robot generated="20170514 21:29:25.789" generator="Robot 3.0.2 (Python 2.7.12 on linux2)">
<suite source="/home/fspcibld/openbmc-test-automation/extended/test_bios_update.robot" id="s1" name="Test Bios Update">
<test id="s1-t1" name="Host BIOS Update">
<kw name="Validate Parameters">
<doc>Validate parameter and file existence.</doc>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${PNOR_IMAGE_PATH}</arg>
<arg>msg=PNOR image path not set</arg>
</arguments>
<msg timestamp="20170514 21:29:26.740" level="INFO">Length is 31</msg>
<status status="PASS" endtime="20170514 21:29:26.740" starttime="20170514 21:29:26.739"></status>
</kw>
<kw name="File Should Exist" library="OperatingSystem">
<doc>Fails unless the given ``path`` points to an existing file.</doc>
<arguments>
<arg>${PNOR_IMAGE_PATH}</arg>
<arg>msg=${PNOR_IMAGE_PATH} File not found</arg>
</arguments>
<msg timestamp="20170514 21:29:26.740" html="yes" level="INFO">File '&lt;a href="file:///home/fspcibld/witherspoon.pnor"&gt;/home/fspcibld/witherspoon.pnor&lt;/a&gt;' exists.</msg>
<status status="PASS" endtime="20170514 21:29:26.740" starttime="20170514 21:29:26.740"></status>
</kw>
<status status="PASS" endtime="20170514 21:29:26.741" starttime="20170514 21:29:26.739"></status>
</kw>
<kw name="Prepare BMC For Update">
<doc>Prepare system for PNOR update.</doc>
<kw name="Run Key U" library="gen_robot_keyword">
<doc>Run keyword unconditionally (i.e. without regard to global test_mode</doc>
<arguments>
<arg>OBMC Boot Test \ REST Power Off</arg>
</arguments>
<kw name="OBMC Boot Test" library="obmc_boot_test_resource">
<arguments>
<arg>REST Power Off</arg>
</arguments>
<kw name="Obmc Boot Test Py" library="obmc_boot_test">
<doc>Do main program processing.</doc>
<arguments>
<arg>@{arguments}</arg>
</arguments>
<msg timestamp="20170514 21:29:26.748" level="INFO">${boot_stack} = REST Power Off</msg>
<kw name="Get BMC System Model" library="utils">
<doc>Get the BMC model from the device tree.</doc>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg timestamp="20170514 21:29:26.819" level="FAIL">Dictionary does not contain key 'host'.</msg>
<status status="FAIL" endtime="20170514 21:29:26.819" starttime="20170514 21:29:26.818"></status>
</kw>
<msg timestamp="20170514 21:29:26.819" level="INFO">${has_host} = False</msg>
<status status="PASS" endtime="20170514 21:29:26.819" starttime="20170514 21:29:26.818"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status status="PASS" endtime="20170514 21:29:26.821" starttime="20170514 21:29:26.820"></status>
</kw>
<status status="PASS" endtime="20170514 21:29:26.821" starttime="20170514 21:29:26.820"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<status status="PASS" endtime="20170514 21:29:26.823" starttime="20170514 21:29:26.822"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg timestamp="20170514 21:29:26.824" level="FAIL">Dictionary does not contain key 'port'.</msg>
<status status="FAIL" endtime="20170514 21:29:26.824" starttime="20170514 21:29:26.823"></status>
</kw>
<msg timestamp="20170514 21:29:26.824" level="INFO">${has_port} = False</msg>
<status status="PASS" endtime="20170514 21:29:26.824" starttime="20170514 21:29:26.823"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status status="PASS" endtime="20170514 21:29:26.827" starttime="20170514 21:29:26.825"></status>
</kw>
<status status="PASS" endtime="20170514 21:29:26.827" starttime="20170514 21:29:26.825"></status>
</kw>
<status status="PASS" endtime="20170514 21:29:26.827" starttime="20170514 21:29:26.824"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg timestamp="20170514 21:29:26.828" level="INFO">Logging into '9.3.86.161:22' as 'root'.</msg>
<msg timestamp="20170514 21:29:28.650" level="INFO">Read output: root@witherspoon:~#</msg>
<status status="PASS" endtime="20170514 21:29:28.650" starttime="20170514 21:29:26.828"></status>
</kw>
<status status="PASS" endtime="20170514 21:29:28.651" starttime="20170514 21:29:26.816"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>cat ${devicetree_base} | cut -d " " -f 1</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${bmc_model}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170514 21:29:28.651" level="INFO">Executing command 'cat /sys/firmware/devicetree/base/model | cut -d " " -f 1'.</msg>
<msg timestamp="20170514 21:29:28.719" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170514 21:29:28.719" level="INFO">${bmc_model} = Witherspoon</msg>
<msg timestamp="20170514 21:29:28.719" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170514 21:29:28.720" starttime="20170514 21:29:28.651"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20170514 21:29:28.720" level="INFO">Length is 0</msg>
<status status="PASS" endtime="20170514 21:29:28.720" starttime="20170514 21:29:28.720"></status>
</kw>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${bmc_model}</arg>
</arguments>
<msg timestamp="20170514 21:29:28.721" level="INFO">Length is 11</msg>
<status status="PASS" endtime="20170514 21:29:28.721" starttime="20170514 21:29:28.720"></status>
</kw>
<status status="PASS" endtime="20170514 21:29:28.721" starttime="20170514 21:29:26.813"></status>
</kw>
<msg timestamp="20170514 21:29:28.721" level="INFO">${openbmc_model} = Witherspoon</msg>
<msg timestamp="20170514 21:29:29.002" level="INFO">${plug_in_packages_list} = []</msg>
<kw name="Set BMC Power Policy" library="utils">
<doc>Set the given BMC power policy.</doc>
<arguments>
<arg>RESTORE_LAST_STATE</arg>
</arguments>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=${policy}</arg>
</arguments>
<assign>
<var>${valueDict}</var>
</assign>
<msg timestamp="20170514 21:29:29.018" level="INFO">${valueDict} = {u'data': 'RESTORE_LAST_STATE'}</msg>
<status status="PASS" endtime="20170514 21:29:29.018" starttime="20170514 21:29:29.017"></status>
</kw>
<kw name="Write Attribute" library="rest_client">
<arguments>
<arg>${HOST_SETTING}</arg>
<arg>power_policy</arg>
<arg>data=${valueDict}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170514 21:29:29.019" level="INFO">${base_uri} = /org/openbmc/settings/host0</msg>
<status status="PASS" endtime="20170514 21:29:29.019" starttime="20170514 21:29:29.019"></status>
</kw>
<kw name="OpenBMC Put Request" library="rest_client">
<arguments>
<arg>${base_uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170514 21:29:29.023" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170514 21:29:29.024" starttime="20170514 21:29:29.023"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170514 21:29:29.024" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170514 21:29:29.024" starttime="20170514 21:29:29.024"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170514 21:29:29.025" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170514 21:29:29.025" starttime="20170514 21:29:29.024"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170514 21:29:29.025" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170514 21:29:29.026" starttime="20170514 21:29:29.025"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170514 21:29:29.233" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170514 21:29:29.234" starttime="20170514 21:29:29.026"></status>
</kw>
<msg timestamp="20170514 21:29:29.234" level="INFO">${status} = PASS</msg>
<msg timestamp="20170514 21:29:29.234" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170514 21:29:29.234" starttime="20170514 21:29:29.026"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170514 21:29:29.235" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170514 21:29:29.235" starttime="20170514 21:29:29.234"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170514 21:29:29.236" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170514 21:29:29.236" starttime="20170514 21:29:29.235"></status>
</kw>
<status status="PASS" endtime="20170514 21:29:29.236" starttime="20170514 21:29:29.022"></status>
</kw>
<status status="PASS" endtime="20170514 21:29:29.236" starttime="20170514 21:29:29.021"></status>
</kw>
<status status="PASS" endtime="20170514 21:29:29.236" starttime="20170514 21:29:29.020"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170514 21:29:29.237" level="INFO">${base_uri} = /org/openbmc/settings/host0/attr/power_policy</msg>
<status status="PASS" endtime="20170514 21:29:29.237" starttime="20170514 21:29:29.237"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170514 21:29:29.238" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170514 21:29:29.238" starttime="20170514 21:29:29.238"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" endtime="20170514 21:29:29.239" starttime="20170514 21:29:29.239"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Put</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170514 21:29:29.241" level="INFO">${msg} = URI:https://9.3.86.161/org/openbmc/settings/host0/attr/power_policy, method:Put, args:{u'data': {u'data': 'RESTORE_LAST_STATE'}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20170514 21:29:29.241" starttime="20170514 21:29:29.240"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170514 21:29:29.242" level="INFO">URI:https://9.3.86.161/org/openbmc/settings/host0/attr/power_policy, method:Put, args:{u'data': {u'data': 'RESTORE_LAST_STATE'}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20170514 21:29:29.242" starttime="20170514 21:29:29.242"></status>
</kw>
<status status="PASS" endtime="20170514 21:29:29.242" starttime="20170514 21:29:29.241"></status>
</kw>
<status status="PASS" endtime="20170514 21:29:29.242" starttime="20170514 21:29:29.239"></status>
</kw>
<kw name="Put Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a PUT request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170514 21:29:29.431" level="INFO">Put Request using : alias=openbmc, uri=/org/openbmc/settings/host0/attr/power_policy, data={"data": "RESTORE_LAST_STATE"},                     headers={u'Content-Type': u'application/json'}, allow_redirects=True </msg>
<msg timestamp="20170514 21:29:29.431" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170514 21:29:29.431" starttime="20170514 21:29:29.242"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170514 21:29:29.433" level="INFO">${msg} = Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170514 21:29:29.433" starttime="20170514 21:29:29.432"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170514 21:29:29.434" level="INFO">Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170514 21:29:29.434" starttime="20170514 21:29:29.433"></status>
</kw>
<status status="PASS" endtime="20170514 21:29:29.434" starttime="20170514 21:29:29.433"></status>
</kw>
<status status="PASS" endtime="20170514 21:29:29.434" starttime="20170514 21:29:29.431"></status>
</kw>
<msg timestamp="20170514 21:29:29.434" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170514 21:29:29.434" starttime="20170514 21:29:29.020"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170514 21:29:29.435" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170514 21:29:29.435" starttime="20170514 21:29:29.435"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${json}</var>
</assign>
<msg timestamp="20170514 21:29:29.436" level="INFO">To JSON using : content={
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170514 21:29:29.436" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170514 21:29:29.436" level="INFO">${json} = {u'status': u'ok', u'message': u'200 OK', u'data': None}</msg>
<status status="PASS" endtime="20170514 21:29:29.436" starttime="20170514 21:29:29.436"></status>
</kw>
<status status="PASS" endtime="20170514 21:29:29.436" starttime="20170514 21:29:29.018"></status>
</kw>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_SETTING}</arg>
<arg>power_policy</arg>
</arguments>
<assign>
<var>${currentPolicy}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170514 21:29:29.440" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170514 21:29:29.440" starttime="20170514 21:29:29.439"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170514 21:29:29.441" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170514 21:29:29.441" starttime="20170514 21:29:29.440"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170514 21:29:29.442" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170514 21:29:29.442" starttime="20170514 21:29:29.441"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170514 21:29:29.443" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170514 21:29:29.443" starttime="20170514 21:29:29.442"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170514 21:29:29.620" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170514 21:29:29.621" starttime="20170514 21:29:29.444"></status>
</kw>
<msg timestamp="20170514 21:29:29.621" level="INFO">${status} = PASS</msg>
<msg timestamp="20170514 21:29:29.621" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170514 21:29:29.621" starttime="20170514 21:29:29.443"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170514 21:29:29.621" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170514 21:29:29.622" starttime="20170514 21:29:29.621"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170514 21:29:29.622" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170514 21:29:29.622" starttime="20170514 21:29:29.622"></status>
</kw>
<status status="PASS" endtime="20170514 21:29:29.622" starttime="20170514 21:29:29.439"></status>
</kw>
<status status="PASS" endtime="20170514 21:29:29.622" starttime="20170514 21:29:29.438"></status>
</kw>
<status status="PASS" endtime="20170514 21:29:29.623" starttime="20170514 21:29:29.438"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170514 21:29:29.623" level="INFO">${base_uri} = /org/openbmc/settings/host0/attr/power_policy</msg>
<status status="PASS" endtime="20170514 21:29:29.623" starttime="20170514 21:29:29.623"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170514 21:29:29.624" starttime="20170514 21:29:29.623"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170514 21:29:29.709" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/settings/host0/attr/power_policy, headers=None </msg>
<msg timestamp="20170514 21:29:29.709" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170514 21:29:29.709" starttime="20170514 21:29:29.624"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170514 21:29:29.709" starttime="20170514 21:29:29.709"></status>
</kw>
<msg timestamp="20170514 21:29:29.710" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170514 21:29:29.710" starttime="20170514 21:29:29.437"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170514 21:29:29.710" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170514 21:29:29.710" starttime="20170514 21:29:29.710"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170514 21:29:29.711" level="INFO">To JSON using : content={
  "data": "RESTORE_LAST_STATE", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170514 21:29:29.711" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170514 21:29:29.711" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'RESTORE_LAST_STATE'}</msg>
<status status="PASS" endtime="20170514 21:29:29.711" starttime="20170514 21:29:29.711"></status>
</kw>
<msg timestamp="20170514 21:29:29.712" level="INFO">${currentPolicy} = RESTORE_LAST_STATE</msg>
<status status="PASS" endtime="20170514 21:29:29.712" starttime="20170514 21:29:29.436"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${currentPolicy}</arg>
<arg>${policy}</arg>
</arguments>
<msg timestamp="20170514 21:29:29.712" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'str'&gt;</msg>
<status status="PASS" endtime="20170514 21:29:29.712" starttime="20170514 21:29:29.712"></status>
</kw>
<status status="PASS" endtime="20170514 21:29:29.712" starttime="20170514 21:29:29.015"></status>
</kw>
<msg timestamp="20170514 21:29:29.746" level="INFO">Log level changed from NONE to INFO.</msg>
<msg timestamp="20170514 21:29:29.762" level="INFO">Log level changed from NONE to INFO.</msg>
<msg timestamp="20170514 21:29:29.767" level="INFO">${TEST_MESSAGE} = </msg>
<msg timestamp="20170514 21:29:29.767" level="INFO">${FFDC_LOG_PATH} = ./</msg>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg timestamp="20170514 21:29:29.770" level="FAIL">Dictionary does not contain key 'host'.</msg>
<status status="FAIL" endtime="20170514 21:29:29.770" starttime="20170514 21:29:29.770"></status>
</kw>
<msg timestamp="20170514 21:29:29.770" level="INFO">${has_host} = False</msg>
<status status="PASS" endtime="20170514 21:29:29.770" starttime="20170514 21:29:29.769"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status status="PASS" endtime="20170514 21:29:29.771" starttime="20170514 21:29:29.771"></status>
</kw>
<status status="PASS" endtime="20170514 21:29:29.771" starttime="20170514 21:29:29.770"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<status status="PASS" endtime="20170514 21:29:29.772" starttime="20170514 21:29:29.772"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg timestamp="20170514 21:29:29.773" level="FAIL">Dictionary does not contain key 'port'.</msg>
<status status="FAIL" endtime="20170514 21:29:29.773" starttime="20170514 21:29:29.773"></status>
</kw>
<msg timestamp="20170514 21:29:29.773" level="INFO">${has_port} = False</msg>
<status status="PASS" endtime="20170514 21:29:29.773" starttime="20170514 21:29:29.772"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status status="PASS" endtime="20170514 21:29:29.775" starttime="20170514 21:29:29.775"></status>
</kw>
<status status="PASS" endtime="20170514 21:29:29.775" starttime="20170514 21:29:29.774"></status>
</kw>
<status status="PASS" endtime="20170514 21:29:29.775" starttime="20170514 21:29:29.773"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg timestamp="20170514 21:29:29.776" level="INFO">Logging into '9.3.86.161:22' as 'root'.</msg>
<msg timestamp="20170514 21:29:31.421" level="INFO">Read output: root@witherspoon:~#</msg>
<status status="PASS" endtime="20170514 21:29:31.421" starttime="20170514 21:29:29.775"></status>
</kw>
<status status="PASS" endtime="20170514 21:29:31.422" starttime="20170514 21:29:29.768"></status>
</kw>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170514 21:29:31.453" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170514 21:29:31.454" starttime="20170514 21:29:31.453"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170514 21:29:31.456" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170514 21:29:31.456" starttime="20170514 21:29:31.455"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170514 21:29:31.456" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170514 21:29:31.456" starttime="20170514 21:29:31.456"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170514 21:29:31.457" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170514 21:29:31.457" starttime="20170514 21:29:31.457"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170514 21:29:31.635" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170514 21:29:31.635" starttime="20170514 21:29:31.458"></status>
</kw>
<msg timestamp="20170514 21:29:31.635" level="INFO">${status} = PASS</msg>
<msg timestamp="20170514 21:29:31.635" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170514 21:29:31.635" starttime="20170514 21:29:31.457"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170514 21:29:31.636" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170514 21:29:31.636" starttime="20170514 21:29:31.636"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170514 21:29:31.637" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170514 21:29:31.637" starttime="20170514 21:29:31.636"></status>
</kw>
<status status="PASS" endtime="20170514 21:29:31.637" starttime="20170514 21:29:31.452"></status>
</kw>
<status status="PASS" endtime="20170514 21:29:31.637" starttime="20170514 21:29:31.452"></status>
</kw>
<status status="PASS" endtime="20170514 21:29:31.637" starttime="20170514 21:29:31.451"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170514 21:29:31.638" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" endtime="20170514 21:29:31.638" starttime="20170514 21:29:31.637"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170514 21:29:31.639" starttime="20170514 21:29:31.638"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170514 21:29:31.704" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None </msg>
<msg timestamp="20170514 21:29:31.704" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170514 21:29:31.704" starttime="20170514 21:29:31.639"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170514 21:29:31.704" starttime="20170514 21:29:31.704"></status>
</kw>
<msg timestamp="20170514 21:29:31.705" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170514 21:29:31.705" starttime="20170514 21:29:31.450"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170514 21:29:31.705" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170514 21:29:31.705" starttime="20170514 21:29:31.705"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170514 21:29:31.706" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170514 21:29:31.706" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170514 21:29:31.706" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off'}</msg>
<status status="PASS" endtime="20170514 21:29:31.706" starttime="20170514 21:29:31.706"></status>
</kw>
<msg timestamp="20170514 21:29:31.706" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status status="PASS" endtime="20170514 21:29:31.706" starttime="20170514 21:29:31.449"></status>
</kw>
<status status="PASS" endtime="20170514 21:29:31.707" starttime="20170514 21:29:31.447"></status>
</kw>
<kw name="Get BMC State" library="state_manager">
<doc>Return the state of the BMC.</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${BMC_STATE_URI}</arg>
<arg>CurrentBMCState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170514 21:29:31.711" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170514 21:29:31.711" starttime="20170514 21:29:31.710"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170514 21:29:31.712" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170514 21:29:31.712" starttime="20170514 21:29:31.711"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170514 21:29:31.712" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170514 21:29:31.712" starttime="20170514 21:29:31.712"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170514 21:29:31.713" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170514 21:29:31.713" starttime="20170514 21:29:31.713"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170514 21:29:31.891" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170514 21:29:31.891" starttime="20170514 21:29:31.714"></status>
</kw>
<msg timestamp="20170514 21:29:31.891" level="INFO">${status} = PASS</msg>
<msg timestamp="20170514 21:29:31.891" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170514 21:29:31.891" starttime="20170514 21:29:31.713"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170514 21:29:31.892" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170514 21:29:31.892" starttime="20170514 21:29:31.891"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170514 21:29:31.893" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170514 21:29:31.893" starttime="20170514 21:29:31.892"></status>
</kw>
<status status="PASS" endtime="20170514 21:29:31.893" starttime="20170514 21:29:31.710"></status>
</kw>
<status status="PASS" endtime="20170514 21:29:31.893" starttime="20170514 21:29:31.709"></status>
</kw>
<status status="PASS" endtime="20170514 21:29:31.893" starttime="20170514 21:29:31.709"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170514 21:29:31.894" level="INFO">${base_uri} = /xyz/openbmc_project/state/bmc0//attr/CurrentBMCState</msg>
<status status="PASS" endtime="20170514 21:29:31.894" starttime="20170514 21:29:31.894"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170514 21:29:31.895" starttime="20170514 21:29:31.894"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170514 21:29:31.969" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/bmc0//attr/CurrentBMCState, headers=None </msg>
<msg timestamp="20170514 21:29:31.969" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170514 21:29:31.969" starttime="20170514 21:29:31.895"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170514 21:29:31.970" starttime="20170514 21:29:31.969"></status>
</kw>
<msg timestamp="20170514 21:29:31.970" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170514 21:29:31.970" starttime="20170514 21:29:31.708"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170514 21:29:31.971" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170514 21:29:31.971" starttime="20170514 21:29:31.970"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170514 21:29:31.971" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.BMC.BMCState.Ready", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170514 21:29:31.971" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170514 21:29:31.971" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.BMC.BMCState.Ready'}</msg>
<status status="PASS" endtime="20170514 21:29:31.971" starttime="20170514 21:29:31.971"></status>
</kw>
<msg timestamp="20170514 21:29:31.972" level="INFO">${state} = xyz.openbmc_project.State.BMC.BMCState.Ready</msg>
<status status="PASS" endtime="20170514 21:29:31.972" starttime="20170514 21:29:31.708"></status>
</kw>
<status status="PASS" endtime="20170514 21:29:31.972" starttime="20170514 21:29:31.707"></status>
</kw>
<kw name="Get Boot Progress" library="utils">
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170514 21:29:31.976" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170514 21:29:31.976" starttime="20170514 21:29:31.975"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170514 21:29:31.977" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170514 21:29:31.977" starttime="20170514 21:29:31.976"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170514 21:29:31.977" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170514 21:29:31.977" starttime="20170514 21:29:31.977"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170514 21:29:31.978" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170514 21:29:31.978" starttime="20170514 21:29:31.977"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170514 21:29:32.158" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170514 21:29:32.158" starttime="20170514 21:29:31.979"></status>
</kw>
<msg timestamp="20170514 21:29:32.158" level="INFO">${status} = PASS</msg>
<msg timestamp="20170514 21:29:32.158" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170514 21:29:32.158" starttime="20170514 21:29:31.978"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170514 21:29:32.159" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170514 21:29:32.159" starttime="20170514 21:29:32.159"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170514 21:29:32.160" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170514 21:29:32.160" starttime="20170514 21:29:32.159"></status>
</kw>
<status status="PASS" endtime="20170514 21:29:32.160" starttime="20170514 21:29:31.975"></status>
</kw>
<status status="PASS" endtime="20170514 21:29:32.160" starttime="20170514 21:29:31.974"></status>
</kw>
<status status="PASS" endtime="20170514 21:29:32.160" starttime="20170514 21:29:31.974"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170514 21:29:32.161" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status status="PASS" endtime="20170514 21:29:32.161" starttime="20170514 21:29:32.160"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170514 21:29:32.161" starttime="20170514 21:29:32.161"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170514 21:29:32.227" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None </msg>
<msg timestamp="20170514 21:29:32.227" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170514 21:29:32.227" starttime="20170514 21:29:32.162"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170514 21:29:32.228" starttime="20170514 21:29:32.227"></status>
</kw>
<msg timestamp="20170514 21:29:32.228" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170514 21:29:32.228" starttime="20170514 21:29:31.973"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170514 21:29:32.229" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170514 21:29:32.229" starttime="20170514 21:29:32.228"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170514 21:29:32.229" level="INFO">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170514 21:29:32.229" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170514 21:29:32.229" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'Off'}</msg>
<status status="PASS" endtime="20170514 21:29:32.230" starttime="20170514 21:29:32.229"></status>
</kw>
<msg timestamp="20170514 21:29:32.230" level="INFO">${state} = Off</msg>
<status status="PASS" endtime="20170514 21:29:32.230" starttime="20170514 21:29:31.973"></status>
</kw>
<status status="PASS" endtime="20170514 21:29:32.230" starttime="20170514 21:29:31.972"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170514 21:29:32.234" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170514 21:29:32.234" starttime="20170514 21:29:32.233"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170514 21:29:32.235" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170514 21:29:32.235" starttime="20170514 21:29:32.234"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170514 21:29:32.235" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170514 21:29:32.235" starttime="20170514 21:29:32.235"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170514 21:29:32.236" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170514 21:29:32.236" starttime="20170514 21:29:32.236"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170514 21:29:32.421" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170514 21:29:32.421" starttime="20170514 21:29:32.237"></status>
</kw>
<msg timestamp="20170514 21:29:32.421" level="INFO">${status} = PASS</msg>
<msg timestamp="20170514 21:29:32.421" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170514 21:29:32.421" starttime="20170514 21:29:32.236"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170514 21:29:32.422" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170514 21:29:32.422" starttime="20170514 21:29:32.422"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170514 21:29:32.423" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170514 21:29:32.423" starttime="20170514 21:29:32.422"></status>
</kw>
<status status="PASS" endtime="20170514 21:29:32.423" starttime="20170514 21:29:32.233"></status>
</kw>
<status status="PASS" endtime="20170514 21:29:32.423" starttime="20170514 21:29:32.233"></status>
</kw>
<status status="PASS" endtime="20170514 21:29:32.423" starttime="20170514 21:29:32.232"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170514 21:29:32.424" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" endtime="20170514 21:29:32.424" starttime="20170514 21:29:32.423"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170514 21:29:32.424" starttime="20170514 21:29:32.424"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170514 21:29:32.489" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None </msg>
<msg timestamp="20170514 21:29:32.489" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170514 21:29:32.489" starttime="20170514 21:29:32.425"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170514 21:29:32.490" starttime="20170514 21:29:32.489"></status>
</kw>
<msg timestamp="20170514 21:29:32.490" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170514 21:29:32.490" starttime="20170514 21:29:32.231"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170514 21:29:32.490" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170514 21:29:32.491" starttime="20170514 21:29:32.490"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170514 21:29:32.491" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170514 21:29:32.491" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170514 21:29:32.491" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Off'}</msg>
<status status="PASS" endtime="20170514 21:29:32.491" starttime="20170514 21:29:32.491"></status>
</kw>
<msg timestamp="20170514 21:29:32.492" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Off</msg>
<status status="PASS" endtime="20170514 21:29:32.492" starttime="20170514 21:29:32.231"></status>
</kw>
<status status="PASS" endtime="20170514 21:29:32.492" starttime="20170514 21:29:32.230"></status>
</kw>
<status status="PASS" endtime="20170514 21:29:32.551" starttime="20170514 21:29:26.748"></status>
</kw>
<kw type="teardown" name="Obmc Boot Test Teardown" library="obmc_boot_test">
<doc>Clean up after the Main keyword.</doc>
<msg timestamp="20170514 21:29:32.556" level="INFO">Log level changed from NONE to INFO.</msg>
<status status="PASS" endtime="20170514 21:29:32.558" starttime="20170514 21:29:32.552"></status>
</kw>
<status status="PASS" endtime="20170514 21:29:32.558" starttime="20170514 21:29:26.747"></status>
</kw>
<status status="PASS" endtime="20170514 21:29:32.558" starttime="20170514 21:29:26.741"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>Clear BMC Record Log</arg>
</arguments>
<kw name="Clear BMC Record Log" library="utils">
<doc>Clears all the event logs on the BMC. This would be</doc>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg timestamp="20170514 21:29:32.568" level="INFO">@{arglist} = [ ]</msg>
<status status="PASS" endtime="20170514 21:29:32.568" starttime="20170514 21:29:32.568"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg timestamp="20170514 21:29:32.569" level="INFO">${args} = {u'data': []}</msg>
<status status="PASS" endtime="20170514 21:29:32.569" starttime="20170514 21:29:32.568"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}records/events/</arg>
<arg>clear</arg>
<arg>data=${args}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170514 21:29:32.570" level="INFO">${base_uri} = /org/openbmc/records/events/</msg>
<status status="PASS" endtime="20170514 21:29:32.570" starttime="20170514 21:29:32.569"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170514 21:29:32.573" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170514 21:29:32.573" starttime="20170514 21:29:32.572"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170514 21:29:32.574" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170514 21:29:32.574" starttime="20170514 21:29:32.574"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170514 21:29:32.575" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170514 21:29:32.575" starttime="20170514 21:29:32.574"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170514 21:29:32.575" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170514 21:29:32.575" starttime="20170514 21:29:32.575"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170514 21:29:32.750" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170514 21:29:32.750" starttime="20170514 21:29:32.576"></status>
</kw>
<msg timestamp="20170514 21:29:32.751" level="INFO">${status} = PASS</msg>
<msg timestamp="20170514 21:29:32.751" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170514 21:29:32.751" starttime="20170514 21:29:32.575"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170514 21:29:32.751" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170514 21:29:32.751" starttime="20170514 21:29:32.751"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170514 21:29:32.752" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170514 21:29:32.752" starttime="20170514 21:29:32.752"></status>
</kw>
<status status="PASS" endtime="20170514 21:29:32.752" starttime="20170514 21:29:32.572"></status>
</kw>
<status status="PASS" endtime="20170514 21:29:32.752" starttime="20170514 21:29:32.572"></status>
</kw>
<status status="PASS" endtime="20170514 21:29:32.753" starttime="20170514 21:29:32.571"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170514 21:29:32.753" level="INFO">${base_uri} = /org/openbmc/records/events//action/clear</msg>
<status status="PASS" endtime="20170514 21:29:32.753" starttime="20170514 21:29:32.753"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170514 21:29:32.754" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170514 21:29:32.754" starttime="20170514 21:29:32.753"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" endtime="20170514 21:29:32.754" starttime="20170514 21:29:32.754"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170514 21:29:32.755" starttime="20170514 21:29:32.755"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170514 21:29:32.956" level="INFO">Post Request using : alias=openbmc, uri=/org/openbmc/records/events//action/clear, data={"data": []}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20170514 21:29:32.957" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170514 21:29:32.957" starttime="20170514 21:29:32.755"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170514 21:29:32.957" starttime="20170514 21:29:32.957"></status>
</kw>
<msg timestamp="20170514 21:29:32.958" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170514 21:29:32.958" starttime="20170514 21:29:32.570"></status>
</kw>
<msg timestamp="20170514 21:29:32.958" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170514 21:29:32.958" starttime="20170514 21:29:32.569"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170514 21:29:32.959" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170514 21:29:32.959" starttime="20170514 21:29:32.958"></status>
</kw>
<status status="PASS" endtime="20170514 21:29:32.959" starttime="20170514 21:29:32.567"></status>
</kw>
<status status="PASS" endtime="20170514 21:29:32.959" starttime="20170514 21:29:32.558"></status>
</kw>
<status status="PASS" endtime="20170514 21:29:32.960" starttime="20170514 21:29:26.741"></status>
</kw>
<kw name="Update PNOR Image">
<doc>Copy the PNOR image to the BMC /tmp dir and flash it.</doc>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>Copy PNOR to BMC</arg>
</arguments>
<kw name="Copy PNOR to BMC" library="utils">
<kw name="Import Library" library="BuiltIn">
<doc>Imports a library with the given name and optional arguments.</doc>
<arguments>
<arg>SCPLibrary</arg>
<arg>WITH NAME</arg>
<arg>scp</arg>
</arguments>
<status status="PASS" endtime="20170514 21:29:32.979" starttime="20170514 21:29:32.970"></status>
</kw>
<kw name="Open Connection for SCP" library="connection_client">
<kw name="Import Library" library="BuiltIn">
<doc>Imports a library with the given name and optional arguments.</doc>
<arguments>
<arg>SCPLibrary</arg>
<arg>WITH NAME</arg>
<arg>scp</arg>
</arguments>
<status status="PASS" endtime="20170514 21:29:32.980" starttime="20170514 21:29:32.980"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' == '${EMPTY}'</arg>
<arg>scp.Open connection</arg>
<arg>${OPENBMC_HOST}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>scp.Open connection</arg>
<arg>${OPENBMC_HOST}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
</arguments>
<kw name="Open Connection" library="scp">
<doc>Opens a new SCP connection to the given host.</doc>
<arguments>
<arg>${OPENBMC_HOST}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
</arguments>
<status status="PASS" endtime="20170514 21:29:33.616" starttime="20170514 21:29:32.981"></status>
</kw>
<status status="PASS" endtime="20170514 21:29:33.617" starttime="20170514 21:29:32.981"></status>
</kw>
<status status="PASS" endtime="20170514 21:29:33.617" starttime="20170514 21:29:32.979"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Copying ${PNOR_IMAGE_PATH} to /tmp</arg>
</arguments>
<msg timestamp="20170514 21:29:33.617" level="INFO">Copying /home/fspcibld/witherspoon.pnor to /tmp</msg>
<status status="PASS" endtime="20170514 21:29:33.617" starttime="20170514 21:29:33.617"></status>
</kw>
<kw name="Put File" library="scp">
<doc>Uploads a file to the remote machine from the local machine.</doc>
<arguments>
<arg>${PNOR_IMAGE_PATH}</arg>
<arg>/tmp</arg>
</arguments>
<status status="PASS" endtime="20170514 21:30:01.202" starttime="20170514 21:29:33.618"></status>
</kw>
<status status="PASS" endtime="20170514 21:30:01.203" starttime="20170514 21:29:32.969"></status>
</kw>
<status status="PASS" endtime="20170514 21:30:01.203" starttime="20170514 21:29:32.960"></status>
</kw>
<kw name="Split Path" library="OperatingSystem">
<doc>Splits the given path from the last path separator (``/`` or ``\``).</doc>
<arguments>
<arg>${PNOR_IMAGE_PATH}</arg>
</arguments>
<assign>
<var>${pnor_path}</var>
<var>${pnor_basename}</var>
</assign>
<msg timestamp="20170514 21:30:01.204" level="INFO">${pnor_path} = /home/fspcibld</msg>
<msg timestamp="20170514 21:30:01.204" level="INFO">${pnor_basename} = witherspoon.pnor</msg>
<status status="PASS" endtime="20170514 21:30:01.204" starttime="20170514 21:30:01.203"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>Flash PNOR \ /tmp/${pnor_basename}</arg>
</arguments>
<kw name="Flash PNOR" library="utils">
<doc>Calls flash bios update method to flash PNOR image</doc>
<arguments>
<arg>/tmp/witherspoon.pnor</arg>
</arguments>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${pnor_image}</arg>
</arguments>
<assign>
<var>@{arglist}</var>
</assign>
<msg timestamp="20170514 21:30:01.214" level="INFO">@{arglist} = [ /tmp/witherspoon.pnor ]</msg>
<status status="PASS" endtime="20170514 21:30:01.214" starttime="20170514 21:30:01.214"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg timestamp="20170514 21:30:01.215" level="INFO">${args} = {u'data': [u'/tmp/witherspoon.pnor']}</msg>
<status status="PASS" endtime="20170514 21:30:01.215" starttime="20170514 21:30:01.214"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}control/flash/bios/</arg>
<arg>update</arg>
<arg>data=${args}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170514 21:30:01.216" level="INFO">${base_uri} = /org/openbmc/control/flash/bios/</msg>
<status status="PASS" endtime="20170514 21:30:01.216" starttime="20170514 21:30:01.216"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170514 21:30:01.220" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170514 21:30:01.220" starttime="20170514 21:30:01.219"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170514 21:30:01.221" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170514 21:30:01.221" starttime="20170514 21:30:01.220"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170514 21:30:01.221" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170514 21:30:01.221" starttime="20170514 21:30:01.221"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170514 21:30:01.222" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170514 21:30:01.222" starttime="20170514 21:30:01.222"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170514 21:30:01.413" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170514 21:30:01.413" starttime="20170514 21:30:01.223"></status>
</kw>
<msg timestamp="20170514 21:30:01.413" level="INFO">${status} = PASS</msg>
<msg timestamp="20170514 21:30:01.413" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170514 21:30:01.413" starttime="20170514 21:30:01.222"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170514 21:30:01.414" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170514 21:30:01.414" starttime="20170514 21:30:01.414"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170514 21:30:01.415" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170514 21:30:01.415" starttime="20170514 21:30:01.414"></status>
</kw>
<status status="PASS" endtime="20170514 21:30:01.415" starttime="20170514 21:30:01.219"></status>
</kw>
<status status="PASS" endtime="20170514 21:30:01.415" starttime="20170514 21:30:01.218"></status>
</kw>
<status status="PASS" endtime="20170514 21:30:01.415" starttime="20170514 21:30:01.217"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170514 21:30:01.416" level="INFO">${base_uri} = /org/openbmc/control/flash/bios//action/update</msg>
<status status="PASS" endtime="20170514 21:30:01.416" starttime="20170514 21:30:01.415"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170514 21:30:01.416" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170514 21:30:01.416" starttime="20170514 21:30:01.416"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" endtime="20170514 21:30:01.417" starttime="20170514 21:30:01.416"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170514 21:30:01.417" starttime="20170514 21:30:01.417"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170514 21:30:01.463" level="INFO">Post Request using : alias=openbmc, uri=/org/openbmc/control/flash/bios//action/update, data={"data": ["/tmp/witherspoon.pnor"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20170514 21:30:01.463" level="INFO">${ret} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20170514 21:30:01.463" starttime="20170514 21:30:01.418"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170514 21:30:01.464" starttime="20170514 21:30:01.463"></status>
</kw>
<msg timestamp="20170514 21:30:01.464" level="INFO">${resp} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20170514 21:30:01.464" starttime="20170514 21:30:01.216"></status>
</kw>
<msg timestamp="20170514 21:30:01.464" level="INFO">${resp} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20170514 21:30:01.464" starttime="20170514 21:30:01.215"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170514 21:30:01.465" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20170514 21:30:01.465" level="FAIL">404 != 200</msg>
<status status="FAIL" endtime="20170514 21:30:01.465" starttime="20170514 21:30:01.464"></status>
</kw>
<status status="FAIL" endtime="20170514 21:30:01.465" starttime="20170514 21:30:01.213"></status>
</kw>
<msg timestamp="20170514 21:30:01.466" level="FAIL">404 != 200</msg>
<status status="FAIL" endtime="20170514 21:30:01.466" starttime="20170514 21:30:01.204"></status>
</kw>
<status status="FAIL" endtime="20170514 21:30:01.466" starttime="20170514 21:29:32.960"></status>
</kw>
<kw type="teardown" name="Test Bios Teardown">
<doc>Log FFDC if test suite fails and collect SOL log for</doc>
<kw name="Printn" library="gen_print">
<status status="PASS" endtime="20170514 21:30:01.467" starttime="20170514 21:30:01.467"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>FFDC On Test Case Fail</arg>
</arguments>
<kw name="FFDC On Test Case Fail" library="openbmc_ffdc">
<doc>Generic FFDC entry point. Place holder to hook in</doc>
<kw name="Is Host Quiesced" library="state_manager">
<doc>Check if host state is quiesced.</doc>
<assign>
<var>${status}</var>
</assign>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170514 21:30:01.481" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170514 21:30:01.481" starttime="20170514 21:30:01.480"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170514 21:30:01.482" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170514 21:30:01.482" starttime="20170514 21:30:01.482"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170514 21:30:01.483" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170514 21:30:01.483" starttime="20170514 21:30:01.482"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170514 21:30:01.483" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170514 21:30:01.483" starttime="20170514 21:30:01.483"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170514 21:30:01.657" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170514 21:30:01.657" starttime="20170514 21:30:01.484"></status>
</kw>
<msg timestamp="20170514 21:30:01.657" level="INFO">${status} = PASS</msg>
<msg timestamp="20170514 21:30:01.657" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170514 21:30:01.657" starttime="20170514 21:30:01.484"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170514 21:30:01.658" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170514 21:30:01.658" starttime="20170514 21:30:01.658"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170514 21:30:01.659" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170514 21:30:01.659" starttime="20170514 21:30:01.659"></status>
</kw>
<status status="PASS" endtime="20170514 21:30:01.659" starttime="20170514 21:30:01.480"></status>
</kw>
<status status="PASS" endtime="20170514 21:30:01.659" starttime="20170514 21:30:01.479"></status>
</kw>
<status status="PASS" endtime="20170514 21:30:01.659" starttime="20170514 21:30:01.479"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170514 21:30:01.660" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" endtime="20170514 21:30:01.660" starttime="20170514 21:30:01.660"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170514 21:30:01.661" starttime="20170514 21:30:01.660"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170514 21:30:01.723" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None </msg>
<msg timestamp="20170514 21:30:01.723" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170514 21:30:01.723" starttime="20170514 21:30:01.661"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170514 21:30:01.724" starttime="20170514 21:30:01.724"></status>
</kw>
<msg timestamp="20170514 21:30:01.724" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170514 21:30:01.724" starttime="20170514 21:30:01.478"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170514 21:30:01.725" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170514 21:30:01.725" starttime="20170514 21:30:01.725"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170514 21:30:01.725" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170514 21:30:01.726" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170514 21:30:01.726" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Off'}</msg>
<status status="PASS" endtime="20170514 21:30:01.726" starttime="20170514 21:30:01.725"></status>
</kw>
<msg timestamp="20170514 21:30:01.726" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Off</msg>
<status status="PASS" endtime="20170514 21:30:01.726" starttime="20170514 21:30:01.477"></status>
</kw>
<msg timestamp="20170514 21:30:01.726" level="INFO">${host_state} = Off</msg>
<status status="PASS" endtime="20170514 21:30:01.726" starttime="20170514 21:30:01.477"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal</arg>
<arg>${host_state}</arg>
<arg>Quiesced</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${host_state}</arg>
<arg>Quiesced</arg>
</arguments>
<msg timestamp="20170514 21:30:01.727" level="FAIL">Off != Quiesced</msg>
<status status="FAIL" endtime="20170514 21:30:01.727" starttime="20170514 21:30:01.727"></status>
</kw>
<msg timestamp="20170514 21:30:01.728" level="INFO">${status} = False</msg>
<status status="PASS" endtime="20170514 21:30:01.728" starttime="20170514 21:30:01.727"></status>
</kw>
<msg timestamp="20170514 21:30:01.728" level="INFO">${status} = False</msg>
<status status="PASS" endtime="20170514 21:30:01.728" starttime="20170514 21:30:01.477"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${TEST_STATUS}' == 'FAIL' or '${status}'=='True'</arg>
<arg>FFDC</arg>
</arguments>
<kw name="Ffdc" library="openbmc_ffdc">
<doc>Gather First Failure Data Capture (FFDC).</doc>
<kw name="Ping Host" library="utils">
<arguments>
<arg>9.3.86.161</arg>
</arguments>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${host}</arg>
<arg>msg=No host provided</arg>
</arguments>
<msg timestamp="20170514 21:30:01.743" level="INFO">Length is 10</msg>
<status status="PASS" endtime="20170514 21:30:01.743" starttime="20170514 21:30:01.743"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>ping -c 4 ${host}</arg>
</arguments>
<assign>
<var>${RC}</var>
<var>${output}</var>
</assign>
<msg timestamp="20170514 21:30:01.749" level="INFO">Running command 'ping -c 4 9.3.86.161 2&gt;&amp;1'.</msg>
<msg timestamp="20170514 21:30:04.748" level="INFO">${RC} = 0</msg>
<msg timestamp="20170514 21:30:04.748" level="INFO">${output} = PING 9.3.86.161 (9.3.86.161) 56(84) bytes of data.
64 bytes from 9.3.86.161: icmp_seq=1 ttl=62 time=0.735 ms
64 bytes from 9.3.86.161: icmp_seq=2 ttl=62 time=0.627 ms
64 bytes from 9.3.86.161: icmp_se...</msg>
<status status="PASS" endtime="20170514 21:30:04.748" starttime="20170514 21:30:01.743"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>RC: ${RC}\nOutput:\n${output}</arg>
</arguments>
<msg timestamp="20170514 21:30:04.751" level="INFO">RC: 0
Output:
PING 9.3.86.161 (9.3.86.161) 56(84) bytes of data.
64 bytes from 9.3.86.161: icmp_seq=1 ttl=62 time=0.735 ms
64 bytes from 9.3.86.161: icmp_seq=2 ttl=62 time=0.627 ms
64 bytes from 9.3.86.161: icmp_seq=3 ttl=62 time=0.588 ms
64 bytes from 9.3.86.161: icmp_seq=4 ttl=62 time=0.584 ms

--- 9.3.86.161 ping statistics ---
4 packets transmitted, 4 received, 0% packet loss, time 2997ms
rtt min/avg/max/mdev = 0.584/0.633/0.735/0.065 ms</msg>
<status status="PASS" endtime="20170514 21:30:04.751" starttime="20170514 21:30:04.750"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${RC}</arg>
<arg>${0}</arg>
</arguments>
<status status="PASS" endtime="20170514 21:30:04.752" starttime="20170514 21:30:04.751"></status>
</kw>
<status status="PASS" endtime="20170514 21:30:04.752" starttime="20170514 21:30:01.742"></status>
</kw>
<kw name="Get Current Time Stamp" library="openbmc_ffdc_utils">
<doc>Get the current time stamp data</doc>
<kw name="Get Current Date" library="DateTime">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20170514 21:30:04.769" level="INFO">${cur_time} = 2017-05-14 21:30:04:768711</msg>
<status status="PASS" endtime="20170514 21:30:04.769" starttime="20170514 21:30:04.768"></status>
</kw>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20170514 21:30:04.770" level="INFO">${cur_time} = 20170514213004768711</msg>
<status status="PASS" endtime="20170514 21:30:04.770" starttime="20170514 21:30:04.769"></status>
</kw>
<status status="PASS" endtime="20170514 21:30:04.770" starttime="20170514 21:30:04.768"></status>
</kw>
<msg timestamp="20170514 21:30:04.774" level="INFO">${FFDC_TIME} = 20170514213004768711</msg>
<kw name="Get Test Dir and Name" library="openbmc_ffdc_utils">
<doc>SUITE_NAME and TEST_NAME are automatic variables</doc>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${SUITE_NAME}</arg>
</arguments>
<assign>
<var>${suite_name}</var>
</assign>
<msg timestamp="20170514 21:30:04.776" level="INFO">${suite_name} = TestBiosUpdate</msg>
<status status="PASS" endtime="20170514 21:30:04.776" starttime="20170514 21:30:04.776"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${FFDC_TIME}_</arg>
<arg>${suite_name}</arg>
</arguments>
<assign>
<var>${suite_name}</var>
</assign>
<msg timestamp="20170514 21:30:04.776" level="INFO">${suite_name} = 20170514213004768711_TestBiosUpdate</msg>
<status status="PASS" endtime="20170514 21:30:04.777" starttime="20170514 21:30:04.776"></status>
</kw>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${TEST_NAME}</arg>
</arguments>
<assign>
<var>${test_name}</var>
</assign>
<msg timestamp="20170514 21:30:04.777" level="INFO">${test_name} = HostBIOSUpdate</msg>
<status status="PASS" endtime="20170514 21:30:04.777" starttime="20170514 21:30:04.777"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${FFDC_TIME}_</arg>
<arg>${test_name}</arg>
</arguments>
<assign>
<var>${test_name}</var>
</assign>
<msg timestamp="20170514 21:30:04.778" level="INFO">${test_name} = 20170514213004768711_HostBIOSUpdate</msg>
<status status="PASS" endtime="20170514 21:30:04.778" starttime="20170514 21:30:04.777"></status>
</kw>
<status status="PASS" endtime="20170514 21:30:04.778" starttime="20170514 21:30:04.775"></status>
</kw>
<msg timestamp="20170514 21:30:04.778" level="INFO">${FFDC_DIR_PATH} = 20170514213004768711_TestBiosUpdate/20170514213004768711_HostBIOSUpdate/</msg>
<msg timestamp="20170514 21:30:04.778" level="INFO">${FFDC_PREFIX} = 20170514213004768711_</msg>
<msg timestamp="20170514 21:30:04.803" level="INFO">${LOG_PREFIX} = 20170514213004768711_TestBiosUpdate/20170514213004768711_HostBIOSUpdate/20170514213004768711_</msg>
<kw name="Create Directory" library="OperatingSystem">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>20170514213004768711_TestBiosUpdate/20170514213004768711_HostBIOSUpdate/</arg>
</arguments>
<msg timestamp="20170514 21:30:04.804" html="yes" level="INFO">Created directory '&lt;a href="file:///home/fspcibld/20170514213004768711_TestBiosUpdate/20170514213004768711_HostBIOSUpdate"&gt;/home/fspcibld/20170514213004768711_TestBiosUpdate/20170514213004768711_HostBIOSUpdate&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170514 21:30:04.804" starttime="20170514 21:30:04.803"></status>
</kw>
<msg timestamp="20170514 21:30:04.811" level="INFO">${FFDC_FILE_PATH} = 20170514213004768711_TestBiosUpdate/20170514213004768711_HostBIOSUpdate/20170514213004768711_BMC_general.txt</msg>
<kw name="Header Message" library="openbmc_ffdc_utils">
<doc>Write header message to the report document manifest.</doc>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${HEADER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170514 21:30:04.826" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/20170514213004768711_TestBiosUpdate/20170514213004768711_HostBIOSUpdate/20170514213004768711_BMC_general.txt"&gt;/home/fspcibld/20170514213004768711_TestBiosUpdate/20170514213004768711_HostBIOSUpdate/20170514213004768711_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170514 21:30:04.826" starttime="20170514 21:30:04.825"></status>
</kw>
<status status="PASS" endtime="20170514 21:30:04.826" starttime="20170514 21:30:04.825"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170514 21:30:04.827" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/20170514213004768711_TestBiosUpdate/20170514213004768711_HostBIOSUpdate/20170514213004768711_BMC_general.txt"&gt;/home/fspcibld/20170514213004768711_TestBiosUpdate/20170514213004768711_HostBIOSUpdate/20170514213004768711_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170514 21:30:04.828" starttime="20170514 21:30:04.827"></status>
</kw>
<status status="PASS" endtime="20170514 21:30:04.828" starttime="20170514 21:30:04.826"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Suite File\t\t: ${SUITE_NAME} ${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170514 21:30:04.829" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/20170514213004768711_TestBiosUpdate/20170514213004768711_HostBIOSUpdate/20170514213004768711_BMC_general.txt"&gt;/home/fspcibld/20170514213004768711_TestBiosUpdate/20170514213004768711_HostBIOSUpdate/20170514213004768711_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170514 21:30:04.829" starttime="20170514 21:30:04.828"></status>
</kw>
<status status="PASS" endtime="20170514 21:30:04.829" starttime="20170514 21:30:04.828"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Case Name\t\t: ${TEST_NAME}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170514 21:30:04.831" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/20170514213004768711_TestBiosUpdate/20170514213004768711_HostBIOSUpdate/20170514213004768711_BMC_general.txt"&gt;/home/fspcibld/20170514213004768711_TestBiosUpdate/20170514213004768711_HostBIOSUpdate/20170514213004768711_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170514 21:30:04.831" starttime="20170514 21:30:04.831"></status>
</kw>
<status status="PASS" endtime="20170514 21:30:04.831" starttime="20170514 21:30:04.829"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Source File\t: ${SUITE_SOURCE}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170514 21:30:04.833" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/20170514213004768711_TestBiosUpdate/20170514213004768711_HostBIOSUpdate/20170514213004768711_BMC_general.txt"&gt;/home/fspcibld/20170514213004768711_TestBiosUpdate/20170514213004768711_HostBIOSUpdate/20170514213004768711_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170514 21:30:04.833" starttime="20170514 21:30:04.832"></status>
</kw>
<status status="PASS" endtime="20170514 21:30:04.833" starttime="20170514 21:30:04.832"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Failure Time Stamp\t: ${FFDC_TIME}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170514 21:30:04.834" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/20170514213004768711_TestBiosUpdate/20170514213004768711_HostBIOSUpdate/20170514213004768711_BMC_general.txt"&gt;/home/fspcibld/20170514213004768711_TestBiosUpdate/20170514213004768711_HostBIOSUpdate/20170514213004768711_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170514 21:30:04.834" starttime="20170514 21:30:04.834"></status>
</kw>
<status status="PASS" endtime="20170514 21:30:04.834" starttime="20170514 21:30:04.833"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Error Message\t: ${TEST_MESSAGE}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170514 21:30:04.835" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/20170514213004768711_TestBiosUpdate/20170514213004768711_HostBIOSUpdate/20170514213004768711_BMC_general.txt"&gt;/home/fspcibld/20170514213004768711_TestBiosUpdate/20170514213004768711_HostBIOSUpdate/20170514213004768711_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170514 21:30:04.836" starttime="20170514 21:30:04.835"></status>
</kw>
<status status="PASS" endtime="20170514 21:30:04.836" starttime="20170514 21:30:04.834"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Documentation\t:${\n}${TEST_DOCUMENTATION}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170514 21:30:04.837" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/20170514213004768711_TestBiosUpdate/20170514213004768711_HostBIOSUpdate/20170514213004768711_BMC_general.txt"&gt;/home/fspcibld/20170514213004768711_TestBiosUpdate/20170514213004768711_HostBIOSUpdate/20170514213004768711_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170514 21:30:04.837" starttime="20170514 21:30:04.836"></status>
</kw>
<status status="PASS" endtime="20170514 21:30:04.837" starttime="20170514 21:30:04.836"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170514 21:30:04.838" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/20170514213004768711_TestBiosUpdate/20170514213004768711_HostBIOSUpdate/20170514213004768711_BMC_general.txt"&gt;/home/fspcibld/20170514213004768711_TestBiosUpdate/20170514213004768711_HostBIOSUpdate/20170514213004768711_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170514 21:30:04.838" starttime="20170514 21:30:04.838"></status>
</kw>
<status status="PASS" endtime="20170514 21:30:04.838" starttime="20170514 21:30:04.837"></status>
</kw>
<kw name="Test Setup Info" library="openbmc_ffdc_utils">
<doc>BMC IP, Model and other information</doc>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}-----------------------${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170514 21:30:04.840" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/20170514213004768711_TestBiosUpdate/20170514213004768711_HostBIOSUpdate/20170514213004768711_BMC_general.txt"&gt;/home/fspcibld/20170514213004768711_TestBiosUpdate/20170514213004768711_HostBIOSUpdate/20170514213004768711_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170514 21:30:04.840" starttime="20170514 21:30:04.840"></status>
</kw>
<status status="PASS" endtime="20170514 21:30:04.840" starttime="20170514 21:30:04.839"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Setup Information:</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170514 21:30:04.841" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/20170514213004768711_TestBiosUpdate/20170514213004768711_HostBIOSUpdate/20170514213004768711_BMC_general.txt"&gt;/home/fspcibld/20170514213004768711_TestBiosUpdate/20170514213004768711_HostBIOSUpdate/20170514213004768711_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170514 21:30:04.841" starttime="20170514 21:30:04.841"></status>
</kw>
<status status="PASS" endtime="20170514 21:30:04.841" starttime="20170514 21:30:04.840"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}-----------------------${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170514 21:30:04.843" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/20170514213004768711_TestBiosUpdate/20170514213004768711_HostBIOSUpdate/20170514213004768711_BMC_general.txt"&gt;/home/fspcibld/20170514213004768711_TestBiosUpdate/20170514213004768711_HostBIOSUpdate/20170514213004768711_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170514 21:30:04.843" starttime="20170514 21:30:04.842"></status>
</kw>
<status status="PASS" endtime="20170514 21:30:04.843" starttime="20170514 21:30:04.842"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>OPENBMC HOST \t: ${OPENBMC_HOST}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170514 21:30:04.844" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/20170514213004768711_TestBiosUpdate/20170514213004768711_HostBIOSUpdate/20170514213004768711_BMC_general.txt"&gt;/home/fspcibld/20170514213004768711_TestBiosUpdate/20170514213004768711_HostBIOSUpdate/20170514213004768711_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170514 21:30:04.844" starttime="20170514 21:30:04.843"></status>
</kw>
<status status="PASS" endtime="20170514 21:30:04.844" starttime="20170514 21:30:04.843"></status>
</kw>
<kw name="Get BMC System Model" library="utils">
<doc>Get the BMC model from the device tree.</doc>
<assign>
<var>${model_name}</var>
</assign>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg timestamp="20170514 21:30:04.846" level="FAIL">Dictionary does not contain key 'host'.</msg>
<status status="FAIL" endtime="20170514 21:30:04.846" starttime="20170514 21:30:04.846"></status>
</kw>
<msg timestamp="20170514 21:30:04.847" level="INFO">${has_host} = False</msg>
<status status="PASS" endtime="20170514 21:30:04.847" starttime="20170514 21:30:04.845"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status status="PASS" endtime="20170514 21:30:04.848" starttime="20170514 21:30:04.847"></status>
</kw>
<status status="PASS" endtime="20170514 21:30:04.848" starttime="20170514 21:30:04.847"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<status status="PASS" endtime="20170514 21:30:04.849" starttime="20170514 21:30:04.848"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg timestamp="20170514 21:30:04.850" level="FAIL">Dictionary does not contain key 'port'.</msg>
<status status="FAIL" endtime="20170514 21:30:04.850" starttime="20170514 21:30:04.849"></status>
</kw>
<msg timestamp="20170514 21:30:04.850" level="INFO">${has_port} = False</msg>
<status status="PASS" endtime="20170514 21:30:04.850" starttime="20170514 21:30:04.849"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status status="PASS" endtime="20170514 21:30:04.852" starttime="20170514 21:30:04.851"></status>
</kw>
<status status="PASS" endtime="20170514 21:30:04.852" starttime="20170514 21:30:04.851"></status>
</kw>
<status status="PASS" endtime="20170514 21:30:04.852" starttime="20170514 21:30:04.850"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg timestamp="20170514 21:30:04.852" level="INFO">Logging into '9.3.86.161:22' as 'root'.</msg>
<msg timestamp="20170514 21:30:06.498" level="INFO">Read output: root@witherspoon:~#</msg>
<status status="PASS" endtime="20170514 21:30:06.498" starttime="20170514 21:30:04.852"></status>
</kw>
<status status="PASS" endtime="20170514 21:30:06.498" starttime="20170514 21:30:04.845"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>cat ${devicetree_base} | cut -d " " -f 1</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${bmc_model}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170514 21:30:06.499" level="INFO">Executing command 'cat /sys/firmware/devicetree/base/model | cut -d " " -f 1'.</msg>
<msg timestamp="20170514 21:30:06.566" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170514 21:30:06.566" level="INFO">${bmc_model} = Witherspoon</msg>
<msg timestamp="20170514 21:30:06.566" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170514 21:30:06.567" starttime="20170514 21:30:06.499"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20170514 21:30:06.567" level="INFO">Length is 0</msg>
<status status="PASS" endtime="20170514 21:30:06.567" starttime="20170514 21:30:06.567"></status>
</kw>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${bmc_model}</arg>
</arguments>
<msg timestamp="20170514 21:30:06.568" level="INFO">Length is 11</msg>
<status status="PASS" endtime="20170514 21:30:06.568" starttime="20170514 21:30:06.567"></status>
</kw>
<msg timestamp="20170514 21:30:06.568" level="INFO">${model_name} = Witherspoon</msg>
<status status="PASS" endtime="20170514 21:30:06.568" starttime="20170514 21:30:04.844"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>SYSTEM TYPE \t: ${model_name}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170514 21:30:06.569" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/20170514213004768711_TestBiosUpdate/20170514213004768711_HostBIOSUpdate/20170514213004768711_BMC_general.txt"&gt;/home/fspcibld/20170514213004768711_TestBiosUpdate/20170514213004768711_HostBIOSUpdate/20170514213004768711_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170514 21:30:06.569" starttime="20170514 21:30:06.569"></status>
</kw>
<status status="PASS" endtime="20170514 21:30:06.569" starttime="20170514 21:30:06.568"></status>
</kw>
<status status="PASS" endtime="20170514 21:30:06.569" starttime="20170514 21:30:04.839"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${MSG_INTRO}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170514 21:30:06.571" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/20170514213004768711_TestBiosUpdate/20170514213004768711_HostBIOSUpdate/20170514213004768711_BMC_general.txt"&gt;/home/fspcibld/20170514213004768711_TestBiosUpdate/20170514213004768711_HostBIOSUpdate/20170514213004768711_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170514 21:30:06.571" starttime="20170514 21:30:06.570"></status>
</kw>
<status status="PASS" endtime="20170514 21:30:06.571" starttime="20170514 21:30:06.570"></status>
</kw>
<kw name="Get Ffdc Cmd Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg timestamp="20170514 21:30:06.571" level="INFO">@{entries} = [ APPLICATION DATA | DRIVER INFO | BMC DATA ]</msg>
<status status="PASS" endtime="20170514 21:30:06.571" starttime="20170514 21:30:06.571"></status>
</kw>
<kw type="for" name="${index} IN [ @{entries} ]">
<kw type="foritem" name="${index} = APPLICATION DATA">
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>* ${index.upper()}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170514 21:30:06.573" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/20170514213004768711_TestBiosUpdate/20170514213004768711_HostBIOSUpdate/20170514213004768711_BMC_general.txt"&gt;/home/fspcibld/20170514213004768711_TestBiosUpdate/20170514213004768711_HostBIOSUpdate/20170514213004768711_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170514 21:30:06.573" starttime="20170514 21:30:06.572"></status>
</kw>
<status status="PASS" endtime="20170514 21:30:06.573" starttime="20170514 21:30:06.572"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170514 21:30:06.576" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/20170514213004768711_TestBiosUpdate/20170514213004768711_HostBIOSUpdate/20170514213004768711_BMC_general.txt"&gt;/home/fspcibld/20170514213004768711_TestBiosUpdate/20170514213004768711_HostBIOSUpdate/20170514213004768711_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170514 21:30:06.576" starttime="20170514 21:30:06.576"></status>
</kw>
<status status="PASS" endtime="20170514 21:30:06.577" starttime="20170514 21:30:06.573"></status>
</kw>
<status status="PASS" endtime="20170514 21:30:06.577" starttime="20170514 21:30:06.572"></status>
</kw>
<kw type="foritem" name="${index} = DRIVER INFO">
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>* ${index.upper()}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170514 21:30:06.578" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/20170514213004768711_TestBiosUpdate/20170514213004768711_HostBIOSUpdate/20170514213004768711_BMC_general.txt"&gt;/home/fspcibld/20170514213004768711_TestBiosUpdate/20170514213004768711_HostBIOSUpdate/20170514213004768711_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170514 21:30:06.578" starttime="20170514 21:30:06.577"></status>
</kw>
<status status="PASS" endtime="20170514 21:30:06.578" starttime="20170514 21:30:06.577"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170514 21:30:06.579" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/20170514213004768711_TestBiosUpdate/20170514213004768711_HostBIOSUpdate/20170514213004768711_BMC_general.txt"&gt;/home/fspcibld/20170514213004768711_TestBiosUpdate/20170514213004768711_HostBIOSUpdate/20170514213004768711_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170514 21:30:06.579" starttime="20170514 21:30:06.579"></status>
</kw>
<status status="PASS" endtime="20170514 21:30:06.579" starttime="20170514 21:30:06.578"></status>
</kw>
<status status="PASS" endtime="20170514 21:30:06.579" starttime="20170514 21:30:06.577"></status>
</kw>
<kw type="foritem" name="${index} = BMC DATA">
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>* ${index.upper()}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170514 21:30:06.581" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/20170514213004768711_TestBiosUpdate/20170514213004768711_HostBIOSUpdate/20170514213004768711_BMC_general.txt"&gt;/home/fspcibld/20170514213004768711_TestBiosUpdate/20170514213004768711_HostBIOSUpdate/20170514213004768711_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170514 21:30:06.581" starttime="20170514 21:30:06.580"></status>
</kw>
<status status="PASS" endtime="20170514 21:30:06.581" starttime="20170514 21:30:06.580"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170514 21:30:06.582" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/20170514213004768711_TestBiosUpdate/20170514213004768711_HostBIOSUpdate/20170514213004768711_BMC_general.txt"&gt;/home/fspcibld/20170514213004768711_TestBiosUpdate/20170514213004768711_HostBIOSUpdate/20170514213004768711_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170514 21:30:06.582" starttime="20170514 21:30:06.582"></status>
</kw>
<status status="PASS" endtime="20170514 21:30:06.582" starttime="20170514 21:30:06.581"></status>
</kw>
<status status="PASS" endtime="20170514 21:30:06.582" starttime="20170514 21:30:06.579"></status>
</kw>
<status status="PASS" endtime="20170514 21:30:06.582" starttime="20170514 21:30:06.571"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${MSG_DETAIL}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170514 21:30:06.583" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/20170514213004768711_TestBiosUpdate/20170514213004768711_HostBIOSUpdate/20170514213004768711_BMC_general.txt"&gt;/home/fspcibld/20170514213004768711_TestBiosUpdate/20170514213004768711_HostBIOSUpdate/20170514213004768711_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170514 21:30:06.583" starttime="20170514 21:30:06.583"></status>
</kw>
<status status="PASS" endtime="20170514 21:30:06.584" starttime="20170514 21:30:06.582"></status>
</kw>
<status status="PASS" endtime="20170514 21:30:06.584" starttime="20170514 21:30:04.824"></status>
</kw>
<kw name="Call FFDC Methods" library="openbmc_ffdc_methods">
<doc>Call into FFDC Keyword index list.</doc>
<arguments>
<arg>ffdc_function_list=</arg>
</arguments>
<kw name="Get Ffdc Method Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg timestamp="20170514 21:30:06.591" level="INFO">@{entries} = [ BMC LOGS ]</msg>
<status status="PASS" endtime="20170514 21:30:06.591" starttime="20170514 21:30:06.591"></status>
</kw>
<kw type="for" name="${index} IN [ @{entries} ]">
<kw type="foritem" name="${index} = BMC LOGS">
<kw name="Method Call Keyword List" library="openbmc_ffdc_methods">
<doc>Iterate the list through keyword index.</doc>
<arguments>
<arg>${index}</arg>
<arg>${ffdc_function_list}</arg>
</arguments>
<kw name="Get Ffdc Method Call" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<assign>
<var>@{method_list}</var>
</assign>
<msg timestamp="20170514 21:30:06.592" level="INFO">@{method_list} = [ ('FFDC Generic Report', 'BMC FFDC Manifest') | ('Get Request FFDC', 'BMC FFDC Get Requests') | ('Core Files', 'SCP Coredump Files') | ('BMC Specific Files', 'BMC FFDC Files') | ('SEL Log', 'Collect ...</msg>
<status status="PASS" endtime="20170514 21:30:06.592" starttime="20170514 21:30:06.592"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${ffdc_function_list}' == '${EMPTY}'</arg>
<arg>Get FFDC Method Desc</arg>
<arg>${index}</arg>
<arg>ELSE</arg>
<arg>Split String</arg>
<arg>${ffdc_function_list}</arg>
<arg>separator=:</arg>
</arguments>
<assign>
<var>@{ffdc_function_list}</var>
</assign>
<kw name="Get Ffdc Method Desc" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<status status="PASS" endtime="20170514 21:30:06.594" starttime="20170514 21:30:06.593"></status>
</kw>
<msg timestamp="20170514 21:30:06.594" level="INFO">@{ffdc_function_list} = [ FFDC Generic Report | Get Request FFDC | Core Files | BMC Specific Files | SEL Log | OS FFDC ]</msg>
<status status="PASS" endtime="20170514 21:30:06.594" starttime="20170514 21:30:06.593"></status>
</kw>
<kw type="for" name="${method} IN [ @{method_list} ]">
<kw type="foritem" name="${method} = ('FFDC Generic Report', 'BMC FFDC Manifest')">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status status="PASS" endtime="20170514 21:30:06.596" starttime="20170514 21:30:06.595"></status>
</kw>
<msg timestamp="20170514 21:30:06.596" level="INFO">${status} = PASS</msg>
<msg timestamp="20170514 21:30:06.596" level="INFO">${ret_values} = None</msg>
<status status="PASS" endtime="20170514 21:30:06.596" starttime="20170514 21:30:06.595"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status status="PASS" endtime="20170514 21:30:06.597" starttime="20170514 21:30:06.596"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="BMC FFDC Manifest" library="openbmc_ffdc_methods">
<doc>Get the commands index for the FFDC_BMC_CMD,</doc>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg timestamp="20170514 21:30:06.620" level="FAIL">Dictionary does not contain key 'host'.</msg>
<status status="FAIL" endtime="20170514 21:30:06.621" starttime="20170514 21:30:06.620"></status>
</kw>
<msg timestamp="20170514 21:30:06.621" level="INFO">${has_host} = False</msg>
<status status="PASS" endtime="20170514 21:30:06.621" starttime="20170514 21:30:06.619"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status status="PASS" endtime="20170514 21:30:06.623" starttime="20170514 21:30:06.622"></status>
</kw>
<status status="PASS" endtime="20170514 21:30:06.623" starttime="20170514 21:30:06.621"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<status status="PASS" endtime="20170514 21:30:06.623" starttime="20170514 21:30:06.623"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg timestamp="20170514 21:30:06.624" level="FAIL">Dictionary does not contain key 'port'.</msg>
<status status="FAIL" endtime="20170514 21:30:06.624" starttime="20170514 21:30:06.624"></status>
</kw>
<msg timestamp="20170514 21:30:06.625" level="INFO">${has_port} = False</msg>
<status status="PASS" endtime="20170514 21:30:06.625" starttime="20170514 21:30:06.624"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status status="PASS" endtime="20170514 21:30:06.626" starttime="20170514 21:30:06.626"></status>
</kw>
<status status="PASS" endtime="20170514 21:30:06.626" starttime="20170514 21:30:06.626"></status>
</kw>
<status status="PASS" endtime="20170514 21:30:06.626" starttime="20170514 21:30:06.625"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg timestamp="20170514 21:30:06.627" level="INFO">Logging into '9.3.86.161:22' as 'root'.</msg>
<msg timestamp="20170514 21:30:08.272" level="INFO">Read output: root@witherspoon:~#</msg>
<status status="PASS" endtime="20170514 21:30:08.272" starttime="20170514 21:30:06.627"></status>
</kw>
<status status="PASS" endtime="20170514 21:30:08.272" starttime="20170514 21:30:06.619"></status>
</kw>
<kw name="Get Ffdc Cmd Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg timestamp="20170514 21:30:08.273" level="INFO">@{entries} = [ APPLICATION DATA | DRIVER INFO | BMC DATA ]</msg>
<status status="PASS" endtime="20170514 21:30:08.273" starttime="20170514 21:30:08.273"></status>
</kw>
<kw type="for" name="${index} IN [ @{entries} ]">
<kw type="foritem" name="${index} = APPLICATION DATA">
<kw name="Iterate BMC Command List Pairs" library="openbmc_ffdc_methods">
<doc>Feed in key pair list from dictionary to execute</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Bmc Cmd" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg timestamp="20170514 21:30:08.274" level="INFO">@{cmd_list} = [ ('BMC state', '/usr/sbin/obmcutil  state') ]</msg>
<status status="PASS" endtime="20170514 21:30:08.275" starttime="20170514 21:30:08.274"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${ENTRY_INDEX}</arg>
<arg>${key_index}</arg>
</arguments>
<msg timestamp="20170514 21:30:08.280" level="INFO">${ENTRY_INDEX} = APPLICATION DATA</msg>
<status status="PASS" endtime="20170514 21:30:08.280" starttime="20170514 21:30:08.275"></status>
</kw>
<kw type="for" name="${cmd} IN [ @{cmd_list} ]">
<kw type="foritem" name="${cmd} = ('BMC state', '/usr/sbin/obmcutil  state')">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170514 21:30:08.283" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/20170514213004768711_TestBiosUpdate/20170514213004768711_HostBIOSUpdate/20170514213004768711_BMC_general.txt"&gt;/home/fspcibld/20170514213004768711_TestBiosUpdate/20170514213004768711_HostBIOSUpdate/20170514213004768711_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170514 21:30:08.283" starttime="20170514 21:30:08.283"></status>
</kw>
<status status="PASS" endtime="20170514 21:30:08.283" starttime="20170514 21:30:08.282"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170514 21:30:08.284" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/20170514213004768711_TestBiosUpdate/20170514213004768711_HostBIOSUpdate/20170514213004768711_BMC_general.txt"&gt;/home/fspcibld/20170514213004768711_TestBiosUpdate/20170514213004768711_HostBIOSUpdate/20170514213004768711_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170514 21:30:08.284" starttime="20170514 21:30:08.284"></status>
</kw>
<status status="PASS" endtime="20170514 21:30:08.285" starttime="20170514 21:30:08.283"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170514 21:30:08.286" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/20170514213004768711_TestBiosUpdate/20170514213004768711_HostBIOSUpdate/20170514213004768711_BMC_general.txt"&gt;/home/fspcibld/20170514213004768711_TestBiosUpdate/20170514213004768711_HostBIOSUpdate/20170514213004768711_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170514 21:30:08.286" starttime="20170514 21:30:08.285"></status>
</kw>
<status status="PASS" endtime="20170514 21:30:08.286" starttime="20170514 21:30:08.285"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170514 21:30:08.287" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/20170514213004768711_TestBiosUpdate/20170514213004768711_HostBIOSUpdate/20170514213004768711_BMC_general.txt"&gt;/home/fspcibld/20170514213004768711_TestBiosUpdate/20170514213004768711_HostBIOSUpdate/20170514213004768711_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170514 21:30:08.287" starttime="20170514 21:30:08.287"></status>
</kw>
<status status="PASS" endtime="20170514 21:30:08.287" starttime="20170514 21:30:08.286"></status>
</kw>
<status status="PASS" endtime="20170514 21:30:08.287" starttime="20170514 21:30:08.282"></status>
</kw>
<status status="PASS" endtime="20170514 21:30:08.287" starttime="20170514 21:30:08.281"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170514 21:30:08.288" level="INFO">Executing command '/usr/sbin/obmcutil  state'.</msg>
<msg timestamp="20170514 21:30:09.523" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170514 21:30:09.523" level="INFO">${stdout} = CurrentBMCState:    xyz.openbmc_project.State.BMC.BMCState.Ready
CurrentPowerState:  xyz.openbmc_project.State.Chassis.PowerState.Off
CurrentHostState:   xyz.openbmc_project.State.Host.HostState.Off</msg>
<msg timestamp="20170514 21:30:09.523" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170514 21:30:09.524" starttime="20170514 21:30:08.288"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170514 21:30:09.532" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/20170514213004768711_TestBiosUpdate/20170514213004768711_HostBIOSUpdate/20170514213004768711_BMC_general.txt"&gt;/home/fspcibld/20170514213004768711_TestBiosUpdate/20170514213004768711_HostBIOSUpdate/20170514213004768711_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170514 21:30:09.532" starttime="20170514 21:30:09.531"></status>
</kw>
<status status="PASS" endtime="20170514 21:30:09.532" starttime="20170514 21:30:09.531"></status>
</kw>
<status status="PASS" endtime="20170514 21:30:09.532" starttime="20170514 21:30:09.524"></status>
</kw>
<status status="PASS" endtime="20170514 21:30:09.532" starttime="20170514 21:30:08.280"></status>
</kw>
<status status="PASS" endtime="20170514 21:30:09.532" starttime="20170514 21:30:08.280"></status>
</kw>
<status status="PASS" endtime="20170514 21:30:09.533" starttime="20170514 21:30:08.280"></status>
</kw>
<status status="PASS" endtime="20170514 21:30:09.533" starttime="20170514 21:30:08.274"></status>
</kw>
<status status="PASS" endtime="20170514 21:30:09.533" starttime="20170514 21:30:08.273"></status>
</kw>
<kw type="foritem" name="${index} = DRIVER INFO">
<kw name="Iterate BMC Command List Pairs" library="openbmc_ffdc_methods">
<doc>Feed in key pair list from dictionary to execute</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Bmc Cmd" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg timestamp="20170514 21:30:09.534" level="INFO">@{cmd_list} = [ ('Build Info', 'cat /etc/version') | ('FW Level', 'cat /etc/os-release') ]</msg>
<status status="PASS" endtime="20170514 21:30:09.534" starttime="20170514 21:30:09.533"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${ENTRY_INDEX}</arg>
<arg>${key_index}</arg>
</arguments>
<msg timestamp="20170514 21:30:09.534" level="INFO">${ENTRY_INDEX} = DRIVER INFO</msg>
<status status="PASS" endtime="20170514 21:30:09.535" starttime="20170514 21:30:09.534"></status>
</kw>
<kw type="for" name="${cmd} IN [ @{cmd_list} ]">
<kw type="foritem" name="${cmd} = ('Build Info', 'cat /etc/version')">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170514 21:30:09.538" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/20170514213004768711_TestBiosUpdate/20170514213004768711_HostBIOSUpdate/20170514213004768711_BMC_general.txt"&gt;/home/fspcibld/20170514213004768711_TestBiosUpdate/20170514213004768711_HostBIOSUpdate/20170514213004768711_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170514 21:30:09.538" starttime="20170514 21:30:09.537"></status>
</kw>
<status status="PASS" endtime="20170514 21:30:09.538" starttime="20170514 21:30:09.537"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170514 21:30:09.539" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/20170514213004768711_TestBiosUpdate/20170514213004768711_HostBIOSUpdate/20170514213004768711_BMC_general.txt"&gt;/home/fspcibld/20170514213004768711_TestBiosUpdate/20170514213004768711_HostBIOSUpdate/20170514213004768711_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170514 21:30:09.539" starttime="20170514 21:30:09.539"></status>
</kw>
<status status="PASS" endtime="20170514 21:30:09.540" starttime="20170514 21:30:09.538"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170514 21:30:09.541" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/20170514213004768711_TestBiosUpdate/20170514213004768711_HostBIOSUpdate/20170514213004768711_BMC_general.txt"&gt;/home/fspcibld/20170514213004768711_TestBiosUpdate/20170514213004768711_HostBIOSUpdate/20170514213004768711_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170514 21:30:09.541" starttime="20170514 21:30:09.540"></status>
</kw>
<status status="PASS" endtime="20170514 21:30:09.541" starttime="20170514 21:30:09.540"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170514 21:30:09.542" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/20170514213004768711_TestBiosUpdate/20170514213004768711_HostBIOSUpdate/20170514213004768711_BMC_general.txt"&gt;/home/fspcibld/20170514213004768711_TestBiosUpdate/20170514213004768711_HostBIOSUpdate/20170514213004768711_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170514 21:30:09.542" starttime="20170514 21:30:09.542"></status>
</kw>
<status status="PASS" endtime="20170514 21:30:09.542" starttime="20170514 21:30:09.541"></status>
</kw>
<status status="PASS" endtime="20170514 21:30:09.542" starttime="20170514 21:30:09.536"></status>
</kw>
<status status="PASS" endtime="20170514 21:30:09.542" starttime="20170514 21:30:09.536"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170514 21:30:09.543" level="INFO">Executing command 'cat /etc/version'.</msg>
<msg timestamp="20170514 21:30:09.611" level="INFO">Command exited with return code 1.</msg>
<msg timestamp="20170514 21:30:09.612" level="INFO">${stdout} = </msg>
<msg timestamp="20170514 21:30:09.612" level="INFO">${stderr} = cat: can't open '/etc/version': No such file or directory</msg>
<status status="PASS" endtime="20170514 21:30:09.612" starttime="20170514 21:30:09.543"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170514 21:30:09.618" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/20170514213004768711_TestBiosUpdate/20170514213004768711_HostBIOSUpdate/20170514213004768711_BMC_general.txt"&gt;/home/fspcibld/20170514213004768711_TestBiosUpdate/20170514213004768711_HostBIOSUpdate/20170514213004768711_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170514 21:30:09.618" starttime="20170514 21:30:09.618"></status>
</kw>
<status status="PASS" endtime="20170514 21:30:09.618" starttime="20170514 21:30:09.617"></status>
</kw>
<status status="PASS" endtime="20170514 21:30:09.618" starttime="20170514 21:30:09.612"></status>
</kw>
<status status="PASS" endtime="20170514 21:30:09.618" starttime="20170514 21:30:09.535"></status>
</kw>
<status status="PASS" endtime="20170514 21:30:09.618" starttime="20170514 21:30:09.535"></status>
</kw>
<kw type="foritem" name="${cmd} = ('FW Level', 'cat /etc/os-release')">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170514 21:30:09.621" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/20170514213004768711_TestBiosUpdate/20170514213004768711_HostBIOSUpdate/20170514213004768711_BMC_general.txt"&gt;/home/fspcibld/20170514213004768711_TestBiosUpdate/20170514213004768711_HostBIOSUpdate/20170514213004768711_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170514 21:30:09.621" starttime="20170514 21:30:09.621"></status>
</kw>
<status status="PASS" endtime="20170514 21:30:09.622" starttime="20170514 21:30:09.621"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170514 21:30:09.623" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/20170514213004768711_TestBiosUpdate/20170514213004768711_HostBIOSUpdate/20170514213004768711_BMC_general.txt"&gt;/home/fspcibld/20170514213004768711_TestBiosUpdate/20170514213004768711_HostBIOSUpdate/20170514213004768711_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170514 21:30:09.623" starttime="20170514 21:30:09.622"></status>
</kw>
<status status="PASS" endtime="20170514 21:30:09.623" starttime="20170514 21:30:09.622"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170514 21:30:09.624" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/20170514213004768711_TestBiosUpdate/20170514213004768711_HostBIOSUpdate/20170514213004768711_BMC_general.txt"&gt;/home/fspcibld/20170514213004768711_TestBiosUpdate/20170514213004768711_HostBIOSUpdate/20170514213004768711_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170514 21:30:09.624" starttime="20170514 21:30:09.624"></status>
</kw>
<status status="PASS" endtime="20170514 21:30:09.624" starttime="20170514 21:30:09.623"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170514 21:30:09.626" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/20170514213004768711_TestBiosUpdate/20170514213004768711_HostBIOSUpdate/20170514213004768711_BMC_general.txt"&gt;/home/fspcibld/20170514213004768711_TestBiosUpdate/20170514213004768711_HostBIOSUpdate/20170514213004768711_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170514 21:30:09.626" starttime="20170514 21:30:09.625"></status>
</kw>
<status status="PASS" endtime="20170514 21:30:09.626" starttime="20170514 21:30:09.624"></status>
</kw>
<status status="PASS" endtime="20170514 21:30:09.626" starttime="20170514 21:30:09.620"></status>
</kw>
<status status="PASS" endtime="20170514 21:30:09.626" starttime="20170514 21:30:09.620"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170514 21:30:09.627" level="INFO">Executing command 'cat /etc/os-release'.</msg>
<msg timestamp="20170514 21:30:09.701" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170514 21:30:09.701" level="INFO">${stdout} = ID="openbmc-phosphor"
NAME="Phosphor OpenBMC (Phosphor OpenBMC Project Reference Distro)"
VERSION="v1.99.5-32"
VERSION_ID="v1.99.5-32-gdf62e91"
PRETTY_NAME="Phosphor OpenBMC (Phosphor OpenBMC Project ...</msg>
<msg timestamp="20170514 21:30:09.701" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170514 21:30:09.701" starttime="20170514 21:30:09.626"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170514 21:30:09.708" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/20170514213004768711_TestBiosUpdate/20170514213004768711_HostBIOSUpdate/20170514213004768711_BMC_general.txt"&gt;/home/fspcibld/20170514213004768711_TestBiosUpdate/20170514213004768711_HostBIOSUpdate/20170514213004768711_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170514 21:30:09.708" starttime="20170514 21:30:09.707"></status>
</kw>
<status status="PASS" endtime="20170514 21:30:09.708" starttime="20170514 21:30:09.707"></status>
</kw>
<status status="PASS" endtime="20170514 21:30:09.708" starttime="20170514 21:30:09.702"></status>
</kw>
<status status="PASS" endtime="20170514 21:30:09.708" starttime="20170514 21:30:09.619"></status>
</kw>
<status status="PASS" endtime="20170514 21:30:09.708" starttime="20170514 21:30:09.619"></status>
</kw>
<status status="PASS" endtime="20170514 21:30:09.708" starttime="20170514 21:30:09.535"></status>
</kw>
<status status="PASS" endtime="20170514 21:30:09.708" starttime="20170514 21:30:09.533"></status>
</kw>
<status status="PASS" endtime="20170514 21:30:09.708" starttime="20170514 21:30:09.533"></status>
</kw>
<kw type="foritem" name="${index} = BMC DATA">
<kw name="Iterate BMC Command List Pairs" library="openbmc_ffdc_methods">
<doc>Feed in key pair list from dictionary to execute</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Bmc Cmd" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg timestamp="20170514 21:30:09.709" level="INFO">@{cmd_list} = [ ('BMC Uptime', 'uptime') | ('BMC File System Disk Space Usage', 'df -hT') | ('BMC OS', 'uname -a') ]</msg>
<status status="PASS" endtime="20170514 21:30:09.709" starttime="20170514 21:30:09.709"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${ENTRY_INDEX}</arg>
<arg>${key_index}</arg>
</arguments>
<msg timestamp="20170514 21:30:09.710" level="INFO">${ENTRY_INDEX} = BMC DATA</msg>
<status status="PASS" endtime="20170514 21:30:09.710" starttime="20170514 21:30:09.710"></status>
</kw>
<kw type="for" name="${cmd} IN [ @{cmd_list} ]">
<kw type="foritem" name="${cmd} = ('BMC Uptime', 'uptime')">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170514 21:30:09.713" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/20170514213004768711_TestBiosUpdate/20170514213004768711_HostBIOSUpdate/20170514213004768711_BMC_general.txt"&gt;/home/fspcibld/20170514213004768711_TestBiosUpdate/20170514213004768711_HostBIOSUpdate/20170514213004768711_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170514 21:30:09.713" starttime="20170514 21:30:09.713"></status>
</kw>
<status status="PASS" endtime="20170514 21:30:09.713" starttime="20170514 21:30:09.712"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170514 21:30:09.715" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/20170514213004768711_TestBiosUpdate/20170514213004768711_HostBIOSUpdate/20170514213004768711_BMC_general.txt"&gt;/home/fspcibld/20170514213004768711_TestBiosUpdate/20170514213004768711_HostBIOSUpdate/20170514213004768711_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170514 21:30:09.715" starttime="20170514 21:30:09.714"></status>
</kw>
<status status="PASS" endtime="20170514 21:30:09.715" starttime="20170514 21:30:09.714"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170514 21:30:09.716" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/20170514213004768711_TestBiosUpdate/20170514213004768711_HostBIOSUpdate/20170514213004768711_BMC_general.txt"&gt;/home/fspcibld/20170514213004768711_TestBiosUpdate/20170514213004768711_HostBIOSUpdate/20170514213004768711_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170514 21:30:09.716" starttime="20170514 21:30:09.716"></status>
</kw>
<status status="PASS" endtime="20170514 21:30:09.716" starttime="20170514 21:30:09.715"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170514 21:30:09.717" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/20170514213004768711_TestBiosUpdate/20170514213004768711_HostBIOSUpdate/20170514213004768711_BMC_general.txt"&gt;/home/fspcibld/20170514213004768711_TestBiosUpdate/20170514213004768711_HostBIOSUpdate/20170514213004768711_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170514 21:30:09.717" starttime="20170514 21:30:09.717"></status>
</kw>
<status status="PASS" endtime="20170514 21:30:09.718" starttime="20170514 21:30:09.716"></status>
</kw>
<status status="PASS" endtime="20170514 21:30:09.718" starttime="20170514 21:30:09.712"></status>
</kw>
<status status="PASS" endtime="20170514 21:30:09.718" starttime="20170514 21:30:09.711"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170514 21:30:09.718" level="INFO">Executing command 'uptime'.</msg>
<msg timestamp="20170514 21:30:09.803" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170514 21:30:09.803" level="INFO">${stdout} =  21:30:15 up 2 min,  load average: 2.48, 1.72, 0.70</msg>
<msg timestamp="20170514 21:30:09.803" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170514 21:30:09.803" starttime="20170514 21:30:09.718"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170514 21:30:09.809" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/20170514213004768711_TestBiosUpdate/20170514213004768711_HostBIOSUpdate/20170514213004768711_BMC_general.txt"&gt;/home/fspcibld/20170514213004768711_TestBiosUpdate/20170514213004768711_HostBIOSUpdate/20170514213004768711_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170514 21:30:09.809" starttime="20170514 21:30:09.809"></status>
</kw>
<status status="PASS" endtime="20170514 21:30:09.809" starttime="20170514 21:30:09.808"></status>
</kw>
<status status="PASS" endtime="20170514 21:30:09.810" starttime="20170514 21:30:09.803"></status>
</kw>
<status status="PASS" endtime="20170514 21:30:09.810" starttime="20170514 21:30:09.711"></status>
</kw>
<status status="PASS" endtime="20170514 21:30:09.810" starttime="20170514 21:30:09.710"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC File System Disk Space Usage', 'df -hT')">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170514 21:30:09.813" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/20170514213004768711_TestBiosUpdate/20170514213004768711_HostBIOSUpdate/20170514213004768711_BMC_general.txt"&gt;/home/fspcibld/20170514213004768711_TestBiosUpdate/20170514213004768711_HostBIOSUpdate/20170514213004768711_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170514 21:30:09.813" starttime="20170514 21:30:09.813"></status>
</kw>
<status status="PASS" endtime="20170514 21:30:09.813" starttime="20170514 21:30:09.812"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170514 21:30:09.814" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/20170514213004768711_TestBiosUpdate/20170514213004768711_HostBIOSUpdate/20170514213004768711_BMC_general.txt"&gt;/home/fspcibld/20170514213004768711_TestBiosUpdate/20170514213004768711_HostBIOSUpdate/20170514213004768711_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170514 21:30:09.814" starttime="20170514 21:30:09.814"></status>
</kw>
<status status="PASS" endtime="20170514 21:30:09.815" starttime="20170514 21:30:09.813"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170514 21:30:09.816" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/20170514213004768711_TestBiosUpdate/20170514213004768711_HostBIOSUpdate/20170514213004768711_BMC_general.txt"&gt;/home/fspcibld/20170514213004768711_TestBiosUpdate/20170514213004768711_HostBIOSUpdate/20170514213004768711_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170514 21:30:09.816" starttime="20170514 21:30:09.815"></status>
</kw>
<status status="PASS" endtime="20170514 21:30:09.816" starttime="20170514 21:30:09.815"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170514 21:30:09.817" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/20170514213004768711_TestBiosUpdate/20170514213004768711_HostBIOSUpdate/20170514213004768711_BMC_general.txt"&gt;/home/fspcibld/20170514213004768711_TestBiosUpdate/20170514213004768711_HostBIOSUpdate/20170514213004768711_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170514 21:30:09.817" starttime="20170514 21:30:09.817"></status>
</kw>
<status status="PASS" endtime="20170514 21:30:09.817" starttime="20170514 21:30:09.816"></status>
</kw>
<status status="PASS" endtime="20170514 21:30:09.817" starttime="20170514 21:30:09.811"></status>
</kw>
<status status="PASS" endtime="20170514 21:30:09.817" starttime="20170514 21:30:09.811"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170514 21:30:09.818" level="INFO">Executing command 'df -hT'.</msg>
<msg timestamp="20170514 21:30:09.903" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170514 21:30:09.903" level="INFO">${stdout} = Filesystem           Type            Size      Used Available Use% Mounted on
dev                  devtmpfs      210.1M         0    210.1M   0% /dev
tmpfs                tmpfs         211.4M     13.9...</msg>
<msg timestamp="20170514 21:30:09.903" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170514 21:30:09.903" starttime="20170514 21:30:09.818"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170514 21:30:09.909" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/20170514213004768711_TestBiosUpdate/20170514213004768711_HostBIOSUpdate/20170514213004768711_BMC_general.txt"&gt;/home/fspcibld/20170514213004768711_TestBiosUpdate/20170514213004768711_HostBIOSUpdate/20170514213004768711_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170514 21:30:09.909" starttime="20170514 21:30:09.909"></status>
</kw>
<status status="PASS" endtime="20170514 21:30:09.909" starttime="20170514 21:30:09.908"></status>
</kw>
<status status="PASS" endtime="20170514 21:30:09.909" starttime="20170514 21:30:09.903"></status>
</kw>
<status status="PASS" endtime="20170514 21:30:09.909" starttime="20170514 21:30:09.810"></status>
</kw>
<status status="PASS" endtime="20170514 21:30:09.909" starttime="20170514 21:30:09.810"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC OS', 'uname -a')">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170514 21:30:09.912" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/20170514213004768711_TestBiosUpdate/20170514213004768711_HostBIOSUpdate/20170514213004768711_BMC_general.txt"&gt;/home/fspcibld/20170514213004768711_TestBiosUpdate/20170514213004768711_HostBIOSUpdate/20170514213004768711_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170514 21:30:09.912" starttime="20170514 21:30:09.912"></status>
</kw>
<status status="PASS" endtime="20170514 21:30:09.913" starttime="20170514 21:30:09.911"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170514 21:30:09.914" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/20170514213004768711_TestBiosUpdate/20170514213004768711_HostBIOSUpdate/20170514213004768711_BMC_general.txt"&gt;/home/fspcibld/20170514213004768711_TestBiosUpdate/20170514213004768711_HostBIOSUpdate/20170514213004768711_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170514 21:30:09.914" starttime="20170514 21:30:09.913"></status>
</kw>
<status status="PASS" endtime="20170514 21:30:09.914" starttime="20170514 21:30:09.913"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170514 21:30:09.915" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/20170514213004768711_TestBiosUpdate/20170514213004768711_HostBIOSUpdate/20170514213004768711_BMC_general.txt"&gt;/home/fspcibld/20170514213004768711_TestBiosUpdate/20170514213004768711_HostBIOSUpdate/20170514213004768711_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170514 21:30:09.915" starttime="20170514 21:30:09.915"></status>
</kw>
<status status="PASS" endtime="20170514 21:30:09.915" starttime="20170514 21:30:09.914"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170514 21:30:09.916" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/20170514213004768711_TestBiosUpdate/20170514213004768711_HostBIOSUpdate/20170514213004768711_BMC_general.txt"&gt;/home/fspcibld/20170514213004768711_TestBiosUpdate/20170514213004768711_HostBIOSUpdate/20170514213004768711_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170514 21:30:09.916" starttime="20170514 21:30:09.916"></status>
</kw>
<status status="PASS" endtime="20170514 21:30:09.916" starttime="20170514 21:30:09.915"></status>
</kw>
<status status="PASS" endtime="20170514 21:30:09.917" starttime="20170514 21:30:09.911"></status>
</kw>
<status status="PASS" endtime="20170514 21:30:09.917" starttime="20170514 21:30:09.911"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170514 21:30:09.917" level="INFO">Executing command 'uname -a'.</msg>
<msg timestamp="20170514 21:30:09.992" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170514 21:30:09.992" level="INFO">${stdout} = Linux witherspoon 4.7.10-15c30d4deb0a01f398230395dc0d9af4be92d856 #1 Sun May 14 21:14:49 UTC 2017 armv6l GNU/Linux</msg>
<msg timestamp="20170514 21:30:09.992" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170514 21:30:09.992" starttime="20170514 21:30:09.917"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170514 21:30:09.999" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/20170514213004768711_TestBiosUpdate/20170514213004768711_HostBIOSUpdate/20170514213004768711_BMC_general.txt"&gt;/home/fspcibld/20170514213004768711_TestBiosUpdate/20170514213004768711_HostBIOSUpdate/20170514213004768711_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170514 21:30:09.999" starttime="20170514 21:30:09.998"></status>
</kw>
<status status="PASS" endtime="20170514 21:30:09.999" starttime="20170514 21:30:09.997"></status>
</kw>
<status status="PASS" endtime="20170514 21:30:09.999" starttime="20170514 21:30:09.992"></status>
</kw>
<status status="PASS" endtime="20170514 21:30:09.999" starttime="20170514 21:30:09.910"></status>
</kw>
<status status="PASS" endtime="20170514 21:30:09.999" starttime="20170514 21:30:09.909"></status>
</kw>
<status status="PASS" endtime="20170514 21:30:09.999" starttime="20170514 21:30:09.710"></status>
</kw>
<status status="PASS" endtime="20170514 21:30:09.999" starttime="20170514 21:30:09.708"></status>
</kw>
<status status="PASS" endtime="20170514 21:30:09.999" starttime="20170514 21:30:09.708"></status>
</kw>
<status status="PASS" endtime="20170514 21:30:09.999" starttime="20170514 21:30:08.273"></status>
</kw>
<status status="PASS" endtime="20170514 21:30:09.999" starttime="20170514 21:30:06.618"></status>
</kw>
<status status="PASS" endtime="20170514 21:30:09.999" starttime="20170514 21:30:06.597"></status>
</kw>
<status status="PASS" endtime="20170514 21:30:10.000" starttime="20170514 21:30:06.594"></status>
</kw>
<status status="PASS" endtime="20170514 21:30:10.000" starttime="20170514 21:30:06.594"></status>
</kw>
<kw type="foritem" name="${method} = ('Get Request FFDC', 'BMC FFDC Get Requests')">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status status="PASS" endtime="20170514 21:30:10.002" starttime="20170514 21:30:10.001"></status>
</kw>
<msg timestamp="20170514 21:30:10.002" level="INFO">${status} = PASS</msg>
<msg timestamp="20170514 21:30:10.002" level="INFO">${ret_values} = None</msg>
<status status="PASS" endtime="20170514 21:30:10.002" starttime="20170514 21:30:10.001"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status status="PASS" endtime="20170514 21:30:10.002" starttime="20170514 21:30:10.002"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="BMC FFDC Get Requests" library="openbmc_ffdc_methods">
<doc>Get the command list and iterate</doc>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg timestamp="20170514 21:30:10.024" level="FAIL">Dictionary does not contain key 'host'.</msg>
<status status="FAIL" endtime="20170514 21:30:10.024" starttime="20170514 21:30:10.024"></status>
</kw>
<msg timestamp="20170514 21:30:10.024" level="INFO">${has_host} = False</msg>
<status status="PASS" endtime="20170514 21:30:10.024" starttime="20170514 21:30:10.023"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status status="PASS" endtime="20170514 21:30:10.026" starttime="20170514 21:30:10.025"></status>
</kw>
<status status="PASS" endtime="20170514 21:30:10.026" starttime="20170514 21:30:10.025"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<status status="PASS" endtime="20170514 21:30:10.026" starttime="20170514 21:30:10.026"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg timestamp="20170514 21:30:10.027" level="FAIL">Dictionary does not contain key 'port'.</msg>
<status status="FAIL" endtime="20170514 21:30:10.027" starttime="20170514 21:30:10.027"></status>
</kw>
<msg timestamp="20170514 21:30:10.028" level="INFO">${has_port} = False</msg>
<status status="PASS" endtime="20170514 21:30:10.028" starttime="20170514 21:30:10.027"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status status="PASS" endtime="20170514 21:30:10.029" starttime="20170514 21:30:10.029"></status>
</kw>
<status status="PASS" endtime="20170514 21:30:10.029" starttime="20170514 21:30:10.029"></status>
</kw>
<status status="PASS" endtime="20170514 21:30:10.029" starttime="20170514 21:30:10.028"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg timestamp="20170514 21:30:10.030" level="INFO">Logging into '9.3.86.161:22' as 'root'.</msg>
<msg timestamp="20170514 21:30:11.678" level="INFO">Read output: root@witherspoon:~#</msg>
<status status="PASS" endtime="20170514 21:30:11.678" starttime="20170514 21:30:10.030"></status>
</kw>
<status status="PASS" endtime="20170514 21:30:11.679" starttime="20170514 21:30:10.022"></status>
</kw>
<kw name="Get Ffdc Get Request Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg timestamp="20170514 21:30:11.679" level="INFO">@{entries} = [ GET REQUESTS ]</msg>
<status status="PASS" endtime="20170514 21:30:11.679" starttime="20170514 21:30:11.679"></status>
</kw>
<kw type="for" name="${index} IN [ @{entries} ]">
<kw type="foritem" name="${index} = GET REQUESTS">
<kw name="Log FFDC Get Requests" library="openbmc_ffdc_methods">
<doc>Create file in current FFDC log directory.</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Get Request" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg timestamp="20170514 21:30:11.681" level="INFO">@{cmd_list} = [ ('BMC_elog', '/xyz/openbmc_project/logging/entry/enumerate') | ('BMC_sensor_list', '/org/openbmc/sensors/enumerate') | ('BMC_inventory', '/xyz/openbmc_project/inventory/enumerate') | ('BMC_led', '/o...</msg>
<status status="PASS" endtime="20170514 21:30:11.681" starttime="20170514 21:30:11.680"></status>
</kw>
<kw type="for" name="${cmd} IN [ @{cmd_list} ]">
<kw type="foritem" name="${cmd} = ('BMC_elog', '/xyz/openbmc_project/logging/entry/enumerate')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170514 21:30:11.682" level="INFO">${logpath} = 20170514213004768711_TestBiosUpdate/20170514213004768711_HostBIOSUpdate/20170514213004768711_BMC_elog.txt</msg>
<status status="PASS" endtime="20170514 21:30:11.682" starttime="20170514 21:30:11.681"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170514 21:30:11.685" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170514 21:30:11.685" starttime="20170514 21:30:11.684"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170514 21:30:11.686" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170514 21:30:11.686" starttime="20170514 21:30:11.685"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170514 21:30:11.686" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170514 21:30:11.686" starttime="20170514 21:30:11.686"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170514 21:30:11.687" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170514 21:30:11.687" starttime="20170514 21:30:11.687"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170514 21:30:11.869" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170514 21:30:11.869" starttime="20170514 21:30:11.688"></status>
</kw>
<msg timestamp="20170514 21:30:11.870" level="INFO">${status} = PASS</msg>
<msg timestamp="20170514 21:30:11.870" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170514 21:30:11.870" starttime="20170514 21:30:11.687"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170514 21:30:11.870" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170514 21:30:11.870" starttime="20170514 21:30:11.870"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170514 21:30:11.871" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170514 21:30:11.871" starttime="20170514 21:30:11.871"></status>
</kw>
<status status="PASS" endtime="20170514 21:30:11.871" starttime="20170514 21:30:11.684"></status>
</kw>
<status status="PASS" endtime="20170514 21:30:11.872" starttime="20170514 21:30:11.683"></status>
</kw>
<status status="PASS" endtime="20170514 21:30:11.872" starttime="20170514 21:30:11.683"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170514 21:30:11.873" level="INFO">${base_uri} = /xyz/openbmc_project/logging/entry/enumerate</msg>
<status status="PASS" endtime="20170514 21:30:11.873" starttime="20170514 21:30:11.872"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170514 21:30:11.873" starttime="20170514 21:30:11.873"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170514 21:30:11.917" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry/enumerate, headers=None </msg>
<msg timestamp="20170514 21:30:11.917" level="INFO">${ret} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20170514 21:30:11.917" starttime="20170514 21:30:11.874"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170514 21:30:11.918" starttime="20170514 21:30:11.917"></status>
</kw>
<msg timestamp="20170514 21:30:11.918" level="INFO">${resp} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20170514 21:30:11.918" starttime="20170514 21:30:11.682"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170514 21:30:11.919" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20170514 21:30:11.919" level="FAIL">404 != 200</msg>
<status status="FAIL" endtime="20170514 21:30:11.919" starttime="20170514 21:30:11.919"></status>
</kw>
<msg timestamp="20170514 21:30:11.919" level="INFO">${status} = False</msg>
<status status="PASS" endtime="20170514 21:30:11.919" starttime="20170514 21:30:11.918"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<kw name="Continue For Loop" library="BuiltIn">
<doc>Skips the current for loop iteration and continues from the next.</doc>
<msg timestamp="20170514 21:30:11.920" level="INFO">Continuing for loop from the next iteration.</msg>
<status status="PASS" endtime="20170514 21:30:11.921" starttime="20170514 21:30:11.920"></status>
</kw>
<status status="PASS" endtime="20170514 21:30:11.921" starttime="20170514 21:30:11.920"></status>
</kw>
<status status="PASS" endtime="20170514 21:30:11.921" starttime="20170514 21:30:11.681"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_sensor_list', '/org/openbmc/sensors/enumerate')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170514 21:30:11.921" level="INFO">${logpath} = 20170514213004768711_TestBiosUpdate/20170514213004768711_HostBIOSUpdate/20170514213004768711_BMC_sensor_list.txt</msg>
<status status="PASS" endtime="20170514 21:30:11.921" starttime="20170514 21:30:11.921"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170514 21:30:11.924" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170514 21:30:11.925" starttime="20170514 21:30:11.924"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170514 21:30:11.925" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170514 21:30:11.925" starttime="20170514 21:30:11.925"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170514 21:30:11.926" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170514 21:30:11.926" starttime="20170514 21:30:11.925"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170514 21:30:11.926" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170514 21:30:11.926" starttime="20170514 21:30:11.926"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170514 21:30:12.102" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170514 21:30:12.102" starttime="20170514 21:30:11.927"></status>
</kw>
<msg timestamp="20170514 21:30:12.102" level="INFO">${status} = PASS</msg>
<msg timestamp="20170514 21:30:12.102" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170514 21:30:12.102" starttime="20170514 21:30:11.927"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170514 21:30:12.103" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170514 21:30:12.103" starttime="20170514 21:30:12.103"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170514 21:30:12.104" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170514 21:30:12.104" starttime="20170514 21:30:12.103"></status>
</kw>
<status status="PASS" endtime="20170514 21:30:12.104" starttime="20170514 21:30:11.923"></status>
</kw>
<status status="PASS" endtime="20170514 21:30:12.104" starttime="20170514 21:30:11.923"></status>
</kw>
<status status="PASS" endtime="20170514 21:30:12.104" starttime="20170514 21:30:11.922"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170514 21:30:12.105" level="INFO">${base_uri} = /org/openbmc/sensors/enumerate</msg>
<status status="PASS" endtime="20170514 21:30:12.105" starttime="20170514 21:30:12.104"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170514 21:30:12.105" starttime="20170514 21:30:12.105"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170514 21:30:12.321" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/enumerate, headers=None </msg>
<msg timestamp="20170514 21:30:12.321" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170514 21:30:12.321" starttime="20170514 21:30:12.106"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170514 21:30:12.322" starttime="20170514 21:30:12.322"></status>
</kw>
<msg timestamp="20170514 21:30:12.322" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170514 21:30:12.322" starttime="20170514 21:30:11.922"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170514 21:30:12.323" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170514 21:30:12.323" starttime="20170514 21:30:12.323"></status>
</kw>
<msg timestamp="20170514 21:30:12.323" level="INFO">${status} = True</msg>
<status status="PASS" endtime="20170514 21:30:12.323" starttime="20170514 21:30:12.323"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status status="PASS" endtime="20170514 21:30:12.324" starttime="20170514 21:30:12.324"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg timestamp="20170514 21:30:12.325" level="INFO">To JSON using : content={
  "data": {
    "/org/openbmc/sensors/host/BootCount": {
      "error": 0, 
      "units": "", 
      "value": 2
    }, 
    "/org/openbmc/sensors/host/BootProgress": {
      "error": 0, 
      "units": "", 
      "value": "Off"
    }, 
    "/org/openbmc/sensors/host/OperatingSystemStatus": {
      "error": 0, 
      "units": "", 
      "value": "Off"
    }, 
    "/org/openbmc/sensors/host/PowerSupplyDerating": {
      "error": 0, 
      "units": "", 
      "value": 10
    }, 
    "/org/openbmc/sensors/host/PowerSupplyRedundancy": {
      "error": 0, 
      "units": "", 
      "value": "Disabled"
    }, 
    "/org/openbmc/sensors/host/TurboAllowed": {
      "error": 0, 
      "units": "", 
      "value": 0
    }, 
    "/org/openbmc/sensors/host/cpu0/OccStatus": {
      "error": 0, 
      "units": "", 
      "value": "Disabled"
    }, 
    "/org/openbmc/sensors/host/cpu1/OccStatus": {
      "error": 0, 
      "units": "", 
      "value": "Disabled"
    }, 
    "/org/openbmc/sensors/host/powercap": {
      "error": 0, 
      "units": "", 
      "value": 0
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170514 21:30:12.325" level="INFO">To JSON using : pretty_print=True </msg>
<msg timestamp="20170514 21:30:12.325" level="INFO">${jsondata} = {
    "data": {
        "/org/openbmc/sensors/host/BootCount": {
            "error": 0,
            "units": "",
            "value": 2
        },
        "/org/openbmc/sensors/host/BootProgress": {
...</msg>
<status status="PASS" endtime="20170514 21:30:12.325" starttime="20170514 21:30:12.324"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170514 21:30:12.327" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/20170514213004768711_TestBiosUpdate/20170514213004768711_HostBIOSUpdate/20170514213004768711_BMC_sensor_list.txt"&gt;/home/fspcibld/20170514213004768711_TestBiosUpdate/20170514213004768711_HostBIOSUpdate/20170514213004768711_BMC_sensor_list.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170514 21:30:12.327" starttime="20170514 21:30:12.326"></status>
</kw>
<status status="PASS" endtime="20170514 21:30:12.327" starttime="20170514 21:30:12.325"></status>
</kw>
<status status="PASS" endtime="20170514 21:30:12.327" starttime="20170514 21:30:11.921"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_inventory', '/xyz/openbmc_project/inventory/enumerate')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170514 21:30:12.328" level="INFO">${logpath} = 20170514213004768711_TestBiosUpdate/20170514213004768711_HostBIOSUpdate/20170514213004768711_BMC_inventory.txt</msg>
<status status="PASS" endtime="20170514 21:30:12.328" starttime="20170514 21:30:12.327"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170514 21:30:12.330" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170514 21:30:12.331" starttime="20170514 21:30:12.330"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170514 21:30:12.331" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170514 21:30:12.331" starttime="20170514 21:30:12.331"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170514 21:30:12.332" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170514 21:30:12.332" starttime="20170514 21:30:12.332"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170514 21:30:12.333" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170514 21:30:12.333" starttime="20170514 21:30:12.332"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170514 21:30:12.509" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170514 21:30:12.509" starttime="20170514 21:30:12.333"></status>
</kw>
<msg timestamp="20170514 21:30:12.509" level="INFO">${status} = PASS</msg>
<msg timestamp="20170514 21:30:12.509" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170514 21:30:12.510" starttime="20170514 21:30:12.333"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170514 21:30:12.510" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170514 21:30:12.510" starttime="20170514 21:30:12.510"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170514 21:30:12.511" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170514 21:30:12.511" starttime="20170514 21:30:12.511"></status>
</kw>
<status status="PASS" endtime="20170514 21:30:12.511" starttime="20170514 21:30:12.329"></status>
</kw>
<status status="PASS" endtime="20170514 21:30:12.511" starttime="20170514 21:30:12.329"></status>
</kw>
<status status="PASS" endtime="20170514 21:30:12.511" starttime="20170514 21:30:12.328"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170514 21:30:12.512" level="INFO">${base_uri} = /xyz/openbmc_project/inventory/enumerate</msg>
<status status="PASS" endtime="20170514 21:30:12.512" starttime="20170514 21:30:12.512"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170514 21:30:12.513" starttime="20170514 21:30:12.512"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170514 21:30:12.671" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/inventory/enumerate, headers=None </msg>
<msg timestamp="20170514 21:30:12.671" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170514 21:30:12.671" starttime="20170514 21:30:12.513"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170514 21:30:12.672" starttime="20170514 21:30:12.672"></status>
</kw>
<msg timestamp="20170514 21:30:12.672" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170514 21:30:12.672" starttime="20170514 21:30:12.328"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170514 21:30:12.673" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170514 21:30:12.674" starttime="20170514 21:30:12.673"></status>
</kw>
<msg timestamp="20170514 21:30:12.674" level="INFO">${status} = True</msg>
<status status="PASS" endtime="20170514 21:30:12.674" starttime="20170514 21:30:12.672"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status status="PASS" endtime="20170514 21:30:12.675" starttime="20170514 21:30:12.674"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg timestamp="20170514 21:30:12.676" level="INFO">To JSON using : content={
  "data": {
    "/xyz/openbmc_project/inventory/createme3": {
      "ExampleProperty1": "foo"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc": {
      "BuildDate": "", 
      "FieldReplaceable": 0, 
      "Manufacturer": "IBM", 
      "Model": "", 
      "PartNumber": "01DH051", 
      "Present": 1, 
      "PrettyName": "BMC PLANAR  ", 
      "SerialNumber": "000000000000"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc/ethernet": {
      "FieldReplaceable": 0, 
      "MACAddress": "00:00:00:00:00:00", 
      "Present": 1, 
      "PrettyName": ""
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170514 21:30:12.676" level="INFO">To JSON using : pretty_print=True </msg>
<msg timestamp="20170514 21:30:12.676" level="INFO">${jsondata} = {
    "data": {
        "/xyz/openbmc_project/inventory/createme3": {
            "ExampleProperty1": "foo"
        },
        "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc":...</msg>
<status status="PASS" endtime="20170514 21:30:12.676" starttime="20170514 21:30:12.675"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170514 21:30:12.677" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/20170514213004768711_TestBiosUpdate/20170514213004768711_HostBIOSUpdate/20170514213004768711_BMC_inventory.txt"&gt;/home/fspcibld/20170514213004768711_TestBiosUpdate/20170514213004768711_HostBIOSUpdate/20170514213004768711_BMC_inventory.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170514 21:30:12.677" starttime="20170514 21:30:12.677"></status>
</kw>
<status status="PASS" endtime="20170514 21:30:12.678" starttime="20170514 21:30:12.676"></status>
</kw>
<status status="PASS" endtime="20170514 21:30:12.678" starttime="20170514 21:30:12.327"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_led', '/org/openbmc/records/events/enumerate')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170514 21:30:12.678" level="INFO">${logpath} = 20170514213004768711_TestBiosUpdate/20170514213004768711_HostBIOSUpdate/20170514213004768711_BMC_led.txt</msg>
<status status="PASS" endtime="20170514 21:30:12.678" starttime="20170514 21:30:12.678"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170514 21:30:12.681" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170514 21:30:12.681" starttime="20170514 21:30:12.681"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170514 21:30:12.682" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170514 21:30:12.682" starttime="20170514 21:30:12.682"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170514 21:30:12.683" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170514 21:30:12.683" starttime="20170514 21:30:12.682"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170514 21:30:12.684" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170514 21:30:12.684" starttime="20170514 21:30:12.683"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170514 21:30:12.866" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170514 21:30:12.866" starttime="20170514 21:30:12.684"></status>
</kw>
<msg timestamp="20170514 21:30:12.866" level="INFO">${status} = PASS</msg>
<msg timestamp="20170514 21:30:12.866" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170514 21:30:12.866" starttime="20170514 21:30:12.684"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170514 21:30:12.867" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170514 21:30:12.867" starttime="20170514 21:30:12.866"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170514 21:30:12.868" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170514 21:30:12.868" starttime="20170514 21:30:12.867"></status>
</kw>
<status status="PASS" endtime="20170514 21:30:12.868" starttime="20170514 21:30:12.680"></status>
</kw>
<status status="PASS" endtime="20170514 21:30:12.868" starttime="20170514 21:30:12.680"></status>
</kw>
<status status="PASS" endtime="20170514 21:30:12.868" starttime="20170514 21:30:12.679"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170514 21:30:12.869" level="INFO">${base_uri} = /org/openbmc/records/events/enumerate</msg>
<status status="PASS" endtime="20170514 21:30:12.869" starttime="20170514 21:30:12.868"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170514 21:30:12.869" starttime="20170514 21:30:12.869"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170514 21:30:12.951" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/records/events/enumerate, headers=None </msg>
<msg timestamp="20170514 21:30:12.951" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170514 21:30:12.951" starttime="20170514 21:30:12.869"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170514 21:30:12.952" starttime="20170514 21:30:12.951"></status>
</kw>
<msg timestamp="20170514 21:30:12.952" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170514 21:30:12.952" starttime="20170514 21:30:12.679"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170514 21:30:12.953" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170514 21:30:12.953" starttime="20170514 21:30:12.953"></status>
</kw>
<msg timestamp="20170514 21:30:12.953" level="INFO">${status} = True</msg>
<status status="PASS" endtime="20170514 21:30:12.953" starttime="20170514 21:30:12.952"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status status="PASS" endtime="20170514 21:30:12.954" starttime="20170514 21:30:12.954"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg timestamp="20170514 21:30:12.955" level="INFO">To JSON using : content={
  "data": {}, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170514 21:30:12.955" level="INFO">To JSON using : pretty_print=True </msg>
<msg timestamp="20170514 21:30:12.955" level="INFO">${jsondata} = {
    "data": {},
    "message": "200 OK",
    "status": "ok"
}</msg>
<status status="PASS" endtime="20170514 21:30:12.955" starttime="20170514 21:30:12.954"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170514 21:30:12.956" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/20170514213004768711_TestBiosUpdate/20170514213004768711_HostBIOSUpdate/20170514213004768711_BMC_led.txt"&gt;/home/fspcibld/20170514213004768711_TestBiosUpdate/20170514213004768711_HostBIOSUpdate/20170514213004768711_BMC_led.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170514 21:30:12.956" starttime="20170514 21:30:12.956"></status>
</kw>
<status status="PASS" endtime="20170514 21:30:12.956" starttime="20170514 21:30:12.955"></status>
</kw>
<status status="PASS" endtime="20170514 21:30:12.956" starttime="20170514 21:30:12.678"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_record_log', '/org/openbmc/control/led/enumerate')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170514 21:30:12.957" level="INFO">${logpath} = 20170514213004768711_TestBiosUpdate/20170514213004768711_HostBIOSUpdate/20170514213004768711_BMC_record_log.txt</msg>
<status status="PASS" endtime="20170514 21:30:12.957" starttime="20170514 21:30:12.957"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170514 21:30:12.960" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170514 21:30:12.962" starttime="20170514 21:30:12.960"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170514 21:30:12.963" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170514 21:30:12.963" starttime="20170514 21:30:12.963"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170514 21:30:12.964" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170514 21:30:12.964" starttime="20170514 21:30:12.963"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170514 21:30:12.965" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170514 21:30:12.965" starttime="20170514 21:30:12.964"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170514 21:30:13.140" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170514 21:30:13.140" starttime="20170514 21:30:12.966"></status>
</kw>
<msg timestamp="20170514 21:30:13.140" level="INFO">${status} = PASS</msg>
<msg timestamp="20170514 21:30:13.140" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170514 21:30:13.140" starttime="20170514 21:30:12.965"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170514 21:30:13.141" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170514 21:30:13.141" starttime="20170514 21:30:13.141"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170514 21:30:13.142" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170514 21:30:13.142" starttime="20170514 21:30:13.141"></status>
</kw>
<status status="PASS" endtime="20170514 21:30:13.142" starttime="20170514 21:30:12.959"></status>
</kw>
<status status="PASS" endtime="20170514 21:30:13.142" starttime="20170514 21:30:12.959"></status>
</kw>
<status status="PASS" endtime="20170514 21:30:13.142" starttime="20170514 21:30:12.958"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170514 21:30:13.143" level="INFO">${base_uri} = /org/openbmc/control/led/enumerate</msg>
<status status="PASS" endtime="20170514 21:30:13.143" starttime="20170514 21:30:13.143"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170514 21:30:13.144" starttime="20170514 21:30:13.144"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170514 21:30:13.186" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/control/led/enumerate, headers=None </msg>
<msg timestamp="20170514 21:30:13.186" level="INFO">${ret} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20170514 21:30:13.186" starttime="20170514 21:30:13.144"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170514 21:30:13.187" starttime="20170514 21:30:13.186"></status>
</kw>
<msg timestamp="20170514 21:30:13.187" level="INFO">${resp} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20170514 21:30:13.187" starttime="20170514 21:30:12.957"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170514 21:30:13.188" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20170514 21:30:13.188" level="FAIL">404 != 200</msg>
<status status="FAIL" endtime="20170514 21:30:13.188" starttime="20170514 21:30:13.188"></status>
</kw>
<msg timestamp="20170514 21:30:13.188" level="INFO">${status} = False</msg>
<status status="PASS" endtime="20170514 21:30:13.188" starttime="20170514 21:30:13.187"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<kw name="Continue For Loop" library="BuiltIn">
<doc>Skips the current for loop iteration and continues from the next.</doc>
<msg timestamp="20170514 21:30:13.189" level="INFO">Continuing for loop from the next iteration.</msg>
<status status="PASS" endtime="20170514 21:30:13.189" starttime="20170514 21:30:13.189"></status>
</kw>
<status status="PASS" endtime="20170514 21:30:13.190" starttime="20170514 21:30:13.189"></status>
</kw>
<status status="PASS" endtime="20170514 21:30:13.190" starttime="20170514 21:30:12.956"></status>
</kw>
<status status="PASS" endtime="20170514 21:30:13.190" starttime="20170514 21:30:11.681"></status>
</kw>
<status status="PASS" endtime="20170514 21:30:13.190" starttime="20170514 21:30:11.680"></status>
</kw>
<status status="PASS" endtime="20170514 21:30:13.190" starttime="20170514 21:30:11.680"></status>
</kw>
<status status="PASS" endtime="20170514 21:30:13.190" starttime="20170514 21:30:11.679"></status>
</kw>
<status status="PASS" endtime="20170514 21:30:13.190" starttime="20170514 21:30:10.022"></status>
</kw>
<status status="PASS" endtime="20170514 21:30:13.190" starttime="20170514 21:30:10.003"></status>
</kw>
<status status="PASS" endtime="20170514 21:30:13.190" starttime="20170514 21:30:10.000"></status>
</kw>
<status status="PASS" endtime="20170514 21:30:13.190" starttime="20170514 21:30:10.000"></status>
</kw>
<kw type="foritem" name="${method} = ('Core Files', 'SCP Coredump Files')">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status status="PASS" endtime="20170514 21:30:13.192" starttime="20170514 21:30:13.192"></status>
</kw>
<msg timestamp="20170514 21:30:13.192" level="INFO">${status} = PASS</msg>
<msg timestamp="20170514 21:30:13.192" level="INFO">${ret_values} = None</msg>
<status status="PASS" endtime="20170514 21:30:13.192" starttime="20170514 21:30:13.191"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status status="PASS" endtime="20170514 21:30:13.193" starttime="20170514 21:30:13.193"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="SCP Coredump Files" library="openbmc_ffdc_methods">
<doc>Copy core dump file from BMC to local system.</doc>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg timestamp="20170514 21:30:13.216" level="FAIL">Dictionary does not contain key 'host'.</msg>
<status status="FAIL" endtime="20170514 21:30:13.216" starttime="20170514 21:30:13.216"></status>
</kw>
<msg timestamp="20170514 21:30:13.216" level="INFO">${has_host} = False</msg>
<status status="PASS" endtime="20170514 21:30:13.216" starttime="20170514 21:30:13.215"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status status="PASS" endtime="20170514 21:30:13.217" starttime="20170514 21:30:13.217"></status>
</kw>
<status status="PASS" endtime="20170514 21:30:13.217" starttime="20170514 21:30:13.216"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<status status="PASS" endtime="20170514 21:30:13.219" starttime="20170514 21:30:13.218"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg timestamp="20170514 21:30:13.220" level="FAIL">Dictionary does not contain key 'port'.</msg>
<status status="FAIL" endtime="20170514 21:30:13.220" starttime="20170514 21:30:13.219"></status>
</kw>
<msg timestamp="20170514 21:30:13.220" level="INFO">${has_port} = False</msg>
<status status="PASS" endtime="20170514 21:30:13.220" starttime="20170514 21:30:13.219"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status status="PASS" endtime="20170514 21:30:13.222" starttime="20170514 21:30:13.222"></status>
</kw>
<status status="PASS" endtime="20170514 21:30:13.222" starttime="20170514 21:30:13.221"></status>
</kw>
<status status="PASS" endtime="20170514 21:30:13.222" starttime="20170514 21:30:13.221"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg timestamp="20170514 21:30:13.223" level="INFO">Logging into '9.3.86.161:22' as 'root'.</msg>
<msg timestamp="20170514 21:30:14.840" level="INFO">Read output: root@witherspoon:~#</msg>
<status status="PASS" endtime="20170514 21:30:14.840" starttime="20170514 21:30:13.223"></status>
</kw>
<status status="PASS" endtime="20170514 21:30:14.840" starttime="20170514 21:30:13.214"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>ls /tmp/core_*</arg>
</arguments>
<assign>
<var>${core_files}</var>
</assign>
<msg timestamp="20170514 21:30:14.841" level="INFO">Executing command 'ls /tmp/core_*'.</msg>
<msg timestamp="20170514 21:30:14.887" level="INFO">Command exited with return code 1.</msg>
<msg timestamp="20170514 21:30:14.887" level="INFO">${core_files} = </msg>
<status status="PASS" endtime="20170514 21:30:14.887" starttime="20170514 21:30:14.841"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${core_files}</arg>
</arguments>
<assign>
<var>@{core_list}</var>
</assign>
<msg timestamp="20170514 21:30:14.888" level="INFO">@{core_list} = [ ]</msg>
<status status="PASS" endtime="20170514 21:30:14.888" starttime="20170514 21:30:14.888"></status>
</kw>
<kw name="Open Connection for SCP" library="connection_client">
<kw name="Import Library" library="BuiltIn">
<doc>Imports a library with the given name and optional arguments.</doc>
<arguments>
<arg>SCPLibrary</arg>
<arg>WITH NAME</arg>
<arg>scp</arg>
</arguments>
<status status="PASS" endtime="20170514 21:30:14.890" starttime="20170514 21:30:14.889"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' == '${EMPTY}'</arg>
<arg>scp.Open connection</arg>
<arg>${OPENBMC_HOST}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>scp.Open connection</arg>
<arg>${OPENBMC_HOST}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
</arguments>
<kw name="Open Connection" library="scp">
<doc>Opens a new SCP connection to the given host.</doc>
<arguments>
<arg>${OPENBMC_HOST}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
</arguments>
<status status="PASS" endtime="20170514 21:30:15.526" starttime="20170514 21:30:14.891"></status>
</kw>
<status status="PASS" endtime="20170514 21:30:15.526" starttime="20170514 21:30:14.890"></status>
</kw>
<status status="PASS" endtime="20170514 21:30:15.526" starttime="20170514 21:30:14.888"></status>
</kw>
<kw type="for" name="${index} IN [ @{core_list} ]">
<status status="PASS" endtime="20170514 21:30:15.527" starttime="20170514 21:30:15.527"></status>
</kw>
<status status="PASS" endtime="20170514 21:30:15.527" starttime="20170514 21:30:13.214"></status>
</kw>
<status status="PASS" endtime="20170514 21:30:15.527" starttime="20170514 21:30:13.193"></status>
</kw>
<status status="PASS" endtime="20170514 21:30:15.527" starttime="20170514 21:30:13.191"></status>
</kw>
<status status="PASS" endtime="20170514 21:30:15.527" starttime="20170514 21:30:13.190"></status>
</kw>
<kw type="foritem" name="${method} = ('BMC Specific Files', 'BMC FFDC Files')">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status status="PASS" endtime="20170514 21:30:15.529" starttime="20170514 21:30:15.529"></status>
</kw>
<msg timestamp="20170514 21:30:15.529" level="INFO">${status} = PASS</msg>
<msg timestamp="20170514 21:30:15.529" level="INFO">${ret_values} = None</msg>
<status status="PASS" endtime="20170514 21:30:15.529" starttime="20170514 21:30:15.528"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status status="PASS" endtime="20170514 21:30:15.530" starttime="20170514 21:30:15.530"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="BMC FFDC Files" library="openbmc_ffdc_methods">
<doc>Get the command list and iterate</doc>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg timestamp="20170514 21:30:15.553" level="FAIL">Dictionary does not contain key 'host'.</msg>
<status status="FAIL" endtime="20170514 21:30:15.553" starttime="20170514 21:30:15.552"></status>
</kw>
<msg timestamp="20170514 21:30:15.553" level="INFO">${has_host} = False</msg>
<status status="PASS" endtime="20170514 21:30:15.553" starttime="20170514 21:30:15.552"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status status="PASS" endtime="20170514 21:30:15.555" starttime="20170514 21:30:15.554"></status>
</kw>
<status status="PASS" endtime="20170514 21:30:15.555" starttime="20170514 21:30:15.553"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<status status="PASS" endtime="20170514 21:30:15.556" starttime="20170514 21:30:15.555"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg timestamp="20170514 21:30:15.557" level="FAIL">Dictionary does not contain key 'port'.</msg>
<status status="FAIL" endtime="20170514 21:30:15.557" starttime="20170514 21:30:15.557"></status>
</kw>
<msg timestamp="20170514 21:30:15.558" level="INFO">${has_port} = False</msg>
<status status="PASS" endtime="20170514 21:30:15.559" starttime="20170514 21:30:15.556"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status status="PASS" endtime="20170514 21:30:15.561" starttime="20170514 21:30:15.561"></status>
</kw>
<status status="PASS" endtime="20170514 21:30:15.562" starttime="20170514 21:30:15.560"></status>
</kw>
<status status="PASS" endtime="20170514 21:30:15.562" starttime="20170514 21:30:15.559"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg timestamp="20170514 21:30:15.562" level="INFO">Logging into '9.3.86.161:22' as 'root'.</msg>
<msg timestamp="20170514 21:30:17.208" level="INFO">Read output: root@witherspoon:~#</msg>
<status status="PASS" endtime="20170514 21:30:17.208" starttime="20170514 21:30:15.562"></status>
</kw>
<status status="PASS" endtime="20170514 21:30:17.209" starttime="20170514 21:30:15.551"></status>
</kw>
<kw name="Get Ffdc File Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg timestamp="20170514 21:30:17.209" level="INFO">@{entries} = [ BMC FILES ]</msg>
<status status="PASS" endtime="20170514 21:30:17.209" starttime="20170514 21:30:17.209"></status>
</kw>
<kw type="for" name="${index} IN [ @{entries} ]">
<kw type="foritem" name="${index} = BMC FILES">
<kw name="Create File and Write Data" library="openbmc_ffdc_methods">
<doc>Create files to current FFDC log directory,</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Bmc File" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg timestamp="20170514 21:30:17.211" level="INFO">@{cmd_list} = [ ('BMC_proc_list', 'top -n 1 -b') | ('BMC_dmesg', 'dmesg') | ('BMC_meminfo', 'cat /proc/meminfo') | ('BMC_procinfo', 'cat /proc/cpuinfo') | ('BMC_journalctl', 'journalctl --no-pager') ]</msg>
<status status="PASS" endtime="20170514 21:30:17.211" starttime="20170514 21:30:17.210"></status>
</kw>
<kw type="for" name="${cmd} IN [ @{cmd_list} ]">
<kw type="foritem" name="${cmd} = ('BMC_proc_list', 'top -n 1 -b')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170514 21:30:17.212" level="INFO">${logpath} = 20170514213004768711_TestBiosUpdate/20170514213004768711_HostBIOSUpdate/20170514213004768711_BMC_proc_list.txt</msg>
<status status="PASS" endtime="20170514 21:30:17.212" starttime="20170514 21:30:17.211"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status status="PASS" endtime="20170514 21:30:17.213" starttime="20170514 21:30:17.213"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170514 21:30:17.214" level="INFO">Executing command 'top -n 1 -b'.</msg>
<msg timestamp="20170514 21:30:17.472" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170514 21:30:17.472" level="INFO">${stdout} = Mem: 210332K used, 222600K free, 79884K shrd, 10412K buff, 114564K cached
CPU:  16% usr   0% sys   0% nic  83% idle   0% io   0% irq   0% sirq
Load average: 2.11 1.67 0.70 1/131 998
  PID  PPID USER  ...</msg>
<msg timestamp="20170514 21:30:17.472" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170514 21:30:17.472" starttime="20170514 21:30:17.213"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170514 21:30:17.479" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/20170514213004768711_TestBiosUpdate/20170514213004768711_HostBIOSUpdate/20170514213004768711_BMC_proc_list.txt"&gt;/home/fspcibld/20170514213004768711_TestBiosUpdate/20170514213004768711_HostBIOSUpdate/20170514213004768711_BMC_proc_list.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170514 21:30:17.479" starttime="20170514 21:30:17.478"></status>
</kw>
<status status="PASS" endtime="20170514 21:30:17.479" starttime="20170514 21:30:17.477"></status>
</kw>
<status status="PASS" endtime="20170514 21:30:17.479" starttime="20170514 21:30:17.473"></status>
</kw>
<status status="PASS" endtime="20170514 21:30:17.479" starttime="20170514 21:30:17.212"></status>
</kw>
<status status="PASS" endtime="20170514 21:30:17.479" starttime="20170514 21:30:17.211"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_dmesg', 'dmesg')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170514 21:30:17.480" level="INFO">${logpath} = 20170514213004768711_TestBiosUpdate/20170514213004768711_HostBIOSUpdate/20170514213004768711_BMC_dmesg.txt</msg>
<status status="PASS" endtime="20170514 21:30:17.480" starttime="20170514 21:30:17.480"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status status="PASS" endtime="20170514 21:30:17.481" starttime="20170514 21:30:17.481"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170514 21:30:17.482" level="INFO">Executing command 'dmesg'.</msg>
<msg timestamp="20170514 21:30:17.597" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170514 21:30:17.597" level="INFO">${stdout} = Booting Linux on physical CPU 0x0
Linux version 4.7.10-15c30d4deb0a01f398230395dc0d9af4be92d856 (jenkins@openbmc-builder1) (gcc version 6.2.0 (GCC) ) #1 Sun May 14 21:14:49 UTC 2017
CPU: ARMv6-compati...</msg>
<msg timestamp="20170514 21:30:17.597" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170514 21:30:17.597" starttime="20170514 21:30:17.482"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170514 21:30:17.606" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/20170514213004768711_TestBiosUpdate/20170514213004768711_HostBIOSUpdate/20170514213004768711_BMC_dmesg.txt"&gt;/home/fspcibld/20170514213004768711_TestBiosUpdate/20170514213004768711_HostBIOSUpdate/20170514213004768711_BMC_dmesg.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170514 21:30:17.606" starttime="20170514 21:30:17.604"></status>
</kw>
<status status="PASS" endtime="20170514 21:30:17.606" starttime="20170514 21:30:17.603"></status>
</kw>
<status status="PASS" endtime="20170514 21:30:17.606" starttime="20170514 21:30:17.598"></status>
</kw>
<status status="PASS" endtime="20170514 21:30:17.606" starttime="20170514 21:30:17.480"></status>
</kw>
<status status="PASS" endtime="20170514 21:30:17.606" starttime="20170514 21:30:17.479"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_meminfo', 'cat /proc/meminfo')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170514 21:30:17.607" level="INFO">${logpath} = 20170514213004768711_TestBiosUpdate/20170514213004768711_HostBIOSUpdate/20170514213004768711_BMC_meminfo.txt</msg>
<status status="PASS" endtime="20170514 21:30:17.607" starttime="20170514 21:30:17.607"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status status="PASS" endtime="20170514 21:30:17.608" starttime="20170514 21:30:17.608"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170514 21:30:17.609" level="INFO">Executing command 'cat /proc/meminfo'.</msg>
<msg timestamp="20170514 21:30:17.685" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170514 21:30:17.685" level="INFO">${stdout} = MemTotal:         432932 kB
MemFree:          222476 kB
MemAvailable:     263412 kB
Buffers:           10412 kB
Cached:           114568 kB
SwapCached:            0 kB
Active:            92048 kB
Inac...</msg>
<msg timestamp="20170514 21:30:17.685" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170514 21:30:17.685" starttime="20170514 21:30:17.609"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170514 21:30:17.693" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/20170514213004768711_TestBiosUpdate/20170514213004768711_HostBIOSUpdate/20170514213004768711_BMC_meminfo.txt"&gt;/home/fspcibld/20170514213004768711_TestBiosUpdate/20170514213004768711_HostBIOSUpdate/20170514213004768711_BMC_meminfo.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170514 21:30:17.693" starttime="20170514 21:30:17.692"></status>
</kw>
<status status="PASS" endtime="20170514 21:30:17.693" starttime="20170514 21:30:17.691"></status>
</kw>
<status status="PASS" endtime="20170514 21:30:17.693" starttime="20170514 21:30:17.686"></status>
</kw>
<status status="PASS" endtime="20170514 21:30:17.693" starttime="20170514 21:30:17.607"></status>
</kw>
<status status="PASS" endtime="20170514 21:30:17.693" starttime="20170514 21:30:17.606"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_procinfo', 'cat /proc/cpuinfo')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170514 21:30:17.694" level="INFO">${logpath} = 20170514213004768711_TestBiosUpdate/20170514213004768711_HostBIOSUpdate/20170514213004768711_BMC_procinfo.txt</msg>
<status status="PASS" endtime="20170514 21:30:17.694" starttime="20170514 21:30:17.694"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status status="PASS" endtime="20170514 21:30:17.695" starttime="20170514 21:30:17.695"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170514 21:30:17.696" level="INFO">Executing command 'cat /proc/cpuinfo'.</msg>
<msg timestamp="20170514 21:30:17.781" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170514 21:30:17.781" level="INFO">${stdout} = processor	: 0
model name	: ARMv6-compatible processor rev 7 (v6l)
BogoMIPS	: 789.70
Features	: half thumb fastmult edsp java tls 
CPU implementer	: 0x41
CPU architecture: 7
CPU variant	: 0x0
CPU part	...</msg>
<msg timestamp="20170514 21:30:17.781" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170514 21:30:17.781" starttime="20170514 21:30:17.696"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170514 21:30:17.789" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/20170514213004768711_TestBiosUpdate/20170514213004768711_HostBIOSUpdate/20170514213004768711_BMC_procinfo.txt"&gt;/home/fspcibld/20170514213004768711_TestBiosUpdate/20170514213004768711_HostBIOSUpdate/20170514213004768711_BMC_procinfo.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170514 21:30:17.789" starttime="20170514 21:30:17.788"></status>
</kw>
<status status="PASS" endtime="20170514 21:30:17.789" starttime="20170514 21:30:17.787"></status>
</kw>
<status status="PASS" endtime="20170514 21:30:17.789" starttime="20170514 21:30:17.781"></status>
</kw>
<status status="PASS" endtime="20170514 21:30:17.789" starttime="20170514 21:30:17.694"></status>
</kw>
<status status="PASS" endtime="20170514 21:30:17.789" starttime="20170514 21:30:17.693"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_journalctl', 'journalctl --no-pager')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170514 21:30:17.790" level="INFO">${logpath} = 20170514213004768711_TestBiosUpdate/20170514213004768711_HostBIOSUpdate/20170514213004768711_BMC_journalctl.txt</msg>
<status status="PASS" endtime="20170514 21:30:17.790" starttime="20170514 21:30:17.789"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status status="PASS" endtime="20170514 21:30:17.791" starttime="20170514 21:30:17.791"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170514 21:30:17.792" level="INFO">Executing command 'journalctl --no-pager'.</msg>
<msg timestamp="20170514 21:30:18.607" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170514 21:30:18.608" level="INFO">${stdout} = -- Logs begin at Sun 2017-05-14 21:27:41 UTC, end at Sun 2017-05-14 21:30:22 UTC. --
May 14 21:27:41 witherspoon kernel: Booting Linux on physical CPU 0x0
May 14 21:27:41 witherspoon kernel: Linux ver...</msg>
<msg timestamp="20170514 21:30:18.608" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170514 21:30:18.608" starttime="20170514 21:30:17.791"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170514 21:30:18.615" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/20170514213004768711_TestBiosUpdate/20170514213004768711_HostBIOSUpdate/20170514213004768711_BMC_journalctl.txt"&gt;/home/fspcibld/20170514213004768711_TestBiosUpdate/20170514213004768711_HostBIOSUpdate/20170514213004768711_BMC_journalctl.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170514 21:30:18.615" starttime="20170514 21:30:18.615"></status>
</kw>
<status status="PASS" endtime="20170514 21:30:18.615" starttime="20170514 21:30:18.614"></status>
</kw>
<status status="PASS" endtime="20170514 21:30:18.616" starttime="20170514 21:30:18.609"></status>
</kw>
<status status="PASS" endtime="20170514 21:30:18.616" starttime="20170514 21:30:17.790"></status>
</kw>
<status status="PASS" endtime="20170514 21:30:18.616" starttime="20170514 21:30:17.789"></status>
</kw>
<status status="PASS" endtime="20170514 21:30:18.616" starttime="20170514 21:30:17.211"></status>
</kw>
<status status="PASS" endtime="20170514 21:30:18.616" starttime="20170514 21:30:17.210"></status>
</kw>
<status status="PASS" endtime="20170514 21:30:18.616" starttime="20170514 21:30:17.210"></status>
</kw>
<status status="PASS" endtime="20170514 21:30:18.616" starttime="20170514 21:30:17.209"></status>
</kw>
<status status="PASS" endtime="20170514 21:30:18.616" starttime="20170514 21:30:15.550"></status>
</kw>
<status status="PASS" endtime="20170514 21:30:18.616" starttime="20170514 21:30:15.530"></status>
</kw>
<status status="PASS" endtime="20170514 21:30:18.616" starttime="20170514 21:30:15.527"></status>
</kw>
<status status="PASS" endtime="20170514 21:30:18.616" starttime="20170514 21:30:15.527"></status>
</kw>
<kw type="foritem" name="${method} = ('SEL Log', 'Collect eSEL Log')">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status status="PASS" endtime="20170514 21:30:18.618" starttime="20170514 21:30:18.618"></status>
</kw>
<msg timestamp="20170514 21:30:18.618" level="INFO">${status} = PASS</msg>
<msg timestamp="20170514 21:30:18.618" level="INFO">${ret_values} = None</msg>
<status status="PASS" endtime="20170514 21:30:18.618" starttime="20170514 21:30:18.617"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status status="PASS" endtime="20170514 21:30:18.619" starttime="20170514 21:30:18.619"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="Collect eSEL Log" library="openbmc_ffdc_methods">
<doc>Collect eSEL log from logging entry and convert eSEL data</doc>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${BMC_LOGGING_ENTRY}/enumerate</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170514 21:30:18.643" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170514 21:30:18.644" starttime="20170514 21:30:18.642"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170514 21:30:18.644" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170514 21:30:18.644" starttime="20170514 21:30:18.644"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170514 21:30:18.645" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170514 21:30:18.645" starttime="20170514 21:30:18.645"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170514 21:30:18.647" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170514 21:30:18.647" starttime="20170514 21:30:18.645"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170514 21:30:18.825" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170514 21:30:18.825" starttime="20170514 21:30:18.648"></status>
</kw>
<msg timestamp="20170514 21:30:18.825" level="INFO">${status} = PASS</msg>
<msg timestamp="20170514 21:30:18.826" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170514 21:30:18.826" starttime="20170514 21:30:18.648"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170514 21:30:18.826" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170514 21:30:18.826" starttime="20170514 21:30:18.826"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170514 21:30:18.827" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170514 21:30:18.827" starttime="20170514 21:30:18.827"></status>
</kw>
<status status="PASS" endtime="20170514 21:30:18.827" starttime="20170514 21:30:18.642"></status>
</kw>
<status status="PASS" endtime="20170514 21:30:18.827" starttime="20170514 21:30:18.641"></status>
</kw>
<status status="PASS" endtime="20170514 21:30:18.828" starttime="20170514 21:30:18.641"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170514 21:30:18.828" level="INFO">${base_uri} = /xyz/openbmc_project/logging/entry//enumerate</msg>
<status status="PASS" endtime="20170514 21:30:18.829" starttime="20170514 21:30:18.828"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170514 21:30:18.829" starttime="20170514 21:30:18.829"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170514 21:30:18.873" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry//enumerate, headers=None </msg>
<msg timestamp="20170514 21:30:18.873" level="INFO">${ret} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20170514 21:30:18.873" starttime="20170514 21:30:18.830"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170514 21:30:18.874" starttime="20170514 21:30:18.874"></status>
</kw>
<msg timestamp="20170514 21:30:18.874" level="INFO">${resp} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20170514 21:30:18.874" starttime="20170514 21:30:18.640"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170514 21:30:18.875" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20170514 21:30:18.875" level="FAIL">404 != 200</msg>
<status status="FAIL" endtime="20170514 21:30:18.875" starttime="20170514 21:30:18.875"></status>
</kw>
<msg timestamp="20170514 21:30:18.875" level="INFO">${status} = False</msg>
<status status="PASS" endtime="20170514 21:30:18.876" starttime="20170514 21:30:18.874"></status>
</kw>
<kw name="Return From Keyword If" library="BuiltIn">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
</arguments>
<msg timestamp="20170514 21:30:18.876" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" endtime="20170514 21:30:18.876" starttime="20170514 21:30:18.876"></status>
</kw>
<status status="PASS" endtime="20170514 21:30:18.876" starttime="20170514 21:30:18.640"></status>
</kw>
<status status="PASS" endtime="20170514 21:30:18.876" starttime="20170514 21:30:18.619"></status>
</kw>
<status status="PASS" endtime="20170514 21:30:18.877" starttime="20170514 21:30:18.617"></status>
</kw>
<status status="PASS" endtime="20170514 21:30:18.877" starttime="20170514 21:30:18.616"></status>
</kw>
<kw type="foritem" name="${method} = ('OS FFDC', 'OS FFDC Files')">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status status="PASS" endtime="20170514 21:30:18.878" starttime="20170514 21:30:18.878"></status>
</kw>
<msg timestamp="20170514 21:30:18.878" level="INFO">${status} = PASS</msg>
<msg timestamp="20170514 21:30:18.879" level="INFO">${ret_values} = None</msg>
<status status="PASS" endtime="20170514 21:30:18.879" starttime="20170514 21:30:18.878"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status status="PASS" endtime="20170514 21:30:18.879" starttime="20170514 21:30:18.879"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="OS FFDC Files" library="openbmc_ffdc_methods">
<doc>Get the command list and iterate</doc>
<kw name="Return From Keyword If" library="BuiltIn">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${OS_HOST}' == '${EMPTY}'</arg>
<arg>No OS Host Provided</arg>
</arguments>
<msg timestamp="20170514 21:30:18.900" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" endtime="20170514 21:30:18.900" starttime="20170514 21:30:18.899"></status>
</kw>
<status status="PASS" endtime="20170514 21:30:18.900" starttime="20170514 21:30:18.898"></status>
</kw>
<status status="PASS" endtime="20170514 21:30:18.900" starttime="20170514 21:30:18.879"></status>
</kw>
<status status="PASS" endtime="20170514 21:30:18.900" starttime="20170514 21:30:18.877"></status>
</kw>
<status status="PASS" endtime="20170514 21:30:18.900" starttime="20170514 21:30:18.877"></status>
</kw>
<status status="PASS" endtime="20170514 21:30:18.900" starttime="20170514 21:30:06.594"></status>
</kw>
<status status="PASS" endtime="20170514 21:30:18.900" starttime="20170514 21:30:06.591"></status>
</kw>
<status status="PASS" endtime="20170514 21:30:18.900" starttime="20170514 21:30:06.591"></status>
</kw>
<status status="PASS" endtime="20170514 21:30:18.900" starttime="20170514 21:30:06.591"></status>
</kw>
<kw name="Close All Connections" library="SSHLibrary">
<doc>Closes all open connections.</doc>
<status status="PASS" endtime="20170514 21:30:19.140" starttime="20170514 21:30:18.901"></status>
</kw>
<status status="PASS" endtime="20170514 21:30:19.140" starttime="20170514 21:30:06.590"></status>
</kw>
<status status="PASS" endtime="20170514 21:30:19.141" starttime="20170514 21:30:01.729"></status>
</kw>
<status status="PASS" endtime="20170514 21:30:19.141" starttime="20170514 21:30:01.728"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}'=='True'</arg>
<arg>Recover Quiesced Host</arg>
</arguments>
<status status="PASS" endtime="20170514 21:30:19.141" starttime="20170514 21:30:19.141"></status>
</kw>
<kw name="Log Test Case Status" library="openbmc_ffdc_methods">
<doc>Test case execution result history.</doc>
<kw name="Get Variable Value" library="BuiltIn">
<doc>Returns variable value or ``default`` if the variable does not exist.</doc>
<arguments>
<arg>${FFDC_DIR_PATH_STYLE}</arg>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${FFDC_DIR_PATH_STYLE}</var>
</assign>
<msg timestamp="20170514 21:30:19.143" level="INFO">${FFDC_DIR_PATH_STYLE} = 0</msg>
<status status="PASS" endtime="20170514 21:30:19.143" starttime="20170514 21:30:19.142"></status>
</kw>
<kw name="Get Variable Value" library="BuiltIn">
<doc>Returns variable value or ``default`` if the variable does not exist.</doc>
<arguments>
<arg>${FFDC_DIR_PATH}</arg>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${FFDC_DIR_PATH}</var>
</assign>
<msg timestamp="20170514 21:30:19.143" level="INFO">${FFDC_DIR_PATH} = 20170514213004768711_TestBiosUpdate/20170514213004768711_HostBIOSUpdate/</msg>
<status status="PASS" endtime="20170514 21:30:19.143" starttime="20170514 21:30:19.143"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${FFDC_DIR_PATH}' == '${EMPTY}'</arg>
<arg>Set FFDC Defaults</arg>
</arguments>
<status status="PASS" endtime="20170514 21:30:19.144" starttime="20170514 21:30:19.144"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${FFDC_DIR_PATH_STYLE}' == '${1}'</arg>
<arg>Run Keywords</arg>
<arg>Set Global Variable</arg>
<arg>${FFDC_LOG_PATH}</arg>
<arg>${FFDC_DIR_PATH}</arg>
<arg>AND</arg>
<arg>Set Global Variable</arg>
<arg>${TEST_HISTORY}</arg>
<arg>${FFDC_DIR_PATH}test_history.txt</arg>
</arguments>
<status status="PASS" endtime="20170514 21:30:19.145" starttime="20170514 21:30:19.144"></status>
</kw>
<kw name="Create Directory" library="OperatingSystem">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>${FFDC_LOG_PATH}</arg>
</arguments>
<msg timestamp="20170514 21:30:19.145" html="yes" level="INFO">Directory '&lt;a href="file:///home/fspcibld"&gt;/home/fspcibld&lt;/a&gt;' already exists.</msg>
<status status="PASS" endtime="20170514 21:30:19.145" starttime="20170514 21:30:19.145"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>OperatingSystem.File Should Exist</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<assign>
<var>${exist}</var>
</assign>
<kw name="File Should Exist" library="OperatingSystem">
<doc>Fails unless the given ``path`` points to an existing file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
</arguments>
<msg timestamp="20170514 21:30:19.146" html="yes" level="INFO">File '&lt;a href="file:///home/fspcibld/logs/test_history.txt"&gt;/home/fspcibld/logs/test_history.txt&lt;/a&gt;' exists.</msg>
<status status="PASS" endtime="20170514 21:30:19.146" starttime="20170514 21:30:19.146"></status>
</kw>
<msg timestamp="20170514 21:30:19.146" level="INFO">${exist} = True</msg>
<status status="PASS" endtime="20170514 21:30:19.146" starttime="20170514 21:30:19.145"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${exist}' == '${False}'</arg>
<arg>Create File</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<status status="PASS" endtime="20170514 21:30:19.147" starttime="20170514 21:30:19.147"></status>
</kw>
<kw name="Rpvars" library="gen_robot_print">
<arguments>
<arg>TEST_HISTORY</arg>
</arguments>
<status status="PASS" endtime="20170514 21:30:19.148" starttime="20170514 21:30:19.147"></status>
</kw>
<kw name="Get Current Time Stamp" library="openbmc_ffdc_utils">
<doc>Get the current time stamp data</doc>
<assign>
<var>${cur_time}</var>
</assign>
<kw name="Get Current Date" library="DateTime">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20170514 21:30:19.149" level="INFO">${cur_time} = 2017-05-14 21:30:19:148513</msg>
<status status="PASS" endtime="20170514 21:30:19.149" starttime="20170514 21:30:19.148"></status>
</kw>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20170514 21:30:19.149" level="INFO">${cur_time} = 20170514213019148513</msg>
<status status="PASS" endtime="20170514 21:30:19.149" starttime="20170514 21:30:19.149"></status>
</kw>
<msg timestamp="20170514 21:30:19.150" level="INFO">${cur_time} = 20170514213019148513</msg>
<status status="PASS" endtime="20170514 21:30:19.150" starttime="20170514 21:30:19.148"></status>
</kw>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
<arg>${cur_time}:${SUITE_NAME}:${TEST_NAME}:${TEST_STATUS}${\n}</arg>
</arguments>
<msg timestamp="20170514 21:30:19.151" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/test_history.txt"&gt;/home/fspcibld/logs/test_history.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170514 21:30:19.151" starttime="20170514 21:30:19.150"></status>
</kw>
<status status="PASS" endtime="20170514 21:30:19.151" starttime="20170514 21:30:19.142"></status>
</kw>
<status status="PASS" endtime="20170514 21:30:19.151" starttime="20170514 21:30:01.476"></status>
</kw>
<status status="PASS" endtime="20170514 21:30:19.151" starttime="20170514 21:30:01.467"></status>
</kw>
<status status="PASS" endtime="20170514 21:30:19.151" starttime="20170514 21:30:01.466"></status>
</kw>
<doc>Update PNOR image and verify.</doc>
<tags>
<tag>Host_BIOS_Update</tag>
<tag>open-power</tag>
</tags>
<status status="FAIL" endtime="20170514 21:30:19.151" critical="yes" starttime="20170514 21:29:26.738">404 != 200</status>
</test>
<test id="s1-t2" name="Host BIOS Power On">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${PREV_TEST_STATUS}' == 'PASS'</arg>
<arg>Validate Power On</arg>
</arguments>
<status status="PASS" endtime="20170514 21:30:19.153" starttime="20170514 21:30:19.153"></status>
</kw>
<kw type="teardown" name="Test Bios Teardown">
<doc>Log FFDC if test suite fails and collect SOL log for</doc>
<kw name="Printn" library="gen_print">
<status status="PASS" endtime="20170514 21:30:19.155" starttime="20170514 21:30:19.154"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>FFDC On Test Case Fail</arg>
</arguments>
<kw name="FFDC On Test Case Fail" library="openbmc_ffdc">
<doc>Generic FFDC entry point. Place holder to hook in</doc>
<kw name="Is Host Quiesced" library="state_manager">
<doc>Check if host state is quiesced.</doc>
<assign>
<var>${status}</var>
</assign>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170514 21:30:19.169" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170514 21:30:19.169" starttime="20170514 21:30:19.168"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170514 21:30:19.170" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170514 21:30:19.170" starttime="20170514 21:30:19.169"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170514 21:30:19.171" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170514 21:30:19.171" starttime="20170514 21:30:19.170"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170514 21:30:19.171" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170514 21:30:19.171" starttime="20170514 21:30:19.171"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170514 21:30:19.658" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170514 21:30:19.658" starttime="20170514 21:30:19.172"></status>
</kw>
<msg timestamp="20170514 21:30:19.658" level="INFO">${status} = PASS</msg>
<msg timestamp="20170514 21:30:19.658" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170514 21:30:19.658" starttime="20170514 21:30:19.172"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170514 21:30:19.659" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170514 21:30:19.659" starttime="20170514 21:30:19.659"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170514 21:30:19.660" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170514 21:30:19.660" starttime="20170514 21:30:19.659"></status>
</kw>
<status status="PASS" endtime="20170514 21:30:19.660" starttime="20170514 21:30:19.168"></status>
</kw>
<status status="PASS" endtime="20170514 21:30:19.660" starttime="20170514 21:30:19.167"></status>
</kw>
<status status="PASS" endtime="20170514 21:30:19.660" starttime="20170514 21:30:19.166"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170514 21:30:19.661" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" endtime="20170514 21:30:19.661" starttime="20170514 21:30:19.660"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170514 21:30:19.661" starttime="20170514 21:30:19.661"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170514 21:30:19.726" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None </msg>
<msg timestamp="20170514 21:30:19.726" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170514 21:30:19.726" starttime="20170514 21:30:19.662"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170514 21:30:19.726" starttime="20170514 21:30:19.726"></status>
</kw>
<msg timestamp="20170514 21:30:19.727" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170514 21:30:19.727" starttime="20170514 21:30:19.165"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170514 21:30:19.727" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170514 21:30:19.727" starttime="20170514 21:30:19.727"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170514 21:30:19.728" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170514 21:30:19.728" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170514 21:30:19.728" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Off'}</msg>
<status status="PASS" endtime="20170514 21:30:19.728" starttime="20170514 21:30:19.728"></status>
</kw>
<msg timestamp="20170514 21:30:19.728" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Off</msg>
<status status="PASS" endtime="20170514 21:30:19.728" starttime="20170514 21:30:19.164"></status>
</kw>
<msg timestamp="20170514 21:30:19.729" level="INFO">${host_state} = Off</msg>
<status status="PASS" endtime="20170514 21:30:19.729" starttime="20170514 21:30:19.164"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal</arg>
<arg>${host_state}</arg>
<arg>Quiesced</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${host_state}</arg>
<arg>Quiesced</arg>
</arguments>
<msg timestamp="20170514 21:30:19.730" level="FAIL">Off != Quiesced</msg>
<status status="FAIL" endtime="20170514 21:30:19.730" starttime="20170514 21:30:19.730"></status>
</kw>
<msg timestamp="20170514 21:30:19.730" level="INFO">${status} = False</msg>
<status status="PASS" endtime="20170514 21:30:19.730" starttime="20170514 21:30:19.729"></status>
</kw>
<msg timestamp="20170514 21:30:19.730" level="INFO">${status} = False</msg>
<status status="PASS" endtime="20170514 21:30:19.730" starttime="20170514 21:30:19.164"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${TEST_STATUS}' == 'FAIL' or '${status}'=='True'</arg>
<arg>FFDC</arg>
</arguments>
<status status="PASS" endtime="20170514 21:30:19.731" starttime="20170514 21:30:19.731"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}'=='True'</arg>
<arg>Recover Quiesced Host</arg>
</arguments>
<status status="PASS" endtime="20170514 21:30:19.732" starttime="20170514 21:30:19.731"></status>
</kw>
<kw name="Log Test Case Status" library="openbmc_ffdc_methods">
<doc>Test case execution result history.</doc>
<kw name="Get Variable Value" library="BuiltIn">
<doc>Returns variable value or ``default`` if the variable does not exist.</doc>
<arguments>
<arg>${FFDC_DIR_PATH_STYLE}</arg>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${FFDC_DIR_PATH_STYLE}</var>
</assign>
<msg timestamp="20170514 21:30:19.733" level="INFO">${FFDC_DIR_PATH_STYLE} = 0</msg>
<status status="PASS" endtime="20170514 21:30:19.733" starttime="20170514 21:30:19.732"></status>
</kw>
<kw name="Get Variable Value" library="BuiltIn">
<doc>Returns variable value or ``default`` if the variable does not exist.</doc>
<arguments>
<arg>${FFDC_DIR_PATH}</arg>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${FFDC_DIR_PATH}</var>
</assign>
<msg timestamp="20170514 21:30:19.734" level="INFO">${FFDC_DIR_PATH} = 20170514213004768711_TestBiosUpdate/20170514213004768711_HostBIOSUpdate/</msg>
<status status="PASS" endtime="20170514 21:30:19.734" starttime="20170514 21:30:19.733"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${FFDC_DIR_PATH}' == '${EMPTY}'</arg>
<arg>Set FFDC Defaults</arg>
</arguments>
<status status="PASS" endtime="20170514 21:30:19.735" starttime="20170514 21:30:19.734"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${FFDC_DIR_PATH_STYLE}' == '${1}'</arg>
<arg>Run Keywords</arg>
<arg>Set Global Variable</arg>
<arg>${FFDC_LOG_PATH}</arg>
<arg>${FFDC_DIR_PATH}</arg>
<arg>AND</arg>
<arg>Set Global Variable</arg>
<arg>${TEST_HISTORY}</arg>
<arg>${FFDC_DIR_PATH}test_history.txt</arg>
</arguments>
<status status="PASS" endtime="20170514 21:30:19.736" starttime="20170514 21:30:19.735"></status>
</kw>
<kw name="Create Directory" library="OperatingSystem">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>${FFDC_LOG_PATH}</arg>
</arguments>
<msg timestamp="20170514 21:30:19.736" html="yes" level="INFO">Directory '&lt;a href="file:///home/fspcibld"&gt;/home/fspcibld&lt;/a&gt;' already exists.</msg>
<status status="PASS" endtime="20170514 21:30:19.736" starttime="20170514 21:30:19.736"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>OperatingSystem.File Should Exist</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<assign>
<var>${exist}</var>
</assign>
<kw name="File Should Exist" library="OperatingSystem">
<doc>Fails unless the given ``path`` points to an existing file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
</arguments>
<msg timestamp="20170514 21:30:19.737" html="yes" level="INFO">File '&lt;a href="file:///home/fspcibld/logs/test_history.txt"&gt;/home/fspcibld/logs/test_history.txt&lt;/a&gt;' exists.</msg>
<status status="PASS" endtime="20170514 21:30:19.737" starttime="20170514 21:30:19.737"></status>
</kw>
<msg timestamp="20170514 21:30:19.737" level="INFO">${exist} = True</msg>
<status status="PASS" endtime="20170514 21:30:19.737" starttime="20170514 21:30:19.737"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${exist}' == '${False}'</arg>
<arg>Create File</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<status status="PASS" endtime="20170514 21:30:19.738" starttime="20170514 21:30:19.738"></status>
</kw>
<kw name="Rpvars" library="gen_robot_print">
<arguments>
<arg>TEST_HISTORY</arg>
</arguments>
<status status="PASS" endtime="20170514 21:30:19.739" starttime="20170514 21:30:19.738"></status>
</kw>
<kw name="Get Current Time Stamp" library="openbmc_ffdc_utils">
<doc>Get the current time stamp data</doc>
<assign>
<var>${cur_time}</var>
</assign>
<kw name="Get Current Date" library="DateTime">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20170514 21:30:19.740" level="INFO">${cur_time} = 2017-05-14 21:30:19:740013</msg>
<status status="PASS" endtime="20170514 21:30:19.740" starttime="20170514 21:30:19.740"></status>
</kw>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20170514 21:30:19.741" level="INFO">${cur_time} = 20170514213019740013</msg>
<status status="PASS" endtime="20170514 21:30:19.741" starttime="20170514 21:30:19.740"></status>
</kw>
<msg timestamp="20170514 21:30:19.741" level="INFO">${cur_time} = 20170514213019740013</msg>
<status status="PASS" endtime="20170514 21:30:19.741" starttime="20170514 21:30:19.739"></status>
</kw>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
<arg>${cur_time}:${SUITE_NAME}:${TEST_NAME}:${TEST_STATUS}${\n}</arg>
</arguments>
<msg timestamp="20170514 21:30:19.742" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/test_history.txt"&gt;/home/fspcibld/logs/test_history.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170514 21:30:19.742" starttime="20170514 21:30:19.741"></status>
</kw>
<status status="PASS" endtime="20170514 21:30:19.742" starttime="20170514 21:30:19.732"></status>
</kw>
<status status="PASS" endtime="20170514 21:30:19.742" starttime="20170514 21:30:19.163"></status>
</kw>
<status status="PASS" endtime="20170514 21:30:19.742" starttime="20170514 21:30:19.155"></status>
</kw>
<status status="PASS" endtime="20170514 21:30:19.742" starttime="20170514 21:30:19.154"></status>
</kw>
<doc>Power On the system and wait for OS</doc>
<tags>
<tag>Host_BIOS_Power_On</tag>
<tag>open-power</tag>
</tags>
<status status="PASS" endtime="20170514 21:30:19.743" critical="yes" starttime="20170514 21:30:19.152"></status>
</test>
<doc>Update the PNOR image on the host for hostboot CI purposes.</doc>
<status status="FAIL" endtime="20170514 21:30:19.743" starttime="20170514 21:29:25.793"></status>
</suite>
<statistics>
<total>
<stat fail="1" pass="1">Critical Tests</stat>
<stat fail="1" pass="1">All Tests</stat>
</total>
<tag>
<stat fail="0" pass="1">Host_BIOS_Power_On</stat>
<stat fail="1" pass="0">Host_BIOS_Update</stat>
<stat fail="1" pass="1">open-power</stat>
</tag>
<suite>
<stat fail="1" id="s1" name="Test Bios Update" pass="1">Test Bios Update</stat>
</suite>
</statistics>
<errors>
</errors>
</robot>
