<?xml version="1.0" encoding="UTF-8"?>
<robot generated="20170509 20:16:41.018" generator="Robot 3.0.2 (Python 2.7.12 on linux2)">
<suite source="/home/fspcibld/openbmc-test-automation/extended/test_bios_update.robot" id="s1" name="Test Bios Update">
<test id="s1-t1" name="Host BIOS Update">
<kw name="Validate Parameters">
<doc>Validate parameter and file existence.</doc>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${PNOR_IMAGE_PATH}</arg>
<arg>msg=PNOR image path not set</arg>
</arguments>
<msg timestamp="20170509 20:16:41.915" level="INFO">Length is 31</msg>
<status status="PASS" endtime="20170509 20:16:41.915" starttime="20170509 20:16:41.915"></status>
</kw>
<kw name="File Should Exist" library="OperatingSystem">
<doc>Fails unless the given ``path`` points to an existing file.</doc>
<arguments>
<arg>${PNOR_IMAGE_PATH}</arg>
<arg>msg=${PNOR_IMAGE_PATH} File not found</arg>
</arguments>
<msg timestamp="20170509 20:16:41.916" html="yes" level="INFO">File '&lt;a href="file:///home/fspcibld/witherspoon.pnor"&gt;/home/fspcibld/witherspoon.pnor&lt;/a&gt;' exists.</msg>
<status status="PASS" endtime="20170509 20:16:41.916" starttime="20170509 20:16:41.915"></status>
</kw>
<status status="PASS" endtime="20170509 20:16:41.916" starttime="20170509 20:16:41.914"></status>
</kw>
<kw name="Prepare BMC For Update">
<doc>Prepare system for PNOR update.</doc>
<kw name="Run Key U" library="gen_robot_keyword">
<doc>Run keyword unconditionally (i.e. without regard to global test_mode</doc>
<arguments>
<arg>OBMC Boot Test \ REST Power Off</arg>
</arguments>
<kw name="OBMC Boot Test" library="obmc_boot_test_resource">
<arguments>
<arg>REST Power Off</arg>
</arguments>
<kw name="Obmc Boot Test Py" library="obmc_boot_test">
<doc>Do main program processing.</doc>
<arguments>
<arg>@{arguments}</arg>
</arguments>
<msg timestamp="20170509 20:16:41.923" level="INFO">${boot_stack} = REST Power Off</msg>
<kw name="Get BMC System Model" library="utils">
<doc>Get the BMC model from the device tree.</doc>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg timestamp="20170509 20:16:41.996" level="FAIL">Dictionary does not contain key 'host'.</msg>
<status status="FAIL" endtime="20170509 20:16:41.996" starttime="20170509 20:16:41.994"></status>
</kw>
<msg timestamp="20170509 20:16:41.996" level="INFO">${has_host} = False</msg>
<status status="PASS" endtime="20170509 20:16:41.996" starttime="20170509 20:16:41.994"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status status="PASS" endtime="20170509 20:16:41.997" starttime="20170509 20:16:41.997"></status>
</kw>
<status status="PASS" endtime="20170509 20:16:41.997" starttime="20170509 20:16:41.996"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<status status="PASS" endtime="20170509 20:16:41.999" starttime="20170509 20:16:41.998"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg timestamp="20170509 20:16:42.000" level="FAIL">Dictionary does not contain key 'port'.</msg>
<status status="FAIL" endtime="20170509 20:16:42.000" starttime="20170509 20:16:41.999"></status>
</kw>
<msg timestamp="20170509 20:16:42.000" level="INFO">${has_port} = False</msg>
<status status="PASS" endtime="20170509 20:16:42.000" starttime="20170509 20:16:41.999"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status status="PASS" endtime="20170509 20:16:42.002" starttime="20170509 20:16:42.002"></status>
</kw>
<status status="PASS" endtime="20170509 20:16:42.002" starttime="20170509 20:16:42.001"></status>
</kw>
<status status="PASS" endtime="20170509 20:16:42.002" starttime="20170509 20:16:42.001"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg timestamp="20170509 20:16:42.003" level="INFO">Logging into '9.3.86.161:22' as 'root'.</msg>
<msg timestamp="20170509 20:16:44.244" level="INFO">Read output: root@witherspoon:~#</msg>
<status status="PASS" endtime="20170509 20:16:44.244" starttime="20170509 20:16:42.003"></status>
</kw>
<status status="PASS" endtime="20170509 20:16:44.244" starttime="20170509 20:16:41.992"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>cat ${devicetree_base} | cut -d " " -f 1</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${bmc_model}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170509 20:16:44.245" level="INFO">Executing command 'cat /sys/firmware/devicetree/base/model | cut -d " " -f 1'.</msg>
<msg timestamp="20170509 20:16:44.467" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170509 20:16:44.467" level="INFO">${bmc_model} = Witherspoon</msg>
<msg timestamp="20170509 20:16:44.467" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170509 20:16:44.467" starttime="20170509 20:16:44.245"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20170509 20:16:44.468" level="INFO">Length is 0</msg>
<status status="PASS" endtime="20170509 20:16:44.468" starttime="20170509 20:16:44.468"></status>
</kw>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${bmc_model}</arg>
</arguments>
<msg timestamp="20170509 20:16:44.469" level="INFO">Length is 11</msg>
<status status="PASS" endtime="20170509 20:16:44.469" starttime="20170509 20:16:44.468"></status>
</kw>
<status status="PASS" endtime="20170509 20:16:44.469" starttime="20170509 20:16:41.989"></status>
</kw>
<msg timestamp="20170509 20:16:44.469" level="INFO">${openbmc_model} = Witherspoon</msg>
<msg timestamp="20170509 20:16:44.745" level="INFO">${plug_in_packages_list} = []</msg>
<kw name="Set BMC Power Policy" library="utils">
<doc>Set the given BMC power policy.</doc>
<arguments>
<arg>RESTORE_LAST_STATE</arg>
</arguments>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=${policy}</arg>
</arguments>
<assign>
<var>${valueDict}</var>
</assign>
<msg timestamp="20170509 20:16:44.767" level="INFO">${valueDict} = {u'data': 'RESTORE_LAST_STATE'}</msg>
<status status="PASS" endtime="20170509 20:16:44.767" starttime="20170509 20:16:44.765"></status>
</kw>
<kw name="Write Attribute" library="rest_client">
<arguments>
<arg>${HOST_SETTING}</arg>
<arg>power_policy</arg>
<arg>data=${valueDict}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170509 20:16:44.768" level="INFO">${base_uri} = /org/openbmc/settings/host0</msg>
<status status="PASS" endtime="20170509 20:16:44.768" starttime="20170509 20:16:44.768"></status>
</kw>
<kw name="OpenBMC Put Request" library="rest_client">
<arguments>
<arg>${base_uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170509 20:16:44.772" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170509 20:16:44.772" starttime="20170509 20:16:44.771"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170509 20:16:44.773" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170509 20:16:44.773" starttime="20170509 20:16:44.773"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170509 20:16:44.774" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170509 20:16:44.774" starttime="20170509 20:16:44.773"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170509 20:16:44.774" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170509 20:16:44.774" starttime="20170509 20:16:44.774"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170509 20:16:45.163" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170509 20:16:45.163" starttime="20170509 20:16:44.775"></status>
</kw>
<msg timestamp="20170509 20:16:45.164" level="INFO">${status} = PASS</msg>
<msg timestamp="20170509 20:16:45.164" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170509 20:16:45.164" starttime="20170509 20:16:44.775"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170509 20:16:45.164" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170509 20:16:45.164" starttime="20170509 20:16:45.164"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170509 20:16:45.165" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170509 20:16:45.165" starttime="20170509 20:16:45.165"></status>
</kw>
<status status="PASS" endtime="20170509 20:16:45.165" starttime="20170509 20:16:44.771"></status>
</kw>
<status status="PASS" endtime="20170509 20:16:45.165" starttime="20170509 20:16:44.770"></status>
</kw>
<status status="PASS" endtime="20170509 20:16:45.166" starttime="20170509 20:16:44.769"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170509 20:16:45.168" level="INFO">${base_uri} = /org/openbmc/settings/host0/attr/power_policy</msg>
<status status="PASS" endtime="20170509 20:16:45.168" starttime="20170509 20:16:45.167"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170509 20:16:45.168" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170509 20:16:45.168" starttime="20170509 20:16:45.168"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" endtime="20170509 20:16:45.169" starttime="20170509 20:16:45.169"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Put</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170509 20:16:45.171" level="INFO">${msg} = URI:https://9.3.86.161/org/openbmc/settings/host0/attr/power_policy, method:Put, args:{u'data': {u'data': 'RESTORE_LAST_STATE'}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20170509 20:16:45.171" starttime="20170509 20:16:45.171"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170509 20:16:45.172" level="INFO">URI:https://9.3.86.161/org/openbmc/settings/host0/attr/power_policy, method:Put, args:{u'data': {u'data': 'RESTORE_LAST_STATE'}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20170509 20:16:45.172" starttime="20170509 20:16:45.172"></status>
</kw>
<status status="PASS" endtime="20170509 20:16:45.173" starttime="20170509 20:16:45.172"></status>
</kw>
<status status="PASS" endtime="20170509 20:16:45.173" starttime="20170509 20:16:45.169"></status>
</kw>
<kw name="Put Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a PUT request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170509 20:16:45.423" level="INFO">Put Request using : alias=openbmc, uri=/org/openbmc/settings/host0/attr/power_policy, data={"data": "RESTORE_LAST_STATE"},                     headers={u'Content-Type': u'application/json'}, allow_redirects=True </msg>
<msg timestamp="20170509 20:16:45.423" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170509 20:16:45.423" starttime="20170509 20:16:45.173"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170509 20:16:45.424" level="INFO">${msg} = Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170509 20:16:45.424" starttime="20170509 20:16:45.424"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170509 20:16:45.425" level="INFO">Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170509 20:16:45.425" starttime="20170509 20:16:45.425"></status>
</kw>
<status status="PASS" endtime="20170509 20:16:45.425" starttime="20170509 20:16:45.425"></status>
</kw>
<status status="PASS" endtime="20170509 20:16:45.426" starttime="20170509 20:16:45.423"></status>
</kw>
<msg timestamp="20170509 20:16:45.426" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170509 20:16:45.426" starttime="20170509 20:16:44.769"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170509 20:16:45.427" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170509 20:16:45.427" starttime="20170509 20:16:45.426"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${json}</var>
</assign>
<msg timestamp="20170509 20:16:45.427" level="INFO">To JSON using : content={
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170509 20:16:45.427" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170509 20:16:45.428" level="INFO">${json} = {u'status': u'ok', u'message': u'200 OK', u'data': None}</msg>
<status status="PASS" endtime="20170509 20:16:45.428" starttime="20170509 20:16:45.427"></status>
</kw>
<status status="PASS" endtime="20170509 20:16:45.428" starttime="20170509 20:16:44.767"></status>
</kw>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_SETTING}</arg>
<arg>power_policy</arg>
</arguments>
<assign>
<var>${currentPolicy}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170509 20:16:45.431" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170509 20:16:45.432" starttime="20170509 20:16:45.431"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170509 20:16:45.432" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170509 20:16:45.432" starttime="20170509 20:16:45.432"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170509 20:16:45.433" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170509 20:16:45.433" starttime="20170509 20:16:45.432"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170509 20:16:45.433" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170509 20:16:45.433" starttime="20170509 20:16:45.433"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170509 20:16:45.797" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170509 20:16:45.798" starttime="20170509 20:16:45.434"></status>
</kw>
<msg timestamp="20170509 20:16:45.798" level="INFO">${status} = PASS</msg>
<msg timestamp="20170509 20:16:45.798" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170509 20:16:45.798" starttime="20170509 20:16:45.434"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170509 20:16:45.799" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170509 20:16:45.799" starttime="20170509 20:16:45.798"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170509 20:16:45.799" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170509 20:16:45.799" starttime="20170509 20:16:45.799"></status>
</kw>
<status status="PASS" endtime="20170509 20:16:45.800" starttime="20170509 20:16:45.430"></status>
</kw>
<status status="PASS" endtime="20170509 20:16:45.800" starttime="20170509 20:16:45.430"></status>
</kw>
<status status="PASS" endtime="20170509 20:16:45.800" starttime="20170509 20:16:45.429"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170509 20:16:45.800" level="INFO">${base_uri} = /org/openbmc/settings/host0/attr/power_policy</msg>
<status status="PASS" endtime="20170509 20:16:45.800" starttime="20170509 20:16:45.800"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170509 20:16:45.801" starttime="20170509 20:16:45.801"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170509 20:16:45.930" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/settings/host0/attr/power_policy, headers=None </msg>
<msg timestamp="20170509 20:16:45.930" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170509 20:16:45.930" starttime="20170509 20:16:45.801"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170509 20:16:45.931" starttime="20170509 20:16:45.931"></status>
</kw>
<msg timestamp="20170509 20:16:45.931" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170509 20:16:45.931" starttime="20170509 20:16:45.428"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170509 20:16:45.932" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170509 20:16:45.932" starttime="20170509 20:16:45.931"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170509 20:16:45.932" level="INFO">To JSON using : content={
  "data": "RESTORE_LAST_STATE", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170509 20:16:45.932" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170509 20:16:45.933" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'RESTORE_LAST_STATE'}</msg>
<status status="PASS" endtime="20170509 20:16:45.933" starttime="20170509 20:16:45.932"></status>
</kw>
<msg timestamp="20170509 20:16:45.933" level="INFO">${currentPolicy} = RESTORE_LAST_STATE</msg>
<status status="PASS" endtime="20170509 20:16:45.933" starttime="20170509 20:16:45.428"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${currentPolicy}</arg>
<arg>${policy}</arg>
</arguments>
<msg timestamp="20170509 20:16:45.933" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'str'&gt;</msg>
<status status="PASS" endtime="20170509 20:16:45.933" starttime="20170509 20:16:45.933"></status>
</kw>
<status status="PASS" endtime="20170509 20:16:45.934" starttime="20170509 20:16:44.761"></status>
</kw>
<msg timestamp="20170509 20:16:45.967" level="INFO">Log level changed from NONE to INFO.</msg>
<msg timestamp="20170509 20:16:45.993" level="INFO">Log level changed from NONE to INFO.</msg>
<msg timestamp="20170509 20:16:45.998" level="INFO">${TEST_MESSAGE} = </msg>
<msg timestamp="20170509 20:16:45.998" level="INFO">${FFDC_LOG_PATH} = ./</msg>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg timestamp="20170509 20:16:46.000" level="FAIL">Dictionary does not contain key 'host'.</msg>
<status status="FAIL" endtime="20170509 20:16:46.001" starttime="20170509 20:16:46.000"></status>
</kw>
<msg timestamp="20170509 20:16:46.001" level="INFO">${has_host} = False</msg>
<status status="PASS" endtime="20170509 20:16:46.001" starttime="20170509 20:16:46.000"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status status="PASS" endtime="20170509 20:16:46.002" starttime="20170509 20:16:46.001"></status>
</kw>
<status status="PASS" endtime="20170509 20:16:46.002" starttime="20170509 20:16:46.001"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<status status="PASS" endtime="20170509 20:16:46.002" starttime="20170509 20:16:46.002"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg timestamp="20170509 20:16:46.004" level="FAIL">Dictionary does not contain key 'port'.</msg>
<status status="FAIL" endtime="20170509 20:16:46.004" starttime="20170509 20:16:46.003"></status>
</kw>
<msg timestamp="20170509 20:16:46.004" level="INFO">${has_port} = False</msg>
<status status="PASS" endtime="20170509 20:16:46.004" starttime="20170509 20:16:46.003"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status status="PASS" endtime="20170509 20:16:46.006" starttime="20170509 20:16:46.005"></status>
</kw>
<status status="PASS" endtime="20170509 20:16:46.006" starttime="20170509 20:16:46.005"></status>
</kw>
<status status="PASS" endtime="20170509 20:16:46.006" starttime="20170509 20:16:46.004"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg timestamp="20170509 20:16:46.006" level="INFO">Logging into '9.3.86.161:22' as 'root'.</msg>
<msg timestamp="20170509 20:16:47.984" level="INFO">Read output: root@witherspoon:~#</msg>
<status status="PASS" endtime="20170509 20:16:47.984" starttime="20170509 20:16:46.006"></status>
</kw>
<status status="PASS" endtime="20170509 20:16:47.984" starttime="20170509 20:16:45.999"></status>
</kw>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170509 20:16:48.016" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170509 20:16:48.017" starttime="20170509 20:16:48.015"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170509 20:16:48.018" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170509 20:16:48.018" starttime="20170509 20:16:48.017"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170509 20:16:48.018" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170509 20:16:48.018" starttime="20170509 20:16:48.018"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170509 20:16:48.019" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170509 20:16:48.019" starttime="20170509 20:16:48.019"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170509 20:16:48.370" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170509 20:16:48.370" starttime="20170509 20:16:48.020"></status>
</kw>
<msg timestamp="20170509 20:16:48.370" level="INFO">${status} = PASS</msg>
<msg timestamp="20170509 20:16:48.370" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170509 20:16:48.370" starttime="20170509 20:16:48.019"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170509 20:16:48.371" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170509 20:16:48.371" starttime="20170509 20:16:48.370"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170509 20:16:48.372" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170509 20:16:48.372" starttime="20170509 20:16:48.371"></status>
</kw>
<status status="PASS" endtime="20170509 20:16:48.372" starttime="20170509 20:16:48.015"></status>
</kw>
<status status="PASS" endtime="20170509 20:16:48.372" starttime="20170509 20:16:48.014"></status>
</kw>
<status status="PASS" endtime="20170509 20:16:48.372" starttime="20170509 20:16:48.013"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170509 20:16:48.373" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" endtime="20170509 20:16:48.373" starttime="20170509 20:16:48.372"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170509 20:16:48.373" starttime="20170509 20:16:48.373"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170509 20:16:48.479" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None </msg>
<msg timestamp="20170509 20:16:48.480" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170509 20:16:48.480" starttime="20170509 20:16:48.374"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170509 20:16:48.480" starttime="20170509 20:16:48.480"></status>
</kw>
<msg timestamp="20170509 20:16:48.481" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170509 20:16:48.481" starttime="20170509 20:16:48.012"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170509 20:16:48.481" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170509 20:16:48.481" starttime="20170509 20:16:48.481"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170509 20:16:48.482" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170509 20:16:48.482" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170509 20:16:48.482" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off'}</msg>
<status status="PASS" endtime="20170509 20:16:48.482" starttime="20170509 20:16:48.482"></status>
</kw>
<msg timestamp="20170509 20:16:48.482" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status status="PASS" endtime="20170509 20:16:48.482" starttime="20170509 20:16:48.012"></status>
</kw>
<status status="PASS" endtime="20170509 20:16:48.483" starttime="20170509 20:16:48.010"></status>
</kw>
<kw name="Get BMC State" library="state_manager">
<doc>Return the state of the BMC.</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${BMC_STATE_URI}</arg>
<arg>CurrentBMCState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170509 20:16:48.487" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170509 20:16:48.487" starttime="20170509 20:16:48.486"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170509 20:16:48.488" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170509 20:16:48.488" starttime="20170509 20:16:48.487"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170509 20:16:48.488" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170509 20:16:48.488" starttime="20170509 20:16:48.488"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170509 20:16:48.489" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170509 20:16:48.489" starttime="20170509 20:16:48.488"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170509 20:16:48.845" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170509 20:16:48.845" starttime="20170509 20:16:48.490"></status>
</kw>
<msg timestamp="20170509 20:16:48.845" level="INFO">${status} = PASS</msg>
<msg timestamp="20170509 20:16:48.845" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170509 20:16:48.845" starttime="20170509 20:16:48.489"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170509 20:16:48.846" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170509 20:16:48.846" starttime="20170509 20:16:48.846"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170509 20:16:48.847" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170509 20:16:48.847" starttime="20170509 20:16:48.846"></status>
</kw>
<status status="PASS" endtime="20170509 20:16:48.847" starttime="20170509 20:16:48.486"></status>
</kw>
<status status="PASS" endtime="20170509 20:16:48.847" starttime="20170509 20:16:48.485"></status>
</kw>
<status status="PASS" endtime="20170509 20:16:48.847" starttime="20170509 20:16:48.485"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170509 20:16:48.848" level="INFO">${base_uri} = /xyz/openbmc_project/state/bmc0//attr/CurrentBMCState</msg>
<status status="PASS" endtime="20170509 20:16:48.848" starttime="20170509 20:16:48.848"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170509 20:16:48.849" starttime="20170509 20:16:48.848"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170509 20:16:48.966" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/bmc0//attr/CurrentBMCState, headers=None </msg>
<msg timestamp="20170509 20:16:48.966" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170509 20:16:48.966" starttime="20170509 20:16:48.849"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170509 20:16:48.967" starttime="20170509 20:16:48.966"></status>
</kw>
<msg timestamp="20170509 20:16:48.967" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170509 20:16:48.967" starttime="20170509 20:16:48.484"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170509 20:16:48.967" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170509 20:16:48.968" starttime="20170509 20:16:48.967"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170509 20:16:48.968" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.BMC.BMCState.Ready", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170509 20:16:48.968" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170509 20:16:48.968" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.BMC.BMCState.Ready'}</msg>
<status status="PASS" endtime="20170509 20:16:48.968" starttime="20170509 20:16:48.968"></status>
</kw>
<msg timestamp="20170509 20:16:48.969" level="INFO">${state} = xyz.openbmc_project.State.BMC.BMCState.Ready</msg>
<status status="PASS" endtime="20170509 20:16:48.969" starttime="20170509 20:16:48.484"></status>
</kw>
<status status="PASS" endtime="20170509 20:16:48.969" starttime="20170509 20:16:48.483"></status>
</kw>
<kw name="Get Boot Progress" library="utils">
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170509 20:16:48.973" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170509 20:16:48.973" starttime="20170509 20:16:48.972"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170509 20:16:48.973" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170509 20:16:48.973" starttime="20170509 20:16:48.973"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170509 20:16:48.974" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170509 20:16:48.974" starttime="20170509 20:16:48.974"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170509 20:16:48.975" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170509 20:16:48.975" starttime="20170509 20:16:48.974"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170509 20:16:49.338" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170509 20:16:49.338" starttime="20170509 20:16:48.975"></status>
</kw>
<msg timestamp="20170509 20:16:49.338" level="INFO">${status} = PASS</msg>
<msg timestamp="20170509 20:16:49.338" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170509 20:16:49.338" starttime="20170509 20:16:48.975"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170509 20:16:49.339" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170509 20:16:49.339" starttime="20170509 20:16:49.338"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170509 20:16:49.340" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170509 20:16:49.340" starttime="20170509 20:16:49.339"></status>
</kw>
<status status="PASS" endtime="20170509 20:16:49.340" starttime="20170509 20:16:48.972"></status>
</kw>
<status status="PASS" endtime="20170509 20:16:49.340" starttime="20170509 20:16:48.971"></status>
</kw>
<status status="PASS" endtime="20170509 20:16:49.340" starttime="20170509 20:16:48.971"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170509 20:16:49.340" level="INFO">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status status="PASS" endtime="20170509 20:16:49.341" starttime="20170509 20:16:49.340"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170509 20:16:49.341" starttime="20170509 20:16:49.341"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170509 20:16:49.452" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None </msg>
<msg timestamp="20170509 20:16:49.452" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170509 20:16:49.452" starttime="20170509 20:16:49.341"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170509 20:16:49.452" starttime="20170509 20:16:49.452"></status>
</kw>
<msg timestamp="20170509 20:16:49.453" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170509 20:16:49.453" starttime="20170509 20:16:48.970"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170509 20:16:49.453" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170509 20:16:49.453" starttime="20170509 20:16:49.453"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170509 20:16:49.454" level="INFO">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170509 20:16:49.454" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170509 20:16:49.454" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'Off'}</msg>
<status status="PASS" endtime="20170509 20:16:49.454" starttime="20170509 20:16:49.454"></status>
</kw>
<msg timestamp="20170509 20:16:49.454" level="INFO">${state} = Off</msg>
<status status="PASS" endtime="20170509 20:16:49.454" starttime="20170509 20:16:48.970"></status>
</kw>
<status status="PASS" endtime="20170509 20:16:49.455" starttime="20170509 20:16:48.969"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<arguments>
<arg>quiet=${1}</arg>
</arguments>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170509 20:16:49.458" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170509 20:16:49.459" starttime="20170509 20:16:49.458"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170509 20:16:49.459" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170509 20:16:49.459" starttime="20170509 20:16:49.459"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170509 20:16:49.460" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170509 20:16:49.460" starttime="20170509 20:16:49.459"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170509 20:16:49.460" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170509 20:16:49.460" starttime="20170509 20:16:49.460"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170509 20:16:49.824" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170509 20:16:49.824" starttime="20170509 20:16:49.461"></status>
</kw>
<msg timestamp="20170509 20:16:49.824" level="INFO">${status} = PASS</msg>
<msg timestamp="20170509 20:16:49.824" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170509 20:16:49.824" starttime="20170509 20:16:49.461"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170509 20:16:49.825" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170509 20:16:49.825" starttime="20170509 20:16:49.825"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170509 20:16:49.826" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170509 20:16:49.826" starttime="20170509 20:16:49.825"></status>
</kw>
<status status="PASS" endtime="20170509 20:16:49.826" starttime="20170509 20:16:49.457"></status>
</kw>
<status status="PASS" endtime="20170509 20:16:49.826" starttime="20170509 20:16:49.457"></status>
</kw>
<status status="PASS" endtime="20170509 20:16:49.826" starttime="20170509 20:16:49.456"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170509 20:16:49.827" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" endtime="20170509 20:16:49.827" starttime="20170509 20:16:49.826"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170509 20:16:49.827" starttime="20170509 20:16:49.827"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170509 20:16:49.936" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None </msg>
<msg timestamp="20170509 20:16:49.936" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170509 20:16:49.936" starttime="20170509 20:16:49.828"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170509 20:16:49.937" starttime="20170509 20:16:49.937"></status>
</kw>
<msg timestamp="20170509 20:16:49.937" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170509 20:16:49.937" starttime="20170509 20:16:49.456"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170509 20:16:49.938" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170509 20:16:49.938" starttime="20170509 20:16:49.938"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170509 20:16:49.939" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170509 20:16:49.939" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170509 20:16:49.939" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Off'}</msg>
<status status="PASS" endtime="20170509 20:16:49.939" starttime="20170509 20:16:49.938"></status>
</kw>
<msg timestamp="20170509 20:16:49.939" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Off</msg>
<status status="PASS" endtime="20170509 20:16:49.939" starttime="20170509 20:16:49.455"></status>
</kw>
<status status="PASS" endtime="20170509 20:16:49.939" starttime="20170509 20:16:49.455"></status>
</kw>
<status status="PASS" endtime="20170509 20:16:49.998" starttime="20170509 20:16:41.923"></status>
</kw>
<kw type="teardown" name="Obmc Boot Test Teardown" library="obmc_boot_test">
<doc>Clean up after the Main keyword.</doc>
<msg timestamp="20170509 20:16:50.002" level="INFO">Log level changed from NONE to INFO.</msg>
<status status="PASS" endtime="20170509 20:16:50.004" starttime="20170509 20:16:49.998"></status>
</kw>
<status status="PASS" endtime="20170509 20:16:50.004" starttime="20170509 20:16:41.922"></status>
</kw>
<status status="PASS" endtime="20170509 20:16:50.004" starttime="20170509 20:16:41.916"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>Clear BMC Record Log</arg>
</arguments>
<kw name="Clear BMC Record Log" library="utils">
<doc>Clears all the event logs on the BMC. This would be</doc>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg timestamp="20170509 20:16:50.014" level="INFO">@{arglist} = [ ]</msg>
<status status="PASS" endtime="20170509 20:16:50.014" starttime="20170509 20:16:50.013"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg timestamp="20170509 20:16:50.014" level="INFO">${args} = {u'data': []}</msg>
<status status="PASS" endtime="20170509 20:16:50.014" starttime="20170509 20:16:50.014"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}records/events/</arg>
<arg>clear</arg>
<arg>data=${args}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170509 20:16:50.016" level="INFO">${base_uri} = /org/openbmc/records/events/</msg>
<status status="PASS" endtime="20170509 20:16:50.016" starttime="20170509 20:16:50.015"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170509 20:16:50.019" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170509 20:16:50.019" starttime="20170509 20:16:50.018"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170509 20:16:50.020" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170509 20:16:50.020" starttime="20170509 20:16:50.019"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170509 20:16:50.020" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170509 20:16:50.020" starttime="20170509 20:16:50.020"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170509 20:16:50.021" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170509 20:16:50.021" starttime="20170509 20:16:50.021"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170509 20:16:50.382" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170509 20:16:50.382" starttime="20170509 20:16:50.022"></status>
</kw>
<msg timestamp="20170509 20:16:50.382" level="INFO">${status} = PASS</msg>
<msg timestamp="20170509 20:16:50.382" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170509 20:16:50.382" starttime="20170509 20:16:50.021"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170509 20:16:50.383" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170509 20:16:50.383" starttime="20170509 20:16:50.382"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170509 20:16:50.383" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170509 20:16:50.383" starttime="20170509 20:16:50.383"></status>
</kw>
<status status="PASS" endtime="20170509 20:16:50.384" starttime="20170509 20:16:50.018"></status>
</kw>
<status status="PASS" endtime="20170509 20:16:50.384" starttime="20170509 20:16:50.017"></status>
</kw>
<status status="PASS" endtime="20170509 20:16:50.384" starttime="20170509 20:16:50.017"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170509 20:16:50.385" level="INFO">${base_uri} = /org/openbmc/records/events//action/clear</msg>
<status status="PASS" endtime="20170509 20:16:50.385" starttime="20170509 20:16:50.384"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170509 20:16:50.386" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170509 20:16:50.386" starttime="20170509 20:16:50.385"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" endtime="20170509 20:16:50.386" starttime="20170509 20:16:50.386"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170509 20:16:50.387" starttime="20170509 20:16:50.387"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170509 20:16:50.649" level="INFO">Post Request using : alias=openbmc, uri=/org/openbmc/records/events//action/clear, data={"data": []}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20170509 20:16:50.649" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170509 20:16:50.649" starttime="20170509 20:16:50.388"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170509 20:16:50.650" starttime="20170509 20:16:50.649"></status>
</kw>
<msg timestamp="20170509 20:16:50.650" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170509 20:16:50.650" starttime="20170509 20:16:50.016"></status>
</kw>
<msg timestamp="20170509 20:16:50.650" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170509 20:16:50.650" starttime="20170509 20:16:50.015"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170509 20:16:50.651" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170509 20:16:50.651" starttime="20170509 20:16:50.651"></status>
</kw>
<status status="PASS" endtime="20170509 20:16:50.651" starttime="20170509 20:16:50.013"></status>
</kw>
<status status="PASS" endtime="20170509 20:16:50.651" starttime="20170509 20:16:50.004"></status>
</kw>
<status status="PASS" endtime="20170509 20:16:50.651" starttime="20170509 20:16:41.916"></status>
</kw>
<kw name="Update PNOR Image">
<doc>Copy the PNOR image to the BMC /tmp dir and flash it.</doc>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>Copy PNOR to BMC</arg>
</arguments>
<kw name="Copy PNOR to BMC" library="utils">
<kw name="Import Library" library="BuiltIn">
<doc>Imports a library with the given name and optional arguments.</doc>
<arguments>
<arg>SCPLibrary</arg>
<arg>WITH NAME</arg>
<arg>scp</arg>
</arguments>
<status status="PASS" endtime="20170509 20:16:50.670" starttime="20170509 20:16:50.661"></status>
</kw>
<kw name="Open Connection for SCP" library="connection_client">
<kw name="Import Library" library="BuiltIn">
<doc>Imports a library with the given name and optional arguments.</doc>
<arguments>
<arg>SCPLibrary</arg>
<arg>WITH NAME</arg>
<arg>scp</arg>
</arguments>
<status status="PASS" endtime="20170509 20:16:50.671" starttime="20170509 20:16:50.670"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' == '${EMPTY}'</arg>
<arg>scp.Open connection</arg>
<arg>${OPENBMC_HOST}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>scp.Open connection</arg>
<arg>${OPENBMC_HOST}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
</arguments>
<kw name="Open Connection" library="scp">
<doc>Opens a new SCP connection to the given host.</doc>
<arguments>
<arg>${OPENBMC_HOST}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
</arguments>
<status status="PASS" endtime="20170509 20:16:51.524" starttime="20170509 20:16:50.673"></status>
</kw>
<status status="PASS" endtime="20170509 20:16:51.524" starttime="20170509 20:16:50.672"></status>
</kw>
<status status="PASS" endtime="20170509 20:16:51.524" starttime="20170509 20:16:50.670"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Copying ${PNOR_IMAGE_PATH} to /tmp</arg>
</arguments>
<msg timestamp="20170509 20:16:51.525" level="INFO">Copying /home/fspcibld/witherspoon.pnor to /tmp</msg>
<status status="PASS" endtime="20170509 20:16:51.525" starttime="20170509 20:16:51.525"></status>
</kw>
<kw name="Put File" library="scp">
<doc>Uploads a file to the remote machine from the local machine.</doc>
<arguments>
<arg>${PNOR_IMAGE_PATH}</arg>
<arg>/tmp</arg>
</arguments>
<status status="PASS" endtime="20170509 20:17:21.996" starttime="20170509 20:16:51.525"></status>
</kw>
<status status="PASS" endtime="20170509 20:17:21.996" starttime="20170509 20:16:50.660"></status>
</kw>
<status status="PASS" endtime="20170509 20:17:21.996" starttime="20170509 20:16:50.652"></status>
</kw>
<kw name="Split Path" library="OperatingSystem">
<doc>Splits the given path from the last path separator (``/`` or ``\``).</doc>
<arguments>
<arg>${PNOR_IMAGE_PATH}</arg>
</arguments>
<assign>
<var>${pnor_path}</var>
<var>${pnor_basename}</var>
</assign>
<msg timestamp="20170509 20:17:21.997" level="INFO">${pnor_path} = /home/fspcibld</msg>
<msg timestamp="20170509 20:17:21.997" level="INFO">${pnor_basename} = witherspoon.pnor</msg>
<status status="PASS" endtime="20170509 20:17:21.997" starttime="20170509 20:17:21.997"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>Flash PNOR \ /tmp/${pnor_basename}</arg>
</arguments>
<kw name="Flash PNOR" library="utils">
<doc>Calls flash bios update method to flash PNOR image</doc>
<arguments>
<arg>/tmp/witherspoon.pnor</arg>
</arguments>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${pnor_image}</arg>
</arguments>
<assign>
<var>@{arglist}</var>
</assign>
<msg timestamp="20170509 20:17:22.008" level="INFO">@{arglist} = [ /tmp/witherspoon.pnor ]</msg>
<status status="PASS" endtime="20170509 20:17:22.008" starttime="20170509 20:17:22.008"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg timestamp="20170509 20:17:22.009" level="INFO">${args} = {u'data': [u'/tmp/witherspoon.pnor']}</msg>
<status status="PASS" endtime="20170509 20:17:22.009" starttime="20170509 20:17:22.009"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}control/flash/bios/</arg>
<arg>update</arg>
<arg>data=${args}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170509 20:17:22.010" level="INFO">${base_uri} = /org/openbmc/control/flash/bios/</msg>
<status status="PASS" endtime="20170509 20:17:22.010" starttime="20170509 20:17:22.010"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170509 20:17:22.013" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170509 20:17:22.014" starttime="20170509 20:17:22.013"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170509 20:17:22.014" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170509 20:17:22.014" starttime="20170509 20:17:22.014"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170509 20:17:22.015" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170509 20:17:22.015" starttime="20170509 20:17:22.014"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170509 20:17:22.016" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170509 20:17:22.016" starttime="20170509 20:17:22.015"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170509 20:17:22.207" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170509 20:17:22.207" starttime="20170509 20:17:22.016"></status>
</kw>
<msg timestamp="20170509 20:17:22.207" level="INFO">${status} = PASS</msg>
<msg timestamp="20170509 20:17:22.207" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170509 20:17:22.208" starttime="20170509 20:17:22.016"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170509 20:17:22.208" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170509 20:17:22.208" starttime="20170509 20:17:22.208"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170509 20:17:22.209" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170509 20:17:22.209" starttime="20170509 20:17:22.209"></status>
</kw>
<status status="PASS" endtime="20170509 20:17:22.209" starttime="20170509 20:17:22.012"></status>
</kw>
<status status="PASS" endtime="20170509 20:17:22.209" starttime="20170509 20:17:22.012"></status>
</kw>
<status status="PASS" endtime="20170509 20:17:22.209" starttime="20170509 20:17:22.011"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170509 20:17:22.210" level="INFO">${base_uri} = /org/openbmc/control/flash/bios//action/update</msg>
<status status="PASS" endtime="20170509 20:17:22.210" starttime="20170509 20:17:22.210"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170509 20:17:22.211" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170509 20:17:22.211" starttime="20170509 20:17:22.210"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" endtime="20170509 20:17:22.211" starttime="20170509 20:17:22.211"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170509 20:17:22.212" starttime="20170509 20:17:22.211"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170509 20:17:22.258" level="INFO">Post Request using : alias=openbmc, uri=/org/openbmc/control/flash/bios//action/update, data={"data": ["/tmp/witherspoon.pnor"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20170509 20:17:22.258" level="INFO">${ret} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20170509 20:17:22.258" starttime="20170509 20:17:22.212"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170509 20:17:22.259" starttime="20170509 20:17:22.259"></status>
</kw>
<msg timestamp="20170509 20:17:22.259" level="INFO">${resp} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20170509 20:17:22.259" starttime="20170509 20:17:22.010"></status>
</kw>
<msg timestamp="20170509 20:17:22.259" level="INFO">${resp} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20170509 20:17:22.259" starttime="20170509 20:17:22.009"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170509 20:17:22.260" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20170509 20:17:22.260" level="FAIL">404 != 200</msg>
<status status="FAIL" endtime="20170509 20:17:22.260" starttime="20170509 20:17:22.260"></status>
</kw>
<status status="FAIL" endtime="20170509 20:17:22.260" starttime="20170509 20:17:22.007"></status>
</kw>
<msg timestamp="20170509 20:17:22.261" level="FAIL">404 != 200</msg>
<status status="FAIL" endtime="20170509 20:17:22.261" starttime="20170509 20:17:21.997"></status>
</kw>
<status status="FAIL" endtime="20170509 20:17:22.261" starttime="20170509 20:16:50.651"></status>
</kw>
<kw type="teardown" name="Test Bios Teardown">
<doc>Log FFDC if test suite fails and collect SOL log for</doc>
<kw name="Printn" library="gen_print">
<status status="PASS" endtime="20170509 20:17:22.262" starttime="20170509 20:17:22.262"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>FFDC On Test Case Fail</arg>
</arguments>
<kw name="FFDC On Test Case Fail" library="openbmc_ffdc">
<doc>Generic FFDC entry point. Place holder to hook in</doc>
<kw name="Is Host Quiesced" library="state_manager">
<doc>Check if host state is quiesced.</doc>
<assign>
<var>${status}</var>
</assign>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170509 20:17:22.276" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170509 20:17:22.277" starttime="20170509 20:17:22.276"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170509 20:17:22.277" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170509 20:17:22.277" starttime="20170509 20:17:22.277"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170509 20:17:22.279" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170509 20:17:22.279" starttime="20170509 20:17:22.278"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170509 20:17:22.279" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170509 20:17:22.279" starttime="20170509 20:17:22.279"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170509 20:17:22.459" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170509 20:17:22.459" starttime="20170509 20:17:22.280"></status>
</kw>
<msg timestamp="20170509 20:17:22.459" level="INFO">${status} = PASS</msg>
<msg timestamp="20170509 20:17:22.459" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170509 20:17:22.459" starttime="20170509 20:17:22.280"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170509 20:17:22.460" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170509 20:17:22.460" starttime="20170509 20:17:22.459"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170509 20:17:22.460" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170509 20:17:22.461" starttime="20170509 20:17:22.460"></status>
</kw>
<status status="PASS" endtime="20170509 20:17:22.461" starttime="20170509 20:17:22.275"></status>
</kw>
<status status="PASS" endtime="20170509 20:17:22.461" starttime="20170509 20:17:22.275"></status>
</kw>
<status status="PASS" endtime="20170509 20:17:22.461" starttime="20170509 20:17:22.274"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170509 20:17:22.461" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" endtime="20170509 20:17:22.461" starttime="20170509 20:17:22.461"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170509 20:17:22.462" starttime="20170509 20:17:22.462"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170509 20:17:22.525" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None </msg>
<msg timestamp="20170509 20:17:22.525" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170509 20:17:22.525" starttime="20170509 20:17:22.462"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170509 20:17:22.525" starttime="20170509 20:17:22.525"></status>
</kw>
<msg timestamp="20170509 20:17:22.526" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170509 20:17:22.526" starttime="20170509 20:17:22.273"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170509 20:17:22.526" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170509 20:17:22.526" starttime="20170509 20:17:22.526"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170509 20:17:22.527" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170509 20:17:22.527" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170509 20:17:22.527" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Off'}</msg>
<status status="PASS" endtime="20170509 20:17:22.527" starttime="20170509 20:17:22.527"></status>
</kw>
<msg timestamp="20170509 20:17:22.527" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Off</msg>
<status status="PASS" endtime="20170509 20:17:22.527" starttime="20170509 20:17:22.273"></status>
</kw>
<msg timestamp="20170509 20:17:22.528" level="INFO">${host_state} = Off</msg>
<status status="PASS" endtime="20170509 20:17:22.528" starttime="20170509 20:17:22.272"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal</arg>
<arg>${host_state}</arg>
<arg>Quiesced</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${host_state}</arg>
<arg>Quiesced</arg>
</arguments>
<msg timestamp="20170509 20:17:22.529" level="FAIL">Off != Quiesced</msg>
<status status="FAIL" endtime="20170509 20:17:22.529" starttime="20170509 20:17:22.528"></status>
</kw>
<msg timestamp="20170509 20:17:22.529" level="INFO">${status} = False</msg>
<status status="PASS" endtime="20170509 20:17:22.529" starttime="20170509 20:17:22.528"></status>
</kw>
<msg timestamp="20170509 20:17:22.529" level="INFO">${status} = False</msg>
<status status="PASS" endtime="20170509 20:17:22.529" starttime="20170509 20:17:22.272"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${TEST_STATUS}' == 'FAIL' or '${status}'=='True'</arg>
<arg>FFDC</arg>
</arguments>
<kw name="Ffdc" library="openbmc_ffdc">
<doc>Gather First Failure Data Capture (FFDC).</doc>
<kw name="Ping Host" library="utils">
<arguments>
<arg>9.3.86.161</arg>
</arguments>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${host}</arg>
<arg>msg=No host provided</arg>
</arguments>
<msg timestamp="20170509 20:17:22.544" level="INFO">Length is 10</msg>
<status status="PASS" endtime="20170509 20:17:22.544" starttime="20170509 20:17:22.544"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>ping -c 4 ${host}</arg>
</arguments>
<assign>
<var>${RC}</var>
<var>${output}</var>
</assign>
<msg timestamp="20170509 20:17:22.548" level="INFO">Running command 'ping -c 4 9.3.86.161 2&gt;&amp;1'.</msg>
<msg timestamp="20170509 20:17:25.552" level="INFO">${RC} = 0</msg>
<msg timestamp="20170509 20:17:25.552" level="INFO">${output} = PING 9.3.86.161 (9.3.86.161) 56(84) bytes of data.
64 bytes from 9.3.86.161: icmp_seq=1 ttl=62 time=0.713 ms
64 bytes from 9.3.86.161: icmp_seq=2 ttl=62 time=0.610 ms
64 bytes from 9.3.86.161: icmp_se...</msg>
<status status="PASS" endtime="20170509 20:17:25.552" starttime="20170509 20:17:22.545"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>RC: ${RC}\nOutput:\n${output}</arg>
</arguments>
<msg timestamp="20170509 20:17:25.556" level="INFO">RC: 0
Output:
PING 9.3.86.161 (9.3.86.161) 56(84) bytes of data.
64 bytes from 9.3.86.161: icmp_seq=1 ttl=62 time=0.713 ms
64 bytes from 9.3.86.161: icmp_seq=2 ttl=62 time=0.610 ms
64 bytes from 9.3.86.161: icmp_seq=3 ttl=62 time=0.585 ms
64 bytes from 9.3.86.161: icmp_seq=4 ttl=62 time=0.586 ms

--- 9.3.86.161 ping statistics ---
4 packets transmitted, 4 received, 0% packet loss, time 2999ms
rtt min/avg/max/mdev = 0.585/0.623/0.713/0.058 ms</msg>
<status status="PASS" endtime="20170509 20:17:25.556" starttime="20170509 20:17:25.555"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${RC}</arg>
<arg>${0}</arg>
</arguments>
<status status="PASS" endtime="20170509 20:17:25.556" starttime="20170509 20:17:25.556"></status>
</kw>
<status status="PASS" endtime="20170509 20:17:25.557" starttime="20170509 20:17:22.544"></status>
</kw>
<kw name="Get Current Time Stamp" library="openbmc_ffdc_utils">
<doc>Get the current time stamp data</doc>
<kw name="Get Current Date" library="DateTime">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20170509 20:17:25.574" level="INFO">${cur_time} = 2017-05-09 20:17:25:574046</msg>
<status status="PASS" endtime="20170509 20:17:25.575" starttime="20170509 20:17:25.574"></status>
</kw>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20170509 20:17:25.575" level="INFO">${cur_time} = 20170509201725574046</msg>
<status status="PASS" endtime="20170509 20:17:25.575" starttime="20170509 20:17:25.575"></status>
</kw>
<status status="PASS" endtime="20170509 20:17:25.575" starttime="20170509 20:17:25.573"></status>
</kw>
<msg timestamp="20170509 20:17:25.580" level="INFO">${FFDC_TIME} = 20170509201725574046</msg>
<kw name="Get Test Dir and Name" library="openbmc_ffdc_utils">
<doc>SUITE_NAME and TEST_NAME are automatic variables</doc>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${SUITE_NAME}</arg>
</arguments>
<assign>
<var>${suite_name}</var>
</assign>
<msg timestamp="20170509 20:17:25.581" level="INFO">${suite_name} = TestBiosUpdate</msg>
<status status="PASS" endtime="20170509 20:17:25.581" starttime="20170509 20:17:25.581"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${FFDC_TIME}_</arg>
<arg>${suite_name}</arg>
</arguments>
<assign>
<var>${suite_name}</var>
</assign>
<msg timestamp="20170509 20:17:25.583" level="INFO">${suite_name} = 20170509201725574046_TestBiosUpdate</msg>
<status status="PASS" endtime="20170509 20:17:25.583" starttime="20170509 20:17:25.583"></status>
</kw>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${TEST_NAME}</arg>
</arguments>
<assign>
<var>${test_name}</var>
</assign>
<msg timestamp="20170509 20:17:25.583" level="INFO">${test_name} = HostBIOSUpdate</msg>
<status status="PASS" endtime="20170509 20:17:25.584" starttime="20170509 20:17:25.583"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${FFDC_TIME}_</arg>
<arg>${test_name}</arg>
</arguments>
<assign>
<var>${test_name}</var>
</assign>
<msg timestamp="20170509 20:17:25.584" level="INFO">${test_name} = 20170509201725574046_HostBIOSUpdate</msg>
<status status="PASS" endtime="20170509 20:17:25.584" starttime="20170509 20:17:25.584"></status>
</kw>
<status status="PASS" endtime="20170509 20:17:25.584" starttime="20170509 20:17:25.580"></status>
</kw>
<msg timestamp="20170509 20:17:25.585" level="INFO">${FFDC_DIR_PATH} = 20170509201725574046_TestBiosUpdate/20170509201725574046_HostBIOSUpdate/</msg>
<msg timestamp="20170509 20:17:25.585" level="INFO">${FFDC_PREFIX} = 20170509201725574046_</msg>
<msg timestamp="20170509 20:17:25.610" level="INFO">${LOG_PREFIX} = 20170509201725574046_TestBiosUpdate/20170509201725574046_HostBIOSUpdate/20170509201725574046_</msg>
<kw name="Create Directory" library="OperatingSystem">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>20170509201725574046_TestBiosUpdate/20170509201725574046_HostBIOSUpdate/</arg>
</arguments>
<msg timestamp="20170509 20:17:25.612" html="yes" level="INFO">Created directory '&lt;a href="file:///home/fspcibld/20170509201725574046_TestBiosUpdate/20170509201725574046_HostBIOSUpdate"&gt;/home/fspcibld/20170509201725574046_TestBiosUpdate/20170509201725574046_HostBIOSUpdate&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170509 20:17:25.612" starttime="20170509 20:17:25.611"></status>
</kw>
<msg timestamp="20170509 20:17:25.617" level="INFO">${FFDC_FILE_PATH} = 20170509201725574046_TestBiosUpdate/20170509201725574046_HostBIOSUpdate/20170509201725574046_BMC_general.txt</msg>
<kw name="Header Message" library="openbmc_ffdc_utils">
<doc>Write header message to the report document manifest.</doc>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${HEADER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170509 20:17:25.631" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/20170509201725574046_TestBiosUpdate/20170509201725574046_HostBIOSUpdate/20170509201725574046_BMC_general.txt"&gt;/home/fspcibld/20170509201725574046_TestBiosUpdate/20170509201725574046_HostBIOSUpdate/20170509201725574046_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170509 20:17:25.631" starttime="20170509 20:17:25.631"></status>
</kw>
<status status="PASS" endtime="20170509 20:17:25.632" starttime="20170509 20:17:25.630"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170509 20:17:25.633" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/20170509201725574046_TestBiosUpdate/20170509201725574046_HostBIOSUpdate/20170509201725574046_BMC_general.txt"&gt;/home/fspcibld/20170509201725574046_TestBiosUpdate/20170509201725574046_HostBIOSUpdate/20170509201725574046_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170509 20:17:25.633" starttime="20170509 20:17:25.632"></status>
</kw>
<status status="PASS" endtime="20170509 20:17:25.633" starttime="20170509 20:17:25.632"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Suite File\t\t: ${SUITE_NAME} ${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170509 20:17:25.635" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/20170509201725574046_TestBiosUpdate/20170509201725574046_HostBIOSUpdate/20170509201725574046_BMC_general.txt"&gt;/home/fspcibld/20170509201725574046_TestBiosUpdate/20170509201725574046_HostBIOSUpdate/20170509201725574046_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170509 20:17:25.635" starttime="20170509 20:17:25.634"></status>
</kw>
<status status="PASS" endtime="20170509 20:17:25.635" starttime="20170509 20:17:25.633"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Case Name\t\t: ${TEST_NAME}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170509 20:17:25.636" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/20170509201725574046_TestBiosUpdate/20170509201725574046_HostBIOSUpdate/20170509201725574046_BMC_general.txt"&gt;/home/fspcibld/20170509201725574046_TestBiosUpdate/20170509201725574046_HostBIOSUpdate/20170509201725574046_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170509 20:17:25.636" starttime="20170509 20:17:25.636"></status>
</kw>
<status status="PASS" endtime="20170509 20:17:25.636" starttime="20170509 20:17:25.635"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Source File\t: ${SUITE_SOURCE}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170509 20:17:25.638" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/20170509201725574046_TestBiosUpdate/20170509201725574046_HostBIOSUpdate/20170509201725574046_BMC_general.txt"&gt;/home/fspcibld/20170509201725574046_TestBiosUpdate/20170509201725574046_HostBIOSUpdate/20170509201725574046_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170509 20:17:25.638" starttime="20170509 20:17:25.637"></status>
</kw>
<status status="PASS" endtime="20170509 20:17:25.638" starttime="20170509 20:17:25.636"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Failure Time Stamp\t: ${FFDC_TIME}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170509 20:17:25.639" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/20170509201725574046_TestBiosUpdate/20170509201725574046_HostBIOSUpdate/20170509201725574046_BMC_general.txt"&gt;/home/fspcibld/20170509201725574046_TestBiosUpdate/20170509201725574046_HostBIOSUpdate/20170509201725574046_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170509 20:17:25.639" starttime="20170509 20:17:25.639"></status>
</kw>
<status status="PASS" endtime="20170509 20:17:25.639" starttime="20170509 20:17:25.638"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Error Message\t: ${TEST_MESSAGE}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170509 20:17:25.640" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/20170509201725574046_TestBiosUpdate/20170509201725574046_HostBIOSUpdate/20170509201725574046_BMC_general.txt"&gt;/home/fspcibld/20170509201725574046_TestBiosUpdate/20170509201725574046_HostBIOSUpdate/20170509201725574046_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170509 20:17:25.641" starttime="20170509 20:17:25.640"></status>
</kw>
<status status="PASS" endtime="20170509 20:17:25.641" starttime="20170509 20:17:25.639"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Documentation\t:${\n}${TEST_DOCUMENTATION}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170509 20:17:25.642" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/20170509201725574046_TestBiosUpdate/20170509201725574046_HostBIOSUpdate/20170509201725574046_BMC_general.txt"&gt;/home/fspcibld/20170509201725574046_TestBiosUpdate/20170509201725574046_HostBIOSUpdate/20170509201725574046_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170509 20:17:25.642" starttime="20170509 20:17:25.641"></status>
</kw>
<status status="PASS" endtime="20170509 20:17:25.642" starttime="20170509 20:17:25.641"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170509 20:17:25.643" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/20170509201725574046_TestBiosUpdate/20170509201725574046_HostBIOSUpdate/20170509201725574046_BMC_general.txt"&gt;/home/fspcibld/20170509201725574046_TestBiosUpdate/20170509201725574046_HostBIOSUpdate/20170509201725574046_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170509 20:17:25.643" starttime="20170509 20:17:25.643"></status>
</kw>
<status status="PASS" endtime="20170509 20:17:25.643" starttime="20170509 20:17:25.642"></status>
</kw>
<kw name="Test Setup Info" library="openbmc_ffdc_utils">
<doc>BMC IP, Model and other information</doc>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}-----------------------${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170509 20:17:25.645" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/20170509201725574046_TestBiosUpdate/20170509201725574046_HostBIOSUpdate/20170509201725574046_BMC_general.txt"&gt;/home/fspcibld/20170509201725574046_TestBiosUpdate/20170509201725574046_HostBIOSUpdate/20170509201725574046_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170509 20:17:25.645" starttime="20170509 20:17:25.644"></status>
</kw>
<status status="PASS" endtime="20170509 20:17:25.645" starttime="20170509 20:17:25.644"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Setup Information:</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170509 20:17:25.647" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/20170509201725574046_TestBiosUpdate/20170509201725574046_HostBIOSUpdate/20170509201725574046_BMC_general.txt"&gt;/home/fspcibld/20170509201725574046_TestBiosUpdate/20170509201725574046_HostBIOSUpdate/20170509201725574046_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170509 20:17:25.647" starttime="20170509 20:17:25.646"></status>
</kw>
<status status="PASS" endtime="20170509 20:17:25.647" starttime="20170509 20:17:25.645"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}-----------------------${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170509 20:17:25.648" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/20170509201725574046_TestBiosUpdate/20170509201725574046_HostBIOSUpdate/20170509201725574046_BMC_general.txt"&gt;/home/fspcibld/20170509201725574046_TestBiosUpdate/20170509201725574046_HostBIOSUpdate/20170509201725574046_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170509 20:17:25.648" starttime="20170509 20:17:25.648"></status>
</kw>
<status status="PASS" endtime="20170509 20:17:25.648" starttime="20170509 20:17:25.647"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>OPENBMC HOST \t: ${OPENBMC_HOST}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170509 20:17:25.649" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/20170509201725574046_TestBiosUpdate/20170509201725574046_HostBIOSUpdate/20170509201725574046_BMC_general.txt"&gt;/home/fspcibld/20170509201725574046_TestBiosUpdate/20170509201725574046_HostBIOSUpdate/20170509201725574046_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170509 20:17:25.649" starttime="20170509 20:17:25.649"></status>
</kw>
<status status="PASS" endtime="20170509 20:17:25.649" starttime="20170509 20:17:25.648"></status>
</kw>
<kw name="Get BMC System Model" library="utils">
<doc>Get the BMC model from the device tree.</doc>
<assign>
<var>${model_name}</var>
</assign>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg timestamp="20170509 20:17:25.652" level="FAIL">Dictionary does not contain key 'host'.</msg>
<status status="FAIL" endtime="20170509 20:17:25.652" starttime="20170509 20:17:25.651"></status>
</kw>
<msg timestamp="20170509 20:17:25.652" level="INFO">${has_host} = False</msg>
<status status="PASS" endtime="20170509 20:17:25.652" starttime="20170509 20:17:25.651"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status status="PASS" endtime="20170509 20:17:25.653" starttime="20170509 20:17:25.653"></status>
</kw>
<status status="PASS" endtime="20170509 20:17:25.653" starttime="20170509 20:17:25.652"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<status status="PASS" endtime="20170509 20:17:25.654" starttime="20170509 20:17:25.654"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg timestamp="20170509 20:17:25.655" level="FAIL">Dictionary does not contain key 'port'.</msg>
<status status="FAIL" endtime="20170509 20:17:25.655" starttime="20170509 20:17:25.655"></status>
</kw>
<msg timestamp="20170509 20:17:25.655" level="INFO">${has_port} = False</msg>
<status status="PASS" endtime="20170509 20:17:25.655" starttime="20170509 20:17:25.654"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status status="PASS" endtime="20170509 20:17:25.657" starttime="20170509 20:17:25.657"></status>
</kw>
<status status="PASS" endtime="20170509 20:17:25.657" starttime="20170509 20:17:25.656"></status>
</kw>
<status status="PASS" endtime="20170509 20:17:25.657" starttime="20170509 20:17:25.656"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg timestamp="20170509 20:17:25.658" level="INFO">Logging into '9.3.86.161:22' as 'root'.</msg>
<msg timestamp="20170509 20:17:27.268" level="INFO">Read output: root@witherspoon:~#</msg>
<status status="PASS" endtime="20170509 20:17:27.268" starttime="20170509 20:17:25.657"></status>
</kw>
<status status="PASS" endtime="20170509 20:17:27.268" starttime="20170509 20:17:25.650"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>cat ${devicetree_base} | cut -d " " -f 1</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${bmc_model}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170509 20:17:27.269" level="INFO">Executing command 'cat /sys/firmware/devicetree/base/model | cut -d " " -f 1'.</msg>
<msg timestamp="20170509 20:17:27.335" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170509 20:17:27.335" level="INFO">${bmc_model} = Witherspoon</msg>
<msg timestamp="20170509 20:17:27.335" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170509 20:17:27.336" starttime="20170509 20:17:27.268"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20170509 20:17:27.336" level="INFO">Length is 0</msg>
<status status="PASS" endtime="20170509 20:17:27.336" starttime="20170509 20:17:27.336"></status>
</kw>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${bmc_model}</arg>
</arguments>
<msg timestamp="20170509 20:17:27.337" level="INFO">Length is 11</msg>
<status status="PASS" endtime="20170509 20:17:27.337" starttime="20170509 20:17:27.336"></status>
</kw>
<msg timestamp="20170509 20:17:27.337" level="INFO">${model_name} = Witherspoon</msg>
<status status="PASS" endtime="20170509 20:17:27.337" starttime="20170509 20:17:25.650"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>SYSTEM TYPE \t: ${model_name}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170509 20:17:27.338" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/20170509201725574046_TestBiosUpdate/20170509201725574046_HostBIOSUpdate/20170509201725574046_BMC_general.txt"&gt;/home/fspcibld/20170509201725574046_TestBiosUpdate/20170509201725574046_HostBIOSUpdate/20170509201725574046_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170509 20:17:27.338" starttime="20170509 20:17:27.338"></status>
</kw>
<status status="PASS" endtime="20170509 20:17:27.338" starttime="20170509 20:17:27.337"></status>
</kw>
<status status="PASS" endtime="20170509 20:17:27.339" starttime="20170509 20:17:25.643"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${MSG_INTRO}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170509 20:17:27.340" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/20170509201725574046_TestBiosUpdate/20170509201725574046_HostBIOSUpdate/20170509201725574046_BMC_general.txt"&gt;/home/fspcibld/20170509201725574046_TestBiosUpdate/20170509201725574046_HostBIOSUpdate/20170509201725574046_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170509 20:17:27.340" starttime="20170509 20:17:27.339"></status>
</kw>
<status status="PASS" endtime="20170509 20:17:27.340" starttime="20170509 20:17:27.339"></status>
</kw>
<kw name="Get Ffdc Cmd Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg timestamp="20170509 20:17:27.340" level="INFO">@{entries} = [ APPLICATION DATA | DRIVER INFO | BMC DATA ]</msg>
<status status="PASS" endtime="20170509 20:17:27.340" starttime="20170509 20:17:27.340"></status>
</kw>
<kw type="for" name="${index} IN [ @{entries} ]">
<kw type="foritem" name="${index} = APPLICATION DATA">
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>* ${index.upper()}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170509 20:17:27.342" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/20170509201725574046_TestBiosUpdate/20170509201725574046_HostBIOSUpdate/20170509201725574046_BMC_general.txt"&gt;/home/fspcibld/20170509201725574046_TestBiosUpdate/20170509201725574046_HostBIOSUpdate/20170509201725574046_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170509 20:17:27.342" starttime="20170509 20:17:27.342"></status>
</kw>
<status status="PASS" endtime="20170509 20:17:27.342" starttime="20170509 20:17:27.341"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170509 20:17:27.346" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/20170509201725574046_TestBiosUpdate/20170509201725574046_HostBIOSUpdate/20170509201725574046_BMC_general.txt"&gt;/home/fspcibld/20170509201725574046_TestBiosUpdate/20170509201725574046_HostBIOSUpdate/20170509201725574046_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170509 20:17:27.346" starttime="20170509 20:17:27.345"></status>
</kw>
<status status="PASS" endtime="20170509 20:17:27.346" starttime="20170509 20:17:27.342"></status>
</kw>
<status status="PASS" endtime="20170509 20:17:27.346" starttime="20170509 20:17:27.341"></status>
</kw>
<kw type="foritem" name="${index} = DRIVER INFO">
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>* ${index.upper()}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170509 20:17:27.347" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/20170509201725574046_TestBiosUpdate/20170509201725574046_HostBIOSUpdate/20170509201725574046_BMC_general.txt"&gt;/home/fspcibld/20170509201725574046_TestBiosUpdate/20170509201725574046_HostBIOSUpdate/20170509201725574046_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170509 20:17:27.347" starttime="20170509 20:17:27.347"></status>
</kw>
<status status="PASS" endtime="20170509 20:17:27.348" starttime="20170509 20:17:27.346"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170509 20:17:27.349" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/20170509201725574046_TestBiosUpdate/20170509201725574046_HostBIOSUpdate/20170509201725574046_BMC_general.txt"&gt;/home/fspcibld/20170509201725574046_TestBiosUpdate/20170509201725574046_HostBIOSUpdate/20170509201725574046_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170509 20:17:27.349" starttime="20170509 20:17:27.348"></status>
</kw>
<status status="PASS" endtime="20170509 20:17:27.349" starttime="20170509 20:17:27.348"></status>
</kw>
<status status="PASS" endtime="20170509 20:17:27.349" starttime="20170509 20:17:27.346"></status>
</kw>
<kw type="foritem" name="${index} = BMC DATA">
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>* ${index.upper()}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170509 20:17:27.350" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/20170509201725574046_TestBiosUpdate/20170509201725574046_HostBIOSUpdate/20170509201725574046_BMC_general.txt"&gt;/home/fspcibld/20170509201725574046_TestBiosUpdate/20170509201725574046_HostBIOSUpdate/20170509201725574046_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170509 20:17:27.350" starttime="20170509 20:17:27.350"></status>
</kw>
<status status="PASS" endtime="20170509 20:17:27.350" starttime="20170509 20:17:27.349"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170509 20:17:27.351" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/20170509201725574046_TestBiosUpdate/20170509201725574046_HostBIOSUpdate/20170509201725574046_BMC_general.txt"&gt;/home/fspcibld/20170509201725574046_TestBiosUpdate/20170509201725574046_HostBIOSUpdate/20170509201725574046_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170509 20:17:27.351" starttime="20170509 20:17:27.351"></status>
</kw>
<status status="PASS" endtime="20170509 20:17:27.352" starttime="20170509 20:17:27.350"></status>
</kw>
<status status="PASS" endtime="20170509 20:17:27.352" starttime="20170509 20:17:27.349"></status>
</kw>
<status status="PASS" endtime="20170509 20:17:27.352" starttime="20170509 20:17:27.341"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${MSG_DETAIL}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170509 20:17:27.353" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/20170509201725574046_TestBiosUpdate/20170509201725574046_HostBIOSUpdate/20170509201725574046_BMC_general.txt"&gt;/home/fspcibld/20170509201725574046_TestBiosUpdate/20170509201725574046_HostBIOSUpdate/20170509201725574046_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170509 20:17:27.353" starttime="20170509 20:17:27.352"></status>
</kw>
<status status="PASS" endtime="20170509 20:17:27.353" starttime="20170509 20:17:27.352"></status>
</kw>
<status status="PASS" endtime="20170509 20:17:27.353" starttime="20170509 20:17:25.630"></status>
</kw>
<kw name="Call FFDC Methods" library="openbmc_ffdc_methods">
<doc>Call into FFDC Keyword index list.</doc>
<arguments>
<arg>ffdc_function_list=</arg>
</arguments>
<kw name="Get Ffdc Method Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg timestamp="20170509 20:17:27.360" level="INFO">@{entries} = [ BMC LOGS ]</msg>
<status status="PASS" endtime="20170509 20:17:27.360" starttime="20170509 20:17:27.360"></status>
</kw>
<kw type="for" name="${index} IN [ @{entries} ]">
<kw type="foritem" name="${index} = BMC LOGS">
<kw name="Method Call Keyword List" library="openbmc_ffdc_methods">
<doc>Iterate the list through keyword index.</doc>
<arguments>
<arg>${index}</arg>
<arg>${ffdc_function_list}</arg>
</arguments>
<kw name="Get Ffdc Method Call" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<assign>
<var>@{method_list}</var>
</assign>
<msg timestamp="20170509 20:17:27.362" level="INFO">@{method_list} = [ ('FFDC Generic Report', 'BMC FFDC Manifest') | ('Get Request FFDC', 'BMC FFDC Get Requests') | ('Core Files', 'SCP Coredump Files') | ('BMC Specific Files', 'BMC FFDC Files') | ('SEL Log', 'Collect ...</msg>
<status status="PASS" endtime="20170509 20:17:27.362" starttime="20170509 20:17:27.361"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${ffdc_function_list}' == '${EMPTY}'</arg>
<arg>Get FFDC Method Desc</arg>
<arg>${index}</arg>
<arg>ELSE</arg>
<arg>Split String</arg>
<arg>${ffdc_function_list}</arg>
<arg>separator=:</arg>
</arguments>
<assign>
<var>@{ffdc_function_list}</var>
</assign>
<kw name="Get Ffdc Method Desc" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<status status="PASS" endtime="20170509 20:17:27.363" starttime="20170509 20:17:27.363"></status>
</kw>
<msg timestamp="20170509 20:17:27.363" level="INFO">@{ffdc_function_list} = [ FFDC Generic Report | Get Request FFDC | Core Files | BMC Specific Files | SEL Log | OS FFDC ]</msg>
<status status="PASS" endtime="20170509 20:17:27.363" starttime="20170509 20:17:27.362"></status>
</kw>
<kw type="for" name="${method} IN [ @{method_list} ]">
<kw type="foritem" name="${method} = ('FFDC Generic Report', 'BMC FFDC Manifest')">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status status="PASS" endtime="20170509 20:17:27.365" starttime="20170509 20:17:27.365"></status>
</kw>
<msg timestamp="20170509 20:17:27.365" level="INFO">${status} = PASS</msg>
<msg timestamp="20170509 20:17:27.365" level="INFO">${ret_values} = None</msg>
<status status="PASS" endtime="20170509 20:17:27.365" starttime="20170509 20:17:27.364"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status status="PASS" endtime="20170509 20:17:27.366" starttime="20170509 20:17:27.365"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="BMC FFDC Manifest" library="openbmc_ffdc_methods">
<doc>Get the commands index for the FFDC_BMC_CMD,</doc>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg timestamp="20170509 20:17:27.390" level="FAIL">Dictionary does not contain key 'host'.</msg>
<status status="FAIL" endtime="20170509 20:17:27.390" starttime="20170509 20:17:27.389"></status>
</kw>
<msg timestamp="20170509 20:17:27.390" level="INFO">${has_host} = False</msg>
<status status="PASS" endtime="20170509 20:17:27.390" starttime="20170509 20:17:27.389"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status status="PASS" endtime="20170509 20:17:27.391" starttime="20170509 20:17:27.391"></status>
</kw>
<status status="PASS" endtime="20170509 20:17:27.391" starttime="20170509 20:17:27.390"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<status status="PASS" endtime="20170509 20:17:27.392" starttime="20170509 20:17:27.391"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg timestamp="20170509 20:17:27.393" level="FAIL">Dictionary does not contain key 'port'.</msg>
<status status="FAIL" endtime="20170509 20:17:27.393" starttime="20170509 20:17:27.393"></status>
</kw>
<msg timestamp="20170509 20:17:27.393" level="INFO">${has_port} = False</msg>
<status status="PASS" endtime="20170509 20:17:27.393" starttime="20170509 20:17:27.392"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status status="PASS" endtime="20170509 20:17:27.396" starttime="20170509 20:17:27.396"></status>
</kw>
<status status="PASS" endtime="20170509 20:17:27.396" starttime="20170509 20:17:27.395"></status>
</kw>
<status status="PASS" endtime="20170509 20:17:27.396" starttime="20170509 20:17:27.393"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg timestamp="20170509 20:17:27.397" level="INFO">Logging into '9.3.86.161:22' as 'root'.</msg>
<msg timestamp="20170509 20:17:29.006" level="INFO">Read output: root@witherspoon:~#</msg>
<status status="PASS" endtime="20170509 20:17:29.007" starttime="20170509 20:17:27.396"></status>
</kw>
<status status="PASS" endtime="20170509 20:17:29.007" starttime="20170509 20:17:27.388"></status>
</kw>
<kw name="Get Ffdc Cmd Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg timestamp="20170509 20:17:29.007" level="INFO">@{entries} = [ APPLICATION DATA | DRIVER INFO | BMC DATA ]</msg>
<status status="PASS" endtime="20170509 20:17:29.007" starttime="20170509 20:17:29.007"></status>
</kw>
<kw type="for" name="${index} IN [ @{entries} ]">
<kw type="foritem" name="${index} = APPLICATION DATA">
<kw name="Iterate BMC Command List Pairs" library="openbmc_ffdc_methods">
<doc>Feed in key pair list from dictionary to execute</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Bmc Cmd" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg timestamp="20170509 20:17:29.009" level="INFO">@{cmd_list} = [ ('BMC state', '/usr/sbin/obmcutil  state') ]</msg>
<status status="PASS" endtime="20170509 20:17:29.009" starttime="20170509 20:17:29.008"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${ENTRY_INDEX}</arg>
<arg>${key_index}</arg>
</arguments>
<msg timestamp="20170509 20:17:29.014" level="INFO">${ENTRY_INDEX} = APPLICATION DATA</msg>
<status status="PASS" endtime="20170509 20:17:29.014" starttime="20170509 20:17:29.009"></status>
</kw>
<kw type="for" name="${cmd} IN [ @{cmd_list} ]">
<kw type="foritem" name="${cmd} = ('BMC state', '/usr/sbin/obmcutil  state')">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170509 20:17:29.017" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/20170509201725574046_TestBiosUpdate/20170509201725574046_HostBIOSUpdate/20170509201725574046_BMC_general.txt"&gt;/home/fspcibld/20170509201725574046_TestBiosUpdate/20170509201725574046_HostBIOSUpdate/20170509201725574046_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170509 20:17:29.017" starttime="20170509 20:17:29.017"></status>
</kw>
<status status="PASS" endtime="20170509 20:17:29.017" starttime="20170509 20:17:29.016"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170509 20:17:29.019" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/20170509201725574046_TestBiosUpdate/20170509201725574046_HostBIOSUpdate/20170509201725574046_BMC_general.txt"&gt;/home/fspcibld/20170509201725574046_TestBiosUpdate/20170509201725574046_HostBIOSUpdate/20170509201725574046_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170509 20:17:29.019" starttime="20170509 20:17:29.018"></status>
</kw>
<status status="PASS" endtime="20170509 20:17:29.019" starttime="20170509 20:17:29.018"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170509 20:17:29.020" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/20170509201725574046_TestBiosUpdate/20170509201725574046_HostBIOSUpdate/20170509201725574046_BMC_general.txt"&gt;/home/fspcibld/20170509201725574046_TestBiosUpdate/20170509201725574046_HostBIOSUpdate/20170509201725574046_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170509 20:17:29.020" starttime="20170509 20:17:29.019"></status>
</kw>
<status status="PASS" endtime="20170509 20:17:29.020" starttime="20170509 20:17:29.019"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170509 20:17:29.021" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/20170509201725574046_TestBiosUpdate/20170509201725574046_HostBIOSUpdate/20170509201725574046_BMC_general.txt"&gt;/home/fspcibld/20170509201725574046_TestBiosUpdate/20170509201725574046_HostBIOSUpdate/20170509201725574046_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170509 20:17:29.021" starttime="20170509 20:17:29.021"></status>
</kw>
<status status="PASS" endtime="20170509 20:17:29.021" starttime="20170509 20:17:29.020"></status>
</kw>
<status status="PASS" endtime="20170509 20:17:29.021" starttime="20170509 20:17:29.016"></status>
</kw>
<status status="PASS" endtime="20170509 20:17:29.022" starttime="20170509 20:17:29.015"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170509 20:17:29.022" level="INFO">Executing command '/usr/sbin/obmcutil  state'.</msg>
<msg timestamp="20170509 20:17:30.277" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170509 20:17:30.278" level="INFO">${stdout} = CurrentBMCState:    xyz.openbmc_project.State.BMC.BMCState.Ready
CurrentPowerState:  xyz.openbmc_project.State.Chassis.PowerState.Off
CurrentHostState:   xyz.openbmc_project.State.Host.HostState.Off</msg>
<msg timestamp="20170509 20:17:30.278" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170509 20:17:30.278" starttime="20170509 20:17:29.022"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170509 20:17:30.284" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/20170509201725574046_TestBiosUpdate/20170509201725574046_HostBIOSUpdate/20170509201725574046_BMC_general.txt"&gt;/home/fspcibld/20170509201725574046_TestBiosUpdate/20170509201725574046_HostBIOSUpdate/20170509201725574046_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170509 20:17:30.284" starttime="20170509 20:17:30.284"></status>
</kw>
<status status="PASS" endtime="20170509 20:17:30.284" starttime="20170509 20:17:30.283"></status>
</kw>
<status status="PASS" endtime="20170509 20:17:30.284" starttime="20170509 20:17:30.278"></status>
</kw>
<status status="PASS" endtime="20170509 20:17:30.285" starttime="20170509 20:17:29.014"></status>
</kw>
<status status="PASS" endtime="20170509 20:17:30.285" starttime="20170509 20:17:29.014"></status>
</kw>
<status status="PASS" endtime="20170509 20:17:30.285" starttime="20170509 20:17:29.014"></status>
</kw>
<status status="PASS" endtime="20170509 20:17:30.285" starttime="20170509 20:17:29.008"></status>
</kw>
<status status="PASS" endtime="20170509 20:17:30.285" starttime="20170509 20:17:29.008"></status>
</kw>
<kw type="foritem" name="${index} = DRIVER INFO">
<kw name="Iterate BMC Command List Pairs" library="openbmc_ffdc_methods">
<doc>Feed in key pair list from dictionary to execute</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Bmc Cmd" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg timestamp="20170509 20:17:30.286" level="INFO">@{cmd_list} = [ ('Build Info', 'cat /etc/version') | ('FW Level', 'cat /etc/os-release') ]</msg>
<status status="PASS" endtime="20170509 20:17:30.286" starttime="20170509 20:17:30.286"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${ENTRY_INDEX}</arg>
<arg>${key_index}</arg>
</arguments>
<msg timestamp="20170509 20:17:30.287" level="INFO">${ENTRY_INDEX} = DRIVER INFO</msg>
<status status="PASS" endtime="20170509 20:17:30.287" starttime="20170509 20:17:30.286"></status>
</kw>
<kw type="for" name="${cmd} IN [ @{cmd_list} ]">
<kw type="foritem" name="${cmd} = ('Build Info', 'cat /etc/version')">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170509 20:17:30.290" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/20170509201725574046_TestBiosUpdate/20170509201725574046_HostBIOSUpdate/20170509201725574046_BMC_general.txt"&gt;/home/fspcibld/20170509201725574046_TestBiosUpdate/20170509201725574046_HostBIOSUpdate/20170509201725574046_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170509 20:17:30.290" starttime="20170509 20:17:30.290"></status>
</kw>
<status status="PASS" endtime="20170509 20:17:30.290" starttime="20170509 20:17:30.289"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170509 20:17:30.291" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/20170509201725574046_TestBiosUpdate/20170509201725574046_HostBIOSUpdate/20170509201725574046_BMC_general.txt"&gt;/home/fspcibld/20170509201725574046_TestBiosUpdate/20170509201725574046_HostBIOSUpdate/20170509201725574046_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170509 20:17:30.291" starttime="20170509 20:17:30.291"></status>
</kw>
<status status="PASS" endtime="20170509 20:17:30.292" starttime="20170509 20:17:30.290"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170509 20:17:30.293" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/20170509201725574046_TestBiosUpdate/20170509201725574046_HostBIOSUpdate/20170509201725574046_BMC_general.txt"&gt;/home/fspcibld/20170509201725574046_TestBiosUpdate/20170509201725574046_HostBIOSUpdate/20170509201725574046_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170509 20:17:30.293" starttime="20170509 20:17:30.292"></status>
</kw>
<status status="PASS" endtime="20170509 20:17:30.293" starttime="20170509 20:17:30.292"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170509 20:17:30.294" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/20170509201725574046_TestBiosUpdate/20170509201725574046_HostBIOSUpdate/20170509201725574046_BMC_general.txt"&gt;/home/fspcibld/20170509201725574046_TestBiosUpdate/20170509201725574046_HostBIOSUpdate/20170509201725574046_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170509 20:17:30.294" starttime="20170509 20:17:30.294"></status>
</kw>
<status status="PASS" endtime="20170509 20:17:30.294" starttime="20170509 20:17:30.293"></status>
</kw>
<status status="PASS" endtime="20170509 20:17:30.294" starttime="20170509 20:17:30.288"></status>
</kw>
<status status="PASS" endtime="20170509 20:17:30.294" starttime="20170509 20:17:30.288"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170509 20:17:30.295" level="INFO">Executing command 'cat /etc/version'.</msg>
<msg timestamp="20170509 20:17:30.379" level="INFO">Command exited with return code 1.</msg>
<msg timestamp="20170509 20:17:30.380" level="INFO">${stdout} = </msg>
<msg timestamp="20170509 20:17:30.380" level="INFO">${stderr} = cat: can't open '/etc/version': No such file or directory</msg>
<status status="PASS" endtime="20170509 20:17:30.380" starttime="20170509 20:17:30.295"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170509 20:17:30.386" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/20170509201725574046_TestBiosUpdate/20170509201725574046_HostBIOSUpdate/20170509201725574046_BMC_general.txt"&gt;/home/fspcibld/20170509201725574046_TestBiosUpdate/20170509201725574046_HostBIOSUpdate/20170509201725574046_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170509 20:17:30.386" starttime="20170509 20:17:30.386"></status>
</kw>
<status status="PASS" endtime="20170509 20:17:30.386" starttime="20170509 20:17:30.385"></status>
</kw>
<status status="PASS" endtime="20170509 20:17:30.386" starttime="20170509 20:17:30.380"></status>
</kw>
<status status="PASS" endtime="20170509 20:17:30.386" starttime="20170509 20:17:30.287"></status>
</kw>
<status status="PASS" endtime="20170509 20:17:30.386" starttime="20170509 20:17:30.287"></status>
</kw>
<kw type="foritem" name="${cmd} = ('FW Level', 'cat /etc/os-release')">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170509 20:17:30.389" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/20170509201725574046_TestBiosUpdate/20170509201725574046_HostBIOSUpdate/20170509201725574046_BMC_general.txt"&gt;/home/fspcibld/20170509201725574046_TestBiosUpdate/20170509201725574046_HostBIOSUpdate/20170509201725574046_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170509 20:17:30.389" starttime="20170509 20:17:30.389"></status>
</kw>
<status status="PASS" endtime="20170509 20:17:30.389" starttime="20170509 20:17:30.388"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170509 20:17:30.391" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/20170509201725574046_TestBiosUpdate/20170509201725574046_HostBIOSUpdate/20170509201725574046_BMC_general.txt"&gt;/home/fspcibld/20170509201725574046_TestBiosUpdate/20170509201725574046_HostBIOSUpdate/20170509201725574046_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170509 20:17:30.391" starttime="20170509 20:17:30.390"></status>
</kw>
<status status="PASS" endtime="20170509 20:17:30.391" starttime="20170509 20:17:30.390"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170509 20:17:30.392" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/20170509201725574046_TestBiosUpdate/20170509201725574046_HostBIOSUpdate/20170509201725574046_BMC_general.txt"&gt;/home/fspcibld/20170509201725574046_TestBiosUpdate/20170509201725574046_HostBIOSUpdate/20170509201725574046_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170509 20:17:30.392" starttime="20170509 20:17:30.392"></status>
</kw>
<status status="PASS" endtime="20170509 20:17:30.392" starttime="20170509 20:17:30.391"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170509 20:17:30.394" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/20170509201725574046_TestBiosUpdate/20170509201725574046_HostBIOSUpdate/20170509201725574046_BMC_general.txt"&gt;/home/fspcibld/20170509201725574046_TestBiosUpdate/20170509201725574046_HostBIOSUpdate/20170509201725574046_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170509 20:17:30.394" starttime="20170509 20:17:30.393"></status>
</kw>
<status status="PASS" endtime="20170509 20:17:30.394" starttime="20170509 20:17:30.392"></status>
</kw>
<status status="PASS" endtime="20170509 20:17:30.394" starttime="20170509 20:17:30.388"></status>
</kw>
<status status="PASS" endtime="20170509 20:17:30.394" starttime="20170509 20:17:30.387"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170509 20:17:30.395" level="INFO">Executing command 'cat /etc/os-release'.</msg>
<msg timestamp="20170509 20:17:30.479" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170509 20:17:30.479" level="INFO">${stdout} = ID="openbmc-phosphor"
NAME="Phosphor OpenBMC (Phosphor OpenBMC Project Reference Distro)"
VERSION="v1.99.5-22"
VERSION_ID="v1.99.5-22-geedcafc"
PRETTY_NAME="Phosphor OpenBMC (Phosphor OpenBMC Project ...</msg>
<msg timestamp="20170509 20:17:30.479" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170509 20:17:30.479" starttime="20170509 20:17:30.394"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170509 20:17:30.486" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/20170509201725574046_TestBiosUpdate/20170509201725574046_HostBIOSUpdate/20170509201725574046_BMC_general.txt"&gt;/home/fspcibld/20170509201725574046_TestBiosUpdate/20170509201725574046_HostBIOSUpdate/20170509201725574046_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170509 20:17:30.486" starttime="20170509 20:17:30.485"></status>
</kw>
<status status="PASS" endtime="20170509 20:17:30.486" starttime="20170509 20:17:30.485"></status>
</kw>
<status status="PASS" endtime="20170509 20:17:30.486" starttime="20170509 20:17:30.480"></status>
</kw>
<status status="PASS" endtime="20170509 20:17:30.486" starttime="20170509 20:17:30.387"></status>
</kw>
<status status="PASS" endtime="20170509 20:17:30.486" starttime="20170509 20:17:30.387"></status>
</kw>
<status status="PASS" endtime="20170509 20:17:30.486" starttime="20170509 20:17:30.287"></status>
</kw>
<status status="PASS" endtime="20170509 20:17:30.486" starttime="20170509 20:17:30.285"></status>
</kw>
<status status="PASS" endtime="20170509 20:17:30.486" starttime="20170509 20:17:30.285"></status>
</kw>
<kw type="foritem" name="${index} = BMC DATA">
<kw name="Iterate BMC Command List Pairs" library="openbmc_ffdc_methods">
<doc>Feed in key pair list from dictionary to execute</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Bmc Cmd" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg timestamp="20170509 20:17:30.487" level="INFO">@{cmd_list} = [ ('BMC Uptime', 'uptime') | ('BMC File System Disk Space Usage', 'df -hT') | ('BMC OS', 'uname -a') ]</msg>
<status status="PASS" endtime="20170509 20:17:30.487" starttime="20170509 20:17:30.487"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${ENTRY_INDEX}</arg>
<arg>${key_index}</arg>
</arguments>
<msg timestamp="20170509 20:17:30.488" level="INFO">${ENTRY_INDEX} = BMC DATA</msg>
<status status="PASS" endtime="20170509 20:17:30.488" starttime="20170509 20:17:30.488"></status>
</kw>
<kw type="for" name="${cmd} IN [ @{cmd_list} ]">
<kw type="foritem" name="${cmd} = ('BMC Uptime', 'uptime')">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170509 20:17:30.491" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/20170509201725574046_TestBiosUpdate/20170509201725574046_HostBIOSUpdate/20170509201725574046_BMC_general.txt"&gt;/home/fspcibld/20170509201725574046_TestBiosUpdate/20170509201725574046_HostBIOSUpdate/20170509201725574046_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170509 20:17:30.491" starttime="20170509 20:17:30.491"></status>
</kw>
<status status="PASS" endtime="20170509 20:17:30.491" starttime="20170509 20:17:30.490"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170509 20:17:30.492" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/20170509201725574046_TestBiosUpdate/20170509201725574046_HostBIOSUpdate/20170509201725574046_BMC_general.txt"&gt;/home/fspcibld/20170509201725574046_TestBiosUpdate/20170509201725574046_HostBIOSUpdate/20170509201725574046_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170509 20:17:30.493" starttime="20170509 20:17:30.492"></status>
</kw>
<status status="PASS" endtime="20170509 20:17:30.493" starttime="20170509 20:17:30.491"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170509 20:17:30.494" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/20170509201725574046_TestBiosUpdate/20170509201725574046_HostBIOSUpdate/20170509201725574046_BMC_general.txt"&gt;/home/fspcibld/20170509201725574046_TestBiosUpdate/20170509201725574046_HostBIOSUpdate/20170509201725574046_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170509 20:17:30.494" starttime="20170509 20:17:30.493"></status>
</kw>
<status status="PASS" endtime="20170509 20:17:30.494" starttime="20170509 20:17:30.493"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170509 20:17:30.495" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/20170509201725574046_TestBiosUpdate/20170509201725574046_HostBIOSUpdate/20170509201725574046_BMC_general.txt"&gt;/home/fspcibld/20170509201725574046_TestBiosUpdate/20170509201725574046_HostBIOSUpdate/20170509201725574046_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170509 20:17:30.495" starttime="20170509 20:17:30.495"></status>
</kw>
<status status="PASS" endtime="20170509 20:17:30.495" starttime="20170509 20:17:30.494"></status>
</kw>
<status status="PASS" endtime="20170509 20:17:30.495" starttime="20170509 20:17:30.490"></status>
</kw>
<status status="PASS" endtime="20170509 20:17:30.495" starttime="20170509 20:17:30.489"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170509 20:17:30.496" level="INFO">Executing command 'uptime'.</msg>
<msg timestamp="20170509 20:17:30.556" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170509 20:17:30.557" level="INFO">${stdout} =  20:17:34 up 2 min,  load average: 2.61, 2.05, 0.84</msg>
<msg timestamp="20170509 20:17:30.557" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170509 20:17:30.557" starttime="20170509 20:17:30.496"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170509 20:17:30.563" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/20170509201725574046_TestBiosUpdate/20170509201725574046_HostBIOSUpdate/20170509201725574046_BMC_general.txt"&gt;/home/fspcibld/20170509201725574046_TestBiosUpdate/20170509201725574046_HostBIOSUpdate/20170509201725574046_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170509 20:17:30.563" starttime="20170509 20:17:30.563"></status>
</kw>
<status status="PASS" endtime="20170509 20:17:30.563" starttime="20170509 20:17:30.562"></status>
</kw>
<status status="PASS" endtime="20170509 20:17:30.563" starttime="20170509 20:17:30.557"></status>
</kw>
<status status="PASS" endtime="20170509 20:17:30.563" starttime="20170509 20:17:30.489"></status>
</kw>
<status status="PASS" endtime="20170509 20:17:30.563" starttime="20170509 20:17:30.488"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC File System Disk Space Usage', 'df -hT')">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170509 20:17:30.567" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/20170509201725574046_TestBiosUpdate/20170509201725574046_HostBIOSUpdate/20170509201725574046_BMC_general.txt"&gt;/home/fspcibld/20170509201725574046_TestBiosUpdate/20170509201725574046_HostBIOSUpdate/20170509201725574046_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170509 20:17:30.567" starttime="20170509 20:17:30.566"></status>
</kw>
<status status="PASS" endtime="20170509 20:17:30.567" starttime="20170509 20:17:30.566"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170509 20:17:30.568" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/20170509201725574046_TestBiosUpdate/20170509201725574046_HostBIOSUpdate/20170509201725574046_BMC_general.txt"&gt;/home/fspcibld/20170509201725574046_TestBiosUpdate/20170509201725574046_HostBIOSUpdate/20170509201725574046_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170509 20:17:30.568" starttime="20170509 20:17:30.568"></status>
</kw>
<status status="PASS" endtime="20170509 20:17:30.568" starttime="20170509 20:17:30.567"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170509 20:17:30.569" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/20170509201725574046_TestBiosUpdate/20170509201725574046_HostBIOSUpdate/20170509201725574046_BMC_general.txt"&gt;/home/fspcibld/20170509201725574046_TestBiosUpdate/20170509201725574046_HostBIOSUpdate/20170509201725574046_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170509 20:17:30.569" starttime="20170509 20:17:30.569"></status>
</kw>
<status status="PASS" endtime="20170509 20:17:30.569" starttime="20170509 20:17:30.568"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170509 20:17:30.571" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/20170509201725574046_TestBiosUpdate/20170509201725574046_HostBIOSUpdate/20170509201725574046_BMC_general.txt"&gt;/home/fspcibld/20170509201725574046_TestBiosUpdate/20170509201725574046_HostBIOSUpdate/20170509201725574046_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170509 20:17:30.571" starttime="20170509 20:17:30.570"></status>
</kw>
<status status="PASS" endtime="20170509 20:17:30.571" starttime="20170509 20:17:30.570"></status>
</kw>
<status status="PASS" endtime="20170509 20:17:30.571" starttime="20170509 20:17:30.565"></status>
</kw>
<status status="PASS" endtime="20170509 20:17:30.571" starttime="20170509 20:17:30.564"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170509 20:17:30.571" level="INFO">Executing command 'df -hT'.</msg>
<msg timestamp="20170509 20:17:30.640" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170509 20:17:30.640" level="INFO">${stdout} = Filesystem           Type            Size      Used Available Use% Mounted on
dev                  devtmpfs      210.1M         0    210.1M   0% /dev
tmpfs                tmpfs         211.4M     13.9...</msg>
<msg timestamp="20170509 20:17:30.640" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170509 20:17:30.640" starttime="20170509 20:17:30.571"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170509 20:17:30.646" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/20170509201725574046_TestBiosUpdate/20170509201725574046_HostBIOSUpdate/20170509201725574046_BMC_general.txt"&gt;/home/fspcibld/20170509201725574046_TestBiosUpdate/20170509201725574046_HostBIOSUpdate/20170509201725574046_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170509 20:17:30.647" starttime="20170509 20:17:30.646"></status>
</kw>
<status status="PASS" endtime="20170509 20:17:30.647" starttime="20170509 20:17:30.645"></status>
</kw>
<status status="PASS" endtime="20170509 20:17:30.647" starttime="20170509 20:17:30.641"></status>
</kw>
<status status="PASS" endtime="20170509 20:17:30.647" starttime="20170509 20:17:30.564"></status>
</kw>
<status status="PASS" endtime="20170509 20:17:30.647" starttime="20170509 20:17:30.564"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC OS', 'uname -a')">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170509 20:17:30.650" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/20170509201725574046_TestBiosUpdate/20170509201725574046_HostBIOSUpdate/20170509201725574046_BMC_general.txt"&gt;/home/fspcibld/20170509201725574046_TestBiosUpdate/20170509201725574046_HostBIOSUpdate/20170509201725574046_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170509 20:17:30.650" starttime="20170509 20:17:30.649"></status>
</kw>
<status status="PASS" endtime="20170509 20:17:30.650" starttime="20170509 20:17:30.649"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170509 20:17:30.651" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/20170509201725574046_TestBiosUpdate/20170509201725574046_HostBIOSUpdate/20170509201725574046_BMC_general.txt"&gt;/home/fspcibld/20170509201725574046_TestBiosUpdate/20170509201725574046_HostBIOSUpdate/20170509201725574046_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170509 20:17:30.651" starttime="20170509 20:17:30.651"></status>
</kw>
<status status="PASS" endtime="20170509 20:17:30.651" starttime="20170509 20:17:30.650"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170509 20:17:30.652" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/20170509201725574046_TestBiosUpdate/20170509201725574046_HostBIOSUpdate/20170509201725574046_BMC_general.txt"&gt;/home/fspcibld/20170509201725574046_TestBiosUpdate/20170509201725574046_HostBIOSUpdate/20170509201725574046_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170509 20:17:30.653" starttime="20170509 20:17:30.652"></status>
</kw>
<status status="PASS" endtime="20170509 20:17:30.653" starttime="20170509 20:17:30.652"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170509 20:17:30.654" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/20170509201725574046_TestBiosUpdate/20170509201725574046_HostBIOSUpdate/20170509201725574046_BMC_general.txt"&gt;/home/fspcibld/20170509201725574046_TestBiosUpdate/20170509201725574046_HostBIOSUpdate/20170509201725574046_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170509 20:17:30.654" starttime="20170509 20:17:30.653"></status>
</kw>
<status status="PASS" endtime="20170509 20:17:30.654" starttime="20170509 20:17:30.653"></status>
</kw>
<status status="PASS" endtime="20170509 20:17:30.654" starttime="20170509 20:17:30.648"></status>
</kw>
<status status="PASS" endtime="20170509 20:17:30.654" starttime="20170509 20:17:30.648"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170509 20:17:30.655" level="INFO">Executing command 'uname -a'.</msg>
<msg timestamp="20170509 20:17:30.729" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170509 20:17:30.729" level="INFO">${stdout} = Linux witherspoon 4.7.10-15c30d4deb0a01f398230395dc0d9af4be92d856 #1 Tue May 9 20:00:35 UTC 2017 armv6l GNU/Linux</msg>
<msg timestamp="20170509 20:17:30.729" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170509 20:17:30.729" starttime="20170509 20:17:30.654"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170509 20:17:30.737" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/20170509201725574046_TestBiosUpdate/20170509201725574046_HostBIOSUpdate/20170509201725574046_BMC_general.txt"&gt;/home/fspcibld/20170509201725574046_TestBiosUpdate/20170509201725574046_HostBIOSUpdate/20170509201725574046_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170509 20:17:30.737" starttime="20170509 20:17:30.737"></status>
</kw>
<status status="PASS" endtime="20170509 20:17:30.738" starttime="20170509 20:17:30.736"></status>
</kw>
<status status="PASS" endtime="20170509 20:17:30.738" starttime="20170509 20:17:30.730"></status>
</kw>
<status status="PASS" endtime="20170509 20:17:30.738" starttime="20170509 20:17:30.647"></status>
</kw>
<status status="PASS" endtime="20170509 20:17:30.738" starttime="20170509 20:17:30.647"></status>
</kw>
<status status="PASS" endtime="20170509 20:17:30.738" starttime="20170509 20:17:30.488"></status>
</kw>
<status status="PASS" endtime="20170509 20:17:30.738" starttime="20170509 20:17:30.487"></status>
</kw>
<status status="PASS" endtime="20170509 20:17:30.738" starttime="20170509 20:17:30.486"></status>
</kw>
<status status="PASS" endtime="20170509 20:17:30.738" starttime="20170509 20:17:29.007"></status>
</kw>
<status status="PASS" endtime="20170509 20:17:30.738" starttime="20170509 20:17:27.388"></status>
</kw>
<status status="PASS" endtime="20170509 20:17:30.738" starttime="20170509 20:17:27.367"></status>
</kw>
<status status="PASS" endtime="20170509 20:17:30.738" starttime="20170509 20:17:27.364"></status>
</kw>
<status status="PASS" endtime="20170509 20:17:30.738" starttime="20170509 20:17:27.363"></status>
</kw>
<kw type="foritem" name="${method} = ('Get Request FFDC', 'BMC FFDC Get Requests')">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status status="PASS" endtime="20170509 20:17:30.741" starttime="20170509 20:17:30.740"></status>
</kw>
<msg timestamp="20170509 20:17:30.741" level="INFO">${status} = PASS</msg>
<msg timestamp="20170509 20:17:30.741" level="INFO">${ret_values} = None</msg>
<status status="PASS" endtime="20170509 20:17:30.741" starttime="20170509 20:17:30.740"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status status="PASS" endtime="20170509 20:17:30.742" starttime="20170509 20:17:30.741"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="BMC FFDC Get Requests" library="openbmc_ffdc_methods">
<doc>Get the command list and iterate</doc>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg timestamp="20170509 20:17:30.765" level="FAIL">Dictionary does not contain key 'host'.</msg>
<status status="FAIL" endtime="20170509 20:17:30.765" starttime="20170509 20:17:30.764"></status>
</kw>
<msg timestamp="20170509 20:17:30.765" level="INFO">${has_host} = False</msg>
<status status="PASS" endtime="20170509 20:17:30.765" starttime="20170509 20:17:30.764"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status status="PASS" endtime="20170509 20:17:30.767" starttime="20170509 20:17:30.767"></status>
</kw>
<status status="PASS" endtime="20170509 20:17:30.767" starttime="20170509 20:17:30.765"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<status status="PASS" endtime="20170509 20:17:30.768" starttime="20170509 20:17:30.768"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg timestamp="20170509 20:17:30.769" level="FAIL">Dictionary does not contain key 'port'.</msg>
<status status="FAIL" endtime="20170509 20:17:30.769" starttime="20170509 20:17:30.769"></status>
</kw>
<msg timestamp="20170509 20:17:30.769" level="INFO">${has_port} = False</msg>
<status status="PASS" endtime="20170509 20:17:30.769" starttime="20170509 20:17:30.768"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status status="PASS" endtime="20170509 20:17:30.771" starttime="20170509 20:17:30.771"></status>
</kw>
<status status="PASS" endtime="20170509 20:17:30.771" starttime="20170509 20:17:30.770"></status>
</kw>
<status status="PASS" endtime="20170509 20:17:30.771" starttime="20170509 20:17:30.769"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg timestamp="20170509 20:17:30.772" level="INFO">Logging into '9.3.86.161:22' as 'root'.</msg>
<msg timestamp="20170509 20:17:32.418" level="INFO">Read output: root@witherspoon:~#</msg>
<status status="PASS" endtime="20170509 20:17:32.418" starttime="20170509 20:17:30.771"></status>
</kw>
<status status="PASS" endtime="20170509 20:17:32.418" starttime="20170509 20:17:30.763"></status>
</kw>
<kw name="Get Ffdc Get Request Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg timestamp="20170509 20:17:32.419" level="INFO">@{entries} = [ GET REQUESTS ]</msg>
<status status="PASS" endtime="20170509 20:17:32.419" starttime="20170509 20:17:32.419"></status>
</kw>
<kw type="for" name="${index} IN [ @{entries} ]">
<kw type="foritem" name="${index} = GET REQUESTS">
<kw name="Log FFDC Get Requests" library="openbmc_ffdc_methods">
<doc>Create file in current FFDC log directory.</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Get Request" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg timestamp="20170509 20:17:32.420" level="INFO">@{cmd_list} = [ ('BMC_elog', '/xyz/openbmc_project/logging/entry/enumerate') | ('BMC_sensor_list', '/org/openbmc/sensors/enumerate') | ('BMC_inventory', '/xyz/openbmc_project/inventory/enumerate') | ('BMC_led', '/o...</msg>
<status status="PASS" endtime="20170509 20:17:32.420" starttime="20170509 20:17:32.420"></status>
</kw>
<kw type="for" name="${cmd} IN [ @{cmd_list} ]">
<kw type="foritem" name="${cmd} = ('BMC_elog', '/xyz/openbmc_project/logging/entry/enumerate')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170509 20:17:32.421" level="INFO">${logpath} = 20170509201725574046_TestBiosUpdate/20170509201725574046_HostBIOSUpdate/20170509201725574046_BMC_elog.txt</msg>
<status status="PASS" endtime="20170509 20:17:32.421" starttime="20170509 20:17:32.421"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170509 20:17:32.424" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170509 20:17:32.424" starttime="20170509 20:17:32.424"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170509 20:17:32.425" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170509 20:17:32.425" starttime="20170509 20:17:32.425"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170509 20:17:32.426" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170509 20:17:32.426" starttime="20170509 20:17:32.425"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170509 20:17:32.426" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170509 20:17:32.426" starttime="20170509 20:17:32.426"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170509 20:17:32.614" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170509 20:17:32.614" starttime="20170509 20:17:32.427"></status>
</kw>
<msg timestamp="20170509 20:17:32.614" level="INFO">${status} = PASS</msg>
<msg timestamp="20170509 20:17:32.614" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170509 20:17:32.614" starttime="20170509 20:17:32.427"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170509 20:17:32.615" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170509 20:17:32.615" starttime="20170509 20:17:32.615"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170509 20:17:32.616" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170509 20:17:32.616" starttime="20170509 20:17:32.615"></status>
</kw>
<status status="PASS" endtime="20170509 20:17:32.616" starttime="20170509 20:17:32.423"></status>
</kw>
<status status="PASS" endtime="20170509 20:17:32.616" starttime="20170509 20:17:32.423"></status>
</kw>
<status status="PASS" endtime="20170509 20:17:32.616" starttime="20170509 20:17:32.422"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170509 20:17:32.617" level="INFO">${base_uri} = /xyz/openbmc_project/logging/entry/enumerate</msg>
<status status="PASS" endtime="20170509 20:17:32.617" starttime="20170509 20:17:32.616"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170509 20:17:32.618" starttime="20170509 20:17:32.617"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170509 20:17:32.659" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry/enumerate, headers=None </msg>
<msg timestamp="20170509 20:17:32.659" level="INFO">${ret} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20170509 20:17:32.659" starttime="20170509 20:17:32.618"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170509 20:17:32.660" starttime="20170509 20:17:32.659"></status>
</kw>
<msg timestamp="20170509 20:17:32.660" level="INFO">${resp} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20170509 20:17:32.660" starttime="20170509 20:17:32.421"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170509 20:17:32.661" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20170509 20:17:32.661" level="FAIL">404 != 200</msg>
<status status="FAIL" endtime="20170509 20:17:32.661" starttime="20170509 20:17:32.660"></status>
</kw>
<msg timestamp="20170509 20:17:32.661" level="INFO">${status} = False</msg>
<status status="PASS" endtime="20170509 20:17:32.661" starttime="20170509 20:17:32.660"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<kw name="Continue For Loop" library="BuiltIn">
<doc>Skips the current for loop iteration and continues from the next.</doc>
<msg timestamp="20170509 20:17:32.662" level="INFO">Continuing for loop from the next iteration.</msg>
<status status="PASS" endtime="20170509 20:17:32.662" starttime="20170509 20:17:32.662"></status>
</kw>
<status status="PASS" endtime="20170509 20:17:32.662" starttime="20170509 20:17:32.662"></status>
</kw>
<status status="PASS" endtime="20170509 20:17:32.662" starttime="20170509 20:17:32.420"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_sensor_list', '/org/openbmc/sensors/enumerate')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170509 20:17:32.663" level="INFO">${logpath} = 20170509201725574046_TestBiosUpdate/20170509201725574046_HostBIOSUpdate/20170509201725574046_BMC_sensor_list.txt</msg>
<status status="PASS" endtime="20170509 20:17:32.663" starttime="20170509 20:17:32.663"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170509 20:17:32.666" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170509 20:17:32.666" starttime="20170509 20:17:32.666"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170509 20:17:32.667" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170509 20:17:32.667" starttime="20170509 20:17:32.667"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170509 20:17:32.667" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170509 20:17:32.667" starttime="20170509 20:17:32.667"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170509 20:17:32.668" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170509 20:17:32.668" starttime="20170509 20:17:32.668"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170509 20:17:32.851" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170509 20:17:32.851" starttime="20170509 20:17:32.669"></status>
</kw>
<msg timestamp="20170509 20:17:32.851" level="INFO">${status} = PASS</msg>
<msg timestamp="20170509 20:17:32.851" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170509 20:17:32.851" starttime="20170509 20:17:32.668"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170509 20:17:32.852" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170509 20:17:32.852" starttime="20170509 20:17:32.851"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170509 20:17:32.852" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170509 20:17:32.853" starttime="20170509 20:17:32.852"></status>
</kw>
<status status="PASS" endtime="20170509 20:17:32.853" starttime="20170509 20:17:32.665"></status>
</kw>
<status status="PASS" endtime="20170509 20:17:32.853" starttime="20170509 20:17:32.665"></status>
</kw>
<status status="PASS" endtime="20170509 20:17:32.853" starttime="20170509 20:17:32.664"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170509 20:17:32.853" level="INFO">${base_uri} = /org/openbmc/sensors/enumerate</msg>
<status status="PASS" endtime="20170509 20:17:32.853" starttime="20170509 20:17:32.853"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170509 20:17:32.854" starttime="20170509 20:17:32.854"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170509 20:17:33.067" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/enumerate, headers=None </msg>
<msg timestamp="20170509 20:17:33.067" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170509 20:17:33.067" starttime="20170509 20:17:32.854"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170509 20:17:33.068" starttime="20170509 20:17:33.067"></status>
</kw>
<msg timestamp="20170509 20:17:33.068" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170509 20:17:33.068" starttime="20170509 20:17:32.663"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170509 20:17:33.069" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170509 20:17:33.069" starttime="20170509 20:17:33.069"></status>
</kw>
<msg timestamp="20170509 20:17:33.069" level="INFO">${status} = True</msg>
<status status="PASS" endtime="20170509 20:17:33.069" starttime="20170509 20:17:33.068"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status status="PASS" endtime="20170509 20:17:33.070" starttime="20170509 20:17:33.069"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg timestamp="20170509 20:17:33.070" level="INFO">To JSON using : content={
  "data": {
    "/org/openbmc/sensors/host/BootCount": {
      "error": 0, 
      "units": "", 
      "value": 2
    }, 
    "/org/openbmc/sensors/host/BootProgress": {
      "error": 0, 
      "units": "", 
      "value": "Off"
    }, 
    "/org/openbmc/sensors/host/OperatingSystemStatus": {
      "error": 0, 
      "units": "", 
      "value": "Off"
    }, 
    "/org/openbmc/sensors/host/PowerSupplyDerating": {
      "error": 0, 
      "units": "", 
      "value": 10
    }, 
    "/org/openbmc/sensors/host/PowerSupplyRedundancy": {
      "error": 0, 
      "units": "", 
      "value": "Disabled"
    }, 
    "/org/openbmc/sensors/host/TurboAllowed": {
      "error": 0, 
      "units": "", 
      "value": 0
    }, 
    "/org/openbmc/sensors/host/cpu0/OccStatus": {
      "error": 0, 
      "units": "", 
      "value": "Disabled"
    }, 
    "/org/openbmc/sensors/host/cpu1/OccStatus": {
      "error": 0, 
      "units": "", 
      "value": "Disabled"
    }, 
    "/org/openbmc/sensors/host/powercap": {
      "error": 0, 
      "units": "", 
      "value": 0
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170509 20:17:33.071" level="INFO">To JSON using : pretty_print=True </msg>
<msg timestamp="20170509 20:17:33.071" level="INFO">${jsondata} = {
    "data": {
        "/org/openbmc/sensors/host/BootCount": {
            "error": 0,
            "units": "",
            "value": 2
        },
        "/org/openbmc/sensors/host/BootProgress": {
...</msg>
<status status="PASS" endtime="20170509 20:17:33.071" starttime="20170509 20:17:33.070"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170509 20:17:33.072" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/20170509201725574046_TestBiosUpdate/20170509201725574046_HostBIOSUpdate/20170509201725574046_BMC_sensor_list.txt"&gt;/home/fspcibld/20170509201725574046_TestBiosUpdate/20170509201725574046_HostBIOSUpdate/20170509201725574046_BMC_sensor_list.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170509 20:17:33.072" starttime="20170509 20:17:33.072"></status>
</kw>
<status status="PASS" endtime="20170509 20:17:33.072" starttime="20170509 20:17:33.071"></status>
</kw>
<status status="PASS" endtime="20170509 20:17:33.072" starttime="20170509 20:17:32.663"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_inventory', '/xyz/openbmc_project/inventory/enumerate')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170509 20:17:33.073" level="INFO">${logpath} = 20170509201725574046_TestBiosUpdate/20170509201725574046_HostBIOSUpdate/20170509201725574046_BMC_inventory.txt</msg>
<status status="PASS" endtime="20170509 20:17:33.073" starttime="20170509 20:17:33.073"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170509 20:17:33.076" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170509 20:17:33.076" starttime="20170509 20:17:33.076"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170509 20:17:33.077" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170509 20:17:33.077" starttime="20170509 20:17:33.077"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170509 20:17:33.077" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170509 20:17:33.077" starttime="20170509 20:17:33.077"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170509 20:17:33.078" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170509 20:17:33.078" starttime="20170509 20:17:33.078"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170509 20:17:33.255" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170509 20:17:33.255" starttime="20170509 20:17:33.079"></status>
</kw>
<msg timestamp="20170509 20:17:33.255" level="INFO">${status} = PASS</msg>
<msg timestamp="20170509 20:17:33.255" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170509 20:17:33.255" starttime="20170509 20:17:33.078"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170509 20:17:33.256" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170509 20:17:33.256" starttime="20170509 20:17:33.256"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170509 20:17:33.257" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170509 20:17:33.257" starttime="20170509 20:17:33.256"></status>
</kw>
<status status="PASS" endtime="20170509 20:17:33.257" starttime="20170509 20:17:33.075"></status>
</kw>
<status status="PASS" endtime="20170509 20:17:33.257" starttime="20170509 20:17:33.075"></status>
</kw>
<status status="PASS" endtime="20170509 20:17:33.257" starttime="20170509 20:17:33.074"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170509 20:17:33.258" level="INFO">${base_uri} = /xyz/openbmc_project/inventory/enumerate</msg>
<status status="PASS" endtime="20170509 20:17:33.258" starttime="20170509 20:17:33.257"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170509 20:17:33.258" starttime="20170509 20:17:33.258"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170509 20:17:33.413" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/inventory/enumerate, headers=None </msg>
<msg timestamp="20170509 20:17:33.413" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170509 20:17:33.413" starttime="20170509 20:17:33.258"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170509 20:17:33.414" starttime="20170509 20:17:33.414"></status>
</kw>
<msg timestamp="20170509 20:17:33.414" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170509 20:17:33.414" starttime="20170509 20:17:33.073"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170509 20:17:33.415" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170509 20:17:33.416" starttime="20170509 20:17:33.415"></status>
</kw>
<msg timestamp="20170509 20:17:33.416" level="INFO">${status} = True</msg>
<status status="PASS" endtime="20170509 20:17:33.416" starttime="20170509 20:17:33.415"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status status="PASS" endtime="20170509 20:17:33.416" starttime="20170509 20:17:33.416"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg timestamp="20170509 20:17:33.417" level="INFO">To JSON using : content={
  "data": {
    "/xyz/openbmc_project/inventory/createme3": {
      "ExampleProperty1": "foo"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc": {
      "BuildDate": "", 
      "FieldReplaceable": 0, 
      "Manufacturer": "IBM", 
      "Model": "", 
      "PartNumber": "01DH051", 
      "Present": 1, 
      "PrettyName": "BMC PLANAR  ", 
      "SerialNumber": "000000000000"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc/ethernet": {
      "FieldReplaceable": 0, 
      "MACAddress": "00:00:00:00:00:00", 
      "Present": 1, 
      "PrettyName": ""
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170509 20:17:33.417" level="INFO">To JSON using : pretty_print=True </msg>
<msg timestamp="20170509 20:17:33.417" level="INFO">${jsondata} = {
    "data": {
        "/xyz/openbmc_project/inventory/createme3": {
            "ExampleProperty1": "foo"
        },
        "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc":...</msg>
<status status="PASS" endtime="20170509 20:17:33.417" starttime="20170509 20:17:33.416"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170509 20:17:33.419" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/20170509201725574046_TestBiosUpdate/20170509201725574046_HostBIOSUpdate/20170509201725574046_BMC_inventory.txt"&gt;/home/fspcibld/20170509201725574046_TestBiosUpdate/20170509201725574046_HostBIOSUpdate/20170509201725574046_BMC_inventory.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170509 20:17:33.419" starttime="20170509 20:17:33.418"></status>
</kw>
<status status="PASS" endtime="20170509 20:17:33.419" starttime="20170509 20:17:33.417"></status>
</kw>
<status status="PASS" endtime="20170509 20:17:33.419" starttime="20170509 20:17:33.072"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_led', '/org/openbmc/records/events/enumerate')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170509 20:17:33.419" level="INFO">${logpath} = 20170509201725574046_TestBiosUpdate/20170509201725574046_HostBIOSUpdate/20170509201725574046_BMC_led.txt</msg>
<status status="PASS" endtime="20170509 20:17:33.420" starttime="20170509 20:17:33.419"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170509 20:17:33.422" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170509 20:17:33.423" starttime="20170509 20:17:33.422"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170509 20:17:33.423" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170509 20:17:33.423" starttime="20170509 20:17:33.423"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170509 20:17:33.424" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170509 20:17:33.424" starttime="20170509 20:17:33.424"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170509 20:17:33.425" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170509 20:17:33.425" starttime="20170509 20:17:33.424"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170509 20:17:33.608" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170509 20:17:33.609" starttime="20170509 20:17:33.426"></status>
</kw>
<msg timestamp="20170509 20:17:33.609" level="INFO">${status} = PASS</msg>
<msg timestamp="20170509 20:17:33.610" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170509 20:17:33.610" starttime="20170509 20:17:33.425"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170509 20:17:33.613" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170509 20:17:33.613" starttime="20170509 20:17:33.611"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170509 20:17:33.616" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170509 20:17:33.616" starttime="20170509 20:17:33.614"></status>
</kw>
<status status="PASS" endtime="20170509 20:17:33.616" starttime="20170509 20:17:33.421"></status>
</kw>
<status status="PASS" endtime="20170509 20:17:33.616" starttime="20170509 20:17:33.421"></status>
</kw>
<status status="PASS" endtime="20170509 20:17:33.617" starttime="20170509 20:17:33.420"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170509 20:17:33.618" level="INFO">${base_uri} = /org/openbmc/records/events/enumerate</msg>
<status status="PASS" endtime="20170509 20:17:33.618" starttime="20170509 20:17:33.617"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170509 20:17:33.620" starttime="20170509 20:17:33.619"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170509 20:17:33.704" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/records/events/enumerate, headers=None </msg>
<msg timestamp="20170509 20:17:33.704" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170509 20:17:33.704" starttime="20170509 20:17:33.620"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170509 20:17:33.705" starttime="20170509 20:17:33.705"></status>
</kw>
<msg timestamp="20170509 20:17:33.705" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170509 20:17:33.705" starttime="20170509 20:17:33.420"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170509 20:17:33.706" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170509 20:17:33.706" starttime="20170509 20:17:33.706"></status>
</kw>
<msg timestamp="20170509 20:17:33.707" level="INFO">${status} = True</msg>
<status status="PASS" endtime="20170509 20:17:33.707" starttime="20170509 20:17:33.706"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status status="PASS" endtime="20170509 20:17:33.707" starttime="20170509 20:17:33.707"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg timestamp="20170509 20:17:33.708" level="INFO">To JSON using : content={
  "data": {}, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170509 20:17:33.708" level="INFO">To JSON using : pretty_print=True </msg>
<msg timestamp="20170509 20:17:33.708" level="INFO">${jsondata} = {
    "data": {},
    "message": "200 OK",
    "status": "ok"
}</msg>
<status status="PASS" endtime="20170509 20:17:33.708" starttime="20170509 20:17:33.707"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170509 20:17:33.709" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/20170509201725574046_TestBiosUpdate/20170509201725574046_HostBIOSUpdate/20170509201725574046_BMC_led.txt"&gt;/home/fspcibld/20170509201725574046_TestBiosUpdate/20170509201725574046_HostBIOSUpdate/20170509201725574046_BMC_led.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170509 20:17:33.710" starttime="20170509 20:17:33.709"></status>
</kw>
<status status="PASS" endtime="20170509 20:17:33.710" starttime="20170509 20:17:33.708"></status>
</kw>
<status status="PASS" endtime="20170509 20:17:33.710" starttime="20170509 20:17:33.419"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_record_log', '/org/openbmc/control/led/enumerate')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170509 20:17:33.710" level="INFO">${logpath} = 20170509201725574046_TestBiosUpdate/20170509201725574046_HostBIOSUpdate/20170509201725574046_BMC_record_log.txt</msg>
<status status="PASS" endtime="20170509 20:17:33.710" starttime="20170509 20:17:33.710"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170509 20:17:33.713" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170509 20:17:33.715" starttime="20170509 20:17:33.713"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170509 20:17:33.716" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170509 20:17:33.716" starttime="20170509 20:17:33.715"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170509 20:17:33.716" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170509 20:17:33.716" starttime="20170509 20:17:33.716"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170509 20:17:33.717" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170509 20:17:33.717" starttime="20170509 20:17:33.717"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170509 20:17:33.892" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170509 20:17:33.893" starttime="20170509 20:17:33.718"></status>
</kw>
<msg timestamp="20170509 20:17:33.893" level="INFO">${status} = PASS</msg>
<msg timestamp="20170509 20:17:33.893" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170509 20:17:33.893" starttime="20170509 20:17:33.717"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170509 20:17:33.894" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170509 20:17:33.894" starttime="20170509 20:17:33.893"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170509 20:17:33.894" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170509 20:17:33.894" starttime="20170509 20:17:33.894"></status>
</kw>
<status status="PASS" endtime="20170509 20:17:33.895" starttime="20170509 20:17:33.712"></status>
</kw>
<status status="PASS" endtime="20170509 20:17:33.895" starttime="20170509 20:17:33.712"></status>
</kw>
<status status="PASS" endtime="20170509 20:17:33.895" starttime="20170509 20:17:33.711"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170509 20:17:33.895" level="INFO">${base_uri} = /org/openbmc/control/led/enumerate</msg>
<status status="PASS" endtime="20170509 20:17:33.895" starttime="20170509 20:17:33.895"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170509 20:17:33.896" starttime="20170509 20:17:33.896"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170509 20:17:33.938" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/control/led/enumerate, headers=None </msg>
<msg timestamp="20170509 20:17:33.938" level="INFO">${ret} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20170509 20:17:33.938" starttime="20170509 20:17:33.896"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170509 20:17:33.939" starttime="20170509 20:17:33.938"></status>
</kw>
<msg timestamp="20170509 20:17:33.939" level="INFO">${resp} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20170509 20:17:33.939" starttime="20170509 20:17:33.711"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170509 20:17:33.940" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20170509 20:17:33.940" level="FAIL">404 != 200</msg>
<status status="FAIL" endtime="20170509 20:17:33.940" starttime="20170509 20:17:33.940"></status>
</kw>
<msg timestamp="20170509 20:17:33.940" level="INFO">${status} = False</msg>
<status status="PASS" endtime="20170509 20:17:33.940" starttime="20170509 20:17:33.939"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<kw name="Continue For Loop" library="BuiltIn">
<doc>Skips the current for loop iteration and continues from the next.</doc>
<msg timestamp="20170509 20:17:33.941" level="INFO">Continuing for loop from the next iteration.</msg>
<status status="PASS" endtime="20170509 20:17:33.941" starttime="20170509 20:17:33.941"></status>
</kw>
<status status="PASS" endtime="20170509 20:17:33.941" starttime="20170509 20:17:33.941"></status>
</kw>
<status status="PASS" endtime="20170509 20:17:33.942" starttime="20170509 20:17:33.710"></status>
</kw>
<status status="PASS" endtime="20170509 20:17:33.942" starttime="20170509 20:17:32.420"></status>
</kw>
<status status="PASS" endtime="20170509 20:17:33.942" starttime="20170509 20:17:32.419"></status>
</kw>
<status status="PASS" endtime="20170509 20:17:33.942" starttime="20170509 20:17:32.419"></status>
</kw>
<status status="PASS" endtime="20170509 20:17:33.942" starttime="20170509 20:17:32.419"></status>
</kw>
<status status="PASS" endtime="20170509 20:17:33.942" starttime="20170509 20:17:30.763"></status>
</kw>
<status status="PASS" endtime="20170509 20:17:33.942" starttime="20170509 20:17:30.742"></status>
</kw>
<status status="PASS" endtime="20170509 20:17:33.942" starttime="20170509 20:17:30.739"></status>
</kw>
<status status="PASS" endtime="20170509 20:17:33.942" starttime="20170509 20:17:30.738"></status>
</kw>
<kw type="foritem" name="${method} = ('Core Files', 'SCP Coredump Files')">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status status="PASS" endtime="20170509 20:17:33.944" starttime="20170509 20:17:33.944"></status>
</kw>
<msg timestamp="20170509 20:17:33.944" level="INFO">${status} = PASS</msg>
<msg timestamp="20170509 20:17:33.944" level="INFO">${ret_values} = None</msg>
<status status="PASS" endtime="20170509 20:17:33.944" starttime="20170509 20:17:33.943"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status status="PASS" endtime="20170509 20:17:33.945" starttime="20170509 20:17:33.944"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="SCP Coredump Files" library="openbmc_ffdc_methods">
<doc>Copy core dump file from BMC to local system.</doc>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg timestamp="20170509 20:17:33.969" level="FAIL">Dictionary does not contain key 'host'.</msg>
<status status="FAIL" endtime="20170509 20:17:33.969" starttime="20170509 20:17:33.968"></status>
</kw>
<msg timestamp="20170509 20:17:33.969" level="INFO">${has_host} = False</msg>
<status status="PASS" endtime="20170509 20:17:33.969" starttime="20170509 20:17:33.968"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status status="PASS" endtime="20170509 20:17:33.970" starttime="20170509 20:17:33.970"></status>
</kw>
<status status="PASS" endtime="20170509 20:17:33.970" starttime="20170509 20:17:33.969"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<status status="PASS" endtime="20170509 20:17:33.971" starttime="20170509 20:17:33.970"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg timestamp="20170509 20:17:33.972" level="FAIL">Dictionary does not contain key 'port'.</msg>
<status status="FAIL" endtime="20170509 20:17:33.972" starttime="20170509 20:17:33.972"></status>
</kw>
<msg timestamp="20170509 20:17:33.972" level="INFO">${has_port} = False</msg>
<status status="PASS" endtime="20170509 20:17:33.972" starttime="20170509 20:17:33.971"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status status="PASS" endtime="20170509 20:17:33.975" starttime="20170509 20:17:33.974"></status>
</kw>
<status status="PASS" endtime="20170509 20:17:33.975" starttime="20170509 20:17:33.973"></status>
</kw>
<status status="PASS" endtime="20170509 20:17:33.975" starttime="20170509 20:17:33.973"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg timestamp="20170509 20:17:33.975" level="INFO">Logging into '9.3.86.161:22' as 'root'.</msg>
<msg timestamp="20170509 20:17:35.585" level="INFO">Read output: root@witherspoon:~#</msg>
<status status="PASS" endtime="20170509 20:17:35.586" starttime="20170509 20:17:33.975"></status>
</kw>
<status status="PASS" endtime="20170509 20:17:35.586" starttime="20170509 20:17:33.967"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>ls /tmp/core_*</arg>
</arguments>
<assign>
<var>${core_files}</var>
</assign>
<msg timestamp="20170509 20:17:35.587" level="INFO">Executing command 'ls /tmp/core_*'.</msg>
<msg timestamp="20170509 20:17:35.644" level="INFO">Command exited with return code 1.</msg>
<msg timestamp="20170509 20:17:35.644" level="INFO">${core_files} = </msg>
<status status="PASS" endtime="20170509 20:17:35.644" starttime="20170509 20:17:35.586"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${core_files}</arg>
</arguments>
<assign>
<var>@{core_list}</var>
</assign>
<msg timestamp="20170509 20:17:35.645" level="INFO">@{core_list} = [ ]</msg>
<status status="PASS" endtime="20170509 20:17:35.645" starttime="20170509 20:17:35.644"></status>
</kw>
<kw name="Open Connection for SCP" library="connection_client">
<kw name="Import Library" library="BuiltIn">
<doc>Imports a library with the given name and optional arguments.</doc>
<arguments>
<arg>SCPLibrary</arg>
<arg>WITH NAME</arg>
<arg>scp</arg>
</arguments>
<status status="PASS" endtime="20170509 20:17:35.646" starttime="20170509 20:17:35.645"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' == '${EMPTY}'</arg>
<arg>scp.Open connection</arg>
<arg>${OPENBMC_HOST}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>scp.Open connection</arg>
<arg>${OPENBMC_HOST}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
</arguments>
<kw name="Open Connection" library="scp">
<doc>Opens a new SCP connection to the given host.</doc>
<arguments>
<arg>${OPENBMC_HOST}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
</arguments>
<status status="PASS" endtime="20170509 20:17:36.283" starttime="20170509 20:17:35.647"></status>
</kw>
<status status="PASS" endtime="20170509 20:17:36.283" starttime="20170509 20:17:35.647"></status>
</kw>
<status status="PASS" endtime="20170509 20:17:36.283" starttime="20170509 20:17:35.645"></status>
</kw>
<kw type="for" name="${index} IN [ @{core_list} ]">
<status status="PASS" endtime="20170509 20:17:36.284" starttime="20170509 20:17:36.283"></status>
</kw>
<status status="PASS" endtime="20170509 20:17:36.284" starttime="20170509 20:17:33.965"></status>
</kw>
<status status="PASS" endtime="20170509 20:17:36.284" starttime="20170509 20:17:33.945"></status>
</kw>
<status status="PASS" endtime="20170509 20:17:36.284" starttime="20170509 20:17:33.942"></status>
</kw>
<status status="PASS" endtime="20170509 20:17:36.284" starttime="20170509 20:17:33.942"></status>
</kw>
<kw type="foritem" name="${method} = ('BMC Specific Files', 'BMC FFDC Files')">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status status="PASS" endtime="20170509 20:17:36.286" starttime="20170509 20:17:36.286"></status>
</kw>
<msg timestamp="20170509 20:17:36.286" level="INFO">${status} = PASS</msg>
<msg timestamp="20170509 20:17:36.286" level="INFO">${ret_values} = None</msg>
<status status="PASS" endtime="20170509 20:17:36.286" starttime="20170509 20:17:36.285"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status status="PASS" endtime="20170509 20:17:36.287" starttime="20170509 20:17:36.287"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="BMC FFDC Files" library="openbmc_ffdc_methods">
<doc>Get the command list and iterate</doc>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg timestamp="20170509 20:17:36.313" level="FAIL">Dictionary does not contain key 'host'.</msg>
<status status="FAIL" endtime="20170509 20:17:36.313" starttime="20170509 20:17:36.312"></status>
</kw>
<msg timestamp="20170509 20:17:36.313" level="INFO">${has_host} = False</msg>
<status status="PASS" endtime="20170509 20:17:36.313" starttime="20170509 20:17:36.312"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status status="PASS" endtime="20170509 20:17:36.314" starttime="20170509 20:17:36.314"></status>
</kw>
<status status="PASS" endtime="20170509 20:17:36.314" starttime="20170509 20:17:36.313"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<status status="PASS" endtime="20170509 20:17:36.315" starttime="20170509 20:17:36.314"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg timestamp="20170509 20:17:36.316" level="FAIL">Dictionary does not contain key 'port'.</msg>
<status status="FAIL" endtime="20170509 20:17:36.316" starttime="20170509 20:17:36.316"></status>
</kw>
<msg timestamp="20170509 20:17:36.316" level="INFO">${has_port} = False</msg>
<status status="PASS" endtime="20170509 20:17:36.316" starttime="20170509 20:17:36.315"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status status="PASS" endtime="20170509 20:17:36.319" starttime="20170509 20:17:36.317"></status>
</kw>
<status status="PASS" endtime="20170509 20:17:36.319" starttime="20170509 20:17:36.317"></status>
</kw>
<status status="PASS" endtime="20170509 20:17:36.319" starttime="20170509 20:17:36.316"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg timestamp="20170509 20:17:36.319" level="INFO">Logging into '9.3.86.161:22' as 'root'.</msg>
<msg timestamp="20170509 20:17:38.034" level="INFO">Read output: root@witherspoon:~#</msg>
<status status="PASS" endtime="20170509 20:17:38.035" starttime="20170509 20:17:36.319"></status>
</kw>
<status status="PASS" endtime="20170509 20:17:38.035" starttime="20170509 20:17:36.311"></status>
</kw>
<kw name="Get Ffdc File Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg timestamp="20170509 20:17:38.036" level="INFO">@{entries} = [ BMC FILES ]</msg>
<status status="PASS" endtime="20170509 20:17:38.036" starttime="20170509 20:17:38.036"></status>
</kw>
<kw type="for" name="${index} IN [ @{entries} ]">
<kw type="foritem" name="${index} = BMC FILES">
<kw name="Create File and Write Data" library="openbmc_ffdc_methods">
<doc>Create files to current FFDC log directory,</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Bmc File" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg timestamp="20170509 20:17:38.037" level="INFO">@{cmd_list} = [ ('BMC_proc_list', 'top -n 1 -b') | ('BMC_dmesg', 'dmesg') | ('BMC_meminfo', 'cat /proc/meminfo') | ('BMC_procinfo', 'cat /proc/cpuinfo') | ('BMC_journalctl', 'journalctl --no-pager') ]</msg>
<status status="PASS" endtime="20170509 20:17:38.037" starttime="20170509 20:17:38.037"></status>
</kw>
<kw type="for" name="${cmd} IN [ @{cmd_list} ]">
<kw type="foritem" name="${cmd} = ('BMC_proc_list', 'top -n 1 -b')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170509 20:17:38.038" level="INFO">${logpath} = 20170509201725574046_TestBiosUpdate/20170509201725574046_HostBIOSUpdate/20170509201725574046_BMC_proc_list.txt</msg>
<status status="PASS" endtime="20170509 20:17:38.038" starttime="20170509 20:17:38.038"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status status="PASS" endtime="20170509 20:17:38.040" starttime="20170509 20:17:38.040"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170509 20:17:38.041" level="INFO">Executing command 'top -n 1 -b'.</msg>
<msg timestamp="20170509 20:17:38.309" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170509 20:17:38.309" level="INFO">${stdout} = Mem: 209100K used, 223832K free, 79880K shrd, 10336K buff, 114056K cached
CPU:   8% usr  16% sys   0% nic  75% idle   0% io   0% irq   0% sirq
Load average: 2.29 2.00 0.84 1/132 991
  PID  PPID USER  ...</msg>
<msg timestamp="20170509 20:17:38.309" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170509 20:17:38.309" starttime="20170509 20:17:38.040"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170509 20:17:38.316" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/20170509201725574046_TestBiosUpdate/20170509201725574046_HostBIOSUpdate/20170509201725574046_BMC_proc_list.txt"&gt;/home/fspcibld/20170509201725574046_TestBiosUpdate/20170509201725574046_HostBIOSUpdate/20170509201725574046_BMC_proc_list.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170509 20:17:38.316" starttime="20170509 20:17:38.315"></status>
</kw>
<status status="PASS" endtime="20170509 20:17:38.316" starttime="20170509 20:17:38.315"></status>
</kw>
<status status="PASS" endtime="20170509 20:17:38.316" starttime="20170509 20:17:38.310"></status>
</kw>
<status status="PASS" endtime="20170509 20:17:38.316" starttime="20170509 20:17:38.038"></status>
</kw>
<status status="PASS" endtime="20170509 20:17:38.316" starttime="20170509 20:17:38.037"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_dmesg', 'dmesg')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170509 20:17:38.317" level="INFO">${logpath} = 20170509201725574046_TestBiosUpdate/20170509201725574046_HostBIOSUpdate/20170509201725574046_BMC_dmesg.txt</msg>
<status status="PASS" endtime="20170509 20:17:38.317" starttime="20170509 20:17:38.317"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status status="PASS" endtime="20170509 20:17:38.318" starttime="20170509 20:17:38.318"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170509 20:17:38.319" level="INFO">Executing command 'dmesg'.</msg>
<msg timestamp="20170509 20:17:38.444" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170509 20:17:38.444" level="INFO">${stdout} = Booting Linux on physical CPU 0x0
Linux version 4.7.10-15c30d4deb0a01f398230395dc0d9af4be92d856 (jenkins@openbmc-builder1) (gcc version 6.2.0 (GCC) ) #1 Tue May 9 20:00:35 UTC 2017
CPU: ARMv6-compatib...</msg>
<msg timestamp="20170509 20:17:38.444" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170509 20:17:38.444" starttime="20170509 20:17:38.319"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170509 20:17:38.453" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/20170509201725574046_TestBiosUpdate/20170509201725574046_HostBIOSUpdate/20170509201725574046_BMC_dmesg.txt"&gt;/home/fspcibld/20170509201725574046_TestBiosUpdate/20170509201725574046_HostBIOSUpdate/20170509201725574046_BMC_dmesg.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170509 20:17:38.453" starttime="20170509 20:17:38.453"></status>
</kw>
<status status="PASS" endtime="20170509 20:17:38.454" starttime="20170509 20:17:38.452"></status>
</kw>
<status status="PASS" endtime="20170509 20:17:38.454" starttime="20170509 20:17:38.445"></status>
</kw>
<status status="PASS" endtime="20170509 20:17:38.454" starttime="20170509 20:17:38.317"></status>
</kw>
<status status="PASS" endtime="20170509 20:17:38.454" starttime="20170509 20:17:38.317"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_meminfo', 'cat /proc/meminfo')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170509 20:17:38.455" level="INFO">${logpath} = 20170509201725574046_TestBiosUpdate/20170509201725574046_HostBIOSUpdate/20170509201725574046_BMC_meminfo.txt</msg>
<status status="PASS" endtime="20170509 20:17:38.455" starttime="20170509 20:17:38.454"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status status="PASS" endtime="20170509 20:17:38.456" starttime="20170509 20:17:38.456"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170509 20:17:38.457" level="INFO">Executing command 'cat /proc/meminfo'.</msg>
<msg timestamp="20170509 20:17:38.551" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170509 20:17:38.551" level="INFO">${stdout} = MemTotal:         432932 kB
MemFree:          223708 kB
MemAvailable:     264012 kB
Buffers:           10336 kB
Cached:           114060 kB
SwapCached:            0 kB
Active:            90964 kB
Inac...</msg>
<msg timestamp="20170509 20:17:38.552" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170509 20:17:38.552" starttime="20170509 20:17:38.456"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170509 20:17:38.560" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/20170509201725574046_TestBiosUpdate/20170509201725574046_HostBIOSUpdate/20170509201725574046_BMC_meminfo.txt"&gt;/home/fspcibld/20170509201725574046_TestBiosUpdate/20170509201725574046_HostBIOSUpdate/20170509201725574046_BMC_meminfo.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170509 20:17:38.560" starttime="20170509 20:17:38.560"></status>
</kw>
<status status="PASS" endtime="20170509 20:17:38.561" starttime="20170509 20:17:38.559"></status>
</kw>
<status status="PASS" endtime="20170509 20:17:38.561" starttime="20170509 20:17:38.552"></status>
</kw>
<status status="PASS" endtime="20170509 20:17:38.561" starttime="20170509 20:17:38.455"></status>
</kw>
<status status="PASS" endtime="20170509 20:17:38.561" starttime="20170509 20:17:38.454"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_procinfo', 'cat /proc/cpuinfo')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170509 20:17:38.562" level="INFO">${logpath} = 20170509201725574046_TestBiosUpdate/20170509201725574046_HostBIOSUpdate/20170509201725574046_BMC_procinfo.txt</msg>
<status status="PASS" endtime="20170509 20:17:38.562" starttime="20170509 20:17:38.561"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status status="PASS" endtime="20170509 20:17:38.563" starttime="20170509 20:17:38.563"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170509 20:17:38.563" level="INFO">Executing command 'cat /proc/cpuinfo'.</msg>
<msg timestamp="20170509 20:17:38.649" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170509 20:17:38.649" level="INFO">${stdout} = processor	: 0
model name	: ARMv6-compatible processor rev 7 (v6l)
BogoMIPS	: 789.70
Features	: half thumb fastmult edsp java tls 
CPU implementer	: 0x41
CPU architecture: 7
CPU variant	: 0x0
CPU part	...</msg>
<msg timestamp="20170509 20:17:38.649" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170509 20:17:38.649" starttime="20170509 20:17:38.563"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170509 20:17:38.655" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/20170509201725574046_TestBiosUpdate/20170509201725574046_HostBIOSUpdate/20170509201725574046_BMC_procinfo.txt"&gt;/home/fspcibld/20170509201725574046_TestBiosUpdate/20170509201725574046_HostBIOSUpdate/20170509201725574046_BMC_procinfo.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170509 20:17:38.655" starttime="20170509 20:17:38.655"></status>
</kw>
<status status="PASS" endtime="20170509 20:17:38.655" starttime="20170509 20:17:38.654"></status>
</kw>
<status status="PASS" endtime="20170509 20:17:38.655" starttime="20170509 20:17:38.649"></status>
</kw>
<status status="PASS" endtime="20170509 20:17:38.655" starttime="20170509 20:17:38.562"></status>
</kw>
<status status="PASS" endtime="20170509 20:17:38.656" starttime="20170509 20:17:38.561"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_journalctl', 'journalctl --no-pager')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170509 20:17:38.656" level="INFO">${logpath} = 20170509201725574046_TestBiosUpdate/20170509201725574046_HostBIOSUpdate/20170509201725574046_BMC_journalctl.txt</msg>
<status status="PASS" endtime="20170509 20:17:38.656" starttime="20170509 20:17:38.656"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status status="PASS" endtime="20170509 20:17:38.658" starttime="20170509 20:17:38.657"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170509 20:17:38.658" level="INFO">Executing command 'journalctl --no-pager'.</msg>
<msg timestamp="20170509 20:17:39.581" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170509 20:17:39.582" level="INFO">${stdout} = -- Logs begin at Tue 2017-05-09 20:14:58 UTC, end at Tue 2017-05-09 20:17:41 UTC. --
May 09 20:14:58 witherspoon kernel: Booting Linux on physical CPU 0x0
May 09 20:14:58 witherspoon kernel: Linux ver...</msg>
<msg timestamp="20170509 20:17:39.582" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170509 20:17:39.582" starttime="20170509 20:17:38.658"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170509 20:17:39.592" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/20170509201725574046_TestBiosUpdate/20170509201725574046_HostBIOSUpdate/20170509201725574046_BMC_journalctl.txt"&gt;/home/fspcibld/20170509201725574046_TestBiosUpdate/20170509201725574046_HostBIOSUpdate/20170509201725574046_BMC_journalctl.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170509 20:17:39.592" starttime="20170509 20:17:39.591"></status>
</kw>
<status status="PASS" endtime="20170509 20:17:39.592" starttime="20170509 20:17:39.590"></status>
</kw>
<status status="PASS" endtime="20170509 20:17:39.592" starttime="20170509 20:17:39.583"></status>
</kw>
<status status="PASS" endtime="20170509 20:17:39.592" starttime="20170509 20:17:38.656"></status>
</kw>
<status status="PASS" endtime="20170509 20:17:39.592" starttime="20170509 20:17:38.656"></status>
</kw>
<status status="PASS" endtime="20170509 20:17:39.592" starttime="20170509 20:17:38.037"></status>
</kw>
<status status="PASS" endtime="20170509 20:17:39.592" starttime="20170509 20:17:38.036"></status>
</kw>
<status status="PASS" endtime="20170509 20:17:39.592" starttime="20170509 20:17:38.036"></status>
</kw>
<status status="PASS" endtime="20170509 20:17:39.592" starttime="20170509 20:17:38.036"></status>
</kw>
<status status="PASS" endtime="20170509 20:17:39.592" starttime="20170509 20:17:36.310"></status>
</kw>
<status status="PASS" endtime="20170509 20:17:39.593" starttime="20170509 20:17:36.287"></status>
</kw>
<status status="PASS" endtime="20170509 20:17:39.593" starttime="20170509 20:17:36.284"></status>
</kw>
<status status="PASS" endtime="20170509 20:17:39.593" starttime="20170509 20:17:36.284"></status>
</kw>
<kw type="foritem" name="${method} = ('SEL Log', 'Collect eSEL Log')">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status status="PASS" endtime="20170509 20:17:39.595" starttime="20170509 20:17:39.594"></status>
</kw>
<msg timestamp="20170509 20:17:39.595" level="INFO">${status} = PASS</msg>
<msg timestamp="20170509 20:17:39.595" level="INFO">${ret_values} = None</msg>
<status status="PASS" endtime="20170509 20:17:39.595" starttime="20170509 20:17:39.594"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status status="PASS" endtime="20170509 20:17:39.595" starttime="20170509 20:17:39.595"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="Collect eSEL Log" library="openbmc_ffdc_methods">
<doc>Collect eSEL log from logging entry and convert eSEL data</doc>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${BMC_LOGGING_ENTRY}/enumerate</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170509 20:17:39.620" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170509 20:17:39.621" starttime="20170509 20:17:39.620"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170509 20:17:39.621" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170509 20:17:39.622" starttime="20170509 20:17:39.621"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170509 20:17:39.624" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170509 20:17:39.624" starttime="20170509 20:17:39.623"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170509 20:17:39.624" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170509 20:17:39.624" starttime="20170509 20:17:39.624"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170509 20:17:39.804" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170509 20:17:39.804" starttime="20170509 20:17:39.625"></status>
</kw>
<msg timestamp="20170509 20:17:39.804" level="INFO">${status} = PASS</msg>
<msg timestamp="20170509 20:17:39.804" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170509 20:17:39.804" starttime="20170509 20:17:39.625"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170509 20:17:39.805" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170509 20:17:39.805" starttime="20170509 20:17:39.805"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170509 20:17:39.806" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170509 20:17:39.806" starttime="20170509 20:17:39.805"></status>
</kw>
<status status="PASS" endtime="20170509 20:17:39.806" starttime="20170509 20:17:39.619"></status>
</kw>
<status status="PASS" endtime="20170509 20:17:39.806" starttime="20170509 20:17:39.619"></status>
</kw>
<status status="PASS" endtime="20170509 20:17:39.806" starttime="20170509 20:17:39.618"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170509 20:17:39.807" level="INFO">${base_uri} = /xyz/openbmc_project/logging/entry//enumerate</msg>
<status status="PASS" endtime="20170509 20:17:39.807" starttime="20170509 20:17:39.806"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170509 20:17:39.808" starttime="20170509 20:17:39.807"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170509 20:17:39.864" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry//enumerate, headers=None </msg>
<msg timestamp="20170509 20:17:39.864" level="INFO">${ret} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20170509 20:17:39.864" starttime="20170509 20:17:39.808"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170509 20:17:39.865" starttime="20170509 20:17:39.864"></status>
</kw>
<msg timestamp="20170509 20:17:39.865" level="INFO">${resp} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20170509 20:17:39.865" starttime="20170509 20:17:39.617"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170509 20:17:39.866" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20170509 20:17:39.866" level="FAIL">404 != 200</msg>
<status status="FAIL" endtime="20170509 20:17:39.866" starttime="20170509 20:17:39.866"></status>
</kw>
<msg timestamp="20170509 20:17:39.866" level="INFO">${status} = False</msg>
<status status="PASS" endtime="20170509 20:17:39.866" starttime="20170509 20:17:39.865"></status>
</kw>
<kw name="Return From Keyword If" library="BuiltIn">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
</arguments>
<msg timestamp="20170509 20:17:39.867" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" endtime="20170509 20:17:39.867" starttime="20170509 20:17:39.867"></status>
</kw>
<status status="PASS" endtime="20170509 20:17:39.867" starttime="20170509 20:17:39.617"></status>
</kw>
<status status="PASS" endtime="20170509 20:17:39.867" starttime="20170509 20:17:39.596"></status>
</kw>
<status status="PASS" endtime="20170509 20:17:39.867" starttime="20170509 20:17:39.593"></status>
</kw>
<status status="PASS" endtime="20170509 20:17:39.868" starttime="20170509 20:17:39.593"></status>
</kw>
<kw type="foritem" name="${method} = ('OS FFDC', 'OS FFDC Files')">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status status="PASS" endtime="20170509 20:17:39.869" starttime="20170509 20:17:39.869"></status>
</kw>
<msg timestamp="20170509 20:17:39.869" level="INFO">${status} = PASS</msg>
<msg timestamp="20170509 20:17:39.869" level="INFO">${ret_values} = None</msg>
<status status="PASS" endtime="20170509 20:17:39.870" starttime="20170509 20:17:39.869"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status status="PASS" endtime="20170509 20:17:39.870" starttime="20170509 20:17:39.870"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="OS FFDC Files" library="openbmc_ffdc_methods">
<doc>Get the command list and iterate</doc>
<kw name="Return From Keyword If" library="BuiltIn">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${OS_HOST}' == '${EMPTY}'</arg>
<arg>No OS Host Provided</arg>
</arguments>
<msg timestamp="20170509 20:17:39.892" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" endtime="20170509 20:17:39.892" starttime="20170509 20:17:39.892"></status>
</kw>
<status status="PASS" endtime="20170509 20:17:39.892" starttime="20170509 20:17:39.890"></status>
</kw>
<status status="PASS" endtime="20170509 20:17:39.893" starttime="20170509 20:17:39.870"></status>
</kw>
<status status="PASS" endtime="20170509 20:17:39.893" starttime="20170509 20:17:39.868"></status>
</kw>
<status status="PASS" endtime="20170509 20:17:39.893" starttime="20170509 20:17:39.868"></status>
</kw>
<status status="PASS" endtime="20170509 20:17:39.893" starttime="20170509 20:17:27.363"></status>
</kw>
<status status="PASS" endtime="20170509 20:17:39.893" starttime="20170509 20:17:27.361"></status>
</kw>
<status status="PASS" endtime="20170509 20:17:39.893" starttime="20170509 20:17:27.361"></status>
</kw>
<status status="PASS" endtime="20170509 20:17:39.893" starttime="20170509 20:17:27.361"></status>
</kw>
<kw name="Close All Connections" library="SSHLibrary">
<doc>Closes all open connections.</doc>
<status status="PASS" endtime="20170509 20:17:40.167" starttime="20170509 20:17:39.893"></status>
</kw>
<status status="PASS" endtime="20170509 20:17:40.167" starttime="20170509 20:17:27.360"></status>
</kw>
<status status="PASS" endtime="20170509 20:17:40.167" starttime="20170509 20:17:22.530"></status>
</kw>
<status status="PASS" endtime="20170509 20:17:40.167" starttime="20170509 20:17:22.530"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}'=='True'</arg>
<arg>Recover Quiesced Host</arg>
</arguments>
<status status="PASS" endtime="20170509 20:17:40.168" starttime="20170509 20:17:40.168"></status>
</kw>
<kw name="Log Test Case Status" library="openbmc_ffdc_methods">
<doc>Test case execution result history.</doc>
<kw name="Get Variable Value" library="BuiltIn">
<doc>Returns variable value or ``default`` if the variable does not exist.</doc>
<arguments>
<arg>${FFDC_DIR_PATH_STYLE}</arg>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${FFDC_DIR_PATH_STYLE}</var>
</assign>
<msg timestamp="20170509 20:17:40.169" level="INFO">${FFDC_DIR_PATH_STYLE} = 0</msg>
<status status="PASS" endtime="20170509 20:17:40.169" starttime="20170509 20:17:40.169"></status>
</kw>
<kw name="Get Variable Value" library="BuiltIn">
<doc>Returns variable value or ``default`` if the variable does not exist.</doc>
<arguments>
<arg>${FFDC_DIR_PATH}</arg>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${FFDC_DIR_PATH}</var>
</assign>
<msg timestamp="20170509 20:17:40.170" level="INFO">${FFDC_DIR_PATH} = 20170509201725574046_TestBiosUpdate/20170509201725574046_HostBIOSUpdate/</msg>
<status status="PASS" endtime="20170509 20:17:40.170" starttime="20170509 20:17:40.170"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${FFDC_DIR_PATH}' == '${EMPTY}'</arg>
<arg>Set FFDC Defaults</arg>
</arguments>
<status status="PASS" endtime="20170509 20:17:40.171" starttime="20170509 20:17:40.170"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${FFDC_DIR_PATH_STYLE}' == '${1}'</arg>
<arg>Run Keywords</arg>
<arg>Set Global Variable</arg>
<arg>${FFDC_LOG_PATH}</arg>
<arg>${FFDC_DIR_PATH}</arg>
<arg>AND</arg>
<arg>Set Global Variable</arg>
<arg>${TEST_HISTORY}</arg>
<arg>${FFDC_DIR_PATH}test_history.txt</arg>
</arguments>
<status status="PASS" endtime="20170509 20:17:40.171" starttime="20170509 20:17:40.171"></status>
</kw>
<kw name="Create Directory" library="OperatingSystem">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>${FFDC_LOG_PATH}</arg>
</arguments>
<msg timestamp="20170509 20:17:40.172" html="yes" level="INFO">Directory '&lt;a href="file:///home/fspcibld"&gt;/home/fspcibld&lt;/a&gt;' already exists.</msg>
<status status="PASS" endtime="20170509 20:17:40.172" starttime="20170509 20:17:40.172"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>OperatingSystem.File Should Exist</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<assign>
<var>${exist}</var>
</assign>
<kw name="File Should Exist" library="OperatingSystem">
<doc>Fails unless the given ``path`` points to an existing file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
</arguments>
<msg timestamp="20170509 20:17:40.173" html="yes" level="INFO">File '&lt;a href="file:///home/fspcibld/logs/test_history.txt"&gt;/home/fspcibld/logs/test_history.txt&lt;/a&gt;' exists.</msg>
<status status="PASS" endtime="20170509 20:17:40.173" starttime="20170509 20:17:40.173"></status>
</kw>
<msg timestamp="20170509 20:17:40.173" level="INFO">${exist} = True</msg>
<status status="PASS" endtime="20170509 20:17:40.173" starttime="20170509 20:17:40.172"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${exist}' == '${False}'</arg>
<arg>Create File</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<status status="PASS" endtime="20170509 20:17:40.174" starttime="20170509 20:17:40.173"></status>
</kw>
<kw name="Rpvars" library="gen_robot_print">
<arguments>
<arg>TEST_HISTORY</arg>
</arguments>
<status status="PASS" endtime="20170509 20:17:40.174" starttime="20170509 20:17:40.174"></status>
</kw>
<kw name="Get Current Time Stamp" library="openbmc_ffdc_utils">
<doc>Get the current time stamp data</doc>
<assign>
<var>${cur_time}</var>
</assign>
<kw name="Get Current Date" library="DateTime">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20170509 20:17:40.176" level="INFO">${cur_time} = 2017-05-09 20:17:40:175449</msg>
<status status="PASS" endtime="20170509 20:17:40.176" starttime="20170509 20:17:40.175"></status>
</kw>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20170509 20:17:40.176" level="INFO">${cur_time} = 20170509201740175449</msg>
<status status="PASS" endtime="20170509 20:17:40.176" starttime="20170509 20:17:40.176"></status>
</kw>
<msg timestamp="20170509 20:17:40.176" level="INFO">${cur_time} = 20170509201740175449</msg>
<status status="PASS" endtime="20170509 20:17:40.176" starttime="20170509 20:17:40.175"></status>
</kw>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
<arg>${cur_time}:${SUITE_NAME}:${TEST_NAME}:${TEST_STATUS}${\n}</arg>
</arguments>
<msg timestamp="20170509 20:17:40.177" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/test_history.txt"&gt;/home/fspcibld/logs/test_history.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170509 20:17:40.177" starttime="20170509 20:17:40.177"></status>
</kw>
<status status="PASS" endtime="20170509 20:17:40.177" starttime="20170509 20:17:40.169"></status>
</kw>
<status status="PASS" endtime="20170509 20:17:40.178" starttime="20170509 20:17:22.272"></status>
</kw>
<status status="PASS" endtime="20170509 20:17:40.178" starttime="20170509 20:17:22.262"></status>
</kw>
<status status="PASS" endtime="20170509 20:17:40.178" starttime="20170509 20:17:22.261"></status>
</kw>
<doc>Update PNOR image and verify.</doc>
<tags>
<tag>Host_BIOS_Update</tag>
<tag>open-power</tag>
</tags>
<status status="FAIL" endtime="20170509 20:17:40.178" critical="yes" starttime="20170509 20:16:41.913">404 != 200</status>
</test>
<test id="s1-t2" name="Host BIOS Power On">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${PREV_TEST_STATUS}' == 'PASS'</arg>
<arg>Validate Power On</arg>
</arguments>
<status status="PASS" endtime="20170509 20:17:40.180" starttime="20170509 20:17:40.180"></status>
</kw>
<kw type="teardown" name="Test Bios Teardown">
<doc>Log FFDC if test suite fails and collect SOL log for</doc>
<kw name="Printn" library="gen_print">
<status status="PASS" endtime="20170509 20:17:40.182" starttime="20170509 20:17:40.181"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>FFDC On Test Case Fail</arg>
</arguments>
<kw name="FFDC On Test Case Fail" library="openbmc_ffdc">
<doc>Generic FFDC entry point. Place holder to hook in</doc>
<kw name="Is Host Quiesced" library="state_manager">
<doc>Check if host state is quiesced.</doc>
<assign>
<var>${status}</var>
</assign>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170509 20:17:40.197" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170509 20:17:40.198" starttime="20170509 20:17:40.197"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170509 20:17:40.199" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170509 20:17:40.199" starttime="20170509 20:17:40.199"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170509 20:17:40.200" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170509 20:17:40.200" starttime="20170509 20:17:40.199"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170509 20:17:40.201" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170509 20:17:40.201" starttime="20170509 20:17:40.200"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170509 20:17:40.585" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170509 20:17:40.585" starttime="20170509 20:17:40.202"></status>
</kw>
<msg timestamp="20170509 20:17:40.586" level="INFO">${status} = PASS</msg>
<msg timestamp="20170509 20:17:40.586" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170509 20:17:40.586" starttime="20170509 20:17:40.201"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170509 20:17:40.586" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170509 20:17:40.586" starttime="20170509 20:17:40.586"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170509 20:17:40.587" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170509 20:17:40.587" starttime="20170509 20:17:40.587"></status>
</kw>
<status status="PASS" endtime="20170509 20:17:40.587" starttime="20170509 20:17:40.196"></status>
</kw>
<status status="PASS" endtime="20170509 20:17:40.587" starttime="20170509 20:17:40.195"></status>
</kw>
<status status="PASS" endtime="20170509 20:17:40.587" starttime="20170509 20:17:40.194"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170509 20:17:40.588" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" endtime="20170509 20:17:40.588" starttime="20170509 20:17:40.588"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170509 20:17:40.589" starttime="20170509 20:17:40.588"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170509 20:17:40.651" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None </msg>
<msg timestamp="20170509 20:17:40.651" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170509 20:17:40.651" starttime="20170509 20:17:40.589"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170509 20:17:40.652" starttime="20170509 20:17:40.652"></status>
</kw>
<msg timestamp="20170509 20:17:40.652" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170509 20:17:40.652" starttime="20170509 20:17:40.194"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170509 20:17:40.653" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170509 20:17:40.653" starttime="20170509 20:17:40.653"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170509 20:17:40.654" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170509 20:17:40.654" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170509 20:17:40.654" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Off'}</msg>
<status status="PASS" endtime="20170509 20:17:40.654" starttime="20170509 20:17:40.653"></status>
</kw>
<msg timestamp="20170509 20:17:40.654" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Off</msg>
<status status="PASS" endtime="20170509 20:17:40.654" starttime="20170509 20:17:40.193"></status>
</kw>
<msg timestamp="20170509 20:17:40.654" level="INFO">${host_state} = Off</msg>
<status status="PASS" endtime="20170509 20:17:40.654" starttime="20170509 20:17:40.193"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal</arg>
<arg>${host_state}</arg>
<arg>Quiesced</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${host_state}</arg>
<arg>Quiesced</arg>
</arguments>
<msg timestamp="20170509 20:17:40.656" level="FAIL">Off != Quiesced</msg>
<status status="FAIL" endtime="20170509 20:17:40.656" starttime="20170509 20:17:40.655"></status>
</kw>
<msg timestamp="20170509 20:17:40.656" level="INFO">${status} = False</msg>
<status status="PASS" endtime="20170509 20:17:40.656" starttime="20170509 20:17:40.655"></status>
</kw>
<msg timestamp="20170509 20:17:40.656" level="INFO">${status} = False</msg>
<status status="PASS" endtime="20170509 20:17:40.656" starttime="20170509 20:17:40.192"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${TEST_STATUS}' == 'FAIL' or '${status}'=='True'</arg>
<arg>FFDC</arg>
</arguments>
<status status="PASS" endtime="20170509 20:17:40.657" starttime="20170509 20:17:40.656"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}'=='True'</arg>
<arg>Recover Quiesced Host</arg>
</arguments>
<status status="PASS" endtime="20170509 20:17:40.657" starttime="20170509 20:17:40.657"></status>
</kw>
<kw name="Log Test Case Status" library="openbmc_ffdc_methods">
<doc>Test case execution result history.</doc>
<kw name="Get Variable Value" library="BuiltIn">
<doc>Returns variable value or ``default`` if the variable does not exist.</doc>
<arguments>
<arg>${FFDC_DIR_PATH_STYLE}</arg>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${FFDC_DIR_PATH_STYLE}</var>
</assign>
<msg timestamp="20170509 20:17:40.658" level="INFO">${FFDC_DIR_PATH_STYLE} = 0</msg>
<status status="PASS" endtime="20170509 20:17:40.658" starttime="20170509 20:17:40.658"></status>
</kw>
<kw name="Get Variable Value" library="BuiltIn">
<doc>Returns variable value or ``default`` if the variable does not exist.</doc>
<arguments>
<arg>${FFDC_DIR_PATH}</arg>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${FFDC_DIR_PATH}</var>
</assign>
<msg timestamp="20170509 20:17:40.659" level="INFO">${FFDC_DIR_PATH} = 20170509201725574046_TestBiosUpdate/20170509201725574046_HostBIOSUpdate/</msg>
<status status="PASS" endtime="20170509 20:17:40.659" starttime="20170509 20:17:40.658"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${FFDC_DIR_PATH}' == '${EMPTY}'</arg>
<arg>Set FFDC Defaults</arg>
</arguments>
<status status="PASS" endtime="20170509 20:17:40.659" starttime="20170509 20:17:40.659"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${FFDC_DIR_PATH_STYLE}' == '${1}'</arg>
<arg>Run Keywords</arg>
<arg>Set Global Variable</arg>
<arg>${FFDC_LOG_PATH}</arg>
<arg>${FFDC_DIR_PATH}</arg>
<arg>AND</arg>
<arg>Set Global Variable</arg>
<arg>${TEST_HISTORY}</arg>
<arg>${FFDC_DIR_PATH}test_history.txt</arg>
</arguments>
<status status="PASS" endtime="20170509 20:17:40.660" starttime="20170509 20:17:40.660"></status>
</kw>
<kw name="Create Directory" library="OperatingSystem">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>${FFDC_LOG_PATH}</arg>
</arguments>
<msg timestamp="20170509 20:17:40.661" html="yes" level="INFO">Directory '&lt;a href="file:///home/fspcibld"&gt;/home/fspcibld&lt;/a&gt;' already exists.</msg>
<status status="PASS" endtime="20170509 20:17:40.661" starttime="20170509 20:17:40.660"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>OperatingSystem.File Should Exist</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<assign>
<var>${exist}</var>
</assign>
<kw name="File Should Exist" library="OperatingSystem">
<doc>Fails unless the given ``path`` points to an existing file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
</arguments>
<msg timestamp="20170509 20:17:40.662" html="yes" level="INFO">File '&lt;a href="file:///home/fspcibld/logs/test_history.txt"&gt;/home/fspcibld/logs/test_history.txt&lt;/a&gt;' exists.</msg>
<status status="PASS" endtime="20170509 20:17:40.662" starttime="20170509 20:17:40.662"></status>
</kw>
<msg timestamp="20170509 20:17:40.662" level="INFO">${exist} = True</msg>
<status status="PASS" endtime="20170509 20:17:40.662" starttime="20170509 20:17:40.661"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${exist}' == '${False}'</arg>
<arg>Create File</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<status status="PASS" endtime="20170509 20:17:40.663" starttime="20170509 20:17:40.663"></status>
</kw>
<kw name="Rpvars" library="gen_robot_print">
<arguments>
<arg>TEST_HISTORY</arg>
</arguments>
<status status="PASS" endtime="20170509 20:17:40.663" starttime="20170509 20:17:40.663"></status>
</kw>
<kw name="Get Current Time Stamp" library="openbmc_ffdc_utils">
<doc>Get the current time stamp data</doc>
<assign>
<var>${cur_time}</var>
</assign>
<kw name="Get Current Date" library="DateTime">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20170509 20:17:40.665" level="INFO">${cur_time} = 2017-05-09 20:17:40:665013</msg>
<status status="PASS" endtime="20170509 20:17:40.665" starttime="20170509 20:17:40.665"></status>
</kw>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20170509 20:17:40.666" level="INFO">${cur_time} = 20170509201740665013</msg>
<status status="PASS" endtime="20170509 20:17:40.666" starttime="20170509 20:17:40.666"></status>
</kw>
<msg timestamp="20170509 20:17:40.666" level="INFO">${cur_time} = 20170509201740665013</msg>
<status status="PASS" endtime="20170509 20:17:40.666" starttime="20170509 20:17:40.664"></status>
</kw>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
<arg>${cur_time}:${SUITE_NAME}:${TEST_NAME}:${TEST_STATUS}${\n}</arg>
</arguments>
<msg timestamp="20170509 20:17:40.667" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/test_history.txt"&gt;/home/fspcibld/logs/test_history.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170509 20:17:40.667" starttime="20170509 20:17:40.666"></status>
</kw>
<status status="PASS" endtime="20170509 20:17:40.667" starttime="20170509 20:17:40.657"></status>
</kw>
<status status="PASS" endtime="20170509 20:17:40.667" starttime="20170509 20:17:40.192"></status>
</kw>
<status status="PASS" endtime="20170509 20:17:40.667" starttime="20170509 20:17:40.182"></status>
</kw>
<status status="PASS" endtime="20170509 20:17:40.667" starttime="20170509 20:17:40.181"></status>
</kw>
<doc>Power On the system and wait for OS</doc>
<tags>
<tag>Host_BIOS_Power_On</tag>
<tag>open-power</tag>
</tags>
<status status="PASS" endtime="20170509 20:17:40.668" critical="yes" starttime="20170509 20:17:40.179"></status>
</test>
<doc>Update the PNOR image on the host for hostboot CI purposes.</doc>
<status status="FAIL" endtime="20170509 20:17:40.671" starttime="20170509 20:16:41.019"></status>
</suite>
<statistics>
<total>
<stat fail="1" pass="1">Critical Tests</stat>
<stat fail="1" pass="1">All Tests</stat>
</total>
<tag>
<stat fail="0" pass="1">Host_BIOS_Power_On</stat>
<stat fail="1" pass="0">Host_BIOS_Update</stat>
<stat fail="1" pass="1">open-power</stat>
</tag>
<suite>
<stat fail="1" id="s1" name="Test Bios Update" pass="1">Test Bios Update</stat>
</suite>
</statistics>
<errors>
</errors>
</robot>
