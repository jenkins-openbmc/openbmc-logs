<?xml version="1.0" encoding="UTF-8"?>
<robot generator="Robot 3.0.2 (Python 2.7.12 on linux2)" generated="20170629 21:26:45.364">
<suite id="s1" source="/tmp/fspcibld/23280/obmc-robot/tests" name="Tests">
<kw type="setup" name="System Driver Data">
<doc>System driver information.</doc>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg level="FAIL" timestamp="20170629 21:26:45.816">Dictionary does not contain key 'host'.</msg>
<status starttime="20170629 21:26:45.816" status="FAIL" endtime="20170629 21:26:45.817"></status>
</kw>
<msg level="INFO" timestamp="20170629 21:26:45.817">${has_host} = False</msg>
<status starttime="20170629 21:26:45.816" status="PASS" endtime="20170629 21:26:45.817"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status starttime="20170629 21:26:45.817" status="PASS" endtime="20170629 21:26:45.818"></status>
</kw>
<status starttime="20170629 21:26:45.817" status="PASS" endtime="20170629 21:26:45.818"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<kw name="User input SSH and HTTPs Ports" library="connection_client">
<doc>Update the global SSH and HTTPs port variable for QEMU</doc>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${SSH_PORT}</arg>
</arguments>
<assign>
<var>${port_num}</var>
</assign>
<msg level="INFO" timestamp="20170629 21:26:45.819">${port_num} = 22</msg>
<status starttime="20170629 21:26:45.819" status="PASS" endtime="20170629 21:26:45.819"></status>
</kw>
<kw name="Replace Variables" library="BuiltIn">
<doc>Replaces variables in the given text with their current values.</doc>
<arguments>
<arg>${port_num}</arg>
</arguments>
<assign>
<var>${SSH_PORT}</var>
</assign>
<msg level="INFO" timestamp="20170629 21:26:45.820">${SSH_PORT} = 22</msg>
<status starttime="20170629 21:26:45.819" status="PASS" endtime="20170629 21:26:45.820"></status>
</kw>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${HTTPS_PORT}</arg>
</arguments>
<assign>
<var>${https_num}</var>
</assign>
<msg level="INFO" timestamp="20170629 21:26:45.820">${https_num} = 443</msg>
<status starttime="20170629 21:26:45.820" status="PASS" endtime="20170629 21:26:45.820"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${AUTH_URI}</arg>
<arg>https://${OPENBMC_HOST}:${https_num}</arg>
</arguments>
<msg level="INFO" timestamp="20170629 21:26:45.821">${AUTH_URI} = https://9.3.21.61:443</msg>
<status starttime="20170629 21:26:45.821" status="PASS" endtime="20170629 21:26:45.821"></status>
</kw>
<status starttime="20170629 21:26:45.819" status="PASS" endtime="20170629 21:26:45.821"></status>
</kw>
<status starttime="20170629 21:26:45.818" status="PASS" endtime="20170629 21:26:45.821"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg level="FAIL" timestamp="20170629 21:26:45.822">Dictionary does not contain key 'port'.</msg>
<status starttime="20170629 21:26:45.822" status="FAIL" endtime="20170629 21:26:45.822"></status>
</kw>
<msg level="INFO" timestamp="20170629 21:26:45.822">${has_port} = False</msg>
<status starttime="20170629 21:26:45.822" status="PASS" endtime="20170629 21:26:45.823"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keywords" library="BuiltIn">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
</arguments>
<status starttime="20170629 21:26:45.824" status="PASS" endtime="20170629 21:26:45.824"></status>
</kw>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status starttime="20170629 21:26:45.824" status="PASS" endtime="20170629 21:26:45.825"></status>
</kw>
<status starttime="20170629 21:26:45.823" status="PASS" endtime="20170629 21:26:45.825"></status>
</kw>
<status starttime="20170629 21:26:45.823" status="PASS" endtime="20170629 21:26:45.825"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg level="INFO" timestamp="20170629 21:26:45.825">Logging into '9.3.21.61:22' as 'root'.</msg>
<msg level="INFO" timestamp="20170629 21:26:47.517">Read output: root@witherspoon:~#</msg>
<status starttime="20170629 21:26:45.825" status="PASS" endtime="20170629 21:26:47.517"></status>
</kw>
<status starttime="20170629 21:26:45.815" status="PASS" endtime="20170629 21:26:47.517"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Log BMC Driver Details</arg>
</arguments>
<kw name="Log BMC Driver Details">
<doc>Get BMC driver details and log.</doc>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${DRIVER_CMD}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${output}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170629 21:26:47.519">Executing command 'cat /etc/os-release | grep ^VERSION_ID='.</msg>
<msg level="INFO" timestamp="20170629 21:26:47.606">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20170629 21:26:47.606">${output} = VERSION_ID="v1.99.7-68-ga53f993"</msg>
<msg level="INFO" timestamp="20170629 21:26:47.606">${stderr} = </msg>
<status starttime="20170629 21:26:47.518" status="PASS" endtime="20170629 21:26:47.606"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg level="INFO" timestamp="20170629 21:26:47.607">Length is 0</msg>
<status starttime="20170629 21:26:47.607" status="PASS" endtime="20170629 21:26:47.607"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg level="INFO" timestamp="20170629 21:26:47.607">VERSION_ID="v1.99.7-68-ga53f993"</msg>
<status starttime="20170629 21:26:47.607" status="PASS" endtime="20170629 21:26:47.607"></status>
</kw>
<status starttime="20170629 21:26:47.518" status="PASS" endtime="20170629 21:26:47.608"></status>
</kw>
<status starttime="20170629 21:26:47.518" status="PASS" endtime="20170629 21:26:47.608"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Log PNOR Driver Details</arg>
</arguments>
<kw name="Log PNOR Driver Details">
<doc>Get PNOR driver details and log.</doc>
<kw name="Execute Command On BMC" library="utils">
<doc>Execute given command on BMC and return output.</doc>
<arguments>
<arg>${PNOR_CMD}</arg>
</arguments>
<assign>
<var>${pnor_details}</var>
</assign>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${command}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170629 21:26:47.609">Executing command '/usr/sbin/pflash -r /tmp/out.txt -P VERSION; cat /tmp/out.txt'.</msg>
<msg level="INFO" timestamp="20170629 21:26:47.867">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20170629 21:26:47.867">${stdout} = Reading to "/tmp/out.txt" from 0x02820000..0x02821000 !
[                                                  ] 0%[==================================================] 100%
open-power-witherspoon-v1.17-...</msg>
<msg level="INFO" timestamp="20170629 21:26:47.867">${stderr} = </msg>
<status starttime="20170629 21:26:47.609" status="PASS" endtime="20170629 21:26:47.867"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg level="INFO" timestamp="20170629 21:26:47.868">Length is 0</msg>
<status starttime="20170629 21:26:47.867" status="PASS" endtime="20170629 21:26:47.868"></status>
</kw>
<msg level="INFO" timestamp="20170629 21:26:47.868">${pnor_details} = Reading to "/tmp/out.txt" from 0x02820000..0x02821000 !
[                                                  ] 0%[==================================================] 100%
open-power-witherspoon-v1.17-...</msg>
<status starttime="20170629 21:26:47.608" status="PASS" endtime="20170629 21:26:47.868"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>PNOR_INFO=${pnor_details}</arg>
</arguments>
<msg level="INFO" timestamp="20170629 21:26:47.868">PNOR_INFO=Reading to "/tmp/out.txt" from 0x02820000..0x02821000 !
[                                                  ] 0%[==================================================] 100%
open-power-witherspoon-v1.17-107-ga5da4ba-dirty
	buildroot-2017.02.2-7-g23118ce
	skiboot-5.6.0-158-ga1e0a047b2a0
	hostboot-site_local-hostboot-hb0507a_1519.840-4189-g7299a25
	linux-4.11.6-openpower1-p1c63872
	petitboot-v1.4.3-p9f74a13
	machine-xml-5b59a1d
	occ-1dc97a6
	hostboot-binaries-711147e
	capp-ucode-9c73e9f
	sbe-02021c6
</msg>
<status starttime="20170629 21:26:47.868" status="PASS" endtime="20170629 21:26:47.869"></status>
</kw>
<status starttime="20170629 21:26:47.608" status="PASS" endtime="20170629 21:26:47.869"></status>
</kw>
<status starttime="20170629 21:26:47.608" status="PASS" endtime="20170629 21:26:47.870"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Log BMC Model</arg>
</arguments>
<kw name="Log BMC Model">
<doc>Fetch BMC Model name from system and log.</doc>
<kw name="Get BMC System Model" library="utils">
<doc>Get the BMC model from the device tree.</doc>
<assign>
<var>${bmc_model}</var>
</assign>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg level="FAIL" timestamp="20170629 21:26:47.872">Dictionary does not contain key 'host'.</msg>
<status starttime="20170629 21:26:47.872" status="FAIL" endtime="20170629 21:26:47.872"></status>
</kw>
<msg level="INFO" timestamp="20170629 21:26:47.872">${has_host} = False</msg>
<status starttime="20170629 21:26:47.871" status="PASS" endtime="20170629 21:26:47.872"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status starttime="20170629 21:26:47.873" status="PASS" endtime="20170629 21:26:47.873"></status>
</kw>
<status starttime="20170629 21:26:47.872" status="PASS" endtime="20170629 21:26:47.873"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<kw name="User input SSH and HTTPs Ports" library="connection_client">
<doc>Update the global SSH and HTTPs port variable for QEMU</doc>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${SSH_PORT}</arg>
</arguments>
<assign>
<var>${port_num}</var>
</assign>
<msg level="INFO" timestamp="20170629 21:26:47.875">${port_num} = 22</msg>
<status starttime="20170629 21:26:47.874" status="PASS" endtime="20170629 21:26:47.875"></status>
</kw>
<kw name="Replace Variables" library="BuiltIn">
<doc>Replaces variables in the given text with their current values.</doc>
<arguments>
<arg>${port_num}</arg>
</arguments>
<assign>
<var>${SSH_PORT}</var>
</assign>
<msg level="INFO" timestamp="20170629 21:26:47.875">${SSH_PORT} = 22</msg>
<status starttime="20170629 21:26:47.875" status="PASS" endtime="20170629 21:26:47.875"></status>
</kw>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${HTTPS_PORT}</arg>
</arguments>
<assign>
<var>${https_num}</var>
</assign>
<msg level="INFO" timestamp="20170629 21:26:47.876">${https_num} = 443</msg>
<status starttime="20170629 21:26:47.875" status="PASS" endtime="20170629 21:26:47.876"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${AUTH_URI}</arg>
<arg>https://${OPENBMC_HOST}:${https_num}</arg>
</arguments>
<msg level="INFO" timestamp="20170629 21:26:47.877">${AUTH_URI} = https://9.3.21.61:443</msg>
<status starttime="20170629 21:26:47.876" status="PASS" endtime="20170629 21:26:47.877"></status>
</kw>
<status starttime="20170629 21:26:47.874" status="PASS" endtime="20170629 21:26:47.877"></status>
</kw>
<status starttime="20170629 21:26:47.874" status="PASS" endtime="20170629 21:26:47.877"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg level="FAIL" timestamp="20170629 21:26:47.878">Dictionary does not contain key 'port'.</msg>
<status starttime="20170629 21:26:47.878" status="FAIL" endtime="20170629 21:26:47.878"></status>
</kw>
<msg level="INFO" timestamp="20170629 21:26:47.878">${has_port} = False</msg>
<status starttime="20170629 21:26:47.877" status="PASS" endtime="20170629 21:26:47.878"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keywords" library="BuiltIn">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
</arguments>
<status starttime="20170629 21:26:47.879" status="PASS" endtime="20170629 21:26:47.880"></status>
</kw>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status starttime="20170629 21:26:47.880" status="PASS" endtime="20170629 21:26:47.880"></status>
</kw>
<status starttime="20170629 21:26:47.879" status="PASS" endtime="20170629 21:26:47.880"></status>
</kw>
<status starttime="20170629 21:26:47.878" status="PASS" endtime="20170629 21:26:47.880"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg level="INFO" timestamp="20170629 21:26:47.881">Logging into '9.3.21.61:22' as 'root'.</msg>
<msg level="INFO" timestamp="20170629 21:26:49.565">Read output: root@witherspoon:~#</msg>
<status starttime="20170629 21:26:47.881" status="PASS" endtime="20170629 21:26:49.565"></status>
</kw>
<status starttime="20170629 21:26:47.871" status="PASS" endtime="20170629 21:26:49.565"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>cat ${devicetree_base} | cut -d " " -f 1</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${bmc_model}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170629 21:26:49.566">Executing command 'cat /sys/firmware/devicetree/base/model | cut -d " " -f 1'.</msg>
<msg level="INFO" timestamp="20170629 21:26:49.653">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20170629 21:26:49.653">${bmc_model} = Witherspoon</msg>
<msg level="INFO" timestamp="20170629 21:26:49.653">${stderr} = </msg>
<status starttime="20170629 21:26:49.565" status="PASS" endtime="20170629 21:26:49.653"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg level="INFO" timestamp="20170629 21:26:49.653">Length is 0</msg>
<status starttime="20170629 21:26:49.653" status="PASS" endtime="20170629 21:26:49.653"></status>
</kw>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${bmc_model}</arg>
</arguments>
<msg level="INFO" timestamp="20170629 21:26:49.654">Length is 11</msg>
<status starttime="20170629 21:26:49.654" status="PASS" endtime="20170629 21:26:49.654"></status>
</kw>
<msg level="INFO" timestamp="20170629 21:26:49.654">${bmc_model} = Witherspoon</msg>
<status starttime="20170629 21:26:47.870" status="PASS" endtime="20170629 21:26:49.654"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>BMC Model=${bmc_model}</arg>
</arguments>
<msg level="INFO" timestamp="20170629 21:26:49.655">BMC Model=Witherspoon</msg>
<status starttime="20170629 21:26:49.654" status="PASS" endtime="20170629 21:26:49.655"></status>
</kw>
<status starttime="20170629 21:26:47.870" status="PASS" endtime="20170629 21:26:49.655"></status>
</kw>
<status starttime="20170629 21:26:47.870" status="PASS" endtime="20170629 21:26:49.655"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Enable Core Dump On BMC</arg>
</arguments>
<kw name="Enable Core Dump On BMC" library="utils">
<doc>Enable core dump collection.</doc>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg level="FAIL" timestamp="20170629 21:26:49.657">Dictionary does not contain key 'host'.</msg>
<status starttime="20170629 21:26:49.657" status="FAIL" endtime="20170629 21:26:49.657"></status>
</kw>
<msg level="INFO" timestamp="20170629 21:26:49.657">${has_host} = False</msg>
<status starttime="20170629 21:26:49.656" status="PASS" endtime="20170629 21:26:49.657"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status starttime="20170629 21:26:49.658" status="PASS" endtime="20170629 21:26:49.658"></status>
</kw>
<status starttime="20170629 21:26:49.657" status="PASS" endtime="20170629 21:26:49.658"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<kw name="User input SSH and HTTPs Ports" library="connection_client">
<doc>Update the global SSH and HTTPs port variable for QEMU</doc>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${SSH_PORT}</arg>
</arguments>
<assign>
<var>${port_num}</var>
</assign>
<msg level="INFO" timestamp="20170629 21:26:49.660">${port_num} = 22</msg>
<status starttime="20170629 21:26:49.659" status="PASS" endtime="20170629 21:26:49.660"></status>
</kw>
<kw name="Replace Variables" library="BuiltIn">
<doc>Replaces variables in the given text with their current values.</doc>
<arguments>
<arg>${port_num}</arg>
</arguments>
<assign>
<var>${SSH_PORT}</var>
</assign>
<msg level="INFO" timestamp="20170629 21:26:49.660">${SSH_PORT} = 22</msg>
<status starttime="20170629 21:26:49.660" status="PASS" endtime="20170629 21:26:49.660"></status>
</kw>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${HTTPS_PORT}</arg>
</arguments>
<assign>
<var>${https_num}</var>
</assign>
<msg level="INFO" timestamp="20170629 21:26:49.661">${https_num} = 443</msg>
<status starttime="20170629 21:26:49.661" status="PASS" endtime="20170629 21:26:49.661"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${AUTH_URI}</arg>
<arg>https://${OPENBMC_HOST}:${https_num}</arg>
</arguments>
<msg level="INFO" timestamp="20170629 21:26:49.662">${AUTH_URI} = https://9.3.21.61:443</msg>
<status starttime="20170629 21:26:49.661" status="PASS" endtime="20170629 21:26:49.662"></status>
</kw>
<status starttime="20170629 21:26:49.659" status="PASS" endtime="20170629 21:26:49.662"></status>
</kw>
<status starttime="20170629 21:26:49.658" status="PASS" endtime="20170629 21:26:49.662"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg level="FAIL" timestamp="20170629 21:26:49.663">Dictionary does not contain key 'port'.</msg>
<status starttime="20170629 21:26:49.663" status="FAIL" endtime="20170629 21:26:49.663"></status>
</kw>
<msg level="INFO" timestamp="20170629 21:26:49.664">${has_port} = False</msg>
<status starttime="20170629 21:26:49.662" status="PASS" endtime="20170629 21:26:49.664"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keywords" library="BuiltIn">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
</arguments>
<status starttime="20170629 21:26:49.665" status="PASS" endtime="20170629 21:26:49.666"></status>
</kw>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status starttime="20170629 21:26:49.666" status="PASS" endtime="20170629 21:26:49.667"></status>
</kw>
<status starttime="20170629 21:26:49.665" status="PASS" endtime="20170629 21:26:49.667"></status>
</kw>
<status starttime="20170629 21:26:49.664" status="PASS" endtime="20170629 21:26:49.667"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg level="INFO" timestamp="20170629 21:26:49.667">Logging into '9.3.21.61:22' as 'root'.</msg>
<msg level="INFO" timestamp="20170629 21:26:51.413">Read output: root@witherspoon:~#</msg>
<status starttime="20170629 21:26:49.667" status="PASS" endtime="20170629 21:26:51.413"></status>
</kw>
<status starttime="20170629 21:26:49.656" status="PASS" endtime="20170629 21:26:51.414"></status>
</kw>
<kw name="Execute Command On BMC" library="utils">
<doc>Execute given command on BMC and return output.</doc>
<arguments>
<arg>echo '/tmp/core_%e.%p' | tee /proc/sys/kernel/core_pattern</arg>
</arguments>
<assign>
<var>${core_pattern}</var>
</assign>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${command}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170629 21:26:51.414">Executing command 'echo '/tmp/core_%e.%p' | tee /proc/sys/kernel/core_pattern'.</msg>
<msg level="INFO" timestamp="20170629 21:26:51.491">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20170629 21:26:51.491">${stdout} = /tmp/core_%e.%p</msg>
<msg level="INFO" timestamp="20170629 21:26:51.491">${stderr} = </msg>
<status starttime="20170629 21:26:51.414" status="PASS" endtime="20170629 21:26:51.491"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg level="INFO" timestamp="20170629 21:26:51.492">Length is 0</msg>
<status starttime="20170629 21:26:51.491" status="PASS" endtime="20170629 21:26:51.492"></status>
</kw>
<msg level="INFO" timestamp="20170629 21:26:51.492">${core_pattern} = /tmp/core_%e.%p</msg>
<status starttime="20170629 21:26:51.414" status="PASS" endtime="20170629 21:26:51.492"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${core_pattern}</arg>
<arg>/tmp/core_%e.%p</arg>
</arguments>
<status starttime="20170629 21:26:51.492" status="PASS" endtime="20170629 21:26:51.493"></status>
</kw>
<status starttime="20170629 21:26:49.655" status="PASS" endtime="20170629 21:26:51.493"></status>
</kw>
<status starttime="20170629 21:26:49.655" status="PASS" endtime="20170629 21:26:51.493"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${DEBUG_TARBALL_PATH}' != '${EMPTY}'</arg>
<arg>Run Keyword And Ignore Error</arg>
<arg>Install Debug Tarball On BMC</arg>
<arg>${DEBUG_TARBALL_PATH}</arg>
</arguments>
<status starttime="20170629 21:26:51.493" status="PASS" endtime="20170629 21:26:51.493"></status>
</kw>
<status starttime="20170629 21:26:45.815" status="PASS" endtime="20170629 21:26:51.493"></status>
</kw>
<suite id="s1-s1" source="/tmp/fspcibld/23280/obmc-robot/tests/security" name="Security">
<suite id="s1-s1-s1" source="/tmp/fspcibld/23280/obmc-robot/tests/security/test_ssl.robot" name="Test Ssl">
<test id="s1-s1-s1-t1" name="Test SSL Connection">
<kw name="Initialize OpenBMC" library="rest_client">
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170629 21:26:51.570">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=20, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170629 21:26:51.570" status="PASS" endtime="20170629 21:26:51.571"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170629 21:26:51.571">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170629 21:26:51.571" status="PASS" endtime="20170629 21:26:51.571"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170629 21:26:51.572">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170629 21:26:51.572" status="PASS" endtime="20170629 21:26:51.572"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170629 21:26:51.573">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170629 21:26:51.572" status="PASS" endtime="20170629 21:26:51.573"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170629 21:26:51.780">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170629 21:26:51.573" status="PASS" endtime="20170629 21:26:51.781"></status>
</kw>
<msg level="INFO" timestamp="20170629 21:26:51.781">${status} = PASS</msg>
<msg level="INFO" timestamp="20170629 21:26:51.781">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170629 21:26:51.573" status="PASS" endtime="20170629 21:26:51.781"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170629 21:26:51.782">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170629 21:26:51.781" status="PASS" endtime="20170629 21:26:51.782"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170629 21:26:51.782">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170629 21:26:51.782" status="PASS" endtime="20170629 21:26:51.782"></status>
</kw>
<status starttime="20170629 21:26:51.569" status="PASS" endtime="20170629 21:26:51.782"></status>
</kw>
<status starttime="20170629 21:26:51.569" status="PASS" endtime="20170629 21:26:51.783"></status>
</kw>
<status starttime="20170629 21:26:51.568" status="PASS" endtime="20170629 21:26:51.783"></status>
</kw>
<kw type="teardown" name="FFDC On Test Case Fail" library="openbmc_ffdc">
<doc>Generic FFDC entry point. Place holder to hook in</doc>
<kw name="Is Host Quiesced" library="state_manager">
<doc>Check if host state is quiesced.</doc>
<assign>
<var>${status}</var>
</assign>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170629 21:26:51.788">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170629 21:26:51.788" status="PASS" endtime="20170629 21:26:51.789"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170629 21:26:51.789">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170629 21:26:51.789" status="PASS" endtime="20170629 21:26:51.789"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170629 21:26:51.790">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170629 21:26:51.790" status="PASS" endtime="20170629 21:26:51.790"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170629 21:26:51.791">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170629 21:26:51.790" status="PASS" endtime="20170629 21:26:51.791"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170629 21:26:51.976">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170629 21:26:51.791" status="PASS" endtime="20170629 21:26:51.976"></status>
</kw>
<msg level="INFO" timestamp="20170629 21:26:51.976">${status} = PASS</msg>
<msg level="INFO" timestamp="20170629 21:26:51.977">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170629 21:26:51.791" status="PASS" endtime="20170629 21:26:51.977"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170629 21:26:51.977">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170629 21:26:51.977" status="PASS" endtime="20170629 21:26:51.977"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170629 21:26:51.978">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170629 21:26:51.978" status="PASS" endtime="20170629 21:26:51.978"></status>
</kw>
<status starttime="20170629 21:26:51.787" status="PASS" endtime="20170629 21:26:51.978"></status>
</kw>
<status starttime="20170629 21:26:51.787" status="PASS" endtime="20170629 21:26:51.978"></status>
</kw>
<status starttime="20170629 21:26:51.786" status="PASS" endtime="20170629 21:26:51.978"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170629 21:26:51.979">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170629 21:26:51.979" status="PASS" endtime="20170629 21:26:51.979"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170629 21:26:51.981">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170629 21:26:51.980" status="PASS" endtime="20170629 21:26:51.981"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170629 21:26:51.982">URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170629 21:26:51.982" status="PASS" endtime="20170629 21:26:51.982"></status>
</kw>
<status starttime="20170629 21:26:51.981" status="PASS" endtime="20170629 21:26:51.982"></status>
</kw>
<status starttime="20170629 21:26:51.980" status="PASS" endtime="20170629 21:26:51.982"></status>
</kw>
<status starttime="20170629 21:26:51.979" status="PASS" endtime="20170629 21:26:51.983"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170629 21:26:52.045">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170629 21:26:52.045">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170629 21:26:51.983" status="PASS" endtime="20170629 21:26:52.046"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170629 21:26:52.048">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170629 21:26:52.047" status="PASS" endtime="20170629 21:26:52.048"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170629 21:26:52.049">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170629 21:26:52.049" status="PASS" endtime="20170629 21:26:52.049"></status>
</kw>
<status starttime="20170629 21:26:52.048" status="PASS" endtime="20170629 21:26:52.049"></status>
</kw>
<status starttime="20170629 21:26:52.046" status="PASS" endtime="20170629 21:26:52.049"></status>
</kw>
<status starttime="20170629 21:26:52.046" status="PASS" endtime="20170629 21:26:52.049"></status>
</kw>
<msg level="INFO" timestamp="20170629 21:26:52.050">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170629 21:26:51.785" status="PASS" endtime="20170629 21:26:52.050"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170629 21:26:52.050">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170629 21:26:52.050" status="PASS" endtime="20170629 21:26:52.050"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170629 21:26:52.051">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170629 21:26:52.051">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170629 21:26:52.051">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170629 21:26:52.050" status="PASS" endtime="20170629 21:26:52.051"></status>
</kw>
<msg level="INFO" timestamp="20170629 21:26:52.051">${state} = xyz.openbmc_project.State.Host.HostState.Off</msg>
<status starttime="20170629 21:26:51.784" status="PASS" endtime="20170629 21:26:52.051"></status>
</kw>
<msg level="INFO" timestamp="20170629 21:26:52.052">${host_state} = Off</msg>
<status starttime="20170629 21:26:51.784" status="PASS" endtime="20170629 21:26:52.052"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal</arg>
<arg>${host_state}</arg>
<arg>Quiesced</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${host_state}</arg>
<arg>Quiesced</arg>
</arguments>
<msg level="FAIL" timestamp="20170629 21:26:52.053">Off != Quiesced</msg>
<status starttime="20170629 21:26:52.052" status="FAIL" endtime="20170629 21:26:52.053"></status>
</kw>
<msg level="INFO" timestamp="20170629 21:26:52.053">${status} = False</msg>
<status starttime="20170629 21:26:52.052" status="PASS" endtime="20170629 21:26:52.053"></status>
</kw>
<msg level="INFO" timestamp="20170629 21:26:52.053">${status} = False</msg>
<status starttime="20170629 21:26:51.783" status="PASS" endtime="20170629 21:26:52.053"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${TEST_STATUS}' == 'FAIL' or '${status}'=='True'</arg>
<arg>FFDC</arg>
</arguments>
<status starttime="20170629 21:26:52.053" status="PASS" endtime="20170629 21:26:52.054"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}'=='True'</arg>
<arg>Recover Quiesced Host</arg>
</arguments>
<status starttime="20170629 21:26:52.054" status="PASS" endtime="20170629 21:26:52.054"></status>
</kw>
<kw name="Log Test Case Status" library="openbmc_ffdc_methods">
<doc>Test case execution result history.</doc>
<kw name="Get Variable Value" library="BuiltIn">
<doc>Returns variable value or ``default`` if the variable does not exist.</doc>
<arguments>
<arg>${FFDC_DIR_PATH_STYLE}</arg>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${FFDC_DIR_PATH_STYLE}</var>
</assign>
<msg level="INFO" timestamp="20170629 21:26:52.063">${FFDC_DIR_PATH_STYLE} = </msg>
<status starttime="20170629 21:26:52.055" status="PASS" endtime="20170629 21:26:52.063"></status>
</kw>
<kw name="Get Variable Value" library="BuiltIn">
<doc>Returns variable value or ``default`` if the variable does not exist.</doc>
<arguments>
<arg>${FFDC_DIR_PATH}</arg>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${FFDC_DIR_PATH}</var>
</assign>
<msg level="INFO" timestamp="20170629 21:26:52.070">${FFDC_DIR_PATH} = </msg>
<status starttime="20170629 21:26:52.063" status="PASS" endtime="20170629 21:26:52.070"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${FFDC_DIR_PATH}' == '${EMPTY}'</arg>
<arg>Set FFDC Defaults</arg>
</arguments>
<kw name="Set Ffdc Defaults" library="openbmc_ffdc">
<doc>Set a default value for ffdc_dir_path and ffdc_prefix if they don't</doc>
<kw name="Get Current Time Stamp" library="openbmc_ffdc_utils">
<doc>Get the current time stamp data</doc>
<kw name="Get Current Date" library="DateTime">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20170629 21:26:52.073">${cur_time} = 2017-06-29 21:26:52:072770</msg>
<status starttime="20170629 21:26:52.073" status="PASS" endtime="20170629 21:26:52.073"></status>
</kw>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20170629 21:26:52.074">${cur_time} = 20170629212652072770</msg>
<status starttime="20170629 21:26:52.073" status="PASS" endtime="20170629 21:26:52.074"></status>
</kw>
<status starttime="20170629 21:26:52.072" status="PASS" endtime="20170629 21:26:52.074"></status>
</kw>
<msg level="INFO" timestamp="20170629 21:26:52.080">${FFDC_TIME} = 20170629212652072770</msg>
<kw name="Get Test Dir and Name" library="openbmc_ffdc_utils">
<doc>SUITE_NAME and TEST_NAME are automatic variables</doc>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${SUITE_NAME}</arg>
</arguments>
<assign>
<var>${suite_name}</var>
</assign>
<msg level="INFO" timestamp="20170629 21:26:52.081">${suite_name} = TestsSecurityTestSsl</msg>
<status starttime="20170629 21:26:52.081" status="PASS" endtime="20170629 21:26:52.081"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${FFDC_TIME}_</arg>
<arg>${suite_name}</arg>
</arguments>
<assign>
<var>${suite_name}</var>
</assign>
<msg level="INFO" timestamp="20170629 21:26:52.082">${suite_name} = 20170629212652072770_TestsSecurityTestSsl</msg>
<status starttime="20170629 21:26:52.081" status="PASS" endtime="20170629 21:26:52.082"></status>
</kw>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${TEST_NAME}</arg>
</arguments>
<assign>
<var>${test_name}</var>
</assign>
<msg level="INFO" timestamp="20170629 21:26:52.082">${test_name} = TestSSLConnection</msg>
<status starttime="20170629 21:26:52.082" status="PASS" endtime="20170629 21:26:52.082"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${FFDC_TIME}_</arg>
<arg>${test_name}</arg>
</arguments>
<assign>
<var>${test_name}</var>
</assign>
<msg level="INFO" timestamp="20170629 21:26:52.083">${test_name} = 20170629212652072770_TestSSLConnection</msg>
<status starttime="20170629 21:26:52.083" status="PASS" endtime="20170629 21:26:52.083"></status>
</kw>
<status starttime="20170629 21:26:52.080" status="PASS" endtime="20170629 21:26:52.083"></status>
</kw>
<msg level="INFO" timestamp="20170629 21:26:52.084">${FFDC_DIR_PATH} = /tmp/fspcibld/23280/obmc-robot/logs/20170629212652072770_TestsSecurityTestSsl/20170629212652072770_TestSSLConnection/</msg>
<msg level="INFO" timestamp="20170629 21:26:52.088">${FFDC_PREFIX} = 20170629212652072770_</msg>
<status starttime="20170629 21:26:52.071" status="PASS" endtime="20170629 21:26:52.088"></status>
</kw>
<status starttime="20170629 21:26:52.071" status="PASS" endtime="20170629 21:26:52.088"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${FFDC_DIR_PATH_STYLE}' == '${1}'</arg>
<arg>Run Keywords</arg>
<arg>Set Global Variable</arg>
<arg>${FFDC_LOG_PATH}</arg>
<arg>${FFDC_DIR_PATH}</arg>
<arg>AND</arg>
<arg>Set Global Variable</arg>
<arg>${TEST_HISTORY}</arg>
<arg>${FFDC_DIR_PATH}test_history.txt</arg>
</arguments>
<status starttime="20170629 21:26:52.088" status="PASS" endtime="20170629 21:26:52.089"></status>
</kw>
<kw name="Create Directory" library="OperatingSystem">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>${FFDC_LOG_PATH}</arg>
</arguments>
<msg level="INFO" timestamp="20170629 21:26:52.089" html="yes">Created directory '&lt;a href="file:///tmp/fspcibld/23280/obmc-robot/logs"&gt;/tmp/fspcibld/23280/obmc-robot/logs&lt;/a&gt;'.</msg>
<status starttime="20170629 21:26:52.089" status="PASS" endtime="20170629 21:26:52.089"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>OperatingSystem.File Should Exist</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<assign>
<var>${exist}</var>
</assign>
<kw name="File Should Exist" library="OperatingSystem">
<doc>Fails unless the given ``path`` points to an existing file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
</arguments>
<msg level="FAIL" timestamp="20170629 21:26:52.090">File '/tmp/fspcibld/23280/obmc-robot/logs/test_history.txt' does not exist.</msg>
<status starttime="20170629 21:26:52.090" status="FAIL" endtime="20170629 21:26:52.090"></status>
</kw>
<msg level="INFO" timestamp="20170629 21:26:52.091">${exist} = False</msg>
<status starttime="20170629 21:26:52.090" status="PASS" endtime="20170629 21:26:52.091"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${exist}' == '${False}'</arg>
<arg>Create File</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<kw name="Create File" library="OperatingSystem">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
</arguments>
<msg level="INFO" timestamp="20170629 21:26:52.092" html="yes">Created file '&lt;a href="file:///tmp/fspcibld/23280/obmc-robot/logs/test_history.txt"&gt;/tmp/fspcibld/23280/obmc-robot/logs/test_history.txt&lt;/a&gt;'.</msg>
<status starttime="20170629 21:26:52.091" status="PASS" endtime="20170629 21:26:52.092"></status>
</kw>
<status starttime="20170629 21:26:52.091" status="PASS" endtime="20170629 21:26:52.092"></status>
</kw>
<kw name="Rpvars" library="gen_robot_print">
<arguments>
<arg>TEST_HISTORY</arg>
</arguments>
<status starttime="20170629 21:26:52.092" status="PASS" endtime="20170629 21:26:52.092"></status>
</kw>
<kw name="Get Current Time Stamp" library="openbmc_ffdc_utils">
<doc>Get the current time stamp data</doc>
<assign>
<var>${cur_time}</var>
</assign>
<kw name="Get Current Date" library="DateTime">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20170629 21:26:52.094">${cur_time} = 2017-06-29 21:26:52:093793</msg>
<status starttime="20170629 21:26:52.093" status="PASS" endtime="20170629 21:26:52.094"></status>
</kw>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20170629 21:26:52.095">${cur_time} = 20170629212652093793</msg>
<status starttime="20170629 21:26:52.094" status="PASS" endtime="20170629 21:26:52.095"></status>
</kw>
<msg level="INFO" timestamp="20170629 21:26:52.095">${cur_time} = 20170629212652093793</msg>
<status starttime="20170629 21:26:52.093" status="PASS" endtime="20170629 21:26:52.095"></status>
</kw>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
<arg>${cur_time}:${SUITE_NAME}:${TEST_NAME}:${TEST_STATUS}${\n}</arg>
</arguments>
<msg level="INFO" timestamp="20170629 21:26:52.096" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/23280/obmc-robot/logs/test_history.txt"&gt;/tmp/fspcibld/23280/obmc-robot/logs/test_history.txt&lt;/a&gt;'.</msg>
<status starttime="20170629 21:26:52.095" status="PASS" endtime="20170629 21:26:52.096"></status>
</kw>
<status starttime="20170629 21:26:52.054" status="PASS" endtime="20170629 21:26:52.096"></status>
</kw>
<status starttime="20170629 21:26:51.783" status="PASS" endtime="20170629 21:26:52.097"></status>
</kw>
<doc>This testcase is for testing the SSL connection to the
OpenBMC machine.</doc>
<tags>
<tag>Test_SSL_Connection</tag>
</tags>
<status starttime="20170629 21:26:51.567" critical="yes" status="PASS" endtime="20170629 21:26:52.097"></status>
</test>
<kw type="teardown" name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170629 21:26:52.098">Delete All Sessions</msg>
<status starttime="20170629 21:26:52.097" status="PASS" endtime="20170629 21:26:52.098"></status>
</kw>
<doc>This testsuite is for testing SSL connection to OpenBMC</doc>
<status starttime="20170629 21:26:51.496" status="PASS" endtime="20170629 21:26:52.098"></status>
</suite>
<status starttime="20170629 21:26:51.494" status="PASS" endtime="20170629 21:26:52.100"></status>
</suite>
<suite id="s1-s2" source="/tmp/fspcibld/23280/obmc-robot/tests/test_basic_poweron.robot" name="Test Basic Poweron">
<test id="s1-s2-t1" name="Power On Test">
<kw type="setup" name="Start SOL Console Logging" library="utils">
<doc>Start system console log to file.</doc>
<kw name="Create OS Console File Path" library="utils">
<doc>Create OS console file path name and return it.</doc>
<arguments>
<arg>${log_file_path}</arg>
</arguments>
<assign>
<var>${log_file_path}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>/tmp/${OPENBMC_HOST}_os_console</arg>
</arguments>
<assign>
<var>${default_file_path}</var>
</assign>
<msg level="INFO" timestamp="20170629 21:26:52.133">${default_file_path} = /tmp/9.3.21.61_os_console</msg>
<status starttime="20170629 21:26:52.133" status="PASS" endtime="20170629 21:26:52.133"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${log_file_path}' == '${EMPTY}'</arg>
<arg>${default_file_path}</arg>
<arg>${log_file_path}</arg>
</arguments>
<assign>
<var>${log_file_path}</var>
</assign>
<msg level="INFO" timestamp="20170629 21:26:52.134">${log_file_path} = /tmp/9.3.21.61_os_console</msg>
<status starttime="20170629 21:26:52.133" status="PASS" endtime="20170629 21:26:52.134"></status>
</kw>
<msg level="INFO" timestamp="20170629 21:26:52.134">${log_file_path} = /tmp/9.3.21.61_os_console</msg>
<status starttime="20170629 21:26:52.132" status="PASS" endtime="20170629 21:26:52.134"></status>
</kw>
<kw name="Stop SOL Console Logging" library="utils">
<doc>Stop system console logging and return log output.</doc>
<arguments>
<arg>${log_file_path}</arg>
<arg>return_data=${return_data}</arg>
</arguments>
<assign>
<var>${log_output}</var>
</assign>
<kw name="Create OS Console File Path" library="utils">
<doc>Create OS console file path name and return it.</doc>
<arguments>
<arg>${log_file_path}</arg>
</arguments>
<assign>
<var>${log_file_path}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>/tmp/${OPENBMC_HOST}_os_console</arg>
</arguments>
<assign>
<var>${default_file_path}</var>
</assign>
<msg level="INFO" timestamp="20170629 21:26:52.136">${default_file_path} = /tmp/9.3.21.61_os_console</msg>
<status starttime="20170629 21:26:52.136" status="PASS" endtime="20170629 21:26:52.136"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${log_file_path}' == '${EMPTY}'</arg>
<arg>${default_file_path}</arg>
<arg>${log_file_path}</arg>
</arguments>
<assign>
<var>${log_file_path}</var>
</assign>
<msg level="INFO" timestamp="20170629 21:26:52.137">${log_file_path} = /tmp/9.3.21.61_os_console</msg>
<status starttime="20170629 21:26:52.136" status="PASS" endtime="20170629 21:26:52.137"></status>
</kw>
<msg level="INFO" timestamp="20170629 21:26:52.137">${log_file_path} = /tmp/9.3.21.61_os_console</msg>
<status starttime="20170629 21:26:52.135" status="PASS" endtime="20170629 21:26:52.137"></status>
</kw>
<kw name="Create OS Console Command String" library="utils">
<doc>Return a command string to start OS console logging.</doc>
<assign>
<var>${search_string}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>which ssh_pw 2&gt;&amp;1</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170629 21:26:52.138">${cmd_buf} = which ssh_pw 2&gt;&amp;1</msg>
<status starttime="20170629 21:26:52.138" status="PASS" endtime="20170629 21:26:52.138"></status>
</kw>
<kw name="Rdpissuing" library="gen_robot_print">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status starttime="20170629 21:26:52.138" status="PASS" endtime="20170629 21:26:52.138"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg level="INFO" timestamp="20170629 21:26:52.143">Running command 'which ssh_pw 2&gt;&amp;1'.</msg>
<msg level="INFO" timestamp="20170629 21:26:52.145">${rc} = 0</msg>
<msg level="INFO" timestamp="20170629 21:26:52.145">${output} = /tmp/fspcibld/23280/obmc-robot/.tox/witherspoon/bin/ssh_pw</msg>
<status starttime="20170629 21:26:52.139" status="PASS" endtime="20170629 21:26:52.145"></status>
</kw>
<kw name="Rdpvars" library="gen_robot_print">
<arguments>
<arg>rc</arg>
<arg>output</arg>
</arguments>
<status starttime="20170629 21:26:52.147" status="PASS" endtime="20170629 21:26:52.148"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${rc}</arg>
<arg>${0}</arg>
<arg>msg=${output}\n</arg>
</arguments>
<status starttime="20170629 21:26:52.148" status="PASS" endtime="20170629 21:26:52.149"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>ssh_pw ${OPENBMC_PASSWORD} -p 2200</arg>
<arg>-o "StrictHostKeyChecking no" ${OPENBMC_USERNAME}@${OPENBMC_HOST}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170629 21:26:52.150">${cmd_buf} = ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.3.21.61</msg>
<status starttime="20170629 21:26:52.149" status="PASS" endtime="20170629 21:26:52.150"></status>
</kw>
<msg level="INFO" timestamp="20170629 21:26:52.150">${search_string} = ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.3.21.61</msg>
<status starttime="20170629 21:26:52.137" status="PASS" endtime="20170629 21:26:52.150"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>echo $(ps -ef | egrep '${search_string}'</arg>
<arg>| egrep -v grep | cut -c10-14)</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170629 21:26:52.151">${cmd_buf} = echo $(ps -ef | egrep 'ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.3.21.61' | egrep -v grep | cut -c10-14)</msg>
<status starttime="20170629 21:26:52.150" status="PASS" endtime="20170629 21:26:52.151"></status>
</kw>
<kw name="Rdpissuing" library="gen_robot_print">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status starttime="20170629 21:26:52.151" status="PASS" endtime="20170629 21:26:52.152"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${os_con_pid}</var>
</assign>
<msg level="INFO" timestamp="20170629 21:26:52.157">Running command 'echo $(ps -ef | egrep 'ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.3.21.61' | egrep -v grep | cut -c10-14) 2&gt;&amp;1'.</msg>
<msg level="INFO" timestamp="20170629 21:26:52.166">${rc} = 0</msg>
<msg level="INFO" timestamp="20170629 21:26:52.167">${os_con_pid} = </msg>
<status starttime="20170629 21:26:52.152" status="PASS" endtime="20170629 21:26:52.167"></status>
</kw>
<kw name="Rdpvars" library="gen_robot_print">
<arguments>
<arg>os_con_pid</arg>
</arguments>
<status starttime="20170629 21:26:52.168" status="PASS" endtime="20170629 21:26:52.169"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>kill -9 ${os_con_pid}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170629 21:26:52.170">${cmd_buf} = kill -9 </msg>
<status starttime="20170629 21:26:52.169" status="PASS" endtime="20170629 21:26:52.170"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${os_con_pid}' != '${EMPTY}'</arg>
<arg>Rdpissuing</arg>
<arg>${cmd_buf}</arg>
</arguments>
<status starttime="20170629 21:26:52.170" status="PASS" endtime="20170629 21:26:52.171"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${os_con_pid}' != '${EMPTY}'</arg>
<arg>Run And Return Rc And Output</arg>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg level="INFO" timestamp="20170629 21:26:52.172">${rc} = None</msg>
<msg level="INFO" timestamp="20170629 21:26:52.172">${output} = None</msg>
<status starttime="20170629 21:26:52.171" status="PASS" endtime="20170629 21:26:52.172"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${os_con_pid}' != '${EMPTY}'</arg>
<arg>Rdpvars</arg>
<arg>rc</arg>
<arg>output</arg>
</arguments>
<status starttime="20170629 21:26:52.172" status="PASS" endtime="20170629 21:26:52.172"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${targ_file_path}' != '${EMPTY}'</arg>
<arg>Run Keyword And Ignore Error</arg>
<arg>Copy File</arg>
<arg>${log_file_path}</arg>
<arg>${targ_file_path}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Copy File</arg>
<arg>${log_file_path}</arg>
<arg>${targ_file_path}</arg>
</arguments>
<kw name="Copy File" library="OperatingSystem">
<doc>Copies the source file into the destination.</doc>
<arguments>
<arg>${log_file_path}</arg>
<arg>${targ_file_path}</arg>
</arguments>
<msg level="FAIL" timestamp="20170629 21:26:52.174">Source file '/tmp/9.3.21.61_os_console' does not exist.</msg>
<status starttime="20170629 21:26:52.174" status="FAIL" endtime="20170629 21:26:52.175"></status>
</kw>
<status starttime="20170629 21:26:52.173" status="PASS" endtime="20170629 21:26:52.175"></status>
</kw>
<status starttime="20170629 21:26:52.173" status="PASS" endtime="20170629 21:26:52.175"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${output}</var>
</assign>
<msg level="INFO" timestamp="20170629 21:26:52.175">${output} = </msg>
<status starttime="20170629 21:26:52.175" status="PASS" endtime="20170629 21:26:52.175"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${debug}^1</arg>
</arguments>
<assign>
<var>${loc_quiet}</var>
</assign>
<msg level="INFO" timestamp="20170629 21:26:52.176">${loc_quiet} = 1</msg>
<status starttime="20170629 21:26:52.175" status="PASS" endtime="20170629 21:26:52.176"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${return_data}' == '${1}'</arg>
<arg>Cmd Fnc</arg>
<arg>cat ${log_file_path}</arg>
<arg>quiet=${loc_quiet}</arg>
<arg>print_output=${0}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<kw name="Cmd Fnc" library="gen_cmd">
<doc>Run the given command in a shell and return the shell return code.</doc>
<arguments>
<arg>cat ${log_file_path}</arg>
<arg>quiet=${loc_quiet}</arg>
<arg>print_output=${0}</arg>
</arguments>
<status starttime="20170629 21:26:52.177" status="PASS" endtime="20170629 21:26:52.368"></status>
</kw>
<msg level="INFO" timestamp="20170629 21:26:52.368">${rc} = 1</msg>
<msg level="INFO" timestamp="20170629 21:26:52.368">${output} = cat: /tmp/9.3.21.61_os_console: No such file or directory
</msg>
<status starttime="20170629 21:26:52.176" status="PASS" endtime="20170629 21:26:52.369"></status>
</kw>
<msg level="INFO" timestamp="20170629 21:26:52.369">${log_output} = cat: /tmp/9.3.21.61_os_console: No such file or directory
</msg>
<status starttime="20170629 21:26:52.134" status="PASS" endtime="20170629 21:26:52.369"></status>
</kw>
<kw name="Create File" library="OperatingSystem">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${log_file_path}</arg>
</arguments>
<msg level="INFO" timestamp="20170629 21:26:52.371" html="yes">Created file '&lt;a href="file:///tmp/9.3.21.61_os_console"&gt;/tmp/9.3.21.61_os_console&lt;/a&gt;'.</msg>
<status starttime="20170629 21:26:52.370" status="PASS" endtime="20170629 21:26:52.371"></status>
</kw>
<kw name="Create OS Console Command String" library="utils">
<doc>Return a command string to start OS console logging.</doc>
<assign>
<var>${sub_cmd_buf}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>which ssh_pw 2&gt;&amp;1</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170629 21:26:52.372">${cmd_buf} = which ssh_pw 2&gt;&amp;1</msg>
<status starttime="20170629 21:26:52.371" status="PASS" endtime="20170629 21:26:52.372"></status>
</kw>
<kw name="Rdpissuing" library="gen_robot_print">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status starttime="20170629 21:26:52.372" status="PASS" endtime="20170629 21:26:52.372"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg level="INFO" timestamp="20170629 21:26:52.375">Running command 'which ssh_pw 2&gt;&amp;1'.</msg>
<msg level="INFO" timestamp="20170629 21:26:52.378">${rc} = 0</msg>
<msg level="INFO" timestamp="20170629 21:26:52.378">${output} = /tmp/fspcibld/23280/obmc-robot/.tox/witherspoon/bin/ssh_pw</msg>
<status starttime="20170629 21:26:52.373" status="PASS" endtime="20170629 21:26:52.378"></status>
</kw>
<kw name="Rdpvars" library="gen_robot_print">
<arguments>
<arg>rc</arg>
<arg>output</arg>
</arguments>
<status starttime="20170629 21:26:52.380" status="PASS" endtime="20170629 21:26:52.381"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${rc}</arg>
<arg>${0}</arg>
<arg>msg=${output}\n</arg>
</arguments>
<status starttime="20170629 21:26:52.382" status="PASS" endtime="20170629 21:26:52.382"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>ssh_pw ${OPENBMC_PASSWORD} -p 2200</arg>
<arg>-o "StrictHostKeyChecking no" ${OPENBMC_USERNAME}@${OPENBMC_HOST}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170629 21:26:52.383">${cmd_buf} = ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.3.21.61</msg>
<status starttime="20170629 21:26:52.383" status="PASS" endtime="20170629 21:26:52.383"></status>
</kw>
<msg level="INFO" timestamp="20170629 21:26:52.383">${sub_cmd_buf} = ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.3.21.61</msg>
<status starttime="20170629 21:26:52.371" status="PASS" endtime="20170629 21:26:52.383"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${sub_cmd_buf} &gt; ${log_file_path} 2&gt;&amp;1 &amp;</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170629 21:26:52.384">${cmd_buf} = ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.3.21.61 &gt; /tmp/9.3.21.61_os_console 2&gt;&amp;1 &amp;</msg>
<status starttime="20170629 21:26:52.384" status="PASS" endtime="20170629 21:26:52.384"></status>
</kw>
<kw name="Rdpissuing" library="gen_robot_print">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status starttime="20170629 21:26:52.384" status="PASS" endtime="20170629 21:26:52.385"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg level="INFO" timestamp="20170629 21:26:52.388">Running command 'ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.3.21.61 &gt; /tmp/9.3.21.61_os_console 2&gt;&amp;1 &amp;'.</msg>
<msg level="INFO" timestamp="20170629 21:26:52.391">${rc} = 0</msg>
<msg level="INFO" timestamp="20170629 21:26:52.391">${output} = </msg>
<status starttime="20170629 21:26:52.385" status="PASS" endtime="20170629 21:26:52.391"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${rc}</arg>
<arg>${0}</arg>
</arguments>
<status starttime="20170629 21:26:52.394" status="PASS" endtime="20170629 21:26:52.395"></status>
</kw>
<status starttime="20170629 21:26:52.132" status="PASS" endtime="20170629 21:26:52.396"></status>
</kw>
<kw name="Repeat Keyword" library="BuiltIn">
<doc>Executes the specified keyword multiple times.</doc>
<arguments>
<arg>${LOOP_COUNT} times</arg>
<arg>Host Off And On</arg>
</arguments>
<msg level="INFO" timestamp="20170629 21:26:52.402">Repeating keyword, round 1/2.</msg>
<kw name="Host Off And On">
<doc>Verify power off and on.</doc>
<kw name="Initiate Host PowerOff" library="state_manager">
<doc>Initiate host power off.</doc>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=${HOST_POWEROFF_TRANS}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20170629 21:26:52.405">${args} = {u'data': 'xyz.openbmc_project.State.Host.Transition.Off'}</msg>
<status starttime="20170629 21:26:52.404" status="PASS" endtime="20170629 21:26:52.405"></status>
</kw>
<kw name="Write Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>RequestedHostTransition</arg>
<arg>data=${args}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170629 21:26:52.407">${base_uri} = /xyz/openbmc_project/state/host0/</msg>
<status starttime="20170629 21:26:52.406" status="PASS" endtime="20170629 21:26:52.407"></status>
</kw>
<kw name="OpenBMC Put Request" library="rest_client">
<arguments>
<arg>${base_uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170629 21:26:52.412">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170629 21:26:52.411" status="PASS" endtime="20170629 21:26:52.413"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170629 21:26:52.413">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170629 21:26:52.413" status="PASS" endtime="20170629 21:26:52.414"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170629 21:26:52.414">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170629 21:26:52.414" status="PASS" endtime="20170629 21:26:52.414"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170629 21:26:52.415">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170629 21:26:52.415" status="PASS" endtime="20170629 21:26:52.415"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170629 21:26:53.010">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170629 21:26:52.416" status="PASS" endtime="20170629 21:26:53.010"></status>
</kw>
<msg level="INFO" timestamp="20170629 21:26:53.010">${status} = PASS</msg>
<msg level="INFO" timestamp="20170629 21:26:53.010">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170629 21:26:52.415" status="PASS" endtime="20170629 21:26:53.010"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170629 21:26:53.011">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170629 21:26:53.010" status="PASS" endtime="20170629 21:26:53.011"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170629 21:26:53.011">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170629 21:26:53.011" status="PASS" endtime="20170629 21:26:53.011"></status>
</kw>
<status starttime="20170629 21:26:52.410" status="PASS" endtime="20170629 21:26:53.011"></status>
</kw>
<status starttime="20170629 21:26:52.409" status="PASS" endtime="20170629 21:26:53.012"></status>
</kw>
<status starttime="20170629 21:26:52.408" status="PASS" endtime="20170629 21:26:53.012"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170629 21:26:53.012">${base_uri} = /xyz/openbmc_project/state/host0//attr/RequestedHostTransition</msg>
<status starttime="20170629 21:26:53.012" status="PASS" endtime="20170629 21:26:53.012"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170629 21:26:53.013">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170629 21:26:53.013" status="PASS" endtime="20170629 21:26:53.013"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status starttime="20170629 21:26:53.013" status="PASS" endtime="20170629 21:26:53.013"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Put</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170629 21:26:53.015">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, method:Put, args:{u'data': {u'data': 'xyz.openbmc_project.State.Host.Transition.Off'}, u'headers': {u'Content-T...</msg>
<status starttime="20170629 21:26:53.014" status="PASS" endtime="20170629 21:26:53.015"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170629 21:26:53.016">URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, method:Put, args:{u'data': {u'data': 'xyz.openbmc_project.State.Host.Transition.Off'}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20170629 21:26:53.016" status="PASS" endtime="20170629 21:26:53.017"></status>
</kw>
<status starttime="20170629 21:26:53.015" status="PASS" endtime="20170629 21:26:53.017"></status>
</kw>
<status starttime="20170629 21:26:53.014" status="PASS" endtime="20170629 21:26:53.017"></status>
</kw>
<kw name="Put Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a PUT request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170629 21:26:53.508">Put Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, data={"data": "xyz.openbmc_project.State.Host.Transition.Off"},                     headers={u'Content-Type': u'application/json'}, allow_redirects=True </msg>
<msg level="INFO" timestamp="20170629 21:26:53.508">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170629 21:26:53.017" status="PASS" endtime="20170629 21:26:53.508"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170629 21:26:53.509">${msg} = Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170629 21:26:53.509" status="PASS" endtime="20170629 21:26:53.509"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170629 21:26:53.510">Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170629 21:26:53.510" status="PASS" endtime="20170629 21:26:53.511"></status>
</kw>
<status starttime="20170629 21:26:53.509" status="PASS" endtime="20170629 21:26:53.511"></status>
</kw>
<status starttime="20170629 21:26:53.508" status="PASS" endtime="20170629 21:26:53.511"></status>
</kw>
<msg level="INFO" timestamp="20170629 21:26:53.511">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170629 21:26:52.407" status="PASS" endtime="20170629 21:26:53.511"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170629 21:26:53.512">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170629 21:26:53.511" status="PASS" endtime="20170629 21:26:53.512"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${json}</var>
</assign>
<msg level="INFO" timestamp="20170629 21:26:53.512">To JSON using : content={
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170629 21:26:53.512">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170629 21:26:53.513">${json} = {u'data': None, u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170629 21:26:53.512" status="PASS" endtime="20170629 21:26:53.513"></status>
</kw>
<status starttime="20170629 21:26:52.405" status="PASS" endtime="20170629 21:26:53.513"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${wait}' == '${0}'</arg>
<arg>Return From Keyword</arg>
</arguments>
<status starttime="20170629 21:26:53.513" status="PASS" endtime="20170629 21:26:53.513"></status>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>3 min</arg>
<arg>10 sec</arg>
<arg>Is Host Off</arg>
</arguments>
<kw name="Is Host Off" library="state_manager">
<doc>Check if host state is "Off".</doc>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170629 21:26:53.518">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170629 21:26:53.518" status="PASS" endtime="20170629 21:26:53.518"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170629 21:26:53.519">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170629 21:26:53.518" status="PASS" endtime="20170629 21:26:53.519"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170629 21:26:53.519">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170629 21:26:53.519" status="PASS" endtime="20170629 21:26:53.519"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170629 21:26:53.520">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170629 21:26:53.520" status="PASS" endtime="20170629 21:26:53.520"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170629 21:26:55.373">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170629 21:26:53.521" status="PASS" endtime="20170629 21:26:55.373"></status>
</kw>
<msg level="INFO" timestamp="20170629 21:26:55.373">${status} = PASS</msg>
<msg level="INFO" timestamp="20170629 21:26:55.374">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170629 21:26:53.520" status="PASS" endtime="20170629 21:26:55.374"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170629 21:26:55.374">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170629 21:26:55.374" status="PASS" endtime="20170629 21:26:55.374"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170629 21:26:55.375">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170629 21:26:55.375" status="PASS" endtime="20170629 21:26:55.375"></status>
</kw>
<status starttime="20170629 21:26:53.517" status="PASS" endtime="20170629 21:26:55.375"></status>
</kw>
<status starttime="20170629 21:26:53.516" status="PASS" endtime="20170629 21:26:55.375"></status>
</kw>
<status starttime="20170629 21:26:53.516" status="PASS" endtime="20170629 21:26:55.375"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170629 21:26:55.376">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170629 21:26:55.376" status="PASS" endtime="20170629 21:26:55.376"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170629 21:26:55.378">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170629 21:26:55.377" status="PASS" endtime="20170629 21:26:55.378"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170629 21:26:55.379">URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170629 21:26:55.379" status="PASS" endtime="20170629 21:26:55.379"></status>
</kw>
<status starttime="20170629 21:26:55.378" status="PASS" endtime="20170629 21:26:55.379"></status>
</kw>
<status starttime="20170629 21:26:55.377" status="PASS" endtime="20170629 21:26:55.379"></status>
</kw>
<status starttime="20170629 21:26:55.376" status="PASS" endtime="20170629 21:26:55.379"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170629 21:26:59.290">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170629 21:26:59.290">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170629 21:26:55.380" status="PASS" endtime="20170629 21:26:59.290"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170629 21:26:59.293">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170629 21:26:59.292" status="PASS" endtime="20170629 21:26:59.293"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170629 21:26:59.294">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170629 21:26:59.293" status="PASS" endtime="20170629 21:26:59.294"></status>
</kw>
<status starttime="20170629 21:26:59.293" status="PASS" endtime="20170629 21:26:59.294"></status>
</kw>
<status starttime="20170629 21:26:59.291" status="PASS" endtime="20170629 21:26:59.294"></status>
</kw>
<status starttime="20170629 21:26:59.291" status="PASS" endtime="20170629 21:26:59.294"></status>
</kw>
<msg level="INFO" timestamp="20170629 21:26:59.295">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170629 21:26:53.515" status="PASS" endtime="20170629 21:26:59.295"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170629 21:26:59.295">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170629 21:26:59.295" status="PASS" endtime="20170629 21:26:59.295"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170629 21:26:59.296">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170629 21:26:59.296">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170629 21:26:59.296">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170629 21:26:59.295" status="PASS" endtime="20170629 21:26:59.296"></status>
</kw>
<msg level="INFO" timestamp="20170629 21:26:59.296">${state} = xyz.openbmc_project.State.Host.HostState.Off</msg>
<status starttime="20170629 21:26:53.515" status="PASS" endtime="20170629 21:26:59.296"></status>
</kw>
<msg level="INFO" timestamp="20170629 21:26:59.297">${host_state} = Off</msg>
<status starttime="20170629 21:26:53.514" status="PASS" endtime="20170629 21:26:59.297"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${host_state}</arg>
</arguments>
<status starttime="20170629 21:26:59.297" status="PASS" endtime="20170629 21:26:59.297"></status>
</kw>
<status starttime="20170629 21:26:53.514" status="PASS" endtime="20170629 21:26:59.297"></status>
</kw>
<status starttime="20170629 21:26:53.514" status="PASS" endtime="20170629 21:26:59.297"></status>
</kw>
<status starttime="20170629 21:26:52.403" status="PASS" endtime="20170629 21:26:59.297"></status>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>5 min</arg>
<arg>10 sec</arg>
<arg>Is OS Off</arg>
</arguments>
<kw name="Is OS Off" library="utils">
<doc>Check if boot progress is "Off".</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170629 21:26:59.302">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170629 21:26:59.301" status="PASS" endtime="20170629 21:26:59.303"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170629 21:26:59.303">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170629 21:26:59.303" status="PASS" endtime="20170629 21:26:59.303"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170629 21:26:59.304">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170629 21:26:59.303" status="PASS" endtime="20170629 21:26:59.304"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170629 21:26:59.304">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170629 21:26:59.304" status="PASS" endtime="20170629 21:26:59.304"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170629 21:26:59.709">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170629 21:26:59.305" status="PASS" endtime="20170629 21:26:59.709"></status>
</kw>
<msg level="INFO" timestamp="20170629 21:26:59.709">${status} = PASS</msg>
<msg level="INFO" timestamp="20170629 21:26:59.709">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170629 21:26:59.305" status="PASS" endtime="20170629 21:26:59.709"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170629 21:26:59.710">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170629 21:26:59.709" status="PASS" endtime="20170629 21:26:59.710"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170629 21:26:59.710">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170629 21:26:59.710" status="PASS" endtime="20170629 21:26:59.710"></status>
</kw>
<status starttime="20170629 21:26:59.301" status="PASS" endtime="20170629 21:26:59.711"></status>
</kw>
<status starttime="20170629 21:26:59.301" status="PASS" endtime="20170629 21:26:59.711"></status>
</kw>
<status starttime="20170629 21:26:59.300" status="PASS" endtime="20170629 21:26:59.711"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170629 21:26:59.711">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170629 21:26:59.711" status="PASS" endtime="20170629 21:26:59.711"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170629 21:26:59.713">${msg} = URI:https://9.3.21.61:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170629 21:26:59.713" status="PASS" endtime="20170629 21:26:59.713"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170629 21:26:59.714">URI:https://9.3.21.61:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170629 21:26:59.714" status="PASS" endtime="20170629 21:26:59.714"></status>
</kw>
<status starttime="20170629 21:26:59.714" status="PASS" endtime="20170629 21:26:59.714"></status>
</kw>
<status starttime="20170629 21:26:59.712" status="PASS" endtime="20170629 21:26:59.715"></status>
</kw>
<status starttime="20170629 21:26:59.712" status="PASS" endtime="20170629 21:26:59.715"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170629 21:26:59.902">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170629 21:26:59.902">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170629 21:26:59.715" status="PASS" endtime="20170629 21:26:59.902"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170629 21:26:59.904">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170629 21:26:59.903" status="PASS" endtime="20170629 21:26:59.904"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170629 21:26:59.905">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170629 21:26:59.904" status="PASS" endtime="20170629 21:26:59.905"></status>
</kw>
<status starttime="20170629 21:26:59.904" status="PASS" endtime="20170629 21:26:59.905"></status>
</kw>
<status starttime="20170629 21:26:59.903" status="PASS" endtime="20170629 21:26:59.905"></status>
</kw>
<status starttime="20170629 21:26:59.902" status="PASS" endtime="20170629 21:26:59.905"></status>
</kw>
<msg level="INFO" timestamp="20170629 21:26:59.905">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170629 21:26:59.299" status="PASS" endtime="20170629 21:26:59.905"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170629 21:26:59.906">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170629 21:26:59.906" status="PASS" endtime="20170629 21:26:59.906"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170629 21:26:59.907">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170629 21:26:59.907">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170629 21:26:59.907">${content} = {u'data': u'Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170629 21:26:59.906" status="PASS" endtime="20170629 21:26:59.907"></status>
</kw>
<msg level="INFO" timestamp="20170629 21:26:59.907">${state} = Off</msg>
<status starttime="20170629 21:26:59.299" status="PASS" endtime="20170629 21:26:59.907"></status>
</kw>
<msg level="INFO" timestamp="20170629 21:26:59.907">${boot_progress} = Off</msg>
<status starttime="20170629 21:26:59.298" status="PASS" endtime="20170629 21:26:59.907"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>Off</arg>
</arguments>
<status starttime="20170629 21:26:59.908" status="PASS" endtime="20170629 21:26:59.908"></status>
</kw>
<status starttime="20170629 21:26:59.298" status="PASS" endtime="20170629 21:26:59.908"></status>
</kw>
<status starttime="20170629 21:26:59.298" status="PASS" endtime="20170629 21:26:59.908"></status>
</kw>
<kw name="Initiate Host Boot" library="state_manager">
<doc>Initiate host power on.</doc>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=${HOST_POWERON_TRANS}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20170629 21:26:59.909">${args} = {u'data': 'xyz.openbmc_project.State.Host.Transition.On'}</msg>
<status starttime="20170629 21:26:59.909" status="PASS" endtime="20170629 21:26:59.909"></status>
</kw>
<kw name="Write Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>RequestedHostTransition</arg>
<arg>data=${args}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170629 21:26:59.910">${base_uri} = /xyz/openbmc_project/state/host0/</msg>
<status starttime="20170629 21:26:59.910" status="PASS" endtime="20170629 21:26:59.910"></status>
</kw>
<kw name="OpenBMC Put Request" library="rest_client">
<arguments>
<arg>${base_uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170629 21:26:59.913">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170629 21:26:59.913" status="PASS" endtime="20170629 21:26:59.913"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170629 21:26:59.914">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170629 21:26:59.914" status="PASS" endtime="20170629 21:26:59.914"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170629 21:26:59.915">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170629 21:26:59.914" status="PASS" endtime="20170629 21:26:59.915"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170629 21:26:59.915">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170629 21:26:59.915" status="PASS" endtime="20170629 21:26:59.915"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170629 21:27:00.528">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170629 21:26:59.916" status="PASS" endtime="20170629 21:27:00.528"></status>
</kw>
<msg level="INFO" timestamp="20170629 21:27:00.528">${status} = PASS</msg>
<msg level="INFO" timestamp="20170629 21:27:00.528">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170629 21:26:59.915" status="PASS" endtime="20170629 21:27:00.528"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170629 21:27:00.529">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170629 21:27:00.529" status="PASS" endtime="20170629 21:27:00.529"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170629 21:27:00.530">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170629 21:27:00.529" status="PASS" endtime="20170629 21:27:00.530"></status>
</kw>
<status starttime="20170629 21:26:59.912" status="PASS" endtime="20170629 21:27:00.530"></status>
</kw>
<status starttime="20170629 21:26:59.912" status="PASS" endtime="20170629 21:27:00.530"></status>
</kw>
<status starttime="20170629 21:26:59.911" status="PASS" endtime="20170629 21:27:00.530"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170629 21:27:00.531">${base_uri} = /xyz/openbmc_project/state/host0//attr/RequestedHostTransition</msg>
<status starttime="20170629 21:27:00.530" status="PASS" endtime="20170629 21:27:00.531"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170629 21:27:00.532">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170629 21:27:00.531" status="PASS" endtime="20170629 21:27:00.532"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status starttime="20170629 21:27:00.532" status="PASS" endtime="20170629 21:27:00.532"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Put</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170629 21:27:00.534">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, method:Put, args:{u'data': {u'data': 'xyz.openbmc_project.State.Host.Transition.On'}, u'headers': {u'Content-Ty...</msg>
<status starttime="20170629 21:27:00.533" status="PASS" endtime="20170629 21:27:00.534"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170629 21:27:00.535">URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, method:Put, args:{u'data': {u'data': 'xyz.openbmc_project.State.Host.Transition.On'}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20170629 21:27:00.535" status="PASS" endtime="20170629 21:27:00.535"></status>
</kw>
<status starttime="20170629 21:27:00.534" status="PASS" endtime="20170629 21:27:00.535"></status>
</kw>
<status starttime="20170629 21:27:00.533" status="PASS" endtime="20170629 21:27:00.536"></status>
</kw>
<kw name="Put Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a PUT request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170629 21:27:01.149">Put Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, data={"data": "xyz.openbmc_project.State.Host.Transition.On"},                     headers={u'Content-Type': u'application/json'}, allow_redirects=True </msg>
<msg level="INFO" timestamp="20170629 21:27:01.149">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170629 21:27:00.536" status="PASS" endtime="20170629 21:27:01.150"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170629 21:27:01.151">${msg} = Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170629 21:27:01.150" status="PASS" endtime="20170629 21:27:01.151"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170629 21:27:01.152">Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170629 21:27:01.151" status="PASS" endtime="20170629 21:27:01.152"></status>
</kw>
<status starttime="20170629 21:27:01.151" status="PASS" endtime="20170629 21:27:01.152"></status>
</kw>
<status starttime="20170629 21:27:01.150" status="PASS" endtime="20170629 21:27:01.152"></status>
</kw>
<msg level="INFO" timestamp="20170629 21:27:01.152">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170629 21:26:59.911" status="PASS" endtime="20170629 21:27:01.152"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170629 21:27:01.153">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170629 21:27:01.153" status="PASS" endtime="20170629 21:27:01.153"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${json}</var>
</assign>
<msg level="INFO" timestamp="20170629 21:27:01.154">To JSON using : content={
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170629 21:27:01.154">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170629 21:27:01.154">${json} = {u'data': None, u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170629 21:27:01.153" status="PASS" endtime="20170629 21:27:01.154"></status>
</kw>
<status starttime="20170629 21:26:59.909" status="PASS" endtime="20170629 21:27:01.154"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${wait}' == '${0}'</arg>
<arg>Return From Keyword</arg>
</arguments>
<status starttime="20170629 21:27:01.154" status="PASS" endtime="20170629 21:27:01.155"></status>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>10 min</arg>
<arg>10 sec</arg>
<arg>Is Host Running</arg>
</arguments>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170629 21:27:01.159">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170629 21:27:01.159" status="PASS" endtime="20170629 21:27:01.159"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170629 21:27:01.160">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170629 21:27:01.160" status="PASS" endtime="20170629 21:27:01.160"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170629 21:27:01.160">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170629 21:27:01.160" status="PASS" endtime="20170629 21:27:01.161"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170629 21:27:01.161">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170629 21:27:01.161" status="PASS" endtime="20170629 21:27:01.161"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170629 21:27:02.384">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170629 21:27:01.162" status="PASS" endtime="20170629 21:27:02.384"></status>
</kw>
<msg level="INFO" timestamp="20170629 21:27:02.384">${status} = PASS</msg>
<msg level="INFO" timestamp="20170629 21:27:02.384">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170629 21:27:01.162" status="PASS" endtime="20170629 21:27:02.384"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170629 21:27:02.385">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170629 21:27:02.384" status="PASS" endtime="20170629 21:27:02.385"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170629 21:27:02.385">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170629 21:27:02.385" status="PASS" endtime="20170629 21:27:02.386"></status>
</kw>
<status starttime="20170629 21:27:01.158" status="PASS" endtime="20170629 21:27:02.386"></status>
</kw>
<status starttime="20170629 21:27:01.158" status="PASS" endtime="20170629 21:27:02.386"></status>
</kw>
<status starttime="20170629 21:27:01.157" status="PASS" endtime="20170629 21:27:02.386"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170629 21:27:02.386">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170629 21:27:02.386" status="PASS" endtime="20170629 21:27:02.386"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170629 21:27:02.388">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170629 21:27:02.388" status="PASS" endtime="20170629 21:27:02.389"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170629 21:27:02.389">URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170629 21:27:02.389" status="PASS" endtime="20170629 21:27:02.389"></status>
</kw>
<status starttime="20170629 21:27:02.389" status="PASS" endtime="20170629 21:27:02.390"></status>
</kw>
<status starttime="20170629 21:27:02.387" status="PASS" endtime="20170629 21:27:02.390"></status>
</kw>
<status starttime="20170629 21:27:02.387" status="PASS" endtime="20170629 21:27:02.390"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170629 21:27:05.356">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170629 21:27:05.356">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170629 21:27:02.390" status="PASS" endtime="20170629 21:27:05.356"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170629 21:27:05.359">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170629 21:27:05.358" status="PASS" endtime="20170629 21:27:05.359"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170629 21:27:05.359">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170629 21:27:05.359" status="PASS" endtime="20170629 21:27:05.360"></status>
</kw>
<status starttime="20170629 21:27:05.359" status="PASS" endtime="20170629 21:27:05.360"></status>
</kw>
<status starttime="20170629 21:27:05.357" status="PASS" endtime="20170629 21:27:05.360"></status>
</kw>
<status starttime="20170629 21:27:05.357" status="PASS" endtime="20170629 21:27:05.360"></status>
</kw>
<msg level="INFO" timestamp="20170629 21:27:05.360">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170629 21:27:01.156" status="PASS" endtime="20170629 21:27:05.360"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170629 21:27:05.361">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170629 21:27:05.360" status="PASS" endtime="20170629 21:27:05.361"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170629 21:27:05.361">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170629 21:27:05.361">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170629 21:27:05.362">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170629 21:27:05.361" status="PASS" endtime="20170629 21:27:05.362"></status>
</kw>
<msg level="INFO" timestamp="20170629 21:27:05.362">${state} = xyz.openbmc_project.State.Host.HostState.Off</msg>
<status starttime="20170629 21:27:01.156" status="PASS" endtime="20170629 21:27:05.362"></status>
</kw>
<msg level="INFO" timestamp="20170629 21:27:05.362">${host_state} = Off</msg>
<status starttime="20170629 21:27:01.155" status="PASS" endtime="20170629 21:27:05.362"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170629 21:27:05.363">Running != Off</msg>
<status starttime="20170629 21:27:05.362" status="FAIL" endtime="20170629 21:27:05.363"></status>
</kw>
<status starttime="20170629 21:27:01.155" status="FAIL" endtime="20170629 21:27:05.363"></status>
</kw>
<kw name="Is Host Running" library="state_manager">
<doc>Check if host state is "Running".</doc>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170629 21:27:15.368">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170629 21:27:15.368" status="PASS" endtime="20170629 21:27:15.369"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170629 21:27:15.369">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170629 21:27:15.369" status="PASS" endtime="20170629 21:27:15.369"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170629 21:27:15.370">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170629 21:27:15.370" status="PASS" endtime="20170629 21:27:15.370"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170629 21:27:15.371">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170629 21:27:15.370" status="PASS" endtime="20170629 21:27:15.371"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170629 21:27:16.822">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170629 21:27:15.371" status="PASS" endtime="20170629 21:27:16.822"></status>
</kw>
<msg level="INFO" timestamp="20170629 21:27:16.823">${status} = PASS</msg>
<msg level="INFO" timestamp="20170629 21:27:16.823">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170629 21:27:15.371" status="PASS" endtime="20170629 21:27:16.823"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170629 21:27:16.824">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170629 21:27:16.823" status="PASS" endtime="20170629 21:27:16.824"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170629 21:27:16.824">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170629 21:27:16.824" status="PASS" endtime="20170629 21:27:16.824"></status>
</kw>
<status starttime="20170629 21:27:15.367" status="PASS" endtime="20170629 21:27:16.825"></status>
</kw>
<status starttime="20170629 21:27:15.367" status="PASS" endtime="20170629 21:27:16.825"></status>
</kw>
<status starttime="20170629 21:27:15.366" status="PASS" endtime="20170629 21:27:16.825"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170629 21:27:16.825">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170629 21:27:16.825" status="PASS" endtime="20170629 21:27:16.825"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170629 21:27:16.827">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170629 21:27:16.827" status="PASS" endtime="20170629 21:27:16.828"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170629 21:27:16.828">URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170629 21:27:16.828" status="PASS" endtime="20170629 21:27:16.829"></status>
</kw>
<status starttime="20170629 21:27:16.828" status="PASS" endtime="20170629 21:27:16.829"></status>
</kw>
<status starttime="20170629 21:27:16.826" status="PASS" endtime="20170629 21:27:16.829"></status>
</kw>
<status starttime="20170629 21:27:16.826" status="PASS" endtime="20170629 21:27:16.829"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170629 21:27:17.627">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170629 21:27:17.627">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170629 21:27:16.829" status="PASS" endtime="20170629 21:27:17.627"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170629 21:27:17.629">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170629 21:27:17.628" status="PASS" endtime="20170629 21:27:17.629"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170629 21:27:17.630">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170629 21:27:17.630" status="PASS" endtime="20170629 21:27:17.630"></status>
</kw>
<status starttime="20170629 21:27:17.629" status="PASS" endtime="20170629 21:27:17.630"></status>
</kw>
<status starttime="20170629 21:27:17.628" status="PASS" endtime="20170629 21:27:17.630"></status>
</kw>
<status starttime="20170629 21:27:17.627" status="PASS" endtime="20170629 21:27:17.630"></status>
</kw>
<msg level="INFO" timestamp="20170629 21:27:17.630">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170629 21:27:15.365" status="PASS" endtime="20170629 21:27:17.630"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170629 21:27:17.631">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170629 21:27:17.631" status="PASS" endtime="20170629 21:27:17.631"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170629 21:27:17.632">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170629 21:27:17.632">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170629 21:27:17.632">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170629 21:27:17.631" status="PASS" endtime="20170629 21:27:17.632"></status>
</kw>
<msg level="INFO" timestamp="20170629 21:27:17.632">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status starttime="20170629 21:27:15.365" status="PASS" endtime="20170629 21:27:17.632"></status>
</kw>
<msg level="INFO" timestamp="20170629 21:27:17.632">${host_state} = Running</msg>
<status starttime="20170629 21:27:15.364" status="PASS" endtime="20170629 21:27:17.632"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Running</arg>
<arg>${host_state}</arg>
</arguments>
<status starttime="20170629 21:27:17.633" status="PASS" endtime="20170629 21:27:17.633"></status>
</kw>
<status starttime="20170629 21:27:15.364" status="PASS" endtime="20170629 21:27:17.633"></status>
</kw>
<status starttime="20170629 21:27:01.155" status="PASS" endtime="20170629 21:27:17.633"></status>
</kw>
<status starttime="20170629 21:26:59.908" status="PASS" endtime="20170629 21:27:17.633"></status>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>10 min</arg>
<arg>10 sec</arg>
<arg>Is OS Starting</arg>
</arguments>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170629 21:27:17.638">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170629 21:27:17.637" status="PASS" endtime="20170629 21:27:17.638"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170629 21:27:17.639">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170629 21:27:17.638" status="PASS" endtime="20170629 21:27:17.639"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170629 21:27:17.639">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170629 21:27:17.639" status="PASS" endtime="20170629 21:27:17.639"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170629 21:27:17.640">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170629 21:27:17.640" status="PASS" endtime="20170629 21:27:17.640"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170629 21:27:18.096">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170629 21:27:17.641" status="PASS" endtime="20170629 21:27:18.096"></status>
</kw>
<msg level="INFO" timestamp="20170629 21:27:18.097">${status} = PASS</msg>
<msg level="INFO" timestamp="20170629 21:27:18.097">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170629 21:27:17.640" status="PASS" endtime="20170629 21:27:18.097"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170629 21:27:18.097">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170629 21:27:18.097" status="PASS" endtime="20170629 21:27:18.097"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170629 21:27:18.098">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170629 21:27:18.098" status="PASS" endtime="20170629 21:27:18.098"></status>
</kw>
<status starttime="20170629 21:27:17.637" status="PASS" endtime="20170629 21:27:18.098"></status>
</kw>
<status starttime="20170629 21:27:17.636" status="PASS" endtime="20170629 21:27:18.098"></status>
</kw>
<status starttime="20170629 21:27:17.636" status="PASS" endtime="20170629 21:27:18.098"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170629 21:27:18.099">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170629 21:27:18.099" status="PASS" endtime="20170629 21:27:18.099"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170629 21:27:18.101">${msg} = URI:https://9.3.21.61:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170629 21:27:18.100" status="PASS" endtime="20170629 21:27:18.101"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170629 21:27:18.102">URI:https://9.3.21.61:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170629 21:27:18.102" status="PASS" endtime="20170629 21:27:18.102"></status>
</kw>
<status starttime="20170629 21:27:18.101" status="PASS" endtime="20170629 21:27:18.102"></status>
</kw>
<status starttime="20170629 21:27:18.100" status="PASS" endtime="20170629 21:27:18.102"></status>
</kw>
<status starttime="20170629 21:27:18.099" status="PASS" endtime="20170629 21:27:18.102"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170629 21:27:18.517">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170629 21:27:18.517">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170629 21:27:18.103" status="PASS" endtime="20170629 21:27:18.517"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170629 21:27:18.519">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170629 21:27:18.518" status="PASS" endtime="20170629 21:27:18.519"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170629 21:27:18.520">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170629 21:27:18.520" status="PASS" endtime="20170629 21:27:18.520"></status>
</kw>
<status starttime="20170629 21:27:18.519" status="PASS" endtime="20170629 21:27:18.520"></status>
</kw>
<status starttime="20170629 21:27:18.518" status="PASS" endtime="20170629 21:27:18.520"></status>
</kw>
<status starttime="20170629 21:27:18.517" status="PASS" endtime="20170629 21:27:18.520"></status>
</kw>
<msg level="INFO" timestamp="20170629 21:27:18.520">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170629 21:27:17.635" status="PASS" endtime="20170629 21:27:18.520"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170629 21:27:18.521">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170629 21:27:18.521" status="PASS" endtime="20170629 21:27:18.521"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170629 21:27:18.522">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170629 21:27:18.522">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170629 21:27:18.522">${content} = {u'data': u'Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170629 21:27:18.521" status="PASS" endtime="20170629 21:27:18.522"></status>
</kw>
<msg level="INFO" timestamp="20170629 21:27:18.522">${state} = Off</msg>
<status starttime="20170629 21:27:17.635" status="PASS" endtime="20170629 21:27:18.522"></status>
</kw>
<msg level="INFO" timestamp="20170629 21:27:18.522">${boot_progress} = Off</msg>
<status starttime="20170629 21:27:17.634" status="PASS" endtime="20170629 21:27:18.522"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170629 21:27:18.523">Off != FW Progress, Starting OS</msg>
<status starttime="20170629 21:27:18.523" status="FAIL" endtime="20170629 21:27:18.523"></status>
</kw>
<status starttime="20170629 21:27:17.634" status="FAIL" endtime="20170629 21:27:18.523"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170629 21:27:28.529">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170629 21:27:28.528" status="PASS" endtime="20170629 21:27:28.529"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170629 21:27:28.530">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170629 21:27:28.529" status="PASS" endtime="20170629 21:27:28.530"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170629 21:27:28.530">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170629 21:27:28.530" status="PASS" endtime="20170629 21:27:28.530"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170629 21:27:28.531">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170629 21:27:28.530" status="PASS" endtime="20170629 21:27:28.531"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170629 21:27:28.812">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170629 21:27:28.532" status="PASS" endtime="20170629 21:27:28.812"></status>
</kw>
<msg level="INFO" timestamp="20170629 21:27:28.812">${status} = PASS</msg>
<msg level="INFO" timestamp="20170629 21:27:28.813">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170629 21:27:28.531" status="PASS" endtime="20170629 21:27:28.813"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170629 21:27:28.813">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170629 21:27:28.813" status="PASS" endtime="20170629 21:27:28.814"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170629 21:27:28.814">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170629 21:27:28.814" status="PASS" endtime="20170629 21:27:28.814"></status>
</kw>
<status starttime="20170629 21:27:28.527" status="PASS" endtime="20170629 21:27:28.814"></status>
</kw>
<status starttime="20170629 21:27:28.527" status="PASS" endtime="20170629 21:27:28.814"></status>
</kw>
<status starttime="20170629 21:27:28.526" status="PASS" endtime="20170629 21:27:28.815"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170629 21:27:28.815">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170629 21:27:28.815" status="PASS" endtime="20170629 21:27:28.815"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170629 21:27:28.817">${msg} = URI:https://9.3.21.61:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170629 21:27:28.817" status="PASS" endtime="20170629 21:27:28.817"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170629 21:27:28.818">URI:https://9.3.21.61:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170629 21:27:28.818" status="PASS" endtime="20170629 21:27:28.818"></status>
</kw>
<status starttime="20170629 21:27:28.817" status="PASS" endtime="20170629 21:27:28.818"></status>
</kw>
<status starttime="20170629 21:27:28.816" status="PASS" endtime="20170629 21:27:28.818"></status>
</kw>
<status starttime="20170629 21:27:28.815" status="PASS" endtime="20170629 21:27:28.819"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170629 21:27:28.884">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170629 21:27:28.884">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170629 21:27:28.819" status="PASS" endtime="20170629 21:27:28.884"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170629 21:27:28.886">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170629 21:27:28.885" status="PASS" endtime="20170629 21:27:28.886"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170629 21:27:28.887">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170629 21:27:28.886" status="PASS" endtime="20170629 21:27:28.887"></status>
</kw>
<status starttime="20170629 21:27:28.886" status="PASS" endtime="20170629 21:27:28.887"></status>
</kw>
<status starttime="20170629 21:27:28.885" status="PASS" endtime="20170629 21:27:28.887"></status>
</kw>
<status starttime="20170629 21:27:28.884" status="PASS" endtime="20170629 21:27:28.887"></status>
</kw>
<msg level="INFO" timestamp="20170629 21:27:28.888">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170629 21:27:28.526" status="PASS" endtime="20170629 21:27:28.888"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170629 21:27:28.888">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170629 21:27:28.888" status="PASS" endtime="20170629 21:27:28.888"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170629 21:27:28.889">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170629 21:27:28.889">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170629 21:27:28.889">${content} = {u'data': u'Off', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170629 21:27:28.889" status="PASS" endtime="20170629 21:27:28.889"></status>
</kw>
<msg level="INFO" timestamp="20170629 21:27:28.889">${state} = Off</msg>
<status starttime="20170629 21:27:28.525" status="PASS" endtime="20170629 21:27:28.889"></status>
</kw>
<msg level="INFO" timestamp="20170629 21:27:28.890">${boot_progress} = Off</msg>
<status starttime="20170629 21:27:28.525" status="PASS" endtime="20170629 21:27:28.890"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170629 21:27:28.890">Off != FW Progress, Starting OS</msg>
<status starttime="20170629 21:27:28.890" status="FAIL" endtime="20170629 21:27:28.890"></status>
</kw>
<status starttime="20170629 21:27:28.524" status="FAIL" endtime="20170629 21:27:28.890"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170629 21:27:38.896">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170629 21:27:38.895" status="PASS" endtime="20170629 21:27:38.896"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170629 21:27:38.897">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170629 21:27:38.896" status="PASS" endtime="20170629 21:27:38.897"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170629 21:27:38.897">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170629 21:27:38.897" status="PASS" endtime="20170629 21:27:38.897"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170629 21:27:38.898">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170629 21:27:38.897" status="PASS" endtime="20170629 21:27:38.898"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170629 21:27:39.362">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170629 21:27:38.898" status="PASS" endtime="20170629 21:27:39.362"></status>
</kw>
<msg level="INFO" timestamp="20170629 21:27:39.362">${status} = PASS</msg>
<msg level="INFO" timestamp="20170629 21:27:39.362">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170629 21:27:38.898" status="PASS" endtime="20170629 21:27:39.362"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170629 21:27:39.363">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170629 21:27:39.363" status="PASS" endtime="20170629 21:27:39.363"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170629 21:27:39.364">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170629 21:27:39.363" status="PASS" endtime="20170629 21:27:39.364"></status>
</kw>
<status starttime="20170629 21:27:38.895" status="PASS" endtime="20170629 21:27:39.364"></status>
</kw>
<status starttime="20170629 21:27:38.894" status="PASS" endtime="20170629 21:27:39.364"></status>
</kw>
<status starttime="20170629 21:27:38.894" status="PASS" endtime="20170629 21:27:39.364"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170629 21:27:39.365">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170629 21:27:39.365" status="PASS" endtime="20170629 21:27:39.365"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170629 21:27:39.367">${msg} = URI:https://9.3.21.61:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170629 21:27:39.366" status="PASS" endtime="20170629 21:27:39.367"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170629 21:27:39.368">URI:https://9.3.21.61:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170629 21:27:39.368" status="PASS" endtime="20170629 21:27:39.368"></status>
</kw>
<status starttime="20170629 21:27:39.367" status="PASS" endtime="20170629 21:27:39.368"></status>
</kw>
<status starttime="20170629 21:27:39.366" status="PASS" endtime="20170629 21:27:39.368"></status>
</kw>
<status starttime="20170629 21:27:39.365" status="PASS" endtime="20170629 21:27:39.369"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170629 21:27:39.537">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170629 21:27:39.537">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170629 21:27:39.369" status="PASS" endtime="20170629 21:27:39.537"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170629 21:27:39.539">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170629 21:27:39.538" status="PASS" endtime="20170629 21:27:39.539"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170629 21:27:39.540">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170629 21:27:39.539" status="PASS" endtime="20170629 21:27:39.540"></status>
</kw>
<status starttime="20170629 21:27:39.539" status="PASS" endtime="20170629 21:27:39.540"></status>
</kw>
<status starttime="20170629 21:27:39.538" status="PASS" endtime="20170629 21:27:39.540"></status>
</kw>
<status starttime="20170629 21:27:39.537" status="PASS" endtime="20170629 21:27:39.540"></status>
</kw>
<msg level="INFO" timestamp="20170629 21:27:39.540">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170629 21:27:38.893" status="PASS" endtime="20170629 21:27:39.540"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170629 21:27:39.541">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170629 21:27:39.541" status="PASS" endtime="20170629 21:27:39.541"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170629 21:27:39.542">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170629 21:27:39.542">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170629 21:27:39.542">${content} = {u'data': u'FW Progress, Baseboard Init', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170629 21:27:39.541" status="PASS" endtime="20170629 21:27:39.542"></status>
</kw>
<msg level="INFO" timestamp="20170629 21:27:39.542">${state} = FW Progress, Baseboard Init</msg>
<status starttime="20170629 21:27:38.892" status="PASS" endtime="20170629 21:27:39.542"></status>
</kw>
<msg level="INFO" timestamp="20170629 21:27:39.542">${boot_progress} = FW Progress, Baseboard Init</msg>
<status starttime="20170629 21:27:38.892" status="PASS" endtime="20170629 21:27:39.542"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170629 21:27:39.543">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status starttime="20170629 21:27:39.543" status="FAIL" endtime="20170629 21:27:39.543"></status>
</kw>
<status starttime="20170629 21:27:38.891" status="FAIL" endtime="20170629 21:27:39.543"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170629 21:27:49.548">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170629 21:27:49.548" status="PASS" endtime="20170629 21:27:49.549"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170629 21:27:49.549">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170629 21:27:49.549" status="PASS" endtime="20170629 21:27:49.549"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170629 21:27:49.550">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170629 21:27:49.549" status="PASS" endtime="20170629 21:27:49.550"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170629 21:27:49.550">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170629 21:27:49.550" status="PASS" endtime="20170629 21:27:49.551"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170629 21:27:49.843">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170629 21:27:49.551" status="PASS" endtime="20170629 21:27:49.843"></status>
</kw>
<msg level="INFO" timestamp="20170629 21:27:49.843">${status} = PASS</msg>
<msg level="INFO" timestamp="20170629 21:27:49.843">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170629 21:27:49.551" status="PASS" endtime="20170629 21:27:49.843"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170629 21:27:49.844">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170629 21:27:49.844" status="PASS" endtime="20170629 21:27:49.844"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170629 21:27:49.845">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170629 21:27:49.844" status="PASS" endtime="20170629 21:27:49.845"></status>
</kw>
<status starttime="20170629 21:27:49.547" status="PASS" endtime="20170629 21:27:49.845"></status>
</kw>
<status starttime="20170629 21:27:49.547" status="PASS" endtime="20170629 21:27:49.845"></status>
</kw>
<status starttime="20170629 21:27:49.546" status="PASS" endtime="20170629 21:27:49.845"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170629 21:27:49.846">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170629 21:27:49.845" status="PASS" endtime="20170629 21:27:49.846"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170629 21:27:49.848">${msg} = URI:https://9.3.21.61:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170629 21:27:49.847" status="PASS" endtime="20170629 21:27:49.848"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170629 21:27:49.849">URI:https://9.3.21.61:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170629 21:27:49.848" status="PASS" endtime="20170629 21:27:49.849"></status>
</kw>
<status starttime="20170629 21:27:49.848" status="PASS" endtime="20170629 21:27:49.849"></status>
</kw>
<status starttime="20170629 21:27:49.846" status="PASS" endtime="20170629 21:27:49.849"></status>
</kw>
<status starttime="20170629 21:27:49.846" status="PASS" endtime="20170629 21:27:49.849"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170629 21:27:49.964">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170629 21:27:49.964">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170629 21:27:49.849" status="PASS" endtime="20170629 21:27:49.964"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170629 21:27:49.966">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170629 21:27:49.966" status="PASS" endtime="20170629 21:27:49.966"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170629 21:27:49.969">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170629 21:27:49.967" status="PASS" endtime="20170629 21:27:49.969"></status>
</kw>
<status starttime="20170629 21:27:49.966" status="PASS" endtime="20170629 21:27:49.969"></status>
</kw>
<status starttime="20170629 21:27:49.965" status="PASS" endtime="20170629 21:27:49.969"></status>
</kw>
<status starttime="20170629 21:27:49.965" status="PASS" endtime="20170629 21:27:49.969"></status>
</kw>
<msg level="INFO" timestamp="20170629 21:27:49.969">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170629 21:27:49.545" status="PASS" endtime="20170629 21:27:49.970"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170629 21:27:49.970">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170629 21:27:49.970" status="PASS" endtime="20170629 21:27:49.970"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170629 21:27:49.971">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170629 21:27:49.971">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170629 21:27:49.971">${content} = {u'data': u'FW Progress, Baseboard Init', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170629 21:27:49.970" status="PASS" endtime="20170629 21:27:49.971"></status>
</kw>
<msg level="INFO" timestamp="20170629 21:27:49.971">${state} = FW Progress, Baseboard Init</msg>
<status starttime="20170629 21:27:49.545" status="PASS" endtime="20170629 21:27:49.971"></status>
</kw>
<msg level="INFO" timestamp="20170629 21:27:49.971">${boot_progress} = FW Progress, Baseboard Init</msg>
<status starttime="20170629 21:27:49.544" status="PASS" endtime="20170629 21:27:49.971"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170629 21:27:49.972">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status starttime="20170629 21:27:49.972" status="FAIL" endtime="20170629 21:27:49.972"></status>
</kw>
<status starttime="20170629 21:27:49.544" status="FAIL" endtime="20170629 21:27:49.972"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170629 21:27:59.978">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170629 21:27:59.978" status="PASS" endtime="20170629 21:27:59.979"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170629 21:27:59.980">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170629 21:27:59.979" status="PASS" endtime="20170629 21:27:59.980"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170629 21:27:59.981">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170629 21:27:59.980" status="PASS" endtime="20170629 21:27:59.981"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170629 21:27:59.982">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170629 21:27:59.981" status="PASS" endtime="20170629 21:27:59.982"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170629 21:28:00.179">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170629 21:27:59.983" status="PASS" endtime="20170629 21:28:00.179"></status>
</kw>
<msg level="INFO" timestamp="20170629 21:28:00.179">${status} = PASS</msg>
<msg level="INFO" timestamp="20170629 21:28:00.179">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170629 21:27:59.982" status="PASS" endtime="20170629 21:28:00.179"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170629 21:28:00.180">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170629 21:28:00.179" status="PASS" endtime="20170629 21:28:00.180"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170629 21:28:00.180">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170629 21:28:00.180" status="PASS" endtime="20170629 21:28:00.180"></status>
</kw>
<status starttime="20170629 21:27:59.977" status="PASS" endtime="20170629 21:28:00.181"></status>
</kw>
<status starttime="20170629 21:27:59.976" status="PASS" endtime="20170629 21:28:00.181"></status>
</kw>
<status starttime="20170629 21:27:59.976" status="PASS" endtime="20170629 21:28:00.181"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170629 21:28:00.181">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170629 21:28:00.181" status="PASS" endtime="20170629 21:28:00.181"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170629 21:28:00.184">${msg} = URI:https://9.3.21.61:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170629 21:28:00.183" status="PASS" endtime="20170629 21:28:00.184"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170629 21:28:00.185">URI:https://9.3.21.61:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170629 21:28:00.185" status="PASS" endtime="20170629 21:28:00.185"></status>
</kw>
<status starttime="20170629 21:28:00.184" status="PASS" endtime="20170629 21:28:00.185"></status>
</kw>
<status starttime="20170629 21:28:00.182" status="PASS" endtime="20170629 21:28:00.185"></status>
</kw>
<status starttime="20170629 21:28:00.182" status="PASS" endtime="20170629 21:28:00.185"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170629 21:28:00.261">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170629 21:28:00.261">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170629 21:28:00.186" status="PASS" endtime="20170629 21:28:00.261"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170629 21:28:00.263">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170629 21:28:00.262" status="PASS" endtime="20170629 21:28:00.263"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170629 21:28:00.264">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170629 21:28:00.264" status="PASS" endtime="20170629 21:28:00.264"></status>
</kw>
<status starttime="20170629 21:28:00.263" status="PASS" endtime="20170629 21:28:00.264"></status>
</kw>
<status starttime="20170629 21:28:00.262" status="PASS" endtime="20170629 21:28:00.264"></status>
</kw>
<status starttime="20170629 21:28:00.261" status="PASS" endtime="20170629 21:28:00.264"></status>
</kw>
<msg level="INFO" timestamp="20170629 21:28:00.264">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170629 21:27:59.975" status="PASS" endtime="20170629 21:28:00.265"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170629 21:28:00.265">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170629 21:28:00.265" status="PASS" endtime="20170629 21:28:00.265"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170629 21:28:00.266">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170629 21:28:00.266">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170629 21:28:00.266">${content} = {u'data': u'FW Progress, Baseboard Init', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170629 21:28:00.265" status="PASS" endtime="20170629 21:28:00.266"></status>
</kw>
<msg level="INFO" timestamp="20170629 21:28:00.266">${state} = FW Progress, Baseboard Init</msg>
<status starttime="20170629 21:27:59.974" status="PASS" endtime="20170629 21:28:00.266"></status>
</kw>
<msg level="INFO" timestamp="20170629 21:28:00.266">${boot_progress} = FW Progress, Baseboard Init</msg>
<status starttime="20170629 21:27:59.974" status="PASS" endtime="20170629 21:28:00.266"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170629 21:28:00.267">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status starttime="20170629 21:28:00.267" status="FAIL" endtime="20170629 21:28:00.267"></status>
</kw>
<status starttime="20170629 21:27:59.973" status="FAIL" endtime="20170629 21:28:00.267"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170629 21:28:10.272">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170629 21:28:10.271" status="PASS" endtime="20170629 21:28:10.273"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170629 21:28:10.273">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170629 21:28:10.273" status="PASS" endtime="20170629 21:28:10.274"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170629 21:28:10.274">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170629 21:28:10.274" status="PASS" endtime="20170629 21:28:10.274"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170629 21:28:10.275">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170629 21:28:10.275" status="PASS" endtime="20170629 21:28:10.275"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170629 21:28:10.522">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170629 21:28:10.276" status="PASS" endtime="20170629 21:28:10.523"></status>
</kw>
<msg level="INFO" timestamp="20170629 21:28:10.523">${status} = PASS</msg>
<msg level="INFO" timestamp="20170629 21:28:10.523">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170629 21:28:10.276" status="PASS" endtime="20170629 21:28:10.523"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170629 21:28:10.523">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170629 21:28:10.523" status="PASS" endtime="20170629 21:28:10.523"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170629 21:28:10.524">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170629 21:28:10.524" status="PASS" endtime="20170629 21:28:10.524"></status>
</kw>
<status starttime="20170629 21:28:10.271" status="PASS" endtime="20170629 21:28:10.524"></status>
</kw>
<status starttime="20170629 21:28:10.271" status="PASS" endtime="20170629 21:28:10.524"></status>
</kw>
<status starttime="20170629 21:28:10.270" status="PASS" endtime="20170629 21:28:10.524"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170629 21:28:10.525">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170629 21:28:10.525" status="PASS" endtime="20170629 21:28:10.525"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170629 21:28:10.527">${msg} = URI:https://9.3.21.61:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170629 21:28:10.526" status="PASS" endtime="20170629 21:28:10.527"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170629 21:28:10.528">URI:https://9.3.21.61:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170629 21:28:10.528" status="PASS" endtime="20170629 21:28:10.528"></status>
</kw>
<status starttime="20170629 21:28:10.527" status="PASS" endtime="20170629 21:28:10.528"></status>
</kw>
<status starttime="20170629 21:28:10.526" status="PASS" endtime="20170629 21:28:10.528"></status>
</kw>
<status starttime="20170629 21:28:10.525" status="PASS" endtime="20170629 21:28:10.528"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170629 21:28:10.619">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170629 21:28:10.619">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170629 21:28:10.529" status="PASS" endtime="20170629 21:28:10.619"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170629 21:28:10.621">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170629 21:28:10.620" status="PASS" endtime="20170629 21:28:10.621"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170629 21:28:10.622">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170629 21:28:10.621" status="PASS" endtime="20170629 21:28:10.622"></status>
</kw>
<status starttime="20170629 21:28:10.621" status="PASS" endtime="20170629 21:28:10.622"></status>
</kw>
<status starttime="20170629 21:28:10.620" status="PASS" endtime="20170629 21:28:10.622"></status>
</kw>
<status starttime="20170629 21:28:10.619" status="PASS" endtime="20170629 21:28:10.622"></status>
</kw>
<msg level="INFO" timestamp="20170629 21:28:10.622">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170629 21:28:10.269" status="PASS" endtime="20170629 21:28:10.622"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170629 21:28:10.623">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170629 21:28:10.622" status="PASS" endtime="20170629 21:28:10.623"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170629 21:28:10.623">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170629 21:28:10.623">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170629 21:28:10.624">${content} = {u'data': u'FW Progress, Baseboard Init', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170629 21:28:10.623" status="PASS" endtime="20170629 21:28:10.624"></status>
</kw>
<msg level="INFO" timestamp="20170629 21:28:10.624">${state} = FW Progress, Baseboard Init</msg>
<status starttime="20170629 21:28:10.269" status="PASS" endtime="20170629 21:28:10.624"></status>
</kw>
<msg level="INFO" timestamp="20170629 21:28:10.624">${boot_progress} = FW Progress, Baseboard Init</msg>
<status starttime="20170629 21:28:10.268" status="PASS" endtime="20170629 21:28:10.624"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170629 21:28:10.625">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status starttime="20170629 21:28:10.624" status="FAIL" endtime="20170629 21:28:10.625"></status>
</kw>
<status starttime="20170629 21:28:10.268" status="FAIL" endtime="20170629 21:28:10.625"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170629 21:28:20.630">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170629 21:28:20.629" status="PASS" endtime="20170629 21:28:20.630"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170629 21:28:20.631">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170629 21:28:20.630" status="PASS" endtime="20170629 21:28:20.631"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170629 21:28:20.631">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170629 21:28:20.631" status="PASS" endtime="20170629 21:28:20.631"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170629 21:28:20.632">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170629 21:28:20.632" status="PASS" endtime="20170629 21:28:20.632"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170629 21:28:20.865">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170629 21:28:20.633" status="PASS" endtime="20170629 21:28:20.865"></status>
</kw>
<msg level="INFO" timestamp="20170629 21:28:20.866">${status} = PASS</msg>
<msg level="INFO" timestamp="20170629 21:28:20.866">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170629 21:28:20.632" status="PASS" endtime="20170629 21:28:20.866"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170629 21:28:20.866">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170629 21:28:20.866" status="PASS" endtime="20170629 21:28:20.866"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170629 21:28:20.867">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170629 21:28:20.867" status="PASS" endtime="20170629 21:28:20.867"></status>
</kw>
<status starttime="20170629 21:28:20.629" status="PASS" endtime="20170629 21:28:20.867"></status>
</kw>
<status starttime="20170629 21:28:20.628" status="PASS" endtime="20170629 21:28:20.867"></status>
</kw>
<status starttime="20170629 21:28:20.628" status="PASS" endtime="20170629 21:28:20.867"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170629 21:28:20.868">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170629 21:28:20.868" status="PASS" endtime="20170629 21:28:20.868"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170629 21:28:20.870">${msg} = URI:https://9.3.21.61:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170629 21:28:20.869" status="PASS" endtime="20170629 21:28:20.870"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170629 21:28:20.871">URI:https://9.3.21.61:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170629 21:28:20.871" status="PASS" endtime="20170629 21:28:20.871"></status>
</kw>
<status starttime="20170629 21:28:20.870" status="PASS" endtime="20170629 21:28:20.871"></status>
</kw>
<status starttime="20170629 21:28:20.869" status="PASS" endtime="20170629 21:28:20.871"></status>
</kw>
<status starttime="20170629 21:28:20.868" status="PASS" endtime="20170629 21:28:20.871"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170629 21:28:20.937">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170629 21:28:20.937">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170629 21:28:20.872" status="PASS" endtime="20170629 21:28:20.937"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170629 21:28:20.939">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170629 21:28:20.939" status="PASS" endtime="20170629 21:28:20.939"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170629 21:28:20.940">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170629 21:28:20.940" status="PASS" endtime="20170629 21:28:20.940"></status>
</kw>
<status starttime="20170629 21:28:20.939" status="PASS" endtime="20170629 21:28:20.940"></status>
</kw>
<status starttime="20170629 21:28:20.938" status="PASS" endtime="20170629 21:28:20.940"></status>
</kw>
<status starttime="20170629 21:28:20.938" status="PASS" endtime="20170629 21:28:20.940"></status>
</kw>
<msg level="INFO" timestamp="20170629 21:28:20.941">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170629 21:28:20.627" status="PASS" endtime="20170629 21:28:20.941"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170629 21:28:20.941">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170629 21:28:20.941" status="PASS" endtime="20170629 21:28:20.941"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170629 21:28:20.942">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170629 21:28:20.942">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170629 21:28:20.942">${content} = {u'data': u'FW Progress, Baseboard Init', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170629 21:28:20.942" status="PASS" endtime="20170629 21:28:20.942"></status>
</kw>
<msg level="INFO" timestamp="20170629 21:28:20.942">${state} = FW Progress, Baseboard Init</msg>
<status starttime="20170629 21:28:20.626" status="PASS" endtime="20170629 21:28:20.942"></status>
</kw>
<msg level="INFO" timestamp="20170629 21:28:20.942">${boot_progress} = FW Progress, Baseboard Init</msg>
<status starttime="20170629 21:28:20.626" status="PASS" endtime="20170629 21:28:20.943"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170629 21:28:20.943">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status starttime="20170629 21:28:20.943" status="FAIL" endtime="20170629 21:28:20.943"></status>
</kw>
<status starttime="20170629 21:28:20.625" status="FAIL" endtime="20170629 21:28:20.943"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170629 21:28:30.948">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170629 21:28:30.948" status="PASS" endtime="20170629 21:28:30.948"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170629 21:28:30.949">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170629 21:28:30.949" status="PASS" endtime="20170629 21:28:30.949"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170629 21:28:30.950">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170629 21:28:30.949" status="PASS" endtime="20170629 21:28:30.950"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170629 21:28:30.950">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170629 21:28:30.950" status="PASS" endtime="20170629 21:28:30.950"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170629 21:28:31.217">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170629 21:28:30.951" status="PASS" endtime="20170629 21:28:31.217"></status>
</kw>
<msg level="INFO" timestamp="20170629 21:28:31.217">${status} = PASS</msg>
<msg level="INFO" timestamp="20170629 21:28:31.217">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170629 21:28:30.951" status="PASS" endtime="20170629 21:28:31.217"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170629 21:28:31.218">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170629 21:28:31.218" status="PASS" endtime="20170629 21:28:31.218"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170629 21:28:31.218">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170629 21:28:31.218" status="PASS" endtime="20170629 21:28:31.219"></status>
</kw>
<status starttime="20170629 21:28:30.947" status="PASS" endtime="20170629 21:28:31.219"></status>
</kw>
<status starttime="20170629 21:28:30.947" status="PASS" endtime="20170629 21:28:31.219"></status>
</kw>
<status starttime="20170629 21:28:30.946" status="PASS" endtime="20170629 21:28:31.219"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170629 21:28:31.219">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170629 21:28:31.219" status="PASS" endtime="20170629 21:28:31.219"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170629 21:28:31.221">${msg} = URI:https://9.3.21.61:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170629 21:28:31.221" status="PASS" endtime="20170629 21:28:31.222"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170629 21:28:31.222">URI:https://9.3.21.61:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170629 21:28:31.222" status="PASS" endtime="20170629 21:28:31.222"></status>
</kw>
<status starttime="20170629 21:28:31.222" status="PASS" endtime="20170629 21:28:31.223"></status>
</kw>
<status starttime="20170629 21:28:31.220" status="PASS" endtime="20170629 21:28:31.223"></status>
</kw>
<status starttime="20170629 21:28:31.220" status="PASS" endtime="20170629 21:28:31.223"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170629 21:28:31.288">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170629 21:28:31.288">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170629 21:28:31.223" status="PASS" endtime="20170629 21:28:31.288"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170629 21:28:31.290">${msg} = Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170629 21:28:31.289" status="PASS" endtime="20170629 21:28:31.290"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170629 21:28:31.291">Response code:200, Content:{
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170629 21:28:31.291" status="PASS" endtime="20170629 21:28:31.291"></status>
</kw>
<status starttime="20170629 21:28:31.290" status="PASS" endtime="20170629 21:28:31.291"></status>
</kw>
<status starttime="20170629 21:28:31.289" status="PASS" endtime="20170629 21:28:31.291"></status>
</kw>
<status starttime="20170629 21:28:31.288" status="PASS" endtime="20170629 21:28:31.291"></status>
</kw>
<msg level="INFO" timestamp="20170629 21:28:31.291">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170629 21:28:30.945" status="PASS" endtime="20170629 21:28:31.291"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170629 21:28:31.292">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170629 21:28:31.292" status="PASS" endtime="20170629 21:28:31.292"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170629 21:28:31.293">To JSON using : content={
  "data": "FW Progress, Baseboard Init", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170629 21:28:31.293">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170629 21:28:31.293">${content} = {u'data': u'FW Progress, Baseboard Init', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170629 21:28:31.292" status="PASS" endtime="20170629 21:28:31.293"></status>
</kw>
<msg level="INFO" timestamp="20170629 21:28:31.293">${state} = FW Progress, Baseboard Init</msg>
<status starttime="20170629 21:28:30.945" status="PASS" endtime="20170629 21:28:31.293"></status>
</kw>
<msg level="INFO" timestamp="20170629 21:28:31.293">${boot_progress} = FW Progress, Baseboard Init</msg>
<status starttime="20170629 21:28:30.945" status="PASS" endtime="20170629 21:28:31.293"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<msg level="FAIL" timestamp="20170629 21:28:31.294">FW Progress, Baseboard Init != FW Progress, Starting OS</msg>
<status starttime="20170629 21:28:31.294" status="FAIL" endtime="20170629 21:28:31.294"></status>
</kw>
<status starttime="20170629 21:28:30.944" status="FAIL" endtime="20170629 21:28:31.294"></status>
</kw>
<kw name="Is OS Starting" library="utils">
<doc>Check if boot progress is OS starting.</doc>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170629 21:28:41.299">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170629 21:28:41.299" status="PASS" endtime="20170629 21:28:41.299"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170629 21:28:41.300">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170629 21:28:41.300" status="PASS" endtime="20170629 21:28:41.300"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170629 21:28:41.301">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170629 21:28:41.300" status="PASS" endtime="20170629 21:28:41.301"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170629 21:28:41.301">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170629 21:28:41.301" status="PASS" endtime="20170629 21:28:41.301"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170629 21:28:41.502">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170629 21:28:41.302" status="PASS" endtime="20170629 21:28:41.502"></status>
</kw>
<msg level="INFO" timestamp="20170629 21:28:41.502">${status} = PASS</msg>
<msg level="INFO" timestamp="20170629 21:28:41.502">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170629 21:28:41.302" status="PASS" endtime="20170629 21:28:41.503"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170629 21:28:41.503">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170629 21:28:41.503" status="PASS" endtime="20170629 21:28:41.503"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170629 21:28:41.504">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170629 21:28:41.503" status="PASS" endtime="20170629 21:28:41.504"></status>
</kw>
<status starttime="20170629 21:28:41.298" status="PASS" endtime="20170629 21:28:41.504"></status>
</kw>
<status starttime="20170629 21:28:41.297" status="PASS" endtime="20170629 21:28:41.504"></status>
</kw>
<status starttime="20170629 21:28:41.297" status="PASS" endtime="20170629 21:28:41.504"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170629 21:28:41.505">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status starttime="20170629 21:28:41.504" status="PASS" endtime="20170629 21:28:41.505"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170629 21:28:41.507">${msg} = URI:https://9.3.21.61:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170629 21:28:41.506" status="PASS" endtime="20170629 21:28:41.507"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170629 21:28:41.508">URI:https://9.3.21.61:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status starttime="20170629 21:28:41.508" status="PASS" endtime="20170629 21:28:41.508"></status>
</kw>
<status starttime="20170629 21:28:41.507" status="PASS" endtime="20170629 21:28:41.508"></status>
</kw>
<status starttime="20170629 21:28:41.506" status="PASS" endtime="20170629 21:28:41.508"></status>
</kw>
<status starttime="20170629 21:28:41.505" status="PASS" endtime="20170629 21:28:41.508"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170629 21:28:41.651">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None json=None</msg>
<msg level="INFO" timestamp="20170629 21:28:41.652">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170629 21:28:41.508" status="PASS" endtime="20170629 21:28:41.652"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170629 21:28:41.653">${msg} = Response code:200, Content:{
  "data": "FW Progress, Starting OS", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170629 21:28:41.653" status="PASS" endtime="20170629 21:28:41.653"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170629 21:28:41.655">Response code:200, Content:{
  "data": "FW Progress, Starting OS", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170629 21:28:41.654" status="PASS" endtime="20170629 21:28:41.655"></status>
</kw>
<status starttime="20170629 21:28:41.654" status="PASS" endtime="20170629 21:28:41.655"></status>
</kw>
<status starttime="20170629 21:28:41.652" status="PASS" endtime="20170629 21:28:41.655"></status>
</kw>
<status starttime="20170629 21:28:41.652" status="PASS" endtime="20170629 21:28:41.655"></status>
</kw>
<msg level="INFO" timestamp="20170629 21:28:41.655">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170629 21:28:41.296" status="PASS" endtime="20170629 21:28:41.655"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170629 21:28:41.656">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170629 21:28:41.656" status="PASS" endtime="20170629 21:28:41.656"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170629 21:28:41.656">To JSON using : content={
  "data": "FW Progress, Starting OS", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170629 21:28:41.656">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170629 21:28:41.657">${content} = {u'data': u'FW Progress, Starting OS', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170629 21:28:41.656" status="PASS" endtime="20170629 21:28:41.657"></status>
</kw>
<msg level="INFO" timestamp="20170629 21:28:41.657">${state} = FW Progress, Starting OS</msg>
<status starttime="20170629 21:28:41.296" status="PASS" endtime="20170629 21:28:41.657"></status>
</kw>
<msg level="INFO" timestamp="20170629 21:28:41.657">${boot_progress} = FW Progress, Starting OS</msg>
<status starttime="20170629 21:28:41.295" status="PASS" endtime="20170629 21:28:41.657"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<status starttime="20170629 21:28:41.657" status="PASS" endtime="20170629 21:28:41.658"></status>
</kw>
<status starttime="20170629 21:28:41.295" status="PASS" endtime="20170629 21:28:41.658"></status>
</kw>
<status starttime="20170629 21:27:17.634" status="PASS" endtime="20170629 21:28:41.658"></status>
</kw>
<kw name="Flush REST Sessions" library="utils">
<doc>Removes all the active session objects</doc>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170629 21:28:41.659">Delete All Sessions</msg>
<status starttime="20170629 21:28:41.658" status="PASS" endtime="20170629 21:28:41.660"></status>
</kw>
<status starttime="20170629 21:28:41.658" status="PASS" endtime="20170629 21:28:41.660"></status>
</kw>
<status starttime="20170629 21:26:52.403" status="PASS" endtime="20170629 21:28:41.660"></status>
</kw>
<msg level="INFO" timestamp="20170629 21:28:41.660">Repeating keyword, round 2/2.</msg>
<kw name="Host Off And On">
<doc>Verify power off and on.</doc>
<kw name="Initiate Host PowerOff" library="state_manager">
<doc>Initiate host power off.</doc>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=${HOST_POWEROFF_TRANS}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20170629 21:28:41.661">${args} = {u'data': 'xyz.openbmc_project.State.Host.Transition.Off'}</msg>
<status starttime="20170629 21:28:41.661" status="PASS" endtime="20170629 21:28:41.662"></status>
</kw>
<kw name="Write Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>RequestedHostTransition</arg>
<arg>data=${args}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170629 21:28:41.663">${base_uri} = /xyz/openbmc_project/state/host0/</msg>
<status starttime="20170629 21:28:41.662" status="PASS" endtime="20170629 21:28:41.663"></status>
</kw>
<kw name="OpenBMC Put Request" library="rest_client">
<arguments>
<arg>${base_uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170629 21:28:41.665">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170629 21:28:41.665" status="PASS" endtime="20170629 21:28:41.666"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170629 21:28:41.666">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170629 21:28:41.666" status="PASS" endtime="20170629 21:28:41.666"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170629 21:28:41.667">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170629 21:28:41.667" status="PASS" endtime="20170629 21:28:41.667"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170629 21:28:41.668">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170629 21:28:41.668" status="PASS" endtime="20170629 21:28:41.668"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170629 21:28:41.890">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170629 21:28:41.669" status="PASS" endtime="20170629 21:28:41.891"></status>
</kw>
<msg level="INFO" timestamp="20170629 21:28:41.891">${status} = PASS</msg>
<msg level="INFO" timestamp="20170629 21:28:41.891">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170629 21:28:41.668" status="PASS" endtime="20170629 21:28:41.891"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170629 21:28:41.891">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170629 21:28:41.891" status="PASS" endtime="20170629 21:28:41.891"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170629 21:28:41.892">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170629 21:28:41.892" status="PASS" endtime="20170629 21:28:41.892"></status>
</kw>
<status starttime="20170629 21:28:41.664" status="PASS" endtime="20170629 21:28:41.892"></status>
</kw>
<status starttime="20170629 21:28:41.664" status="PASS" endtime="20170629 21:28:41.892"></status>
</kw>
<status starttime="20170629 21:28:41.664" status="PASS" endtime="20170629 21:28:41.892"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170629 21:28:41.893">${base_uri} = /xyz/openbmc_project/state/host0//attr/RequestedHostTransition</msg>
<status starttime="20170629 21:28:41.893" status="PASS" endtime="20170629 21:28:41.893"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170629 21:28:41.894">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170629 21:28:41.893" status="PASS" endtime="20170629 21:28:41.894"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status starttime="20170629 21:28:41.894" status="PASS" endtime="20170629 21:28:41.894"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Put</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170629 21:28:41.896">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, method:Put, args:{u'data': {u'data': 'xyz.openbmc_project.State.Host.Transition.Off'}, u'headers': {u'Content-T...</msg>
<status starttime="20170629 21:28:41.895" status="PASS" endtime="20170629 21:28:41.896"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170629 21:28:41.897">URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, method:Put, args:{u'data': {u'data': 'xyz.openbmc_project.State.Host.Transition.Off'}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status starttime="20170629 21:28:41.896" status="PASS" endtime="20170629 21:28:41.897"></status>
</kw>
<status starttime="20170629 21:28:41.896" status="PASS" endtime="20170629 21:28:41.897"></status>
</kw>
<status starttime="20170629 21:28:41.894" status="PASS" endtime="20170629 21:28:41.897"></status>
</kw>
<kw name="Put Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a PUT request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170629 21:28:42.126">Put Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, data={"data": "xyz.openbmc_project.State.Host.Transition.Off"},                     headers={u'Content-Type': u'application/json'}, allow_redirects=True </msg>
<msg level="INFO" timestamp="20170629 21:28:42.126">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170629 21:28:41.897" status="PASS" endtime="20170629 21:28:42.126"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170629 21:28:42.127">${msg} = Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170629 21:28:42.127" status="PASS" endtime="20170629 21:28:42.127"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170629 21:28:42.128">Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170629 21:28:42.128" status="PASS" endtime="20170629 21:28:42.128"></status>
</kw>
<status starttime="20170629 21:28:42.127" status="PASS" endtime="20170629 21:28:42.128"></status>
</kw>
<status starttime="20170629 21:28:42.126" status="PASS" endtime="20170629 21:28:42.128"></status>
</kw>
<msg level="INFO" timestamp="20170629 21:28:42.129">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170629 21:28:41.663" status="PASS" endtime="20170629 21:28:42.129"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170629 21:28:42.129">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170629 21:28:42.129" status="PASS" endtime="20170629 21:28:42.129"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${json}</var>
</assign>
<msg level="INFO" timestamp="20170629 21:28:42.130">To JSON using : content={
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170629 21:28:42.130">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170629 21:28:42.130">${json} = {u'data': None, u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170629 21:28:42.130" status="PASS" endtime="20170629 21:28:42.130"></status>
</kw>
<status starttime="20170629 21:28:41.662" status="PASS" endtime="20170629 21:28:42.130"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${wait}' == '${0}'</arg>
<arg>Return From Keyword</arg>
</arguments>
<status starttime="20170629 21:28:42.130" status="PASS" endtime="20170629 21:28:42.131"></status>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>3 min</arg>
<arg>10 sec</arg>
<arg>Is Host Off</arg>
</arguments>
<kw name="Is Host Off" library="state_manager">
<doc>Check if host state is "Off".</doc>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170629 21:28:42.135">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170629 21:28:42.135" status="PASS" endtime="20170629 21:28:42.136"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170629 21:28:42.136">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170629 21:28:42.136" status="PASS" endtime="20170629 21:28:42.136"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170629 21:28:42.137">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170629 21:28:42.137" status="PASS" endtime="20170629 21:28:42.137"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170629 21:28:42.138">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170629 21:28:42.137" status="PASS" endtime="20170629 21:28:42.138"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170629 21:28:43.735">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170629 21:28:42.138" status="PASS" endtime="20170629 21:28:43.735"></status>
</kw>
<msg level="INFO" timestamp="20170629 21:28:43.735">${status} = PASS</msg>
<msg level="INFO" timestamp="20170629 21:28:43.735">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170629 21:28:42.138" status="PASS" endtime="20170629 21:28:43.735"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170629 21:28:43.736">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170629 21:28:43.736" status="PASS" endtime="20170629 21:28:43.736"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170629 21:28:43.737">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170629 21:28:43.736" status="PASS" endtime="20170629 21:28:43.737"></status>
</kw>
<status starttime="20170629 21:28:42.135" status="PASS" endtime="20170629 21:28:43.737"></status>
</kw>
<status starttime="20170629 21:28:42.134" status="PASS" endtime="20170629 21:28:43.737"></status>
</kw>
<status starttime="20170629 21:28:42.133" status="PASS" endtime="20170629 21:28:43.737"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170629 21:28:43.738">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170629 21:28:43.737" status="PASS" endtime="20170629 21:28:43.738"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170629 21:28:43.740">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170629 21:28:43.739" status="PASS" endtime="20170629 21:28:43.740"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170629 21:28:43.741">URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170629 21:28:43.740" status="PASS" endtime="20170629 21:28:43.741"></status>
</kw>
<status starttime="20170629 21:28:43.740" status="PASS" endtime="20170629 21:28:43.741"></status>
</kw>
<status starttime="20170629 21:28:43.738" status="PASS" endtime="20170629 21:28:43.741"></status>
</kw>
<status starttime="20170629 21:28:43.738" status="PASS" endtime="20170629 21:28:43.741"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170629 21:28:49.992">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170629 21:28:49.992">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170629 21:28:43.741" status="PASS" endtime="20170629 21:28:49.992"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170629 21:28:49.994">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170629 21:28:49.994" status="PASS" endtime="20170629 21:28:49.994"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170629 21:28:49.995">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170629 21:28:49.995" status="PASS" endtime="20170629 21:28:49.996"></status>
</kw>
<status starttime="20170629 21:28:49.994" status="PASS" endtime="20170629 21:28:49.996"></status>
</kw>
<status starttime="20170629 21:28:49.993" status="PASS" endtime="20170629 21:28:49.996"></status>
</kw>
<status starttime="20170629 21:28:49.993" status="PASS" endtime="20170629 21:28:49.996"></status>
</kw>
<msg level="INFO" timestamp="20170629 21:28:49.996">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170629 21:28:42.133" status="PASS" endtime="20170629 21:28:49.996"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170629 21:28:49.997">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170629 21:28:49.996" status="PASS" endtime="20170629 21:28:49.997"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170629 21:28:49.997">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170629 21:28:49.997">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170629 21:28:49.997">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170629 21:28:49.997" status="PASS" endtime="20170629 21:28:49.997"></status>
</kw>
<msg level="INFO" timestamp="20170629 21:28:49.998">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status starttime="20170629 21:28:42.132" status="PASS" endtime="20170629 21:28:49.998"></status>
</kw>
<msg level="INFO" timestamp="20170629 21:28:49.998">${host_state} = Running</msg>
<status starttime="20170629 21:28:42.132" status="PASS" endtime="20170629 21:28:49.998"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${host_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170629 21:28:49.999">Off != Running</msg>
<status starttime="20170629 21:28:49.998" status="FAIL" endtime="20170629 21:28:49.999"></status>
</kw>
<status starttime="20170629 21:28:42.131" status="FAIL" endtime="20170629 21:28:49.999"></status>
</kw>
<kw name="Is Host Off" library="state_manager">
<doc>Check if host state is "Off".</doc>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170629 21:29:00.017">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170629 21:29:00.016" status="PASS" endtime="20170629 21:29:00.017"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170629 21:29:00.018">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170629 21:29:00.017" status="PASS" endtime="20170629 21:29:00.018"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170629 21:29:00.018">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170629 21:29:00.018" status="PASS" endtime="20170629 21:29:00.018"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170629 21:29:00.019">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170629 21:29:00.019" status="PASS" endtime="20170629 21:29:00.019"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170629 21:29:00.197">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170629 21:29:00.020" status="PASS" endtime="20170629 21:29:00.197"></status>
</kw>
<msg level="INFO" timestamp="20170629 21:29:00.197">${status} = PASS</msg>
<msg level="INFO" timestamp="20170629 21:29:00.197">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170629 21:29:00.019" status="PASS" endtime="20170629 21:29:00.197"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170629 21:29:00.198">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170629 21:29:00.197" status="PASS" endtime="20170629 21:29:00.198"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170629 21:29:00.199">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170629 21:29:00.198" status="PASS" endtime="20170629 21:29:00.199"></status>
</kw>
<status starttime="20170629 21:29:00.016" status="PASS" endtime="20170629 21:29:00.199"></status>
</kw>
<status starttime="20170629 21:29:00.015" status="PASS" endtime="20170629 21:29:00.199"></status>
</kw>
<status starttime="20170629 21:29:00.015" status="PASS" endtime="20170629 21:29:00.199"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170629 21:29:00.200">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170629 21:29:00.199" status="PASS" endtime="20170629 21:29:00.200"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170629 21:29:00.202">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170629 21:29:00.201" status="PASS" endtime="20170629 21:29:00.202"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170629 21:29:00.203">URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170629 21:29:00.202" status="PASS" endtime="20170629 21:29:00.203"></status>
</kw>
<status starttime="20170629 21:29:00.202" status="PASS" endtime="20170629 21:29:00.203"></status>
</kw>
<status starttime="20170629 21:29:00.200" status="PASS" endtime="20170629 21:29:00.203"></status>
</kw>
<status starttime="20170629 21:29:00.200" status="PASS" endtime="20170629 21:29:00.203"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170629 21:29:00.266">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170629 21:29:00.266">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170629 21:29:00.203" status="PASS" endtime="20170629 21:29:00.266"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170629 21:29:00.267">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170629 21:29:00.267" status="PASS" endtime="20170629 21:29:00.267"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170629 21:29:00.268">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170629 21:29:00.268" status="PASS" endtime="20170629 21:29:00.269"></status>
</kw>
<status starttime="20170629 21:29:00.268" status="PASS" endtime="20170629 21:29:00.269"></status>
</kw>
<status starttime="20170629 21:29:00.266" status="PASS" endtime="20170629 21:29:00.269"></status>
</kw>
<status starttime="20170629 21:29:00.266" status="PASS" endtime="20170629 21:29:00.269"></status>
</kw>
<msg level="INFO" timestamp="20170629 21:29:00.269">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170629 21:29:00.014" status="PASS" endtime="20170629 21:29:00.269"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170629 21:29:00.270">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170629 21:29:00.269" status="PASS" endtime="20170629 21:29:00.270"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170629 21:29:00.270">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170629 21:29:00.270">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170629 21:29:00.270">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170629 21:29:00.270" status="PASS" endtime="20170629 21:29:00.270"></status>
</kw>
<msg level="INFO" timestamp="20170629 21:29:00.271">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status starttime="20170629 21:29:00.013" status="PASS" endtime="20170629 21:29:00.271"></status>
</kw>
<msg level="INFO" timestamp="20170629 21:29:00.271">${host_state} = Running</msg>
<status starttime="20170629 21:29:00.013" status="PASS" endtime="20170629 21:29:00.271"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${host_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170629 21:29:00.272">Off != Running</msg>
<status starttime="20170629 21:29:00.271" status="FAIL" endtime="20170629 21:29:00.272"></status>
</kw>
<status starttime="20170629 21:29:00.012" status="FAIL" endtime="20170629 21:29:00.272"></status>
</kw>
<kw name="Is Host Off" library="state_manager">
<doc>Check if host state is "Off".</doc>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170629 21:29:10.279">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170629 21:29:10.279" status="PASS" endtime="20170629 21:29:10.280"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170629 21:29:10.280">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170629 21:29:10.280" status="PASS" endtime="20170629 21:29:10.280"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170629 21:29:10.281">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170629 21:29:10.281" status="PASS" endtime="20170629 21:29:10.281"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170629 21:29:10.282">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170629 21:29:10.281" status="PASS" endtime="20170629 21:29:10.282"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170629 21:29:10.495">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170629 21:29:10.282" status="PASS" endtime="20170629 21:29:10.495"></status>
</kw>
<msg level="INFO" timestamp="20170629 21:29:10.495">${status} = PASS</msg>
<msg level="INFO" timestamp="20170629 21:29:10.495">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170629 21:29:10.282" status="PASS" endtime="20170629 21:29:10.495"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170629 21:29:10.496">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170629 21:29:10.496" status="PASS" endtime="20170629 21:29:10.496"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170629 21:29:10.497">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170629 21:29:10.496" status="PASS" endtime="20170629 21:29:10.497"></status>
</kw>
<status starttime="20170629 21:29:10.276" status="PASS" endtime="20170629 21:29:10.497"></status>
</kw>
<status starttime="20170629 21:29:10.275" status="PASS" endtime="20170629 21:29:10.497"></status>
</kw>
<status starttime="20170629 21:29:10.275" status="PASS" endtime="20170629 21:29:10.497"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170629 21:29:10.498">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170629 21:29:10.497" status="PASS" endtime="20170629 21:29:10.498"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170629 21:29:10.500">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170629 21:29:10.499" status="PASS" endtime="20170629 21:29:10.500"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170629 21:29:10.501">URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170629 21:29:10.501" status="PASS" endtime="20170629 21:29:10.501"></status>
</kw>
<status starttime="20170629 21:29:10.500" status="PASS" endtime="20170629 21:29:10.501"></status>
</kw>
<status starttime="20170629 21:29:10.499" status="PASS" endtime="20170629 21:29:10.501"></status>
</kw>
<status starttime="20170629 21:29:10.498" status="PASS" endtime="20170629 21:29:10.501"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170629 21:29:10.585">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170629 21:29:10.586">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170629 21:29:10.502" status="PASS" endtime="20170629 21:29:10.586"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170629 21:29:10.587">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170629 21:29:10.587" status="PASS" endtime="20170629 21:29:10.587"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170629 21:29:10.589">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170629 21:29:10.588" status="PASS" endtime="20170629 21:29:10.589"></status>
</kw>
<status starttime="20170629 21:29:10.587" status="PASS" endtime="20170629 21:29:10.589"></status>
</kw>
<status starttime="20170629 21:29:10.586" status="PASS" endtime="20170629 21:29:10.589"></status>
</kw>
<status starttime="20170629 21:29:10.586" status="PASS" endtime="20170629 21:29:10.589"></status>
</kw>
<msg level="INFO" timestamp="20170629 21:29:10.589">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170629 21:29:10.274" status="PASS" endtime="20170629 21:29:10.589"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170629 21:29:10.590">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170629 21:29:10.589" status="PASS" endtime="20170629 21:29:10.590"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170629 21:29:10.590">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170629 21:29:10.590">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170629 21:29:10.591">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170629 21:29:10.590" status="PASS" endtime="20170629 21:29:10.591"></status>
</kw>
<msg level="INFO" timestamp="20170629 21:29:10.591">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status starttime="20170629 21:29:10.274" status="PASS" endtime="20170629 21:29:10.591"></status>
</kw>
<msg level="INFO" timestamp="20170629 21:29:10.591">${host_state} = Running</msg>
<status starttime="20170629 21:29:10.273" status="PASS" endtime="20170629 21:29:10.591"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${host_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170629 21:29:10.592">Off != Running</msg>
<status starttime="20170629 21:29:10.591" status="FAIL" endtime="20170629 21:29:10.592"></status>
</kw>
<status starttime="20170629 21:29:10.272" status="FAIL" endtime="20170629 21:29:10.592"></status>
</kw>
<kw name="Is Host Off" library="state_manager">
<doc>Check if host state is "Off".</doc>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170629 21:29:20.597">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170629 21:29:20.597" status="PASS" endtime="20170629 21:29:20.598"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170629 21:29:20.598">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170629 21:29:20.598" status="PASS" endtime="20170629 21:29:20.599"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170629 21:29:20.599">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170629 21:29:20.599" status="PASS" endtime="20170629 21:29:20.599"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170629 21:29:20.600">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170629 21:29:20.599" status="PASS" endtime="20170629 21:29:20.600"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170629 21:29:20.783">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170629 21:29:20.600" status="PASS" endtime="20170629 21:29:20.783"></status>
</kw>
<msg level="INFO" timestamp="20170629 21:29:20.784">${status} = PASS</msg>
<msg level="INFO" timestamp="20170629 21:29:20.784">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170629 21:29:20.600" status="PASS" endtime="20170629 21:29:20.784"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170629 21:29:20.784">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170629 21:29:20.784" status="PASS" endtime="20170629 21:29:20.784"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170629 21:29:20.785">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170629 21:29:20.785" status="PASS" endtime="20170629 21:29:20.785"></status>
</kw>
<status starttime="20170629 21:29:20.596" status="PASS" endtime="20170629 21:29:20.785"></status>
</kw>
<status starttime="20170629 21:29:20.596" status="PASS" endtime="20170629 21:29:20.785"></status>
</kw>
<status starttime="20170629 21:29:20.595" status="PASS" endtime="20170629 21:29:20.785"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170629 21:29:20.786">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170629 21:29:20.786" status="PASS" endtime="20170629 21:29:20.786"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170629 21:29:20.788">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170629 21:29:20.788" status="PASS" endtime="20170629 21:29:20.788"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170629 21:29:20.789">URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170629 21:29:20.789" status="PASS" endtime="20170629 21:29:20.789"></status>
</kw>
<status starttime="20170629 21:29:20.789" status="PASS" endtime="20170629 21:29:20.790"></status>
</kw>
<status starttime="20170629 21:29:20.787" status="PASS" endtime="20170629 21:29:20.790"></status>
</kw>
<status starttime="20170629 21:29:20.786" status="PASS" endtime="20170629 21:29:20.790"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170629 21:29:20.852">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170629 21:29:20.852">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170629 21:29:20.790" status="PASS" endtime="20170629 21:29:20.853"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170629 21:29:20.854">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170629 21:29:20.854" status="PASS" endtime="20170629 21:29:20.854"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170629 21:29:20.855">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170629 21:29:20.855" status="PASS" endtime="20170629 21:29:20.855"></status>
</kw>
<status starttime="20170629 21:29:20.855" status="PASS" endtime="20170629 21:29:20.856"></status>
</kw>
<status starttime="20170629 21:29:20.853" status="PASS" endtime="20170629 21:29:20.856"></status>
</kw>
<status starttime="20170629 21:29:20.853" status="PASS" endtime="20170629 21:29:20.856"></status>
</kw>
<msg level="INFO" timestamp="20170629 21:29:20.856">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170629 21:29:20.595" status="PASS" endtime="20170629 21:29:20.856"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170629 21:29:20.856">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170629 21:29:20.856" status="PASS" endtime="20170629 21:29:20.857"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170629 21:29:20.857">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170629 21:29:20.857">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170629 21:29:20.857">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170629 21:29:20.857" status="PASS" endtime="20170629 21:29:20.857"></status>
</kw>
<msg level="INFO" timestamp="20170629 21:29:20.858">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status starttime="20170629 21:29:20.594" status="PASS" endtime="20170629 21:29:20.858"></status>
</kw>
<msg level="INFO" timestamp="20170629 21:29:20.858">${host_state} = Running</msg>
<status starttime="20170629 21:29:20.593" status="PASS" endtime="20170629 21:29:20.858"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${host_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170629 21:29:20.859">Off != Running</msg>
<status starttime="20170629 21:29:20.858" status="FAIL" endtime="20170629 21:29:20.859"></status>
</kw>
<status starttime="20170629 21:29:20.593" status="FAIL" endtime="20170629 21:29:20.859"></status>
</kw>
<kw name="Is Host Off" library="state_manager">
<doc>Check if host state is "Off".</doc>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170629 21:29:30.863">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170629 21:29:30.863" status="PASS" endtime="20170629 21:29:30.864"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170629 21:29:30.865">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170629 21:29:30.864" status="PASS" endtime="20170629 21:29:30.865"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170629 21:29:30.865">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170629 21:29:30.865" status="PASS" endtime="20170629 21:29:30.865"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170629 21:29:30.866">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170629 21:29:30.866" status="PASS" endtime="20170629 21:29:30.866"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170629 21:29:31.072">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170629 21:29:30.867" status="PASS" endtime="20170629 21:29:31.072"></status>
</kw>
<msg level="INFO" timestamp="20170629 21:29:31.072">${status} = PASS</msg>
<msg level="INFO" timestamp="20170629 21:29:31.072">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170629 21:29:30.866" status="PASS" endtime="20170629 21:29:31.072"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170629 21:29:31.073">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170629 21:29:31.072" status="PASS" endtime="20170629 21:29:31.073"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170629 21:29:31.073">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170629 21:29:31.073" status="PASS" endtime="20170629 21:29:31.074"></status>
</kw>
<status starttime="20170629 21:29:30.862" status="PASS" endtime="20170629 21:29:31.074"></status>
</kw>
<status starttime="20170629 21:29:30.862" status="PASS" endtime="20170629 21:29:31.074"></status>
</kw>
<status starttime="20170629 21:29:30.861" status="PASS" endtime="20170629 21:29:31.074"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170629 21:29:31.075">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170629 21:29:31.074" status="PASS" endtime="20170629 21:29:31.075"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170629 21:29:31.077">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170629 21:29:31.076" status="PASS" endtime="20170629 21:29:31.077"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170629 21:29:31.077">URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170629 21:29:31.077" status="PASS" endtime="20170629 21:29:31.078"></status>
</kw>
<status starttime="20170629 21:29:31.077" status="PASS" endtime="20170629 21:29:31.078"></status>
</kw>
<status starttime="20170629 21:29:31.075" status="PASS" endtime="20170629 21:29:31.078"></status>
</kw>
<status starttime="20170629 21:29:31.075" status="PASS" endtime="20170629 21:29:31.078"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170629 21:29:31.141">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170629 21:29:31.141">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170629 21:29:31.078" status="PASS" endtime="20170629 21:29:31.141"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170629 21:29:31.142">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170629 21:29:31.142" status="PASS" endtime="20170629 21:29:31.142"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170629 21:29:31.143">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170629 21:29:31.143" status="PASS" endtime="20170629 21:29:31.144"></status>
</kw>
<status starttime="20170629 21:29:31.143" status="PASS" endtime="20170629 21:29:31.144"></status>
</kw>
<status starttime="20170629 21:29:31.141" status="PASS" endtime="20170629 21:29:31.144"></status>
</kw>
<status starttime="20170629 21:29:31.141" status="PASS" endtime="20170629 21:29:31.144"></status>
</kw>
<msg level="INFO" timestamp="20170629 21:29:31.144">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170629 21:29:30.861" status="PASS" endtime="20170629 21:29:31.144"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170629 21:29:31.145">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170629 21:29:31.144" status="PASS" endtime="20170629 21:29:31.145"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170629 21:29:31.145">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170629 21:29:31.145">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170629 21:29:31.146">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170629 21:29:31.145" status="PASS" endtime="20170629 21:29:31.146"></status>
</kw>
<msg level="INFO" timestamp="20170629 21:29:31.146">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status starttime="20170629 21:29:30.860" status="PASS" endtime="20170629 21:29:31.146"></status>
</kw>
<msg level="INFO" timestamp="20170629 21:29:31.146">${host_state} = Running</msg>
<status starttime="20170629 21:29:30.860" status="PASS" endtime="20170629 21:29:31.146"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${host_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170629 21:29:31.147">Off != Running</msg>
<status starttime="20170629 21:29:31.146" status="FAIL" endtime="20170629 21:29:31.147"></status>
</kw>
<status starttime="20170629 21:29:30.859" status="FAIL" endtime="20170629 21:29:31.147"></status>
</kw>
<kw name="Is Host Off" library="state_manager">
<doc>Check if host state is "Off".</doc>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170629 21:29:41.153">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170629 21:29:41.153" status="PASS" endtime="20170629 21:29:41.154"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170629 21:29:41.154">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170629 21:29:41.154" status="PASS" endtime="20170629 21:29:41.154"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170629 21:29:41.155">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170629 21:29:41.155" status="PASS" endtime="20170629 21:29:41.155"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170629 21:29:41.156">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170629 21:29:41.155" status="PASS" endtime="20170629 21:29:41.156"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170629 21:29:41.353">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170629 21:29:41.156" status="PASS" endtime="20170629 21:29:41.353"></status>
</kw>
<msg level="INFO" timestamp="20170629 21:29:41.353">${status} = PASS</msg>
<msg level="INFO" timestamp="20170629 21:29:41.353">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170629 21:29:41.156" status="PASS" endtime="20170629 21:29:41.353"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170629 21:29:41.353">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170629 21:29:41.353" status="PASS" endtime="20170629 21:29:41.353"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170629 21:29:41.354">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170629 21:29:41.354" status="PASS" endtime="20170629 21:29:41.354"></status>
</kw>
<status starttime="20170629 21:29:41.152" status="PASS" endtime="20170629 21:29:41.354"></status>
</kw>
<status starttime="20170629 21:29:41.152" status="PASS" endtime="20170629 21:29:41.354"></status>
</kw>
<status starttime="20170629 21:29:41.151" status="PASS" endtime="20170629 21:29:41.355"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170629 21:29:41.355">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170629 21:29:41.355" status="PASS" endtime="20170629 21:29:41.355"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170629 21:29:41.357">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170629 21:29:41.356" status="PASS" endtime="20170629 21:29:41.357"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170629 21:29:41.358">URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170629 21:29:41.358" status="PASS" endtime="20170629 21:29:41.358"></status>
</kw>
<status starttime="20170629 21:29:41.357" status="PASS" endtime="20170629 21:29:41.358"></status>
</kw>
<status starttime="20170629 21:29:41.356" status="PASS" endtime="20170629 21:29:41.358"></status>
</kw>
<status starttime="20170629 21:29:41.355" status="PASS" endtime="20170629 21:29:41.358"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170629 21:29:41.427">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170629 21:29:41.427">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170629 21:29:41.359" status="PASS" endtime="20170629 21:29:41.427"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170629 21:29:41.429">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170629 21:29:41.428" status="PASS" endtime="20170629 21:29:41.429"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170629 21:29:41.430">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170629 21:29:41.430" status="PASS" endtime="20170629 21:29:41.430"></status>
</kw>
<status starttime="20170629 21:29:41.429" status="PASS" endtime="20170629 21:29:41.430"></status>
</kw>
<status starttime="20170629 21:29:41.428" status="PASS" endtime="20170629 21:29:41.430"></status>
</kw>
<status starttime="20170629 21:29:41.427" status="PASS" endtime="20170629 21:29:41.430"></status>
</kw>
<msg level="INFO" timestamp="20170629 21:29:41.430">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170629 21:29:41.149" status="PASS" endtime="20170629 21:29:41.430"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170629 21:29:41.431">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170629 21:29:41.431" status="PASS" endtime="20170629 21:29:41.431"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170629 21:29:41.432">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170629 21:29:41.432">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170629 21:29:41.432">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170629 21:29:41.431" status="PASS" endtime="20170629 21:29:41.432"></status>
</kw>
<msg level="INFO" timestamp="20170629 21:29:41.432">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status starttime="20170629 21:29:41.149" status="PASS" endtime="20170629 21:29:41.432"></status>
</kw>
<msg level="INFO" timestamp="20170629 21:29:41.432">${host_state} = Running</msg>
<status starttime="20170629 21:29:41.148" status="PASS" endtime="20170629 21:29:41.432"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${host_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170629 21:29:41.433">Off != Running</msg>
<status starttime="20170629 21:29:41.433" status="FAIL" endtime="20170629 21:29:41.433"></status>
</kw>
<status starttime="20170629 21:29:41.148" status="FAIL" endtime="20170629 21:29:41.433"></status>
</kw>
<kw name="Is Host Off" library="state_manager">
<doc>Check if host state is "Off".</doc>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170629 21:29:51.437">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170629 21:29:51.437" status="PASS" endtime="20170629 21:29:51.438"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170629 21:29:51.438">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170629 21:29:51.438" status="PASS" endtime="20170629 21:29:51.439"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170629 21:29:51.439">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170629 21:29:51.439" status="PASS" endtime="20170629 21:29:51.439"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170629 21:29:51.440">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170629 21:29:51.439" status="PASS" endtime="20170629 21:29:51.440"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170629 21:29:51.965">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170629 21:29:51.440" status="PASS" endtime="20170629 21:29:51.965"></status>
</kw>
<msg level="INFO" timestamp="20170629 21:29:51.965">${status} = PASS</msg>
<msg level="INFO" timestamp="20170629 21:29:51.965">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170629 21:29:51.440" status="PASS" endtime="20170629 21:29:51.965"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170629 21:29:51.966">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170629 21:29:51.965" status="PASS" endtime="20170629 21:29:51.966"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170629 21:29:51.967">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170629 21:29:51.966" status="PASS" endtime="20170629 21:29:51.967"></status>
</kw>
<status starttime="20170629 21:29:51.437" status="PASS" endtime="20170629 21:29:51.967"></status>
</kw>
<status starttime="20170629 21:29:51.436" status="PASS" endtime="20170629 21:29:51.967"></status>
</kw>
<status starttime="20170629 21:29:51.436" status="PASS" endtime="20170629 21:29:51.967"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170629 21:29:51.967">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170629 21:29:51.967" status="PASS" endtime="20170629 21:29:51.968"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170629 21:29:51.969">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170629 21:29:51.969" status="PASS" endtime="20170629 21:29:51.970"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170629 21:29:51.970">URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170629 21:29:51.970" status="PASS" endtime="20170629 21:29:51.970"></status>
</kw>
<status starttime="20170629 21:29:51.970" status="PASS" endtime="20170629 21:29:51.971"></status>
</kw>
<status starttime="20170629 21:29:51.968" status="PASS" endtime="20170629 21:29:51.971"></status>
</kw>
<status starttime="20170629 21:29:51.968" status="PASS" endtime="20170629 21:29:51.971"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170629 21:29:52.077">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170629 21:29:52.077">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170629 21:29:51.971" status="PASS" endtime="20170629 21:29:52.077"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170629 21:29:52.079">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170629 21:29:52.078" status="PASS" endtime="20170629 21:29:52.079"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170629 21:29:52.080">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170629 21:29:52.080" status="PASS" endtime="20170629 21:29:52.080"></status>
</kw>
<status starttime="20170629 21:29:52.079" status="PASS" endtime="20170629 21:29:52.080"></status>
</kw>
<status starttime="20170629 21:29:52.078" status="PASS" endtime="20170629 21:29:52.080"></status>
</kw>
<status starttime="20170629 21:29:52.078" status="PASS" endtime="20170629 21:29:52.080"></status>
</kw>
<msg level="INFO" timestamp="20170629 21:29:52.081">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170629 21:29:51.435" status="PASS" endtime="20170629 21:29:52.081"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170629 21:29:52.081">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170629 21:29:52.081" status="PASS" endtime="20170629 21:29:52.081"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170629 21:29:52.082">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170629 21:29:52.082">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170629 21:29:52.082">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170629 21:29:52.081" status="PASS" endtime="20170629 21:29:52.082"></status>
</kw>
<msg level="INFO" timestamp="20170629 21:29:52.082">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status starttime="20170629 21:29:51.434" status="PASS" endtime="20170629 21:29:52.082"></status>
</kw>
<msg level="INFO" timestamp="20170629 21:29:52.082">${host_state} = Running</msg>
<status starttime="20170629 21:29:51.434" status="PASS" endtime="20170629 21:29:52.083"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${host_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170629 21:29:52.083">Off != Running</msg>
<status starttime="20170629 21:29:52.083" status="FAIL" endtime="20170629 21:29:52.083"></status>
</kw>
<status starttime="20170629 21:29:51.434" status="FAIL" endtime="20170629 21:29:52.084"></status>
</kw>
<kw name="Is Host Off" library="state_manager">
<doc>Check if host state is "Off".</doc>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170629 21:30:02.089">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170629 21:30:02.089" status="PASS" endtime="20170629 21:30:02.090"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170629 21:30:02.090">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170629 21:30:02.090" status="PASS" endtime="20170629 21:30:02.090"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170629 21:30:02.091">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170629 21:30:02.091" status="PASS" endtime="20170629 21:30:02.091"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170629 21:30:02.092">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170629 21:30:02.091" status="PASS" endtime="20170629 21:30:02.092"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170629 21:30:02.307">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170629 21:30:02.092" status="PASS" endtime="20170629 21:30:02.307"></status>
</kw>
<msg level="INFO" timestamp="20170629 21:30:02.307">${status} = PASS</msg>
<msg level="INFO" timestamp="20170629 21:30:02.307">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170629 21:30:02.092" status="PASS" endtime="20170629 21:30:02.307"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170629 21:30:02.308">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170629 21:30:02.308" status="PASS" endtime="20170629 21:30:02.308"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170629 21:30:02.309">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170629 21:30:02.309" status="PASS" endtime="20170629 21:30:02.309"></status>
</kw>
<status starttime="20170629 21:30:02.088" status="PASS" endtime="20170629 21:30:02.309"></status>
</kw>
<status starttime="20170629 21:30:02.088" status="PASS" endtime="20170629 21:30:02.309"></status>
</kw>
<status starttime="20170629 21:30:02.087" status="PASS" endtime="20170629 21:30:02.309"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170629 21:30:02.310">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170629 21:30:02.310" status="PASS" endtime="20170629 21:30:02.310"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170629 21:30:02.312">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170629 21:30:02.311" status="PASS" endtime="20170629 21:30:02.312"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170629 21:30:02.313">URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170629 21:30:02.313" status="PASS" endtime="20170629 21:30:02.313"></status>
</kw>
<status starttime="20170629 21:30:02.312" status="PASS" endtime="20170629 21:30:02.313"></status>
</kw>
<status starttime="20170629 21:30:02.311" status="PASS" endtime="20170629 21:30:02.313"></status>
</kw>
<status starttime="20170629 21:30:02.310" status="PASS" endtime="20170629 21:30:02.313"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170629 21:30:02.381">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170629 21:30:02.381">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170629 21:30:02.314" status="PASS" endtime="20170629 21:30:02.381"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170629 21:30:02.383">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170629 21:30:02.382" status="PASS" endtime="20170629 21:30:02.383"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170629 21:30:02.384">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170629 21:30:02.384" status="PASS" endtime="20170629 21:30:02.384"></status>
</kw>
<status starttime="20170629 21:30:02.383" status="PASS" endtime="20170629 21:30:02.385"></status>
</kw>
<status starttime="20170629 21:30:02.382" status="PASS" endtime="20170629 21:30:02.385"></status>
</kw>
<status starttime="20170629 21:30:02.381" status="PASS" endtime="20170629 21:30:02.385"></status>
</kw>
<msg level="INFO" timestamp="20170629 21:30:02.385">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170629 21:30:02.086" status="PASS" endtime="20170629 21:30:02.385"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170629 21:30:02.386">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170629 21:30:02.385" status="PASS" endtime="20170629 21:30:02.386"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170629 21:30:02.386">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170629 21:30:02.386">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170629 21:30:02.386">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170629 21:30:02.386" status="PASS" endtime="20170629 21:30:02.386"></status>
</kw>
<msg level="INFO" timestamp="20170629 21:30:02.387">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status starttime="20170629 21:30:02.086" status="PASS" endtime="20170629 21:30:02.387"></status>
</kw>
<msg level="INFO" timestamp="20170629 21:30:02.387">${host_state} = Running</msg>
<status starttime="20170629 21:30:02.085" status="PASS" endtime="20170629 21:30:02.387"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${host_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170629 21:30:02.388">Off != Running</msg>
<status starttime="20170629 21:30:02.387" status="FAIL" endtime="20170629 21:30:02.388"></status>
</kw>
<status starttime="20170629 21:30:02.084" status="FAIL" endtime="20170629 21:30:02.388"></status>
</kw>
<kw name="Is Host Off" library="state_manager">
<doc>Check if host state is "Off".</doc>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170629 21:30:12.393">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170629 21:30:12.393" status="PASS" endtime="20170629 21:30:12.394"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170629 21:30:12.394">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170629 21:30:12.394" status="PASS" endtime="20170629 21:30:12.394"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170629 21:30:12.395">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170629 21:30:12.394" status="PASS" endtime="20170629 21:30:12.395"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170629 21:30:12.396">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170629 21:30:12.395" status="PASS" endtime="20170629 21:30:12.396"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170629 21:30:12.739">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170629 21:30:12.396" status="PASS" endtime="20170629 21:30:12.739"></status>
</kw>
<msg level="INFO" timestamp="20170629 21:30:12.739">${status} = PASS</msg>
<msg level="INFO" timestamp="20170629 21:30:12.739">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170629 21:30:12.396" status="PASS" endtime="20170629 21:30:12.739"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170629 21:30:12.740">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170629 21:30:12.740" status="PASS" endtime="20170629 21:30:12.740"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170629 21:30:12.741">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170629 21:30:12.740" status="PASS" endtime="20170629 21:30:12.741"></status>
</kw>
<status starttime="20170629 21:30:12.392" status="PASS" endtime="20170629 21:30:12.741"></status>
</kw>
<status starttime="20170629 21:30:12.392" status="PASS" endtime="20170629 21:30:12.741"></status>
</kw>
<status starttime="20170629 21:30:12.391" status="PASS" endtime="20170629 21:30:12.741"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170629 21:30:12.742">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170629 21:30:12.741" status="PASS" endtime="20170629 21:30:12.742"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170629 21:30:12.744">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170629 21:30:12.743" status="PASS" endtime="20170629 21:30:12.744"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170629 21:30:12.745">URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170629 21:30:12.745" status="PASS" endtime="20170629 21:30:12.745"></status>
</kw>
<status starttime="20170629 21:30:12.744" status="PASS" endtime="20170629 21:30:12.745"></status>
</kw>
<status starttime="20170629 21:30:12.742" status="PASS" endtime="20170629 21:30:12.745"></status>
</kw>
<status starttime="20170629 21:30:12.742" status="PASS" endtime="20170629 21:30:12.745"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170629 21:30:12.829">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170629 21:30:12.829">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170629 21:30:12.746" status="PASS" endtime="20170629 21:30:12.829"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170629 21:30:12.831">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170629 21:30:12.830" status="PASS" endtime="20170629 21:30:12.831"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170629 21:30:12.832">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170629 21:30:12.831" status="PASS" endtime="20170629 21:30:12.832"></status>
</kw>
<status starttime="20170629 21:30:12.831" status="PASS" endtime="20170629 21:30:12.832"></status>
</kw>
<status starttime="20170629 21:30:12.830" status="PASS" endtime="20170629 21:30:12.832"></status>
</kw>
<status starttime="20170629 21:30:12.829" status="PASS" endtime="20170629 21:30:12.832"></status>
</kw>
<msg level="INFO" timestamp="20170629 21:30:12.832">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170629 21:30:12.390" status="PASS" endtime="20170629 21:30:12.832"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170629 21:30:12.833">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170629 21:30:12.833" status="PASS" endtime="20170629 21:30:12.833"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170629 21:30:12.833">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170629 21:30:12.834">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170629 21:30:12.834">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170629 21:30:12.833" status="PASS" endtime="20170629 21:30:12.834"></status>
</kw>
<msg level="INFO" timestamp="20170629 21:30:12.834">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status starttime="20170629 21:30:12.390" status="PASS" endtime="20170629 21:30:12.834"></status>
</kw>
<msg level="INFO" timestamp="20170629 21:30:12.834">${host_state} = Running</msg>
<status starttime="20170629 21:30:12.389" status="PASS" endtime="20170629 21:30:12.834"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${host_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170629 21:30:12.835">Off != Running</msg>
<status starttime="20170629 21:30:12.835" status="FAIL" endtime="20170629 21:30:12.835"></status>
</kw>
<status starttime="20170629 21:30:12.389" status="FAIL" endtime="20170629 21:30:12.835"></status>
</kw>
<kw name="Is Host Off" library="state_manager">
<doc>Check if host state is "Off".</doc>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170629 21:30:22.840">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170629 21:30:22.840" status="PASS" endtime="20170629 21:30:22.841"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170629 21:30:22.841">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170629 21:30:22.841" status="PASS" endtime="20170629 21:30:22.842"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170629 21:30:22.842">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170629 21:30:22.842" status="PASS" endtime="20170629 21:30:22.842"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170629 21:30:22.843">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170629 21:30:22.842" status="PASS" endtime="20170629 21:30:22.843"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170629 21:30:23.138">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170629 21:30:22.843" status="PASS" endtime="20170629 21:30:23.138"></status>
</kw>
<msg level="INFO" timestamp="20170629 21:30:23.139">${status} = PASS</msg>
<msg level="INFO" timestamp="20170629 21:30:23.139">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170629 21:30:22.843" status="PASS" endtime="20170629 21:30:23.139"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170629 21:30:23.139">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170629 21:30:23.139" status="PASS" endtime="20170629 21:30:23.139"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170629 21:30:23.140">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170629 21:30:23.140" status="PASS" endtime="20170629 21:30:23.140"></status>
</kw>
<status starttime="20170629 21:30:22.839" status="PASS" endtime="20170629 21:30:23.140"></status>
</kw>
<status starttime="20170629 21:30:22.839" status="PASS" endtime="20170629 21:30:23.140"></status>
</kw>
<status starttime="20170629 21:30:22.838" status="PASS" endtime="20170629 21:30:23.140"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170629 21:30:23.141">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170629 21:30:23.141" status="PASS" endtime="20170629 21:30:23.141"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170629 21:30:23.143">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170629 21:30:23.142" status="PASS" endtime="20170629 21:30:23.143"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170629 21:30:23.144">URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170629 21:30:23.144" status="PASS" endtime="20170629 21:30:23.144"></status>
</kw>
<status starttime="20170629 21:30:23.143" status="PASS" endtime="20170629 21:30:23.144"></status>
</kw>
<status starttime="20170629 21:30:23.142" status="PASS" endtime="20170629 21:30:23.144"></status>
</kw>
<status starttime="20170629 21:30:23.141" status="PASS" endtime="20170629 21:30:23.144"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170629 21:30:23.216">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170629 21:30:23.216">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170629 21:30:23.145" status="PASS" endtime="20170629 21:30:23.217"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170629 21:30:23.218">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170629 21:30:23.218" status="PASS" endtime="20170629 21:30:23.218"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170629 21:30:23.219">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170629 21:30:23.219" status="PASS" endtime="20170629 21:30:23.219"></status>
</kw>
<status starttime="20170629 21:30:23.218" status="PASS" endtime="20170629 21:30:23.219"></status>
</kw>
<status starttime="20170629 21:30:23.217" status="PASS" endtime="20170629 21:30:23.220"></status>
</kw>
<status starttime="20170629 21:30:23.217" status="PASS" endtime="20170629 21:30:23.220"></status>
</kw>
<msg level="INFO" timestamp="20170629 21:30:23.220">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170629 21:30:22.837" status="PASS" endtime="20170629 21:30:23.220"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170629 21:30:23.220">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170629 21:30:23.220" status="PASS" endtime="20170629 21:30:23.220"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170629 21:30:23.221">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170629 21:30:23.221">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170629 21:30:23.221">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170629 21:30:23.221" status="PASS" endtime="20170629 21:30:23.221"></status>
</kw>
<msg level="INFO" timestamp="20170629 21:30:23.221">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status starttime="20170629 21:30:22.837" status="PASS" endtime="20170629 21:30:23.222"></status>
</kw>
<msg level="INFO" timestamp="20170629 21:30:23.222">${host_state} = Running</msg>
<status starttime="20170629 21:30:22.836" status="PASS" endtime="20170629 21:30:23.222"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${host_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170629 21:30:23.222">Off != Running</msg>
<status starttime="20170629 21:30:23.222" status="FAIL" endtime="20170629 21:30:23.223"></status>
</kw>
<status starttime="20170629 21:30:22.836" status="FAIL" endtime="20170629 21:30:23.223"></status>
</kw>
<kw name="Is Host Off" library="state_manager">
<doc>Check if host state is "Off".</doc>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170629 21:30:33.228">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170629 21:30:33.228" status="PASS" endtime="20170629 21:30:33.229"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170629 21:30:33.230">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170629 21:30:33.229" status="PASS" endtime="20170629 21:30:33.230"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170629 21:30:33.230">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170629 21:30:33.230" status="PASS" endtime="20170629 21:30:33.230"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170629 21:30:33.231">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170629 21:30:33.230" status="PASS" endtime="20170629 21:30:33.231"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170629 21:30:33.531">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170629 21:30:33.232" status="PASS" endtime="20170629 21:30:33.531"></status>
</kw>
<msg level="INFO" timestamp="20170629 21:30:33.531">${status} = PASS</msg>
<msg level="INFO" timestamp="20170629 21:30:33.531">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170629 21:30:33.231" status="PASS" endtime="20170629 21:30:33.532"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170629 21:30:33.532">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170629 21:30:33.532" status="PASS" endtime="20170629 21:30:33.532"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170629 21:30:33.533">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170629 21:30:33.532" status="PASS" endtime="20170629 21:30:33.533"></status>
</kw>
<status starttime="20170629 21:30:33.227" status="PASS" endtime="20170629 21:30:33.533"></status>
</kw>
<status starttime="20170629 21:30:33.227" status="PASS" endtime="20170629 21:30:33.533"></status>
</kw>
<status starttime="20170629 21:30:33.226" status="PASS" endtime="20170629 21:30:33.533"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170629 21:30:33.534">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170629 21:30:33.533" status="PASS" endtime="20170629 21:30:33.534"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170629 21:30:33.536">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170629 21:30:33.535" status="PASS" endtime="20170629 21:30:33.536"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170629 21:30:33.537">URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170629 21:30:33.537" status="PASS" endtime="20170629 21:30:33.537"></status>
</kw>
<status starttime="20170629 21:30:33.536" status="PASS" endtime="20170629 21:30:33.537"></status>
</kw>
<status starttime="20170629 21:30:33.535" status="PASS" endtime="20170629 21:30:33.537"></status>
</kw>
<status starttime="20170629 21:30:33.534" status="PASS" endtime="20170629 21:30:33.537"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170629 21:30:33.604">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170629 21:30:33.605">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170629 21:30:33.537" status="PASS" endtime="20170629 21:30:33.605"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170629 21:30:33.606">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170629 21:30:33.606" status="PASS" endtime="20170629 21:30:33.607"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170629 21:30:33.607">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170629 21:30:33.607" status="PASS" endtime="20170629 21:30:33.608"></status>
</kw>
<status starttime="20170629 21:30:33.607" status="PASS" endtime="20170629 21:30:33.608"></status>
</kw>
<status starttime="20170629 21:30:33.606" status="PASS" endtime="20170629 21:30:33.608"></status>
</kw>
<status starttime="20170629 21:30:33.605" status="PASS" endtime="20170629 21:30:33.608"></status>
</kw>
<msg level="INFO" timestamp="20170629 21:30:33.608">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170629 21:30:33.225" status="PASS" endtime="20170629 21:30:33.608"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170629 21:30:33.609">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170629 21:30:33.608" status="PASS" endtime="20170629 21:30:33.609"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170629 21:30:33.609">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170629 21:30:33.609">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170629 21:30:33.609">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170629 21:30:33.609" status="PASS" endtime="20170629 21:30:33.609"></status>
</kw>
<msg level="INFO" timestamp="20170629 21:30:33.610">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status starttime="20170629 21:30:33.224" status="PASS" endtime="20170629 21:30:33.610"></status>
</kw>
<msg level="INFO" timestamp="20170629 21:30:33.610">${host_state} = Running</msg>
<status starttime="20170629 21:30:33.224" status="PASS" endtime="20170629 21:30:33.610"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${host_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170629 21:30:33.611">Off != Running</msg>
<status starttime="20170629 21:30:33.610" status="FAIL" endtime="20170629 21:30:33.611"></status>
</kw>
<status starttime="20170629 21:30:33.223" status="FAIL" endtime="20170629 21:30:33.611"></status>
</kw>
<kw name="Is Host Off" library="state_manager">
<doc>Check if host state is "Off".</doc>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170629 21:30:43.615">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170629 21:30:43.615" status="PASS" endtime="20170629 21:30:43.616"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170629 21:30:43.616">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170629 21:30:43.616" status="PASS" endtime="20170629 21:30:43.617"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170629 21:30:43.617">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170629 21:30:43.617" status="PASS" endtime="20170629 21:30:43.617"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170629 21:30:43.618">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170629 21:30:43.617" status="PASS" endtime="20170629 21:30:43.618"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170629 21:30:43.938">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170629 21:30:43.618" status="PASS" endtime="20170629 21:30:43.938"></status>
</kw>
<msg level="INFO" timestamp="20170629 21:30:43.938">${status} = PASS</msg>
<msg level="INFO" timestamp="20170629 21:30:43.938">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170629 21:30:43.618" status="PASS" endtime="20170629 21:30:43.938"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170629 21:30:43.939">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170629 21:30:43.938" status="PASS" endtime="20170629 21:30:43.939"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170629 21:30:43.939">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170629 21:30:43.939" status="PASS" endtime="20170629 21:30:43.939"></status>
</kw>
<status starttime="20170629 21:30:43.615" status="PASS" endtime="20170629 21:30:43.940"></status>
</kw>
<status starttime="20170629 21:30:43.614" status="PASS" endtime="20170629 21:30:43.940"></status>
</kw>
<status starttime="20170629 21:30:43.614" status="PASS" endtime="20170629 21:30:43.940"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170629 21:30:43.940">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170629 21:30:43.940" status="PASS" endtime="20170629 21:30:43.940"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170629 21:30:43.942">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170629 21:30:43.942" status="PASS" endtime="20170629 21:30:43.942"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170629 21:30:43.943">URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170629 21:30:43.943" status="PASS" endtime="20170629 21:30:43.943"></status>
</kw>
<status starttime="20170629 21:30:43.942" status="PASS" endtime="20170629 21:30:43.943"></status>
</kw>
<status starttime="20170629 21:30:43.941" status="PASS" endtime="20170629 21:30:43.944"></status>
</kw>
<status starttime="20170629 21:30:43.941" status="PASS" endtime="20170629 21:30:43.944"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170629 21:30:44.009">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170629 21:30:44.009">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170629 21:30:43.944" status="PASS" endtime="20170629 21:30:44.009"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170629 21:30:44.011">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170629 21:30:44.010" status="PASS" endtime="20170629 21:30:44.011"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170629 21:30:44.011">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170629 21:30:44.011" status="PASS" endtime="20170629 21:30:44.012"></status>
</kw>
<status starttime="20170629 21:30:44.011" status="PASS" endtime="20170629 21:30:44.012"></status>
</kw>
<status starttime="20170629 21:30:44.010" status="PASS" endtime="20170629 21:30:44.012"></status>
</kw>
<status starttime="20170629 21:30:44.009" status="PASS" endtime="20170629 21:30:44.012"></status>
</kw>
<msg level="INFO" timestamp="20170629 21:30:44.012">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170629 21:30:43.613" status="PASS" endtime="20170629 21:30:44.012"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170629 21:30:44.013">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170629 21:30:44.012" status="PASS" endtime="20170629 21:30:44.013"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170629 21:30:44.013">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170629 21:30:44.013">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170629 21:30:44.013">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170629 21:30:44.013" status="PASS" endtime="20170629 21:30:44.014"></status>
</kw>
<msg level="INFO" timestamp="20170629 21:30:44.014">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status starttime="20170629 21:30:43.612" status="PASS" endtime="20170629 21:30:44.014"></status>
</kw>
<msg level="INFO" timestamp="20170629 21:30:44.014">${host_state} = Running</msg>
<status starttime="20170629 21:30:43.612" status="PASS" endtime="20170629 21:30:44.014"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${host_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170629 21:30:44.015">Off != Running</msg>
<status starttime="20170629 21:30:44.014" status="FAIL" endtime="20170629 21:30:44.015"></status>
</kw>
<status starttime="20170629 21:30:43.611" status="FAIL" endtime="20170629 21:30:44.015"></status>
</kw>
<kw name="Is Host Off" library="state_manager">
<doc>Check if host state is "Off".</doc>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170629 21:30:54.020">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170629 21:30:54.020" status="PASS" endtime="20170629 21:30:54.020"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170629 21:30:54.021">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170629 21:30:54.021" status="PASS" endtime="20170629 21:30:54.021"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170629 21:30:54.021">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170629 21:30:54.021" status="PASS" endtime="20170629 21:30:54.022"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170629 21:30:54.022">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170629 21:30:54.022" status="PASS" endtime="20170629 21:30:54.022"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170629 21:30:54.388">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170629 21:30:54.023" status="PASS" endtime="20170629 21:30:54.389"></status>
</kw>
<msg level="INFO" timestamp="20170629 21:30:54.389">${status} = PASS</msg>
<msg level="INFO" timestamp="20170629 21:30:54.389">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170629 21:30:54.022" status="PASS" endtime="20170629 21:30:54.389"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170629 21:30:54.390">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170629 21:30:54.389" status="PASS" endtime="20170629 21:30:54.390"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170629 21:30:54.391">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170629 21:30:54.390" status="PASS" endtime="20170629 21:30:54.391"></status>
</kw>
<status starttime="20170629 21:30:54.019" status="PASS" endtime="20170629 21:30:54.391"></status>
</kw>
<status starttime="20170629 21:30:54.019" status="PASS" endtime="20170629 21:30:54.391"></status>
</kw>
<status starttime="20170629 21:30:54.018" status="PASS" endtime="20170629 21:30:54.391"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170629 21:30:54.392">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170629 21:30:54.392" status="PASS" endtime="20170629 21:30:54.392"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170629 21:30:54.395">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170629 21:30:54.394" status="PASS" endtime="20170629 21:30:54.395"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170629 21:30:54.396">URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170629 21:30:54.396" status="PASS" endtime="20170629 21:30:54.397"></status>
</kw>
<status starttime="20170629 21:30:54.395" status="PASS" endtime="20170629 21:30:54.397"></status>
</kw>
<status starttime="20170629 21:30:54.393" status="PASS" endtime="20170629 21:30:54.397"></status>
</kw>
<status starttime="20170629 21:30:54.393" status="PASS" endtime="20170629 21:30:54.397"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170629 21:30:54.463">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170629 21:30:54.464">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170629 21:30:54.397" status="PASS" endtime="20170629 21:30:54.464"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170629 21:30:54.466">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170629 21:30:54.465" status="PASS" endtime="20170629 21:30:54.466"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170629 21:30:54.466">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170629 21:30:54.466" status="PASS" endtime="20170629 21:30:54.467"></status>
</kw>
<status starttime="20170629 21:30:54.466" status="PASS" endtime="20170629 21:30:54.467"></status>
</kw>
<status starttime="20170629 21:30:54.465" status="PASS" endtime="20170629 21:30:54.467"></status>
</kw>
<status starttime="20170629 21:30:54.464" status="PASS" endtime="20170629 21:30:54.467"></status>
</kw>
<msg level="INFO" timestamp="20170629 21:30:54.467">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170629 21:30:54.017" status="PASS" endtime="20170629 21:30:54.467"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170629 21:30:54.468">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170629 21:30:54.467" status="PASS" endtime="20170629 21:30:54.468"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170629 21:30:54.468">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170629 21:30:54.469">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170629 21:30:54.469">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170629 21:30:54.468" status="PASS" endtime="20170629 21:30:54.469"></status>
</kw>
<msg level="INFO" timestamp="20170629 21:30:54.469">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status starttime="20170629 21:30:54.016" status="PASS" endtime="20170629 21:30:54.469"></status>
</kw>
<msg level="INFO" timestamp="20170629 21:30:54.470">${host_state} = Running</msg>
<status starttime="20170629 21:30:54.016" status="PASS" endtime="20170629 21:30:54.470"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${host_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170629 21:30:54.470">Off != Running</msg>
<status starttime="20170629 21:30:54.470" status="FAIL" endtime="20170629 21:30:54.470"></status>
</kw>
<status starttime="20170629 21:30:54.016" status="FAIL" endtime="20170629 21:30:54.470"></status>
</kw>
<kw name="Is Host Off" library="state_manager">
<doc>Check if host state is "Off".</doc>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170629 21:31:04.478">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170629 21:31:04.477" status="PASS" endtime="20170629 21:31:04.478"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170629 21:31:04.479">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170629 21:31:04.479" status="PASS" endtime="20170629 21:31:04.479"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170629 21:31:04.480">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170629 21:31:04.480" status="PASS" endtime="20170629 21:31:04.480"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170629 21:31:04.481">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170629 21:31:04.481" status="PASS" endtime="20170629 21:31:04.482"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170629 21:31:04.767">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170629 21:31:04.483" status="PASS" endtime="20170629 21:31:04.768"></status>
</kw>
<msg level="INFO" timestamp="20170629 21:31:04.768">${status} = PASS</msg>
<msg level="INFO" timestamp="20170629 21:31:04.768">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170629 21:31:04.482" status="PASS" endtime="20170629 21:31:04.768"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170629 21:31:04.769">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170629 21:31:04.769" status="PASS" endtime="20170629 21:31:04.769"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170629 21:31:04.770">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170629 21:31:04.770" status="PASS" endtime="20170629 21:31:04.770"></status>
</kw>
<status starttime="20170629 21:31:04.476" status="PASS" endtime="20170629 21:31:04.771"></status>
</kw>
<status starttime="20170629 21:31:04.476" status="PASS" endtime="20170629 21:31:04.771"></status>
</kw>
<status starttime="20170629 21:31:04.475" status="PASS" endtime="20170629 21:31:04.771"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170629 21:31:04.772">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170629 21:31:04.771" status="PASS" endtime="20170629 21:31:04.772"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170629 21:31:04.775">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170629 21:31:04.774" status="PASS" endtime="20170629 21:31:04.775"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170629 21:31:04.777">URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170629 21:31:04.776" status="PASS" endtime="20170629 21:31:04.777"></status>
</kw>
<status starttime="20170629 21:31:04.775" status="PASS" endtime="20170629 21:31:04.777"></status>
</kw>
<status starttime="20170629 21:31:04.773" status="PASS" endtime="20170629 21:31:04.777"></status>
</kw>
<status starttime="20170629 21:31:04.772" status="PASS" endtime="20170629 21:31:04.777"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170629 21:31:04.846">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170629 21:31:04.846">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170629 21:31:04.778" status="PASS" endtime="20170629 21:31:04.846"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170629 21:31:04.849">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170629 21:31:04.849" status="PASS" endtime="20170629 21:31:04.849"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170629 21:31:04.851">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170629 21:31:04.850" status="PASS" endtime="20170629 21:31:04.851"></status>
</kw>
<status starttime="20170629 21:31:04.850" status="PASS" endtime="20170629 21:31:04.851"></status>
</kw>
<status starttime="20170629 21:31:04.848" status="PASS" endtime="20170629 21:31:04.851"></status>
</kw>
<status starttime="20170629 21:31:04.847" status="PASS" endtime="20170629 21:31:04.851"></status>
</kw>
<msg level="INFO" timestamp="20170629 21:31:04.852">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170629 21:31:04.474" status="PASS" endtime="20170629 21:31:04.852"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170629 21:31:04.853">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170629 21:31:04.852" status="PASS" endtime="20170629 21:31:04.853"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170629 21:31:04.854">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170629 21:31:04.854">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170629 21:31:04.854">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170629 21:31:04.853" status="PASS" endtime="20170629 21:31:04.854"></status>
</kw>
<msg level="INFO" timestamp="20170629 21:31:04.854">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status starttime="20170629 21:31:04.473" status="PASS" endtime="20170629 21:31:04.854"></status>
</kw>
<msg level="INFO" timestamp="20170629 21:31:04.855">${host_state} = Running</msg>
<status starttime="20170629 21:31:04.472" status="PASS" endtime="20170629 21:31:04.855"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${host_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170629 21:31:04.856">Off != Running</msg>
<status starttime="20170629 21:31:04.855" status="FAIL" endtime="20170629 21:31:04.856"></status>
</kw>
<status starttime="20170629 21:31:04.471" status="FAIL" endtime="20170629 21:31:04.856"></status>
</kw>
<kw name="Is Host Off" library="state_manager">
<doc>Check if host state is "Off".</doc>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170629 21:31:14.865">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170629 21:31:14.864" status="PASS" endtime="20170629 21:31:14.865"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170629 21:31:14.866">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170629 21:31:14.866" status="PASS" endtime="20170629 21:31:14.866"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170629 21:31:14.867">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170629 21:31:14.867" status="PASS" endtime="20170629 21:31:14.867"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170629 21:31:14.868">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170629 21:31:14.868" status="PASS" endtime="20170629 21:31:14.868"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170629 21:31:15.146">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170629 21:31:14.870" status="PASS" endtime="20170629 21:31:15.146"></status>
</kw>
<msg level="INFO" timestamp="20170629 21:31:15.146">${status} = PASS</msg>
<msg level="INFO" timestamp="20170629 21:31:15.146">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170629 21:31:14.869" status="PASS" endtime="20170629 21:31:15.146"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170629 21:31:15.147">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170629 21:31:15.147" status="PASS" endtime="20170629 21:31:15.147"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170629 21:31:15.148">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170629 21:31:15.148" status="PASS" endtime="20170629 21:31:15.149"></status>
</kw>
<status starttime="20170629 21:31:14.863" status="PASS" endtime="20170629 21:31:15.149"></status>
</kw>
<status starttime="20170629 21:31:14.862" status="PASS" endtime="20170629 21:31:15.149"></status>
</kw>
<status starttime="20170629 21:31:14.861" status="PASS" endtime="20170629 21:31:15.149"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170629 21:31:15.150">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170629 21:31:15.149" status="PASS" endtime="20170629 21:31:15.150"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170629 21:31:15.153">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170629 21:31:15.152" status="PASS" endtime="20170629 21:31:15.153"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170629 21:31:15.154">URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170629 21:31:15.154" status="PASS" endtime="20170629 21:31:15.154"></status>
</kw>
<status starttime="20170629 21:31:15.153" status="PASS" endtime="20170629 21:31:15.154"></status>
</kw>
<status starttime="20170629 21:31:15.151" status="PASS" endtime="20170629 21:31:15.155"></status>
</kw>
<status starttime="20170629 21:31:15.150" status="PASS" endtime="20170629 21:31:15.155"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170629 21:31:15.224">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170629 21:31:15.224">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170629 21:31:15.155" status="PASS" endtime="20170629 21:31:15.225"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170629 21:31:15.231">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170629 21:31:15.229" status="PASS" endtime="20170629 21:31:15.231"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170629 21:31:15.232">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170629 21:31:15.232" status="PASS" endtime="20170629 21:31:15.232"></status>
</kw>
<status starttime="20170629 21:31:15.231" status="PASS" endtime="20170629 21:31:15.232"></status>
</kw>
<status starttime="20170629 21:31:15.228" status="PASS" endtime="20170629 21:31:15.232"></status>
</kw>
<status starttime="20170629 21:31:15.226" status="PASS" endtime="20170629 21:31:15.232"></status>
</kw>
<msg level="INFO" timestamp="20170629 21:31:15.233">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170629 21:31:14.860" status="PASS" endtime="20170629 21:31:15.233"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170629 21:31:15.233">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170629 21:31:15.233" status="PASS" endtime="20170629 21:31:15.233"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170629 21:31:15.234">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170629 21:31:15.234">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170629 21:31:15.234">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170629 21:31:15.234" status="PASS" endtime="20170629 21:31:15.234"></status>
</kw>
<msg level="INFO" timestamp="20170629 21:31:15.234">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status starttime="20170629 21:31:14.859" status="PASS" endtime="20170629 21:31:15.234"></status>
</kw>
<msg level="INFO" timestamp="20170629 21:31:15.235">${host_state} = Running</msg>
<status starttime="20170629 21:31:14.858" status="PASS" endtime="20170629 21:31:15.235"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${host_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170629 21:31:15.235">Off != Running</msg>
<status starttime="20170629 21:31:15.235" status="FAIL" endtime="20170629 21:31:15.235"></status>
</kw>
<status starttime="20170629 21:31:14.857" status="FAIL" endtime="20170629 21:31:15.236"></status>
</kw>
<kw name="Is Host Off" library="state_manager">
<doc>Check if host state is "Off".</doc>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170629 21:31:25.241">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170629 21:31:25.240" status="PASS" endtime="20170629 21:31:25.242"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170629 21:31:25.242">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170629 21:31:25.242" status="PASS" endtime="20170629 21:31:25.242"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170629 21:31:25.243">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170629 21:31:25.243" status="PASS" endtime="20170629 21:31:25.243"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170629 21:31:25.244">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170629 21:31:25.244" status="PASS" endtime="20170629 21:31:25.244"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170629 21:31:25.482">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170629 21:31:25.245" status="PASS" endtime="20170629 21:31:25.482"></status>
</kw>
<msg level="INFO" timestamp="20170629 21:31:25.482">${status} = PASS</msg>
<msg level="INFO" timestamp="20170629 21:31:25.482">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170629 21:31:25.245" status="PASS" endtime="20170629 21:31:25.482"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170629 21:31:25.483">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170629 21:31:25.483" status="PASS" endtime="20170629 21:31:25.483"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170629 21:31:25.484">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170629 21:31:25.483" status="PASS" endtime="20170629 21:31:25.484"></status>
</kw>
<status starttime="20170629 21:31:25.240" status="PASS" endtime="20170629 21:31:25.484"></status>
</kw>
<status starttime="20170629 21:31:25.239" status="PASS" endtime="20170629 21:31:25.484"></status>
</kw>
<status starttime="20170629 21:31:25.239" status="PASS" endtime="20170629 21:31:25.484"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170629 21:31:25.485">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170629 21:31:25.485" status="PASS" endtime="20170629 21:31:25.485"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170629 21:31:25.487">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170629 21:31:25.486" status="PASS" endtime="20170629 21:31:25.487"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170629 21:31:25.488">URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170629 21:31:25.488" status="PASS" endtime="20170629 21:31:25.488"></status>
</kw>
<status starttime="20170629 21:31:25.487" status="PASS" endtime="20170629 21:31:25.488"></status>
</kw>
<status starttime="20170629 21:31:25.486" status="PASS" endtime="20170629 21:31:25.489"></status>
</kw>
<status starttime="20170629 21:31:25.485" status="PASS" endtime="20170629 21:31:25.489"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170629 21:31:25.554">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170629 21:31:25.554">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170629 21:31:25.489" status="PASS" endtime="20170629 21:31:25.554"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170629 21:31:25.556">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170629 21:31:25.555" status="PASS" endtime="20170629 21:31:25.556"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170629 21:31:25.557">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170629 21:31:25.556" status="PASS" endtime="20170629 21:31:25.557"></status>
</kw>
<status starttime="20170629 21:31:25.556" status="PASS" endtime="20170629 21:31:25.557"></status>
</kw>
<status starttime="20170629 21:31:25.555" status="PASS" endtime="20170629 21:31:25.557"></status>
</kw>
<status starttime="20170629 21:31:25.554" status="PASS" endtime="20170629 21:31:25.557"></status>
</kw>
<msg level="INFO" timestamp="20170629 21:31:25.557">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170629 21:31:25.238" status="PASS" endtime="20170629 21:31:25.557"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170629 21:31:25.558">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170629 21:31:25.558" status="PASS" endtime="20170629 21:31:25.558"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170629 21:31:25.558">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170629 21:31:25.559">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170629 21:31:25.559">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170629 21:31:25.558" status="PASS" endtime="20170629 21:31:25.559"></status>
</kw>
<msg level="INFO" timestamp="20170629 21:31:25.559">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status starttime="20170629 21:31:25.237" status="PASS" endtime="20170629 21:31:25.559"></status>
</kw>
<msg level="INFO" timestamp="20170629 21:31:25.559">${host_state} = Running</msg>
<status starttime="20170629 21:31:25.237" status="PASS" endtime="20170629 21:31:25.559"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${host_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170629 21:31:25.560">Off != Running</msg>
<status starttime="20170629 21:31:25.560" status="FAIL" endtime="20170629 21:31:25.560"></status>
</kw>
<status starttime="20170629 21:31:25.236" status="FAIL" endtime="20170629 21:31:25.560"></status>
</kw>
<kw name="Is Host Off" library="state_manager">
<doc>Check if host state is "Off".</doc>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170629 21:31:35.568">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170629 21:31:35.568" status="PASS" endtime="20170629 21:31:35.568"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170629 21:31:35.569">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170629 21:31:35.569" status="PASS" endtime="20170629 21:31:35.569"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170629 21:31:35.570">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170629 21:31:35.569" status="PASS" endtime="20170629 21:31:35.570"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170629 21:31:35.570">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170629 21:31:35.570" status="PASS" endtime="20170629 21:31:35.571"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170629 21:31:35.849">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170629 21:31:35.571" status="PASS" endtime="20170629 21:31:35.849"></status>
</kw>
<msg level="INFO" timestamp="20170629 21:31:35.849">${status} = PASS</msg>
<msg level="INFO" timestamp="20170629 21:31:35.850">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170629 21:31:35.571" status="PASS" endtime="20170629 21:31:35.850"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170629 21:31:35.850">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170629 21:31:35.850" status="PASS" endtime="20170629 21:31:35.850"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170629 21:31:35.851">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170629 21:31:35.851" status="PASS" endtime="20170629 21:31:35.851"></status>
</kw>
<status starttime="20170629 21:31:35.567" status="PASS" endtime="20170629 21:31:35.851"></status>
</kw>
<status starttime="20170629 21:31:35.566" status="PASS" endtime="20170629 21:31:35.851"></status>
</kw>
<status starttime="20170629 21:31:35.564" status="PASS" endtime="20170629 21:31:35.851"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170629 21:31:35.852">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170629 21:31:35.851" status="PASS" endtime="20170629 21:31:35.852"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170629 21:31:35.854">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170629 21:31:35.853" status="PASS" endtime="20170629 21:31:35.854"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170629 21:31:35.855">URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170629 21:31:35.855" status="PASS" endtime="20170629 21:31:35.855"></status>
</kw>
<status starttime="20170629 21:31:35.854" status="PASS" endtime="20170629 21:31:35.855"></status>
</kw>
<status starttime="20170629 21:31:35.853" status="PASS" endtime="20170629 21:31:35.855"></status>
</kw>
<status starttime="20170629 21:31:35.852" status="PASS" endtime="20170629 21:31:35.855"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170629 21:31:35.930">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170629 21:31:35.930">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170629 21:31:35.855" status="PASS" endtime="20170629 21:31:35.930"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170629 21:31:35.931">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170629 21:31:35.931" status="PASS" endtime="20170629 21:31:35.931"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170629 21:31:35.933">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170629 21:31:35.933" status="PASS" endtime="20170629 21:31:35.933"></status>
</kw>
<status starttime="20170629 21:31:35.932" status="PASS" endtime="20170629 21:31:35.933"></status>
</kw>
<status starttime="20170629 21:31:35.930" status="PASS" endtime="20170629 21:31:35.933"></status>
</kw>
<status starttime="20170629 21:31:35.930" status="PASS" endtime="20170629 21:31:35.933"></status>
</kw>
<msg level="INFO" timestamp="20170629 21:31:35.933">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170629 21:31:35.564" status="PASS" endtime="20170629 21:31:35.934"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170629 21:31:35.934">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170629 21:31:35.934" status="PASS" endtime="20170629 21:31:35.934"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170629 21:31:35.935">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170629 21:31:35.935">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170629 21:31:35.935">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170629 21:31:35.934" status="PASS" endtime="20170629 21:31:35.935"></status>
</kw>
<msg level="INFO" timestamp="20170629 21:31:35.935">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status starttime="20170629 21:31:35.563" status="PASS" endtime="20170629 21:31:35.935"></status>
</kw>
<msg level="INFO" timestamp="20170629 21:31:35.936">${host_state} = Running</msg>
<status starttime="20170629 21:31:35.563" status="PASS" endtime="20170629 21:31:35.936"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${host_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170629 21:31:35.936">Off != Running</msg>
<status starttime="20170629 21:31:35.936" status="FAIL" endtime="20170629 21:31:35.936"></status>
</kw>
<status starttime="20170629 21:31:35.561" status="FAIL" endtime="20170629 21:31:35.936"></status>
</kw>
<kw name="Is Host Off" library="state_manager">
<doc>Check if host state is "Off".</doc>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170629 21:31:45.941">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170629 21:31:45.941" status="PASS" endtime="20170629 21:31:45.942"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170629 21:31:45.942">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170629 21:31:45.942" status="PASS" endtime="20170629 21:31:45.942"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170629 21:31:45.943">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170629 21:31:45.943" status="PASS" endtime="20170629 21:31:45.943"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170629 21:31:45.944">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170629 21:31:45.943" status="PASS" endtime="20170629 21:31:45.944"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170629 21:31:46.133">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170629 21:31:45.944" status="PASS" endtime="20170629 21:31:46.134"></status>
</kw>
<msg level="INFO" timestamp="20170629 21:31:46.134">${status} = PASS</msg>
<msg level="INFO" timestamp="20170629 21:31:46.134">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170629 21:31:45.944" status="PASS" endtime="20170629 21:31:46.134"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170629 21:31:46.134">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170629 21:31:46.134" status="PASS" endtime="20170629 21:31:46.135"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170629 21:31:46.135">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170629 21:31:46.135" status="PASS" endtime="20170629 21:31:46.135"></status>
</kw>
<status starttime="20170629 21:31:45.941" status="PASS" endtime="20170629 21:31:46.135"></status>
</kw>
<status starttime="20170629 21:31:45.940" status="PASS" endtime="20170629 21:31:46.135"></status>
</kw>
<status starttime="20170629 21:31:45.939" status="PASS" endtime="20170629 21:31:46.136"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170629 21:31:46.136">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170629 21:31:46.136" status="PASS" endtime="20170629 21:31:46.136"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170629 21:31:46.138">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170629 21:31:46.138" status="PASS" endtime="20170629 21:31:46.138"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170629 21:31:46.139">URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170629 21:31:46.139" status="PASS" endtime="20170629 21:31:46.139"></status>
</kw>
<status starttime="20170629 21:31:46.139" status="PASS" endtime="20170629 21:31:46.140"></status>
</kw>
<status starttime="20170629 21:31:46.137" status="PASS" endtime="20170629 21:31:46.140"></status>
</kw>
<status starttime="20170629 21:31:46.137" status="PASS" endtime="20170629 21:31:46.140"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170629 21:31:46.214">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170629 21:31:46.214">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170629 21:31:46.140" status="PASS" endtime="20170629 21:31:46.214"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170629 21:31:46.216">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170629 21:31:46.216" status="PASS" endtime="20170629 21:31:46.216"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170629 21:31:46.217">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170629 21:31:46.217" status="PASS" endtime="20170629 21:31:46.217"></status>
</kw>
<status starttime="20170629 21:31:46.216" status="PASS" endtime="20170629 21:31:46.217"></status>
</kw>
<status starttime="20170629 21:31:46.215" status="PASS" endtime="20170629 21:31:46.217"></status>
</kw>
<status starttime="20170629 21:31:46.215" status="PASS" endtime="20170629 21:31:46.217"></status>
</kw>
<msg level="INFO" timestamp="20170629 21:31:46.218">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170629 21:31:45.939" status="PASS" endtime="20170629 21:31:46.218"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170629 21:31:46.218">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170629 21:31:46.218" status="PASS" endtime="20170629 21:31:46.218"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170629 21:31:46.219">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170629 21:31:46.219">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170629 21:31:46.219">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170629 21:31:46.219" status="PASS" endtime="20170629 21:31:46.219"></status>
</kw>
<msg level="INFO" timestamp="20170629 21:31:46.219">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status starttime="20170629 21:31:45.938" status="PASS" endtime="20170629 21:31:46.219"></status>
</kw>
<msg level="INFO" timestamp="20170629 21:31:46.220">${host_state} = Running</msg>
<status starttime="20170629 21:31:45.938" status="PASS" endtime="20170629 21:31:46.220"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${host_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170629 21:31:46.220">Off != Running</msg>
<status starttime="20170629 21:31:46.220" status="FAIL" endtime="20170629 21:31:46.220"></status>
</kw>
<status starttime="20170629 21:31:45.937" status="FAIL" endtime="20170629 21:31:46.220"></status>
</kw>
<msg level="FAIL" timestamp="20170629 21:31:46.221">Keyword 'Is Host Off' failed after retrying for 3 minutes. The last error was: Off != Running</msg>
<status starttime="20170629 21:28:42.131" status="FAIL" endtime="20170629 21:31:46.221"></status>
</kw>
<status starttime="20170629 21:28:41.660" status="FAIL" endtime="20170629 21:31:46.221"></status>
</kw>
<status starttime="20170629 21:28:41.660" status="FAIL" endtime="20170629 21:31:46.221"></status>
</kw>
<status starttime="20170629 21:26:52.402" status="FAIL" endtime="20170629 21:31:46.221"></status>
</kw>
<kw type="teardown" name="Test Exit Logs">
<doc>Collect FFDC and SOL log.</doc>
<kw name="FFDC On Test Case Fail" library="openbmc_ffdc">
<doc>Generic FFDC entry point. Place holder to hook in</doc>
<kw name="Is Host Quiesced" library="state_manager">
<doc>Check if host state is quiesced.</doc>
<assign>
<var>${status}</var>
</assign>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170629 21:31:46.226">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170629 21:31:46.226" status="PASS" endtime="20170629 21:31:46.227"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170629 21:31:46.227">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170629 21:31:46.227" status="PASS" endtime="20170629 21:31:46.227"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170629 21:31:46.228">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170629 21:31:46.228" status="PASS" endtime="20170629 21:31:46.228"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170629 21:31:46.229">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170629 21:31:46.228" status="PASS" endtime="20170629 21:31:46.229"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170629 21:31:46.412">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170629 21:31:46.229" status="PASS" endtime="20170629 21:31:46.412"></status>
</kw>
<msg level="INFO" timestamp="20170629 21:31:46.412">${status} = PASS</msg>
<msg level="INFO" timestamp="20170629 21:31:46.412">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170629 21:31:46.229" status="PASS" endtime="20170629 21:31:46.412"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170629 21:31:46.413">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170629 21:31:46.412" status="PASS" endtime="20170629 21:31:46.413"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170629 21:31:46.413">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170629 21:31:46.413" status="PASS" endtime="20170629 21:31:46.413"></status>
</kw>
<status starttime="20170629 21:31:46.225" status="PASS" endtime="20170629 21:31:46.414"></status>
</kw>
<status starttime="20170629 21:31:46.225" status="PASS" endtime="20170629 21:31:46.414"></status>
</kw>
<status starttime="20170629 21:31:46.224" status="PASS" endtime="20170629 21:31:46.414"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170629 21:31:46.414">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status starttime="20170629 21:31:46.414" status="PASS" endtime="20170629 21:31:46.414"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170629 21:31:46.416">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170629 21:31:46.416" status="PASS" endtime="20170629 21:31:46.417"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170629 21:31:46.417">URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status starttime="20170629 21:31:46.417" status="PASS" endtime="20170629 21:31:46.418"></status>
</kw>
<status starttime="20170629 21:31:46.417" status="PASS" endtime="20170629 21:31:46.418"></status>
</kw>
<status starttime="20170629 21:31:46.415" status="PASS" endtime="20170629 21:31:46.418"></status>
</kw>
<status starttime="20170629 21:31:46.415" status="PASS" endtime="20170629 21:31:46.418"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170629 21:31:46.482">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170629 21:31:46.482">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170629 21:31:46.418" status="PASS" endtime="20170629 21:31:46.482"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170629 21:31:46.484">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170629 21:31:46.483" status="PASS" endtime="20170629 21:31:46.484"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170629 21:31:46.485">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status starttime="20170629 21:31:46.485" status="PASS" endtime="20170629 21:31:46.485"></status>
</kw>
<status starttime="20170629 21:31:46.484" status="PASS" endtime="20170629 21:31:46.486"></status>
</kw>
<status starttime="20170629 21:31:46.483" status="PASS" endtime="20170629 21:31:46.486"></status>
</kw>
<status starttime="20170629 21:31:46.482" status="PASS" endtime="20170629 21:31:46.486"></status>
</kw>
<msg level="INFO" timestamp="20170629 21:31:46.486">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170629 21:31:46.223" status="PASS" endtime="20170629 21:31:46.486"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170629 21:31:46.487">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170629 21:31:46.486" status="PASS" endtime="20170629 21:31:46.487"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170629 21:31:46.487">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170629 21:31:46.487">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170629 21:31:46.488">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'status': u'ok', u'message': u'200 OK'}</msg>
<status starttime="20170629 21:31:46.487" status="PASS" endtime="20170629 21:31:46.488"></status>
</kw>
<msg level="INFO" timestamp="20170629 21:31:46.488">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status starttime="20170629 21:31:46.223" status="PASS" endtime="20170629 21:31:46.488"></status>
</kw>
<msg level="INFO" timestamp="20170629 21:31:46.488">${host_state} = Running</msg>
<status starttime="20170629 21:31:46.222" status="PASS" endtime="20170629 21:31:46.488"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal</arg>
<arg>${host_state}</arg>
<arg>Quiesced</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${host_state}</arg>
<arg>Quiesced</arg>
</arguments>
<msg level="FAIL" timestamp="20170629 21:31:46.489">Running != Quiesced</msg>
<status starttime="20170629 21:31:46.489" status="FAIL" endtime="20170629 21:31:46.489"></status>
</kw>
<msg level="INFO" timestamp="20170629 21:31:46.489">${status} = False</msg>
<status starttime="20170629 21:31:46.488" status="PASS" endtime="20170629 21:31:46.489"></status>
</kw>
<msg level="INFO" timestamp="20170629 21:31:46.490">${status} = False</msg>
<status starttime="20170629 21:31:46.222" status="PASS" endtime="20170629 21:31:46.490"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${TEST_STATUS}' == 'FAIL' or '${status}'=='True'</arg>
<arg>FFDC</arg>
</arguments>
<kw name="Ffdc" library="openbmc_ffdc">
<doc>Gather First Failure Data Capture (FFDC).</doc>
<kw name="Ping Host" library="utils">
<arguments>
<arg>9.3.21.61</arg>
</arguments>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${host}</arg>
<arg>msg=No host provided</arg>
</arguments>
<msg level="INFO" timestamp="20170629 21:31:46.510">Length is 9</msg>
<status starttime="20170629 21:31:46.510" status="PASS" endtime="20170629 21:31:46.510"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>ping -c 4 ${host}</arg>
</arguments>
<assign>
<var>${RC}</var>
<var>${output}</var>
</assign>
<msg level="INFO" timestamp="20170629 21:31:46.517">Running command 'ping -c 4 9.3.21.61 2&gt;&amp;1'.</msg>
<msg level="INFO" timestamp="20170629 21:31:49.519">${RC} = 0</msg>
<msg level="INFO" timestamp="20170629 21:31:49.519">${output} = PING 9.3.21.61 (9.3.21.61) 56(84) bytes of data.
64 bytes from 9.3.21.61: icmp_seq=1 ttl=62 time=1.67 ms
64 bytes from 9.3.21.61: icmp_seq=2 ttl=62 time=0.610 ms
64 bytes from 9.3.21.61: icmp_seq=3 tt...</msg>
<status starttime="20170629 21:31:46.510" status="PASS" endtime="20170629 21:31:49.519"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>RC: ${RC}\nOutput:\n${output}</arg>
</arguments>
<msg level="INFO" timestamp="20170629 21:31:49.522">RC: 0
Output:
PING 9.3.21.61 (9.3.21.61) 56(84) bytes of data.
64 bytes from 9.3.21.61: icmp_seq=1 ttl=62 time=1.67 ms
64 bytes from 9.3.21.61: icmp_seq=2 ttl=62 time=0.610 ms
64 bytes from 9.3.21.61: icmp_seq=3 ttl=62 time=0.575 ms
64 bytes from 9.3.21.61: icmp_seq=4 ttl=62 time=0.568 ms

--- 9.3.21.61 ping statistics ---
4 packets transmitted, 4 received, 0% packet loss, time 3000ms
rtt min/avg/max/mdev = 0.568/0.856/1.673/0.472 ms</msg>
<status starttime="20170629 21:31:49.521" status="PASS" endtime="20170629 21:31:49.522"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${RC}</arg>
<arg>${0}</arg>
</arguments>
<status starttime="20170629 21:31:49.522" status="PASS" endtime="20170629 21:31:49.523"></status>
</kw>
<status starttime="20170629 21:31:46.509" status="PASS" endtime="20170629 21:31:49.523"></status>
</kw>
<kw name="Get Current Time Stamp" library="openbmc_ffdc_utils">
<doc>Get the current time stamp data</doc>
<kw name="Get Current Date" library="DateTime">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20170629 21:31:49.541">${cur_time} = 2017-06-29 21:31:49:540628</msg>
<status starttime="20170629 21:31:49.540" status="PASS" endtime="20170629 21:31:49.541"></status>
</kw>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20170629 21:31:49.541">${cur_time} = 20170629213149540628</msg>
<status starttime="20170629 21:31:49.541" status="PASS" endtime="20170629 21:31:49.541"></status>
</kw>
<status starttime="20170629 21:31:49.540" status="PASS" endtime="20170629 21:31:49.542"></status>
</kw>
<msg level="INFO" timestamp="20170629 21:31:49.542">${FFDC_TIME} = 20170629213149540628</msg>
<kw name="Get Test Dir and Name" library="openbmc_ffdc_utils">
<doc>SUITE_NAME and TEST_NAME are automatic variables</doc>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${SUITE_NAME}</arg>
</arguments>
<assign>
<var>${suite_name}</var>
</assign>
<msg level="INFO" timestamp="20170629 21:31:49.552">${suite_name} = TestsTestBasicPoweron</msg>
<status starttime="20170629 21:31:49.551" status="PASS" endtime="20170629 21:31:49.552"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${FFDC_TIME}_</arg>
<arg>${suite_name}</arg>
</arguments>
<assign>
<var>${suite_name}</var>
</assign>
<msg level="INFO" timestamp="20170629 21:31:49.552">${suite_name} = 20170629213149540628_TestsTestBasicPoweron</msg>
<status starttime="20170629 21:31:49.552" status="PASS" endtime="20170629 21:31:49.553"></status>
</kw>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${TEST_NAME}</arg>
</arguments>
<assign>
<var>${test_name}</var>
</assign>
<msg level="INFO" timestamp="20170629 21:31:49.553">${test_name} = PowerOnTest</msg>
<status starttime="20170629 21:31:49.553" status="PASS" endtime="20170629 21:31:49.553"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${FFDC_TIME}_</arg>
<arg>${test_name}</arg>
</arguments>
<assign>
<var>${test_name}</var>
</assign>
<msg level="INFO" timestamp="20170629 21:31:49.554">${test_name} = 20170629213149540628_PowerOnTest</msg>
<status starttime="20170629 21:31:49.554" status="PASS" endtime="20170629 21:31:49.554"></status>
</kw>
<status starttime="20170629 21:31:49.551" status="PASS" endtime="20170629 21:31:49.554"></status>
</kw>
<msg level="INFO" timestamp="20170629 21:31:49.555">${FFDC_DIR_PATH} = /tmp/fspcibld/23280/obmc-robot/logs/20170629213149540628_TestsTestBasicPoweron/20170629213149540628_PowerOnTest/</msg>
<msg level="INFO" timestamp="20170629 21:31:49.555">${FFDC_PREFIX} = 20170629213149540628_</msg>
<msg level="INFO" timestamp="20170629 21:31:49.574">${LOG_PREFIX} = /tmp/fspcibld/23280/obmc-robot/logs/20170629213149540628_TestsTestBasicPoweron/20170629213149540628_PowerOnTest/20170629213149540628_</msg>
<kw name="Create Directory" library="OperatingSystem">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>/tmp/fspcibld/23280/obmc-robot/logs/20170629213149540628_TestsTestBasicPoweron/20170629213149540628_PowerOnTest/</arg>
</arguments>
<msg level="INFO" timestamp="20170629 21:31:49.575" html="yes">Created directory '&lt;a href="file:///tmp/fspcibld/23280/obmc-robot/logs/20170629213149540628_TestsTestBasicPoweron/20170629213149540628_PowerOnTest"&gt;/tmp/fspcibld/23280/obmc-robot/logs/20170629213149540628_TestsTestBasicPoweron/20170629213149540628_PowerOnTest&lt;/a&gt;'.</msg>
<status starttime="20170629 21:31:49.575" status="PASS" endtime="20170629 21:31:49.575"></status>
</kw>
<msg level="INFO" timestamp="20170629 21:31:49.579">${FFDC_FILE_PATH} = /tmp/fspcibld/23280/obmc-robot/logs/20170629213149540628_TestsTestBasicPoweron/20170629213149540628_PowerOnTest/20170629213149540628_BMC_general.txt</msg>
<kw name="Header Message" library="openbmc_ffdc_utils">
<doc>Write header message to the report document manifest.</doc>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${HEADER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170629 21:31:49.599" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/23280/obmc-robot/logs/20170629213149540628_TestsTestBasicPoweron/20170629213149540628_PowerOnTest/20170629213149540628_BMC_general.txt"&gt;/tmp/fspcibld/23280/obmc-robot/logs/20170629213149540628_TestsTestBasicPoweron/20170629213149540628_PowerOnTest/20170629213149540628_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170629 21:31:49.598" status="PASS" endtime="20170629 21:31:49.599"></status>
</kw>
<status starttime="20170629 21:31:49.598" status="PASS" endtime="20170629 21:31:49.599"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170629 21:31:49.600" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/23280/obmc-robot/logs/20170629213149540628_TestsTestBasicPoweron/20170629213149540628_PowerOnTest/20170629213149540628_BMC_general.txt"&gt;/tmp/fspcibld/23280/obmc-robot/logs/20170629213149540628_TestsTestBasicPoweron/20170629213149540628_PowerOnTest/20170629213149540628_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170629 21:31:49.600" status="PASS" endtime="20170629 21:31:49.600"></status>
</kw>
<status starttime="20170629 21:31:49.599" status="PASS" endtime="20170629 21:31:49.600"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Suite File\t\t: ${SUITE_NAME} ${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170629 21:31:49.602" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/23280/obmc-robot/logs/20170629213149540628_TestsTestBasicPoweron/20170629213149540628_PowerOnTest/20170629213149540628_BMC_general.txt"&gt;/tmp/fspcibld/23280/obmc-robot/logs/20170629213149540628_TestsTestBasicPoweron/20170629213149540628_PowerOnTest/20170629213149540628_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170629 21:31:49.601" status="PASS" endtime="20170629 21:31:49.602"></status>
</kw>
<status starttime="20170629 21:31:49.601" status="PASS" endtime="20170629 21:31:49.602"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Case Name\t\t: ${TEST_NAME}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170629 21:31:49.603" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/23280/obmc-robot/logs/20170629213149540628_TestsTestBasicPoweron/20170629213149540628_PowerOnTest/20170629213149540628_BMC_general.txt"&gt;/tmp/fspcibld/23280/obmc-robot/logs/20170629213149540628_TestsTestBasicPoweron/20170629213149540628_PowerOnTest/20170629213149540628_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170629 21:31:49.603" status="PASS" endtime="20170629 21:31:49.603"></status>
</kw>
<status starttime="20170629 21:31:49.602" status="PASS" endtime="20170629 21:31:49.603"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Source File\t: ${SUITE_SOURCE}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170629 21:31:49.604" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/23280/obmc-robot/logs/20170629213149540628_TestsTestBasicPoweron/20170629213149540628_PowerOnTest/20170629213149540628_BMC_general.txt"&gt;/tmp/fspcibld/23280/obmc-robot/logs/20170629213149540628_TestsTestBasicPoweron/20170629213149540628_PowerOnTest/20170629213149540628_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170629 21:31:49.604" status="PASS" endtime="20170629 21:31:49.604"></status>
</kw>
<status starttime="20170629 21:31:49.603" status="PASS" endtime="20170629 21:31:49.604"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Failure Time Stamp\t: ${FFDC_TIME}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170629 21:31:49.606" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/23280/obmc-robot/logs/20170629213149540628_TestsTestBasicPoweron/20170629213149540628_PowerOnTest/20170629213149540628_BMC_general.txt"&gt;/tmp/fspcibld/23280/obmc-robot/logs/20170629213149540628_TestsTestBasicPoweron/20170629213149540628_PowerOnTest/20170629213149540628_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170629 21:31:49.605" status="PASS" endtime="20170629 21:31:49.606"></status>
</kw>
<status starttime="20170629 21:31:49.605" status="PASS" endtime="20170629 21:31:49.606"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Error Message\t: ${TEST_MESSAGE}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170629 21:31:49.607" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/23280/obmc-robot/logs/20170629213149540628_TestsTestBasicPoweron/20170629213149540628_PowerOnTest/20170629213149540628_BMC_general.txt"&gt;/tmp/fspcibld/23280/obmc-robot/logs/20170629213149540628_TestsTestBasicPoweron/20170629213149540628_PowerOnTest/20170629213149540628_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170629 21:31:49.607" status="PASS" endtime="20170629 21:31:49.607"></status>
</kw>
<status starttime="20170629 21:31:49.606" status="PASS" endtime="20170629 21:31:49.607"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Documentation\t:${\n}${TEST_DOCUMENTATION}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170629 21:31:49.608" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/23280/obmc-robot/logs/20170629213149540628_TestsTestBasicPoweron/20170629213149540628_PowerOnTest/20170629213149540628_BMC_general.txt"&gt;/tmp/fspcibld/23280/obmc-robot/logs/20170629213149540628_TestsTestBasicPoweron/20170629213149540628_PowerOnTest/20170629213149540628_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170629 21:31:49.608" status="PASS" endtime="20170629 21:31:49.609"></status>
</kw>
<status starttime="20170629 21:31:49.607" status="PASS" endtime="20170629 21:31:49.609"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170629 21:31:49.610" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/23280/obmc-robot/logs/20170629213149540628_TestsTestBasicPoweron/20170629213149540628_PowerOnTest/20170629213149540628_BMC_general.txt"&gt;/tmp/fspcibld/23280/obmc-robot/logs/20170629213149540628_TestsTestBasicPoweron/20170629213149540628_PowerOnTest/20170629213149540628_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170629 21:31:49.609" status="PASS" endtime="20170629 21:31:49.610"></status>
</kw>
<status starttime="20170629 21:31:49.609" status="PASS" endtime="20170629 21:31:49.610"></status>
</kw>
<kw name="Test Setup Info" library="openbmc_ffdc_utils">
<doc>BMC IP, Model and other information</doc>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}-----------------------${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170629 21:31:49.612" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/23280/obmc-robot/logs/20170629213149540628_TestsTestBasicPoweron/20170629213149540628_PowerOnTest/20170629213149540628_BMC_general.txt"&gt;/tmp/fspcibld/23280/obmc-robot/logs/20170629213149540628_TestsTestBasicPoweron/20170629213149540628_PowerOnTest/20170629213149540628_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170629 21:31:49.611" status="PASS" endtime="20170629 21:31:49.612"></status>
</kw>
<status starttime="20170629 21:31:49.610" status="PASS" endtime="20170629 21:31:49.612"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Setup Information:</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170629 21:31:49.613" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/23280/obmc-robot/logs/20170629213149540628_TestsTestBasicPoweron/20170629213149540628_PowerOnTest/20170629213149540628_BMC_general.txt"&gt;/tmp/fspcibld/23280/obmc-robot/logs/20170629213149540628_TestsTestBasicPoweron/20170629213149540628_PowerOnTest/20170629213149540628_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170629 21:31:49.612" status="PASS" endtime="20170629 21:31:49.613"></status>
</kw>
<status starttime="20170629 21:31:49.612" status="PASS" endtime="20170629 21:31:49.613"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}-----------------------${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170629 21:31:49.614" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/23280/obmc-robot/logs/20170629213149540628_TestsTestBasicPoweron/20170629213149540628_PowerOnTest/20170629213149540628_BMC_general.txt"&gt;/tmp/fspcibld/23280/obmc-robot/logs/20170629213149540628_TestsTestBasicPoweron/20170629213149540628_PowerOnTest/20170629213149540628_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170629 21:31:49.614" status="PASS" endtime="20170629 21:31:49.614"></status>
</kw>
<status starttime="20170629 21:31:49.613" status="PASS" endtime="20170629 21:31:49.614"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>OPENBMC HOST \t: ${OPENBMC_HOST}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170629 21:31:49.615" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/23280/obmc-robot/logs/20170629213149540628_TestsTestBasicPoweron/20170629213149540628_PowerOnTest/20170629213149540628_BMC_general.txt"&gt;/tmp/fspcibld/23280/obmc-robot/logs/20170629213149540628_TestsTestBasicPoweron/20170629213149540628_PowerOnTest/20170629213149540628_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170629 21:31:49.615" status="PASS" endtime="20170629 21:31:49.615"></status>
</kw>
<status starttime="20170629 21:31:49.614" status="PASS" endtime="20170629 21:31:49.616"></status>
</kw>
<kw name="Get BMC System Model" library="utils">
<doc>Get the BMC model from the device tree.</doc>
<assign>
<var>${model_name}</var>
</assign>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg level="FAIL" timestamp="20170629 21:31:49.618">Dictionary does not contain key 'host'.</msg>
<status starttime="20170629 21:31:49.617" status="FAIL" endtime="20170629 21:31:49.618"></status>
</kw>
<msg level="INFO" timestamp="20170629 21:31:49.618">${has_host} = False</msg>
<status starttime="20170629 21:31:49.617" status="PASS" endtime="20170629 21:31:49.618"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status starttime="20170629 21:31:49.619" status="PASS" endtime="20170629 21:31:49.619"></status>
</kw>
<status starttime="20170629 21:31:49.618" status="PASS" endtime="20170629 21:31:49.619"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<kw name="User input SSH and HTTPs Ports" library="connection_client">
<doc>Update the global SSH and HTTPs port variable for QEMU</doc>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${SSH_PORT}</arg>
</arguments>
<assign>
<var>${port_num}</var>
</assign>
<msg level="INFO" timestamp="20170629 21:31:49.621">${port_num} = 22</msg>
<status starttime="20170629 21:31:49.620" status="PASS" endtime="20170629 21:31:49.621"></status>
</kw>
<kw name="Replace Variables" library="BuiltIn">
<doc>Replaces variables in the given text with their current values.</doc>
<arguments>
<arg>${port_num}</arg>
</arguments>
<assign>
<var>${SSH_PORT}</var>
</assign>
<msg level="INFO" timestamp="20170629 21:31:49.621">${SSH_PORT} = 22</msg>
<status starttime="20170629 21:31:49.621" status="PASS" endtime="20170629 21:31:49.621"></status>
</kw>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${HTTPS_PORT}</arg>
</arguments>
<assign>
<var>${https_num}</var>
</assign>
<msg level="INFO" timestamp="20170629 21:31:49.622">${https_num} = 443</msg>
<status starttime="20170629 21:31:49.621" status="PASS" endtime="20170629 21:31:49.622"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${AUTH_URI}</arg>
<arg>https://${OPENBMC_HOST}:${https_num}</arg>
</arguments>
<msg level="INFO" timestamp="20170629 21:31:49.623">${AUTH_URI} = https://9.3.21.61:443</msg>
<status starttime="20170629 21:31:49.622" status="PASS" endtime="20170629 21:31:49.623"></status>
</kw>
<status starttime="20170629 21:31:49.620" status="PASS" endtime="20170629 21:31:49.623"></status>
</kw>
<status starttime="20170629 21:31:49.619" status="PASS" endtime="20170629 21:31:49.623"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg level="FAIL" timestamp="20170629 21:31:49.624">Dictionary does not contain key 'port'.</msg>
<status starttime="20170629 21:31:49.623" status="FAIL" endtime="20170629 21:31:49.624"></status>
</kw>
<msg level="INFO" timestamp="20170629 21:31:49.624">${has_port} = False</msg>
<status starttime="20170629 21:31:49.623" status="PASS" endtime="20170629 21:31:49.624"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keywords" library="BuiltIn">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
</arguments>
<status starttime="20170629 21:31:49.625" status="PASS" endtime="20170629 21:31:49.626"></status>
</kw>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status starttime="20170629 21:31:49.626" status="PASS" endtime="20170629 21:31:49.627"></status>
</kw>
<status starttime="20170629 21:31:49.625" status="PASS" endtime="20170629 21:31:49.627"></status>
</kw>
<status starttime="20170629 21:31:49.624" status="PASS" endtime="20170629 21:31:49.627"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg level="INFO" timestamp="20170629 21:31:49.627">Logging into '9.3.21.61:22' as 'root'.</msg>
<msg level="INFO" timestamp="20170629 21:31:51.286">Read output: root@witherspoon:~#</msg>
<status starttime="20170629 21:31:49.627" status="PASS" endtime="20170629 21:31:51.286"></status>
</kw>
<status starttime="20170629 21:31:49.616" status="PASS" endtime="20170629 21:31:51.286"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>cat ${devicetree_base} | cut -d " " -f 1</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${bmc_model}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170629 21:31:51.287">Executing command 'cat /sys/firmware/devicetree/base/model | cut -d " " -f 1'.</msg>
<msg level="INFO" timestamp="20170629 21:31:51.364">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20170629 21:31:51.364">${bmc_model} = Witherspoon</msg>
<msg level="INFO" timestamp="20170629 21:31:51.364">${stderr} = </msg>
<status starttime="20170629 21:31:51.287" status="PASS" endtime="20170629 21:31:51.364"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg level="INFO" timestamp="20170629 21:31:51.364">Length is 0</msg>
<status starttime="20170629 21:31:51.364" status="PASS" endtime="20170629 21:31:51.364"></status>
</kw>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${bmc_model}</arg>
</arguments>
<msg level="INFO" timestamp="20170629 21:31:51.365">Length is 11</msg>
<status starttime="20170629 21:31:51.365" status="PASS" endtime="20170629 21:31:51.365"></status>
</kw>
<msg level="INFO" timestamp="20170629 21:31:51.365">${model_name} = Witherspoon</msg>
<status starttime="20170629 21:31:49.616" status="PASS" endtime="20170629 21:31:51.365"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>SYSTEM TYPE \t: ${model_name}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170629 21:31:51.367" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/23280/obmc-robot/logs/20170629213149540628_TestsTestBasicPoweron/20170629213149540628_PowerOnTest/20170629213149540628_BMC_general.txt"&gt;/tmp/fspcibld/23280/obmc-robot/logs/20170629213149540628_TestsTestBasicPoweron/20170629213149540628_PowerOnTest/20170629213149540628_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170629 21:31:51.366" status="PASS" endtime="20170629 21:31:51.367"></status>
</kw>
<status starttime="20170629 21:31:51.365" status="PASS" endtime="20170629 21:31:51.367"></status>
</kw>
<status starttime="20170629 21:31:49.610" status="PASS" endtime="20170629 21:31:51.367"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${MSG_INTRO}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170629 21:31:51.368" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/23280/obmc-robot/logs/20170629213149540628_TestsTestBasicPoweron/20170629213149540628_PowerOnTest/20170629213149540628_BMC_general.txt"&gt;/tmp/fspcibld/23280/obmc-robot/logs/20170629213149540628_TestsTestBasicPoweron/20170629213149540628_PowerOnTest/20170629213149540628_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170629 21:31:51.368" status="PASS" endtime="20170629 21:31:51.368"></status>
</kw>
<status starttime="20170629 21:31:51.367" status="PASS" endtime="20170629 21:31:51.368"></status>
</kw>
<kw name="Get Ffdc Cmd Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg level="INFO" timestamp="20170629 21:31:51.369">@{entries} = [ DRIVER INFO | BMC DATA | APPLICATION DATA ]</msg>
<status starttime="20170629 21:31:51.369" status="PASS" endtime="20170629 21:31:51.369"></status>
</kw>
<kw type="for" name="${index} IN [ @{entries} ]">
<kw type="foritem" name="${index} = DRIVER INFO">
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>* ${index.upper()}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170629 21:31:51.370" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/23280/obmc-robot/logs/20170629213149540628_TestsTestBasicPoweron/20170629213149540628_PowerOnTest/20170629213149540628_BMC_general.txt"&gt;/tmp/fspcibld/23280/obmc-robot/logs/20170629213149540628_TestsTestBasicPoweron/20170629213149540628_PowerOnTest/20170629213149540628_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170629 21:31:51.370" status="PASS" endtime="20170629 21:31:51.370"></status>
</kw>
<status starttime="20170629 21:31:51.369" status="PASS" endtime="20170629 21:31:51.370"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170629 21:31:51.371" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/23280/obmc-robot/logs/20170629213149540628_TestsTestBasicPoweron/20170629213149540628_PowerOnTest/20170629213149540628_BMC_general.txt"&gt;/tmp/fspcibld/23280/obmc-robot/logs/20170629213149540628_TestsTestBasicPoweron/20170629213149540628_PowerOnTest/20170629213149540628_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170629 21:31:51.371" status="PASS" endtime="20170629 21:31:51.372"></status>
</kw>
<status starttime="20170629 21:31:51.371" status="PASS" endtime="20170629 21:31:51.372"></status>
</kw>
<status starttime="20170629 21:31:51.369" status="PASS" endtime="20170629 21:31:51.372"></status>
</kw>
<kw type="foritem" name="${index} = BMC DATA">
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>* ${index.upper()}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170629 21:31:51.373" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/23280/obmc-robot/logs/20170629213149540628_TestsTestBasicPoweron/20170629213149540628_PowerOnTest/20170629213149540628_BMC_general.txt"&gt;/tmp/fspcibld/23280/obmc-robot/logs/20170629213149540628_TestsTestBasicPoweron/20170629213149540628_PowerOnTest/20170629213149540628_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170629 21:31:51.373" status="PASS" endtime="20170629 21:31:51.373"></status>
</kw>
<status starttime="20170629 21:31:51.372" status="PASS" endtime="20170629 21:31:51.373"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170629 21:31:51.374" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/23280/obmc-robot/logs/20170629213149540628_TestsTestBasicPoweron/20170629213149540628_PowerOnTest/20170629213149540628_BMC_general.txt"&gt;/tmp/fspcibld/23280/obmc-robot/logs/20170629213149540628_TestsTestBasicPoweron/20170629213149540628_PowerOnTest/20170629213149540628_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170629 21:31:51.374" status="PASS" endtime="20170629 21:31:51.374"></status>
</kw>
<status starttime="20170629 21:31:51.373" status="PASS" endtime="20170629 21:31:51.374"></status>
</kw>
<status starttime="20170629 21:31:51.372" status="PASS" endtime="20170629 21:31:51.374"></status>
</kw>
<kw type="foritem" name="${index} = APPLICATION DATA">
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>* ${index.upper()}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170629 21:31:51.376" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/23280/obmc-robot/logs/20170629213149540628_TestsTestBasicPoweron/20170629213149540628_PowerOnTest/20170629213149540628_BMC_general.txt"&gt;/tmp/fspcibld/23280/obmc-robot/logs/20170629213149540628_TestsTestBasicPoweron/20170629213149540628_PowerOnTest/20170629213149540628_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170629 21:31:51.376" status="PASS" endtime="20170629 21:31:51.376"></status>
</kw>
<status starttime="20170629 21:31:51.375" status="PASS" endtime="20170629 21:31:51.376"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170629 21:31:51.377" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/23280/obmc-robot/logs/20170629213149540628_TestsTestBasicPoweron/20170629213149540628_PowerOnTest/20170629213149540628_BMC_general.txt"&gt;/tmp/fspcibld/23280/obmc-robot/logs/20170629213149540628_TestsTestBasicPoweron/20170629213149540628_PowerOnTest/20170629213149540628_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170629 21:31:51.377" status="PASS" endtime="20170629 21:31:51.378"></status>
</kw>
<status starttime="20170629 21:31:51.377" status="PASS" endtime="20170629 21:31:51.378"></status>
</kw>
<status starttime="20170629 21:31:51.375" status="PASS" endtime="20170629 21:31:51.378"></status>
</kw>
<status starttime="20170629 21:31:51.369" status="PASS" endtime="20170629 21:31:51.378"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${MSG_DETAIL}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170629 21:31:51.379" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/23280/obmc-robot/logs/20170629213149540628_TestsTestBasicPoweron/20170629213149540628_PowerOnTest/20170629213149540628_BMC_general.txt"&gt;/tmp/fspcibld/23280/obmc-robot/logs/20170629213149540628_TestsTestBasicPoweron/20170629213149540628_PowerOnTest/20170629213149540628_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170629 21:31:51.379" status="PASS" endtime="20170629 21:31:51.379"></status>
</kw>
<status starttime="20170629 21:31:51.378" status="PASS" endtime="20170629 21:31:51.379"></status>
</kw>
<status starttime="20170629 21:31:49.597" status="PASS" endtime="20170629 21:31:51.379"></status>
</kw>
<kw name="Call FFDC Methods" library="openbmc_ffdc_methods">
<doc>Call into FFDC Keyword index list.</doc>
<arguments>
<arg>ffdc_function_list=</arg>
</arguments>
<kw name="Get Ffdc Method Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg level="INFO" timestamp="20170629 21:31:51.385">@{entries} = [ BMC LOGS ]</msg>
<status starttime="20170629 21:31:51.385" status="PASS" endtime="20170629 21:31:51.386"></status>
</kw>
<kw type="for" name="${index} IN [ @{entries} ]">
<kw type="foritem" name="${index} = BMC LOGS">
<kw name="Method Call Keyword List" library="openbmc_ffdc_methods">
<doc>Iterate the list through keyword index.</doc>
<arguments>
<arg>${index}</arg>
<arg>${ffdc_function_list}</arg>
</arguments>
<kw name="Get Ffdc Method Call" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<assign>
<var>@{method_list}</var>
</assign>
<msg level="INFO" timestamp="20170629 21:31:51.387">@{method_list} = [ ('FFDC Generic Report', 'BMC FFDC Manifest') | ('Get Request FFDC', 'BMC FFDC Get Requests') | ('OS FFDC', 'OS FFDC Files') | ('SEL Log', 'Collect eSEL Log') | ('Core Files', 'SCP Coredump Files') |...</msg>
<status starttime="20170629 21:31:51.386" status="PASS" endtime="20170629 21:31:51.387"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${ffdc_function_list}' == '${EMPTY}'</arg>
<arg>Get FFDC Method Desc</arg>
<arg>${index}</arg>
<arg>ELSE</arg>
<arg>Split String</arg>
<arg>${ffdc_function_list}</arg>
<arg>separator=:</arg>
</arguments>
<assign>
<var>@{ffdc_function_list}</var>
</assign>
<kw name="Get Ffdc Method Desc" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<status starttime="20170629 21:31:51.388" status="PASS" endtime="20170629 21:31:51.388"></status>
</kw>
<msg level="INFO" timestamp="20170629 21:31:51.388">@{ffdc_function_list} = [ FFDC Generic Report | Get Request FFDC | OS FFDC | SEL Log | Core Files | BMC Specific Files ]</msg>
<status starttime="20170629 21:31:51.387" status="PASS" endtime="20170629 21:31:51.388"></status>
</kw>
<kw type="for" name="${method} IN [ @{method_list} ]">
<kw type="foritem" name="${method} = ('FFDC Generic Report', 'BMC FFDC Manifest')">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status starttime="20170629 21:31:51.390" status="PASS" endtime="20170629 21:31:51.390"></status>
</kw>
<msg level="INFO" timestamp="20170629 21:31:51.390">${status} = PASS</msg>
<msg level="INFO" timestamp="20170629 21:31:51.390">${ret_values} = None</msg>
<status starttime="20170629 21:31:51.389" status="PASS" endtime="20170629 21:31:51.390"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status starttime="20170629 21:31:51.391" status="PASS" endtime="20170629 21:31:51.391"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="BMC FFDC Manifest" library="openbmc_ffdc_methods">
<doc>Get the commands index for the FFDC_BMC_CMD,</doc>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg level="FAIL" timestamp="20170629 21:31:51.417">Dictionary does not contain key 'host'.</msg>
<status starttime="20170629 21:31:51.417" status="FAIL" endtime="20170629 21:31:51.417"></status>
</kw>
<msg level="INFO" timestamp="20170629 21:31:51.417">${has_host} = False</msg>
<status starttime="20170629 21:31:51.416" status="PASS" endtime="20170629 21:31:51.417"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status starttime="20170629 21:31:51.418" status="PASS" endtime="20170629 21:31:51.419"></status>
</kw>
<status starttime="20170629 21:31:51.418" status="PASS" endtime="20170629 21:31:51.419"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<kw name="User input SSH and HTTPs Ports" library="connection_client">
<doc>Update the global SSH and HTTPs port variable for QEMU</doc>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${SSH_PORT}</arg>
</arguments>
<assign>
<var>${port_num}</var>
</assign>
<msg level="INFO" timestamp="20170629 21:31:51.420">${port_num} = 22</msg>
<status starttime="20170629 21:31:51.420" status="PASS" endtime="20170629 21:31:51.420"></status>
</kw>
<kw name="Replace Variables" library="BuiltIn">
<doc>Replaces variables in the given text with their current values.</doc>
<arguments>
<arg>${port_num}</arg>
</arguments>
<assign>
<var>${SSH_PORT}</var>
</assign>
<msg level="INFO" timestamp="20170629 21:31:51.421">${SSH_PORT} = 22</msg>
<status starttime="20170629 21:31:51.420" status="PASS" endtime="20170629 21:31:51.421"></status>
</kw>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${HTTPS_PORT}</arg>
</arguments>
<assign>
<var>${https_num}</var>
</assign>
<msg level="INFO" timestamp="20170629 21:31:51.421">${https_num} = 443</msg>
<status starttime="20170629 21:31:51.421" status="PASS" endtime="20170629 21:31:51.421"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${AUTH_URI}</arg>
<arg>https://${OPENBMC_HOST}:${https_num}</arg>
</arguments>
<msg level="INFO" timestamp="20170629 21:31:51.422">${AUTH_URI} = https://9.3.21.61:443</msg>
<status starttime="20170629 21:31:51.422" status="PASS" endtime="20170629 21:31:51.422"></status>
</kw>
<status starttime="20170629 21:31:51.419" status="PASS" endtime="20170629 21:31:51.422"></status>
</kw>
<status starttime="20170629 21:31:51.419" status="PASS" endtime="20170629 21:31:51.422"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg level="FAIL" timestamp="20170629 21:31:51.423">Dictionary does not contain key 'port'.</msg>
<status starttime="20170629 21:31:51.423" status="FAIL" endtime="20170629 21:31:51.423"></status>
</kw>
<msg level="INFO" timestamp="20170629 21:31:51.424">${has_port} = False</msg>
<status starttime="20170629 21:31:51.423" status="PASS" endtime="20170629 21:31:51.424"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keywords" library="BuiltIn">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
</arguments>
<status starttime="20170629 21:31:51.425" status="PASS" endtime="20170629 21:31:51.425"></status>
</kw>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status starttime="20170629 21:31:51.426" status="PASS" endtime="20170629 21:31:51.426"></status>
</kw>
<status starttime="20170629 21:31:51.425" status="PASS" endtime="20170629 21:31:51.426"></status>
</kw>
<status starttime="20170629 21:31:51.424" status="PASS" endtime="20170629 21:31:51.426"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg level="INFO" timestamp="20170629 21:31:51.427">Logging into '9.3.21.61:22' as 'root'.</msg>
<msg level="INFO" timestamp="20170629 21:31:53.210">Read output: root@witherspoon:~#</msg>
<status starttime="20170629 21:31:51.426" status="PASS" endtime="20170629 21:31:53.210"></status>
</kw>
<status starttime="20170629 21:31:51.415" status="PASS" endtime="20170629 21:31:53.211"></status>
</kw>
<kw name="Get Ffdc Cmd Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg level="INFO" timestamp="20170629 21:31:53.211">@{entries} = [ DRIVER INFO | BMC DATA | APPLICATION DATA ]</msg>
<status starttime="20170629 21:31:53.211" status="PASS" endtime="20170629 21:31:53.211"></status>
</kw>
<kw type="for" name="${index} IN [ @{entries} ]">
<kw type="foritem" name="${index} = DRIVER INFO">
<kw name="Iterate BMC Command List Pairs" library="openbmc_ffdc_methods">
<doc>Feed in key pair list from dictionary to execute</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Bmc Cmd" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg level="INFO" timestamp="20170629 21:31:53.213">@{cmd_list} = [ ('Build Info', 'cat /etc/version') | ('FW Level', 'cat /etc/os-release') ]</msg>
<status starttime="20170629 21:31:53.212" status="PASS" endtime="20170629 21:31:53.213"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${ENTRY_INDEX}</arg>
<arg>${key_index}</arg>
</arguments>
<msg level="INFO" timestamp="20170629 21:31:53.218">${ENTRY_INDEX} = DRIVER INFO</msg>
<status starttime="20170629 21:31:53.213" status="PASS" endtime="20170629 21:31:53.218"></status>
</kw>
<kw type="for" name="${cmd} IN [ @{cmd_list} ]">
<kw type="foritem" name="${cmd} = ('Build Info', 'cat /etc/version')">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170629 21:31:53.221" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/23280/obmc-robot/logs/20170629213149540628_TestsTestBasicPoweron/20170629213149540628_PowerOnTest/20170629213149540628_BMC_general.txt"&gt;/tmp/fspcibld/23280/obmc-robot/logs/20170629213149540628_TestsTestBasicPoweron/20170629213149540628_PowerOnTest/20170629213149540628_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170629 21:31:53.220" status="PASS" endtime="20170629 21:31:53.221"></status>
</kw>
<status starttime="20170629 21:31:53.220" status="PASS" endtime="20170629 21:31:53.221"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170629 21:31:53.222" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/23280/obmc-robot/logs/20170629213149540628_TestsTestBasicPoweron/20170629213149540628_PowerOnTest/20170629213149540628_BMC_general.txt"&gt;/tmp/fspcibld/23280/obmc-robot/logs/20170629213149540628_TestsTestBasicPoweron/20170629213149540628_PowerOnTest/20170629213149540628_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170629 21:31:53.222" status="PASS" endtime="20170629 21:31:53.222"></status>
</kw>
<status starttime="20170629 21:31:53.221" status="PASS" endtime="20170629 21:31:53.222"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170629 21:31:53.224" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/23280/obmc-robot/logs/20170629213149540628_TestsTestBasicPoweron/20170629213149540628_PowerOnTest/20170629213149540628_BMC_general.txt"&gt;/tmp/fspcibld/23280/obmc-robot/logs/20170629213149540628_TestsTestBasicPoweron/20170629213149540628_PowerOnTest/20170629213149540628_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170629 21:31:53.223" status="PASS" endtime="20170629 21:31:53.224"></status>
</kw>
<status starttime="20170629 21:31:53.223" status="PASS" endtime="20170629 21:31:53.224"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170629 21:31:53.225" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/23280/obmc-robot/logs/20170629213149540628_TestsTestBasicPoweron/20170629213149540628_PowerOnTest/20170629213149540628_BMC_general.txt"&gt;/tmp/fspcibld/23280/obmc-robot/logs/20170629213149540628_TestsTestBasicPoweron/20170629213149540628_PowerOnTest/20170629213149540628_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170629 21:31:53.224" status="PASS" endtime="20170629 21:31:53.225"></status>
</kw>
<status starttime="20170629 21:31:53.224" status="PASS" endtime="20170629 21:31:53.225"></status>
</kw>
<status starttime="20170629 21:31:53.219" status="PASS" endtime="20170629 21:31:53.225"></status>
</kw>
<status starttime="20170629 21:31:53.219" status="PASS" endtime="20170629 21:31:53.225"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170629 21:31:53.226">Executing command 'cat /etc/version'.</msg>
<msg level="INFO" timestamp="20170629 21:31:53.284">Command exited with return code 1.</msg>
<msg level="INFO" timestamp="20170629 21:31:53.284">${stdout} = </msg>
<msg level="INFO" timestamp="20170629 21:31:53.284">${stderr} = cat: can't open '/etc/version': No such file or directory</msg>
<status starttime="20170629 21:31:53.225" status="PASS" endtime="20170629 21:31:53.284"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170629 21:31:53.293" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/23280/obmc-robot/logs/20170629213149540628_TestsTestBasicPoweron/20170629213149540628_PowerOnTest/20170629213149540628_BMC_general.txt"&gt;/tmp/fspcibld/23280/obmc-robot/logs/20170629213149540628_TestsTestBasicPoweron/20170629213149540628_PowerOnTest/20170629213149540628_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170629 21:31:53.292" status="PASS" endtime="20170629 21:31:53.293"></status>
</kw>
<status starttime="20170629 21:31:53.291" status="PASS" endtime="20170629 21:31:53.293"></status>
</kw>
<status starttime="20170629 21:31:53.285" status="PASS" endtime="20170629 21:31:53.293"></status>
</kw>
<status starttime="20170629 21:31:53.218" status="PASS" endtime="20170629 21:31:53.293"></status>
</kw>
<status starttime="20170629 21:31:53.218" status="PASS" endtime="20170629 21:31:53.293"></status>
</kw>
<kw type="foritem" name="${cmd} = ('FW Level', 'cat /etc/os-release')">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170629 21:31:53.296" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/23280/obmc-robot/logs/20170629213149540628_TestsTestBasicPoweron/20170629213149540628_PowerOnTest/20170629213149540628_BMC_general.txt"&gt;/tmp/fspcibld/23280/obmc-robot/logs/20170629213149540628_TestsTestBasicPoweron/20170629213149540628_PowerOnTest/20170629213149540628_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170629 21:31:53.296" status="PASS" endtime="20170629 21:31:53.296"></status>
</kw>
<status starttime="20170629 21:31:53.295" status="PASS" endtime="20170629 21:31:53.297"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170629 21:31:53.298" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/23280/obmc-robot/logs/20170629213149540628_TestsTestBasicPoweron/20170629213149540628_PowerOnTest/20170629213149540628_BMC_general.txt"&gt;/tmp/fspcibld/23280/obmc-robot/logs/20170629213149540628_TestsTestBasicPoweron/20170629213149540628_PowerOnTest/20170629213149540628_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170629 21:31:53.297" status="PASS" endtime="20170629 21:31:53.298"></status>
</kw>
<status starttime="20170629 21:31:53.297" status="PASS" endtime="20170629 21:31:53.298"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170629 21:31:53.299" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/23280/obmc-robot/logs/20170629213149540628_TestsTestBasicPoweron/20170629213149540628_PowerOnTest/20170629213149540628_BMC_general.txt"&gt;/tmp/fspcibld/23280/obmc-robot/logs/20170629213149540628_TestsTestBasicPoweron/20170629213149540628_PowerOnTest/20170629213149540628_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170629 21:31:53.299" status="PASS" endtime="20170629 21:31:53.299"></status>
</kw>
<status starttime="20170629 21:31:53.298" status="PASS" endtime="20170629 21:31:53.299"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170629 21:31:53.300" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/23280/obmc-robot/logs/20170629213149540628_TestsTestBasicPoweron/20170629213149540628_PowerOnTest/20170629213149540628_BMC_general.txt"&gt;/tmp/fspcibld/23280/obmc-robot/logs/20170629213149540628_TestsTestBasicPoweron/20170629213149540628_PowerOnTest/20170629213149540628_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170629 21:31:53.300" status="PASS" endtime="20170629 21:31:53.300"></status>
</kw>
<status starttime="20170629 21:31:53.299" status="PASS" endtime="20170629 21:31:53.301"></status>
</kw>
<status starttime="20170629 21:31:53.295" status="PASS" endtime="20170629 21:31:53.301"></status>
</kw>
<status starttime="20170629 21:31:53.294" status="PASS" endtime="20170629 21:31:53.301"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170629 21:31:53.301">Executing command 'cat /etc/os-release'.</msg>
<msg level="INFO" timestamp="20170629 21:31:53.370">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20170629 21:31:53.370">${stdout} = ID="openbmc-phosphor"
NAME="Phosphor OpenBMC (Phosphor OpenBMC Project Reference Distro)"
VERSION="v1.99.7-68"
VERSION_ID="v1.99.7-68-ga53f993"
PRETTY_NAME="Phosphor OpenBMC (Phosphor OpenBMC Project ...</msg>
<msg level="INFO" timestamp="20170629 21:31:53.370">${stderr} = </msg>
<status starttime="20170629 21:31:53.301" status="PASS" endtime="20170629 21:31:53.370"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170629 21:31:53.376" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/23280/obmc-robot/logs/20170629213149540628_TestsTestBasicPoweron/20170629213149540628_PowerOnTest/20170629213149540628_BMC_general.txt"&gt;/tmp/fspcibld/23280/obmc-robot/logs/20170629213149540628_TestsTestBasicPoweron/20170629213149540628_PowerOnTest/20170629213149540628_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170629 21:31:53.376" status="PASS" endtime="20170629 21:31:53.376"></status>
</kw>
<status starttime="20170629 21:31:53.375" status="PASS" endtime="20170629 21:31:53.376"></status>
</kw>
<status starttime="20170629 21:31:53.370" status="PASS" endtime="20170629 21:31:53.376"></status>
</kw>
<status starttime="20170629 21:31:53.293" status="PASS" endtime="20170629 21:31:53.376"></status>
</kw>
<status starttime="20170629 21:31:53.293" status="PASS" endtime="20170629 21:31:53.376"></status>
</kw>
<status starttime="20170629 21:31:53.218" status="PASS" endtime="20170629 21:31:53.377"></status>
</kw>
<status starttime="20170629 21:31:53.212" status="PASS" endtime="20170629 21:31:53.377"></status>
</kw>
<status starttime="20170629 21:31:53.212" status="PASS" endtime="20170629 21:31:53.377"></status>
</kw>
<kw type="foritem" name="${index} = BMC DATA">
<kw name="Iterate BMC Command List Pairs" library="openbmc_ffdc_methods">
<doc>Feed in key pair list from dictionary to execute</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Bmc Cmd" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg level="INFO" timestamp="20170629 21:31:53.378">@{cmd_list} = [ ('BMC Uptime', 'uptime') | ('BMC File System Disk Space Usage', 'df -hT') | ('BMC OS', 'uname -a') ]</msg>
<status starttime="20170629 21:31:53.377" status="PASS" endtime="20170629 21:31:53.378"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${ENTRY_INDEX}</arg>
<arg>${key_index}</arg>
</arguments>
<msg level="INFO" timestamp="20170629 21:31:53.378">${ENTRY_INDEX} = BMC DATA</msg>
<status starttime="20170629 21:31:53.378" status="PASS" endtime="20170629 21:31:53.379"></status>
</kw>
<kw type="for" name="${cmd} IN [ @{cmd_list} ]">
<kw type="foritem" name="${cmd} = ('BMC Uptime', 'uptime')">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170629 21:31:53.381" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/23280/obmc-robot/logs/20170629213149540628_TestsTestBasicPoweron/20170629213149540628_PowerOnTest/20170629213149540628_BMC_general.txt"&gt;/tmp/fspcibld/23280/obmc-robot/logs/20170629213149540628_TestsTestBasicPoweron/20170629213149540628_PowerOnTest/20170629213149540628_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170629 21:31:53.381" status="PASS" endtime="20170629 21:31:53.382"></status>
</kw>
<status starttime="20170629 21:31:53.381" status="PASS" endtime="20170629 21:31:53.382"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170629 21:31:53.383" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/23280/obmc-robot/logs/20170629213149540628_TestsTestBasicPoweron/20170629213149540628_PowerOnTest/20170629213149540628_BMC_general.txt"&gt;/tmp/fspcibld/23280/obmc-robot/logs/20170629213149540628_TestsTestBasicPoweron/20170629213149540628_PowerOnTest/20170629213149540628_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170629 21:31:53.383" status="PASS" endtime="20170629 21:31:53.383"></status>
</kw>
<status starttime="20170629 21:31:53.382" status="PASS" endtime="20170629 21:31:53.383"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170629 21:31:53.384" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/23280/obmc-robot/logs/20170629213149540628_TestsTestBasicPoweron/20170629213149540628_PowerOnTest/20170629213149540628_BMC_general.txt"&gt;/tmp/fspcibld/23280/obmc-robot/logs/20170629213149540628_TestsTestBasicPoweron/20170629213149540628_PowerOnTest/20170629213149540628_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170629 21:31:53.384" status="PASS" endtime="20170629 21:31:53.384"></status>
</kw>
<status starttime="20170629 21:31:53.383" status="PASS" endtime="20170629 21:31:53.384"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170629 21:31:53.386" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/23280/obmc-robot/logs/20170629213149540628_TestsTestBasicPoweron/20170629213149540628_PowerOnTest/20170629213149540628_BMC_general.txt"&gt;/tmp/fspcibld/23280/obmc-robot/logs/20170629213149540628_TestsTestBasicPoweron/20170629213149540628_PowerOnTest/20170629213149540628_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170629 21:31:53.385" status="PASS" endtime="20170629 21:31:53.386"></status>
</kw>
<status starttime="20170629 21:31:53.385" status="PASS" endtime="20170629 21:31:53.386"></status>
</kw>
<status starttime="20170629 21:31:53.380" status="PASS" endtime="20170629 21:31:53.386"></status>
</kw>
<status starttime="20170629 21:31:53.380" status="PASS" endtime="20170629 21:31:53.386"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170629 21:31:53.387">Executing command 'uptime'.</msg>
<msg level="INFO" timestamp="20170629 21:31:53.471">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20170629 21:31:53.472">${stdout} =  21:31:53 up 8 min,  load average: 0.38, 1.07, 0.80</msg>
<msg level="INFO" timestamp="20170629 21:31:53.472">${stderr} = </msg>
<status starttime="20170629 21:31:53.386" status="PASS" endtime="20170629 21:31:53.472"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170629 21:31:53.478" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/23280/obmc-robot/logs/20170629213149540628_TestsTestBasicPoweron/20170629213149540628_PowerOnTest/20170629213149540628_BMC_general.txt"&gt;/tmp/fspcibld/23280/obmc-robot/logs/20170629213149540628_TestsTestBasicPoweron/20170629213149540628_PowerOnTest/20170629213149540628_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170629 21:31:53.477" status="PASS" endtime="20170629 21:31:53.478"></status>
</kw>
<status starttime="20170629 21:31:53.477" status="PASS" endtime="20170629 21:31:53.478"></status>
</kw>
<status starttime="20170629 21:31:53.472" status="PASS" endtime="20170629 21:31:53.478"></status>
</kw>
<status starttime="20170629 21:31:53.379" status="PASS" endtime="20170629 21:31:53.478"></status>
</kw>
<status starttime="20170629 21:31:53.379" status="PASS" endtime="20170629 21:31:53.478"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC File System Disk Space Usage', 'df -hT')">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170629 21:31:53.481" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/23280/obmc-robot/logs/20170629213149540628_TestsTestBasicPoweron/20170629213149540628_PowerOnTest/20170629213149540628_BMC_general.txt"&gt;/tmp/fspcibld/23280/obmc-robot/logs/20170629213149540628_TestsTestBasicPoweron/20170629213149540628_PowerOnTest/20170629213149540628_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170629 21:31:53.481" status="PASS" endtime="20170629 21:31:53.481"></status>
</kw>
<status starttime="20170629 21:31:53.480" status="PASS" endtime="20170629 21:31:53.481"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170629 21:31:53.482" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/23280/obmc-robot/logs/20170629213149540628_TestsTestBasicPoweron/20170629213149540628_PowerOnTest/20170629213149540628_BMC_general.txt"&gt;/tmp/fspcibld/23280/obmc-robot/logs/20170629213149540628_TestsTestBasicPoweron/20170629213149540628_PowerOnTest/20170629213149540628_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170629 21:31:53.482" status="PASS" endtime="20170629 21:31:53.482"></status>
</kw>
<status starttime="20170629 21:31:53.481" status="PASS" endtime="20170629 21:31:53.482"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170629 21:31:53.484" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/23280/obmc-robot/logs/20170629213149540628_TestsTestBasicPoweron/20170629213149540628_PowerOnTest/20170629213149540628_BMC_general.txt"&gt;/tmp/fspcibld/23280/obmc-robot/logs/20170629213149540628_TestsTestBasicPoweron/20170629213149540628_PowerOnTest/20170629213149540628_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170629 21:31:53.483" status="PASS" endtime="20170629 21:31:53.484"></status>
</kw>
<status starttime="20170629 21:31:53.483" status="PASS" endtime="20170629 21:31:53.484"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170629 21:31:53.485" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/23280/obmc-robot/logs/20170629213149540628_TestsTestBasicPoweron/20170629213149540628_PowerOnTest/20170629213149540628_BMC_general.txt"&gt;/tmp/fspcibld/23280/obmc-robot/logs/20170629213149540628_TestsTestBasicPoweron/20170629213149540628_PowerOnTest/20170629213149540628_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170629 21:31:53.485" status="PASS" endtime="20170629 21:31:53.485"></status>
</kw>
<status starttime="20170629 21:31:53.484" status="PASS" endtime="20170629 21:31:53.485"></status>
</kw>
<status starttime="20170629 21:31:53.480" status="PASS" endtime="20170629 21:31:53.485"></status>
</kw>
<status starttime="20170629 21:31:53.479" status="PASS" endtime="20170629 21:31:53.485"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170629 21:31:53.486">Executing command 'df -hT'.</msg>
<msg level="INFO" timestamp="20170629 21:31:53.571">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20170629 21:31:53.571">${stdout} = Filesystem           Type            Size      Used Available Use% Mounted on
dev                  devtmpfs      210.2M         0    210.2M   0% /dev
tmpfs                tmpfs         211.1M     14.0...</msg>
<msg level="INFO" timestamp="20170629 21:31:53.571">${stderr} = </msg>
<status starttime="20170629 21:31:53.486" status="PASS" endtime="20170629 21:31:53.571"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170629 21:31:53.577" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/23280/obmc-robot/logs/20170629213149540628_TestsTestBasicPoweron/20170629213149540628_PowerOnTest/20170629213149540628_BMC_general.txt"&gt;/tmp/fspcibld/23280/obmc-robot/logs/20170629213149540628_TestsTestBasicPoweron/20170629213149540628_PowerOnTest/20170629213149540628_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170629 21:31:53.576" status="PASS" endtime="20170629 21:31:53.577"></status>
</kw>
<status starttime="20170629 21:31:53.576" status="PASS" endtime="20170629 21:31:53.577"></status>
</kw>
<status starttime="20170629 21:31:53.571" status="PASS" endtime="20170629 21:31:53.577"></status>
</kw>
<status starttime="20170629 21:31:53.478" status="PASS" endtime="20170629 21:31:53.577"></status>
</kw>
<status starttime="20170629 21:31:53.478" status="PASS" endtime="20170629 21:31:53.577"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC OS', 'uname -a')">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170629 21:31:53.580" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/23280/obmc-robot/logs/20170629213149540628_TestsTestBasicPoweron/20170629213149540628_PowerOnTest/20170629213149540628_BMC_general.txt"&gt;/tmp/fspcibld/23280/obmc-robot/logs/20170629213149540628_TestsTestBasicPoweron/20170629213149540628_PowerOnTest/20170629213149540628_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170629 21:31:53.580" status="PASS" endtime="20170629 21:31:53.581"></status>
</kw>
<status starttime="20170629 21:31:53.579" status="PASS" endtime="20170629 21:31:53.581"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170629 21:31:53.582" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/23280/obmc-robot/logs/20170629213149540628_TestsTestBasicPoweron/20170629213149540628_PowerOnTest/20170629213149540628_BMC_general.txt"&gt;/tmp/fspcibld/23280/obmc-robot/logs/20170629213149540628_TestsTestBasicPoweron/20170629213149540628_PowerOnTest/20170629213149540628_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170629 21:31:53.581" status="PASS" endtime="20170629 21:31:53.582"></status>
</kw>
<status starttime="20170629 21:31:53.581" status="PASS" endtime="20170629 21:31:53.582"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170629 21:31:53.583" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/23280/obmc-robot/logs/20170629213149540628_TestsTestBasicPoweron/20170629213149540628_PowerOnTest/20170629213149540628_BMC_general.txt"&gt;/tmp/fspcibld/23280/obmc-robot/logs/20170629213149540628_TestsTestBasicPoweron/20170629213149540628_PowerOnTest/20170629213149540628_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170629 21:31:53.583" status="PASS" endtime="20170629 21:31:53.583"></status>
</kw>
<status starttime="20170629 21:31:53.582" status="PASS" endtime="20170629 21:31:53.583"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170629 21:31:53.584" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/23280/obmc-robot/logs/20170629213149540628_TestsTestBasicPoweron/20170629213149540628_PowerOnTest/20170629213149540628_BMC_general.txt"&gt;/tmp/fspcibld/23280/obmc-robot/logs/20170629213149540628_TestsTestBasicPoweron/20170629213149540628_PowerOnTest/20170629213149540628_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170629 21:31:53.584" status="PASS" endtime="20170629 21:31:53.584"></status>
</kw>
<status starttime="20170629 21:31:53.583" status="PASS" endtime="20170629 21:31:53.585"></status>
</kw>
<status starttime="20170629 21:31:53.579" status="PASS" endtime="20170629 21:31:53.585"></status>
</kw>
<status starttime="20170629 21:31:53.578" status="PASS" endtime="20170629 21:31:53.585"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170629 21:31:53.585">Executing command 'uname -a'.</msg>
<msg level="INFO" timestamp="20170629 21:31:53.670">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20170629 21:31:53.670">${stdout} = Linux witherspoon 4.10.17-9e95993e2d6edc68af5ca3f2345789e0f450d0db #1 Thu Jun 29 21:11:18 UTC 2017 armv6l GNU/Linux</msg>
<msg level="INFO" timestamp="20170629 21:31:53.670">${stderr} = </msg>
<status starttime="20170629 21:31:53.585" status="PASS" endtime="20170629 21:31:53.670"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170629 21:31:53.676" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/23280/obmc-robot/logs/20170629213149540628_TestsTestBasicPoweron/20170629213149540628_PowerOnTest/20170629213149540628_BMC_general.txt"&gt;/tmp/fspcibld/23280/obmc-robot/logs/20170629213149540628_TestsTestBasicPoweron/20170629213149540628_PowerOnTest/20170629213149540628_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170629 21:31:53.676" status="PASS" endtime="20170629 21:31:53.676"></status>
</kw>
<status starttime="20170629 21:31:53.675" status="PASS" endtime="20170629 21:31:53.676"></status>
</kw>
<status starttime="20170629 21:31:53.671" status="PASS" endtime="20170629 21:31:53.677"></status>
</kw>
<status starttime="20170629 21:31:53.577" status="PASS" endtime="20170629 21:31:53.677"></status>
</kw>
<status starttime="20170629 21:31:53.577" status="PASS" endtime="20170629 21:31:53.677"></status>
</kw>
<status starttime="20170629 21:31:53.379" status="PASS" endtime="20170629 21:31:53.677"></status>
</kw>
<status starttime="20170629 21:31:53.377" status="PASS" endtime="20170629 21:31:53.677"></status>
</kw>
<status starttime="20170629 21:31:53.377" status="PASS" endtime="20170629 21:31:53.677"></status>
</kw>
<kw type="foritem" name="${index} = APPLICATION DATA">
<kw name="Iterate BMC Command List Pairs" library="openbmc_ffdc_methods">
<doc>Feed in key pair list from dictionary to execute</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Bmc Cmd" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg level="INFO" timestamp="20170629 21:31:53.678">@{cmd_list} = [ ('BMC state', '/usr/sbin/obmcutil  state') ]</msg>
<status starttime="20170629 21:31:53.678" status="PASS" endtime="20170629 21:31:53.678"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${ENTRY_INDEX}</arg>
<arg>${key_index}</arg>
</arguments>
<msg level="INFO" timestamp="20170629 21:31:53.679">${ENTRY_INDEX} = APPLICATION DATA</msg>
<status starttime="20170629 21:31:53.678" status="PASS" endtime="20170629 21:31:53.679"></status>
</kw>
<kw type="for" name="${cmd} IN [ @{cmd_list} ]">
<kw type="foritem" name="${cmd} = ('BMC state', '/usr/sbin/obmcutil  state')">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170629 21:31:53.682" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/23280/obmc-robot/logs/20170629213149540628_TestsTestBasicPoweron/20170629213149540628_PowerOnTest/20170629213149540628_BMC_general.txt"&gt;/tmp/fspcibld/23280/obmc-robot/logs/20170629213149540628_TestsTestBasicPoweron/20170629213149540628_PowerOnTest/20170629213149540628_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170629 21:31:53.681" status="PASS" endtime="20170629 21:31:53.682"></status>
</kw>
<status starttime="20170629 21:31:53.681" status="PASS" endtime="20170629 21:31:53.682"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170629 21:31:53.683" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/23280/obmc-robot/logs/20170629213149540628_TestsTestBasicPoweron/20170629213149540628_PowerOnTest/20170629213149540628_BMC_general.txt"&gt;/tmp/fspcibld/23280/obmc-robot/logs/20170629213149540628_TestsTestBasicPoweron/20170629213149540628_PowerOnTest/20170629213149540628_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170629 21:31:53.683" status="PASS" endtime="20170629 21:31:53.683"></status>
</kw>
<status starttime="20170629 21:31:53.682" status="PASS" endtime="20170629 21:31:53.683"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170629 21:31:53.684" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/23280/obmc-robot/logs/20170629213149540628_TestsTestBasicPoweron/20170629213149540628_PowerOnTest/20170629213149540628_BMC_general.txt"&gt;/tmp/fspcibld/23280/obmc-robot/logs/20170629213149540628_TestsTestBasicPoweron/20170629213149540628_PowerOnTest/20170629213149540628_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170629 21:31:53.684" status="PASS" endtime="20170629 21:31:53.685"></status>
</kw>
<status starttime="20170629 21:31:53.684" status="PASS" endtime="20170629 21:31:53.685"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170629 21:31:53.686" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/23280/obmc-robot/logs/20170629213149540628_TestsTestBasicPoweron/20170629213149540628_PowerOnTest/20170629213149540628_BMC_general.txt"&gt;/tmp/fspcibld/23280/obmc-robot/logs/20170629213149540628_TestsTestBasicPoweron/20170629213149540628_PowerOnTest/20170629213149540628_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170629 21:31:53.685" status="PASS" endtime="20170629 21:31:53.686"></status>
</kw>
<status starttime="20170629 21:31:53.685" status="PASS" endtime="20170629 21:31:53.686"></status>
</kw>
<status starttime="20170629 21:31:53.680" status="PASS" endtime="20170629 21:31:53.687"></status>
</kw>
<status starttime="20170629 21:31:53.680" status="PASS" endtime="20170629 21:31:53.687"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170629 21:31:53.687">Executing command '/usr/sbin/obmcutil  state'.</msg>
<msg level="INFO" timestamp="20170629 21:31:55.313">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20170629 21:31:55.313">${stdout} = CurrentBMCState:    xyz.openbmc_project.State.BMC.BMCState.Ready
CurrentPowerState:  xyz.openbmc_project.State.Chassis.PowerState.On
CurrentHostState:   xyz.openbmc_project.State.Host.HostState.Runnin...</msg>
<msg level="INFO" timestamp="20170629 21:31:55.313">${stderr} = </msg>
<status starttime="20170629 21:31:53.687" status="PASS" endtime="20170629 21:31:55.313"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170629 21:31:55.319" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/23280/obmc-robot/logs/20170629213149540628_TestsTestBasicPoweron/20170629213149540628_PowerOnTest/20170629213149540628_BMC_general.txt"&gt;/tmp/fspcibld/23280/obmc-robot/logs/20170629213149540628_TestsTestBasicPoweron/20170629213149540628_PowerOnTest/20170629213149540628_BMC_general.txt&lt;/a&gt;'.</msg>
<status starttime="20170629 21:31:55.319" status="PASS" endtime="20170629 21:31:55.319"></status>
</kw>
<status starttime="20170629 21:31:55.318" status="PASS" endtime="20170629 21:31:55.319"></status>
</kw>
<status starttime="20170629 21:31:55.314" status="PASS" endtime="20170629 21:31:55.320"></status>
</kw>
<status starttime="20170629 21:31:53.679" status="PASS" endtime="20170629 21:31:55.320"></status>
</kw>
<status starttime="20170629 21:31:53.679" status="PASS" endtime="20170629 21:31:55.320"></status>
</kw>
<status starttime="20170629 21:31:53.679" status="PASS" endtime="20170629 21:31:55.320"></status>
</kw>
<status starttime="20170629 21:31:53.677" status="PASS" endtime="20170629 21:31:55.320"></status>
</kw>
<status starttime="20170629 21:31:53.677" status="PASS" endtime="20170629 21:31:55.320"></status>
</kw>
<status starttime="20170629 21:31:53.211" status="PASS" endtime="20170629 21:31:55.320"></status>
</kw>
<status starttime="20170629 21:31:51.415" status="PASS" endtime="20170629 21:31:55.320"></status>
</kw>
<status starttime="20170629 21:31:51.391" status="PASS" endtime="20170629 21:31:55.320"></status>
</kw>
<status starttime="20170629 21:31:51.389" status="PASS" endtime="20170629 21:31:55.320"></status>
</kw>
<status starttime="20170629 21:31:51.388" status="PASS" endtime="20170629 21:31:55.320"></status>
</kw>
<kw type="foritem" name="${method} = ('Get Request FFDC', 'BMC FFDC Get Requests')">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status starttime="20170629 21:31:55.322" status="PASS" endtime="20170629 21:31:55.322"></status>
</kw>
<msg level="INFO" timestamp="20170629 21:31:55.322">${status} = PASS</msg>
<msg level="INFO" timestamp="20170629 21:31:55.322">${ret_values} = None</msg>
<status starttime="20170629 21:31:55.321" status="PASS" endtime="20170629 21:31:55.322"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status starttime="20170629 21:31:55.323" status="PASS" endtime="20170629 21:31:55.323"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="BMC FFDC Get Requests" library="openbmc_ffdc_methods">
<doc>Get the command list and iterate</doc>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg level="FAIL" timestamp="20170629 21:31:55.348">Dictionary does not contain key 'host'.</msg>
<status starttime="20170629 21:31:55.348" status="FAIL" endtime="20170629 21:31:55.349"></status>
</kw>
<msg level="INFO" timestamp="20170629 21:31:55.349">${has_host} = False</msg>
<status starttime="20170629 21:31:55.348" status="PASS" endtime="20170629 21:31:55.349"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status starttime="20170629 21:31:55.349" status="PASS" endtime="20170629 21:31:55.350"></status>
</kw>
<status starttime="20170629 21:31:55.349" status="PASS" endtime="20170629 21:31:55.350"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<kw name="User input SSH and HTTPs Ports" library="connection_client">
<doc>Update the global SSH and HTTPs port variable for QEMU</doc>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${SSH_PORT}</arg>
</arguments>
<assign>
<var>${port_num}</var>
</assign>
<msg level="INFO" timestamp="20170629 21:31:55.351">${port_num} = 22</msg>
<status starttime="20170629 21:31:55.351" status="PASS" endtime="20170629 21:31:55.351"></status>
</kw>
<kw name="Replace Variables" library="BuiltIn">
<doc>Replaces variables in the given text with their current values.</doc>
<arguments>
<arg>${port_num}</arg>
</arguments>
<assign>
<var>${SSH_PORT}</var>
</assign>
<msg level="INFO" timestamp="20170629 21:31:55.352">${SSH_PORT} = 22</msg>
<status starttime="20170629 21:31:55.352" status="PASS" endtime="20170629 21:31:55.352"></status>
</kw>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${HTTPS_PORT}</arg>
</arguments>
<assign>
<var>${https_num}</var>
</assign>
<msg level="INFO" timestamp="20170629 21:31:55.353">${https_num} = 443</msg>
<status starttime="20170629 21:31:55.352" status="PASS" endtime="20170629 21:31:55.353"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${AUTH_URI}</arg>
<arg>https://${OPENBMC_HOST}:${https_num}</arg>
</arguments>
<msg level="INFO" timestamp="20170629 21:31:55.354">${AUTH_URI} = https://9.3.21.61:443</msg>
<status starttime="20170629 21:31:55.353" status="PASS" endtime="20170629 21:31:55.354"></status>
</kw>
<status starttime="20170629 21:31:55.351" status="PASS" endtime="20170629 21:31:55.354"></status>
</kw>
<status starttime="20170629 21:31:55.350" status="PASS" endtime="20170629 21:31:55.354"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg level="FAIL" timestamp="20170629 21:31:55.355">Dictionary does not contain key 'port'.</msg>
<status starttime="20170629 21:31:55.354" status="FAIL" endtime="20170629 21:31:55.355"></status>
</kw>
<msg level="INFO" timestamp="20170629 21:31:55.355">${has_port} = False</msg>
<status starttime="20170629 21:31:55.354" status="PASS" endtime="20170629 21:31:55.355"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keywords" library="BuiltIn">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
</arguments>
<status starttime="20170629 21:31:55.356" status="PASS" endtime="20170629 21:31:55.357"></status>
</kw>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status starttime="20170629 21:31:55.357" status="PASS" endtime="20170629 21:31:55.357"></status>
</kw>
<status starttime="20170629 21:31:55.356" status="PASS" endtime="20170629 21:31:55.357"></status>
</kw>
<status starttime="20170629 21:31:55.355" status="PASS" endtime="20170629 21:31:55.357"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg level="INFO" timestamp="20170629 21:31:55.358">Logging into '9.3.21.61:22' as 'root'.</msg>
<msg level="INFO" timestamp="20170629 21:31:57.006">Read output: root@witherspoon:~#</msg>
<status starttime="20170629 21:31:55.358" status="PASS" endtime="20170629 21:31:57.006"></status>
</kw>
<status starttime="20170629 21:31:55.347" status="PASS" endtime="20170629 21:31:57.007"></status>
</kw>
<kw name="Get Ffdc Get Request Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg level="INFO" timestamp="20170629 21:31:57.007">@{entries} = [ GET REQUESTS ]</msg>
<status starttime="20170629 21:31:57.007" status="PASS" endtime="20170629 21:31:57.007"></status>
</kw>
<kw type="for" name="${index} IN [ @{entries} ]">
<kw type="foritem" name="${index} = GET REQUESTS">
<kw name="Log FFDC Get Requests" library="openbmc_ffdc_methods">
<doc>Create file in current FFDC log directory.</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Get Request" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg level="INFO" timestamp="20170629 21:31:57.009">@{cmd_list} = [ ('BMC_record_log', '/org/openbmc/control/led/enumerate') | ('BMC_elog', '/xyz/openbmc_project/logging/entry/enumerate') | ('BMC_sensor_list', '/org/openbmc/sensors/enumerate') | ('BMC_inventory', '/...</msg>
<status starttime="20170629 21:31:57.008" status="PASS" endtime="20170629 21:31:57.009"></status>
</kw>
<kw type="for" name="${cmd} IN [ @{cmd_list} ]">
<kw type="foritem" name="${cmd} = ('BMC_record_log', '/org/openbmc/control/led/enumerate')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20170629 21:31:57.010">${logpath} = /tmp/fspcibld/23280/obmc-robot/logs/20170629213149540628_TestsTestBasicPoweron/20170629213149540628_PowerOnTest/20170629213149540628_BMC_record_log.txt</msg>
<status starttime="20170629 21:31:57.009" status="PASS" endtime="20170629 21:31:57.010"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170629 21:31:57.013">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170629 21:31:57.012" status="PASS" endtime="20170629 21:31:57.013"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170629 21:31:57.014">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170629 21:31:57.013" status="PASS" endtime="20170629 21:31:57.014"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170629 21:31:57.014">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170629 21:31:57.014" status="PASS" endtime="20170629 21:31:57.014"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170629 21:31:57.015">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170629 21:31:57.015" status="PASS" endtime="20170629 21:31:57.015"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170629 21:31:57.198">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170629 21:31:57.016" status="PASS" endtime="20170629 21:31:57.198"></status>
</kw>
<msg level="INFO" timestamp="20170629 21:31:57.199">${status} = PASS</msg>
<msg level="INFO" timestamp="20170629 21:31:57.199">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170629 21:31:57.015" status="PASS" endtime="20170629 21:31:57.199"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170629 21:31:57.199">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170629 21:31:57.199" status="PASS" endtime="20170629 21:31:57.199"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170629 21:31:57.200">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170629 21:31:57.200" status="PASS" endtime="20170629 21:31:57.200"></status>
</kw>
<status starttime="20170629 21:31:57.012" status="PASS" endtime="20170629 21:31:57.200"></status>
</kw>
<status starttime="20170629 21:31:57.011" status="PASS" endtime="20170629 21:31:57.200"></status>
</kw>
<status starttime="20170629 21:31:57.010" status="PASS" endtime="20170629 21:31:57.200"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170629 21:31:57.201">${base_uri} = /org/openbmc/control/led/enumerate</msg>
<status starttime="20170629 21:31:57.201" status="PASS" endtime="20170629 21:31:57.201"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status starttime="20170629 21:31:57.201" status="PASS" endtime="20170629 21:31:57.202"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170629 21:31:57.248">Get Request using : alias=openbmc, uri=/org/openbmc/control/led/enumerate, headers=None json=None</msg>
<msg level="INFO" timestamp="20170629 21:31:57.248">${ret} = &lt;Response [404]&gt;</msg>
<status starttime="20170629 21:31:57.202" status="PASS" endtime="20170629 21:31:57.248"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status starttime="20170629 21:31:57.248" status="PASS" endtime="20170629 21:31:57.249"></status>
</kw>
<msg level="INFO" timestamp="20170629 21:31:57.249">${resp} = &lt;Response [404]&gt;</msg>
<status starttime="20170629 21:31:57.010" status="PASS" endtime="20170629 21:31:57.249"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170629 21:31:57.250">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg level="FAIL" timestamp="20170629 21:31:57.250">404 != 200</msg>
<status starttime="20170629 21:31:57.250" status="FAIL" endtime="20170629 21:31:57.250"></status>
</kw>
<msg level="INFO" timestamp="20170629 21:31:57.250">${status} = False</msg>
<status starttime="20170629 21:31:57.249" status="PASS" endtime="20170629 21:31:57.250"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<kw name="Continue For Loop" library="BuiltIn">
<doc>Skips the current for loop iteration and continues from the next.</doc>
<msg level="INFO" timestamp="20170629 21:31:57.251">Continuing for loop from the next iteration.</msg>
<status starttime="20170629 21:31:57.251" status="PASS" endtime="20170629 21:31:57.251"></status>
</kw>
<status starttime="20170629 21:31:57.251" status="PASS" endtime="20170629 21:31:57.251"></status>
</kw>
<status starttime="20170629 21:31:57.009" status="PASS" endtime="20170629 21:31:57.251"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_elog', '/xyz/openbmc_project/logging/entry/enumerate')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20170629 21:31:57.252">${logpath} = /tmp/fspcibld/23280/obmc-robot/logs/20170629213149540628_TestsTestBasicPoweron/20170629213149540628_PowerOnTest/20170629213149540628_BMC_elog.txt</msg>
<status starttime="20170629 21:31:57.252" status="PASS" endtime="20170629 21:31:57.252"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170629 21:31:57.255">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170629 21:31:57.255" status="PASS" endtime="20170629 21:31:57.255"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170629 21:31:57.256">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170629 21:31:57.255" status="PASS" endtime="20170629 21:31:57.256"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170629 21:31:57.256">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170629 21:31:57.256" status="PASS" endtime="20170629 21:31:57.256"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170629 21:31:57.257">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170629 21:31:57.257" status="PASS" endtime="20170629 21:31:57.257"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170629 21:31:57.546">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170629 21:31:57.258" status="PASS" endtime="20170629 21:31:57.547"></status>
</kw>
<msg level="INFO" timestamp="20170629 21:31:57.547">${status} = PASS</msg>
<msg level="INFO" timestamp="20170629 21:31:57.547">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170629 21:31:57.257" status="PASS" endtime="20170629 21:31:57.547"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170629 21:31:57.547">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170629 21:31:57.547" status="PASS" endtime="20170629 21:31:57.548"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170629 21:31:57.548">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170629 21:31:57.548" status="PASS" endtime="20170629 21:31:57.548"></status>
</kw>
<status starttime="20170629 21:31:57.254" status="PASS" endtime="20170629 21:31:57.548"></status>
</kw>
<status starttime="20170629 21:31:57.254" status="PASS" endtime="20170629 21:31:57.549"></status>
</kw>
<status starttime="20170629 21:31:57.253" status="PASS" endtime="20170629 21:31:57.549"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170629 21:31:57.549">${base_uri} = /xyz/openbmc_project/logging/entry/enumerate</msg>
<status starttime="20170629 21:31:57.549" status="PASS" endtime="20170629 21:31:57.549"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status starttime="20170629 21:31:57.550" status="PASS" endtime="20170629 21:31:57.550"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170629 21:31:57.630">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry/enumerate, headers=None json=None</msg>
<msg level="INFO" timestamp="20170629 21:31:57.631">${ret} = &lt;Response [404]&gt;</msg>
<status starttime="20170629 21:31:57.550" status="PASS" endtime="20170629 21:31:57.631"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status starttime="20170629 21:31:57.631" status="PASS" endtime="20170629 21:31:57.631"></status>
</kw>
<msg level="INFO" timestamp="20170629 21:31:57.631">${resp} = &lt;Response [404]&gt;</msg>
<status starttime="20170629 21:31:57.252" status="PASS" endtime="20170629 21:31:57.632"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170629 21:31:57.633">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg level="FAIL" timestamp="20170629 21:31:57.633">404 != 200</msg>
<status starttime="20170629 21:31:57.632" status="FAIL" endtime="20170629 21:31:57.633"></status>
</kw>
<msg level="INFO" timestamp="20170629 21:31:57.633">${status} = False</msg>
<status starttime="20170629 21:31:57.632" status="PASS" endtime="20170629 21:31:57.633"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<kw name="Continue For Loop" library="BuiltIn">
<doc>Skips the current for loop iteration and continues from the next.</doc>
<msg level="INFO" timestamp="20170629 21:31:57.634">Continuing for loop from the next iteration.</msg>
<status starttime="20170629 21:31:57.634" status="PASS" endtime="20170629 21:31:57.634"></status>
</kw>
<status starttime="20170629 21:31:57.633" status="PASS" endtime="20170629 21:31:57.634"></status>
</kw>
<status starttime="20170629 21:31:57.251" status="PASS" endtime="20170629 21:31:57.634"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_sensor_list', '/org/openbmc/sensors/enumerate')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20170629 21:31:57.635">${logpath} = /tmp/fspcibld/23280/obmc-robot/logs/20170629213149540628_TestsTestBasicPoweron/20170629213149540628_PowerOnTest/20170629213149540628_BMC_sensor_list.txt</msg>
<status starttime="20170629 21:31:57.635" status="PASS" endtime="20170629 21:31:57.635"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170629 21:31:57.638">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170629 21:31:57.638" status="PASS" endtime="20170629 21:31:57.638"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170629 21:31:57.639">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170629 21:31:57.638" status="PASS" endtime="20170629 21:31:57.639"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170629 21:31:57.639">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170629 21:31:57.639" status="PASS" endtime="20170629 21:31:57.639"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170629 21:31:57.640">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170629 21:31:57.640" status="PASS" endtime="20170629 21:31:57.640"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170629 21:31:57.822">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170629 21:31:57.641" status="PASS" endtime="20170629 21:31:57.822"></status>
</kw>
<msg level="INFO" timestamp="20170629 21:31:57.823">${status} = PASS</msg>
<msg level="INFO" timestamp="20170629 21:31:57.823">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170629 21:31:57.640" status="PASS" endtime="20170629 21:31:57.823"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170629 21:31:57.823">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170629 21:31:57.823" status="PASS" endtime="20170629 21:31:57.823"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170629 21:31:57.824">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170629 21:31:57.824" status="PASS" endtime="20170629 21:31:57.824"></status>
</kw>
<status starttime="20170629 21:31:57.637" status="PASS" endtime="20170629 21:31:57.824"></status>
</kw>
<status starttime="20170629 21:31:57.637" status="PASS" endtime="20170629 21:31:57.824"></status>
</kw>
<status starttime="20170629 21:31:57.636" status="PASS" endtime="20170629 21:31:57.824"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170629 21:31:57.825">${base_uri} = /org/openbmc/sensors/enumerate</msg>
<status starttime="20170629 21:31:57.825" status="PASS" endtime="20170629 21:31:57.825"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status starttime="20170629 21:31:57.825" status="PASS" endtime="20170629 21:31:57.826"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170629 21:31:58.052">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/enumerate, headers=None json=None</msg>
<msg level="INFO" timestamp="20170629 21:31:58.052">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170629 21:31:57.826" status="PASS" endtime="20170629 21:31:58.052"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status starttime="20170629 21:31:58.053" status="PASS" endtime="20170629 21:31:58.053"></status>
</kw>
<msg level="INFO" timestamp="20170629 21:31:58.053">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170629 21:31:57.635" status="PASS" endtime="20170629 21:31:58.053"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170629 21:31:58.054">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170629 21:31:58.054" status="PASS" endtime="20170629 21:31:58.054"></status>
</kw>
<msg level="INFO" timestamp="20170629 21:31:58.055">${status} = True</msg>
<status starttime="20170629 21:31:58.054" status="PASS" endtime="20170629 21:31:58.055"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status starttime="20170629 21:31:58.055" status="PASS" endtime="20170629 21:31:58.055"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg level="INFO" timestamp="20170629 21:31:58.056">To JSON using : content={
  "data": {
    "/org/openbmc/sensors/host/BootCount": {
      "error": 0, 
      "units": "", 
      "value": 3
    }, 
    "/org/openbmc/sensors/host/BootProgress": {
      "error": 0, 
      "units": "", 
      "value": "FW Progress, Starting OS"
    }, 
    "/org/openbmc/sensors/host/OperatingSystemStatus": {
      "error": 0, 
      "units": "", 
      "value": "Off"
    }, 
    "/org/openbmc/sensors/host/PowerSupplyDerating": {
      "error": 0, 
      "units": "", 
      "value": 10
    }, 
    "/org/openbmc/sensors/host/PowerSupplyRedundancy": {
      "error": 0, 
      "units": "", 
      "value": "Disabled"
    }, 
    "/org/openbmc/sensors/host/TurboAllowed": {
      "error": 0, 
      "units": "", 
      "value": 0
    }, 
    "/org/openbmc/sensors/host/cpu0/OccStatus": {
      "error": 0, 
      "units": "", 
      "value": "Disabled"
    }, 
    "/org/openbmc/sensors/host/cpu1/OccStatus": {
      "error": 0, 
      "units": "", 
      "value": "Disabled"
    }, 
    "/org/openbmc/sensors/host/powercap": {
      "error": 0, 
      "units": "", 
      "value": 0
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170629 21:31:58.056">To JSON using : pretty_print=True </msg>
<msg level="INFO" timestamp="20170629 21:31:58.056">${jsondata} = {
    "data": {
        "/org/openbmc/sensors/host/BootCount": {
            "error": 0,
            "units": "",
            "value": 3
        },
        "/org/openbmc/sensors/host/BootProgress": {
...</msg>
<status starttime="20170629 21:31:58.055" status="PASS" endtime="20170629 21:31:58.056"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170629 21:31:58.058" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/23280/obmc-robot/logs/20170629213149540628_TestsTestBasicPoweron/20170629213149540628_PowerOnTest/20170629213149540628_BMC_sensor_list.txt"&gt;/tmp/fspcibld/23280/obmc-robot/logs/20170629213149540628_TestsTestBasicPoweron/20170629213149540628_PowerOnTest/20170629213149540628_BMC_sensor_list.txt&lt;/a&gt;'.</msg>
<status starttime="20170629 21:31:58.057" status="PASS" endtime="20170629 21:31:58.058"></status>
</kw>
<status starttime="20170629 21:31:58.056" status="PASS" endtime="20170629 21:31:58.058"></status>
</kw>
<status starttime="20170629 21:31:57.634" status="PASS" endtime="20170629 21:31:58.058"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_inventory', '/xyz/openbmc_project/inventory/enumerate')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20170629 21:31:58.059">${logpath} = /tmp/fspcibld/23280/obmc-robot/logs/20170629213149540628_TestsTestBasicPoweron/20170629213149540628_PowerOnTest/20170629213149540628_BMC_inventory.txt</msg>
<status starttime="20170629 21:31:58.058" status="PASS" endtime="20170629 21:31:58.059"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170629 21:31:58.061">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170629 21:31:58.061" status="PASS" endtime="20170629 21:31:58.062"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170629 21:31:58.062">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170629 21:31:58.062" status="PASS" endtime="20170629 21:31:58.062"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170629 21:31:58.063">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170629 21:31:58.063" status="PASS" endtime="20170629 21:31:58.063"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170629 21:31:58.064">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170629 21:31:58.064" status="PASS" endtime="20170629 21:31:58.064"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170629 21:31:58.244">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170629 21:31:58.065" status="PASS" endtime="20170629 21:31:58.244"></status>
</kw>
<msg level="INFO" timestamp="20170629 21:31:58.244">${status} = PASS</msg>
<msg level="INFO" timestamp="20170629 21:31:58.244">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170629 21:31:58.065" status="PASS" endtime="20170629 21:31:58.244"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170629 21:31:58.245">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170629 21:31:58.245" status="PASS" endtime="20170629 21:31:58.245"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170629 21:31:58.245">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170629 21:31:58.245" status="PASS" endtime="20170629 21:31:58.246"></status>
</kw>
<status starttime="20170629 21:31:58.060" status="PASS" endtime="20170629 21:31:58.246"></status>
</kw>
<status starttime="20170629 21:31:58.060" status="PASS" endtime="20170629 21:31:58.246"></status>
</kw>
<status starttime="20170629 21:31:58.059" status="PASS" endtime="20170629 21:31:58.246"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170629 21:31:58.247">${base_uri} = /xyz/openbmc_project/inventory/enumerate</msg>
<status starttime="20170629 21:31:58.246" status="PASS" endtime="20170629 21:31:58.247"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status starttime="20170629 21:31:58.247" status="PASS" endtime="20170629 21:31:58.247"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170629 21:32:00.195">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/inventory/enumerate, headers=None json=None</msg>
<msg level="INFO" timestamp="20170629 21:32:00.195">${ret} = &lt;Response [200]&gt;</msg>
<status starttime="20170629 21:31:58.247" status="PASS" endtime="20170629 21:32:00.195"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status starttime="20170629 21:32:00.195" status="PASS" endtime="20170629 21:32:00.196"></status>
</kw>
<msg level="INFO" timestamp="20170629 21:32:00.196">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170629 21:31:58.059" status="PASS" endtime="20170629 21:32:00.196"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170629 21:32:00.197">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170629 21:32:00.197" status="PASS" endtime="20170629 21:32:00.197"></status>
</kw>
<msg level="INFO" timestamp="20170629 21:32:00.197">${status} = True</msg>
<status starttime="20170629 21:32:00.197" status="PASS" endtime="20170629 21:32:00.198"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status starttime="20170629 21:32:00.198" status="PASS" endtime="20170629 21:32:00.198"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg level="INFO" timestamp="20170629 21:32:00.201">To JSON using : content={
  "data": {
    "/xyz/openbmc_project/inventory/system": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 0, 
      "Manufacturer": "", 
      "Model": "8335-GTC", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "", 
      "SerialNumber": "13186FA"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis": {
      "AirCooled": 1, 
      "WaterCooled": 1
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard": {
      "BuildDate": "", 
      "Manufacturer": "0000000000000000", 
      "Model": "", 
      "PartNumber": "00VK614         ", 
      "Present": 0, 
      "PrettyName": "SYSTEM PLANAR   ", 
      "SerialNumber": "YL30UF759004    "
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc": {
      "BuildDate": "", 
      "FieldReplaceable": 0, 
      "Manufacturer": "IBM", 
      "Model": "", 
      "PartNumber": "01DH118", 
      "Present": 1, 
      "PrettyName": "BMC PLANAR  ", 
      "SerialNumber": "000000000000"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc/ethernet": {
      "FieldReplaceable": 0, 
      "MACAddress": "00:00:00:00:00:00", 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "IBM", 
      "Model": "", 
      "PartNumber": "01HL983", 
      "Present": 1, 
      "PrettyName": "PROCESSOR MODULE", 
      "SerialNumber": "YA3933820456", 
      "Version": "10"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core0": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core1": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core10": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core11": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core12": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core13": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core14": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core15": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core16": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core17": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core18": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core19": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core2": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core20": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core21": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core22": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core23": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core3": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core4": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core5": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core6": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core7": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core8": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core9": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "IBM", 
      "Model": "", 
      "PartNumber": "01HL983", 
      "Present": 1, 
      "PrettyName": "PROCESSOR MODULE", 
      "SerialNumber": "YA3933817667", 
      "Version": "10"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core0": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core1": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core10": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core11": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core12": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core13": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core14": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core15": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core16": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core17": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core18": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core19": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core2": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core20": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core21": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core22": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core23": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core3": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core4": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core5": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core6": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core7": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core8": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core9": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm0": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "18ASF1G72PZ-2G6B1   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x16c7bbd9", 
      "Version": "0x31"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm1": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "18ASF1G72PZ-2G6B1   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x16c7b8a5", 
      "Version": "0x31"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm10": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm11": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm12": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm13": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm14": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "18ASF1G72PZ-2G6B1   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x16c7b974", 
      "Version": "0x31"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm15": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm2": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm3": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm4": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm5": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm6": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "18ASF1G72PZ-2G6B1   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x16c7bbab", 
      "Version": "0x31"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm7": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "18ASF1G72PZ-2G6B1   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x16c7e64d", 
      "Version": "0x31"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm8": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "18ASF1G72PZ-2G6B1   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x16c7bbea", 
      "Version": "0x31"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm9": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "18ASF1G72PZ-2G6B1   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x16c7bbcf", 
      "Version": "0x31"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/fan0": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": "fan0"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/fan1": {
      "Functional": 0, 
      "Present": 1, 
      "PrettyName": "fan1"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/fan2": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": "fan2"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/fan3": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": "fan3"
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170629 21:32:00.202">To JSON using : pretty_print=True </msg>
<msg level="INFO" timestamp="20170629 21:32:00.202">${jsondata} = {
    "data": {
        "/xyz/openbmc_project/inventory/system": {
            "BuildDate": "",
            "Cached": 0,
            "FieldReplaceable": 0,
            "Manufacturer": "",
            ...</msg>
<status starttime="20170629 21:32:00.198" status="PASS" endtime="20170629 21:32:00.202"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170629 21:32:00.204" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/23280/obmc-robot/logs/20170629213149540628_TestsTestBasicPoweron/20170629213149540628_PowerOnTest/20170629213149540628_BMC_inventory.txt"&gt;/tmp/fspcibld/23280/obmc-robot/logs/20170629213149540628_TestsTestBasicPoweron/20170629213149540628_PowerOnTest/20170629213149540628_BMC_inventory.txt&lt;/a&gt;'.</msg>
<status starttime="20170629 21:32:00.203" status="PASS" endtime="20170629 21:32:00.204"></status>
</kw>
<status starttime="20170629 21:32:00.202" status="PASS" endtime="20170629 21:32:00.204"></status>
</kw>
<status starttime="20170629 21:31:58.058" status="PASS" endtime="20170629 21:32:00.204"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_led', '/org/openbmc/records/events/enumerate')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20170629 21:32:00.205">${logpath} = /tmp/fspcibld/23280/obmc-robot/logs/20170629213149540628_TestsTestBasicPoweron/20170629213149540628_PowerOnTest/20170629213149540628_BMC_led.txt</msg>
<status starttime="20170629 21:32:00.204" status="PASS" endtime="20170629 21:32:00.205"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170629 21:32:00.208">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170629 21:32:00.208" status="PASS" endtime="20170629 21:32:00.209"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170629 21:32:00.209">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170629 21:32:00.209" status="PASS" endtime="20170629 21:32:00.209"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170629 21:32:00.211">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170629 21:32:00.210" status="PASS" endtime="20170629 21:32:00.211"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170629 21:32:00.211">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170629 21:32:00.211" status="PASS" endtime="20170629 21:32:00.211"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170629 21:32:00.397">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170629 21:32:00.212" status="PASS" endtime="20170629 21:32:00.397"></status>
</kw>
<msg level="INFO" timestamp="20170629 21:32:00.397">${status} = PASS</msg>
<msg level="INFO" timestamp="20170629 21:32:00.397">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170629 21:32:00.212" status="PASS" endtime="20170629 21:32:00.397"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170629 21:32:00.398">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170629 21:32:00.398" status="PASS" endtime="20170629 21:32:00.398"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170629 21:32:00.399">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170629 21:32:00.398" status="PASS" endtime="20170629 21:32:00.399"></status>
</kw>
<status starttime="20170629 21:32:00.207" status="PASS" endtime="20170629 21:32:00.399"></status>
</kw>
<status starttime="20170629 21:32:00.206" status="PASS" endtime="20170629 21:32:00.399"></status>
</kw>
<status starttime="20170629 21:32:00.205" status="PASS" endtime="20170629 21:32:00.399"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170629 21:32:00.400">${base_uri} = /org/openbmc/records/events/enumerate</msg>
<status starttime="20170629 21:32:00.399" status="PASS" endtime="20170629 21:32:00.400"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status starttime="20170629 21:32:00.400" status="PASS" endtime="20170629 21:32:00.400"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170629 21:32:00.444">Get Request using : alias=openbmc, uri=/org/openbmc/records/events/enumerate, headers=None json=None</msg>
<msg level="INFO" timestamp="20170629 21:32:00.444">${ret} = &lt;Response [404]&gt;</msg>
<status starttime="20170629 21:32:00.401" status="PASS" endtime="20170629 21:32:00.444"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status starttime="20170629 21:32:00.445" status="PASS" endtime="20170629 21:32:00.445"></status>
</kw>
<msg level="INFO" timestamp="20170629 21:32:00.445">${resp} = &lt;Response [404]&gt;</msg>
<status starttime="20170629 21:32:00.205" status="PASS" endtime="20170629 21:32:00.445"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170629 21:32:00.446">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg level="FAIL" timestamp="20170629 21:32:00.447">404 != 200</msg>
<status starttime="20170629 21:32:00.446" status="FAIL" endtime="20170629 21:32:00.447"></status>
</kw>
<msg level="INFO" timestamp="20170629 21:32:00.447">${status} = False</msg>
<status starttime="20170629 21:32:00.446" status="PASS" endtime="20170629 21:32:00.447"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<kw name="Continue For Loop" library="BuiltIn">
<doc>Skips the current for loop iteration and continues from the next.</doc>
<msg level="INFO" timestamp="20170629 21:32:00.448">Continuing for loop from the next iteration.</msg>
<status starttime="20170629 21:32:00.447" status="PASS" endtime="20170629 21:32:00.448"></status>
</kw>
<status starttime="20170629 21:32:00.447" status="PASS" endtime="20170629 21:32:00.448"></status>
</kw>
<status starttime="20170629 21:32:00.204" status="PASS" endtime="20170629 21:32:00.448"></status>
</kw>
<status starttime="20170629 21:31:57.009" status="PASS" endtime="20170629 21:32:00.448"></status>
</kw>
<status starttime="20170629 21:31:57.008" status="PASS" endtime="20170629 21:32:00.448"></status>
</kw>
<status starttime="20170629 21:31:57.008" status="PASS" endtime="20170629 21:32:00.448"></status>
</kw>
<status starttime="20170629 21:31:57.007" status="PASS" endtime="20170629 21:32:00.448"></status>
</kw>
<status starttime="20170629 21:31:55.347" status="PASS" endtime="20170629 21:32:00.448"></status>
</kw>
<status starttime="20170629 21:31:55.323" status="PASS" endtime="20170629 21:32:00.448"></status>
</kw>
<status starttime="20170629 21:31:55.321" status="PASS" endtime="20170629 21:32:00.448"></status>
</kw>
<status starttime="20170629 21:31:55.320" status="PASS" endtime="20170629 21:32:00.449"></status>
</kw>
<kw type="foritem" name="${method} = ('OS FFDC', 'OS FFDC Files')">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status starttime="20170629 21:32:00.450" status="PASS" endtime="20170629 21:32:00.450"></status>
</kw>
<msg level="INFO" timestamp="20170629 21:32:00.450">${status} = PASS</msg>
<msg level="INFO" timestamp="20170629 21:32:00.450">${ret_values} = None</msg>
<status starttime="20170629 21:32:00.450" status="PASS" endtime="20170629 21:32:00.451"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status starttime="20170629 21:32:00.451" status="PASS" endtime="20170629 21:32:00.451"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="OS FFDC Files" library="openbmc_ffdc_methods">
<doc>Get the command list and iterate</doc>
<kw name="Return From Keyword If" library="BuiltIn">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${OS_HOST}' == '${EMPTY}'</arg>
<arg>No OS Host Provided</arg>
</arguments>
<msg level="INFO" timestamp="20170629 21:32:00.479">Returning from the enclosing user keyword.</msg>
<status starttime="20170629 21:32:00.479" status="PASS" endtime="20170629 21:32:00.479"></status>
</kw>
<status starttime="20170629 21:32:00.478" status="PASS" endtime="20170629 21:32:00.479"></status>
</kw>
<status starttime="20170629 21:32:00.451" status="PASS" endtime="20170629 21:32:00.479"></status>
</kw>
<status starttime="20170629 21:32:00.449" status="PASS" endtime="20170629 21:32:00.480"></status>
</kw>
<status starttime="20170629 21:32:00.449" status="PASS" endtime="20170629 21:32:00.480"></status>
</kw>
<kw type="foritem" name="${method} = ('SEL Log', 'Collect eSEL Log')">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status starttime="20170629 21:32:00.481" status="PASS" endtime="20170629 21:32:00.481"></status>
</kw>
<msg level="INFO" timestamp="20170629 21:32:00.482">${status} = PASS</msg>
<msg level="INFO" timestamp="20170629 21:32:00.482">${ret_values} = None</msg>
<status starttime="20170629 21:32:00.481" status="PASS" endtime="20170629 21:32:00.482"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status starttime="20170629 21:32:00.482" status="PASS" endtime="20170629 21:32:00.482"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="Collect eSEL Log" library="openbmc_ffdc_methods">
<doc>Collect eSEL log from logging entry and convert eSEL data</doc>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${BMC_LOGGING_ENTRY}/enumerate</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170629 21:32:00.512">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status starttime="20170629 21:32:00.512" status="PASS" endtime="20170629 21:32:00.512"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170629 21:32:00.513">${headers} = {u'Content-Type': u'application/json'}</msg>
<status starttime="20170629 21:32:00.513" status="PASS" endtime="20170629 21:32:00.513"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170629 21:32:00.513">@{credentials} = [ root | 0penBmc ]</msg>
<status starttime="20170629 21:32:00.513" status="PASS" endtime="20170629 21:32:00.514"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170629 21:32:00.514">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status starttime="20170629 21:32:00.514" status="PASS" endtime="20170629 21:32:00.514"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170629 21:32:00.730">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status starttime="20170629 21:32:00.515" status="PASS" endtime="20170629 21:32:00.730"></status>
</kw>
<msg level="INFO" timestamp="20170629 21:32:00.730">${status} = PASS</msg>
<msg level="INFO" timestamp="20170629 21:32:00.730">${resp} = &lt;Response [200]&gt;</msg>
<status starttime="20170629 21:32:00.515" status="PASS" endtime="20170629 21:32:00.730"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170629 21:32:00.731">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170629 21:32:00.730" status="PASS" endtime="20170629 21:32:00.731"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170629 21:32:00.731">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status starttime="20170629 21:32:00.731" status="PASS" endtime="20170629 21:32:00.731"></status>
</kw>
<status starttime="20170629 21:32:00.511" status="PASS" endtime="20170629 21:32:00.732"></status>
</kw>
<status starttime="20170629 21:32:00.511" status="PASS" endtime="20170629 21:32:00.732"></status>
</kw>
<status starttime="20170629 21:32:00.510" status="PASS" endtime="20170629 21:32:00.732"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170629 21:32:00.732">${base_uri} = /xyz/openbmc_project/logging/entry//enumerate</msg>
<status starttime="20170629 21:32:00.732" status="PASS" endtime="20170629 21:32:00.732"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status starttime="20170629 21:32:00.733" status="PASS" endtime="20170629 21:32:00.733"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170629 21:32:00.780">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry//enumerate, headers=None json=None</msg>
<msg level="INFO" timestamp="20170629 21:32:00.780">${ret} = &lt;Response [404]&gt;</msg>
<status starttime="20170629 21:32:00.733" status="PASS" endtime="20170629 21:32:00.780"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status starttime="20170629 21:32:00.781" status="PASS" endtime="20170629 21:32:00.781"></status>
</kw>
<msg level="INFO" timestamp="20170629 21:32:00.781">${resp} = &lt;Response [404]&gt;</msg>
<status starttime="20170629 21:32:00.509" status="PASS" endtime="20170629 21:32:00.781"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170629 21:32:00.782">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg level="FAIL" timestamp="20170629 21:32:00.783">404 != 200</msg>
<status starttime="20170629 21:32:00.782" status="FAIL" endtime="20170629 21:32:00.783"></status>
</kw>
<msg level="INFO" timestamp="20170629 21:32:00.783">${status} = False</msg>
<status starttime="20170629 21:32:00.782" status="PASS" endtime="20170629 21:32:00.783"></status>
</kw>
<kw name="Return From Keyword If" library="BuiltIn">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
</arguments>
<msg level="INFO" timestamp="20170629 21:32:00.784">Returning from the enclosing user keyword.</msg>
<status starttime="20170629 21:32:00.783" status="PASS" endtime="20170629 21:32:00.784"></status>
</kw>
<status starttime="20170629 21:32:00.509" status="PASS" endtime="20170629 21:32:00.784"></status>
</kw>
<status starttime="20170629 21:32:00.482" status="PASS" endtime="20170629 21:32:00.784"></status>
</kw>
<status starttime="20170629 21:32:00.480" status="PASS" endtime="20170629 21:32:00.785"></status>
</kw>
<status starttime="20170629 21:32:00.480" status="PASS" endtime="20170629 21:32:00.785"></status>
</kw>
<kw type="foritem" name="${method} = ('Core Files', 'SCP Coredump Files')">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status starttime="20170629 21:32:00.787" status="PASS" endtime="20170629 21:32:00.787"></status>
</kw>
<msg level="INFO" timestamp="20170629 21:32:00.788">${status} = PASS</msg>
<msg level="INFO" timestamp="20170629 21:32:00.788">${ret_values} = None</msg>
<status starttime="20170629 21:32:00.787" status="PASS" endtime="20170629 21:32:00.788"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status starttime="20170629 21:32:00.788" status="PASS" endtime="20170629 21:32:00.788"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="SCP Coredump Files" library="openbmc_ffdc_methods">
<doc>Copy core dump file from BMC to local system.</doc>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg level="FAIL" timestamp="20170629 21:32:00.816">Dictionary does not contain key 'host'.</msg>
<status starttime="20170629 21:32:00.816" status="FAIL" endtime="20170629 21:32:00.816"></status>
</kw>
<msg level="INFO" timestamp="20170629 21:32:00.816">${has_host} = False</msg>
<status starttime="20170629 21:32:00.815" status="PASS" endtime="20170629 21:32:00.817"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status starttime="20170629 21:32:00.818" status="PASS" endtime="20170629 21:32:00.818"></status>
</kw>
<status starttime="20170629 21:32:00.817" status="PASS" endtime="20170629 21:32:00.818"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<kw name="User input SSH and HTTPs Ports" library="connection_client">
<doc>Update the global SSH and HTTPs port variable for QEMU</doc>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${SSH_PORT}</arg>
</arguments>
<assign>
<var>${port_num}</var>
</assign>
<msg level="INFO" timestamp="20170629 21:32:00.820">${port_num} = 22</msg>
<status starttime="20170629 21:32:00.820" status="PASS" endtime="20170629 21:32:00.820"></status>
</kw>
<kw name="Replace Variables" library="BuiltIn">
<doc>Replaces variables in the given text with their current values.</doc>
<arguments>
<arg>${port_num}</arg>
</arguments>
<assign>
<var>${SSH_PORT}</var>
</assign>
<msg level="INFO" timestamp="20170629 21:32:00.821">${SSH_PORT} = 22</msg>
<status starttime="20170629 21:32:00.821" status="PASS" endtime="20170629 21:32:00.821"></status>
</kw>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${HTTPS_PORT}</arg>
</arguments>
<assign>
<var>${https_num}</var>
</assign>
<msg level="INFO" timestamp="20170629 21:32:00.822">${https_num} = 443</msg>
<status starttime="20170629 21:32:00.821" status="PASS" endtime="20170629 21:32:00.822"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${AUTH_URI}</arg>
<arg>https://${OPENBMC_HOST}:${https_num}</arg>
</arguments>
<msg level="INFO" timestamp="20170629 21:32:00.823">${AUTH_URI} = https://9.3.21.61:443</msg>
<status starttime="20170629 21:32:00.822" status="PASS" endtime="20170629 21:32:00.823"></status>
</kw>
<status starttime="20170629 21:32:00.819" status="PASS" endtime="20170629 21:32:00.823"></status>
</kw>
<status starttime="20170629 21:32:00.818" status="PASS" endtime="20170629 21:32:00.823"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg level="FAIL" timestamp="20170629 21:32:00.825">Dictionary does not contain key 'port'.</msg>
<status starttime="20170629 21:32:00.824" status="FAIL" endtime="20170629 21:32:00.825"></status>
</kw>
<msg level="INFO" timestamp="20170629 21:32:00.825">${has_port} = False</msg>
<status starttime="20170629 21:32:00.824" status="PASS" endtime="20170629 21:32:00.825"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keywords" library="BuiltIn">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
</arguments>
<status starttime="20170629 21:32:00.827" status="PASS" endtime="20170629 21:32:00.827"></status>
</kw>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status starttime="20170629 21:32:00.828" status="PASS" endtime="20170629 21:32:00.828"></status>
</kw>
<status starttime="20170629 21:32:00.826" status="PASS" endtime="20170629 21:32:00.828"></status>
</kw>
<status starttime="20170629 21:32:00.825" status="PASS" endtime="20170629 21:32:00.828"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg level="INFO" timestamp="20170629 21:32:00.829">Logging into '9.3.21.61:22' as 'root'.</msg>
<msg level="INFO" timestamp="20170629 21:32:02.539">Read output: root@witherspoon:~#</msg>
<status starttime="20170629 21:32:00.828" status="PASS" endtime="20170629 21:32:02.539"></status>
</kw>
<status starttime="20170629 21:32:00.815" status="PASS" endtime="20170629 21:32:02.539"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>ls /tmp/core_*</arg>
</arguments>
<assign>
<var>${core_files}</var>
</assign>
<msg level="INFO" timestamp="20170629 21:32:02.540">Executing command 'ls /tmp/core_*'.</msg>
<msg level="INFO" timestamp="20170629 21:32:02.619">Command exited with return code 1.</msg>
<msg level="INFO" timestamp="20170629 21:32:02.619">${core_files} = </msg>
<status starttime="20170629 21:32:02.540" status="PASS" endtime="20170629 21:32:02.619"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${core_files}</arg>
</arguments>
<assign>
<var>@{core_list}</var>
</assign>
<msg level="INFO" timestamp="20170629 21:32:02.620">@{core_list} = [ ]</msg>
<status starttime="20170629 21:32:02.620" status="PASS" endtime="20170629 21:32:02.620"></status>
</kw>
<kw name="Open Connection for SCP" library="connection_client">
<kw name="Import Library" library="BuiltIn">
<doc>Imports a library with the given name and optional arguments.</doc>
<arguments>
<arg>SCPLibrary</arg>
<arg>WITH NAME</arg>
<arg>scp</arg>
</arguments>
<status starttime="20170629 21:32:02.621" status="PASS" endtime="20170629 21:32:02.627"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' == '${EMPTY}'</arg>
<arg>scp.Open connection</arg>
<arg>${OPENBMC_HOST}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>scp.Open connection</arg>
<arg>${OPENBMC_HOST}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>scp.Open connection</arg>
<arg>${OPENBMC_HOST}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
</arguments>
<kw name="Open Connection" library="scp">
<doc>Opens a new SCP connection to the given host.</doc>
<arguments>
<arg>${OPENBMC_HOST}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
</arguments>
<status starttime="20170629 21:32:02.629" status="PASS" endtime="20170629 21:32:03.307"></status>
</kw>
<status starttime="20170629 21:32:02.629" status="PASS" endtime="20170629 21:32:03.307"></status>
</kw>
<status starttime="20170629 21:32:02.628" status="PASS" endtime="20170629 21:32:03.308"></status>
</kw>
<status starttime="20170629 21:32:02.620" status="PASS" endtime="20170629 21:32:03.308"></status>
</kw>
<kw type="for" name="${index} IN [ @{core_list} ]">
<status starttime="20170629 21:32:03.308" status="PASS" endtime="20170629 21:32:03.308"></status>
</kw>
<status starttime="20170629 21:32:00.814" status="PASS" endtime="20170629 21:32:03.308"></status>
</kw>
<status starttime="20170629 21:32:00.788" status="PASS" endtime="20170629 21:32:03.308"></status>
</kw>
<status starttime="20170629 21:32:00.786" status="PASS" endtime="20170629 21:32:03.308"></status>
</kw>
<status starttime="20170629 21:32:00.785" status="PASS" endtime="20170629 21:32:03.308"></status>
</kw>
<kw type="foritem" name="${method} = ('BMC Specific Files', 'BMC FFDC Files')">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status starttime="20170629 21:32:03.310" status="PASS" endtime="20170629 21:32:03.311"></status>
</kw>
<msg level="INFO" timestamp="20170629 21:32:03.311">${status} = PASS</msg>
<msg level="INFO" timestamp="20170629 21:32:03.311">${ret_values} = None</msg>
<status starttime="20170629 21:32:03.310" status="PASS" endtime="20170629 21:32:03.311"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status starttime="20170629 21:32:03.311" status="PASS" endtime="20170629 21:32:03.311"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="BMC FFDC Files" library="openbmc_ffdc_methods">
<doc>Get the command list and iterate</doc>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg level="FAIL" timestamp="20170629 21:32:03.340">Dictionary does not contain key 'host'.</msg>
<status starttime="20170629 21:32:03.340" status="FAIL" endtime="20170629 21:32:03.340"></status>
</kw>
<msg level="INFO" timestamp="20170629 21:32:03.340">${has_host} = False</msg>
<status starttime="20170629 21:32:03.339" status="PASS" endtime="20170629 21:32:03.340"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status starttime="20170629 21:32:03.341" status="PASS" endtime="20170629 21:32:03.341"></status>
</kw>
<status starttime="20170629 21:32:03.341" status="PASS" endtime="20170629 21:32:03.342"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<kw name="User input SSH and HTTPs Ports" library="connection_client">
<doc>Update the global SSH and HTTPs port variable for QEMU</doc>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${SSH_PORT}</arg>
</arguments>
<assign>
<var>${port_num}</var>
</assign>
<msg level="INFO" timestamp="20170629 21:32:03.343">${port_num} = 22</msg>
<status starttime="20170629 21:32:03.343" status="PASS" endtime="20170629 21:32:03.343"></status>
</kw>
<kw name="Replace Variables" library="BuiltIn">
<doc>Replaces variables in the given text with their current values.</doc>
<arguments>
<arg>${port_num}</arg>
</arguments>
<assign>
<var>${SSH_PORT}</var>
</assign>
<msg level="INFO" timestamp="20170629 21:32:03.344">${SSH_PORT} = 22</msg>
<status starttime="20170629 21:32:03.343" status="PASS" endtime="20170629 21:32:03.344"></status>
</kw>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${HTTPS_PORT}</arg>
</arguments>
<assign>
<var>${https_num}</var>
</assign>
<msg level="INFO" timestamp="20170629 21:32:03.344">${https_num} = 443</msg>
<status starttime="20170629 21:32:03.344" status="PASS" endtime="20170629 21:32:03.344"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${AUTH_URI}</arg>
<arg>https://${OPENBMC_HOST}:${https_num}</arg>
</arguments>
<msg level="INFO" timestamp="20170629 21:32:03.345">${AUTH_URI} = https://9.3.21.61:443</msg>
<status starttime="20170629 21:32:03.345" status="PASS" endtime="20170629 21:32:03.345"></status>
</kw>
<status starttime="20170629 21:32:03.342" status="PASS" endtime="20170629 21:32:03.345"></status>
</kw>
<status starttime="20170629 21:32:03.342" status="PASS" endtime="20170629 21:32:03.345"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg level="FAIL" timestamp="20170629 21:32:03.346">Dictionary does not contain key 'port'.</msg>
<status starttime="20170629 21:32:03.346" status="FAIL" endtime="20170629 21:32:03.346"></status>
</kw>
<msg level="INFO" timestamp="20170629 21:32:03.347">${has_port} = False</msg>
<status starttime="20170629 21:32:03.346" status="PASS" endtime="20170629 21:32:03.347"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keywords" library="BuiltIn">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
</arguments>
<status starttime="20170629 21:32:03.348" status="PASS" endtime="20170629 21:32:03.348"></status>
</kw>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status starttime="20170629 21:32:03.349" status="PASS" endtime="20170629 21:32:03.349"></status>
</kw>
<status starttime="20170629 21:32:03.348" status="PASS" endtime="20170629 21:32:03.349"></status>
</kw>
<status starttime="20170629 21:32:03.347" status="PASS" endtime="20170629 21:32:03.349"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg level="INFO" timestamp="20170629 21:32:03.350">Logging into '9.3.21.61:22' as 'root'.</msg>
<msg level="INFO" timestamp="20170629 21:32:05.144">Read output: root@witherspoon:~#</msg>
<status starttime="20170629 21:32:03.350" status="PASS" endtime="20170629 21:32:05.145"></status>
</kw>
<status starttime="20170629 21:32:03.339" status="PASS" endtime="20170629 21:32:05.146"></status>
</kw>
<kw name="Get Ffdc File Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg level="INFO" timestamp="20170629 21:32:05.146">@{entries} = [ BMC FILES ]</msg>
<status starttime="20170629 21:32:05.146" status="PASS" endtime="20170629 21:32:05.146"></status>
</kw>
<kw type="for" name="${index} IN [ @{entries} ]">
<kw type="foritem" name="${index} = BMC FILES">
<kw name="Create File and Write Data" library="openbmc_ffdc_methods">
<doc>Create files to current FFDC log directory,</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Bmc File" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg level="INFO" timestamp="20170629 21:32:05.148">@{cmd_list} = [ ('BMC_meminfo', 'cat /proc/meminfo') | ('BMC_journalctl', 'journalctl --no-pager') | ('BMC_proc_list', 'top -n 1 -b') | ('BMC_dmesg', 'dmesg') | ('BMC_procinfo', 'cat /proc/cpuinfo') ]</msg>
<status starttime="20170629 21:32:05.147" status="PASS" endtime="20170629 21:32:05.148"></status>
</kw>
<kw type="for" name="${cmd} IN [ @{cmd_list} ]">
<kw type="foritem" name="${cmd} = ('BMC_meminfo', 'cat /proc/meminfo')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20170629 21:32:05.149">${logpath} = /tmp/fspcibld/23280/obmc-robot/logs/20170629213149540628_TestsTestBasicPoweron/20170629213149540628_PowerOnTest/20170629213149540628_BMC_meminfo.txt</msg>
<status starttime="20170629 21:32:05.148" status="PASS" endtime="20170629 21:32:05.149"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status starttime="20170629 21:32:05.150" status="PASS" endtime="20170629 21:32:05.150"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170629 21:32:05.151">Executing command 'cat /proc/meminfo'.</msg>
<msg level="INFO" timestamp="20170629 21:32:05.215">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20170629 21:32:05.215">${stdout} = MemTotal:         432336 kB
MemFree:          277624 kB
MemAvailable:     322040 kB
Buffers:           10920 kB
Cached:            50896 kB
SwapCached:            0 kB
Active:           102656 kB
Inac...</msg>
<msg level="INFO" timestamp="20170629 21:32:05.215">${stderr} = </msg>
<status starttime="20170629 21:32:05.150" status="PASS" endtime="20170629 21:32:05.215"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170629 21:32:05.222" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/23280/obmc-robot/logs/20170629213149540628_TestsTestBasicPoweron/20170629213149540628_PowerOnTest/20170629213149540628_BMC_meminfo.txt"&gt;/tmp/fspcibld/23280/obmc-robot/logs/20170629213149540628_TestsTestBasicPoweron/20170629213149540628_PowerOnTest/20170629213149540628_BMC_meminfo.txt&lt;/a&gt;'.</msg>
<status starttime="20170629 21:32:05.221" status="PASS" endtime="20170629 21:32:05.222"></status>
</kw>
<status starttime="20170629 21:32:05.221" status="PASS" endtime="20170629 21:32:05.222"></status>
</kw>
<status starttime="20170629 21:32:05.216" status="PASS" endtime="20170629 21:32:05.222"></status>
</kw>
<status starttime="20170629 21:32:05.149" status="PASS" endtime="20170629 21:32:05.222"></status>
</kw>
<status starttime="20170629 21:32:05.148" status="PASS" endtime="20170629 21:32:05.222"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_journalctl', 'journalctl --no-pager')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20170629 21:32:05.223">${logpath} = /tmp/fspcibld/23280/obmc-robot/logs/20170629213149540628_TestsTestBasicPoweron/20170629213149540628_PowerOnTest/20170629213149540628_BMC_journalctl.txt</msg>
<status starttime="20170629 21:32:05.223" status="PASS" endtime="20170629 21:32:05.223"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status starttime="20170629 21:32:05.225" status="PASS" endtime="20170629 21:32:05.225"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170629 21:32:05.226">Executing command 'journalctl --no-pager'.</msg>
<msg level="INFO" timestamp="20170629 21:32:06.730">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20170629 21:32:06.731">${stdout} = -- Logs begin at Thu 2017-06-29 21:23:41 UTC, end at Thu 2017-06-29 21:32:03 UTC. --
Jun 29 21:23:41 witherspoon kernel: Booting Linux on physical CPU 0x0
Jun 29 21:23:41 witherspoon kernel: Linux ver...</msg>
<msg level="INFO" timestamp="20170629 21:32:06.731">${stderr} = </msg>
<status starttime="20170629 21:32:05.225" status="PASS" endtime="20170629 21:32:06.731"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170629 21:32:06.741" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/23280/obmc-robot/logs/20170629213149540628_TestsTestBasicPoweron/20170629213149540628_PowerOnTest/20170629213149540628_BMC_journalctl.txt"&gt;/tmp/fspcibld/23280/obmc-robot/logs/20170629213149540628_TestsTestBasicPoweron/20170629213149540628_PowerOnTest/20170629213149540628_BMC_journalctl.txt&lt;/a&gt;'.</msg>
<status starttime="20170629 21:32:06.738" status="PASS" endtime="20170629 21:32:06.741"></status>
</kw>
<status starttime="20170629 21:32:06.737" status="PASS" endtime="20170629 21:32:06.741"></status>
</kw>
<status starttime="20170629 21:32:06.732" status="PASS" endtime="20170629 21:32:06.741"></status>
</kw>
<status starttime="20170629 21:32:05.223" status="PASS" endtime="20170629 21:32:06.741"></status>
</kw>
<status starttime="20170629 21:32:05.222" status="PASS" endtime="20170629 21:32:06.741"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_proc_list', 'top -n 1 -b')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20170629 21:32:06.742">${logpath} = /tmp/fspcibld/23280/obmc-robot/logs/20170629213149540628_TestsTestBasicPoweron/20170629213149540628_PowerOnTest/20170629213149540628_BMC_proc_list.txt</msg>
<status starttime="20170629 21:32:06.742" status="PASS" endtime="20170629 21:32:06.742"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status starttime="20170629 21:32:06.744" status="PASS" endtime="20170629 21:32:06.744"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170629 21:32:06.745">Executing command 'top -n 1 -b'.</msg>
<msg level="INFO" timestamp="20170629 21:32:07.078">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20170629 21:32:07.078">${stdout} = Mem: 154992K used, 277344K free, 14584K shrd, 10920K buff, 50900K cached
CPU:  25% usr   8% sys   0% nic  66% idle   0% io   0% irq   0% sirq
Load average: 0.32 1.04 0.79 1/151 1465
  PID  PPID USER  ...</msg>
<msg level="INFO" timestamp="20170629 21:32:07.078">${stderr} = </msg>
<status starttime="20170629 21:32:06.744" status="PASS" endtime="20170629 21:32:07.078"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170629 21:32:07.085" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/23280/obmc-robot/logs/20170629213149540628_TestsTestBasicPoweron/20170629213149540628_PowerOnTest/20170629213149540628_BMC_proc_list.txt"&gt;/tmp/fspcibld/23280/obmc-robot/logs/20170629213149540628_TestsTestBasicPoweron/20170629213149540628_PowerOnTest/20170629213149540628_BMC_proc_list.txt&lt;/a&gt;'.</msg>
<status starttime="20170629 21:32:07.084" status="PASS" endtime="20170629 21:32:07.085"></status>
</kw>
<status starttime="20170629 21:32:07.084" status="PASS" endtime="20170629 21:32:07.085"></status>
</kw>
<status starttime="20170629 21:32:07.079" status="PASS" endtime="20170629 21:32:07.085"></status>
</kw>
<status starttime="20170629 21:32:06.743" status="PASS" endtime="20170629 21:32:07.085"></status>
</kw>
<status starttime="20170629 21:32:06.741" status="PASS" endtime="20170629 21:32:07.085"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_dmesg', 'dmesg')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20170629 21:32:07.086">${logpath} = /tmp/fspcibld/23280/obmc-robot/logs/20170629213149540628_TestsTestBasicPoweron/20170629213149540628_PowerOnTest/20170629213149540628_BMC_dmesg.txt</msg>
<status starttime="20170629 21:32:07.086" status="PASS" endtime="20170629 21:32:07.086"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status starttime="20170629 21:32:07.088" status="PASS" endtime="20170629 21:32:07.088"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170629 21:32:07.089">Executing command 'dmesg'.</msg>
<msg level="INFO" timestamp="20170629 21:32:07.216">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20170629 21:32:07.216">${stdout} = [    1.910000] squashfs: version 4.0 (2009/01/31) Phillip Lougher
[    1.910000] jffs2: version 2.2. (SUMMARY)  © 2001-2006 Red Hat, Inc.
[    1.910000] Block layer SCSI generic (bsg) driver version 0...</msg>
<msg level="INFO" timestamp="20170629 21:32:07.216">${stderr} = </msg>
<status starttime="20170629 21:32:07.088" status="PASS" endtime="20170629 21:32:07.216"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170629 21:32:07.223" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/23280/obmc-robot/logs/20170629213149540628_TestsTestBasicPoweron/20170629213149540628_PowerOnTest/20170629213149540628_BMC_dmesg.txt"&gt;/tmp/fspcibld/23280/obmc-robot/logs/20170629213149540628_TestsTestBasicPoweron/20170629213149540628_PowerOnTest/20170629213149540628_BMC_dmesg.txt&lt;/a&gt;'.</msg>
<status starttime="20170629 21:32:07.222" status="PASS" endtime="20170629 21:32:07.223"></status>
</kw>
<status starttime="20170629 21:32:07.221" status="PASS" endtime="20170629 21:32:07.223"></status>
</kw>
<status starttime="20170629 21:32:07.217" status="PASS" endtime="20170629 21:32:07.223"></status>
</kw>
<status starttime="20170629 21:32:07.086" status="PASS" endtime="20170629 21:32:07.223"></status>
</kw>
<status starttime="20170629 21:32:07.086" status="PASS" endtime="20170629 21:32:07.223"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_procinfo', 'cat /proc/cpuinfo')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20170629 21:32:07.224">${logpath} = /tmp/fspcibld/23280/obmc-robot/logs/20170629213149540628_TestsTestBasicPoweron/20170629213149540628_PowerOnTest/20170629213149540628_BMC_procinfo.txt</msg>
<status starttime="20170629 21:32:07.224" status="PASS" endtime="20170629 21:32:07.224"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status starttime="20170629 21:32:07.225" status="PASS" endtime="20170629 21:32:07.225"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170629 21:32:07.226">Executing command 'cat /proc/cpuinfo'.</msg>
<msg level="INFO" timestamp="20170629 21:32:07.358">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20170629 21:32:07.359">${stdout} = processor	: 0
model name	: ARMv6-compatible processor rev 7 (v6l)
BogoMIPS	: 789.70
Features	: half thumb fastmult edsp java tls 
CPU implementer	: 0x41
CPU architecture: 7
CPU variant	: 0x0
CPU part	...</msg>
<msg level="INFO" timestamp="20170629 21:32:07.359">${stderr} = </msg>
<status starttime="20170629 21:32:07.226" status="PASS" endtime="20170629 21:32:07.359"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg level="INFO" timestamp="20170629 21:32:07.365" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/23280/obmc-robot/logs/20170629213149540628_TestsTestBasicPoweron/20170629213149540628_PowerOnTest/20170629213149540628_BMC_procinfo.txt"&gt;/tmp/fspcibld/23280/obmc-robot/logs/20170629213149540628_TestsTestBasicPoweron/20170629213149540628_PowerOnTest/20170629213149540628_BMC_procinfo.txt&lt;/a&gt;'.</msg>
<status starttime="20170629 21:32:07.365" status="PASS" endtime="20170629 21:32:07.365"></status>
</kw>
<status starttime="20170629 21:32:07.364" status="PASS" endtime="20170629 21:32:07.365"></status>
</kw>
<status starttime="20170629 21:32:07.359" status="PASS" endtime="20170629 21:32:07.365"></status>
</kw>
<status starttime="20170629 21:32:07.224" status="PASS" endtime="20170629 21:32:07.365"></status>
</kw>
<status starttime="20170629 21:32:07.223" status="PASS" endtime="20170629 21:32:07.365"></status>
</kw>
<status starttime="20170629 21:32:05.148" status="PASS" endtime="20170629 21:32:07.366"></status>
</kw>
<status starttime="20170629 21:32:05.147" status="PASS" endtime="20170629 21:32:07.366"></status>
</kw>
<status starttime="20170629 21:32:05.147" status="PASS" endtime="20170629 21:32:07.366"></status>
</kw>
<status starttime="20170629 21:32:05.146" status="PASS" endtime="20170629 21:32:07.366"></status>
</kw>
<status starttime="20170629 21:32:03.338" status="PASS" endtime="20170629 21:32:07.366"></status>
</kw>
<status starttime="20170629 21:32:03.312" status="PASS" endtime="20170629 21:32:07.366"></status>
</kw>
<status starttime="20170629 21:32:03.309" status="PASS" endtime="20170629 21:32:07.366"></status>
</kw>
<status starttime="20170629 21:32:03.309" status="PASS" endtime="20170629 21:32:07.366"></status>
</kw>
<status starttime="20170629 21:31:51.388" status="PASS" endtime="20170629 21:32:07.366"></status>
</kw>
<status starttime="20170629 21:31:51.386" status="PASS" endtime="20170629 21:32:07.366"></status>
</kw>
<status starttime="20170629 21:31:51.386" status="PASS" endtime="20170629 21:32:07.366"></status>
</kw>
<status starttime="20170629 21:31:51.386" status="PASS" endtime="20170629 21:32:07.366"></status>
</kw>
<kw name="Close All Connections" library="SSHLibrary">
<doc>Closes all open connections.</doc>
<status starttime="20170629 21:32:07.367" status="PASS" endtime="20170629 21:32:07.510"></status>
</kw>
<status starttime="20170629 21:31:51.385" status="PASS" endtime="20170629 21:32:07.510"></status>
</kw>
<status starttime="20170629 21:31:46.490" status="PASS" endtime="20170629 21:32:07.510"></status>
</kw>
<status starttime="20170629 21:31:46.490" status="PASS" endtime="20170629 21:32:07.510"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}'=='True'</arg>
<arg>Recover Quiesced Host</arg>
</arguments>
<status starttime="20170629 21:32:07.511" status="PASS" endtime="20170629 21:32:07.511"></status>
</kw>
<kw name="Log Test Case Status" library="openbmc_ffdc_methods">
<doc>Test case execution result history.</doc>
<kw name="Get Variable Value" library="BuiltIn">
<doc>Returns variable value or ``default`` if the variable does not exist.</doc>
<arguments>
<arg>${FFDC_DIR_PATH_STYLE}</arg>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${FFDC_DIR_PATH_STYLE}</var>
</assign>
<msg level="INFO" timestamp="20170629 21:32:07.520">${FFDC_DIR_PATH_STYLE} = </msg>
<status starttime="20170629 21:32:07.512" status="PASS" endtime="20170629 21:32:07.520"></status>
</kw>
<kw name="Get Variable Value" library="BuiltIn">
<doc>Returns variable value or ``default`` if the variable does not exist.</doc>
<arguments>
<arg>${FFDC_DIR_PATH}</arg>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${FFDC_DIR_PATH}</var>
</assign>
<msg level="INFO" timestamp="20170629 21:32:07.521">${FFDC_DIR_PATH} = /tmp/fspcibld/23280/obmc-robot/logs/20170629213149540628_TestsTestBasicPoweron/20170629213149540628_PowerOnTest/</msg>
<status starttime="20170629 21:32:07.521" status="PASS" endtime="20170629 21:32:07.521"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${FFDC_DIR_PATH}' == '${EMPTY}'</arg>
<arg>Set FFDC Defaults</arg>
</arguments>
<status starttime="20170629 21:32:07.521" status="PASS" endtime="20170629 21:32:07.521"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${FFDC_DIR_PATH_STYLE}' == '${1}'</arg>
<arg>Run Keywords</arg>
<arg>Set Global Variable</arg>
<arg>${FFDC_LOG_PATH}</arg>
<arg>${FFDC_DIR_PATH}</arg>
<arg>AND</arg>
<arg>Set Global Variable</arg>
<arg>${TEST_HISTORY}</arg>
<arg>${FFDC_DIR_PATH}test_history.txt</arg>
</arguments>
<status starttime="20170629 21:32:07.522" status="PASS" endtime="20170629 21:32:07.522"></status>
</kw>
<kw name="Create Directory" library="OperatingSystem">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>${FFDC_LOG_PATH}</arg>
</arguments>
<msg level="INFO" timestamp="20170629 21:32:07.523" html="yes">Directory '&lt;a href="file:///tmp/fspcibld/23280/obmc-robot/logs"&gt;/tmp/fspcibld/23280/obmc-robot/logs&lt;/a&gt;' already exists.</msg>
<status starttime="20170629 21:32:07.522" status="PASS" endtime="20170629 21:32:07.523"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>OperatingSystem.File Should Exist</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<assign>
<var>${exist}</var>
</assign>
<kw name="File Should Exist" library="OperatingSystem">
<doc>Fails unless the given ``path`` points to an existing file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
</arguments>
<msg level="INFO" timestamp="20170629 21:32:07.524" html="yes">File '&lt;a href="file:///tmp/fspcibld/23280/obmc-robot/logs/test_history.txt"&gt;/tmp/fspcibld/23280/obmc-robot/logs/test_history.txt&lt;/a&gt;' exists.</msg>
<status starttime="20170629 21:32:07.523" status="PASS" endtime="20170629 21:32:07.524"></status>
</kw>
<msg level="INFO" timestamp="20170629 21:32:07.524">${exist} = True</msg>
<status starttime="20170629 21:32:07.523" status="PASS" endtime="20170629 21:32:07.524"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${exist}' == '${False}'</arg>
<arg>Create File</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<status starttime="20170629 21:32:07.524" status="PASS" endtime="20170629 21:32:07.524"></status>
</kw>
<kw name="Rpvars" library="gen_robot_print">
<arguments>
<arg>TEST_HISTORY</arg>
</arguments>
<status starttime="20170629 21:32:07.525" status="PASS" endtime="20170629 21:32:07.525"></status>
</kw>
<kw name="Get Current Time Stamp" library="openbmc_ffdc_utils">
<doc>Get the current time stamp data</doc>
<assign>
<var>${cur_time}</var>
</assign>
<kw name="Get Current Date" library="DateTime">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20170629 21:32:07.526">${cur_time} = 2017-06-29 21:32:07:525709</msg>
<status starttime="20170629 21:32:07.526" status="PASS" endtime="20170629 21:32:07.526"></status>
</kw>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20170629 21:32:07.526">${cur_time} = 20170629213207525709</msg>
<status starttime="20170629 21:32:07.526" status="PASS" endtime="20170629 21:32:07.526"></status>
</kw>
<msg level="INFO" timestamp="20170629 21:32:07.527">${cur_time} = 20170629213207525709</msg>
<status starttime="20170629 21:32:07.525" status="PASS" endtime="20170629 21:32:07.527"></status>
</kw>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
<arg>${cur_time}:${SUITE_NAME}:${TEST_NAME}:${TEST_STATUS}${\n}</arg>
</arguments>
<msg level="INFO" timestamp="20170629 21:32:07.528" html="yes">Appended to file '&lt;a href="file:///tmp/fspcibld/23280/obmc-robot/logs/test_history.txt"&gt;/tmp/fspcibld/23280/obmc-robot/logs/test_history.txt&lt;/a&gt;'.</msg>
<status starttime="20170629 21:32:07.527" status="PASS" endtime="20170629 21:32:07.528"></status>
</kw>
<status starttime="20170629 21:32:07.512" status="PASS" endtime="20170629 21:32:07.528"></status>
</kw>
<status starttime="20170629 21:31:46.222" status="PASS" endtime="20170629 21:32:07.528"></status>
</kw>
<kw name="Stop SOL Console Logging" library="utils">
<doc>Stop system console logging and return log output.</doc>
<assign>
<var>${sol_log}</var>
</assign>
<kw name="Create OS Console File Path" library="utils">
<doc>Create OS console file path name and return it.</doc>
<arguments>
<arg>${log_file_path}</arg>
</arguments>
<assign>
<var>${log_file_path}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>/tmp/${OPENBMC_HOST}_os_console</arg>
</arguments>
<assign>
<var>${default_file_path}</var>
</assign>
<msg level="INFO" timestamp="20170629 21:32:07.530">${default_file_path} = /tmp/9.3.21.61_os_console</msg>
<status starttime="20170629 21:32:07.529" status="PASS" endtime="20170629 21:32:07.530"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${log_file_path}' == '${EMPTY}'</arg>
<arg>${default_file_path}</arg>
<arg>${log_file_path}</arg>
</arguments>
<assign>
<var>${log_file_path}</var>
</assign>
<msg level="INFO" timestamp="20170629 21:32:07.530">${log_file_path} = /tmp/9.3.21.61_os_console</msg>
<status starttime="20170629 21:32:07.530" status="PASS" endtime="20170629 21:32:07.530"></status>
</kw>
<msg level="INFO" timestamp="20170629 21:32:07.531">${log_file_path} = /tmp/9.3.21.61_os_console</msg>
<status starttime="20170629 21:32:07.529" status="PASS" endtime="20170629 21:32:07.531"></status>
</kw>
<kw name="Create OS Console Command String" library="utils">
<doc>Return a command string to start OS console logging.</doc>
<assign>
<var>${search_string}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>which ssh_pw 2&gt;&amp;1</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170629 21:32:07.531">${cmd_buf} = which ssh_pw 2&gt;&amp;1</msg>
<status starttime="20170629 21:32:07.531" status="PASS" endtime="20170629 21:32:07.531"></status>
</kw>
<kw name="Rdpissuing" library="gen_robot_print">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status starttime="20170629 21:32:07.532" status="PASS" endtime="20170629 21:32:07.532"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg level="INFO" timestamp="20170629 21:32:07.538">Running command 'which ssh_pw 2&gt;&amp;1'.</msg>
<msg level="INFO" timestamp="20170629 21:32:07.542">${rc} = 0</msg>
<msg level="INFO" timestamp="20170629 21:32:07.542">${output} = /tmp/fspcibld/23280/obmc-robot/.tox/witherspoon/bin/ssh_pw</msg>
<status starttime="20170629 21:32:07.532" status="PASS" endtime="20170629 21:32:07.542"></status>
</kw>
<kw name="Rdpvars" library="gen_robot_print">
<arguments>
<arg>rc</arg>
<arg>output</arg>
</arguments>
<status starttime="20170629 21:32:07.544" status="PASS" endtime="20170629 21:32:07.545"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${rc}</arg>
<arg>${0}</arg>
<arg>msg=${output}\n</arg>
</arguments>
<status starttime="20170629 21:32:07.546" status="PASS" endtime="20170629 21:32:07.546"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>ssh_pw ${OPENBMC_PASSWORD} -p 2200</arg>
<arg>-o "StrictHostKeyChecking no" ${OPENBMC_USERNAME}@${OPENBMC_HOST}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170629 21:32:07.548">${cmd_buf} = ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.3.21.61</msg>
<status starttime="20170629 21:32:07.547" status="PASS" endtime="20170629 21:32:07.548"></status>
</kw>
<msg level="INFO" timestamp="20170629 21:32:07.548">${search_string} = ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.3.21.61</msg>
<status starttime="20170629 21:32:07.531" status="PASS" endtime="20170629 21:32:07.548"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>echo $(ps -ef | egrep '${search_string}'</arg>
<arg>| egrep -v grep | cut -c10-14)</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170629 21:32:07.549">${cmd_buf} = echo $(ps -ef | egrep 'ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.3.21.61' | egrep -v grep | cut -c10-14)</msg>
<status starttime="20170629 21:32:07.549" status="PASS" endtime="20170629 21:32:07.549"></status>
</kw>
<kw name="Rdpissuing" library="gen_robot_print">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status starttime="20170629 21:32:07.549" status="PASS" endtime="20170629 21:32:07.550"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${os_con_pid}</var>
</assign>
<msg level="INFO" timestamp="20170629 21:32:07.553">Running command 'echo $(ps -ef | egrep 'ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.3.21.61' | egrep -v grep | cut -c10-14) 2&gt;&amp;1'.</msg>
<msg level="INFO" timestamp="20170629 21:32:07.571">${rc} = 0</msg>
<msg level="INFO" timestamp="20170629 21:32:07.571">${os_con_pid} = </msg>
<status starttime="20170629 21:32:07.550" status="PASS" endtime="20170629 21:32:07.571"></status>
</kw>
<kw name="Rdpvars" library="gen_robot_print">
<arguments>
<arg>os_con_pid</arg>
</arguments>
<status starttime="20170629 21:32:07.574" status="PASS" endtime="20170629 21:32:07.578"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>kill -9 ${os_con_pid}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170629 21:32:07.579">${cmd_buf} = kill -9 </msg>
<status starttime="20170629 21:32:07.578" status="PASS" endtime="20170629 21:32:07.579"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${os_con_pid}' != '${EMPTY}'</arg>
<arg>Rdpissuing</arg>
<arg>${cmd_buf}</arg>
</arguments>
<status starttime="20170629 21:32:07.579" status="PASS" endtime="20170629 21:32:07.580"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${os_con_pid}' != '${EMPTY}'</arg>
<arg>Run And Return Rc And Output</arg>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg level="INFO" timestamp="20170629 21:32:07.580">${rc} = None</msg>
<msg level="INFO" timestamp="20170629 21:32:07.580">${output} = None</msg>
<status starttime="20170629 21:32:07.580" status="PASS" endtime="20170629 21:32:07.581"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${os_con_pid}' != '${EMPTY}'</arg>
<arg>Rdpvars</arg>
<arg>rc</arg>
<arg>output</arg>
</arguments>
<status starttime="20170629 21:32:07.581" status="PASS" endtime="20170629 21:32:07.581"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${targ_file_path}' != '${EMPTY}'</arg>
<arg>Run Keyword And Ignore Error</arg>
<arg>Copy File</arg>
<arg>${log_file_path}</arg>
<arg>${targ_file_path}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Copy File</arg>
<arg>${log_file_path}</arg>
<arg>${targ_file_path}</arg>
</arguments>
<kw name="Copy File" library="OperatingSystem">
<doc>Copies the source file into the destination.</doc>
<arguments>
<arg>${log_file_path}</arg>
<arg>${targ_file_path}</arg>
</arguments>
<msg level="INFO" timestamp="20170629 21:32:07.585" html="yes">Copied file from '&lt;a href="file:///tmp/9.3.21.61_os_console"&gt;/tmp/9.3.21.61_os_console&lt;/a&gt;' to '&lt;a href="file:///tmp/fspcibld/23280/obmc-robot/logs/9.3.21.61_os_console"&gt;/tmp/fspcibld/23280/obmc-robot/logs/9.3.21.61_os_console&lt;/a&gt;'.</msg>
<status starttime="20170629 21:32:07.583" status="PASS" endtime="20170629 21:32:07.585"></status>
</kw>
<status starttime="20170629 21:32:07.582" status="PASS" endtime="20170629 21:32:07.586"></status>
</kw>
<status starttime="20170629 21:32:07.582" status="PASS" endtime="20170629 21:32:07.586"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${output}</var>
</assign>
<msg level="INFO" timestamp="20170629 21:32:07.586">${output} = </msg>
<status starttime="20170629 21:32:07.586" status="PASS" endtime="20170629 21:32:07.586"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${debug}^1</arg>
</arguments>
<assign>
<var>${loc_quiet}</var>
</assign>
<msg level="INFO" timestamp="20170629 21:32:07.587">${loc_quiet} = 1</msg>
<status starttime="20170629 21:32:07.587" status="PASS" endtime="20170629 21:32:07.587"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${return_data}' == '${1}'</arg>
<arg>Cmd Fnc</arg>
<arg>cat ${log_file_path}</arg>
<arg>quiet=${loc_quiet}</arg>
<arg>print_output=${0}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<kw name="Cmd Fnc" library="gen_cmd">
<doc>Run the given command in a shell and return the shell return code.</doc>
<arguments>
<arg>cat ${log_file_path}</arg>
<arg>quiet=${loc_quiet}</arg>
<arg>print_output=${0}</arg>
</arguments>
<status starttime="20170629 21:32:07.588" status="PASS" endtime="20170629 21:32:07.643"></status>
</kw>
<msg level="INFO" timestamp="20170629 21:32:07.651">${rc} = 0</msg>
<msg level="INFO" timestamp="20170629 21:32:07.652">${output} = spawn ssh -p 2200 -o StrictHostKeyChecking no root@9.3.21.61
Warning: Permanently added '[9.3.21.61]:2200' (RSA) to the list of known hosts.
root@9.3.21.61's password: 


--== Welcome to Hostboo...</msg>
<status starttime="20170629 21:32:07.587" status="PASS" endtime="20170629 21:32:07.653"></status>
</kw>
<msg level="INFO" timestamp="20170629 21:32:07.658">${sol_log} = spawn ssh -p 2200 -o StrictHostKeyChecking no root@9.3.21.61
Warning: Permanently added '[9.3.21.61]:2200' (RSA) to the list of known hosts.
root@9.3.21.61's password: 


--== Welcome to Hostboo...</msg>
<status starttime="20170629 21:32:07.528" status="PASS" endtime="20170629 21:32:07.658"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${sol_log}</arg>
</arguments>
<msg level="INFO" timestamp="20170629 21:32:07.666">spawn ssh -p 2200 -o StrictHostKeyChecking no root@9.3.21.61
Warning: Permanently added '[9.3.21.61]:2200' (RSA) to the list of known hosts.
root@9.3.21.61's password: 


--== Welcome to Hostboot hostboot-site_local-hostboot-hb0507a_1519.840-4189-g7299a25/hbicore.bin ==--

  3.86056|secure|Booting in non-secure mode.
  3.86058|secure|SecureROM invalid - skipping functionality
  7.04730|ISTEP  6. 5 - host_init_fsi
  7.12181|ISTEP  6. 6 - host_set_ipl_parms
  7.80056|ISTEP  6. 7 - host_discover_targets
 10.87377|HWAS|PRESENT&gt; DIMM[03]=C3C3000000000000
 10.87378|HWAS|PRESENT&gt; Proc[05]=C000000000000000
 10.91186|ISTEP  6. 8 - host_update_master_tpm
 10.91981|SECURE|Security Access Bit&gt; 0x0000000000000000
 10.91982|SECURE|Secure Mode Disable (via Jumper)&gt; 0xC000000000000000
 10.92001|ISTEP  6. 9 - host_gard
 10.97419|ISTEP  6.10 - host_revert_sbe_mcs_setup
 10.98902|ISTEP  6.11 - host_start_occ_xstop_handler
 10.98995|ISTEP  6.12 - host_voltage_config
 11.01532|ISTEP  7. 2 - mss_volt
 11.23375|ISTEP  7. 3 - mss_freq
 11.30631|ISTEP  7. 4 - mss_eff_config
 13.05588|ISTEP  7. 5 - mss_attr_update
 13.06432|ISTEP  8. 1 - host_slave_sbe_config
 13.10013|ISTEP  8. 2 - host_setup_sbe
 13.10651|ISTEP  8. 3 - host_cbs_start
 13.11453|ISTEP  8. 4 - proc_check_slave_sbe_seeprom_complete
 21.53209|ISTEP  8. 5 - host_attnlisten_proc
 21.53287|ISTEP  8. 6 - host_p9_fbc_eff_config
 21.54093|ISTEP  8. 7 - host_p9_eff_config_links
 21.55227|ISTEP  8. 8 - proc_attr_update
 21.55379|ISTEP  8. 9 - proc_chiplet_fabric_scominit
 21.60176|ISTEP  8.10 - proc_xbus_scominit
 24.57465|ISTEP  8.11 - proc_xbus_enable_ridi
 24.57900|ISTEP  9. 1 - fabric_erepair
 24.58874|ISTEP  9. 2 - fabric_io_dccal
 25.41764|ISTEP  9. 3 - fabric_pre_trainadv
 25.42190|ISTEP  9. 4 - fabric_io_run_training
 25.62412|ISTEP  9. 5 - fabric_post_trainadv
 25.62885|ISTEP  9. 6 - proc_smp_link_layer
 25.63375|ISTEP  9. 7 - proc_fab_iovalid
 25.65653|ISTEP  9. 8 - host_fbc_eff_config_aggregate
 25.66619|ISTEP 10. 1 - proc_build_smp
 25.95964|ISTEP 10. 2 - host_slave_sbe_update
 26.24432|ISTEP 10. 3 - host_set_voltages
 26.25447|ISTEP 10. 4 - proc_cen_ref_clk_enable
 26.25993|ISTEP 10. 5 - proc_enable_osclite
 26.26096|ISTEP 10. 6 - proc_chiplet_scominit
 26.28530|ISTEP 10. 7 - proc_abus_scominit
 26.28728|ISTEP 10. 8 - proc_obus_scominit
 26.36496|ISTEP 10. 9 - proc_npu_scominit
 26.38515|ISTEP 10.10 - proc_pcie_scominit
 26.42947|ISTEP 10.11 - proc_scomoverride_chiplets
 26.43119|ISTEP 10.12 - proc_chiplet_enable_ridi
 26.43820|ISTEP 10.13 - host_rng_bist
 26.44285|ISTEP 10.14 - host_update_redundant_tpm
 26.50149|ISTEP 11. 1 - host_prd_hwreconfig
 26.50574|ISTEP 12. 1 - mss_getecid
 26.51153|ISTEP 13. 1 - host_disable_memvolt
 26.53349|ISTEP 13. 2 - mem_pll_reset
 26.54820|ISTEP 13. 3 - mem_pll_initf
 26.56921|ISTEP 13. 4 - mem_pll_setup
 26.59354|ISTEP 13. 6 - mem_startclocks
 26.61045|ISTEP 13. 7 - host_enable_memvolt
 26.61266|ISTEP 13. 8 - mss_scominit
 26.92947|ISTEP 13. 9 - mss_ddr_phy_reset
 26.98742|ISTEP 13.10 - mss_draminit
 27.11685|ISTEP 13.11 - mss_draminit_training
 27.29753|ISTEP 13.12 - mss_draminit_trainadv
 27.30062|ISTEP 13.13 - mss_draminit_mc
 27.31937|ISTEP 14. 1 - mss_memdiag
 49.01138|ISTEP 14. 2 - mss_thermal_init
 49.02369|ISTEP 14. 3 - proc_pcie_config
 49.03841|ISTEP 14. 4 - mss_power_cleanup
 49.04283|ISTEP 14. 5 - proc_setup_bars
 49.07830|ISTEP 14. 6 - proc_htm_setup
 49.08734|ISTEP 14. 7 - proc_exit_cache_contained
 49.10648|ISTEP 15. 1 - host_build_stop_image
 86.18936|ISTEP 15. 2 - proc_set_pba_homer_bar
 86.19887|ISTEP 15. 3 - host_establish_ex_chiplet
 86.20804|ISTEP 15. 4 - host_start_stop_engine
 86.31274|ISTEP 16. 1 - host_activate_master
 87.36882|ISTEP 16. 2 - host_activate_slave_cores
 87.44957|ISTEP 16. 3 - host_secure_rng
 87.45868|ISTEP 16. 4 - mss_scrub
 87.47943|ISTEP 16. 5 - host_ipl_complete
 87.73212|ISTEP 16. 6 - host_load_io_ppe
 87.76665|ISTEP 18.11 - proc_tod_setup
 87.79477|ISTEP 18.12 - proc_tod_init
 87.79878|ISTEP 20. 1 - host_load_payload
 88.23943|ISTEP 20. 2 - host_load_hdat
 91.89513|ISTEP 21. 1 - host_runtime_setup
140.10179|htmgt|OCCs are now running in ACTIVE state
140.10388|ISTEP 21. 2 - host_verify_hdat
140.10457|ISTEP 21. 3 - host_start_payload
[  142.410506925,5] OPAL skiboot-5.6.0-158-ga1e0a047b2a0 starting...
[  142.410512907,7] initial console log level: memory 7, driver 5
[  142.410515701,6] CPU: P9 generation processor (max 4 threads/core)
[  142.410518400,7] CPU: Boot CPU PIR is 0x085c PVR is 0x004e0100
[  142.410521193,7] CPU: Initial max PIR set to 0x7fff
[  142.412093883,7] OPAL table: 0x300de240 .. 0x300de730, branch table: 0x30002000
[  142.412098675,7] Assigning physical memory map table for nimbus
[  142.412102305,7] Parsing HDAT...
[  142.412104134,5] SPIRA-S found.
[  142.412108218,6] BMC #0: HW version 3, SW version 2, chip DD1.0
[  142.412113176,6] SP Family is ibm,ast2500,openbmc
[  142.412122061,7] LPC: IOPATH chip id = 0
[  142.412123961,7] LPC: FW BAR       = f0000000
[  142.412126056,7] LPC: MEM BAR      = e0000000
[  142.412128151,7] LPC: IO BAR       = d0010000
[  142.412130212,7] LPC: Internal BAR = c0012000
[  142.412147654,7] LPC UART: base addr = 3f8 (3f8) size = 1 clk = 1843200, baud = 115200
[  142.412151540,7] LPC: BT [0, 0] sms_int: 0, bmc_int: 0
[  142.412781346,5] UART: Using UART at 0x60300d00103f8
[  142.413467591,3] I2C: HDAT device array has no version! Assuming v1
[  142.413832380,3] I2C: HDAT device array has no version! Assuming v1
[  142.414278507,5] P9 DD1.03 detected
[  142.414325891,5] CHIP: Chip ID 0000 type: P9N DD1.0
[  142.414373047,5] P9 DD1.03 detected
[  142.414400487,5] CHIP: Chip ID 0008 type: P9N DD1.0
[  142.414620697,5] SLW: Enabling: stop0_lite
[  142.414730706,5] PLAT: Using virtual UART
[  142.414875261,7] LPC: LPC: Routing irq 9, policy: 0 (r=1)
[  142.414877914,7] LPC: LPC: SerIRQ 9 using route 0 targetted at OPAL
[  142.415049323,5] PLAT: Detected Witherspoon platform
[  142.437242721,5] CPU: All 16 processors called in...
[    0.495463952,5] FLASH: Found system flash:  id:0
[    0.495551600,5] BT: Interface initialized, IO 0x00e4
[    0.495588336,7] LPC: LPC: Routing irq 10, policy: 0 (r=1)
[    0.495591040,7] LPC: LPC: SerIRQ 10 using route 1 targetted at OPAL
[    1.444563648,5] NVRAM: Size is 576 KB
[    2.258221312,5] STB: secure and trusted boot not supported
[    2.258302544,5] OPAL: Using OPAL UART console
[    2.258339488,7] LPC: LPC: Routing irq 4, policy: 0 (r=1)
[    2.258342048,7] LPC: LPC: SerIRQ 4 using route 2 targetted at OPAL
[   13.278292272,5] PCI: Probing slots...
[   13.334790512,3] PCI: built-in device not found:  (loc: 100)
[   13.334860320,3] PCI: built-in device not found: GPU0 down (loc: 250)
[   13.334919760,3] PCI: built-in device not found: GPU0 (loc: 400)
[   13.334953920,3] PCI: built-in device not found: GPU1 down (loc: 258)
[   13.334990496,3] PCI: built-in device not found: GPU1 (loc: 500)
[   13.335033040,3] PCI: built-in device not found: GPU2 down (loc: 260)
[   13.335070688,3] PCI: built-in device not found: GPU2 (loc: 600)
[   13.335113680,3] PCI: built-in device not found:  (loc: 100)
[   13.335152144,3] PCI: built-in device not found: GPU3 down (loc: 220)
[   13.335187840,3] PCI: built-in device not found: GPU3 (loc: 300)
[   13.335234496,3] PCI: built-in device not found: GPU4 down (loc: 228)
[   13.335269664,3] PCI: built-in device not found: GPU4 (loc: 400)
[   13.335304144,3] PCI: built-in device not found: GPU5 down (loc: 268)
[   13.335340336,3] PCI: built-in device not found: GPU5 (loc: 500)
[   13.335388832,5] PHB#0000:00:00.0 [ROOT] 1014 04c1 R:00 C:060400 B:00..00 
[   13.335441776,5] PHB#0001:00:00.0 [ROOT] 1014 04c1 R:00 C:060400 B:00..00 
[   13.335503344,5] PHB#0002:00:00.0 [ROOT] 1014 04c1 R:00 C:060400 B:01..02 
[   13.335561056,5] PHB#0002:01:00.0 [ETOX] 1a03 1150 R:04 C:060400 B:02..02 
[   13.335634992,5] PHB#0002:02:00.0 [PCID] 1a03 2000 R:41 C:030000 (           vga) 
[   13.335693280,5] PHB#0003:00:00.0 [ROOT] 1014 04c1 R:00 C:060400 B:00..00 
[   13.335742304,5] PHB#0004:00:00.0 [ROOT] 1014 04c1 R:00 C:060400 B:01..06 
[   13.335792800,5] PHB#0004:01:00.0 [SWUP] 10b5 8725 R:ca C:060400 B:02..06 
[   13.335869200,5] PHB#0004:02:02.0 [SWDN] 10b5 8725 R:ca C:060400 B:03..03 SLOT=S000403 
[   13.335936480,5] PHB#0004:03:00.0 [LGCY] 1b4b 9235 R:11 C:010601 (          sata) LOC_CODE=S000403
[   13.336016032,5] PHB#0004:02:0a.0 [SWDN] 10b5 8725 R:ca C:060400 B:04..04 SLOT=GPU0 down 
[   13.336097280,5] PHB#0004:02:0b.0 [SWDN] 10b5 8725 R:ca C:060400 B:05..05 SLOT=GPU1 down 
[   13.336171120,5] PHB#0004:02:0c.0 [SWDN] 10b5 8725 R:ca C:060400 B:06..06 SLOT=GPU2 down 
[   13.336236032,5] PHB#0004:01:00.1 [EP  ] 10b5 87d0 R:ca C:088000 (system-peripheral) 
[   13.336297152,5] PHB#0004:01:00.2 [EP  ] 10b5 87d0 R:ca C:088000 (system-peripheral) 
[   13.336368800,5] PHB#0004:01:00.3 [EP  ] 10b5 87d0 R:ca C:088000 (system-peripheral) 
[   13.336431568,5] PHB#0004:01:00.4 [EP  ] 10b5 87d0 R:ca C:088000 (system-peripheral) 
[   13.336526752,5] PHB#0005:00:00.0 [ROOT] 1014 04c1 R:00 C:060400 B:01..01 
[   13.336580480,5] PHB#0005:01:00.0 [EP  ] 14e4 1657 R:01 C:020000 (      ethernet) 
[   13.336633072,5] PHB#0005:01:00.1 [EP  ] 14e4 1657 R:01 C:020000 (      ethernet) 
[   13.336695664,5] PHB#0006:00:00.0 [EP  ] 1014 04ea R:01 C:060400 (           pci) SLOT=GPU0 
[   13.336762208,5] PHB#0006:00:00.1 [EP  ] 1014 04ea R:01 C:060400 (           pci) SLOT=GPU0 
[   13.336843648,5] PHB#0006:00:01.0 [EP  ] 1014 04ea R:01 C:060400 (           pci) SLOT=GPU1 
[   13.336912272,5] PHB#0006:00:01.1 [EP  ] 1014 04ea R:01 C:060400 (           pci) SLOT=GPU1 
[   13.336978416,5] PHB#0006:00:02.0 [EP  ] 1014 04ea R:01 C:060400 (           pci) SLOT=GPU2 
[   13.337056288,5] PHB#0006:00:02.1 [EP  ] 1014 04ea R:01 C:060400 (           pci) SLOT=GPU2 
[   13.337122144,5] PHB#0007:00:00.0 [EP  ] 1014 04ea R:01 C:060400 (           pci) SLOT=GPU3 
[   13.337189568,5] PHB#0007:00:00.1 [EP  ] 1014 04ea R:01 C:060400 (           pci) SLOT=GPU3 
[   13.337259744,5] PHB#0007:00:01.0 [EP  ] 1014 04ea R:01 C:060400 (           pci) SLOT=GPU4 
[   13.337326128,5] PHB#0007:00:01.1 [EP  ] 1014 04ea R:01 C:060400 (           pci) SLOT=GPU4 
[   13.337393968,5] PHB#0007:00:02.0 [EP  ] 1014 04ea R:01 C:060400 (           pci) SLOT=GPU5 
[   13.337464080,5] PHB#0007:00:02.1 [EP  ] 1014 04ea R:01 C:060400 (           pci) SLOT=GPU5 
[   13.337521344,5] PHB#0030:00:00.0 [ROOT] 1014 04c1 R:00 C:060400 B:00..00 
[   13.337570608,5] PHB#0033:00:00.0 [ROOT] 1014 04c1 R:00 C:060400 B:00..00 
[   13.337620432,5] PHB#0034:00:00.0 [ROOT] 1014 04c1 R:00 C:060400 B:01..01 
[   13.337686960,5] PHB#0034:01:00.0 [EP  ] 14e4 1657 R:01 C:020000 (      ethernet) 
[   13.337744288,5] PHB#0034:01:00.1 [EP  ] 14e4 1657 R:01 C:020000 (      ethernet) 
[   13.337796368,5] PHB#0034:01:00.2 [EP  ] 14e4 1657 R:01 C:020000 (      ethernet) 
[   13.337848848,5] PHB#0034:01:00.3 [EP  ] 14e4 1657 R:01 C:020000 (      ethernet) 
[   13.337896672,5] PHB#0035:00:00.0 [ROOT] 1014 04c1 R:00 C:060400 B:00..00 
[   13.374230576,5] INIT: Waiting for kernel...
[   13.374282208,5] INIT: 64-bit LE kernel discovered
[   13.374392944,5] OCC: All Chip Rdy after 0 ms
[   13.403600416,5] INIT: Starting kernel at 0x20010000, fdt at 0x30918c98 259529 bytes)
[   15.241519920,5] OPAL: Switch to little-endian OS
[    0.000000] opal: OPAL detected !
[    0.000000] Page sizes from device-tree:
[    0.000000] Page size shift = 12 AP=0x0
[    0.000000] Page size shift = 16 AP=0x5
[    0.000000] Page size shift = 21 AP=0x1
[    0.000000] Page size shift = 30 AP=0x2
[    0.000000] Initializing Radix MMU
[    0.000000] Partition table c0002007ff7f0000
[    0.000000] Mapped range 0x0 - 0x800000000 with 0x40000000
[    0.000000] Mapped range 0x200000000000 - 0x200800000000 with 0x40000000
[    0.000000] Process table c0002007fe800000 and radix root for kernel: c0000000013e0000
[    0.000000] Linux version 4.11.6-openpower1 (hostboot@gfw269.aus.stglabs.ibm.com) (gcc version 4.9.4 (Buildroot 2017.02.2-00007-g23118ce) ) #2 SMP Thu Jun 29 15:03:20 CDT 2017
[    0.000000] OPAL: Found memory mapped LPC bus on chip 0
[    0.000000] Using PowerNV machine description
[    0.000000] bootconsole [udbg0] enabled
[    0.000000] CPU maps initialized for 4 threads per core
 -&gt; smp_release_cpus()
spinning_secondaries = 15
 &lt;- smp_release_cpus()
[    0.000000] -----------------------------------------------------
[    0.000000] ppc64_pft_size    = 0x0
[    0.000000] phys_mem_size     = 0x1000000000
[    0.000000] dcache_bsize      = 0x80
[    0.000000] icache_bsize      = 0x80
[    0.000000] cpu_features      = 0x477c7afd18500249
[    0.000000]   possible        = 0x7f7fffff18500649
[    0.000000]   always          = 0x0000000018100040
[    0.000000] cpu_user_features = 0xdc0065c2 0xaec00000
[    0.000000] mmu_features      = 0x3c004041
[    0.000000] firmware_features = 0x0000000010000000
[    0.000000] -----------------------------------------------------
[    0.000000] numa: Initmem setup node 0 [mem 0x00000000-0x7ffffffff]
[    0.000000] numa:   NODE_DATA [mem 0x7ffff6700-0x7ffffffff]
[    0.000000] numa: Initmem setup node 8 [mem 0x200000000000-0x2007ffffffff]
[    0.000000] numa:   NODE_DATA [mem 0x2007ff746700-0x2007ff74ffff]
[    0.000000] numa: Initmem setup node 250
[    0.000000] numa:   NODE_DATA [mem 0x2007ff72ce00-0x2007ff7366ff]
[    0.000000] numa:     NODE_DATA(250) on node 8
[    0.000000] numa: Initmem setup node 251
[    0.000000] numa:   NODE_DATA [mem 0x2007ff723500-0x2007ff72cdff]
[    0.000000] numa:     NODE_DATA(251) on node 8
[    0.000000] numa: Initmem setup node 252
[    0.000000] numa:   NODE_DATA [mem 0x2007ff719c00-0x2007ff7234ff]
[    0.000000] numa:     NODE_DATA(252) on node 8
[    0.000000] numa: Initmem setup node 253
[    0.000000] numa:   NODE_DATA [mem 0x2007ff710300-0x2007ff719bff]
[    0.000000] numa:     NODE_DATA(253) on node 8
[    0.000000] numa: Initmem setup node 254
[    0.000000] numa:   NODE_DATA [mem 0x2007ff706a00-0x2007ff7102ff]
[    0.000000] numa:     NODE_DATA(254) on node 8
[    0.000000] numa: Initmem setup node 255
[    0.000000] numa:   NODE_DATA [mem 0x2007ff6fd100-0x2007ff7069ff]
[    0.000000] numa:     NODE_DATA(255) on node 8
[    0.000000] Initializing IODA2 PHB (/pciex@600c3c0000000)
[    0.000000] PCI host bridge /pciex@600c3c0000000 (primary) ranges:
[    0.000000]  MEM 0x000600c000000000..0x000600c07ffeffff -&gt; 0x0000000080000000 
[    0.000000]  MEM 0x0006000000000000..0x0006003fffffffff -&gt; 0x0006000000000000 (M64 #1..31)
[    0.000000]  Using M64 #31 as default window
[    0.000000]   256 (255) PE's M32: 0x80000000 [segment=0x800000]
[    0.000000]                  M64: 0x4000000000 [segment=0x40000000]
[    0.000000]   Allocated bitmap for 4088 MSIs (base IRQ 0xfe000)
[    0.000000] Initializing IODA2 PHB (/pciex@600c3c0100000)
[    0.000000] PCI host bridge /pciex@600c3c0100000  ranges:
[    0.000000]  MEM 0x000600c080000000..0x000600c0fffeffff -&gt; 0x0000000080000000 
[    0.000000]  MEM 0x0006004000000000..0x0006007fffffffff -&gt; 0x0006004000000000 (M64 #1..15)
[    0.000000]  Using M64 #15 as default window
[    0.000000]   128 (127) PE's M32: 0x80000000 [segment=0x1000000]
[    0.000000]                  M64: 0x4000000000 [segment=0x80000000]
[    0.000000]   Allocated bitmap for 2040 MSIs (base IRQ 0xfd800)
[    0.000000] Initializing IODA2 PHB (/pciex@600c3c0200000)
[    0.000000] PCI host bridge /pciex@600c3c0200000  ranges:
[    0.000000]  MEM 0x000600c100000000..0x000600c17ffeffff -&gt; 0x0000000080000000 
[    0.000000]  MEM 0x0006008000000000..0x000600bfffffffff -&gt; 0x0006008000000000 (M64 #1..15)
[    0.000000]  Using M64 #15 as default window
[    0.000000]   128 (127) PE's M32: 0x80000000 [segment=0x1000000]
[    0.000000]                  M64: 0x4000000000 [segment=0x80000000]
[    0.000000]   Allocated bitmap for 2040 MSIs (base IRQ 0xfd000)
[    0.000000] Initializing IODA2 PHB (/pciex@600c3c0300000)
[    0.000000] PCI host bridge /pciex@600c3c0300000  ranges:
[    0.000000]  MEM 0x000600c180000000..0x000600c1fffeffff -&gt; 0x0000000080000000 
[    0.000000]  MEM 0x0006020000000000..0x0006023fffffffff -&gt; 0x0006020000000000 (M64 #1..31)
[    0.000000]  Using M64 #31 as default window
[    0.000000]   256 (255) PE's M32: 0x80000000 [segment=0x800000]
[    0.000000]                  M64: 0x4000000000 [segment=0x40000000]
[    0.000000]   Allocated bitmap for 4088 MSIs (base IRQ 0xfc000)
[    0.000000] Initializing IODA2 PHB (/pciex@600c3c0400000)
[    0.000000] PCI host bridge /pciex@600c3c0400000  ranges:
[    0.000000]  MEM 0x000600c200000000..0x000600c27ffeffff -&gt; 0x0000000080000000 
[    0.000000]  MEM 0x0006024000000000..0x0006027fffffffff -&gt; 0x0006024000000000 (M64 #1..15)
[    0.000000]  Using M64 #15 as default window
[    0.000000]   128 (127) PE's M32: 0x80000000 [segment=0x1000000]
[    0.000000]                  M64: 0x4000000000 [segment=0x80000000]
[    0.000000]   Allocated bitmap for 2040 MSIs (base IRQ 0xfb800)
[    0.000000] Initializing IODA2 PHB (/pciex@600c3c0500000)
[    0.000000] PCI host bridge /pciex@600c3c0500000  ranges:
[    0.000000]  MEM 0x000600c280000000..0x000600c2fffeffff -&gt; 0x0000000080000000 
[    0.000000]  MEM 0x0006028000000000..0x000602bfffffffff -&gt; 0x0006028000000000 (M64 #1..15)
[    0.000000]  Using M64 #15 as default window
[    0.000000]   128 (127) PE's M32: 0x80000000 [segment=0x1000000]
[    0.000000]                  M64: 0x4000000000 [segment=0x80000000]
[    0.000000]   Allocated bitmap for 2040 MSIs (base IRQ 0xfb000)
[    0.000000] Initializing IODA2 PHB (/pciex@620c3c0000000)
[    0.000000] PCI host bridge /pciex@620c3c0000000  ranges:
[    0.000000]  MEM 0x000620c000000000..0x000620c07ffeffff -&gt; 0x0000000080000000 
[    0.000000]  MEM 0x0006200000000000..0x0006203fffffffff -&gt; 0x0006200000000000 (M64 #1..31)
[    0.000000]  Using M64 #31 as default window
[    0.000000]   256 (255) PE's M32: 0x80000000 [segment=0x800000]
[    0.000000]                  M64: 0x4000000000 [segment=0x40000000]
[    0.000000]   Allocated bitmap for 4088 MSIs (base IRQ 0x1fe000)
[    0.000000] Initializing IODA2 PHB (/pciex@620c3c0300000)
[    0.000000] PCI host bridge /pciex@620c3c0300000  ranges:
[    0.000000]  MEM 0x000620c180000000..0x000620c1fffeffff -&gt; 0x0000000080000000 
[    0.000000]  MEM 0x0006220000000000..0x0006223fffffffff -&gt; 0x0006220000000000 (M64 #1..31)
[    0.000000]  Using M64 #31 as default window
[    0.000000]   256 (255) PE's M32: 0x80000000 [segment=0x800000]
[    0.000000]                  M64: 0x4000000000 [segment=0x40000000]
[    0.000000]   Allocated bitmap for 4088 MSIs (base IRQ 0x1fd000)
[    0.000000] Initializing IODA2 PHB (/pciex@620c3c0400000)
[    0.000000] PCI host bridge /pciex@620c3c0400000  ranges:
[    0.000000]  MEM 0x000620c200000000..0x000620c27ffeffff -&gt; 0x0000000080000000 
[    0.000000]  MEM 0x0006224000000000..0x0006227fffffffff -&gt; 0x0006224000000000 (M64 #1..15)
[    0.000000]  Using M64 #15 as default window
[    0.000000]   128 (127) PE's M32: 0x80000000 [segment=0x1000000]
[    0.000000]                  M64: 0x4000000000 [segment=0x80000000]
[    0.000000]   Allocated bitmap for 2040 MSIs (base IRQ 0x1fc800)
[    0.000000] Initializing IODA2 PHB (/pciex@620c3c0500000)
[    0.000000] PCI host bridge /pciex@620c3c0500000  ranges:
[    0.000000]  MEM 0x000620c280000000..0x000620c2fffeffff -&gt; 0x0000000080000000 
[    0.000000]  MEM 0x0006228000000000..0x000622bfffffffff -&gt; 0x0006228000000000 (M64 #1..15)
[    0.000000]  Using M64 #15 as default window
[    0.000000]   128 (127) PE's M32: 0x80000000 [segment=0x1000000]
[    0.000000]                  M64: 0x4000000000 [segment=0x80000000]
[    0.000000]   Allocated bitmap for 2040 MSIs (base IRQ 0x1fc000)
[    0.000000] Initializing NPU PHB (/pciex@6030200000000)
[    0.000000] PCI host bridge /pciex@6030200000000  ranges:
[    0.000000]  MEM 0x0006030201400000..0x000603020151ffff -&gt; 0x0006030201400000 
[    0.000000]   Not support M64 window
[    0.000000]   016 (015) PE's M32: 0x130000 [segment=0x13000]
[    0.000000] Initializing NPU PHB (/pciex@6230200000000)
[    0.000000] PCI host bridge /pciex@6230200000000  ranges:
[    0.000000]  MEM 0x0006230201400000..0x000623020151ffff -&gt; 0x0006230201400000 
[    0.000000]   Not support M64 window
[    0.000000]   016 (015) PE's M32: 0x130000 [segment=0x13000]
[    0.000000] OPAL nvram setup, 589824 bytes
[    0.000000] Zone ranges:
[    0.000000]   DMA      [mem 0x0000000000000000-0x00002007ffffffff]
[    0.000000]   DMA32    empty
[    0.000000]   Normal   empty
[    0.000000] Movable zone start for each node
[    0.000000] Early memory node ranges
[    0.000000]   node   0: [mem 0x0000000000000000-0x00000007ffffffff]
[    0.000000]   node   8: [mem 0x0000200000000000-0x00002007ffffffff]
[    0.000000] Initmem setup node 0 [mem 0x0000000000000000-0x00000007ffffffff]
[    0.000000] Initmem setup node 8 [mem 0x0000200000000000-0x00002007ffffffff]
[    0.000000] Could not find start_pfn for node 250
[    0.000000] Initmem setup node 250 [mem 0x0000000000000000-0x0000000000000000]
[    0.000000] Could not find start_pfn for node 251
[    0.000000] Initmem setup node 251 [mem 0x0000000000000000-0x0000000000000000]
[    0.000000] Could not find start_pfn for node 252
[    0.000000] Initmem setup node 252 [mem 0x0000000000000000-0x0000000000000000]
[    0.000000] Could not find start_pfn for node 253
[    0.000000] Initmem setup node 253 [mem 0x0000000000000000-0x0000000000000000]
[    0.000000] Could not find start_pfn for node 254
[    0.000000] Initmem setup node 254 [mem 0x0000000000000000-0x0000000000000000]
[    0.000000] Could not find start_pfn for node 255
[    0.000000] Initmem setup node 255 [mem 0x0000000000000000-0x0000000000000000]
[    0.000000] percpu: Embedded 2 pages/cpu @c0000007fe2d0000 s66328 r0 d64744 u131072
[    0.000000] Built 8 zonelists in Node order, mobility grouping on.  Total pages: 1047680
[    0.000000] Policy zone: DMA
[    0.000000] Kernel command line: console=tty0 console=hvc0 powersave=off
[    0.000000] PID hash table entries: 4096 (order: -1, 32768 bytes)
[    0.000000] Memory: 66889280K/67108864K available (6208K kernel code, 832K rwdata, 2020K rodata, 11264K init, 1656K bss, 219584K reserved, 0K cma-reserved)
[    0.000000] SLUB: HWalign=128, Order=0-3, MinObjects=0, CPUs=16, Nodes=256
[    0.000000] Hierarchical RCU implementation.
[    0.000000] 	RCU debugfs-based tracing is enabled.
[    0.000000] 	Build-time adjustment of leaf fanout to 64.
[    0.000000] 	RCU restricting CPUs from NR_CPUS=2048 to nr_cpu_ids=16.
[    0.000000] RCU: Adjusting geometry for rcu_fanout_leaf=64, nr_cpu_ids=16
[    0.000000] NR_IRQS:512 nr_irqs:512 16
[    0.000000] XICS: Using OPAL ICP fallbacks
[    0.000000] ICS OPAL backend registered
[    0.000005] time_init: 56 bit decrementer (max: 7fffffffffffff)
[    0.000300] clocksource: timebase: mask: 0xffffffffffffffff max_cycles: 0x761537d007, max_idle_ns: 440795202126 ns
[    0.000786] clocksource: timebase mult[1f40000] shift[24] registered
[    0.001296] Console: colour dummy device 80x25
[    0.003804] console [tty0] enabled
[    0.003988] console [hvc0] enabled
[    0.003988] console [hvc0] enabled
[    0.004204] bootconsole [udbg0] disabled
[    0.004204] bootconsole [udbg0] disabled
[    0.005282] pid_max: default: 32768 minimum: 301
[    0.008477] Security Framework initialized
[    0.010558] Dentry cache hash table entries: 8388608 (order: 10, 67108864 bytes)
[    0.062886] Inode-cache hash table entries: 4194304 (order: 9, 33554432 bytes)
[    0.083091] Mount-cache hash table entries: 131072 (order: 4, 1048576 bytes)
[    0.083281] Mountpoint-cache hash table entries: 131072 (order: 4, 1048576 bytes)
[    0.087833] EEH: PowerNV platform initialized
[    0.087944] POWER9 performance monitor hardware support registered
[    0.088932] smp: Bringing up secondary CPUs ...
[    0.102153] smp: Brought up 8 nodes, 16 CPUs
[    0.102300] numa: Node 0 CPUs: 0-7
[    0.102380] numa: Node 8 CPUs: 8-15
[    0.102466] numa: Node 250 CPUs:
[    0.102532] numa: Node 251 CPUs:
[    0.102606] numa: Node 252 CPUs:
[    0.102684] numa: Node 253 CPUs:
[    0.102755] numa: Node 254 CPUs:
[    0.102823] numa: Node 255 CPUs:
[    0.111814] devtmpfs: initialized
[    0.126933] evm: security.capability
[    0.127946] clocksource: jiffies: mask: 0xffffffff max_cycles: 0xffffffff, max_idle_ns: 19112604462750000 ns
[    0.128219] futex hash table entries: 4096 (order: 3, 524288 bytes)
[    0.129446] NET: Registered protocol family 16
[    0.130639] cpuidle: using governor menu
[    0.141711] PCI: Probing PCI hardware
[    0.141908] PCI host bridge to bus 0000:00
[    0.142023] pci_bus 0000:00: root bus resource [mem 0x600c000000000-0x600c07ffeffff] (bus address [0x80000000-0xfffeffff])
[    0.142269] pci_bus 0000:00: root bus resource [mem 0x6000000000000-0x6003f7fffffff 64bit pref]
[    0.142478] pci_bus 0000:00: root bus resource [bus 00-ff]
[    0.143094] pci 0000:00:00.0: bridge configuration invalid ([bus 00-00]), reconfiguring
[    0.143438] pci 0000:00:00.0: PCI bridge to [bus 01-ff]
[    0.143712] PCI host bridge to bus 0001:00
[    0.143823] pci_bus 0001:00: root bus resource [mem 0x600c080000000-0x600c0fffeffff] (bus address [0x80000000-0xfffeffff])
[    0.144064] pci_bus 0001:00: root bus resource [mem 0x6004000000000-0x6007effffffff 64bit pref]
[    0.144272] pci_bus 0001:00: root bus resource [bus 00-ff]
[    0.144824] pci 0001:00:00.0: bridge configuration invalid ([bus 00-00]), reconfiguring
[    0.145193] pci 0001:00:00.0: PCI bridge to [bus 01-ff]
[    0.145473] PCI host bridge to bus 0002:00
[    0.145585] pci_bus 0002:00: root bus resource [mem 0x600c100000000-0x600c17ffeffff] (bus address [0x80000000-0xfffeffff])
[    0.145822] pci_bus 0002:00: root bus resource [mem 0x6008000000000-0x600beffffffff 64bit pref]
[    0.146025] pci_bus 0002:00: root bus resource [bus 00-ff]
[    0.147352] pci 0002:00:00.0: PCI bridge to [bus 01-02]
[    0.148337] pci 0002:01:00.0: PCI bridge to [bus 02]
[    0.148679] PCI host bridge to bus 0003:00
[    0.148794] pci_bus 0003:00: root bus resource [mem 0x600c180000000-0x600c1fffeffff] (bus address [0x80000000-0xfffeffff])
[    0.149036] pci_bus 0003:00: root bus resource [mem 0x6020000000000-0x6023f7fffffff 64bit pref]
[    0.149239] pci_bus 0003:00: root bus resource [bus 00-ff]
[    0.149809] pci 0003:00:00.0: bridge configuration invalid ([bus 00-00]), reconfiguring
[    0.150168] pci 0003:00:00.0: PCI bridge to [bus 01-ff]
[    0.150430] PCI host bridge to bus 0004:00
[    0.150541] pci_bus 0004:00: root bus resource [mem 0x600c200000000-0x600c27ffeffff] (bus address [0x80000000-0xfffeffff])
[    0.150797] pci_bus 0004:00: root bus resource [mem 0x6024000000000-0x6027effffffff 64bit pref]
[    0.151000] pci_bus 0004:00: root bus resource [bus 00-ff]
[    0.154749] pci 0004:00:00.0: PCI bridge to [bus 01-06]
[    0.157948] pci 0004:01:00.0: PCI bridge to [bus 02-06]
[    0.161683] pci 0004:02:02.0: PCI bridge to [bus 03]
[    0.162069] pci 0004:02:0a.0: PCI bridge to [bus 04]
[    0.162415] pci 0004:02:0b.0: PCI bridge to [bus 05]
[    0.162772] pci 0004:02:0c.0: PCI bridge to [bus 06]
[    0.163149] PCI host bridge to bus 0005:00
[    0.163260] pci_bus 0005:00: root bus resource [mem 0x600c280000000-0x600c2fffeffff] (bus address [0x80000000-0xfffeffff])
[    0.163517] pci_bus 0005:00: root bus resource [mem 0x6028000000000-0x602beffffffff 64bit pref]
[    0.163725] pci_bus 0005:00: root bus resource [bus 00-ff]
[    0.165848] pci 0005:00:00.0: PCI bridge to [bus 01]
[    0.166264] PCI host bridge to bus 0030:00
[    0.166368] pci_bus 0030:00: root bus resource [mem 0x620c000000000-0x620c07ffeffff] (bus address [0x80000000-0xfffeffff])
[    0.166621] pci_bus 0030:00: root bus resource [mem 0x6200000000000-0x6203f7fffffff 64bit pref]
[    0.166826] pci_bus 0030:00: root bus resource [bus 00-ff]
[    0.167391] pci 0030:00:00.0: bridge configuration invalid ([bus 00-00]), reconfiguring
[    0.167751] pci 0030:00:00.0: PCI bridge to [bus 01-ff]
[    0.168017] PCI host bridge to bus 0033:00
[    0.168130] pci_bus 0033:00: root bus resource [mem 0x620c180000000-0x620c1fffeffff] (bus address [0x80000000-0xfffeffff])
[    0.168371] pci_bus 0033:00: root bus resource [mem 0x6220000000000-0x6223f7fffffff 64bit pref]
[    0.168579] pci_bus 0033:00: root bus resource [bus 00-ff]
[    0.169148] pci 0033:00:00.0: bridge configuration invalid ([bus 00-00]), reconfiguring
[    0.169502] pci 0033:00:00.0: PCI bridge to [bus 01-ff]
[    0.169767] PCI host bridge to bus 0034:00
[    0.169868] pci_bus 0034:00: root bus resource [mem 0x620c200000000-0x620c27ffeffff] (bus address [0x80000000-0xfffeffff])
[    0.170129] pci_bus 0034:00: root bus resource [mem 0x6224000000000-0x6227effffffff 64bit pref]
[    0.170337] pci_bus 0034:00: root bus resource [bus 00-ff]
[    0.173756] pci 0034:00:00.0: PCI bridge to [bus 01]
[    0.174238] PCI host bridge to bus 0035:00
[    0.174346] pci_bus 0035:00: root bus resource [mem 0x620c280000000-0x620c2fffeffff] (bus address [0x80000000-0xfffeffff])
[    0.174604] pci_bus 0035:00: root bus resource [mem 0x6228000000000-0x622beffffffff 64bit pref]
[    0.174814] pci_bus 0035:00: root bus resource [bus 00-ff]
[    0.175387] pci 0035:00:00.0: bridge configuration invalid ([bus 00-00]), reconfiguring
[    0.175740] pci 0035:00:00.0: PCI bridge to [bus 01-ff]
[    0.176040] PCI host bridge to bus 0006:00
[    0.176152] pci_bus 0006:00: root bus resource [mem 0x6030201400000-0x603020151ffff]
[    0.176346] pci_bus 0006:00: root bus resource [bus 00-ff]
[   16.026370096,3] XIVE[ IC 00  ] ISN 1 lead to invalid IVE !
[    0.178506] irq: XICS didn't like hwirq-0x1 to VIRQ17 mapping (rc=-22)
[   16.026567808,3] XIVE[ IC 00  ] ISN 1 lead to invalid IVE !
[    0.178864] irq: XICS didn't like hwirq-0x1 to VIRQ17 mapping (rc=-22)
[   16.026743920,3] XIVE[ IC 00  ] ISN 1 lead to invalid IVE !
[    0.179218] irq: XICS didn't like hwirq-0x1 to VIRQ17 mapping (rc=-22)
[    0.179491] PCI host bridge to bus 0007:00
[    0.179598] pci_bus 0007:00: root bus resource [mem 0x6230201400000-0x623020151ffff]
[    0.179803] pci_bus 0007:00: root bus resource [bus 00-ff]
[   16.028173328,3] XIVE[ IC 00  ] ISN 1 lead to invalid IVE !
[    0.182029] irq: XICS didn't like hwirq-0x1 to VIRQ17 mapping (rc=-22)
[   16.028369008,3] XIVE[ IC 00  ] ISN 1 lead to invalid IVE !
[    0.182385] irq: XICS didn't like hwirq-0x1 to VIRQ17 mapping (rc=-22)
[   16.028549472,3] XIVE[ IC 00  ] ISN 1 lead to invalid IVE !
[    0.182732] irq: XICS didn't like hwirq-0x1 to VIRQ17 mapping (rc=-22)
[    0.183000] pci 0000:00:00.0: disabling bridge window [mem 0x00000000-0xffffffffffffffff 64bit pref] to [bus 01] (unused)
[    0.183242] pci 0000:00:00.0: disabling bridge window [mem 0x00000000-0xffffffffffffffff] to [bus 01] (unused)
[    0.183478] pci 0000:00     : [PE# fe] Secondary bus 0 associated with PE#fe
[    0.184119] pci 0000:00:00.0: PCI bridge to [bus 01]
[    0.184338] pci 0001:00:00.0: disabling bridge window [mem 0x00000000-0xffffffffffffffff 64bit pref] to [bus 01] (unused)
[    0.184584] pci 0001:00:00.0: disabling bridge window [mem 0x00000000-0xffffffffffffffff] to [bus 01] (unused)
[    0.184816] pci 0001:00     : [PE# 7e] Secondary bus 0 associated with PE#7e
[    0.185446] pci 0001:00:00.0: PCI bridge to [bus 01]
[    0.185691] pci 0002:00:00.0: BAR 8: assigned [mem 0x600c100000000-0x600c101ffffff]
[    0.185880] pci 0002:01:00.0: BAR 8: assigned [mem 0x600c100000000-0x600c101ffffff]
[    0.186059] pci 0002:01:00.0: BAR 7: no space for [io  size 0x1000]
[    0.186221] pci 0002:01:00.0: BAR 7: failed to assign [io  size 0x1000]
[    0.186374] pci 0002:02:00.0: BAR 0: assigned [mem 0x600c100000000-0x600c100ffffff]
[    0.186572] pci 0002:02:00.0: BAR 1: assigned [mem 0x600c101000000-0x600c10101ffff]
[    0.186766] pci 0002:02:00.0: BAR 2: no space for [io  size 0x0080]
[    0.186917] pci 0002:02:00.0: BAR 2: failed to assign [io  size 0x0080]
[    0.187070] pci 0002:00     : [PE# 7e] Secondary bus 0 associated with PE#7e
[    0.187707] pci 0002:02     : [PE# 7d] Secondary bus 2..2 associated with PE#7d
[    0.188370] pci 0002:02     : [PE# 7d] Setting up 32-bit TCE table at 0..80000000
[    0.201108] IOMMU table initialized, virtual merging enabled
[    0.201258] pci 0002:02     : [PE# 7d] Setting up window#0 0..7fffffff pg=1000
[    0.201662] pci 0002:02     : [PE# 7d] Enabling 64-bit DMA bypass
[    0.201814] pci 0002:01:00.0: PCI bridge to [bus 02]
[    0.201950] pci 0002:01:00.0:   bridge window [mem 0x600c100000000-0x600c17fefffff]
[    0.202163] pci 0002:01     : [PE# 7c] Secondary bus 1 associated with PE#7c
[    0.202797] pci 0002:00:00.0: PCI bridge to [bus 01-02]
[    0.202939] pci 0002:00:00.0:   bridge window [mem 0x600c100000000-0x600c17fefffff]
[    0.203142] pci_bus 0002:00: Some PCI device resources are unassigned, try booting with pci=realloc
[    0.203420] pci 0003:00:00.0: disabling bridge window [mem 0x00000000-0xffffffffffffffff 64bit pref] to [bus 01] (unused)
[    0.203668] pci 0003:00:00.0: disabling bridge window [mem 0x00000000-0xffffffffffffffff] to [bus 01] (unused)
[    0.203896] pci 0003:00     : [PE# fe] Secondary bus 0 associated with PE#fe
[    0.204525] pci 0003:00:00.0: PCI bridge to [bus 01]
[    0.204903] pci 0004:00:00.0: BAR 9: assigned [mem 0x6024000000000-0x602407fffffff 64bit pref]
[    0.205115] pci 0004:00:00.0: BAR 8: assigned [mem 0x600c200000000-0x600c201ffffff]
[    0.205316] pci 0004:01:00.0: BAR 9: assigned [mem 0x6024000000000-0x602407fffffff 64bit pref]
[    0.205521] pci 0004:01:00.0: BAR 8: assigned [mem 0x600c200000000-0x600c200ffffff]
[    0.205707] pci 0004:01:00.0: BAR 0: assigned [mem 0x600c201000000-0x600c20103ffff]
[    0.205898] pci 0004:01:00.1: BAR 0: assigned [mem 0x600c201040000-0x600c201041fff]
[    0.206093] pci 0004:01:00.2: BAR 0: assigned [mem 0x600c201042000-0x600c201043fff]
[    0.206285] pci 0004:01:00.3: BAR 0: assigned [mem 0x600c201044000-0x600c201045fff]
[    0.206483] pci 0004:01:00.4: BAR 0: assigned [mem 0x600c201046000-0x600c201047fff]
[    0.206675] pci 0004:01:00.0: BAR 7: no space for [io  size 0x1000]
[    0.206827] pci 0004:01:00.0: BAR 7: failed to assign [io  size 0x1000]
[    0.206981] pci 0004:01:00.0: BAR 7: no space for [io  size 0x1000]
[    0.207125] pci 0004:01:00.0: BAR 7: failed to assign [io  size 0x1000]
[    0.207293] pci 0004:02:02.0: BAR 9: assigned [mem 0x6024000000000-0x602407fffffff 64bit pref]
[    0.207511] pci 0004:02:02.0: BAR 8: assigned [mem 0x600c200000000-0x600c200ffffff]
[    0.207692] pci 0004:02:02.0: BAR 7: no space for [io  size 0x1000]
[    0.207845] pci 0004:02:02.0: BAR 7: failed to assign [io  size 0x1000]
[    0.208001] pci 0004:02:02.0: BAR 7: no space for [io  size 0x1000]
[    0.208147] pci 0004:02:02.0: BAR 7: failed to assign [io  size 0x1000]
[    0.208302] pci 0004:03:00.0: BAR 6: assigned [mem 0x600c200000000-0x600c20000ffff pref]
[    0.208508] pci 0004:03:00.0: BAR 5: assigned [mem 0x600c200010000-0x600c2000107ff]
[    0.208699] pci 0004:03:00.0: BAR 4: no space for [io  size 0x0020]
[    0.208852] pci 0004:03:00.0: BAR 4: failed to assign [io  size 0x0020]
[    0.209004] pci 0004:03:00.0: BAR 0: no space for [io  size 0x0008]
[    0.209152] pci 0004:03:00.0: BAR 0: failed to assign [io  size 0x0008]
[    0.209309] pci 0004:03:00.0: BAR 2: no space for [io  size 0x0008]
[    0.209458] pci 0004:03:00.0: BAR 2: failed to assign [io  size 0x0008]
[    0.209614] pci 0004:03:00.0: BAR 1: no space for [io  size 0x0004]
[    0.209763] pci 0004:03:00.0: BAR 1: failed to assign [io  size 0x0004]
[    0.209912] pci 0004:03:00.0: BAR 3: no space for [io  size 0x0004]
[    0.210063] pci 0004:03:00.0: BAR 3: failed to assign [io  size 0x0004]
[    0.210214] pci 0004:00     : [PE# 7e] Secondary bus 0 associated with PE#7e
[    0.210837] pci 0004:03     : [PE# 7d] Secondary bus 3 associated with PE#7d
[    0.211484] pci 0004:03     : [PE# 7d] Setting up 32-bit TCE table at 0..80000000
[    0.224221] pci 0004:03     : [PE# 7d] Setting up window#0 0..7fffffff pg=1000
[    0.224392] pci 0004:03     : [PE# 7d] Enabling 64-bit DMA bypass
[    0.224566] pci 0004:02:02.0: PCI bridge to [bus 03]
[    0.224700] pci 0004:02:02.0:   bridge window [mem 0x600c200000000-0x600c200ffffff]
[    0.224895] pci 0004:02:02.0:   bridge window [mem 0x6024000000000-0x602407fffffff 64bit pref]
[    0.225113] pci 0004:02:0a.0: PCI bridge to [bus 04]
[    0.225268] pci 0004:02:0b.0: PCI bridge to [bus 05]
[    0.225439] pci 0004:02:0c.0: PCI bridge to [bus 06]
[    0.225599] pci 0004:02     : [PE# 7c] Secondary bus 2 associated with PE#7c
[    0.226232] pci 0004:01:00.0: PCI bridge to [bus 02-06]
[    0.226372] pci 0004:01:00.0:   bridge window [mem 0x600c200000000-0x600c27fefffff]
[    0.226567] pci 0004:01:00.0:   bridge window [mem 0x6024000000000-0x6027efff0ffff 64bit pref]
[    0.226793] pci 0004:01     : [PE# 7b] Secondary bus 1 associated with PE#7b
[    0.227434] pci 0004:01     : [PE# 7b] Setting up 32-bit TCE table at 0..80000000
[    0.240182] pci 0004:01     : [PE# 7b] Setting up window#0 0..7fffffff pg=1000
[    0.240383] pci 0004:01     : [PE# 7b] Enabling 64-bit DMA bypass
[    0.240532] pci 0004:00:00.0: PCI bridge to [bus 01-06]
[    0.240672] pci 0004:00:00.0:   bridge window [mem 0x600c200000000-0x600c27fefffff]
[    0.240863] pci 0004:00:00.0:   bridge window [mem 0x6024000000000-0x6027efff0ffff 64bit pref]
[    0.241087] pci_bus 0004:00: Some PCI device resources are unassigned, try booting with pci=realloc
[    0.241399] pci 0005:00:00.0: BAR 9: assigned [mem 0x6028000000000-0x602807fffffff 64bit pref]
[    0.241616] pci 0005:01:00.0: BAR 0: assigned [mem 0x6028000000000-0x602800000ffff 64bit pref]
[    0.241857] pci 0005:01:00.0: BAR 2: assigned [mem 0x6028000010000-0x602800001ffff 64bit pref]
[    0.242098] pci 0005:01:00.0: BAR 4: assigned [mem 0x6028000020000-0x602800002ffff 64bit pref]
[    0.242331] pci 0005:01:00.1: BAR 0: assigned [mem 0x6028000030000-0x602800003ffff 64bit pref]
[    0.242568] pci 0005:01:00.1: BAR 2: assigned [mem 0x6028000040000-0x602800004ffff 64bit pref]
[    0.242804] pci 0005:01:00.1: BAR 4: assigned [mem 0x6028000050000-0x602800005ffff 64bit pref]
[    0.243040] pci 0005:00     : [PE# 7e] Secondary bus 0 associated with PE#7e
[    0.243688] pci 0005:01     : [PE# 00] Secondary bus 1 associated with PE#0
[    0.244312] pci 0005:01     : [PE# 00] Setting up 32-bit TCE table at 0..80000000
[    0.257051] pci 0005:01     : [PE# 00] Setting up window#0 0..7fffffff pg=1000
[    0.257240] pci 0005:01     : [PE# 00] Enabling 64-bit DMA bypass
[    0.257388] pci 0005:00:00.0: PCI bridge to [bus 01]
[    0.257534] pci 0005:00:00.0:   bridge window [mem 0x6028000000000-0x602beffffffff 64bit pref]
[    0.257810] pci 0030:00:00.0: disabling bridge window [mem 0x00000000-0xffffffffffffffff 64bit pref] to [bus 01] (unused)
[    0.258057] pci 0030:00:00.0: disabling bridge window [mem 0x00000000-0xffffffffffffffff] to [bus 01] (unused)
[    0.258291] pci 0030:00     : [PE# fe] Secondary bus 0 associated with PE#fe
[    0.258920] pci 0030:00:00.0: PCI bridge to [bus 01]
[    0.259126] pci 0033:00:00.0: disabling bridge window [mem 0x00000000-0xffffffffffffffff 64bit pref] to [bus 01] (unused)
[    0.259370] pci 0033:00:00.0: disabling bridge window [mem 0x00000000-0xffffffffffffffff] to [bus 01] (unused)
[    0.259601] pci 0033:00     : [PE# fe] Secondary bus 0 associated with PE#fe
[    0.260231] pci 0033:00:00.0: PCI bridge to [bus 01]
[    0.260437] pci 0034:00:00.0: BAR 9: assigned [mem 0x6224000000000-0x622407fffffff 64bit pref]
[    0.260649] pci 0034:00:00.0: BAR 8: assigned [mem 0x620c200000000-0x620c200ffffff]
[    0.260838] pci 0034:01:00.0: BAR 6: assigned [mem 0x620c200000000-0x620c20007ffff pref]
[    0.261024] random: fast init done
[    0.261124] pci 0034:01:00.1: BAR 6: assigned [mem 0x620c200080000-0x620c2000fffff pref]
[    0.261315] pci 0034:01:00.2: BAR 6: assigned [mem 0x620c200100000-0x620c20017ffff pref]
[    0.261506] pci 0034:01:00.3: BAR 6: assigned [mem 0x620c200180000-0x620c2001fffff pref]
[    0.261702] pci 0034:01:00.0: BAR 0: assigned [mem 0x6224000000000-0x622400000ffff 64bit pref]
[    0.261934] pci 0034:01:00.0: BAR 2: assigned [mem 0x6224000010000-0x622400001ffff 64bit pref]
[    0.262168] pci 0034:01:00.0: BAR 4: assigned [mem 0x6224000020000-0x622400002ffff 64bit pref]
[    0.262402] pci 0034:01:00.1: BAR 0: assigned [mem 0x6224000030000-0x622400003ffff 64bit pref]
[    0.262637] pci 0034:01:00.1: BAR 2: assigned [mem 0x6224000040000-0x622400004ffff 64bit pref]
[    0.262864] pci 0034:01:00.1: BAR 4: assigned [mem 0x6224000050000-0x622400005ffff 64bit pref]
[    0.263102] pci 0034:01:00.2: BAR 0: assigned [mem 0x6224000060000-0x622400006ffff 64bit pref]
[    0.263336] pci 0034:01:00.2: BAR 2: assigned [mem 0x6224000070000-0x622400007ffff 64bit pref]
[    0.263568] pci 0034:01:00.2: BAR 4: assigned [mem 0x6224000080000-0x622400008ffff 64bit pref]
[    0.263802] pci 0034:01:00.3: BAR 0: assigned [mem 0x6224000090000-0x622400009ffff 64bit pref]
[    0.264040] pci 0034:01:00.3: BAR 2: assigned [mem 0x62240000a0000-0x62240000affff 64bit pref]
[    0.264275] pci 0034:01:00.3: BAR 4: assigned [mem 0x62240000b0000-0x62240000bffff 64bit pref]
[    0.264514] pci 0034:00     : [PE# 7e] Secondary bus 0 associated with PE#7e
[    0.265164] pci 0034:01     : [PE# 00] Secondary bus 1 associated with PE#0
[    0.265792] pci 0034:01     : [PE# 00] Setting up 32-bit TCE table at 0..80000000
[    0.278538] pci 0034:01     : [PE# 00] Setting up window#0 0..7fffffff pg=1000
[    0.278910] pci 0034:01     : [PE# 00] Enabling 64-bit DMA bypass
[    0.279057] pci 0034:00:00.0: PCI bridge to [bus 01]
[    0.279195] pci 0034:00:00.0:   bridge window [mem 0x620c200000000-0x620c27fefffff]
[    0.279382] pci 0034:00:00.0:   bridge window [mem 0x6224000000000-0x6227efff0ffff 64bit pref]
[    0.279661] pci 0035:00:00.0: disabling bridge window [mem 0x00000000-0xffffffffffffffff 64bit pref] to [bus 01] (unused)
[    0.279907] pci 0035:00:00.0: disabling bridge window [mem 0x00000000-0xffffffffffffffff] to [bus 01] (unused)
[    0.280138] pci 0035:00     : [PE# 7e] Secondary bus 0 associated with PE#7e
[    0.280762] pci 0035:00:00.0: PCI bridge to [bus 01]
[    0.280945] pci 0006:00:00.0: BAR 0: assigned [mem 0x6030201400000-0x603020141ffff 64bit]
[    0.281204] pci 0006:00:00.1: BAR 0: assigned [mem 0x6030201420000-0x603020143ffff 64bit]
[    0.281458] pci 0006:00:01.0: BAR 0: assigned [mem 0x6030201440000-0x603020145ffff 64bit]
[    0.281722] pci 0006:00:01.1: BAR 0: assigned [mem 0x6030201460000-0x603020147ffff 64bit]
[    0.281975] pci 0006:00:02.0: BAR 0: assigned [mem 0x6030201480000-0x603020149ffff 64bit]
[    0.282231] pci 0006:00:02.1: BAR 0: assigned [mem 0x60302014a0000-0x60302014bffff 64bit]
[    0.282489] pci 0006:00:00.0: BAR 2: assigned [mem 0x60302014c0000-0x60302014cffff 64bit]
[    0.282743] pci 0006:00:00.1: BAR 2: assigned [mem 0x60302014d0000-0x60302014dffff 64bit]
[    0.282999] pci 0006:00:01.0: BAR 2: assigned [mem 0x60302014e0000-0x60302014effff 64bit]
[    0.283252] pci 0006:00:01.1: BAR 2: assigned [mem 0x60302014f0000-0x60302014fffff 64bit]
[    0.283507] pci 0006:00:02.0: BAR 2: assigned [mem 0x6030201500000-0x603020150ffff 64bit]
[    0.283759] pci 0006:00:02.1: BAR 2: assigned [mem 0x6030201510000-0x603020151ffff 64bit]
[    0.284029] pci 0007:00:00.0: BAR 0: assigned [mem 0x6230201400000-0x623020141ffff 64bit]
[    0.284280] pci 0007:00:00.1: BAR 0: assigned [mem 0x6230201420000-0x623020143ffff 64bit]
[    0.284527] pci 0007:00:01.0: BAR 0: assigned [mem 0x6230201440000-0x623020145ffff 64bit]
[    0.284779] pci 0007:00:01.1: BAR 0: assigned [mem 0x6230201460000-0x623020147ffff 64bit]
[    0.285028] pci 0007:00:02.0: BAR 0: assigned [mem 0x6230201480000-0x623020149ffff 64bit]
[    0.285275] pci 0007:00:02.1: BAR 0: assigned [mem 0x62302014a0000-0x62302014bffff 64bit]
[    0.285528] pci 0007:00:00.0: BAR 2: assigned [mem 0x62302014c0000-0x62302014cffff 64bit]
[    0.285776] pci 0007:00:00.1: BAR 2: assigned [mem 0x62302014d0000-0x62302014dffff 64bit]
[    0.286022] pci 0007:00:01.0: BAR 2: assigned [mem 0x62302014e0000-0x62302014effff 64bit]
[    0.286283] pci 0007:00:01.1: BAR 2: assigned [mem 0x62302014f0000-0x62302014fffff 64bit]
[    0.286533] pci 0007:00:02.0: BAR 2: assigned [mem 0x6230201500000-0x623020150ffff 64bit]
[    0.286782] pci 0007:00:02.1: BAR 2: assigned [mem 0x6230201510000-0x623020151ffff 64bit]
[    0.287051] pci 0006:00:00.0: [PE# 0d] Associated device to PE
[    0.287210] pci 0006:00:00.1: Associating to existing PE d
[    0.287351] pci 0006:00:01.0: Associating to existing PE d
[    0.287491] pci 0006:00:01.1: Associating to existing PE d
[    0.287632] pci 0006:00:02.0: Associating to existing PE d
[    0.287773] pci 0006:00:02.1: Associating to existing PE d
[    0.287912] pci 0007:00:00.0: [PE# 0d] Associated device to PE
[    0.288067] pci 0007:00:00.1: Associating to existing PE d
[    0.288207] pci 0007:00:01.0: Associating to existing PE d
[    0.288348] pci 0007:00:01.1: Associating to existing PE d
[    0.288492] pci 0007:00:02.0: Associating to existing PE d
[    0.288636] pci 0007:00:02.1: Associating to existing PE d
[    0.296306] EEH: PCI Enhanced I/O Error Handling Enabled
[    0.311671] pci 0002:02:00.0: vgaarb: VGA device added: decodes=io+mem,owns=none,locks=none
[    0.311869] pci 0002:02:00.0: vgaarb: bridge control possible
[    0.312000] vgaarb: loaded
[    0.312637] SCSI subsystem initialized
[    0.312975] usbcore: registered new interface driver usbfs
[    0.313138] usbcore: registered new interface driver hub
[    0.313384] usbcore: registered new device driver usb
[    0.313588] pps_core: LinuxPPS API ver. 1 registered
[    0.313703] pps_core: Software ver. 5.3.6 - Copyright 2005-2007 Rodolfo Giometti &lt;giometti@linux.it&gt;
[    0.313942] PTP clock support registered
[    0.314738] clocksource: Switched to clocksource timebase
[    0.324421] NET: Registered protocol family 2
[    0.324921] TCP established hash table entries: 524288 (order: 6, 4194304 bytes)
[    0.328471] TCP bind hash table entries: 65536 (order: 4, 1048576 bytes)
[    0.329031] TCP: Hash tables configured (established 524288 bind 65536)
[    0.329280] UDP hash table entries: 32768 (order: 4, 1048576 bytes)
[    0.330049] UDP-Lite hash table entries: 32768 (order: 4, 1048576 bytes)
[    0.331256] NET: Registered protocol family 1
[    6.978834] Initialise system trusted keyrings
[    6.979302] workingset: timestamp_bits=54 max_order=20 bucket_order=0
[    6.989928] Key type asymmetric registered
[    6.990029] Asymmetric key parser 'x509' registered
[    6.990218] Block layer SCSI generic (bsg) driver version 0.4 loaded (major 250)
[    6.990401] io scheduler noop registered
[    6.991392] io scheduler cfq registered (default)
[    6.991509] io scheduler mq-deadline registered
[    6.993666] ipmi message handler version 39.2
[    6.993792] ipmi device interface
[    6.994003] ipmi-powernv ibm,opal:ipmi: Unable to map irq from device tree
[    7.023193] ipmi-powernv ibm,opal:ipmi: Found new BMC (man_id: 0x000000, prod_id: 0x0000, dev_id: 0x00)
[    7.073078] hvc0: raw protocol on /ibm,opal/consoles/serial@0 (boot console)
[    7.073273] hvc0: No interrupts property, using OPAL event
[    7.074472] Serial: 8250/16550 driver, 4 ports, IRQ sharing disabled
[    7.075679] [drm] radeon kernel modesetting enabled.
[    7.085362] brd: module loaded
[    7.094059] loop: module loaded
[    7.094625] ahci 0004:03:00.0: Using 64-bit DMA iommu bypass
[    7.104900] ahci 0004:03:00.0: AHCI 0001.0000 32 slots 4 ports 6 Gbps 0xf impl SATA mode
[    7.105043] ahci 0004:03:00.0: flags: 64bit ncq sntf led only pmp fbs pio slum part sxs 
[    7.106533] scsi host0: ahci
[    7.107198] scsi host1: ahci
[    7.107856] scsi host2: ahci
[    7.108651] scsi host3: ahci
[    7.108843] ata1: SATA max UDMA/133 abar m2048@0x600c200010000 port 0x600c200010100 irq 88
[    7.109020] ata2: SATA max UDMA/133 abar m2048@0x600c200010000 port 0x600c200010180 irq 88
[    7.109175] ata3: SATA max UDMA/133 abar m2048@0x600c200010000 port 0x600c200010200 irq 88
[    7.109349] ata4: SATA max UDMA/133 abar m2048@0x600c200010000 port 0x600c200010280 irq 88
[    7.109954] libphy: Fixed MDIO Bus: probed
[    7.110090] tg3.c:v3.137 (May 11, 2014)
[    7.110196] tg3 0005:01:00.0: enabling device (0140 -&gt; 0142)
[    7.140288] tg3 0005:01:00.0: Using 64-bit DMA iommu bypass
[    7.141071] tg3 0005:01:00.0 eth0: Tigon3 [partno(BCM95719) rev 5719001] (PCI Express) MAC address 70:e2:84:14:28:aa
[    7.141309] tg3 0005:01:00.0 eth0: attached PHY is 5719C (10/100/1000Base-T Ethernet) (WireSpeed[1], EEE[1])
[    7.141535] tg3 0005:01:00.0 eth0: RXcsums[1] LinkChgREG[0] MIirq[0] ASF[1] TSOcap[1]
[    7.141709] tg3 0005:01:00.0 eth0: dma_rwctrl[00000000] dma_mask[64-bit]
[    7.141997] tg3 0005:01:00.1: enabling device (0140 -&gt; 0142)
[    7.181724] tg3 0005:01:00.1: Using 64-bit DMA iommu bypass
[    7.182399] tg3 0005:01:00.1 eth1: Tigon3 [partno(BCM95719) rev 5719001] (PCI Express) MAC address 70:e2:84:14:28:ab
[    7.182632] tg3 0005:01:00.1 eth1: attached PHY is 5719C (10/100/1000Base-T Ethernet) (WireSpeed[1], EEE[1])
[    7.182855] tg3 0005:01:00.1 eth1: RXcsums[1] LinkChgREG[0] MIirq[0] ASF[1] TSOcap[1]
[    7.183027] tg3 0005:01:00.1 eth1: dma_rwctrl[00000000] dma_mask[64-bit]
[    7.183500] tg3 0034:01:00.0: enabling device (0140 -&gt; 0142)
[    7.212511] tg3 0034:01:00.0: Using 64-bit DMA iommu bypass
[    7.213451] tg3 0034:01:00.0 eth2: Tigon3 [partno(00RX892) rev 5719001] (PCI Express) MAC address 98:be:94:07:e2:50
[    7.213701] tg3 0034:01:00.0 eth2: attached PHY is 5719C (10/100/1000Base-T Ethernet) (WireSpeed[1], EEE[1])
[    7.213932] tg3 0034:01:00.0 eth2: RXcsums[1] LinkChgREG[0] MIirq[0] ASF[0] TSOcap[1]
[    7.214114] tg3 0034:01:00.0 eth2: dma_rwctrl[00000000] dma_mask[64-bit]
[    7.214393] tg3 0034:01:00.1: enabling device (0140 -&gt; 0142)
[    7.264167] tg3 0034:01:00.1: Using 64-bit DMA iommu bypass
[    7.265141] tg3 0034:01:00.1 eth3: Tigon3 [partno(00RX892) rev 5719001] (PCI Express) MAC address 98:be:94:07:e2:51
[    7.265392] tg3 0034:01:00.1 eth3: attached PHY is 5719C (10/100/1000Base-T Ethernet) (WireSpeed[1], EEE[1])
[    7.265624] tg3 0034:01:00.1 eth3: RXcsums[1] LinkChgREG[0] MIirq[0] ASF[0] TSOcap[1]
[    7.265809] tg3 0034:01:00.1 eth3: dma_rwctrl[00000000] dma_mask[64-bit]
[    7.266088] tg3 0034:01:00.2: enabling device (0140 -&gt; 0142)
[    7.304169] tg3 0034:01:00.2: Using 64-bit DMA iommu bypass
[    7.304972] tg3 0034:01:00.2 eth4: Tigon3 [partno(00RX892) rev 5719001] (PCI Express) MAC address 98:be:94:07:e2:52
[    7.305216] tg3 0034:01:00.2 eth4: attached PHY is 5719C (10/100/1000Base-T Ethernet) (WireSpeed[1], EEE[1])
[    7.305445] tg3 0034:01:00.2 eth4: RXcsums[1] LinkChgREG[0] MIirq[0] ASF[0] TSOcap[1]
[    7.305630] tg3 0034:01:00.2 eth4: dma_rwctrl[00000000] dma_mask[64-bit]
[    7.305913] tg3 0034:01:00.3: enabling device (0140 -&gt; 0142)
[    7.344290] tg3 0034:01:00.3: Using 64-bit DMA iommu bypass
[    7.345080] tg3 0034:01:00.3 eth5: Tigon3 [partno(00RX892) rev 5719001] (PCI Express) MAC address 98:be:94:07:e2:53
[    7.345323] tg3 0034:01:00.3 eth5: attached PHY is 5719C (10/100/1000Base-T Ethernet) (WireSpeed[1], EEE[1])
[    7.345554] tg3 0034:01:00.3 eth5: RXcsums[1] LinkChgREG[0] MIirq[0] ASF[0] TSOcap[1]
[    7.345735] tg3 0034:01:00.3 eth5: dma_rwctrl[00000000] dma_mask[64-bit]
[    7.346219] ehci_hcd: USB 2.0 'Enhanced' Host Controller (EHCI) Driver
[    7.346358] ehci-pci: EHCI PCI platform driver
[    7.346541] ohci_hcd: USB 1.1 'Open' Host Controller (OHCI) Driver
[    7.346687] ohci-pci: OHCI PCI platform driver
[    7.346939] usbcore: registered new interface driver usb-storage
[    7.394823] rtc-opal opal-rtc: rtc core: registered rtc-opal as rtc0
[    7.394963] i2c /dev entries driver
[    7.395601] at24 0-0050: 16384 byte 24c128 EEPROM, writable, 1 bytes/write
[    7.396206] at24 1-0054: 16384 byte 24c128 EEPROM, writable, 1 bytes/write
[    7.396832] at24 2-0050: 16384 byte 24c128 EEPROM, writable, 1 bytes/write
[    7.397420] at24 3-0054: 16384 byte 24c128 EEPROM, writable, 1 bytes/write
[    7.398062] at24 4-0050: 16384 byte 24c128 EEPROM, writable, 1 bytes/write
[    7.456126] ata4: SATA link down (SStatus 0 SControl 300)
[    7.462082] ata3: SATA link down (SStatus 0 SControl 300)
[    7.572373] at24 7-0050: 16384 byte 24c128 EEPROM, writable, 1 bytes/write
[    7.572913] at24 8-0054: 16384 byte 24c128 EEPROM, writable, 1 bytes/write
[    7.573614] at24 9-0050: 16384 byte 24c128 EEPROM, writable, 1 bytes/write
[    7.574365] at24 10-0054: 16384 byte 24c128 EEPROM, writable, 1 bytes/write
[    7.614690] ata2: SATA link up 6.0 Gbps (SStatus 133 SControl 300)
[    7.617980] ata2.00: ATA-10: ST1000NX0313         00LY266 00LY265IBM, BE35, max UDMA/133
[    7.618162] ata2.00: 1953525168 sectors, multi 0: LBA48 NCQ (depth 31/32), AA
[    7.638409] ata1: SATA link up 6.0 Gbps (SStatus 133 SControl 300)
[    7.639171] ata2.00: configured for UDMA/133
[    7.660075] ata1.00: ATA-10: ST1000NX0313         00LY266 00LY265IBM, BE35, max UDMA/133
[    7.660246] ata1.00: 1953525168 sectors, multi 0: LBA48 NCQ (depth 31/32), AA
[    7.661105] ata1.00: configured for UDMA/133
[    7.661896] scsi 0:0:0:0: Direct-Access     ATA      ST1000NX0313     BE35 PQ: 0 ANSI: 5
[    7.682954] scsi 1:0:0:0: Direct-Access     ATA      ST1000NX0313     BE35 PQ: 0 ANSI: 5
[    7.748896] powernv-cpufreq: cpufreq pstate min 60 nominal 57 max 0
[    7.748998] powernv-cpufreq: Workload Optimized Frequency is enabled in the platform
[    7.750329] usbcore: registered new interface driver usbhid
[    7.750410] usbhid: USB HID core driver
[    7.750736] ipip: IPv4 and MPLS over IPv4 tunneling driver
[    7.751136] NET: Registered protocol family 17
[    7.751251] Key type dns_resolver registered
[    7.751995] registered taskstats version 1
[    7.752053] Loading compiled-in X.509 certificates
[    7.762157] Loaded X.509 cert 'Build time autogenerated kernel key: 3d4cac47ca2b2544a5086c41db89a203866f654d'
[    7.778882] Key type encrypted registered
[    7.778979] ima: No TPM chip found, activating TPM-bypass! (rc=-19)
[    7.779196] evm: HMAC attrs: 0x1
[    7.835087] rtc-opal opal-rtc: setting system clock to 2017-06-29 21:29:50 UTC (1498771790)
[    7.839065] Freeing unused kernel memory: 11264K
[    7.839180] This architecture does not have kernel memory protection.
[    7.881148] udevd[1539]: starting version 3.2.1
[    7.888771] udevd[1540]: starting eudev-3.2.1
[    7.960057] ast 0002:02:00.0: enabling device (0140 -&gt; 0142)
[    7.960559] [drm] platform has no IO space, trying MMIO
[    7.960694] [drm] VGA not enabled on entry, requesting chip POST
[    7.960881] [drm] Using P2A bridge for configuration
[    7.961002] [drm] AST 2500 detected
[    7.961103] [drm] Analog VGA only
[    7.961238] [drm] dram MCLK=800 Mhz type=7 bus_width=16 size=01000000
[    7.961757] [TTM] Zone  kernel: Available graphics memory: 33450272 kiB
[    7.961916] [TTM] Zone   dma32: Available graphics memory: 2097152 kiB
[    7.962069] [TTM] Initializing pool allocator
[    7.965962] tg3 0005:01:00.1 enP5p1s0f1: renamed from eth1
[    7.967320] scsi 0:0:0:0: Attached scsi generic sg0 type 0
[    7.967584] scsi 1:0:0:0: Attached scsi generic sg1 type 0

(B)0[1;24r[m[?7h[?1h=[H[J[H[J Petitboot (v1.4.3-p9f74a13)[1B [0mqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq[2B  [0mSystem information[1B  System configuration[1B  System status log[1B  Language[1B  Rescan devices[1B  Retrieve config from URL[1B *[0;7mExit to shell           [12B[25D[0mqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq[1B [0mEnter=accept, e=edit, n=new, x=exit, l=language, g=log, h=help[1B Welcome to Petitboot[J[1;64H8335-GTC 13186FA[23B [3;21r[3;1HMM[1;24r[3;3H[Disk: sda2 / a15dffae-a611-4fd5-a81e-8bdd6ab27fc1][1B[49DUbuntu[12;27H[0;7m                           [12B[52D[m[4;21r[4;1HM[1;24r[4;5HUbuntu, with Linux 4.10.0-14-generic[20B [4;21r[4;1HM[1;24r[4;5HUbuntu, with Linux 4.10.0-14-generic (recovery mode)[14;54H[0;7m   [10B[55D[m[enP5p1s0f0] Configuring with DHCP Booting in 9 sec: Ubuntu          [24;26H[24;13H8[24;26H[24;13H7[24;26H [enP52p1s0f0] Configuring with DHCP Booting in 6 sec: Ubuntu           [24;26H[24;13H5[24;26H[24;13H4[24;26H[24;13H3[24;26H[24;13H2[24;26H[24;13H1[24;26H[24;10HUbuntu          [24;16H Loaded kernel image from file:///var/petitboot/mnt/dev/sda2/boot/vmlinux-4.10.[?7l0[?7h[24;9Hinitrd from file:///var/petitboot/mnt/dev/sda2/boot/initrd.img-4.10.0-1[?7l4[?7h Running boot hooks[K Performing kexec loadrebootThe system is going down NOW!
Sent SIGTERM to all processes
Sent SIGKILL to all processes
[   24.884411] kexec_core: Starting new kernel
[   40.409363072,5] OPAL: Switch to big-endian OS
[   40.494762928,5] OPAL: Switch to little-endian OS
 -&gt; smp_release_cpus()
spinning_secondaries = 15
 &lt;- smp_release_cpus()
[   41.386559344,3] XIVE[ IC 00  ] ISN 1 lead to invalid IVE !
[   41.386694496,3] XIVE[ IC 00  ] ISN 1 lead to invalid IVE !
[   41.386808096,3] XIVE[ IC 00  ] ISN 1 lead to invalid IVE !
[   41.388166336,3] XIVE[ IC 00  ] ISN 1 lead to invalid IVE !
[   41.388283920,3] XIVE[ IC 00  ] ISN 1 lead to invalid IVE !
[   41.388391872,3] XIVE[ IC 00  ] ISN 1 lead to invalid IVE !
[    2.433025] Unable to open file: /etc/keys/x509_ima.der (-2)
[    2.433031] Unable to open file: /etc/keys/x509_evm.der (-2)
[40m[2J[-1;-1f[?25l[-1;-1f[40m[37mUbuntu 17.04[-1;-1f[37m.  [37m.  [37m.  [37m.[-1;-1f[40m[37mUbuntu 17.04[-1;-1f[33m.  [37m.  [37m.  [37m.[-1;-1f[40m[37mUbuntu 17.04[-1;-1f[33m.  [33m.  [37m.  [37m.[-1;-1f[40m[37mUbuntu 17.04[-1;-1f[33m.  [33m.  [33m.  [37m.[-1;-1f[40m[37mUbuntu 17.04[-1;-1f[33m.  [33m.  [33m.  [33m.[-1;-1f[40m[37mUbuntu 17.04[-1;-1f[37m.  [33m.  [33m.  [33m.[-1;-1f[40m[37mUbuntu 17.04[-1;-1f[37m.  [37m.  [33m.  [33m.[-1;-1f[40m[37mUbuntu 17.04[-1;-1f[37m.  [37m.  [37m.  [33m.[-1;-1f[40m[37mUbuntu 17.04[-1;-1f[37m.  [37m.  [37m.  [37m.[-1;-1f[40m[37mUbuntu 17.04[-1;-1f[33m.  [37m.  [37m.  [37m.[49m[2J[-1;-1f[?25h
Ubuntu Zesty Zapus (development branch) ws017p1 hvc0

ws017p1 login: </msg>
<status starttime="20170629 21:32:07.664" status="PASS" endtime="20170629 21:32:07.669"></status>
</kw>
<status starttime="20170629 21:31:46.221" status="PASS" endtime="20170629 21:32:07.670"></status>
</kw>
<doc>Power off and on.</doc>
<tags>
<tag>chassisboot</tag>
<tag>Power_On_Test</tag>
</tags>
<status starttime="20170629 21:26:52.131" critical="yes" status="FAIL" endtime="20170629 21:32:07.670">Keyword 'Is Host Off' failed after retrying for 3 minutes. The last error was: Off != Running</status>
</test>
<doc>Test power on for HW CI.</doc>
<status starttime="20170629 21:26:52.101" status="FAIL" endtime="20170629 21:32:07.676"></status>
</suite>
<doc>Set metadata for test suite.</doc>
<status starttime="20170629 21:26:45.366" status="FAIL" endtime="20170629 21:32:07.683"></status>
</suite>
<statistics>
<total>
<stat pass="1" fail="1">Critical Tests</stat>
<stat pass="1" fail="1">All Tests</stat>
</total>
<tag>
<stat pass="0" fail="1">chassisboot</stat>
<stat pass="0" fail="1">Power_On_Test</stat>
<stat pass="1" fail="0">Test_SSL_Connection</stat>
</tag>
<suite>
<stat id="s1" pass="1" fail="1" name="Tests">Tests</stat>
<stat id="s1-s1" pass="1" fail="0" name="Security">Tests.Security</stat>
<stat id="s1-s1-s1" pass="1" fail="0" name="Test Ssl">Tests.Security.Test Ssl</stat>
<stat id="s1-s2" pass="0" fail="1" name="Test Basic Poweron">Tests.Test Basic Poweron</stat>
</suite>
</statistics>
<errors>
</errors>
</robot>
