<?xml version="1.0" encoding="UTF-8"?>
<robot generated="20170802 18:46:48.360" generator="Robot 3.0.2 (Python 2.7.12 on linux2)">
<suite source="/home/fspcibld/openbmc-test-automation/extended/code_update/update_bmc.robot" id="s1" name="Update Bmc">
<test id="s1-t1" name="Initiate Code Update BMC">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${LAST_KNOWN_GOOD_VERSION}' != '${EMPTY}'</arg>
<arg>Run Keyword And Return Status</arg>
<arg>Validate BMC Version</arg>
<arg>${LAST_KNOWN_GOOD_VERSION}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<msg timestamp="20170802 18:46:49.555" level="INFO">${status} = None</msg>
<status status="PASS" endtime="20170802 18:46:49.556" starttime="20170802 18:46:49.555"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${True}'</arg>
<arg>Pass Execution</arg>
<arg>The BMC already has the requested build loaded so no further action will be taken.</arg>
</arguments>
<status status="PASS" endtime="20170802 18:46:49.556" starttime="20170802 18:46:49.556"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${FORCE_UPDATE} == ${0}</arg>
<arg>Prepare BMC For Update</arg>
</arguments>
<kw name="Prepare BMC For Update">
<doc>Prerequisite operation before code update.</doc>
<kw name="Check Boot Count And Time">
<doc>Check for unexpected reboots.</doc>
<kw name="Set BMC Reset Reference Time" library="utils">
<doc>Set current boot time as a reference and increment</doc>
<kw name="Get BMC Boot Time" library="utils">
<doc>Get boot time from /proc/stat.</doc>
<assign>
<var>${cur_btime}</var>
</assign>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg timestamp="20170802 18:46:49.560" level="FAIL">Dictionary does not contain key 'host'.</msg>
<status status="FAIL" endtime="20170802 18:46:49.560" starttime="20170802 18:46:49.560"></status>
</kw>
<msg timestamp="20170802 18:46:49.560" level="INFO">${has_host} = False</msg>
<status status="PASS" endtime="20170802 18:46:49.560" starttime="20170802 18:46:49.559"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status status="PASS" endtime="20170802 18:46:49.562" starttime="20170802 18:46:49.561"></status>
</kw>
<status status="PASS" endtime="20170802 18:46:49.562" starttime="20170802 18:46:49.561"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<status status="PASS" endtime="20170802 18:46:49.562" starttime="20170802 18:46:49.562"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg timestamp="20170802 18:46:49.563" level="FAIL">Dictionary does not contain key 'port'.</msg>
<status status="FAIL" endtime="20170802 18:46:49.564" starttime="20170802 18:46:49.563"></status>
</kw>
<msg timestamp="20170802 18:46:49.564" level="INFO">${has_port} = False</msg>
<status status="PASS" endtime="20170802 18:46:49.564" starttime="20170802 18:46:49.563"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status status="PASS" endtime="20170802 18:46:49.566" starttime="20170802 18:46:49.565"></status>
</kw>
<status status="PASS" endtime="20170802 18:46:49.566" starttime="20170802 18:46:49.565"></status>
</kw>
<status status="PASS" endtime="20170802 18:46:49.566" starttime="20170802 18:46:49.564"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg timestamp="20170802 18:46:49.566" level="INFO">Logging into '9.3.21.61:22' as 'root'.</msg>
<msg timestamp="20170802 18:46:51.279" level="INFO">Read output: root@witherspoon:~#</msg>
<status status="PASS" endtime="20170802 18:46:51.279" starttime="20170802 18:46:49.566"></status>
</kw>
<status status="PASS" endtime="20170802 18:46:51.279" starttime="20170802 18:46:49.559"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>egrep '^btime ' /proc/stat | cut -f 2 -d ' '</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${output}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170802 18:46:51.280" level="INFO">Executing command 'egrep '^btime ' /proc/stat | cut -f 2 -d ' ''.</msg>
<msg timestamp="20170802 18:46:51.357" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170802 18:46:51.357" level="INFO">${output} = 1501698597</msg>
<msg timestamp="20170802 18:46:51.357" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170802 18:46:51.357" starttime="20170802 18:46:51.280"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20170802 18:46:51.358" level="INFO">Length is 0</msg>
<status status="PASS" endtime="20170802 18:46:51.358" starttime="20170802 18:46:51.357"></status>
</kw>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<assign>
<var>${btime}</var>
</assign>
<msg timestamp="20170802 18:46:51.358" level="INFO">${btime} = 1501698597</msg>
<status status="PASS" endtime="20170802 18:46:51.358" starttime="20170802 18:46:51.358"></status>
</kw>
<msg timestamp="20170802 18:46:51.358" level="INFO">${cur_btime} = 1501698597</msg>
<status status="PASS" endtime="20170802 18:46:51.359" starttime="20170802 18:46:49.558"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${BOOT_TIME} == ${0} and ${BOOT_COUNT} == ${0}</arg>
<arg>Set Global Variable</arg>
<arg>${BOOT_TIME}</arg>
<arg>${cur_btime}</arg>
<arg>ELSE IF</arg>
<arg>${cur_btime} &gt; ${BOOT_TIME}</arg>
<arg>Run Keywords</arg>
<arg>Set Global Variable</arg>
<arg>${BOOT_TIME}</arg>
<arg>${cur_btime}</arg>
<arg>AND</arg>
<arg>Set Global Variable</arg>
<arg>${BOOT_COUNT}</arg>
<arg>${BOOT_COUNT + 1}</arg>
</arguments>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${BOOT_TIME}</arg>
<arg>${cur_btime}</arg>
</arguments>
<msg timestamp="20170802 18:46:51.361" level="INFO">${BOOT_TIME} = 1501698597</msg>
<status status="PASS" endtime="20170802 18:46:51.361" starttime="20170802 18:46:51.360"></status>
</kw>
<status status="PASS" endtime="20170802 18:46:51.361" starttime="20170802 18:46:51.359"></status>
</kw>
<status status="PASS" endtime="20170802 18:46:51.361" starttime="20170802 18:46:49.558"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>\n Boot Count: ${BOOT_COUNT}</arg>
</arguments>
<status status="PASS" endtime="20170802 18:46:51.361" starttime="20170802 18:46:51.361"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>\n Boot Time: ${BOOT_TIME}</arg>
</arguments>
<status status="PASS" endtime="20170802 18:46:51.362" starttime="20170802 18:46:51.362"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${BOOT_COUNT} &gt; ${MAX_BOOT_COUNT}</arg>
<arg>Log</arg>
<arg>Phantom Reboot!!! Unexpected reboot detected</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20170802 18:46:51.363" starttime="20170802 18:46:51.362"></status>
</kw>
<status status="PASS" endtime="20170802 18:46:51.363" starttime="20170802 18:46:49.557"></status>
</kw>
<kw name="Prune Journal Log" library="utils">
<doc>Prune archived journal logs.</doc>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg timestamp="20170802 18:46:51.365" level="FAIL">Dictionary does not contain key 'host'.</msg>
<status status="FAIL" endtime="20170802 18:46:51.365" starttime="20170802 18:46:51.365"></status>
</kw>
<msg timestamp="20170802 18:46:51.365" level="INFO">${has_host} = False</msg>
<status status="PASS" endtime="20170802 18:46:51.365" starttime="20170802 18:46:51.364"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status status="PASS" endtime="20170802 18:46:51.367" starttime="20170802 18:46:51.366"></status>
</kw>
<status status="PASS" endtime="20170802 18:46:51.367" starttime="20170802 18:46:51.366"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<status status="PASS" endtime="20170802 18:46:51.367" starttime="20170802 18:46:51.367"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg timestamp="20170802 18:46:51.368" level="FAIL">Dictionary does not contain key 'port'.</msg>
<status status="FAIL" endtime="20170802 18:46:51.368" starttime="20170802 18:46:51.368"></status>
</kw>
<msg timestamp="20170802 18:46:51.369" level="INFO">${has_port} = False</msg>
<status status="PASS" endtime="20170802 18:46:51.369" starttime="20170802 18:46:51.368"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status status="PASS" endtime="20170802 18:46:51.370" starttime="20170802 18:46:51.370"></status>
</kw>
<status status="PASS" endtime="20170802 18:46:51.370" starttime="20170802 18:46:51.370"></status>
</kw>
<status status="PASS" endtime="20170802 18:46:51.370" starttime="20170802 18:46:51.369"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg timestamp="20170802 18:46:51.371" level="INFO">Logging into '9.3.21.61:22' as 'root'.</msg>
<msg timestamp="20170802 18:46:53.080" level="INFO">Read output: root@witherspoon:~#</msg>
<status status="PASS" endtime="20170802 18:46:53.080" starttime="20170802 18:46:51.371"></status>
</kw>
<status status="PASS" endtime="20170802 18:46:53.081" starttime="20170802 18:46:51.363"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>journalctl --vacuum-size=${vacuum_size}</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<assign>
<var>${output}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20170802 18:46:53.082" level="INFO">Executing command 'journalctl --vacuum-size=1M'.</msg>
<msg timestamp="20170802 18:46:53.159" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170802 18:46:53.159" level="INFO">${output} = </msg>
<msg timestamp="20170802 18:46:53.159" level="INFO">${stderr} = Vacuuming done, freed 0B of archived journals from /run/log/journal/12c6a00ebfdd479284cf09f39d1bc042.</msg>
<msg timestamp="20170802 18:46:53.159" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20170802 18:46:53.159" starttime="20170802 18:46:53.081"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${rc}</arg>
<arg>${0}</arg>
<arg>msg=${stderr}</arg>
</arguments>
<status status="PASS" endtime="20170802 18:46:53.160" starttime="20170802 18:46:53.159"></status>
</kw>
<status status="PASS" endtime="20170802 18:46:53.160" starttime="20170802 18:46:51.363"></status>
</kw>
<kw name="Power Off Request" library="state_manager">
<doc>Select appropriate poweroff keyword.</doc>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${OBMC_STATES_VERSION}' == '${0}'</arg>
<arg>Initiate Power Off</arg>
<arg>ELSE</arg>
<arg>Initiate Host PowerOff</arg>
</arguments>
<kw name="Initiate Host PowerOff" library="state_manager">
<doc>Initiate host power off.</doc>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=${HOST_POWEROFF_TRANS}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg timestamp="20170802 18:46:53.162" level="INFO">${args} = {u'data': 'xyz.openbmc_project.State.Host.Transition.Off'}</msg>
<status status="PASS" endtime="20170802 18:46:53.162" starttime="20170802 18:46:53.162"></status>
</kw>
<kw name="Write Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>RequestedHostTransition</arg>
<arg>data=${args}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170802 18:46:53.164" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0/</msg>
<status status="PASS" endtime="20170802 18:46:53.164" starttime="20170802 18:46:53.163"></status>
</kw>
<kw name="OpenBMC Put Request" library="rest_client">
<arguments>
<arg>${base_uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170802 18:46:53.167" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170802 18:46:53.167" starttime="20170802 18:46:53.166"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170802 18:46:53.168" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170802 18:46:53.168" starttime="20170802 18:46:53.167"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170802 18:46:53.169" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170802 18:46:53.169" starttime="20170802 18:46:53.168"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170802 18:46:53.169" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170802 18:46:53.170" starttime="20170802 18:46:53.169"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170802 18:46:53.365" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170802 18:46:53.366" starttime="20170802 18:46:53.170"></status>
</kw>
<msg timestamp="20170802 18:46:53.366" level="INFO">${status} = PASS</msg>
<msg timestamp="20170802 18:46:53.366" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170802 18:46:53.366" starttime="20170802 18:46:53.170"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170802 18:46:53.366" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170802 18:46:53.367" starttime="20170802 18:46:53.366"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170802 18:46:53.367" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170802 18:46:53.367" starttime="20170802 18:46:53.367"></status>
</kw>
<status status="PASS" endtime="20170802 18:46:53.367" starttime="20170802 18:46:53.166"></status>
</kw>
<status status="PASS" endtime="20170802 18:46:53.367" starttime="20170802 18:46:53.165"></status>
</kw>
<status status="PASS" endtime="20170802 18:46:53.368" starttime="20170802 18:46:53.165"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170802 18:46:53.368" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/RequestedHostTransition</msg>
<status status="PASS" endtime="20170802 18:46:53.368" starttime="20170802 18:46:53.368"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170802 18:46:53.369" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170802 18:46:53.369" starttime="20170802 18:46:53.369"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" endtime="20170802 18:46:53.369" starttime="20170802 18:46:53.369"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Put</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170802 18:46:53.371" level="INFO">${msg} = URI:https://9.3.21.61/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, method:Put, args:{u'data': {u'data': 'xyz.openbmc_project.State.Host.Transition.Off'}, u'headers': {u'Content-Type'...</msg>
<status status="PASS" endtime="20170802 18:46:53.371" starttime="20170802 18:46:53.370"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170802 18:46:53.372" level="INFO">URI:https://9.3.21.61/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, method:Put, args:{u'data': {u'data': 'xyz.openbmc_project.State.Host.Transition.Off'}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20170802 18:46:53.372" starttime="20170802 18:46:53.372"></status>
</kw>
<status status="PASS" endtime="20170802 18:46:53.373" starttime="20170802 18:46:53.371"></status>
</kw>
<status status="PASS" endtime="20170802 18:46:53.373" starttime="20170802 18:46:53.370"></status>
</kw>
<kw name="Put Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a PUT request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170802 18:46:53.553" level="INFO">Put Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, data={"data": "xyz.openbmc_project.State.Host.Transition.Off"},                     headers={u'Content-Type': u'application/json'}, allow_redirects=True </msg>
<msg timestamp="20170802 18:46:53.554" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170802 18:46:53.554" starttime="20170802 18:46:53.373"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170802 18:46:53.556" level="INFO">${msg} = Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170802 18:46:53.556" starttime="20170802 18:46:53.555"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170802 18:46:53.557" level="INFO">Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170802 18:46:53.557" starttime="20170802 18:46:53.557"></status>
</kw>
<status status="PASS" endtime="20170802 18:46:53.557" starttime="20170802 18:46:53.556"></status>
</kw>
<status status="PASS" endtime="20170802 18:46:53.557" starttime="20170802 18:46:53.554"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170802 18:46:53.558" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170802 18:46:53.558" starttime="20170802 18:46:53.558"></status>
</kw>
<msg timestamp="20170802 18:46:53.563" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170802 18:46:53.563" starttime="20170802 18:46:53.164"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170802 18:46:53.563" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170802 18:46:53.563" starttime="20170802 18:46:53.563"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${json}</var>
</assign>
<msg timestamp="20170802 18:46:53.564" level="INFO">To JSON using : content={
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170802 18:46:53.564" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170802 18:46:53.564" level="INFO">${json} = {u'status': u'ok', u'message': u'200 OK', u'data': None}</msg>
<status status="PASS" endtime="20170802 18:46:53.564" starttime="20170802 18:46:53.564"></status>
</kw>
<status status="PASS" endtime="20170802 18:46:53.564" starttime="20170802 18:46:53.163"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${wait}' == '${0}'</arg>
<arg>Return From Keyword</arg>
</arguments>
<status status="PASS" endtime="20170802 18:46:53.565" starttime="20170802 18:46:53.565"></status>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>6 min</arg>
<arg>10 sec</arg>
<arg>Is Host Off</arg>
</arguments>
<kw name="Is Host Off" library="state_manager">
<doc>Check if host state is "Off".</doc>
<kw name="Is Chassis Off" library="state_manager">
<doc>Check if chassis state is "Off".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170802 18:46:53.570" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170802 18:46:53.571" starttime="20170802 18:46:53.570"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170802 18:46:53.571" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170802 18:46:53.571" starttime="20170802 18:46:53.571"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170802 18:46:53.572" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170802 18:46:53.572" starttime="20170802 18:46:53.572"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170802 18:46:53.573" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170802 18:46:53.573" starttime="20170802 18:46:53.572"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170802 18:46:54.187" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170802 18:46:54.187" starttime="20170802 18:46:53.573"></status>
</kw>
<msg timestamp="20170802 18:46:54.187" level="INFO">${status} = PASS</msg>
<msg timestamp="20170802 18:46:54.187" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170802 18:46:54.187" starttime="20170802 18:46:53.573"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170802 18:46:54.188" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170802 18:46:54.188" starttime="20170802 18:46:54.187"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170802 18:46:54.188" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170802 18:46:54.189" starttime="20170802 18:46:54.188"></status>
</kw>
<status status="PASS" endtime="20170802 18:46:54.189" starttime="20170802 18:46:53.569"></status>
</kw>
<status status="PASS" endtime="20170802 18:46:54.189" starttime="20170802 18:46:53.569"></status>
</kw>
<status status="PASS" endtime="20170802 18:46:54.189" starttime="20170802 18:46:53.568"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170802 18:46:54.189" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" endtime="20170802 18:46:54.189" starttime="20170802 18:46:54.189"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170802 18:46:54.190" starttime="20170802 18:46:54.190"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170802 18:46:54.331" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170802 18:46:54.331" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170802 18:46:54.331" starttime="20170802 18:46:54.190"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170802 18:46:54.332" starttime="20170802 18:46:54.332"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170802 18:46:54.333" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170802 18:46:54.333" starttime="20170802 18:46:54.332"></status>
</kw>
<msg timestamp="20170802 18:46:54.333" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170802 18:46:54.333" starttime="20170802 18:46:53.567"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170802 18:46:54.333" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170802 18:46:54.334" starttime="20170802 18:46:54.333"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170802 18:46:54.334" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170802 18:46:54.334" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170802 18:46:54.334" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off'}</msg>
<status status="PASS" endtime="20170802 18:46:54.334" starttime="20170802 18:46:54.334"></status>
</kw>
<msg timestamp="20170802 18:46:54.335" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status status="PASS" endtime="20170802 18:46:54.335" starttime="20170802 18:46:53.567"></status>
</kw>
<msg timestamp="20170802 18:46:54.335" level="INFO">${power_state} = Off</msg>
<status status="PASS" endtime="20170802 18:46:54.335" starttime="20170802 18:46:53.566"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${power_state}</arg>
</arguments>
<status status="PASS" endtime="20170802 18:46:54.336" starttime="20170802 18:46:54.335"></status>
</kw>
<status status="PASS" endtime="20170802 18:46:54.336" starttime="20170802 18:46:53.566"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170802 18:46:54.340" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170802 18:46:54.340" starttime="20170802 18:46:54.339"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170802 18:46:54.341" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170802 18:46:54.341" starttime="20170802 18:46:54.340"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170802 18:46:54.341" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170802 18:46:54.341" starttime="20170802 18:46:54.341"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170802 18:46:54.342" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170802 18:46:54.342" starttime="20170802 18:46:54.342"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170802 18:46:54.769" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170802 18:46:54.769" starttime="20170802 18:46:54.343"></status>
</kw>
<msg timestamp="20170802 18:46:54.769" level="INFO">${status} = PASS</msg>
<msg timestamp="20170802 18:46:54.769" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170802 18:46:54.769" starttime="20170802 18:46:54.343"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170802 18:46:54.770" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170802 18:46:54.770" starttime="20170802 18:46:54.770"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170802 18:46:54.771" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170802 18:46:54.771" starttime="20170802 18:46:54.770"></status>
</kw>
<status status="PASS" endtime="20170802 18:46:54.771" starttime="20170802 18:46:54.339"></status>
</kw>
<status status="PASS" endtime="20170802 18:46:54.771" starttime="20170802 18:46:54.338"></status>
</kw>
<status status="PASS" endtime="20170802 18:46:54.771" starttime="20170802 18:46:54.338"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170802 18:46:54.772" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" endtime="20170802 18:46:54.772" starttime="20170802 18:46:54.771"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170802 18:46:54.773" starttime="20170802 18:46:54.772"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170802 18:46:54.940" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170802 18:46:54.940" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170802 18:46:54.940" starttime="20170802 18:46:54.773"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170802 18:46:54.941" starttime="20170802 18:46:54.940"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170802 18:46:54.941" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170802 18:46:54.941" starttime="20170802 18:46:54.941"></status>
</kw>
<msg timestamp="20170802 18:46:54.941" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170802 18:46:54.941" starttime="20170802 18:46:54.337"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170802 18:46:54.942" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170802 18:46:54.942" starttime="20170802 18:46:54.942"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170802 18:46:54.943" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170802 18:46:54.943" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170802 18:46:54.943" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Off'}</msg>
<status status="PASS" endtime="20170802 18:46:54.943" starttime="20170802 18:46:54.942"></status>
</kw>
<msg timestamp="20170802 18:46:54.943" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Off</msg>
<status status="PASS" endtime="20170802 18:46:54.943" starttime="20170802 18:46:54.336"></status>
</kw>
<msg timestamp="20170802 18:46:54.944" level="INFO">${host_state} = Off</msg>
<status status="PASS" endtime="20170802 18:46:54.944" starttime="20170802 18:46:54.336"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${host_state}</arg>
</arguments>
<status status="PASS" endtime="20170802 18:46:54.944" starttime="20170802 18:46:54.944"></status>
</kw>
<status status="PASS" endtime="20170802 18:46:54.944" starttime="20170802 18:46:53.566"></status>
</kw>
<status status="PASS" endtime="20170802 18:46:54.944" starttime="20170802 18:46:53.565"></status>
</kw>
<status status="PASS" endtime="20170802 18:46:54.945" starttime="20170802 18:46:53.161"></status>
</kw>
<status status="PASS" endtime="20170802 18:46:54.945" starttime="20170802 18:46:53.161"></status>
</kw>
<status status="PASS" endtime="20170802 18:46:54.945" starttime="20170802 18:46:53.160"></status>
</kw>
<kw name="Set Policy Setting" library="code_update_utils">
<doc>Set the given test policy</doc>
<arguments>
<arg>RESTORE_LAST_STATE</arg>
</arguments>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=${policy}</arg>
</arguments>
<assign>
<var>${valueDict}</var>
</assign>
<msg timestamp="20170802 18:46:54.946" level="INFO">${valueDict} = {u'data': u'RESTORE_LAST_STATE'}</msg>
<status status="PASS" endtime="20170802 18:46:54.946" starttime="20170802 18:46:54.945"></status>
</kw>
<kw name="Write Attribute" library="rest_client">
<arguments>
<arg>${HOST_SETTING}</arg>
<arg>power_policy</arg>
<arg>data=${valueDict}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170802 18:46:54.947" level="INFO">${base_uri} = /org/openbmc/settings/host0</msg>
<status status="PASS" endtime="20170802 18:46:54.947" starttime="20170802 18:46:54.947"></status>
</kw>
<kw name="OpenBMC Put Request" library="rest_client">
<arguments>
<arg>${base_uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170802 18:46:54.950" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170802 18:46:54.951" starttime="20170802 18:46:54.950"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170802 18:46:54.951" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170802 18:46:54.951" starttime="20170802 18:46:54.951"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170802 18:46:54.952" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170802 18:46:54.952" starttime="20170802 18:46:54.952"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170802 18:46:54.953" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170802 18:46:54.953" starttime="20170802 18:46:54.952"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170802 18:46:55.155" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170802 18:46:55.155" starttime="20170802 18:46:54.954"></status>
</kw>
<msg timestamp="20170802 18:46:55.155" level="INFO">${status} = PASS</msg>
<msg timestamp="20170802 18:46:55.155" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170802 18:46:55.155" starttime="20170802 18:46:54.953"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170802 18:46:55.156" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170802 18:46:55.156" starttime="20170802 18:46:55.156"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170802 18:46:55.157" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170802 18:46:55.157" starttime="20170802 18:46:55.157"></status>
</kw>
<status status="PASS" endtime="20170802 18:46:55.158" starttime="20170802 18:46:54.949"></status>
</kw>
<status status="PASS" endtime="20170802 18:46:55.158" starttime="20170802 18:46:54.949"></status>
</kw>
<status status="PASS" endtime="20170802 18:46:55.158" starttime="20170802 18:46:54.948"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170802 18:46:55.159" level="INFO">${base_uri} = /org/openbmc/settings/host0/attr/power_policy</msg>
<status status="PASS" endtime="20170802 18:46:55.159" starttime="20170802 18:46:55.158"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170802 18:46:55.160" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170802 18:46:55.160" starttime="20170802 18:46:55.159"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" endtime="20170802 18:46:55.160" starttime="20170802 18:46:55.160"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Put</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170802 18:46:55.162" level="INFO">${msg} = URI:https://9.3.21.61/org/openbmc/settings/host0/attr/power_policy, method:Put, args:{u'data': {u'data': u'RESTORE_LAST_STATE'}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20170802 18:46:55.162" starttime="20170802 18:46:55.161"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170802 18:46:55.163" level="INFO">URI:https://9.3.21.61/org/openbmc/settings/host0/attr/power_policy, method:Put, args:{u'data': {u'data': u'RESTORE_LAST_STATE'}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20170802 18:46:55.163" starttime="20170802 18:46:55.163"></status>
</kw>
<status status="PASS" endtime="20170802 18:46:55.163" starttime="20170802 18:46:55.162"></status>
</kw>
<status status="PASS" endtime="20170802 18:46:55.163" starttime="20170802 18:46:55.161"></status>
</kw>
<kw name="Put Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a PUT request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170802 18:46:55.404" level="INFO">Put Request using : alias=openbmc, uri=/org/openbmc/settings/host0/attr/power_policy, data={"data": "RESTORE_LAST_STATE"},                     headers={u'Content-Type': u'application/json'}, allow_redirects=True </msg>
<msg timestamp="20170802 18:46:55.404" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170802 18:46:55.404" starttime="20170802 18:46:55.164"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170802 18:46:55.406" level="INFO">${msg} = Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170802 18:46:55.406" starttime="20170802 18:46:55.405"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170802 18:46:55.407" level="INFO">Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170802 18:46:55.407" starttime="20170802 18:46:55.406"></status>
</kw>
<status status="PASS" endtime="20170802 18:46:55.407" starttime="20170802 18:46:55.406"></status>
</kw>
<status status="PASS" endtime="20170802 18:46:55.407" starttime="20170802 18:46:55.405"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170802 18:46:55.408" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170802 18:46:55.408" starttime="20170802 18:46:55.408"></status>
</kw>
<msg timestamp="20170802 18:46:55.408" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170802 18:46:55.408" starttime="20170802 18:46:54.947"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170802 18:46:55.409" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170802 18:46:55.409" starttime="20170802 18:46:55.409"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${json}</var>
</assign>
<msg timestamp="20170802 18:46:55.410" level="INFO">To JSON using : content={
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170802 18:46:55.410" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170802 18:46:55.410" level="INFO">${json} = {u'status': u'ok', u'message': u'200 OK', u'data': None}</msg>
<status status="PASS" endtime="20170802 18:46:55.410" starttime="20170802 18:46:55.409"></status>
</kw>
<status status="PASS" endtime="20170802 18:46:55.410" starttime="20170802 18:46:54.946"></status>
</kw>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_SETTING}</arg>
<arg>power_policy</arg>
</arguments>
<assign>
<var>${currentPolicy}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170802 18:46:55.416" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170802 18:46:55.417" starttime="20170802 18:46:55.416"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170802 18:46:55.417" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170802 18:46:55.417" starttime="20170802 18:46:55.417"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170802 18:46:55.419" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170802 18:46:55.419" starttime="20170802 18:46:55.418"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170802 18:46:55.420" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170802 18:46:55.420" starttime="20170802 18:46:55.419"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170802 18:46:55.621" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170802 18:46:55.621" starttime="20170802 18:46:55.420"></status>
</kw>
<msg timestamp="20170802 18:46:55.621" level="INFO">${status} = PASS</msg>
<msg timestamp="20170802 18:46:55.621" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170802 18:46:55.621" starttime="20170802 18:46:55.420"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170802 18:46:55.622" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170802 18:46:55.622" starttime="20170802 18:46:55.622"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170802 18:46:55.623" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170802 18:46:55.623" starttime="20170802 18:46:55.622"></status>
</kw>
<status status="PASS" endtime="20170802 18:46:55.623" starttime="20170802 18:46:55.415"></status>
</kw>
<status status="PASS" endtime="20170802 18:46:55.623" starttime="20170802 18:46:55.415"></status>
</kw>
<status status="PASS" endtime="20170802 18:46:55.623" starttime="20170802 18:46:55.411"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170802 18:46:55.624" level="INFO">${base_uri} = /org/openbmc/settings/host0/attr/power_policy</msg>
<status status="PASS" endtime="20170802 18:46:55.624" starttime="20170802 18:46:55.623"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170802 18:46:55.625" starttime="20170802 18:46:55.624"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170802 18:46:55.710" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/settings/host0/attr/power_policy, headers=None json=None</msg>
<msg timestamp="20170802 18:46:55.711" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170802 18:46:55.711" starttime="20170802 18:46:55.625"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170802 18:46:55.711" starttime="20170802 18:46:55.711"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170802 18:46:55.712" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170802 18:46:55.712" starttime="20170802 18:46:55.712"></status>
</kw>
<msg timestamp="20170802 18:46:55.712" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170802 18:46:55.712" starttime="20170802 18:46:55.411"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170802 18:46:55.713" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170802 18:46:55.713" starttime="20170802 18:46:55.712"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170802 18:46:55.713" level="INFO">To JSON using : content={
  "data": "RESTORE_LAST_STATE", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170802 18:46:55.713" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170802 18:46:55.714" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'RESTORE_LAST_STATE'}</msg>
<status status="PASS" endtime="20170802 18:46:55.714" starttime="20170802 18:46:55.713"></status>
</kw>
<msg timestamp="20170802 18:46:55.714" level="INFO">${currentPolicy} = RESTORE_LAST_STATE</msg>
<status status="PASS" endtime="20170802 18:46:55.714" starttime="20170802 18:46:55.410"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${currentPolicy}</arg>
<arg>${policy}</arg>
</arguments>
<status status="PASS" endtime="20170802 18:46:55.714" starttime="20170802 18:46:55.714"></status>
</kw>
<status status="PASS" endtime="20170802 18:46:55.715" starttime="20170802 18:46:54.945"></status>
</kw>
<kw name="Prepare For Update" library="code_update_utils">
<doc>Switch to update mode in progress. This method calls</doc>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{EMPTY}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170802 18:46:55.716" level="INFO">${data} = {u'data': []}</msg>
<status status="PASS" endtime="20170802 18:46:55.716" starttime="20170802 18:46:55.715"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${BMC_PREP_METHOD}</arg>
<arg>data=${data}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170802 18:46:55.719" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170802 18:46:55.719" starttime="20170802 18:46:55.718"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170802 18:46:55.720" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170802 18:46:55.720" starttime="20170802 18:46:55.719"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170802 18:46:55.720" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170802 18:46:55.720" starttime="20170802 18:46:55.720"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170802 18:46:55.721" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170802 18:46:55.721" starttime="20170802 18:46:55.721"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170802 18:46:55.916" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170802 18:46:55.916" starttime="20170802 18:46:55.722"></status>
</kw>
<msg timestamp="20170802 18:46:55.917" level="INFO">${status} = PASS</msg>
<msg timestamp="20170802 18:46:55.917" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170802 18:46:55.917" starttime="20170802 18:46:55.722"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170802 18:46:55.917" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170802 18:46:55.917" starttime="20170802 18:46:55.917"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170802 18:46:55.918" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170802 18:46:55.918" starttime="20170802 18:46:55.918"></status>
</kw>
<status status="PASS" endtime="20170802 18:46:55.918" starttime="20170802 18:46:55.718"></status>
</kw>
<status status="PASS" endtime="20170802 18:46:55.918" starttime="20170802 18:46:55.717"></status>
</kw>
<status status="PASS" endtime="20170802 18:46:55.919" starttime="20170802 18:46:55.716"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170802 18:46:55.919" level="INFO">${base_uri} = /org/openbmc/control/flash/bmc/action/PrepareForUpdate</msg>
<status status="PASS" endtime="20170802 18:46:55.919" starttime="20170802 18:46:55.919"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170802 18:46:55.920" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170802 18:46:55.920" starttime="20170802 18:46:55.919"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" endtime="20170802 18:46:55.920" starttime="20170802 18:46:55.920"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170802 18:46:55.921" starttime="20170802 18:46:55.921"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170802 18:46:56.326" level="INFO">Post Request using : alias=openbmc, uri=/org/openbmc/control/flash/bmc/action/PrepareForUpdate, data={"data": []}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20170802 18:46:56.326" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170802 18:46:56.326" starttime="20170802 18:46:55.921"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170802 18:46:56.327" starttime="20170802 18:46:56.326"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170802 18:46:56.327" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170802 18:46:56.327" starttime="20170802 18:46:56.327"></status>
</kw>
<msg timestamp="20170802 18:46:56.328" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170802 18:46:56.328" starttime="20170802 18:46:55.716"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170802 18:46:56.328" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170802 18:46:56.328" starttime="20170802 18:46:56.328"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>10s</arg>
</arguments>
<msg timestamp="20170802 18:47:06.329" level="INFO">Slept 10 seconds</msg>
<status status="PASS" endtime="20170802 18:47:06.329" starttime="20170802 18:46:56.329"></status>
</kw>
<status status="PASS" endtime="20170802 18:47:06.329" starttime="20170802 18:46:55.715"></status>
</kw>
<kw name="Check If BMC is Up" library="utils">
<doc>Wait for Host to be online. Checks every X seconds</doc>
<arguments>
<arg>20 min</arg>
<arg>10 sec</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>${max_timeout}</arg>
<arg>${interval}</arg>
<arg>Verify Ping and REST Authentication</arg>
</arguments>
<kw name="Verify Ping and REST Authentication" library="utils">
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Ping Host</arg>
<arg>${OPENBMC_HOST}</arg>
</arguments>
<assign>
<var>${l_ping}</var>
</assign>
<kw name="Ping Host" library="utils">
<arguments>
<arg>${OPENBMC_HOST}</arg>
</arguments>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${host}</arg>
<arg>msg=No host provided</arg>
</arguments>
<msg timestamp="20170802 18:47:06.333" level="INFO">Length is 9</msg>
<status status="PASS" endtime="20170802 18:47:06.333" starttime="20170802 18:47:06.332"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>ping -c 4 ${host}</arg>
</arguments>
<assign>
<var>${RC}</var>
<var>${output}</var>
</assign>
<msg timestamp="20170802 18:47:06.338" level="INFO">Running command 'ping -c 4 9.3.21.61 2&gt;&amp;1'.</msg>
<msg timestamp="20170802 18:47:09.342" level="INFO">${RC} = 0</msg>
<msg timestamp="20170802 18:47:09.342" level="INFO">${output} = PING 9.3.21.61 (9.3.21.61) 56(84) bytes of data.
64 bytes from 9.3.21.61: icmp_seq=1 ttl=62 time=0.889 ms
64 bytes from 9.3.21.61: icmp_seq=2 ttl=62 time=0.554 ms
64 bytes from 9.3.21.61: icmp_seq=3 t...</msg>
<status status="PASS" endtime="20170802 18:47:09.342" starttime="20170802 18:47:06.333"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>RC: ${RC}\nOutput:\n${output}</arg>
</arguments>
<msg timestamp="20170802 18:47:09.345" level="INFO">RC: 0
Output:
PING 9.3.21.61 (9.3.21.61) 56(84) bytes of data.
64 bytes from 9.3.21.61: icmp_seq=1 ttl=62 time=0.889 ms
64 bytes from 9.3.21.61: icmp_seq=2 ttl=62 time=0.554 ms
64 bytes from 9.3.21.61: icmp_seq=3 ttl=62 time=0.562 ms
64 bytes from 9.3.21.61: icmp_seq=4 ttl=62 time=0.575 ms

--- 9.3.21.61 ping statistics ---
4 packets transmitted, 4 received, 0% packet loss, time 3000ms
rtt min/avg/max/mdev = 0.554/0.645/0.889/0.141 ms</msg>
<status status="PASS" endtime="20170802 18:47:09.345" starttime="20170802 18:47:09.344"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${RC}</arg>
<arg>${0}</arg>
</arguments>
<status status="PASS" endtime="20170802 18:47:09.346" starttime="20170802 18:47:09.345"></status>
</kw>
<status status="PASS" endtime="20170802 18:47:09.346" starttime="20170802 18:47:06.332"></status>
</kw>
<msg timestamp="20170802 18:47:09.346" level="INFO">${l_ping} = True</msg>
<status status="PASS" endtime="20170802 18:47:09.346" starttime="20170802 18:47:06.331"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${l_ping}' == '${False}'</arg>
<arg>Fail</arg>
<arg>msg=Ping Failed</arg>
</arguments>
<status status="PASS" endtime="20170802 18:47:09.347" starttime="20170802 18:47:09.347"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Initialize OpenBMC</arg>
</arguments>
<assign>
<var>${l_rest}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170802 18:47:09.350" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61, headers={},                     cookies=None, auth=None, timeout=20, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170802 18:47:09.351" starttime="20170802 18:47:09.350"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170802 18:47:09.351" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170802 18:47:09.351" starttime="20170802 18:47:09.351"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170802 18:47:09.352" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170802 18:47:09.352" starttime="20170802 18:47:09.352"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170802 18:47:09.353" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170802 18:47:09.353" starttime="20170802 18:47:09.352"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170802 18:47:09.798" level="FAIL">ConnectionError: ('Connection aborted.', error(104, 'Connection reset by peer'))</msg>
<status status="FAIL" endtime="20170802 18:47:09.798" starttime="20170802 18:47:09.354"></status>
</kw>
<msg timestamp="20170802 18:47:09.798" level="INFO">${status} = FAIL</msg>
<msg timestamp="20170802 18:47:09.798" level="INFO">${resp} = ConnectionError: ('Connection aborted.', error(104, 'Connection reset by peer'))</msg>
<status status="PASS" endtime="20170802 18:47:09.798" starttime="20170802 18:47:09.353"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170802 18:47:09.799" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20170802 18:47:09.799" level="FAIL">ConnectionError: ('Connection aborted.', error(104, 'Connection reset by peer')): FAIL != PASS</msg>
<status status="FAIL" endtime="20170802 18:47:09.799" starttime="20170802 18:47:09.798"></status>
</kw>
<status status="FAIL" endtime="20170802 18:47:09.799" starttime="20170802 18:47:09.349"></status>
</kw>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170802 18:47:29.801" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61, headers={},                     cookies=None, auth=None, timeout=20, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170802 18:47:29.802" starttime="20170802 18:47:29.801"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170802 18:47:29.802" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170802 18:47:29.803" starttime="20170802 18:47:29.802"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170802 18:47:29.803" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170802 18:47:29.803" starttime="20170802 18:47:29.803"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170802 18:47:29.804" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170802 18:47:29.804" starttime="20170802 18:47:29.803"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170802 18:47:49.828" level="WARN">Retrying (Retry(total=2, connect=None, read=None, redirect=None, status=None)) after connection broken by 'ConnectTimeoutError(&lt;urllib3.connection.VerifiedHTTPSConnection object at 0x3fff7dfedc90&gt;, 'Connection to 9.3.21.61 timed out. (connect timeout=20.0)')': /login</msg>
<msg timestamp="20170802 18:48:10.050" level="WARN">Retrying (Retry(total=1, connect=None, read=None, redirect=None, status=None)) after connection broken by 'ConnectTimeoutError(&lt;urllib3.connection.VerifiedHTTPSConnection object at 0x3fff7dfede10&gt;, 'Connection to 9.3.21.61 timed out. (connect timeout=20.0)')': /login</msg>
<msg timestamp="20170802 18:48:37.197" level="FAIL">ReadTimeout: HTTPSConnectionPool(host='9.3.21.61', port=443): Read timed out. (read timeout=20.0)</msg>
<status status="FAIL" endtime="20170802 18:48:37.198" starttime="20170802 18:47:29.805"></status>
</kw>
<msg timestamp="20170802 18:48:37.198" level="INFO">${status} = FAIL</msg>
<msg timestamp="20170802 18:48:37.198" level="INFO">${resp} = ReadTimeout: HTTPSConnectionPool(host='9.3.21.61', port=443): Read timed out. (read timeout=20.0)</msg>
<status status="PASS" endtime="20170802 18:48:37.198" starttime="20170802 18:47:29.804"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170802 18:48:37.199" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20170802 18:48:37.199" level="FAIL">ReadTimeout: HTTPSConnectionPool(host='9.3.21.61', port=443): Read timed out. (read timeout=20.0): FAIL != PASS</msg>
<status status="FAIL" endtime="20170802 18:48:37.199" starttime="20170802 18:48:37.198"></status>
</kw>
<status status="FAIL" endtime="20170802 18:48:37.199" starttime="20170802 18:47:29.800"></status>
</kw>
<msg timestamp="20170802 18:48:37.199" level="FAIL">Keyword 'Post Login Request' failed after retrying for 40 seconds. The last error was: ReadTimeout: HTTPSConnectionPool(host='9.3.21.61', port=443): Read timed out. (read timeout=20.0): FAIL != PASS</msg>
<status status="FAIL" endtime="20170802 18:48:37.199" starttime="20170802 18:47:09.348"></status>
</kw>
<status status="FAIL" endtime="20170802 18:48:37.200" starttime="20170802 18:47:09.348"></status>
</kw>
<msg timestamp="20170802 18:48:37.200" level="INFO">${l_rest} = False</msg>
<status status="PASS" endtime="20170802 18:48:37.200" starttime="20170802 18:47:09.347"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${l_rest}' == '${False}'</arg>
<arg>Fail</arg>
<arg>msg=REST Authentication Failed</arg>
</arguments>
<kw name="Fail" library="BuiltIn">
<doc>Fails the test with the given message and optionally alters its tags.</doc>
<arguments>
<arg>msg=REST Authentication Failed</arg>
</arguments>
<msg timestamp="20170802 18:48:37.201" level="FAIL">REST Authentication Failed</msg>
<status status="FAIL" endtime="20170802 18:48:37.201" starttime="20170802 18:48:37.201"></status>
</kw>
<status status="FAIL" endtime="20170802 18:48:37.201" starttime="20170802 18:48:37.200"></status>
</kw>
<status status="FAIL" endtime="20170802 18:48:37.201" starttime="20170802 18:47:06.331"></status>
</kw>
<kw name="Verify Ping and REST Authentication" library="utils">
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Ping Host</arg>
<arg>${OPENBMC_HOST}</arg>
</arguments>
<assign>
<var>${l_ping}</var>
</assign>
<kw name="Ping Host" library="utils">
<arguments>
<arg>${OPENBMC_HOST}</arg>
</arguments>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${host}</arg>
<arg>msg=No host provided</arg>
</arguments>
<msg timestamp="20170802 18:48:47.204" level="INFO">Length is 9</msg>
<status status="PASS" endtime="20170802 18:48:47.204" starttime="20170802 18:48:47.204"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>ping -c 4 ${host}</arg>
</arguments>
<assign>
<var>${RC}</var>
<var>${output}</var>
</assign>
<msg timestamp="20170802 18:48:47.218" level="INFO">Running command 'ping -c 4 9.3.21.61 2&gt;&amp;1'.</msg>
<msg timestamp="20170802 18:48:50.219" level="INFO">${RC} = 0</msg>
<msg timestamp="20170802 18:48:50.220" level="INFO">${output} = PING 9.3.21.61 (9.3.21.61) 56(84) bytes of data.
64 bytes from 9.3.21.61: icmp_seq=1 ttl=62 time=1.61 ms
64 bytes from 9.3.21.61: icmp_seq=2 ttl=62 time=0.603 ms
64 bytes from 9.3.21.61: icmp_seq=3 tt...</msg>
<status status="PASS" endtime="20170802 18:48:50.220" starttime="20170802 18:48:47.204"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>RC: ${RC}\nOutput:\n${output}</arg>
</arguments>
<msg timestamp="20170802 18:48:50.237" level="INFO">RC: 0
Output:
PING 9.3.21.61 (9.3.21.61) 56(84) bytes of data.
64 bytes from 9.3.21.61: icmp_seq=1 ttl=62 time=1.61 ms
64 bytes from 9.3.21.61: icmp_seq=2 ttl=62 time=0.603 ms
64 bytes from 9.3.21.61: icmp_seq=3 ttl=62 time=1.32 ms
64 bytes from 9.3.21.61: icmp_seq=4 ttl=62 time=0.579 ms

--- 9.3.21.61 ping statistics ---
4 packets transmitted, 4 received, 0% packet loss, time 3003ms
rtt min/avg/max/mdev = 0.579/1.029/1.612/0.449 ms</msg>
<status status="PASS" endtime="20170802 18:48:50.237" starttime="20170802 18:48:50.233"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${RC}</arg>
<arg>${0}</arg>
</arguments>
<status status="PASS" endtime="20170802 18:48:50.239" starttime="20170802 18:48:50.238"></status>
</kw>
<status status="PASS" endtime="20170802 18:48:50.240" starttime="20170802 18:48:47.203"></status>
</kw>
<msg timestamp="20170802 18:48:50.241" level="INFO">${l_ping} = True</msg>
<status status="PASS" endtime="20170802 18:48:50.241" starttime="20170802 18:48:47.203"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${l_ping}' == '${False}'</arg>
<arg>Fail</arg>
<arg>msg=Ping Failed</arg>
</arguments>
<status status="PASS" endtime="20170802 18:48:50.242" starttime="20170802 18:48:50.241"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Initialize OpenBMC</arg>
</arguments>
<assign>
<var>${l_rest}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170802 18:48:50.246" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61, headers={},                     cookies=None, auth=None, timeout=20, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170802 18:48:50.247" starttime="20170802 18:48:50.246"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170802 18:48:50.248" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170802 18:48:50.248" starttime="20170802 18:48:50.248"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170802 18:48:50.249" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170802 18:48:50.249" starttime="20170802 18:48:50.248"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170802 18:48:50.249" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170802 18:48:50.249" starttime="20170802 18:48:50.249"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170802 18:49:10.275" level="FAIL">ReadTimeout: HTTPSConnectionPool(host='9.3.21.61', port=443): Read timed out. (read timeout=20.0)</msg>
<status status="FAIL" endtime="20170802 18:49:10.275" starttime="20170802 18:48:50.250"></status>
</kw>
<msg timestamp="20170802 18:49:10.275" level="INFO">${status} = FAIL</msg>
<msg timestamp="20170802 18:49:10.276" level="INFO">${resp} = ReadTimeout: HTTPSConnectionPool(host='9.3.21.61', port=443): Read timed out. (read timeout=20.0)</msg>
<status status="PASS" endtime="20170802 18:49:10.276" starttime="20170802 18:48:50.250"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170802 18:49:10.276" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20170802 18:49:10.277" level="FAIL">ReadTimeout: HTTPSConnectionPool(host='9.3.21.61', port=443): Read timed out. (read timeout=20.0): FAIL != PASS</msg>
<status status="FAIL" endtime="20170802 18:49:10.277" starttime="20170802 18:49:10.276"></status>
</kw>
<status status="FAIL" endtime="20170802 18:49:10.277" starttime="20170802 18:48:50.245"></status>
</kw>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170802 18:49:30.279" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61, headers={},                     cookies=None, auth=None, timeout=20, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170802 18:49:30.280" starttime="20170802 18:49:30.278"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170802 18:49:30.280" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170802 18:49:30.280" starttime="20170802 18:49:30.280"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170802 18:49:30.281" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170802 18:49:30.281" starttime="20170802 18:49:30.281"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170802 18:49:30.282" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170802 18:49:30.282" starttime="20170802 18:49:30.281"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170802 18:49:50.307" level="FAIL">ReadTimeout: HTTPSConnectionPool(host='9.3.21.61', port=443): Read timed out. (read timeout=20.0)</msg>
<status status="FAIL" endtime="20170802 18:49:50.308" starttime="20170802 18:49:30.282"></status>
</kw>
<msg timestamp="20170802 18:49:50.308" level="INFO">${status} = FAIL</msg>
<msg timestamp="20170802 18:49:50.308" level="INFO">${resp} = ReadTimeout: HTTPSConnectionPool(host='9.3.21.61', port=443): Read timed out. (read timeout=20.0)</msg>
<status status="PASS" endtime="20170802 18:49:50.308" starttime="20170802 18:49:30.282"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170802 18:49:50.309" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20170802 18:49:50.309" level="FAIL">ReadTimeout: HTTPSConnectionPool(host='9.3.21.61', port=443): Read timed out. (read timeout=20.0): FAIL != PASS</msg>
<status status="FAIL" endtime="20170802 18:49:50.309" starttime="20170802 18:49:50.308"></status>
</kw>
<status status="FAIL" endtime="20170802 18:49:50.309" starttime="20170802 18:49:30.277"></status>
</kw>
<msg timestamp="20170802 18:49:50.309" level="FAIL">Keyword 'Post Login Request' failed after retrying for 40 seconds. The last error was: ReadTimeout: HTTPSConnectionPool(host='9.3.21.61', port=443): Read timed out. (read timeout=20.0): FAIL != PASS</msg>
<status status="FAIL" endtime="20170802 18:49:50.309" starttime="20170802 18:48:50.245"></status>
</kw>
<status status="FAIL" endtime="20170802 18:49:50.310" starttime="20170802 18:48:50.244"></status>
</kw>
<msg timestamp="20170802 18:49:50.310" level="INFO">${l_rest} = False</msg>
<status status="PASS" endtime="20170802 18:49:50.310" starttime="20170802 18:48:50.243"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${l_rest}' == '${False}'</arg>
<arg>Fail</arg>
<arg>msg=REST Authentication Failed</arg>
</arguments>
<kw name="Fail" library="BuiltIn">
<doc>Fails the test with the given message and optionally alters its tags.</doc>
<arguments>
<arg>msg=REST Authentication Failed</arg>
</arguments>
<msg timestamp="20170802 18:49:50.311" level="FAIL">REST Authentication Failed</msg>
<status status="FAIL" endtime="20170802 18:49:50.311" starttime="20170802 18:49:50.311"></status>
</kw>
<status status="FAIL" endtime="20170802 18:49:50.311" starttime="20170802 18:49:50.310"></status>
</kw>
<status status="FAIL" endtime="20170802 18:49:50.311" starttime="20170802 18:48:47.202"></status>
</kw>
<kw name="Verify Ping and REST Authentication" library="utils">
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Ping Host</arg>
<arg>${OPENBMC_HOST}</arg>
</arguments>
<assign>
<var>${l_ping}</var>
</assign>
<kw name="Ping Host" library="utils">
<arguments>
<arg>${OPENBMC_HOST}</arg>
</arguments>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${host}</arg>
<arg>msg=No host provided</arg>
</arguments>
<msg timestamp="20170802 18:50:00.314" level="INFO">Length is 9</msg>
<status status="PASS" endtime="20170802 18:50:00.314" starttime="20170802 18:50:00.313"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>ping -c 4 ${host}</arg>
</arguments>
<assign>
<var>${RC}</var>
<var>${output}</var>
</assign>
<msg timestamp="20170802 18:50:00.328" level="INFO">Running command 'ping -c 4 9.3.21.61 2&gt;&amp;1'.</msg>
<msg timestamp="20170802 18:50:03.327" level="INFO">${RC} = 0</msg>
<msg timestamp="20170802 18:50:03.327" level="INFO">${output} = PING 9.3.21.61 (9.3.21.61) 56(84) bytes of data.
64 bytes from 9.3.21.61: icmp_seq=1 ttl=62 time=1.50 ms
64 bytes from 9.3.21.61: icmp_seq=2 ttl=62 time=1.44 ms
64 bytes from 9.3.21.61: icmp_seq=3 ttl...</msg>
<status status="PASS" endtime="20170802 18:50:03.327" starttime="20170802 18:50:00.314"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>RC: ${RC}\nOutput:\n${output}</arg>
</arguments>
<msg timestamp="20170802 18:50:03.332" level="INFO">RC: 0
Output:
PING 9.3.21.61 (9.3.21.61) 56(84) bytes of data.
64 bytes from 9.3.21.61: icmp_seq=1 ttl=62 time=1.50 ms
64 bytes from 9.3.21.61: icmp_seq=2 ttl=62 time=1.44 ms
64 bytes from 9.3.21.61: icmp_seq=3 ttl=62 time=0.638 ms
64 bytes from 9.3.21.61: icmp_seq=4 ttl=62 time=1.21 ms

--- 9.3.21.61 ping statistics ---
4 packets transmitted, 4 received, 0% packet loss, time 3004ms
rtt min/avg/max/mdev = 0.638/1.200/1.508/0.346 ms</msg>
<status status="PASS" endtime="20170802 18:50:03.332" starttime="20170802 18:50:03.330"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${RC}</arg>
<arg>${0}</arg>
</arguments>
<status status="PASS" endtime="20170802 18:50:03.332" starttime="20170802 18:50:03.332"></status>
</kw>
<status status="PASS" endtime="20170802 18:50:03.333" starttime="20170802 18:50:00.313"></status>
</kw>
<msg timestamp="20170802 18:50:03.333" level="INFO">${l_ping} = True</msg>
<status status="PASS" endtime="20170802 18:50:03.333" starttime="20170802 18:50:00.312"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${l_ping}' == '${False}'</arg>
<arg>Fail</arg>
<arg>msg=Ping Failed</arg>
</arguments>
<status status="PASS" endtime="20170802 18:50:03.334" starttime="20170802 18:50:03.333"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Initialize OpenBMC</arg>
</arguments>
<assign>
<var>${l_rest}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170802 18:50:03.337" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61, headers={},                     cookies=None, auth=None, timeout=20, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170802 18:50:03.338" starttime="20170802 18:50:03.336"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170802 18:50:03.338" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170802 18:50:03.339" starttime="20170802 18:50:03.338"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170802 18:50:03.339" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170802 18:50:03.339" starttime="20170802 18:50:03.339"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170802 18:50:03.340" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170802 18:50:03.340" starttime="20170802 18:50:03.339"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170802 18:50:23.367" level="FAIL">ReadTimeout: HTTPSConnectionPool(host='9.3.21.61', port=443): Read timed out. (read timeout=20.0)</msg>
<status status="FAIL" endtime="20170802 18:50:23.367" starttime="20170802 18:50:03.341"></status>
</kw>
<msg timestamp="20170802 18:50:23.367" level="INFO">${status} = FAIL</msg>
<msg timestamp="20170802 18:50:23.367" level="INFO">${resp} = ReadTimeout: HTTPSConnectionPool(host='9.3.21.61', port=443): Read timed out. (read timeout=20.0)</msg>
<status status="PASS" endtime="20170802 18:50:23.367" starttime="20170802 18:50:03.340"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170802 18:50:23.368" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20170802 18:50:23.368" level="FAIL">ReadTimeout: HTTPSConnectionPool(host='9.3.21.61', port=443): Read timed out. (read timeout=20.0): FAIL != PASS</msg>
<status status="FAIL" endtime="20170802 18:50:23.368" starttime="20170802 18:50:23.368"></status>
</kw>
<status status="FAIL" endtime="20170802 18:50:23.368" starttime="20170802 18:50:03.336"></status>
</kw>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170802 18:50:43.370" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61, headers={},                     cookies=None, auth=None, timeout=20, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170802 18:50:43.371" starttime="20170802 18:50:43.370"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170802 18:50:43.371" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170802 18:50:43.371" starttime="20170802 18:50:43.371"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170802 18:50:43.372" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170802 18:50:43.372" starttime="20170802 18:50:43.372"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170802 18:50:43.373" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170802 18:50:43.373" starttime="20170802 18:50:43.372"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170802 18:51:03.385" level="FAIL">ReadTimeout: HTTPSConnectionPool(host='9.3.21.61', port=443): Read timed out. (read timeout=20.0)</msg>
<status status="FAIL" endtime="20170802 18:51:03.385" starttime="20170802 18:50:43.373"></status>
</kw>
<msg timestamp="20170802 18:51:03.385" level="INFO">${status} = FAIL</msg>
<msg timestamp="20170802 18:51:03.385" level="INFO">${resp} = ReadTimeout: HTTPSConnectionPool(host='9.3.21.61', port=443): Read timed out. (read timeout=20.0)</msg>
<status status="PASS" endtime="20170802 18:51:03.385" starttime="20170802 18:50:43.373"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170802 18:51:03.386" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20170802 18:51:03.386" level="FAIL">ReadTimeout: HTTPSConnectionPool(host='9.3.21.61', port=443): Read timed out. (read timeout=20.0): FAIL != PASS</msg>
<status status="FAIL" endtime="20170802 18:51:03.387" starttime="20170802 18:51:03.386"></status>
</kw>
<status status="FAIL" endtime="20170802 18:51:03.387" starttime="20170802 18:50:43.369"></status>
</kw>
<msg timestamp="20170802 18:51:03.387" level="FAIL">Keyword 'Post Login Request' failed after retrying for 40 seconds. The last error was: ReadTimeout: HTTPSConnectionPool(host='9.3.21.61', port=443): Read timed out. (read timeout=20.0): FAIL != PASS</msg>
<status status="FAIL" endtime="20170802 18:51:03.387" starttime="20170802 18:50:03.335"></status>
</kw>
<status status="FAIL" endtime="20170802 18:51:03.387" starttime="20170802 18:50:03.334"></status>
</kw>
<msg timestamp="20170802 18:51:03.387" level="INFO">${l_rest} = False</msg>
<status status="PASS" endtime="20170802 18:51:03.387" starttime="20170802 18:50:03.334"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${l_rest}' == '${False}'</arg>
<arg>Fail</arg>
<arg>msg=REST Authentication Failed</arg>
</arguments>
<kw name="Fail" library="BuiltIn">
<doc>Fails the test with the given message and optionally alters its tags.</doc>
<arguments>
<arg>msg=REST Authentication Failed</arg>
</arguments>
<msg timestamp="20170802 18:51:03.389" level="FAIL">REST Authentication Failed</msg>
<status status="FAIL" endtime="20170802 18:51:03.389" starttime="20170802 18:51:03.388"></status>
</kw>
<status status="FAIL" endtime="20170802 18:51:03.389" starttime="20170802 18:51:03.388"></status>
</kw>
<status status="FAIL" endtime="20170802 18:51:03.389" starttime="20170802 18:50:00.312"></status>
</kw>
<kw name="Verify Ping and REST Authentication" library="utils">
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Ping Host</arg>
<arg>${OPENBMC_HOST}</arg>
</arguments>
<assign>
<var>${l_ping}</var>
</assign>
<kw name="Ping Host" library="utils">
<arguments>
<arg>${OPENBMC_HOST}</arg>
</arguments>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${host}</arg>
<arg>msg=No host provided</arg>
</arguments>
<msg timestamp="20170802 18:51:13.391" level="INFO">Length is 9</msg>
<status status="PASS" endtime="20170802 18:51:13.392" starttime="20170802 18:51:13.391"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>ping -c 4 ${host}</arg>
</arguments>
<assign>
<var>${RC}</var>
<var>${output}</var>
</assign>
<msg timestamp="20170802 18:51:13.396" level="INFO">Running command 'ping -c 4 9.3.21.61 2&gt;&amp;1'.</msg>
<msg timestamp="20170802 18:51:16.399" level="INFO">${RC} = 0</msg>
<msg timestamp="20170802 18:51:16.399" level="INFO">${output} = PING 9.3.21.61 (9.3.21.61) 56(84) bytes of data.
64 bytes from 9.3.21.61: icmp_seq=1 ttl=62 time=1.87 ms
64 bytes from 9.3.21.61: icmp_seq=2 ttl=62 time=0.569 ms
64 bytes from 9.3.21.61: icmp_seq=3 tt...</msg>
<status status="PASS" endtime="20170802 18:51:16.399" starttime="20170802 18:51:13.392"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>RC: ${RC}\nOutput:\n${output}</arg>
</arguments>
<msg timestamp="20170802 18:51:16.402" level="INFO">RC: 0
Output:
PING 9.3.21.61 (9.3.21.61) 56(84) bytes of data.
64 bytes from 9.3.21.61: icmp_seq=1 ttl=62 time=1.87 ms
64 bytes from 9.3.21.61: icmp_seq=2 ttl=62 time=0.569 ms
64 bytes from 9.3.21.61: icmp_seq=3 ttl=62 time=0.578 ms
64 bytes from 9.3.21.61: icmp_seq=4 ttl=62 time=0.573 ms

--- 9.3.21.61 ping statistics ---
4 packets transmitted, 4 received, 0% packet loss, time 2999ms
rtt min/avg/max/mdev = 0.569/0.898/1.873/0.563 ms</msg>
<status status="PASS" endtime="20170802 18:51:16.403" starttime="20170802 18:51:16.402"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${RC}</arg>
<arg>${0}</arg>
</arguments>
<status status="PASS" endtime="20170802 18:51:16.403" starttime="20170802 18:51:16.403"></status>
</kw>
<status status="PASS" endtime="20170802 18:51:16.403" starttime="20170802 18:51:13.391"></status>
</kw>
<msg timestamp="20170802 18:51:16.404" level="INFO">${l_ping} = True</msg>
<status status="PASS" endtime="20170802 18:51:16.404" starttime="20170802 18:51:13.390"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${l_ping}' == '${False}'</arg>
<arg>Fail</arg>
<arg>msg=Ping Failed</arg>
</arguments>
<status status="PASS" endtime="20170802 18:51:16.404" starttime="20170802 18:51:16.404"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Initialize OpenBMC</arg>
</arguments>
<assign>
<var>${l_rest}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170802 18:51:16.407" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61, headers={},                     cookies=None, auth=None, timeout=20, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170802 18:51:16.409" starttime="20170802 18:51:16.407"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170802 18:51:16.410" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170802 18:51:16.410" starttime="20170802 18:51:16.409"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170802 18:51:16.410" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170802 18:51:16.410" starttime="20170802 18:51:16.410"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170802 18:51:16.411" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170802 18:51:16.411" starttime="20170802 18:51:16.411"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170802 18:51:36.433" level="FAIL">ReadTimeout: HTTPSConnectionPool(host='9.3.21.61', port=443): Read timed out. (read timeout=20.0)</msg>
<status status="FAIL" endtime="20170802 18:51:36.434" starttime="20170802 18:51:16.412"></status>
</kw>
<msg timestamp="20170802 18:51:36.434" level="INFO">${status} = FAIL</msg>
<msg timestamp="20170802 18:51:36.434" level="INFO">${resp} = ReadTimeout: HTTPSConnectionPool(host='9.3.21.61', port=443): Read timed out. (read timeout=20.0)</msg>
<status status="PASS" endtime="20170802 18:51:36.434" starttime="20170802 18:51:16.411"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170802 18:51:36.435" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20170802 18:51:36.435" level="FAIL">ReadTimeout: HTTPSConnectionPool(host='9.3.21.61', port=443): Read timed out. (read timeout=20.0): FAIL != PASS</msg>
<status status="FAIL" endtime="20170802 18:51:36.435" starttime="20170802 18:51:36.434"></status>
</kw>
<status status="FAIL" endtime="20170802 18:51:36.435" starttime="20170802 18:51:16.406"></status>
</kw>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170802 18:51:56.437" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61, headers={},                     cookies=None, auth=None, timeout=20, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170802 18:51:56.437" starttime="20170802 18:51:56.437"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170802 18:51:56.438" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170802 18:51:56.438" starttime="20170802 18:51:56.438"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170802 18:51:56.439" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170802 18:51:56.439" starttime="20170802 18:51:56.438"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170802 18:51:56.440" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170802 18:51:56.440" starttime="20170802 18:51:56.439"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170802 18:52:16.461" level="FAIL">ReadTimeout: HTTPSConnectionPool(host='9.3.21.61', port=443): Read timed out. (read timeout=20.0)</msg>
<status status="FAIL" endtime="20170802 18:52:16.461" starttime="20170802 18:51:56.440"></status>
</kw>
<msg timestamp="20170802 18:52:16.461" level="INFO">${status} = FAIL</msg>
<msg timestamp="20170802 18:52:16.462" level="INFO">${resp} = ReadTimeout: HTTPSConnectionPool(host='9.3.21.61', port=443): Read timed out. (read timeout=20.0)</msg>
<status status="PASS" endtime="20170802 18:52:16.462" starttime="20170802 18:51:56.440"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170802 18:52:16.462" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20170802 18:52:16.462" level="FAIL">ReadTimeout: HTTPSConnectionPool(host='9.3.21.61', port=443): Read timed out. (read timeout=20.0): FAIL != PASS</msg>
<status status="FAIL" endtime="20170802 18:52:16.463" starttime="20170802 18:52:16.462"></status>
</kw>
<status status="FAIL" endtime="20170802 18:52:16.463" starttime="20170802 18:51:56.436"></status>
</kw>
<msg timestamp="20170802 18:52:16.463" level="FAIL">Keyword 'Post Login Request' failed after retrying for 40 seconds. The last error was: ReadTimeout: HTTPSConnectionPool(host='9.3.21.61', port=443): Read timed out. (read timeout=20.0): FAIL != PASS</msg>
<status status="FAIL" endtime="20170802 18:52:16.463" starttime="20170802 18:51:16.406"></status>
</kw>
<status status="FAIL" endtime="20170802 18:52:16.463" starttime="20170802 18:51:16.405"></status>
</kw>
<msg timestamp="20170802 18:52:16.463" level="INFO">${l_rest} = False</msg>
<status status="PASS" endtime="20170802 18:52:16.463" starttime="20170802 18:51:16.405"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${l_rest}' == '${False}'</arg>
<arg>Fail</arg>
<arg>msg=REST Authentication Failed</arg>
</arguments>
<kw name="Fail" library="BuiltIn">
<doc>Fails the test with the given message and optionally alters its tags.</doc>
<arguments>
<arg>msg=REST Authentication Failed</arg>
</arguments>
<msg timestamp="20170802 18:52:16.464" level="FAIL">REST Authentication Failed</msg>
<status status="FAIL" endtime="20170802 18:52:16.464" starttime="20170802 18:52:16.464"></status>
</kw>
<status status="FAIL" endtime="20170802 18:52:16.465" starttime="20170802 18:52:16.464"></status>
</kw>
<status status="FAIL" endtime="20170802 18:52:16.465" starttime="20170802 18:51:13.389"></status>
</kw>
<kw name="Verify Ping and REST Authentication" library="utils">
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Ping Host</arg>
<arg>${OPENBMC_HOST}</arg>
</arguments>
<assign>
<var>${l_ping}</var>
</assign>
<kw name="Ping Host" library="utils">
<arguments>
<arg>${OPENBMC_HOST}</arg>
</arguments>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${host}</arg>
<arg>msg=No host provided</arg>
</arguments>
<msg timestamp="20170802 18:52:26.467" level="INFO">Length is 9</msg>
<status status="PASS" endtime="20170802 18:52:26.467" starttime="20170802 18:52:26.467"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>ping -c 4 ${host}</arg>
</arguments>
<assign>
<var>${RC}</var>
<var>${output}</var>
</assign>
<msg timestamp="20170802 18:52:26.471" level="INFO">Running command 'ping -c 4 9.3.21.61 2&gt;&amp;1'.</msg>
<msg timestamp="20170802 18:52:29.481" level="INFO">${RC} = 0</msg>
<msg timestamp="20170802 18:52:29.482" level="INFO">${output} = PING 9.3.21.61 (9.3.21.61) 56(84) bytes of data.
64 bytes from 9.3.21.61: icmp_seq=1 ttl=62 time=1.05 ms
64 bytes from 9.3.21.61: icmp_seq=2 ttl=62 time=1.28 ms
64 bytes from 9.3.21.61: icmp_seq=3 ttl...</msg>
<status status="PASS" endtime="20170802 18:52:29.482" starttime="20170802 18:52:26.468"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>RC: ${RC}\nOutput:\n${output}</arg>
</arguments>
<msg timestamp="20170802 18:52:29.500" level="INFO">RC: 0
Output:
PING 9.3.21.61 (9.3.21.61) 56(84) bytes of data.
64 bytes from 9.3.21.61: icmp_seq=1 ttl=62 time=1.05 ms
64 bytes from 9.3.21.61: icmp_seq=2 ttl=62 time=1.28 ms
64 bytes from 9.3.21.61: icmp_seq=3 ttl=62 time=0.585 ms
64 bytes from 9.3.21.61: icmp_seq=4 ttl=62 time=0.548 ms

--- 9.3.21.61 ping statistics ---
4 packets transmitted, 4 received, 0% packet loss, time 3000ms
rtt min/avg/max/mdev = 0.548/0.868/1.280/0.311 ms</msg>
<status status="PASS" endtime="20170802 18:52:29.500" starttime="20170802 18:52:29.496"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${RC}</arg>
<arg>${0}</arg>
</arguments>
<status status="PASS" endtime="20170802 18:52:29.501" starttime="20170802 18:52:29.500"></status>
</kw>
<status status="PASS" endtime="20170802 18:52:29.501" starttime="20170802 18:52:26.466"></status>
</kw>
<msg timestamp="20170802 18:52:29.501" level="INFO">${l_ping} = True</msg>
<status status="PASS" endtime="20170802 18:52:29.501" starttime="20170802 18:52:26.466"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${l_ping}' == '${False}'</arg>
<arg>Fail</arg>
<arg>msg=Ping Failed</arg>
</arguments>
<status status="PASS" endtime="20170802 18:52:29.503" starttime="20170802 18:52:29.503"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Initialize OpenBMC</arg>
</arguments>
<assign>
<var>${l_rest}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170802 18:52:29.512" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61, headers={},                     cookies=None, auth=None, timeout=20, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170802 18:52:29.517" starttime="20170802 18:52:29.511"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170802 18:52:29.517" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170802 18:52:29.517" starttime="20170802 18:52:29.517"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170802 18:52:29.518" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170802 18:52:29.518" starttime="20170802 18:52:29.518"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170802 18:52:29.519" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170802 18:52:29.519" starttime="20170802 18:52:29.518"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170802 18:52:49.541" level="FAIL">ReadTimeout: HTTPSConnectionPool(host='9.3.21.61', port=443): Read timed out. (read timeout=20.0)</msg>
<status status="FAIL" endtime="20170802 18:52:49.542" starttime="20170802 18:52:29.519"></status>
</kw>
<msg timestamp="20170802 18:52:49.542" level="INFO">${status} = FAIL</msg>
<msg timestamp="20170802 18:52:49.542" level="INFO">${resp} = ReadTimeout: HTTPSConnectionPool(host='9.3.21.61', port=443): Read timed out. (read timeout=20.0)</msg>
<status status="PASS" endtime="20170802 18:52:49.542" starttime="20170802 18:52:29.519"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170802 18:52:49.543" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20170802 18:52:49.543" level="FAIL">ReadTimeout: HTTPSConnectionPool(host='9.3.21.61', port=443): Read timed out. (read timeout=20.0): FAIL != PASS</msg>
<status status="FAIL" endtime="20170802 18:52:49.543" starttime="20170802 18:52:49.542"></status>
</kw>
<status status="FAIL" endtime="20170802 18:52:49.543" starttime="20170802 18:52:29.507"></status>
</kw>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170802 18:53:09.545" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61, headers={},                     cookies=None, auth=None, timeout=20, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170802 18:53:09.545" starttime="20170802 18:53:09.545"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170802 18:53:09.546" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170802 18:53:09.546" starttime="20170802 18:53:09.546"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170802 18:53:09.547" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170802 18:53:09.547" starttime="20170802 18:53:09.546"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170802 18:53:09.547" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170802 18:53:09.547" starttime="20170802 18:53:09.547"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170802 18:53:29.569" level="FAIL">ReadTimeout: HTTPSConnectionPool(host='9.3.21.61', port=443): Read timed out. (read timeout=20.0)</msg>
<status status="FAIL" endtime="20170802 18:53:29.569" starttime="20170802 18:53:09.548"></status>
</kw>
<msg timestamp="20170802 18:53:29.570" level="INFO">${status} = FAIL</msg>
<msg timestamp="20170802 18:53:29.570" level="INFO">${resp} = ReadTimeout: HTTPSConnectionPool(host='9.3.21.61', port=443): Read timed out. (read timeout=20.0)</msg>
<status status="PASS" endtime="20170802 18:53:29.570" starttime="20170802 18:53:09.548"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170802 18:53:29.571" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20170802 18:53:29.571" level="FAIL">ReadTimeout: HTTPSConnectionPool(host='9.3.21.61', port=443): Read timed out. (read timeout=20.0): FAIL != PASS</msg>
<status status="FAIL" endtime="20170802 18:53:29.571" starttime="20170802 18:53:29.570"></status>
</kw>
<status status="FAIL" endtime="20170802 18:53:29.571" starttime="20170802 18:53:09.544"></status>
</kw>
<msg timestamp="20170802 18:53:29.571" level="FAIL">Keyword 'Post Login Request' failed after retrying for 40 seconds. The last error was: ReadTimeout: HTTPSConnectionPool(host='9.3.21.61', port=443): Read timed out. (read timeout=20.0): FAIL != PASS</msg>
<status status="FAIL" endtime="20170802 18:53:29.571" starttime="20170802 18:52:29.506"></status>
</kw>
<status status="FAIL" endtime="20170802 18:53:29.571" starttime="20170802 18:52:29.504"></status>
</kw>
<msg timestamp="20170802 18:53:29.571" level="INFO">${l_rest} = False</msg>
<status status="PASS" endtime="20170802 18:53:29.572" starttime="20170802 18:52:29.504"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${l_rest}' == '${False}'</arg>
<arg>Fail</arg>
<arg>msg=REST Authentication Failed</arg>
</arguments>
<kw name="Fail" library="BuiltIn">
<doc>Fails the test with the given message and optionally alters its tags.</doc>
<arguments>
<arg>msg=REST Authentication Failed</arg>
</arguments>
<msg timestamp="20170802 18:53:29.573" level="FAIL">REST Authentication Failed</msg>
<status status="FAIL" endtime="20170802 18:53:29.573" starttime="20170802 18:53:29.572"></status>
</kw>
<status status="FAIL" endtime="20170802 18:53:29.573" starttime="20170802 18:53:29.572"></status>
</kw>
<status status="FAIL" endtime="20170802 18:53:29.573" starttime="20170802 18:52:26.465"></status>
</kw>
<kw name="Verify Ping and REST Authentication" library="utils">
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Ping Host</arg>
<arg>${OPENBMC_HOST}</arg>
</arguments>
<assign>
<var>${l_ping}</var>
</assign>
<kw name="Ping Host" library="utils">
<arguments>
<arg>${OPENBMC_HOST}</arg>
</arguments>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${host}</arg>
<arg>msg=No host provided</arg>
</arguments>
<msg timestamp="20170802 18:53:39.576" level="INFO">Length is 9</msg>
<status status="PASS" endtime="20170802 18:53:39.576" starttime="20170802 18:53:39.575"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>ping -c 4 ${host}</arg>
</arguments>
<assign>
<var>${RC}</var>
<var>${output}</var>
</assign>
<msg timestamp="20170802 18:53:39.579" level="INFO">Running command 'ping -c 4 9.3.21.61 2&gt;&amp;1'.</msg>
<msg timestamp="20170802 18:53:42.585" level="INFO">${RC} = 0</msg>
<msg timestamp="20170802 18:53:42.585" level="INFO">${output} = PING 9.3.21.61 (9.3.21.61) 56(84) bytes of data.
64 bytes from 9.3.21.61: icmp_seq=1 ttl=62 time=1.32 ms
64 bytes from 9.3.21.61: icmp_seq=2 ttl=62 time=0.618 ms
64 bytes from 9.3.21.61: icmp_seq=3 tt...</msg>
<status status="PASS" endtime="20170802 18:53:42.585" starttime="20170802 18:53:39.576"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>RC: ${RC}\nOutput:\n${output}</arg>
</arguments>
<msg timestamp="20170802 18:53:42.588" level="INFO">RC: 0
Output:
PING 9.3.21.61 (9.3.21.61) 56(84) bytes of data.
64 bytes from 9.3.21.61: icmp_seq=1 ttl=62 time=1.32 ms
64 bytes from 9.3.21.61: icmp_seq=2 ttl=62 time=0.618 ms
64 bytes from 9.3.21.61: icmp_seq=3 ttl=62 time=1.15 ms
64 bytes from 9.3.21.61: icmp_seq=4 ttl=62 time=0.565 ms

--- 9.3.21.61 ping statistics ---
4 packets transmitted, 4 received, 0% packet loss, time 3001ms
rtt min/avg/max/mdev = 0.565/0.916/1.323/0.331 ms</msg>
<status status="PASS" endtime="20170802 18:53:42.588" starttime="20170802 18:53:42.588"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${RC}</arg>
<arg>${0}</arg>
</arguments>
<status status="PASS" endtime="20170802 18:53:42.589" starttime="20170802 18:53:42.589"></status>
</kw>
<status status="PASS" endtime="20170802 18:53:42.589" starttime="20170802 18:53:39.575"></status>
</kw>
<msg timestamp="20170802 18:53:42.590" level="INFO">${l_ping} = True</msg>
<status status="PASS" endtime="20170802 18:53:42.590" starttime="20170802 18:53:39.574"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${l_ping}' == '${False}'</arg>
<arg>Fail</arg>
<arg>msg=Ping Failed</arg>
</arguments>
<status status="PASS" endtime="20170802 18:53:42.591" starttime="20170802 18:53:42.590"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Initialize OpenBMC</arg>
</arguments>
<assign>
<var>${l_rest}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170802 18:53:42.595" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61, headers={},                     cookies=None, auth=None, timeout=20, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170802 18:53:42.595" starttime="20170802 18:53:42.594"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170802 18:53:42.596" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170802 18:53:42.596" starttime="20170802 18:53:42.596"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170802 18:53:42.597" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170802 18:53:42.597" starttime="20170802 18:53:42.596"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170802 18:53:42.597" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170802 18:53:42.597" starttime="20170802 18:53:42.597"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170802 18:54:02.605" level="FAIL">ReadTimeout: HTTPSConnectionPool(host='9.3.21.61', port=443): Read timed out. (read timeout=20.0)</msg>
<status status="FAIL" endtime="20170802 18:54:02.605" starttime="20170802 18:53:42.598"></status>
</kw>
<msg timestamp="20170802 18:54:02.606" level="INFO">${status} = FAIL</msg>
<msg timestamp="20170802 18:54:02.606" level="INFO">${resp} = ReadTimeout: HTTPSConnectionPool(host='9.3.21.61', port=443): Read timed out. (read timeout=20.0)</msg>
<status status="PASS" endtime="20170802 18:54:02.606" starttime="20170802 18:53:42.598"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170802 18:54:02.606" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20170802 18:54:02.607" level="FAIL">ReadTimeout: HTTPSConnectionPool(host='9.3.21.61', port=443): Read timed out. (read timeout=20.0): FAIL != PASS</msg>
<status status="FAIL" endtime="20170802 18:54:02.607" starttime="20170802 18:54:02.606"></status>
</kw>
<status status="FAIL" endtime="20170802 18:54:02.607" starttime="20170802 18:53:42.594"></status>
</kw>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170802 18:54:22.609" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61, headers={},                     cookies=None, auth=None, timeout=20, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170802 18:54:22.609" starttime="20170802 18:54:22.609"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170802 18:54:22.610" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170802 18:54:22.610" starttime="20170802 18:54:22.610"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170802 18:54:22.611" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170802 18:54:22.611" starttime="20170802 18:54:22.610"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170802 18:54:22.611" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170802 18:54:22.611" starttime="20170802 18:54:22.611"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170802 18:54:42.617" level="FAIL">ReadTimeout: HTTPSConnectionPool(host='9.3.21.61', port=443): Read timed out. (read timeout=20.0)</msg>
<status status="FAIL" endtime="20170802 18:54:42.617" starttime="20170802 18:54:22.612"></status>
</kw>
<msg timestamp="20170802 18:54:42.618" level="INFO">${status} = FAIL</msg>
<msg timestamp="20170802 18:54:42.618" level="INFO">${resp} = ReadTimeout: HTTPSConnectionPool(host='9.3.21.61', port=443): Read timed out. (read timeout=20.0)</msg>
<status status="PASS" endtime="20170802 18:54:42.618" starttime="20170802 18:54:22.612"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170802 18:54:42.618" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20170802 18:54:42.619" level="FAIL">ReadTimeout: HTTPSConnectionPool(host='9.3.21.61', port=443): Read timed out. (read timeout=20.0): FAIL != PASS</msg>
<status status="FAIL" endtime="20170802 18:54:42.619" starttime="20170802 18:54:42.618"></status>
</kw>
<status status="FAIL" endtime="20170802 18:54:42.619" starttime="20170802 18:54:22.607"></status>
</kw>
<msg timestamp="20170802 18:54:42.619" level="FAIL">Keyword 'Post Login Request' failed after retrying for 40 seconds. The last error was: ReadTimeout: HTTPSConnectionPool(host='9.3.21.61', port=443): Read timed out. (read timeout=20.0): FAIL != PASS</msg>
<status status="FAIL" endtime="20170802 18:54:42.619" starttime="20170802 18:53:42.593"></status>
</kw>
<status status="FAIL" endtime="20170802 18:54:42.619" starttime="20170802 18:53:42.592"></status>
</kw>
<msg timestamp="20170802 18:54:42.619" level="INFO">${l_rest} = False</msg>
<status status="PASS" endtime="20170802 18:54:42.619" starttime="20170802 18:53:42.591"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${l_rest}' == '${False}'</arg>
<arg>Fail</arg>
<arg>msg=REST Authentication Failed</arg>
</arguments>
<kw name="Fail" library="BuiltIn">
<doc>Fails the test with the given message and optionally alters its tags.</doc>
<arguments>
<arg>msg=REST Authentication Failed</arg>
</arguments>
<msg timestamp="20170802 18:54:42.621" level="FAIL">REST Authentication Failed</msg>
<status status="FAIL" endtime="20170802 18:54:42.621" starttime="20170802 18:54:42.621"></status>
</kw>
<status status="FAIL" endtime="20170802 18:54:42.621" starttime="20170802 18:54:42.620"></status>
</kw>
<status status="FAIL" endtime="20170802 18:54:42.621" starttime="20170802 18:53:39.574"></status>
</kw>
<kw name="Verify Ping and REST Authentication" library="utils">
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Ping Host</arg>
<arg>${OPENBMC_HOST}</arg>
</arguments>
<assign>
<var>${l_ping}</var>
</assign>
<kw name="Ping Host" library="utils">
<arguments>
<arg>${OPENBMC_HOST}</arg>
</arguments>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${host}</arg>
<arg>msg=No host provided</arg>
</arguments>
<msg timestamp="20170802 18:54:52.624" level="INFO">Length is 9</msg>
<status status="PASS" endtime="20170802 18:54:52.624" starttime="20170802 18:54:52.623"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>ping -c 4 ${host}</arg>
</arguments>
<assign>
<var>${RC}</var>
<var>${output}</var>
</assign>
<msg timestamp="20170802 18:54:52.628" level="INFO">Running command 'ping -c 4 9.3.21.61 2&gt;&amp;1'.</msg>
<msg timestamp="20170802 18:54:55.630" level="INFO">${RC} = 0</msg>
<msg timestamp="20170802 18:54:55.630" level="INFO">${output} = PING 9.3.21.61 (9.3.21.61) 56(84) bytes of data.
64 bytes from 9.3.21.61: icmp_seq=1 ttl=62 time=0.710 ms
64 bytes from 9.3.21.61: icmp_seq=2 ttl=62 time=0.530 ms
64 bytes from 9.3.21.61: icmp_seq=3 t...</msg>
<status status="PASS" endtime="20170802 18:54:55.630" starttime="20170802 18:54:52.624"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>RC: ${RC}\nOutput:\n${output}</arg>
</arguments>
<msg timestamp="20170802 18:54:55.634" level="INFO">RC: 0
Output:
PING 9.3.21.61 (9.3.21.61) 56(84) bytes of data.
64 bytes from 9.3.21.61: icmp_seq=1 ttl=62 time=0.710 ms
64 bytes from 9.3.21.61: icmp_seq=2 ttl=62 time=0.530 ms
64 bytes from 9.3.21.61: icmp_seq=3 ttl=62 time=0.540 ms
64 bytes from 9.3.21.61: icmp_seq=4 ttl=62 time=0.516 ms

--- 9.3.21.61 ping statistics ---
4 packets transmitted, 4 received, 0% packet loss, time 2999ms
rtt min/avg/max/mdev = 0.516/0.574/0.710/0.078 ms</msg>
<status status="PASS" endtime="20170802 18:54:55.634" starttime="20170802 18:54:55.633"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${RC}</arg>
<arg>${0}</arg>
</arguments>
<status status="PASS" endtime="20170802 18:54:55.634" starttime="20170802 18:54:55.634"></status>
</kw>
<status status="PASS" endtime="20170802 18:54:55.635" starttime="20170802 18:54:52.623"></status>
</kw>
<msg timestamp="20170802 18:54:55.635" level="INFO">${l_ping} = True</msg>
<status status="PASS" endtime="20170802 18:54:55.635" starttime="20170802 18:54:52.622"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${l_ping}' == '${False}'</arg>
<arg>Fail</arg>
<arg>msg=Ping Failed</arg>
</arguments>
<status status="PASS" endtime="20170802 18:54:55.636" starttime="20170802 18:54:55.635"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Initialize OpenBMC</arg>
</arguments>
<assign>
<var>${l_rest}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170802 18:54:55.639" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61, headers={},                     cookies=None, auth=None, timeout=20, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170802 18:54:55.640" starttime="20170802 18:54:55.638"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170802 18:54:55.640" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170802 18:54:55.640" starttime="20170802 18:54:55.640"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170802 18:54:55.641" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170802 18:54:55.641" starttime="20170802 18:54:55.641"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170802 18:54:55.642" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170802 18:54:55.642" starttime="20170802 18:54:55.641"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170802 18:55:15.667" level="FAIL">ReadTimeout: HTTPSConnectionPool(host='9.3.21.61', port=443): Read timed out. (read timeout=20.0)</msg>
<status status="FAIL" endtime="20170802 18:55:15.667" starttime="20170802 18:54:55.643"></status>
</kw>
<msg timestamp="20170802 18:55:15.668" level="INFO">${status} = FAIL</msg>
<msg timestamp="20170802 18:55:15.668" level="INFO">${resp} = ReadTimeout: HTTPSConnectionPool(host='9.3.21.61', port=443): Read timed out. (read timeout=20.0)</msg>
<status status="PASS" endtime="20170802 18:55:15.668" starttime="20170802 18:54:55.642"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170802 18:55:15.668" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20170802 18:55:15.669" level="FAIL">ReadTimeout: HTTPSConnectionPool(host='9.3.21.61', port=443): Read timed out. (read timeout=20.0): FAIL != PASS</msg>
<status status="FAIL" endtime="20170802 18:55:15.669" starttime="20170802 18:55:15.668"></status>
</kw>
<status status="FAIL" endtime="20170802 18:55:15.669" starttime="20170802 18:54:55.638"></status>
</kw>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170802 18:55:35.671" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61, headers={},                     cookies=None, auth=None, timeout=20, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170802 18:55:35.671" starttime="20170802 18:55:35.670"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170802 18:55:35.672" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170802 18:55:35.672" starttime="20170802 18:55:35.672"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170802 18:55:35.673" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170802 18:55:35.673" starttime="20170802 18:55:35.672"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170802 18:55:35.674" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170802 18:55:35.674" starttime="20170802 18:55:35.673"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170802 18:55:55.700" level="FAIL">ReadTimeout: HTTPSConnectionPool(host='9.3.21.61', port=443): Read timed out. (read timeout=20.0)</msg>
<status status="FAIL" endtime="20170802 18:55:55.700" starttime="20170802 18:55:35.674"></status>
</kw>
<msg timestamp="20170802 18:55:55.700" level="INFO">${status} = FAIL</msg>
<msg timestamp="20170802 18:55:55.700" level="INFO">${resp} = ReadTimeout: HTTPSConnectionPool(host='9.3.21.61', port=443): Read timed out. (read timeout=20.0)</msg>
<status status="PASS" endtime="20170802 18:55:55.700" starttime="20170802 18:55:35.674"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170802 18:55:55.701" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20170802 18:55:55.701" level="FAIL">ReadTimeout: HTTPSConnectionPool(host='9.3.21.61', port=443): Read timed out. (read timeout=20.0): FAIL != PASS</msg>
<status status="FAIL" endtime="20170802 18:55:55.701" starttime="20170802 18:55:55.701"></status>
</kw>
<status status="FAIL" endtime="20170802 18:55:55.702" starttime="20170802 18:55:35.669"></status>
</kw>
<msg timestamp="20170802 18:55:55.702" level="FAIL">Keyword 'Post Login Request' failed after retrying for 40 seconds. The last error was: ReadTimeout: HTTPSConnectionPool(host='9.3.21.61', port=443): Read timed out. (read timeout=20.0): FAIL != PASS</msg>
<status status="FAIL" endtime="20170802 18:55:55.702" starttime="20170802 18:54:55.637"></status>
</kw>
<status status="FAIL" endtime="20170802 18:55:55.702" starttime="20170802 18:54:55.636"></status>
</kw>
<msg timestamp="20170802 18:55:55.702" level="INFO">${l_rest} = False</msg>
<status status="PASS" endtime="20170802 18:55:55.702" starttime="20170802 18:54:55.636"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${l_rest}' == '${False}'</arg>
<arg>Fail</arg>
<arg>msg=REST Authentication Failed</arg>
</arguments>
<kw name="Fail" library="BuiltIn">
<doc>Fails the test with the given message and optionally alters its tags.</doc>
<arguments>
<arg>msg=REST Authentication Failed</arg>
</arguments>
<msg timestamp="20170802 18:55:55.703" level="FAIL">REST Authentication Failed</msg>
<status status="FAIL" endtime="20170802 18:55:55.703" starttime="20170802 18:55:55.703"></status>
</kw>
<status status="FAIL" endtime="20170802 18:55:55.704" starttime="20170802 18:55:55.703"></status>
</kw>
<status status="FAIL" endtime="20170802 18:55:55.704" starttime="20170802 18:54:52.622"></status>
</kw>
<kw name="Verify Ping and REST Authentication" library="utils">
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Ping Host</arg>
<arg>${OPENBMC_HOST}</arg>
</arguments>
<assign>
<var>${l_ping}</var>
</assign>
<kw name="Ping Host" library="utils">
<arguments>
<arg>${OPENBMC_HOST}</arg>
</arguments>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${host}</arg>
<arg>msg=No host provided</arg>
</arguments>
<msg timestamp="20170802 18:56:05.706" level="INFO">Length is 9</msg>
<status status="PASS" endtime="20170802 18:56:05.706" starttime="20170802 18:56:05.706"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>ping -c 4 ${host}</arg>
</arguments>
<assign>
<var>${RC}</var>
<var>${output}</var>
</assign>
<msg timestamp="20170802 18:56:05.710" level="INFO">Running command 'ping -c 4 9.3.21.61 2&gt;&amp;1'.</msg>
<msg timestamp="20170802 18:56:08.715" level="INFO">${RC} = 0</msg>
<msg timestamp="20170802 18:56:08.716" level="INFO">${output} = PING 9.3.21.61 (9.3.21.61) 56(84) bytes of data.
64 bytes from 9.3.21.61: icmp_seq=1 ttl=62 time=0.910 ms
64 bytes from 9.3.21.61: icmp_seq=2 ttl=62 time=1.10 ms
64 bytes from 9.3.21.61: icmp_seq=3 tt...</msg>
<status status="PASS" endtime="20170802 18:56:08.716" starttime="20170802 18:56:05.706"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>RC: ${RC}\nOutput:\n${output}</arg>
</arguments>
<msg timestamp="20170802 18:56:08.719" level="INFO">RC: 0
Output:
PING 9.3.21.61 (9.3.21.61) 56(84) bytes of data.
64 bytes from 9.3.21.61: icmp_seq=1 ttl=62 time=0.910 ms
64 bytes from 9.3.21.61: icmp_seq=2 ttl=62 time=1.10 ms
64 bytes from 9.3.21.61: icmp_seq=3 ttl=62 time=0.619 ms
64 bytes from 9.3.21.61: icmp_seq=4 ttl=62 time=1.20 ms

--- 9.3.21.61 ping statistics ---
4 packets transmitted, 4 received, 0% packet loss, time 3001ms
rtt min/avg/max/mdev = 0.619/0.959/1.205/0.223 ms</msg>
<status status="PASS" endtime="20170802 18:56:08.719" starttime="20170802 18:56:08.718"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${RC}</arg>
<arg>${0}</arg>
</arguments>
<status status="PASS" endtime="20170802 18:56:08.719" starttime="20170802 18:56:08.719"></status>
</kw>
<status status="PASS" endtime="20170802 18:56:08.720" starttime="20170802 18:56:05.705"></status>
</kw>
<msg timestamp="20170802 18:56:08.720" level="INFO">${l_ping} = True</msg>
<status status="PASS" endtime="20170802 18:56:08.720" starttime="20170802 18:56:05.705"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${l_ping}' == '${False}'</arg>
<arg>Fail</arg>
<arg>msg=Ping Failed</arg>
</arguments>
<status status="PASS" endtime="20170802 18:56:08.721" starttime="20170802 18:56:08.720"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Initialize OpenBMC</arg>
</arguments>
<assign>
<var>${l_rest}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170802 18:56:08.724" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61, headers={},                     cookies=None, auth=None, timeout=20, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170802 18:56:08.725" starttime="20170802 18:56:08.723"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170802 18:56:08.726" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170802 18:56:08.726" starttime="20170802 18:56:08.725"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170802 18:56:08.726" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170802 18:56:08.726" starttime="20170802 18:56:08.726"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170802 18:56:08.727" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170802 18:56:08.727" starttime="20170802 18:56:08.727"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170802 18:56:28.755" level="FAIL">ReadTimeout: HTTPSConnectionPool(host='9.3.21.61', port=443): Read timed out. (read timeout=20.0)</msg>
<status status="FAIL" endtime="20170802 18:56:28.756" starttime="20170802 18:56:08.728"></status>
</kw>
<msg timestamp="20170802 18:56:28.756" level="INFO">${status} = FAIL</msg>
<msg timestamp="20170802 18:56:28.756" level="INFO">${resp} = ReadTimeout: HTTPSConnectionPool(host='9.3.21.61', port=443): Read timed out. (read timeout=20.0)</msg>
<status status="PASS" endtime="20170802 18:56:28.756" starttime="20170802 18:56:08.728"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170802 18:56:28.757" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20170802 18:56:28.757" level="FAIL">ReadTimeout: HTTPSConnectionPool(host='9.3.21.61', port=443): Read timed out. (read timeout=20.0): FAIL != PASS</msg>
<status status="FAIL" endtime="20170802 18:56:28.757" starttime="20170802 18:56:28.757"></status>
</kw>
<status status="FAIL" endtime="20170802 18:56:28.757" starttime="20170802 18:56:08.723"></status>
</kw>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170802 18:56:48.760" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61, headers={},                     cookies=None, auth=None, timeout=20, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170802 18:56:48.761" starttime="20170802 18:56:48.759"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170802 18:56:48.761" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170802 18:56:48.761" starttime="20170802 18:56:48.761"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170802 18:56:48.762" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170802 18:56:48.762" starttime="20170802 18:56:48.761"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170802 18:56:48.763" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170802 18:56:48.763" starttime="20170802 18:56:48.762"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170802 18:57:08.788" level="FAIL">ReadTimeout: HTTPSConnectionPool(host='9.3.21.61', port=443): Read timed out. (read timeout=20.0)</msg>
<status status="FAIL" endtime="20170802 18:57:08.790" starttime="20170802 18:56:48.763"></status>
</kw>
<msg timestamp="20170802 18:57:08.790" level="INFO">${status} = FAIL</msg>
<msg timestamp="20170802 18:57:08.790" level="INFO">${resp} = ReadTimeout: HTTPSConnectionPool(host='9.3.21.61', port=443): Read timed out. (read timeout=20.0)</msg>
<status status="PASS" endtime="20170802 18:57:08.790" starttime="20170802 18:56:48.763"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170802 18:57:08.791" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20170802 18:57:08.792" level="FAIL">ReadTimeout: HTTPSConnectionPool(host='9.3.21.61', port=443): Read timed out. (read timeout=20.0): FAIL != PASS</msg>
<status status="FAIL" endtime="20170802 18:57:08.792" starttime="20170802 18:57:08.791"></status>
</kw>
<status status="FAIL" endtime="20170802 18:57:08.792" starttime="20170802 18:56:48.758"></status>
</kw>
<msg timestamp="20170802 18:57:08.792" level="FAIL">Keyword 'Post Login Request' failed after retrying for 40 seconds. The last error was: ReadTimeout: HTTPSConnectionPool(host='9.3.21.61', port=443): Read timed out. (read timeout=20.0): FAIL != PASS</msg>
<status status="FAIL" endtime="20170802 18:57:08.792" starttime="20170802 18:56:08.722"></status>
</kw>
<status status="FAIL" endtime="20170802 18:57:08.792" starttime="20170802 18:56:08.721"></status>
</kw>
<msg timestamp="20170802 18:57:08.792" level="INFO">${l_rest} = False</msg>
<status status="PASS" endtime="20170802 18:57:08.792" starttime="20170802 18:56:08.721"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${l_rest}' == '${False}'</arg>
<arg>Fail</arg>
<arg>msg=REST Authentication Failed</arg>
</arguments>
<kw name="Fail" library="BuiltIn">
<doc>Fails the test with the given message and optionally alters its tags.</doc>
<arguments>
<arg>msg=REST Authentication Failed</arg>
</arguments>
<msg timestamp="20170802 18:57:08.794" level="FAIL">REST Authentication Failed</msg>
<status status="FAIL" endtime="20170802 18:57:08.794" starttime="20170802 18:57:08.794"></status>
</kw>
<status status="FAIL" endtime="20170802 18:57:08.794" starttime="20170802 18:57:08.793"></status>
</kw>
<status status="FAIL" endtime="20170802 18:57:08.794" starttime="20170802 18:56:05.704"></status>
</kw>
<kw name="Verify Ping and REST Authentication" library="utils">
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Ping Host</arg>
<arg>${OPENBMC_HOST}</arg>
</arguments>
<assign>
<var>${l_ping}</var>
</assign>
<kw name="Ping Host" library="utils">
<arguments>
<arg>${OPENBMC_HOST}</arg>
</arguments>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${host}</arg>
<arg>msg=No host provided</arg>
</arguments>
<msg timestamp="20170802 18:57:18.797" level="INFO">Length is 9</msg>
<status status="PASS" endtime="20170802 18:57:18.797" starttime="20170802 18:57:18.796"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>ping -c 4 ${host}</arg>
</arguments>
<assign>
<var>${RC}</var>
<var>${output}</var>
</assign>
<msg timestamp="20170802 18:57:18.805" level="INFO">Running command 'ping -c 4 9.3.21.61 2&gt;&amp;1'.</msg>
<msg timestamp="20170802 18:57:21.804" level="INFO">${RC} = 0</msg>
<msg timestamp="20170802 18:57:21.804" level="INFO">${output} = PING 9.3.21.61 (9.3.21.61) 56(84) bytes of data.
64 bytes from 9.3.21.61: icmp_seq=1 ttl=62 time=0.947 ms
64 bytes from 9.3.21.61: icmp_seq=2 ttl=62 time=0.551 ms
64 bytes from 9.3.21.61: icmp_seq=3 t...</msg>
<status status="PASS" endtime="20170802 18:57:21.805" starttime="20170802 18:57:18.797"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>RC: ${RC}\nOutput:\n${output}</arg>
</arguments>
<msg timestamp="20170802 18:57:21.808" level="INFO">RC: 0
Output:
PING 9.3.21.61 (9.3.21.61) 56(84) bytes of data.
64 bytes from 9.3.21.61: icmp_seq=1 ttl=62 time=0.947 ms
64 bytes from 9.3.21.61: icmp_seq=2 ttl=62 time=0.551 ms
64 bytes from 9.3.21.61: icmp_seq=3 ttl=62 time=0.658 ms
64 bytes from 9.3.21.61: icmp_seq=4 ttl=62 time=0.610 ms

--- 9.3.21.61 ping statistics ---
4 packets transmitted, 4 received, 0% packet loss, time 2999ms
rtt min/avg/max/mdev = 0.551/0.691/0.947/0.154 ms</msg>
<status status="PASS" endtime="20170802 18:57:21.808" starttime="20170802 18:57:21.807"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${RC}</arg>
<arg>${0}</arg>
</arguments>
<status status="PASS" endtime="20170802 18:57:21.809" starttime="20170802 18:57:21.809"></status>
</kw>
<status status="PASS" endtime="20170802 18:57:21.809" starttime="20170802 18:57:18.796"></status>
</kw>
<msg timestamp="20170802 18:57:21.809" level="INFO">${l_ping} = True</msg>
<status status="PASS" endtime="20170802 18:57:21.809" starttime="20170802 18:57:18.796"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${l_ping}' == '${False}'</arg>
<arg>Fail</arg>
<arg>msg=Ping Failed</arg>
</arguments>
<status status="PASS" endtime="20170802 18:57:21.810" starttime="20170802 18:57:21.810"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Initialize OpenBMC</arg>
</arguments>
<assign>
<var>${l_rest}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170802 18:57:21.813" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61, headers={},                     cookies=None, auth=None, timeout=20, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170802 18:57:21.814" starttime="20170802 18:57:21.813"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170802 18:57:21.815" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170802 18:57:21.815" starttime="20170802 18:57:21.815"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170802 18:57:21.816" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170802 18:57:21.816" starttime="20170802 18:57:21.815"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170802 18:57:21.816" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170802 18:57:21.817" starttime="20170802 18:57:21.816"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170802 18:57:41.845" level="FAIL">ReadTimeout: HTTPSConnectionPool(host='9.3.21.61', port=443): Read timed out. (read timeout=20.0)</msg>
<status status="FAIL" endtime="20170802 18:57:41.846" starttime="20170802 18:57:21.817"></status>
</kw>
<msg timestamp="20170802 18:57:41.846" level="INFO">${status} = FAIL</msg>
<msg timestamp="20170802 18:57:41.846" level="INFO">${resp} = ReadTimeout: HTTPSConnectionPool(host='9.3.21.61', port=443): Read timed out. (read timeout=20.0)</msg>
<status status="PASS" endtime="20170802 18:57:41.846" starttime="20170802 18:57:21.817"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170802 18:57:41.847" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20170802 18:57:41.847" level="FAIL">ReadTimeout: HTTPSConnectionPool(host='9.3.21.61', port=443): Read timed out. (read timeout=20.0): FAIL != PASS</msg>
<status status="FAIL" endtime="20170802 18:57:41.847" starttime="20170802 18:57:41.846"></status>
</kw>
<status status="FAIL" endtime="20170802 18:57:41.847" starttime="20170802 18:57:21.812"></status>
</kw>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170802 18:58:01.849" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61, headers={},                     cookies=None, auth=None, timeout=20, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170802 18:58:01.849" starttime="20170802 18:58:01.849"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170802 18:58:01.850" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170802 18:58:01.850" starttime="20170802 18:58:01.850"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170802 18:58:01.851" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170802 18:58:01.851" starttime="20170802 18:58:01.850"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170802 18:58:01.852" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170802 18:58:01.852" starttime="20170802 18:58:01.851"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170802 18:58:21.869" level="FAIL">ReadTimeout: HTTPSConnectionPool(host='9.3.21.61', port=443): Read timed out. (read timeout=20.0)</msg>
<status status="FAIL" endtime="20170802 18:58:21.870" starttime="20170802 18:58:01.852"></status>
</kw>
<msg timestamp="20170802 18:58:21.870" level="INFO">${status} = FAIL</msg>
<msg timestamp="20170802 18:58:21.870" level="INFO">${resp} = ReadTimeout: HTTPSConnectionPool(host='9.3.21.61', port=443): Read timed out. (read timeout=20.0)</msg>
<status status="PASS" endtime="20170802 18:58:21.870" starttime="20170802 18:58:01.852"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170802 18:58:21.871" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20170802 18:58:21.871" level="FAIL">ReadTimeout: HTTPSConnectionPool(host='9.3.21.61', port=443): Read timed out. (read timeout=20.0): FAIL != PASS</msg>
<status status="FAIL" endtime="20170802 18:58:21.871" starttime="20170802 18:58:21.870"></status>
</kw>
<status status="FAIL" endtime="20170802 18:58:21.871" starttime="20170802 18:58:01.848"></status>
</kw>
<msg timestamp="20170802 18:58:21.871" level="FAIL">Keyword 'Post Login Request' failed after retrying for 40 seconds. The last error was: ReadTimeout: HTTPSConnectionPool(host='9.3.21.61', port=443): Read timed out. (read timeout=20.0): FAIL != PASS</msg>
<status status="FAIL" endtime="20170802 18:58:21.871" starttime="20170802 18:57:21.812"></status>
</kw>
<status status="FAIL" endtime="20170802 18:58:21.871" starttime="20170802 18:57:21.811"></status>
</kw>
<msg timestamp="20170802 18:58:21.872" level="INFO">${l_rest} = False</msg>
<status status="PASS" endtime="20170802 18:58:21.872" starttime="20170802 18:57:21.811"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${l_rest}' == '${False}'</arg>
<arg>Fail</arg>
<arg>msg=REST Authentication Failed</arg>
</arguments>
<kw name="Fail" library="BuiltIn">
<doc>Fails the test with the given message and optionally alters its tags.</doc>
<arguments>
<arg>msg=REST Authentication Failed</arg>
</arguments>
<msg timestamp="20170802 18:58:21.873" level="FAIL">REST Authentication Failed</msg>
<status status="FAIL" endtime="20170802 18:58:21.873" starttime="20170802 18:58:21.872"></status>
</kw>
<status status="FAIL" endtime="20170802 18:58:21.873" starttime="20170802 18:58:21.872"></status>
</kw>
<status status="FAIL" endtime="20170802 18:58:21.873" starttime="20170802 18:57:18.795"></status>
</kw>
<kw name="Verify Ping and REST Authentication" library="utils">
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Ping Host</arg>
<arg>${OPENBMC_HOST}</arg>
</arguments>
<assign>
<var>${l_ping}</var>
</assign>
<kw name="Ping Host" library="utils">
<arguments>
<arg>${OPENBMC_HOST}</arg>
</arguments>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${host}</arg>
<arg>msg=No host provided</arg>
</arguments>
<msg timestamp="20170802 18:58:31.876" level="INFO">Length is 9</msg>
<status status="PASS" endtime="20170802 18:58:31.876" starttime="20170802 18:58:31.875"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>ping -c 4 ${host}</arg>
</arguments>
<assign>
<var>${RC}</var>
<var>${output}</var>
</assign>
<msg timestamp="20170802 18:58:31.880" level="INFO">Running command 'ping -c 4 9.3.21.61 2&gt;&amp;1'.</msg>
<msg timestamp="20170802 18:58:34.886" level="INFO">${RC} = 0</msg>
<msg timestamp="20170802 18:58:34.886" level="INFO">${output} = PING 9.3.21.61 (9.3.21.61) 56(84) bytes of data.
64 bytes from 9.3.21.61: icmp_seq=1 ttl=62 time=1.18 ms
64 bytes from 9.3.21.61: icmp_seq=2 ttl=62 time=0.560 ms
64 bytes from 9.3.21.61: icmp_seq=3 tt...</msg>
<status status="PASS" endtime="20170802 18:58:34.886" starttime="20170802 18:58:31.876"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>RC: ${RC}\nOutput:\n${output}</arg>
</arguments>
<msg timestamp="20170802 18:58:34.889" level="INFO">RC: 0
Output:
PING 9.3.21.61 (9.3.21.61) 56(84) bytes of data.
64 bytes from 9.3.21.61: icmp_seq=1 ttl=62 time=1.18 ms
64 bytes from 9.3.21.61: icmp_seq=2 ttl=62 time=0.560 ms
64 bytes from 9.3.21.61: icmp_seq=3 ttl=62 time=1.28 ms
64 bytes from 9.3.21.61: icmp_seq=4 ttl=62 time=0.581 ms

--- 9.3.21.61 ping statistics ---
4 packets transmitted, 4 received, 0% packet loss, time 3001ms
rtt min/avg/max/mdev = 0.560/0.902/1.286/0.334 ms</msg>
<status status="PASS" endtime="20170802 18:58:34.890" starttime="20170802 18:58:34.889"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${RC}</arg>
<arg>${0}</arg>
</arguments>
<status status="PASS" endtime="20170802 18:58:34.890" starttime="20170802 18:58:34.890"></status>
</kw>
<status status="PASS" endtime="20170802 18:58:34.890" starttime="20170802 18:58:31.875"></status>
</kw>
<msg timestamp="20170802 18:58:34.891" level="INFO">${l_ping} = True</msg>
<status status="PASS" endtime="20170802 18:58:34.891" starttime="20170802 18:58:31.874"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${l_ping}' == '${False}'</arg>
<arg>Fail</arg>
<arg>msg=Ping Failed</arg>
</arguments>
<status status="PASS" endtime="20170802 18:58:34.891" starttime="20170802 18:58:34.891"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Initialize OpenBMC</arg>
</arguments>
<assign>
<var>${l_rest}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170802 18:58:34.895" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61, headers={},                     cookies=None, auth=None, timeout=20, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170802 18:58:34.896" starttime="20170802 18:58:34.894"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170802 18:58:34.897" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170802 18:58:34.897" starttime="20170802 18:58:34.897"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170802 18:58:34.898" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170802 18:58:34.898" starttime="20170802 18:58:34.897"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170802 18:58:34.898" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170802 18:58:34.899" starttime="20170802 18:58:34.898"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170802 18:58:54.925" level="FAIL">ReadTimeout: HTTPSConnectionPool(host='9.3.21.61', port=443): Read timed out. (read timeout=20.0)</msg>
<status status="FAIL" endtime="20170802 18:58:54.925" starttime="20170802 18:58:34.899"></status>
</kw>
<msg timestamp="20170802 18:58:54.925" level="INFO">${status} = FAIL</msg>
<msg timestamp="20170802 18:58:54.925" level="INFO">${resp} = ReadTimeout: HTTPSConnectionPool(host='9.3.21.61', port=443): Read timed out. (read timeout=20.0)</msg>
<status status="PASS" endtime="20170802 18:58:54.925" starttime="20170802 18:58:34.899"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170802 18:58:54.926" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20170802 18:58:54.926" level="FAIL">ReadTimeout: HTTPSConnectionPool(host='9.3.21.61', port=443): Read timed out. (read timeout=20.0): FAIL != PASS</msg>
<status status="FAIL" endtime="20170802 18:58:54.926" starttime="20170802 18:58:54.926"></status>
</kw>
<status status="FAIL" endtime="20170802 18:58:54.927" starttime="20170802 18:58:34.893"></status>
</kw>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170802 18:59:14.928" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61, headers={},                     cookies=None, auth=None, timeout=20, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170802 18:59:14.929" starttime="20170802 18:59:14.928"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170802 18:59:14.929" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170802 18:59:14.929" starttime="20170802 18:59:14.929"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170802 18:59:14.930" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170802 18:59:14.930" starttime="20170802 18:59:14.930"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170802 18:59:14.931" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170802 18:59:14.931" starttime="20170802 18:59:14.930"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170802 18:59:34.953" level="FAIL">ReadTimeout: HTTPSConnectionPool(host='9.3.21.61', port=443): Read timed out. (read timeout=20.0)</msg>
<status status="FAIL" endtime="20170802 18:59:34.954" starttime="20170802 18:59:14.932"></status>
</kw>
<msg timestamp="20170802 18:59:34.954" level="INFO">${status} = FAIL</msg>
<msg timestamp="20170802 18:59:34.954" level="INFO">${resp} = ReadTimeout: HTTPSConnectionPool(host='9.3.21.61', port=443): Read timed out. (read timeout=20.0)</msg>
<status status="PASS" endtime="20170802 18:59:34.954" starttime="20170802 18:59:14.931"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170802 18:59:34.955" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20170802 18:59:34.955" level="FAIL">ReadTimeout: HTTPSConnectionPool(host='9.3.21.61', port=443): Read timed out. (read timeout=20.0): FAIL != PASS</msg>
<status status="FAIL" endtime="20170802 18:59:34.955" starttime="20170802 18:59:34.954"></status>
</kw>
<status status="FAIL" endtime="20170802 18:59:34.955" starttime="20170802 18:59:14.927"></status>
</kw>
<msg timestamp="20170802 18:59:34.955" level="FAIL">Keyword 'Post Login Request' failed after retrying for 40 seconds. The last error was: ReadTimeout: HTTPSConnectionPool(host='9.3.21.61', port=443): Read timed out. (read timeout=20.0): FAIL != PASS</msg>
<status status="FAIL" endtime="20170802 18:59:34.955" starttime="20170802 18:58:34.893"></status>
</kw>
<status status="FAIL" endtime="20170802 18:59:34.956" starttime="20170802 18:58:34.892"></status>
</kw>
<msg timestamp="20170802 18:59:34.956" level="INFO">${l_rest} = False</msg>
<status status="PASS" endtime="20170802 18:59:34.956" starttime="20170802 18:58:34.892"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${l_rest}' == '${False}'</arg>
<arg>Fail</arg>
<arg>msg=REST Authentication Failed</arg>
</arguments>
<kw name="Fail" library="BuiltIn">
<doc>Fails the test with the given message and optionally alters its tags.</doc>
<arguments>
<arg>msg=REST Authentication Failed</arg>
</arguments>
<msg timestamp="20170802 18:59:34.957" level="FAIL">REST Authentication Failed</msg>
<status status="FAIL" endtime="20170802 18:59:34.957" starttime="20170802 18:59:34.957"></status>
</kw>
<status status="FAIL" endtime="20170802 18:59:34.957" starttime="20170802 18:59:34.956"></status>
</kw>
<status status="FAIL" endtime="20170802 18:59:34.957" starttime="20170802 18:58:31.873"></status>
</kw>
<kw name="Verify Ping and REST Authentication" library="utils">
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Ping Host</arg>
<arg>${OPENBMC_HOST}</arg>
</arguments>
<assign>
<var>${l_ping}</var>
</assign>
<kw name="Ping Host" library="utils">
<arguments>
<arg>${OPENBMC_HOST}</arg>
</arguments>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${host}</arg>
<arg>msg=No host provided</arg>
</arguments>
<msg timestamp="20170802 18:59:44.960" level="INFO">Length is 9</msg>
<status status="PASS" endtime="20170802 18:59:44.960" starttime="20170802 18:59:44.960"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>ping -c 4 ${host}</arg>
</arguments>
<assign>
<var>${RC}</var>
<var>${output}</var>
</assign>
<msg timestamp="20170802 18:59:44.965" level="INFO">Running command 'ping -c 4 9.3.21.61 2&gt;&amp;1'.</msg>
<msg timestamp="20170802 18:59:47.980" level="INFO">${RC} = 0</msg>
<msg timestamp="20170802 18:59:47.980" level="INFO">${output} = PING 9.3.21.61 (9.3.21.61) 56(84) bytes of data.
64 bytes from 9.3.21.61: icmp_seq=1 ttl=62 time=0.930 ms
64 bytes from 9.3.21.61: icmp_seq=2 ttl=62 time=0.621 ms
64 bytes from 9.3.21.61: icmp_seq=3 t...</msg>
<status status="PASS" endtime="20170802 18:59:47.980" starttime="20170802 18:59:44.960"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>RC: ${RC}\nOutput:\n${output}</arg>
</arguments>
<msg timestamp="20170802 18:59:47.983" level="INFO">RC: 0
Output:
PING 9.3.21.61 (9.3.21.61) 56(84) bytes of data.
64 bytes from 9.3.21.61: icmp_seq=1 ttl=62 time=0.930 ms
64 bytes from 9.3.21.61: icmp_seq=2 ttl=62 time=0.621 ms
64 bytes from 9.3.21.61: icmp_seq=3 ttl=62 time=1.19 ms
64 bytes from 9.3.21.61: icmp_seq=4 ttl=62 time=0.597 ms

--- 9.3.21.61 ping statistics ---
4 packets transmitted, 4 received, 0% packet loss, time 3003ms
rtt min/avg/max/mdev = 0.597/0.835/1.194/0.246 ms</msg>
<status status="PASS" endtime="20170802 18:59:47.984" starttime="20170802 18:59:47.983"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${RC}</arg>
<arg>${0}</arg>
</arguments>
<status status="PASS" endtime="20170802 18:59:47.984" starttime="20170802 18:59:47.984"></status>
</kw>
<status status="PASS" endtime="20170802 18:59:47.984" starttime="20170802 18:59:44.959"></status>
</kw>
<msg timestamp="20170802 18:59:47.985" level="INFO">${l_ping} = True</msg>
<status status="PASS" endtime="20170802 18:59:47.985" starttime="20170802 18:59:44.959"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${l_ping}' == '${False}'</arg>
<arg>Fail</arg>
<arg>msg=Ping Failed</arg>
</arguments>
<status status="PASS" endtime="20170802 18:59:47.986" starttime="20170802 18:59:47.985"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Initialize OpenBMC</arg>
</arguments>
<assign>
<var>${l_rest}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170802 18:59:47.990" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61, headers={},                     cookies=None, auth=None, timeout=20, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170802 18:59:47.990" starttime="20170802 18:59:47.989"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170802 18:59:47.991" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170802 18:59:47.991" starttime="20170802 18:59:47.991"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170802 18:59:47.992" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170802 18:59:47.992" starttime="20170802 18:59:47.991"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170802 18:59:47.993" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170802 18:59:47.993" starttime="20170802 18:59:47.992"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170802 19:00:08.020" level="FAIL">ReadTimeout: HTTPSConnectionPool(host='9.3.21.61', port=443): Read timed out. (read timeout=20.0)</msg>
<status status="FAIL" endtime="20170802 19:00:08.020" starttime="20170802 18:59:47.993"></status>
</kw>
<msg timestamp="20170802 19:00:08.020" level="INFO">${status} = FAIL</msg>
<msg timestamp="20170802 19:00:08.020" level="INFO">${resp} = ReadTimeout: HTTPSConnectionPool(host='9.3.21.61', port=443): Read timed out. (read timeout=20.0)</msg>
<status status="PASS" endtime="20170802 19:00:08.021" starttime="20170802 18:59:47.993"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170802 19:00:08.021" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20170802 19:00:08.021" level="FAIL">ReadTimeout: HTTPSConnectionPool(host='9.3.21.61', port=443): Read timed out. (read timeout=20.0): FAIL != PASS</msg>
<status status="FAIL" endtime="20170802 19:00:08.021" starttime="20170802 19:00:08.021"></status>
</kw>
<status status="FAIL" endtime="20170802 19:00:08.022" starttime="20170802 18:59:47.988"></status>
</kw>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170802 19:00:28.024" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61, headers={},                     cookies=None, auth=None, timeout=20, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170802 19:00:28.024" starttime="20170802 19:00:28.023"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170802 19:00:28.025" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170802 19:00:28.025" starttime="20170802 19:00:28.024"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170802 19:00:28.025" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170802 19:00:28.025" starttime="20170802 19:00:28.025"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170802 19:00:28.026" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170802 19:00:28.026" starttime="20170802 19:00:28.026"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170802 19:00:48.052" level="FAIL">ReadTimeout: HTTPSConnectionPool(host='9.3.21.61', port=443): Read timed out. (read timeout=20.0)</msg>
<status status="FAIL" endtime="20170802 19:00:48.052" starttime="20170802 19:00:28.027"></status>
</kw>
<msg timestamp="20170802 19:00:48.052" level="INFO">${status} = FAIL</msg>
<msg timestamp="20170802 19:00:48.052" level="INFO">${resp} = ReadTimeout: HTTPSConnectionPool(host='9.3.21.61', port=443): Read timed out. (read timeout=20.0)</msg>
<status status="PASS" endtime="20170802 19:00:48.052" starttime="20170802 19:00:28.027"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170802 19:00:48.053" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20170802 19:00:48.053" level="FAIL">ReadTimeout: HTTPSConnectionPool(host='9.3.21.61', port=443): Read timed out. (read timeout=20.0): FAIL != PASS</msg>
<status status="FAIL" endtime="20170802 19:00:48.053" starttime="20170802 19:00:48.052"></status>
</kw>
<status status="FAIL" endtime="20170802 19:00:48.053" starttime="20170802 19:00:28.022"></status>
</kw>
<msg timestamp="20170802 19:00:48.053" level="FAIL">Keyword 'Post Login Request' failed after retrying for 40 seconds. The last error was: ReadTimeout: HTTPSConnectionPool(host='9.3.21.61', port=443): Read timed out. (read timeout=20.0): FAIL != PASS</msg>
<status status="FAIL" endtime="20170802 19:00:48.053" starttime="20170802 18:59:47.987"></status>
</kw>
<status status="FAIL" endtime="20170802 19:00:48.054" starttime="20170802 18:59:47.986"></status>
</kw>
<msg timestamp="20170802 19:00:48.054" level="INFO">${l_rest} = False</msg>
<status status="PASS" endtime="20170802 19:00:48.054" starttime="20170802 18:59:47.986"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${l_rest}' == '${False}'</arg>
<arg>Fail</arg>
<arg>msg=REST Authentication Failed</arg>
</arguments>
<kw name="Fail" library="BuiltIn">
<doc>Fails the test with the given message and optionally alters its tags.</doc>
<arguments>
<arg>msg=REST Authentication Failed</arg>
</arguments>
<msg timestamp="20170802 19:00:48.055" level="FAIL">REST Authentication Failed</msg>
<status status="FAIL" endtime="20170802 19:00:48.055" starttime="20170802 19:00:48.055"></status>
</kw>
<status status="FAIL" endtime="20170802 19:00:48.055" starttime="20170802 19:00:48.054"></status>
</kw>
<status status="FAIL" endtime="20170802 19:00:48.055" starttime="20170802 18:59:44.958"></status>
</kw>
<kw name="Verify Ping and REST Authentication" library="utils">
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Ping Host</arg>
<arg>${OPENBMC_HOST}</arg>
</arguments>
<assign>
<var>${l_ping}</var>
</assign>
<kw name="Ping Host" library="utils">
<arguments>
<arg>${OPENBMC_HOST}</arg>
</arguments>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${host}</arg>
<arg>msg=No host provided</arg>
</arguments>
<msg timestamp="20170802 19:00:58.058" level="INFO">Length is 9</msg>
<status status="PASS" endtime="20170802 19:00:58.058" starttime="20170802 19:00:58.057"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>ping -c 4 ${host}</arg>
</arguments>
<assign>
<var>${RC}</var>
<var>${output}</var>
</assign>
<msg timestamp="20170802 19:00:58.061" level="INFO">Running command 'ping -c 4 9.3.21.61 2&gt;&amp;1'.</msg>
<msg timestamp="20170802 19:01:01.065" level="INFO">${RC} = 0</msg>
<msg timestamp="20170802 19:01:01.065" level="INFO">${output} = PING 9.3.21.61 (9.3.21.61) 56(84) bytes of data.
64 bytes from 9.3.21.61: icmp_seq=1 ttl=62 time=0.684 ms
64 bytes from 9.3.21.61: icmp_seq=2 ttl=62 time=0.566 ms
64 bytes from 9.3.21.61: icmp_seq=3 t...</msg>
<status status="PASS" endtime="20170802 19:01:01.065" starttime="20170802 19:00:58.058"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>RC: ${RC}\nOutput:\n${output}</arg>
</arguments>
<msg timestamp="20170802 19:01:01.068" level="INFO">RC: 0
Output:
PING 9.3.21.61 (9.3.21.61) 56(84) bytes of data.
64 bytes from 9.3.21.61: icmp_seq=1 ttl=62 time=0.684 ms
64 bytes from 9.3.21.61: icmp_seq=2 ttl=62 time=0.566 ms
64 bytes from 9.3.21.61: icmp_seq=3 ttl=62 time=1.18 ms
64 bytes from 9.3.21.61: icmp_seq=4 ttl=62 time=0.564 ms

--- 9.3.21.61 ping statistics ---
4 packets transmitted, 4 received, 0% packet loss, time 2999ms
rtt min/avg/max/mdev = 0.564/0.750/1.187/0.257 ms</msg>
<status status="PASS" endtime="20170802 19:01:01.069" starttime="20170802 19:01:01.067"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${RC}</arg>
<arg>${0}</arg>
</arguments>
<status status="PASS" endtime="20170802 19:01:01.071" starttime="20170802 19:01:01.069"></status>
</kw>
<status status="PASS" endtime="20170802 19:01:01.071" starttime="20170802 19:00:58.057"></status>
</kw>
<msg timestamp="20170802 19:01:01.071" level="INFO">${l_ping} = True</msg>
<status status="PASS" endtime="20170802 19:01:01.071" starttime="20170802 19:00:58.056"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${l_ping}' == '${False}'</arg>
<arg>Fail</arg>
<arg>msg=Ping Failed</arg>
</arguments>
<status status="PASS" endtime="20170802 19:01:01.072" starttime="20170802 19:01:01.071"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Initialize OpenBMC</arg>
</arguments>
<assign>
<var>${l_rest}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170802 19:01:01.075" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61, headers={},                     cookies=None, auth=None, timeout=20, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170802 19:01:01.076" starttime="20170802 19:01:01.074"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170802 19:01:01.076" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170802 19:01:01.076" starttime="20170802 19:01:01.076"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170802 19:01:01.077" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170802 19:01:01.077" starttime="20170802 19:01:01.077"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170802 19:01:01.078" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170802 19:01:01.078" starttime="20170802 19:01:01.077"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170802 19:01:21.103" level="FAIL">ReadTimeout: HTTPSConnectionPool(host='9.3.21.61', port=443): Read timed out. (read timeout=20.0)</msg>
<status status="FAIL" endtime="20170802 19:01:21.103" starttime="20170802 19:01:01.078"></status>
</kw>
<msg timestamp="20170802 19:01:21.103" level="INFO">${status} = FAIL</msg>
<msg timestamp="20170802 19:01:21.103" level="INFO">${resp} = ReadTimeout: HTTPSConnectionPool(host='9.3.21.61', port=443): Read timed out. (read timeout=20.0)</msg>
<status status="PASS" endtime="20170802 19:01:21.103" starttime="20170802 19:01:01.078"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170802 19:01:21.104" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20170802 19:01:21.104" level="FAIL">ReadTimeout: HTTPSConnectionPool(host='9.3.21.61', port=443): Read timed out. (read timeout=20.0): FAIL != PASS</msg>
<status status="FAIL" endtime="20170802 19:01:21.104" starttime="20170802 19:01:21.104"></status>
</kw>
<status status="FAIL" endtime="20170802 19:01:21.104" starttime="20170802 19:01:01.074"></status>
</kw>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170802 19:01:41.106" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61, headers={},                     cookies=None, auth=None, timeout=20, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170802 19:01:41.107" starttime="20170802 19:01:41.106"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170802 19:01:41.107" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170802 19:01:41.107" starttime="20170802 19:01:41.107"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170802 19:01:41.108" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170802 19:01:41.108" starttime="20170802 19:01:41.108"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170802 19:01:41.109" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170802 19:01:41.109" starttime="20170802 19:01:41.108"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170802 19:02:01.117" level="FAIL">ReadTimeout: HTTPSConnectionPool(host='9.3.21.61', port=443): Read timed out. (read timeout=20.0)</msg>
<status status="FAIL" endtime="20170802 19:02:01.117" starttime="20170802 19:01:41.110"></status>
</kw>
<msg timestamp="20170802 19:02:01.117" level="INFO">${status} = FAIL</msg>
<msg timestamp="20170802 19:02:01.118" level="INFO">${resp} = ReadTimeout: HTTPSConnectionPool(host='9.3.21.61', port=443): Read timed out. (read timeout=20.0)</msg>
<status status="PASS" endtime="20170802 19:02:01.118" starttime="20170802 19:01:41.109"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170802 19:02:01.118" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20170802 19:02:01.119" level="FAIL">ReadTimeout: HTTPSConnectionPool(host='9.3.21.61', port=443): Read timed out. (read timeout=20.0): FAIL != PASS</msg>
<status status="FAIL" endtime="20170802 19:02:01.119" starttime="20170802 19:02:01.118"></status>
</kw>
<status status="FAIL" endtime="20170802 19:02:01.119" starttime="20170802 19:01:41.105"></status>
</kw>
<msg timestamp="20170802 19:02:01.119" level="FAIL">Keyword 'Post Login Request' failed after retrying for 40 seconds. The last error was: ReadTimeout: HTTPSConnectionPool(host='9.3.21.61', port=443): Read timed out. (read timeout=20.0): FAIL != PASS</msg>
<status status="FAIL" endtime="20170802 19:02:01.119" starttime="20170802 19:01:01.073"></status>
</kw>
<status status="FAIL" endtime="20170802 19:02:01.119" starttime="20170802 19:01:01.073"></status>
</kw>
<msg timestamp="20170802 19:02:01.119" level="INFO">${l_rest} = False</msg>
<status status="PASS" endtime="20170802 19:02:01.119" starttime="20170802 19:01:01.072"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${l_rest}' == '${False}'</arg>
<arg>Fail</arg>
<arg>msg=REST Authentication Failed</arg>
</arguments>
<kw name="Fail" library="BuiltIn">
<doc>Fails the test with the given message and optionally alters its tags.</doc>
<arguments>
<arg>msg=REST Authentication Failed</arg>
</arguments>
<msg timestamp="20170802 19:02:01.121" level="FAIL">REST Authentication Failed</msg>
<status status="FAIL" endtime="20170802 19:02:01.121" starttime="20170802 19:02:01.120"></status>
</kw>
<status status="FAIL" endtime="20170802 19:02:01.121" starttime="20170802 19:02:01.120"></status>
</kw>
<status status="FAIL" endtime="20170802 19:02:01.121" starttime="20170802 19:00:58.056"></status>
</kw>
<kw name="Verify Ping and REST Authentication" library="utils">
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Ping Host</arg>
<arg>${OPENBMC_HOST}</arg>
</arguments>
<assign>
<var>${l_ping}</var>
</assign>
<kw name="Ping Host" library="utils">
<arguments>
<arg>${OPENBMC_HOST}</arg>
</arguments>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${host}</arg>
<arg>msg=No host provided</arg>
</arguments>
<msg timestamp="20170802 19:02:11.123" level="INFO">Length is 9</msg>
<status status="PASS" endtime="20170802 19:02:11.123" starttime="20170802 19:02:11.123"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>ping -c 4 ${host}</arg>
</arguments>
<assign>
<var>${RC}</var>
<var>${output}</var>
</assign>
<msg timestamp="20170802 19:02:11.127" level="INFO">Running command 'ping -c 4 9.3.21.61 2&gt;&amp;1'.</msg>
<msg timestamp="20170802 19:02:14.138" level="INFO">${RC} = 0</msg>
<msg timestamp="20170802 19:02:14.139" level="INFO">${output} = PING 9.3.21.61 (9.3.21.61) 56(84) bytes of data.
64 bytes from 9.3.21.61: icmp_seq=1 ttl=62 time=1.21 ms
64 bytes from 9.3.21.61: icmp_seq=2 ttl=62 time=0.557 ms
64 bytes from 9.3.21.61: icmp_seq=3 tt...</msg>
<status status="PASS" endtime="20170802 19:02:14.139" starttime="20170802 19:02:11.124"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>RC: ${RC}\nOutput:\n${output}</arg>
</arguments>
<msg timestamp="20170802 19:02:14.157" level="INFO">RC: 0
Output:
PING 9.3.21.61 (9.3.21.61) 56(84) bytes of data.
64 bytes from 9.3.21.61: icmp_seq=1 ttl=62 time=1.21 ms
64 bytes from 9.3.21.61: icmp_seq=2 ttl=62 time=0.557 ms
64 bytes from 9.3.21.61: icmp_seq=3 ttl=62 time=1.14 ms
64 bytes from 9.3.21.61: icmp_seq=4 ttl=62 time=0.541 ms

--- 9.3.21.61 ping statistics ---
4 packets transmitted, 4 received, 0% packet loss, time 3001ms
rtt min/avg/max/mdev = 0.541/0.864/1.215/0.317 ms</msg>
<status status="PASS" endtime="20170802 19:02:14.157" starttime="20170802 19:02:14.154"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${RC}</arg>
<arg>${0}</arg>
</arguments>
<status status="PASS" endtime="20170802 19:02:14.159" starttime="20170802 19:02:14.158"></status>
</kw>
<status status="PASS" endtime="20170802 19:02:14.159" starttime="20170802 19:02:11.123"></status>
</kw>
<msg timestamp="20170802 19:02:14.160" level="INFO">${l_ping} = True</msg>
<status status="PASS" endtime="20170802 19:02:14.160" starttime="20170802 19:02:11.122"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${l_ping}' == '${False}'</arg>
<arg>Fail</arg>
<arg>msg=Ping Failed</arg>
</arguments>
<status status="PASS" endtime="20170802 19:02:14.162" starttime="20170802 19:02:14.161"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Initialize OpenBMC</arg>
</arguments>
<assign>
<var>${l_rest}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170802 19:02:14.167" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61, headers={},                     cookies=None, auth=None, timeout=20, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170802 19:02:14.172" starttime="20170802 19:02:14.166"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170802 19:02:14.172" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170802 19:02:14.172" starttime="20170802 19:02:14.172"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170802 19:02:14.174" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170802 19:02:14.174" starttime="20170802 19:02:14.173"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170802 19:02:14.174" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170802 19:02:14.174" starttime="20170802 19:02:14.174"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170802 19:02:34.190" level="FAIL">ReadTimeout: HTTPSConnectionPool(host='9.3.21.61', port=443): Read timed out. (read timeout=20.0)</msg>
<status status="FAIL" endtime="20170802 19:02:34.190" starttime="20170802 19:02:14.176"></status>
</kw>
<msg timestamp="20170802 19:02:34.190" level="INFO">${status} = FAIL</msg>
<msg timestamp="20170802 19:02:34.190" level="INFO">${resp} = ReadTimeout: HTTPSConnectionPool(host='9.3.21.61', port=443): Read timed out. (read timeout=20.0)</msg>
<status status="PASS" endtime="20170802 19:02:34.190" starttime="20170802 19:02:14.175"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170802 19:02:34.191" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20170802 19:02:34.191" level="FAIL">ReadTimeout: HTTPSConnectionPool(host='9.3.21.61', port=443): Read timed out. (read timeout=20.0): FAIL != PASS</msg>
<status status="FAIL" endtime="20170802 19:02:34.191" starttime="20170802 19:02:34.191"></status>
</kw>
<status status="FAIL" endtime="20170802 19:02:34.191" starttime="20170802 19:02:14.165"></status>
</kw>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170802 19:02:54.193" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61, headers={},                     cookies=None, auth=None, timeout=20, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170802 19:02:54.194" starttime="20170802 19:02:54.193"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170802 19:02:54.195" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170802 19:02:54.195" starttime="20170802 19:02:54.194"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170802 19:02:54.195" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170802 19:02:54.196" starttime="20170802 19:02:54.195"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170802 19:02:54.196" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170802 19:02:54.196" starttime="20170802 19:02:54.196"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170802 19:03:14.221" level="FAIL">ReadTimeout: HTTPSConnectionPool(host='9.3.21.61', port=443): Read timed out. (read timeout=20.0)</msg>
<status status="FAIL" endtime="20170802 19:03:14.222" starttime="20170802 19:02:54.197"></status>
</kw>
<msg timestamp="20170802 19:03:14.223" level="INFO">${status} = FAIL</msg>
<msg timestamp="20170802 19:03:14.223" level="INFO">${resp} = ReadTimeout: HTTPSConnectionPool(host='9.3.21.61', port=443): Read timed out. (read timeout=20.0)</msg>
<status status="PASS" endtime="20170802 19:03:14.223" starttime="20170802 19:02:54.197"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170802 19:03:14.224" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20170802 19:03:14.224" level="FAIL">ReadTimeout: HTTPSConnectionPool(host='9.3.21.61', port=443): Read timed out. (read timeout=20.0): FAIL != PASS</msg>
<status status="FAIL" endtime="20170802 19:03:14.224" starttime="20170802 19:03:14.223"></status>
</kw>
<status status="FAIL" endtime="20170802 19:03:14.224" starttime="20170802 19:02:54.192"></status>
</kw>
<msg timestamp="20170802 19:03:14.224" level="FAIL">Keyword 'Post Login Request' failed after retrying for 40 seconds. The last error was: ReadTimeout: HTTPSConnectionPool(host='9.3.21.61', port=443): Read timed out. (read timeout=20.0): FAIL != PASS</msg>
<status status="FAIL" endtime="20170802 19:03:14.224" starttime="20170802 19:02:14.164"></status>
</kw>
<status status="FAIL" endtime="20170802 19:03:14.224" starttime="20170802 19:02:14.162"></status>
</kw>
<msg timestamp="20170802 19:03:14.224" level="INFO">${l_rest} = False</msg>
<status status="PASS" endtime="20170802 19:03:14.225" starttime="20170802 19:02:14.162"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${l_rest}' == '${False}'</arg>
<arg>Fail</arg>
<arg>msg=REST Authentication Failed</arg>
</arguments>
<kw name="Fail" library="BuiltIn">
<doc>Fails the test with the given message and optionally alters its tags.</doc>
<arguments>
<arg>msg=REST Authentication Failed</arg>
</arguments>
<msg timestamp="20170802 19:03:14.226" level="FAIL">REST Authentication Failed</msg>
<status status="FAIL" endtime="20170802 19:03:14.226" starttime="20170802 19:03:14.225"></status>
</kw>
<status status="FAIL" endtime="20170802 19:03:14.226" starttime="20170802 19:03:14.225"></status>
</kw>
<status status="FAIL" endtime="20170802 19:03:14.226" starttime="20170802 19:02:11.121"></status>
</kw>
<kw name="Verify Ping and REST Authentication" library="utils">
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Ping Host</arg>
<arg>${OPENBMC_HOST}</arg>
</arguments>
<assign>
<var>${l_ping}</var>
</assign>
<kw name="Ping Host" library="utils">
<arguments>
<arg>${OPENBMC_HOST}</arg>
</arguments>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${host}</arg>
<arg>msg=No host provided</arg>
</arguments>
<msg timestamp="20170802 19:03:24.229" level="INFO">Length is 9</msg>
<status status="PASS" endtime="20170802 19:03:24.229" starttime="20170802 19:03:24.229"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>ping -c 4 ${host}</arg>
</arguments>
<assign>
<var>${RC}</var>
<var>${output}</var>
</assign>
<msg timestamp="20170802 19:03:24.247" level="INFO">Running command 'ping -c 4 9.3.21.61 2&gt;&amp;1'.</msg>
<msg timestamp="20170802 19:03:27.245" level="INFO">${RC} = 0</msg>
<msg timestamp="20170802 19:03:27.245" level="INFO">${output} = PING 9.3.21.61 (9.3.21.61) 56(84) bytes of data.
64 bytes from 9.3.21.61: icmp_seq=1 ttl=62 time=0.894 ms
64 bytes from 9.3.21.61: icmp_seq=2 ttl=62 time=0.556 ms
64 bytes from 9.3.21.61: icmp_seq=3 t...</msg>
<status status="PASS" endtime="20170802 19:03:27.245" starttime="20170802 19:03:24.229"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>RC: ${RC}\nOutput:\n${output}</arg>
</arguments>
<msg timestamp="20170802 19:03:27.262" level="INFO">RC: 0
Output:
PING 9.3.21.61 (9.3.21.61) 56(84) bytes of data.
64 bytes from 9.3.21.61: icmp_seq=1 ttl=62 time=0.894 ms
64 bytes from 9.3.21.61: icmp_seq=2 ttl=62 time=0.556 ms
64 bytes from 9.3.21.61: icmp_seq=3 ttl=62 time=0.550 ms
64 bytes from 9.3.21.61: icmp_seq=4 ttl=62 time=0.545 ms

--- 9.3.21.61 ping statistics ---
4 packets transmitted, 4 received, 0% packet loss, time 3000ms
rtt min/avg/max/mdev = 0.545/0.636/0.894/0.149 ms</msg>
<status status="PASS" endtime="20170802 19:03:27.263" starttime="20170802 19:03:27.258"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${RC}</arg>
<arg>${0}</arg>
</arguments>
<status status="PASS" endtime="20170802 19:03:27.264" starttime="20170802 19:03:27.263"></status>
</kw>
<status status="PASS" endtime="20170802 19:03:27.264" starttime="20170802 19:03:24.228"></status>
</kw>
<msg timestamp="20170802 19:03:27.265" level="INFO">${l_ping} = True</msg>
<status status="PASS" endtime="20170802 19:03:27.265" starttime="20170802 19:03:24.228"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${l_ping}' == '${False}'</arg>
<arg>Fail</arg>
<arg>msg=Ping Failed</arg>
</arguments>
<status status="PASS" endtime="20170802 19:03:27.267" starttime="20170802 19:03:27.266"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Initialize OpenBMC</arg>
</arguments>
<assign>
<var>${l_rest}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170802 19:03:27.272" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61, headers={},                     cookies=None, auth=None, timeout=20, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170802 19:03:27.273" starttime="20170802 19:03:27.272"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170802 19:03:27.274" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170802 19:03:27.274" starttime="20170802 19:03:27.274"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170802 19:03:27.275" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170802 19:03:27.275" starttime="20170802 19:03:27.274"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170802 19:03:27.276" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170802 19:03:27.276" starttime="20170802 19:03:27.275"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170802 19:03:47.302" level="FAIL">ReadTimeout: HTTPSConnectionPool(host='9.3.21.61', port=443): Read timed out. (read timeout=20.0)</msg>
<status status="FAIL" endtime="20170802 19:03:47.302" starttime="20170802 19:03:27.277"></status>
</kw>
<msg timestamp="20170802 19:03:47.302" level="INFO">${status} = FAIL</msg>
<msg timestamp="20170802 19:03:47.302" level="INFO">${resp} = ReadTimeout: HTTPSConnectionPool(host='9.3.21.61', port=443): Read timed out. (read timeout=20.0)</msg>
<status status="PASS" endtime="20170802 19:03:47.302" starttime="20170802 19:03:27.276"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170802 19:03:47.303" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20170802 19:03:47.303" level="FAIL">ReadTimeout: HTTPSConnectionPool(host='9.3.21.61', port=443): Read timed out. (read timeout=20.0): FAIL != PASS</msg>
<status status="FAIL" endtime="20170802 19:03:47.303" starttime="20170802 19:03:47.303"></status>
</kw>
<status status="FAIL" endtime="20170802 19:03:47.303" starttime="20170802 19:03:27.271"></status>
</kw>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170802 19:04:07.305" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61, headers={},                     cookies=None, auth=None, timeout=20, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170802 19:04:07.306" starttime="20170802 19:04:07.305"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170802 19:04:07.306" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170802 19:04:07.306" starttime="20170802 19:04:07.306"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170802 19:04:07.307" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170802 19:04:07.307" starttime="20170802 19:04:07.307"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170802 19:04:07.308" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170802 19:04:07.308" starttime="20170802 19:04:07.307"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170802 19:04:27.332" level="FAIL">ReadTimeout: HTTPSConnectionPool(host='9.3.21.61', port=443): Read timed out. (read timeout=20.0)</msg>
<status status="FAIL" endtime="20170802 19:04:27.333" starttime="20170802 19:04:07.309"></status>
</kw>
<msg timestamp="20170802 19:04:27.333" level="INFO">${status} = FAIL</msg>
<msg timestamp="20170802 19:04:27.333" level="INFO">${resp} = ReadTimeout: HTTPSConnectionPool(host='9.3.21.61', port=443): Read timed out. (read timeout=20.0)</msg>
<status status="PASS" endtime="20170802 19:04:27.333" starttime="20170802 19:04:07.308"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170802 19:04:27.334" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20170802 19:04:27.334" level="FAIL">ReadTimeout: HTTPSConnectionPool(host='9.3.21.61', port=443): Read timed out. (read timeout=20.0): FAIL != PASS</msg>
<status status="FAIL" endtime="20170802 19:04:27.334" starttime="20170802 19:04:27.333"></status>
</kw>
<status status="FAIL" endtime="20170802 19:04:27.334" starttime="20170802 19:04:07.304"></status>
</kw>
<msg timestamp="20170802 19:04:27.334" level="FAIL">Keyword 'Post Login Request' failed after retrying for 40 seconds. The last error was: ReadTimeout: HTTPSConnectionPool(host='9.3.21.61', port=443): Read timed out. (read timeout=20.0): FAIL != PASS</msg>
<status status="FAIL" endtime="20170802 19:04:27.334" starttime="20170802 19:03:27.270"></status>
</kw>
<status status="FAIL" endtime="20170802 19:04:27.335" starttime="20170802 19:03:27.268"></status>
</kw>
<msg timestamp="20170802 19:04:27.335" level="INFO">${l_rest} = False</msg>
<status status="PASS" endtime="20170802 19:04:27.335" starttime="20170802 19:03:27.268"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${l_rest}' == '${False}'</arg>
<arg>Fail</arg>
<arg>msg=REST Authentication Failed</arg>
</arguments>
<kw name="Fail" library="BuiltIn">
<doc>Fails the test with the given message and optionally alters its tags.</doc>
<arguments>
<arg>msg=REST Authentication Failed</arg>
</arguments>
<msg timestamp="20170802 19:04:27.336" level="FAIL">REST Authentication Failed</msg>
<status status="FAIL" endtime="20170802 19:04:27.336" starttime="20170802 19:04:27.336"></status>
</kw>
<status status="FAIL" endtime="20170802 19:04:27.336" starttime="20170802 19:04:27.335"></status>
</kw>
<status status="FAIL" endtime="20170802 19:04:27.336" starttime="20170802 19:03:24.226"></status>
</kw>
<kw name="Verify Ping and REST Authentication" library="utils">
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Ping Host</arg>
<arg>${OPENBMC_HOST}</arg>
</arguments>
<assign>
<var>${l_ping}</var>
</assign>
<kw name="Ping Host" library="utils">
<arguments>
<arg>${OPENBMC_HOST}</arg>
</arguments>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${host}</arg>
<arg>msg=No host provided</arg>
</arguments>
<msg timestamp="20170802 19:04:37.339" level="INFO">Length is 9</msg>
<status status="PASS" endtime="20170802 19:04:37.339" starttime="20170802 19:04:37.338"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>ping -c 4 ${host}</arg>
</arguments>
<assign>
<var>${RC}</var>
<var>${output}</var>
</assign>
<msg timestamp="20170802 19:04:37.352" level="INFO">Running command 'ping -c 4 9.3.21.61 2&gt;&amp;1'.</msg>
<msg timestamp="20170802 19:04:40.352" level="INFO">${RC} = 0</msg>
<msg timestamp="20170802 19:04:40.352" level="INFO">${output} = PING 9.3.21.61 (9.3.21.61) 56(84) bytes of data.
64 bytes from 9.3.21.61: icmp_seq=1 ttl=62 time=0.772 ms
64 bytes from 9.3.21.61: icmp_seq=2 ttl=62 time=1.28 ms
64 bytes from 9.3.21.61: icmp_seq=3 tt...</msg>
<status status="PASS" endtime="20170802 19:04:40.353" starttime="20170802 19:04:37.339"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>RC: ${RC}\nOutput:\n${output}</arg>
</arguments>
<msg timestamp="20170802 19:04:40.371" level="INFO">RC: 0
Output:
PING 9.3.21.61 (9.3.21.61) 56(84) bytes of data.
64 bytes from 9.3.21.61: icmp_seq=1 ttl=62 time=0.772 ms
64 bytes from 9.3.21.61: icmp_seq=2 ttl=62 time=1.28 ms
64 bytes from 9.3.21.61: icmp_seq=3 ttl=62 time=0.558 ms
64 bytes from 9.3.21.61: icmp_seq=4 ttl=62 time=0.551 ms

--- 9.3.21.61 ping statistics ---
4 packets transmitted, 4 received, 0% packet loss, time 2999ms
rtt min/avg/max/mdev = 0.551/0.790/1.281/0.298 ms</msg>
<status status="PASS" endtime="20170802 19:04:40.371" starttime="20170802 19:04:40.368"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${RC}</arg>
<arg>${0}</arg>
</arguments>
<status status="PASS" endtime="20170802 19:04:40.373" starttime="20170802 19:04:40.373"></status>
</kw>
<status status="PASS" endtime="20170802 19:04:40.375" starttime="20170802 19:04:37.338"></status>
</kw>
<msg timestamp="20170802 19:04:40.375" level="INFO">${l_ping} = True</msg>
<status status="PASS" endtime="20170802 19:04:40.375" starttime="20170802 19:04:37.337"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${l_ping}' == '${False}'</arg>
<arg>Fail</arg>
<arg>msg=Ping Failed</arg>
</arguments>
<status status="PASS" endtime="20170802 19:04:40.376" starttime="20170802 19:04:40.375"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Initialize OpenBMC</arg>
</arguments>
<assign>
<var>${l_rest}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170802 19:04:40.381" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61, headers={},                     cookies=None, auth=None, timeout=20, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170802 19:04:40.389" starttime="20170802 19:04:40.380"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170802 19:04:40.389" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170802 19:04:40.389" starttime="20170802 19:04:40.389"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170802 19:04:40.390" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170802 19:04:40.390" starttime="20170802 19:04:40.390"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170802 19:04:40.391" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170802 19:04:40.391" starttime="20170802 19:04:40.390"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170802 19:05:00.405" level="FAIL">ReadTimeout: HTTPSConnectionPool(host='9.3.21.61', port=443): Read timed out. (read timeout=20.0)</msg>
<status status="FAIL" endtime="20170802 19:05:00.405" starttime="20170802 19:04:40.392"></status>
</kw>
<msg timestamp="20170802 19:05:00.406" level="INFO">${status} = FAIL</msg>
<msg timestamp="20170802 19:05:00.406" level="INFO">${resp} = ReadTimeout: HTTPSConnectionPool(host='9.3.21.61', port=443): Read timed out. (read timeout=20.0)</msg>
<status status="PASS" endtime="20170802 19:05:00.406" starttime="20170802 19:04:40.391"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170802 19:05:00.406" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20170802 19:05:00.407" level="FAIL">ReadTimeout: HTTPSConnectionPool(host='9.3.21.61', port=443): Read timed out. (read timeout=20.0): FAIL != PASS</msg>
<status status="FAIL" endtime="20170802 19:05:00.407" starttime="20170802 19:05:00.406"></status>
</kw>
<status status="FAIL" endtime="20170802 19:05:00.407" starttime="20170802 19:04:40.380"></status>
</kw>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170802 19:05:20.409" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61, headers={},                     cookies=None, auth=None, timeout=20, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170802 19:05:20.409" starttime="20170802 19:05:20.408"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170802 19:05:20.410" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170802 19:05:20.410" starttime="20170802 19:05:20.409"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170802 19:05:20.410" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170802 19:05:20.410" starttime="20170802 19:05:20.410"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170802 19:05:20.411" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170802 19:05:20.411" starttime="20170802 19:05:20.411"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170802 19:05:40.437" level="FAIL">ReadTimeout: HTTPSConnectionPool(host='9.3.21.61', port=443): Read timed out. (read timeout=20.0)</msg>
<status status="FAIL" endtime="20170802 19:05:40.437" starttime="20170802 19:05:20.412"></status>
</kw>
<msg timestamp="20170802 19:05:40.437" level="INFO">${status} = FAIL</msg>
<msg timestamp="20170802 19:05:40.437" level="INFO">${resp} = ReadTimeout: HTTPSConnectionPool(host='9.3.21.61', port=443): Read timed out. (read timeout=20.0)</msg>
<status status="PASS" endtime="20170802 19:05:40.437" starttime="20170802 19:05:20.411"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170802 19:05:40.438" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20170802 19:05:40.438" level="FAIL">ReadTimeout: HTTPSConnectionPool(host='9.3.21.61', port=443): Read timed out. (read timeout=20.0): FAIL != PASS</msg>
<status status="FAIL" endtime="20170802 19:05:40.438" starttime="20170802 19:05:40.438"></status>
</kw>
<status status="FAIL" endtime="20170802 19:05:40.438" starttime="20170802 19:05:20.407"></status>
</kw>
<msg timestamp="20170802 19:05:40.439" level="FAIL">Keyword 'Post Login Request' failed after retrying for 40 seconds. The last error was: ReadTimeout: HTTPSConnectionPool(host='9.3.21.61', port=443): Read timed out. (read timeout=20.0): FAIL != PASS</msg>
<status status="FAIL" endtime="20170802 19:05:40.439" starttime="20170802 19:04:40.379"></status>
</kw>
<status status="FAIL" endtime="20170802 19:05:40.439" starttime="20170802 19:04:40.377"></status>
</kw>
<msg timestamp="20170802 19:05:40.439" level="INFO">${l_rest} = False</msg>
<status status="PASS" endtime="20170802 19:05:40.439" starttime="20170802 19:04:40.377"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${l_rest}' == '${False}'</arg>
<arg>Fail</arg>
<arg>msg=REST Authentication Failed</arg>
</arguments>
<kw name="Fail" library="BuiltIn">
<doc>Fails the test with the given message and optionally alters its tags.</doc>
<arguments>
<arg>msg=REST Authentication Failed</arg>
</arguments>
<msg timestamp="20170802 19:05:40.440" level="FAIL">REST Authentication Failed</msg>
<status status="FAIL" endtime="20170802 19:05:40.440" starttime="20170802 19:05:40.440"></status>
</kw>
<status status="FAIL" endtime="20170802 19:05:40.440" starttime="20170802 19:05:40.439"></status>
</kw>
<status status="FAIL" endtime="20170802 19:05:40.440" starttime="20170802 19:04:37.337"></status>
</kw>
<kw name="Verify Ping and REST Authentication" library="utils">
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Ping Host</arg>
<arg>${OPENBMC_HOST}</arg>
</arguments>
<assign>
<var>${l_ping}</var>
</assign>
<kw name="Ping Host" library="utils">
<arguments>
<arg>${OPENBMC_HOST}</arg>
</arguments>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${host}</arg>
<arg>msg=No host provided</arg>
</arguments>
<msg timestamp="20170802 19:05:50.443" level="INFO">Length is 9</msg>
<status status="PASS" endtime="20170802 19:05:50.443" starttime="20170802 19:05:50.442"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>ping -c 4 ${host}</arg>
</arguments>
<assign>
<var>${RC}</var>
<var>${output}</var>
</assign>
<msg timestamp="20170802 19:05:50.446" level="INFO">Running command 'ping -c 4 9.3.21.61 2&gt;&amp;1'.</msg>
<msg timestamp="20170802 19:05:53.455" level="INFO">${RC} = 0</msg>
<msg timestamp="20170802 19:05:53.457" level="INFO">${output} = PING 9.3.21.61 (9.3.21.61) 56(84) bytes of data.
64 bytes from 9.3.21.61: icmp_seq=1 ttl=62 time=0.762 ms
64 bytes from 9.3.21.61: icmp_seq=2 ttl=62 time=0.670 ms
64 bytes from 9.3.21.61: icmp_seq=3 t...</msg>
<status status="PASS" endtime="20170802 19:05:53.457" starttime="20170802 19:05:50.443"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>RC: ${RC}\nOutput:\n${output}</arg>
</arguments>
<msg timestamp="20170802 19:05:53.475" level="INFO">RC: 0
Output:
PING 9.3.21.61 (9.3.21.61) 56(84) bytes of data.
64 bytes from 9.3.21.61: icmp_seq=1 ttl=62 time=0.762 ms
64 bytes from 9.3.21.61: icmp_seq=2 ttl=62 time=0.670 ms
64 bytes from 9.3.21.61: icmp_seq=3 ttl=62 time=0.569 ms
64 bytes from 9.3.21.61: icmp_seq=4 ttl=62 time=0.545 ms

--- 9.3.21.61 ping statistics ---
4 packets transmitted, 4 received, 0% packet loss, time 3000ms
rtt min/avg/max/mdev = 0.545/0.636/0.762/0.089 ms</msg>
<status status="PASS" endtime="20170802 19:05:53.475" starttime="20170802 19:05:53.472"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${RC}</arg>
<arg>${0}</arg>
</arguments>
<status status="PASS" endtime="20170802 19:05:53.477" starttime="20170802 19:05:53.475"></status>
</kw>
<status status="PASS" endtime="20170802 19:05:53.477" starttime="20170802 19:05:50.442"></status>
</kw>
<msg timestamp="20170802 19:05:53.478" level="INFO">${l_ping} = True</msg>
<status status="PASS" endtime="20170802 19:05:53.478" starttime="20170802 19:05:50.442"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${l_ping}' == '${False}'</arg>
<arg>Fail</arg>
<arg>msg=Ping Failed</arg>
</arguments>
<status status="PASS" endtime="20170802 19:05:53.479" starttime="20170802 19:05:53.479"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Initialize OpenBMC</arg>
</arguments>
<assign>
<var>${l_rest}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170802 19:05:53.489" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61, headers={},                     cookies=None, auth=None, timeout=20, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170802 19:05:53.493" starttime="20170802 19:05:53.488"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170802 19:05:53.494" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170802 19:05:53.494" starttime="20170802 19:05:53.493"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170802 19:05:53.494" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170802 19:05:53.494" starttime="20170802 19:05:53.494"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170802 19:05:53.495" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170802 19:05:53.495" starttime="20170802 19:05:53.495"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170802 19:06:13.521" level="FAIL">ReadTimeout: HTTPSConnectionPool(host='9.3.21.61', port=443): Read timed out. (read timeout=20.0)</msg>
<status status="FAIL" endtime="20170802 19:06:13.521" starttime="20170802 19:05:53.496"></status>
</kw>
<msg timestamp="20170802 19:06:13.521" level="INFO">${status} = FAIL</msg>
<msg timestamp="20170802 19:06:13.522" level="INFO">${resp} = ReadTimeout: HTTPSConnectionPool(host='9.3.21.61', port=443): Read timed out. (read timeout=20.0)</msg>
<status status="PASS" endtime="20170802 19:06:13.522" starttime="20170802 19:05:53.495"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170802 19:06:13.522" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20170802 19:06:13.522" level="FAIL">ReadTimeout: HTTPSConnectionPool(host='9.3.21.61', port=443): Read timed out. (read timeout=20.0): FAIL != PASS</msg>
<status status="FAIL" endtime="20170802 19:06:13.523" starttime="20170802 19:06:13.522"></status>
</kw>
<status status="FAIL" endtime="20170802 19:06:13.523" starttime="20170802 19:05:53.484"></status>
</kw>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170802 19:06:33.524" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61, headers={},                     cookies=None, auth=None, timeout=20, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170802 19:06:33.525" starttime="20170802 19:06:33.524"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170802 19:06:33.525" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170802 19:06:33.526" starttime="20170802 19:06:33.525"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170802 19:06:33.526" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170802 19:06:33.526" starttime="20170802 19:06:33.526"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170802 19:06:33.527" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170802 19:06:33.527" starttime="20170802 19:06:33.527"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170802 19:06:53.551" level="FAIL">ReadTimeout: HTTPSConnectionPool(host='9.3.21.61', port=443): Read timed out. (read timeout=20.0)</msg>
<status status="FAIL" endtime="20170802 19:06:53.552" starttime="20170802 19:06:33.528"></status>
</kw>
<msg timestamp="20170802 19:06:53.552" level="INFO">${status} = FAIL</msg>
<msg timestamp="20170802 19:06:53.552" level="INFO">${resp} = ReadTimeout: HTTPSConnectionPool(host='9.3.21.61', port=443): Read timed out. (read timeout=20.0)</msg>
<status status="PASS" endtime="20170802 19:06:53.552" starttime="20170802 19:06:33.527"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170802 19:06:53.553" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20170802 19:06:53.553" level="FAIL">ReadTimeout: HTTPSConnectionPool(host='9.3.21.61', port=443): Read timed out. (read timeout=20.0): FAIL != PASS</msg>
<status status="FAIL" endtime="20170802 19:06:53.553" starttime="20170802 19:06:53.552"></status>
</kw>
<status status="FAIL" endtime="20170802 19:06:53.553" starttime="20170802 19:06:33.523"></status>
</kw>
<msg timestamp="20170802 19:06:53.553" level="FAIL">Keyword 'Post Login Request' failed after retrying for 40 seconds. The last error was: ReadTimeout: HTTPSConnectionPool(host='9.3.21.61', port=443): Read timed out. (read timeout=20.0): FAIL != PASS</msg>
<status status="FAIL" endtime="20170802 19:06:53.553" starttime="20170802 19:05:53.483"></status>
</kw>
<status status="FAIL" endtime="20170802 19:06:53.554" starttime="20170802 19:05:53.481"></status>
</kw>
<msg timestamp="20170802 19:06:53.554" level="INFO">${l_rest} = False</msg>
<status status="PASS" endtime="20170802 19:06:53.554" starttime="20170802 19:05:53.481"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${l_rest}' == '${False}'</arg>
<arg>Fail</arg>
<arg>msg=REST Authentication Failed</arg>
</arguments>
<kw name="Fail" library="BuiltIn">
<doc>Fails the test with the given message and optionally alters its tags.</doc>
<arguments>
<arg>msg=REST Authentication Failed</arg>
</arguments>
<msg timestamp="20170802 19:06:53.555" level="FAIL">REST Authentication Failed</msg>
<status status="FAIL" endtime="20170802 19:06:53.555" starttime="20170802 19:06:53.555"></status>
</kw>
<status status="FAIL" endtime="20170802 19:06:53.555" starttime="20170802 19:06:53.554"></status>
</kw>
<status status="FAIL" endtime="20170802 19:06:53.555" starttime="20170802 19:05:50.441"></status>
</kw>
<kw name="Verify Ping and REST Authentication" library="utils">
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Ping Host</arg>
<arg>${OPENBMC_HOST}</arg>
</arguments>
<assign>
<var>${l_ping}</var>
</assign>
<kw name="Ping Host" library="utils">
<arguments>
<arg>${OPENBMC_HOST}</arg>
</arguments>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${host}</arg>
<arg>msg=No host provided</arg>
</arguments>
<msg timestamp="20170802 19:07:03.558" level="INFO">Length is 9</msg>
<status status="PASS" endtime="20170802 19:07:03.558" starttime="20170802 19:07:03.557"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>ping -c 4 ${host}</arg>
</arguments>
<assign>
<var>${RC}</var>
<var>${output}</var>
</assign>
<msg timestamp="20170802 19:07:03.561" level="INFO">Running command 'ping -c 4 9.3.21.61 2&gt;&amp;1'.</msg>
<msg timestamp="20170802 19:07:06.564" level="INFO">${RC} = 0</msg>
<msg timestamp="20170802 19:07:06.564" level="INFO">${output} = PING 9.3.21.61 (9.3.21.61) 56(84) bytes of data.
64 bytes from 9.3.21.61: icmp_seq=1 ttl=62 time=0.705 ms
64 bytes from 9.3.21.61: icmp_seq=2 ttl=62 time=1.25 ms
64 bytes from 9.3.21.61: icmp_seq=3 tt...</msg>
<status status="PASS" endtime="20170802 19:07:06.564" starttime="20170802 19:07:03.558"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>RC: ${RC}\nOutput:\n${output}</arg>
</arguments>
<msg timestamp="20170802 19:07:06.568" level="INFO">RC: 0
Output:
PING 9.3.21.61 (9.3.21.61) 56(84) bytes of data.
64 bytes from 9.3.21.61: icmp_seq=1 ttl=62 time=0.705 ms
64 bytes from 9.3.21.61: icmp_seq=2 ttl=62 time=1.25 ms
64 bytes from 9.3.21.61: icmp_seq=3 ttl=62 time=0.573 ms
64 bytes from 9.3.21.61: icmp_seq=4 ttl=62 time=0.676 ms

--- 9.3.21.61 ping statistics ---
4 packets transmitted, 4 received, 0% packet loss, time 2999ms
rtt min/avg/max/mdev = 0.573/0.803/1.258/0.267 ms</msg>
<status status="PASS" endtime="20170802 19:07:06.568" starttime="20170802 19:07:06.567"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${RC}</arg>
<arg>${0}</arg>
</arguments>
<status status="PASS" endtime="20170802 19:07:06.570" starttime="20170802 19:07:06.568"></status>
</kw>
<status status="PASS" endtime="20170802 19:07:06.570" starttime="20170802 19:07:03.557"></status>
</kw>
<msg timestamp="20170802 19:07:06.570" level="INFO">${l_ping} = True</msg>
<status status="PASS" endtime="20170802 19:07:06.570" starttime="20170802 19:07:03.556"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${l_ping}' == '${False}'</arg>
<arg>Fail</arg>
<arg>msg=Ping Failed</arg>
</arguments>
<status status="PASS" endtime="20170802 19:07:06.571" starttime="20170802 19:07:06.571"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Initialize OpenBMC</arg>
</arguments>
<assign>
<var>${l_rest}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170802 19:07:06.574" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61, headers={},                     cookies=None, auth=None, timeout=20, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170802 19:07:06.575" starttime="20170802 19:07:06.574"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170802 19:07:06.576" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170802 19:07:06.576" starttime="20170802 19:07:06.575"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170802 19:07:06.577" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170802 19:07:06.577" starttime="20170802 19:07:06.576"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170802 19:07:06.577" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170802 19:07:06.577" starttime="20170802 19:07:06.577"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170802 19:07:26.603" level="FAIL">ReadTimeout: HTTPSConnectionPool(host='9.3.21.61', port=443): Read timed out. (read timeout=20.0)</msg>
<status status="FAIL" endtime="20170802 19:07:26.603" starttime="20170802 19:07:06.578"></status>
</kw>
<msg timestamp="20170802 19:07:26.604" level="INFO">${status} = FAIL</msg>
<msg timestamp="20170802 19:07:26.604" level="INFO">${resp} = ReadTimeout: HTTPSConnectionPool(host='9.3.21.61', port=443): Read timed out. (read timeout=20.0)</msg>
<status status="PASS" endtime="20170802 19:07:26.604" starttime="20170802 19:07:06.578"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170802 19:07:26.605" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20170802 19:07:26.605" level="FAIL">ReadTimeout: HTTPSConnectionPool(host='9.3.21.61', port=443): Read timed out. (read timeout=20.0): FAIL != PASS</msg>
<status status="FAIL" endtime="20170802 19:07:26.605" starttime="20170802 19:07:26.604"></status>
</kw>
<status status="FAIL" endtime="20170802 19:07:26.605" starttime="20170802 19:07:06.573"></status>
</kw>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170802 19:07:46.607" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61, headers={},                     cookies=None, auth=None, timeout=20, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170802 19:07:46.607" starttime="20170802 19:07:46.606"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170802 19:07:46.608" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170802 19:07:46.608" starttime="20170802 19:07:46.607"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170802 19:07:46.608" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170802 19:07:46.609" starttime="20170802 19:07:46.608"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170802 19:07:46.609" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170802 19:07:46.609" starttime="20170802 19:07:46.609"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170802 19:08:06.636" level="FAIL">ReadTimeout: HTTPSConnectionPool(host='9.3.21.61', port=443): Read timed out. (read timeout=20.0)</msg>
<status status="FAIL" endtime="20170802 19:08:06.636" starttime="20170802 19:07:46.610"></status>
</kw>
<msg timestamp="20170802 19:08:06.637" level="INFO">${status} = FAIL</msg>
<msg timestamp="20170802 19:08:06.637" level="INFO">${resp} = ReadTimeout: HTTPSConnectionPool(host='9.3.21.61', port=443): Read timed out. (read timeout=20.0)</msg>
<status status="PASS" endtime="20170802 19:08:06.637" starttime="20170802 19:07:46.610"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170802 19:08:06.638" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20170802 19:08:06.638" level="FAIL">ReadTimeout: HTTPSConnectionPool(host='9.3.21.61', port=443): Read timed out. (read timeout=20.0): FAIL != PASS</msg>
<status status="FAIL" endtime="20170802 19:08:06.638" starttime="20170802 19:08:06.637"></status>
</kw>
<status status="FAIL" endtime="20170802 19:08:06.638" starttime="20170802 19:07:46.605"></status>
</kw>
<msg timestamp="20170802 19:08:06.638" level="FAIL">Keyword 'Post Login Request' failed after retrying for 40 seconds. The last error was: ReadTimeout: HTTPSConnectionPool(host='9.3.21.61', port=443): Read timed out. (read timeout=20.0): FAIL != PASS</msg>
<status status="FAIL" endtime="20170802 19:08:06.638" starttime="20170802 19:07:06.573"></status>
</kw>
<status status="FAIL" endtime="20170802 19:08:06.639" starttime="20170802 19:07:06.572"></status>
</kw>
<msg timestamp="20170802 19:08:06.639" level="INFO">${l_rest} = False</msg>
<status status="PASS" endtime="20170802 19:08:06.639" starttime="20170802 19:07:06.572"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${l_rest}' == '${False}'</arg>
<arg>Fail</arg>
<arg>msg=REST Authentication Failed</arg>
</arguments>
<kw name="Fail" library="BuiltIn">
<doc>Fails the test with the given message and optionally alters its tags.</doc>
<arguments>
<arg>msg=REST Authentication Failed</arg>
</arguments>
<msg timestamp="20170802 19:08:06.640" level="FAIL">REST Authentication Failed</msg>
<status status="FAIL" endtime="20170802 19:08:06.640" starttime="20170802 19:08:06.640"></status>
</kw>
<status status="FAIL" endtime="20170802 19:08:06.640" starttime="20170802 19:08:06.639"></status>
</kw>
<status status="FAIL" endtime="20170802 19:08:06.640" starttime="20170802 19:07:03.556"></status>
</kw>
<msg timestamp="20170802 19:08:06.640" level="FAIL">Keyword 'Verify Ping and REST Authentication' failed after retrying for 20 minutes. The last error was: REST Authentication Failed</msg>
<status status="FAIL" endtime="20170802 19:08:06.641" starttime="20170802 18:47:06.330"></status>
</kw>
<status status="FAIL" endtime="20170802 19:08:06.641" starttime="20170802 18:47:06.330"></status>
</kw>
<status status="FAIL" endtime="20170802 19:08:06.641" starttime="20170802 18:46:49.557"></status>
</kw>
<status status="FAIL" endtime="20170802 19:08:06.641" starttime="20170802 18:46:49.557"></status>
</kw>
<kw type="teardown" name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>FFDC On Test Case Fail</arg>
</arguments>
<kw name="FFDC On Test Case Fail" library="openbmc_ffdc">
<doc>Generic FFDC entry point. Place holder to hook in</doc>
<kw name="Is Host Quiesced" library="state_manager">
<doc>Check if host state is quiesced.</doc>
<assign>
<var>${status}</var>
</assign>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170802 19:08:06.657" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170802 19:08:06.658" starttime="20170802 19:08:06.657"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170802 19:08:06.658" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170802 19:08:06.658" starttime="20170802 19:08:06.658"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170802 19:08:06.659" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170802 19:08:06.659" starttime="20170802 19:08:06.659"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170802 19:08:06.660" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170802 19:08:06.660" starttime="20170802 19:08:06.659"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170802 19:08:16.676" level="FAIL">ReadTimeout: HTTPSConnectionPool(host='9.3.21.61', port=443): Read timed out. (read timeout=10.0)</msg>
<status status="FAIL" endtime="20170802 19:08:16.676" starttime="20170802 19:08:06.660"></status>
</kw>
<msg timestamp="20170802 19:08:16.676" level="INFO">${status} = FAIL</msg>
<msg timestamp="20170802 19:08:16.676" level="INFO">${resp} = ReadTimeout: HTTPSConnectionPool(host='9.3.21.61', port=443): Read timed out. (read timeout=10.0)</msg>
<status status="PASS" endtime="20170802 19:08:16.676" starttime="20170802 19:08:06.660"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170802 19:08:16.677" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20170802 19:08:16.677" level="FAIL">ReadTimeout: HTTPSConnectionPool(host='9.3.21.61', port=443): Read timed out. (read timeout=10.0): FAIL != PASS</msg>
<status status="FAIL" endtime="20170802 19:08:16.677" starttime="20170802 19:08:16.677"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170802 19:08:16.678" level="FAIL">Resolving variable '${resp.status_code}' failed: AttributeError: 'unicode' object has no attribute 'status_code'</msg>
<status status="FAIL" endtime="20170802 19:08:16.678" starttime="20170802 19:08:16.678"></status>
</kw>
<status status="FAIL" endtime="20170802 19:08:16.679" starttime="20170802 19:08:06.656"></status>
</kw>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170802 19:08:36.681" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.21.61, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170802 19:08:36.681" starttime="20170802 19:08:36.680"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170802 19:08:36.682" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170802 19:08:36.682" starttime="20170802 19:08:36.682"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170802 19:08:36.683" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170802 19:08:36.683" starttime="20170802 19:08:36.682"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170802 19:08:36.683" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170802 19:08:36.683" starttime="20170802 19:08:36.683"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170802 19:08:46.700" level="FAIL">ReadTimeout: HTTPSConnectionPool(host='9.3.21.61', port=443): Read timed out. (read timeout=10.0)</msg>
<status status="FAIL" endtime="20170802 19:08:46.700" starttime="20170802 19:08:36.684"></status>
</kw>
<msg timestamp="20170802 19:08:46.700" level="INFO">${status} = FAIL</msg>
<msg timestamp="20170802 19:08:46.700" level="INFO">${resp} = ReadTimeout: HTTPSConnectionPool(host='9.3.21.61', port=443): Read timed out. (read timeout=10.0)</msg>
<status status="PASS" endtime="20170802 19:08:46.700" starttime="20170802 19:08:36.684"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170802 19:08:46.701" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20170802 19:08:46.701" level="FAIL">ReadTimeout: HTTPSConnectionPool(host='9.3.21.61', port=443): Read timed out. (read timeout=10.0): FAIL != PASS</msg>
<status status="FAIL" endtime="20170802 19:08:46.701" starttime="20170802 19:08:46.701"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170802 19:08:46.702" level="FAIL">Resolving variable '${resp.status_code}' failed: AttributeError: 'unicode' object has no attribute 'status_code'</msg>
<status status="FAIL" endtime="20170802 19:08:46.702" starttime="20170802 19:08:46.701"></status>
</kw>
<status status="FAIL" endtime="20170802 19:08:46.702" starttime="20170802 19:08:36.679"></status>
</kw>
<msg timestamp="20170802 19:08:46.702" level="FAIL">Keyword 'Post Login Request' failed after retrying for 40 seconds. The last error was: Several failures occurred:

1) ReadTimeout: HTTPSConnectionPool(host='9.3.21.61', port=443): Read timed out. (read timeout=10.0): FAIL != PASS

2) Resolving variable '${resp.status_code}' failed: AttributeError: 'unicode' object has no attribute 'status_code'</msg>
<status status="FAIL" endtime="20170802 19:08:46.702" starttime="20170802 19:08:06.656"></status>
</kw>
<status status="FAIL" endtime="20170802 19:08:46.703" starttime="20170802 19:08:06.655"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170802 19:08:46.703" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" endtime="20170802 19:08:46.703" starttime="20170802 19:08:46.703"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170802 19:08:46.704" starttime="20170802 19:08:46.704"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170802 19:08:56.717" level="WARN">Retrying (Retry(total=2, connect=None, read=None, redirect=None, status=None)) after connection broken by 'ReadTimeoutError("HTTPSConnectionPool(host='9.3.21.61', port=443): Read timed out. (read timeout=10.0)",)': /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<msg timestamp="20170802 19:09:06.929" level="WARN">Retrying (Retry(total=1, connect=None, read=None, redirect=None, status=None)) after connection broken by 'ReadTimeoutError("HTTPSConnectionPool(host='9.3.21.61', port=443): Read timed out. (read timeout=10.0)",)': /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<msg timestamp="20170802 19:09:17.344" level="WARN">Retrying (Retry(total=0, connect=None, read=None, redirect=None, status=None)) after connection broken by 'ReadTimeoutError("HTTPSConnectionPool(host='9.3.21.61', port=443): Read timed out. (read timeout=10.0)",)': /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<msg timestamp="20170802 19:09:27.362" level="INFO">${ret} = None</msg>
<msg timestamp="20170802 19:09:27.363" level="FAIL">ConnectionError: HTTPSConnectionPool(host='9.3.21.61', port=443): Max retries exceeded with url: /xyz/openbmc_project/state/host0//attr/CurrentHostState (Caused by ReadTimeoutError("HTTPSConnectionPool(host='9.3.21.61', port=443): Read timed out. (read timeout=10.0)",))</msg>
<status status="FAIL" endtime="20170802 19:09:27.363" starttime="20170802 19:08:46.704"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170802 19:09:27.364" starttime="20170802 19:09:27.364"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170802 19:09:27.365" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170802 19:09:27.366" starttime="20170802 19:09:27.364"></status>
</kw>
<msg timestamp="20170802 19:09:27.367" level="INFO">${resp} = None</msg>
<status status="FAIL" endtime="20170802 19:09:27.367" starttime="20170802 19:08:06.654"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170802 19:09:27.367" level="FAIL">Resolving variable '${resp.status_code}' failed: AttributeError: 'NoneType' object has no attribute 'status_code'</msg>
<status status="FAIL" endtime="20170802 19:09:27.367" starttime="20170802 19:09:27.367"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170802 19:09:27.368" level="INFO">${content} = None</msg>
<msg timestamp="20170802 19:09:27.368" level="FAIL">Resolving variable '${resp.content}' failed: AttributeError: 'NoneType' object has no attribute 'content'</msg>
<status status="FAIL" endtime="20170802 19:09:27.368" starttime="20170802 19:09:27.368"></status>
</kw>
<msg timestamp="20170802 19:09:27.369" level="INFO">${state} = None</msg>
<msg timestamp="20170802 19:09:27.369" level="FAIL">Replacing variables from keyword return value failed: Resolving variable '${content["data"]}' failed: TypeError: 'NoneType' object has no attribute '__getitem__'</msg>
<status status="FAIL" endtime="20170802 19:09:27.369" starttime="20170802 19:08:06.654"></status>
</kw>
<msg timestamp="20170802 19:09:27.369" level="INFO">${host_state} = None</msg>
<msg timestamp="20170802 19:09:27.369" level="FAIL">Replacing variables from keyword return value failed: Resolving variable '${state.rsplit('.', 1)[1]}' failed: AttributeError: 'NoneType' object has no attribute 'rsplit'</msg>
<status status="FAIL" endtime="20170802 19:09:27.369" starttime="20170802 19:08:06.653"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal</arg>
<arg>${host_state}</arg>
<arg>Quiesced</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${host_state}</arg>
<arg>Quiesced</arg>
</arguments>
<msg timestamp="20170802 19:09:27.370" level="INFO">Argument types are:
&lt;type 'NoneType'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20170802 19:09:27.371" level="FAIL">None != Quiesced</msg>
<status status="FAIL" endtime="20170802 19:09:27.371" starttime="20170802 19:09:27.370"></status>
</kw>
<msg timestamp="20170802 19:09:27.371" level="INFO">${status} = False</msg>
<status status="PASS" endtime="20170802 19:09:27.371" starttime="20170802 19:09:27.370"></status>
</kw>
<msg timestamp="20170802 19:09:27.371" level="INFO">${status} = False</msg>
<status status="FAIL" endtime="20170802 19:09:27.371" starttime="20170802 19:08:06.653"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${TEST_STATUS}' == 'FAIL' or '${status}'=='True'</arg>
<arg>FFDC</arg>
</arguments>
<kw name="Ffdc" library="openbmc_ffdc">
<doc>Gather First Failure Data Capture (FFDC).</doc>
<kw name="Ping Host" library="utils">
<arguments>
<arg>9.3.21.61</arg>
</arguments>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${host}</arg>
<arg>msg=No host provided</arg>
</arguments>
<msg timestamp="20170802 19:09:27.401" level="INFO">Length is 9</msg>
<status status="PASS" endtime="20170802 19:09:27.401" starttime="20170802 19:09:27.401"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>ping -c 4 ${host}</arg>
</arguments>
<assign>
<var>${RC}</var>
<var>${output}</var>
</assign>
<msg timestamp="20170802 19:09:27.420" level="INFO">Running command 'ping -c 4 9.3.21.61 2&gt;&amp;1'.</msg>
<msg timestamp="20170802 19:09:30.415" level="INFO">${RC} = 0</msg>
<msg timestamp="20170802 19:09:30.415" level="INFO">${output} = PING 9.3.21.61 (9.3.21.61) 56(84) bytes of data.
64 bytes from 9.3.21.61: icmp_seq=1 ttl=62 time=1.37 ms
64 bytes from 9.3.21.61: icmp_seq=2 ttl=62 time=0.567 ms
64 bytes from 9.3.21.61: icmp_seq=3 tt...</msg>
<status status="PASS" endtime="20170802 19:09:30.416" starttime="20170802 19:09:27.402"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>RC: ${RC}\nOutput:\n${output}</arg>
</arguments>
<msg timestamp="20170802 19:09:30.436" level="INFO">RC: 0
Output:
PING 9.3.21.61 (9.3.21.61) 56(84) bytes of data.
64 bytes from 9.3.21.61: icmp_seq=1 ttl=62 time=1.37 ms
64 bytes from 9.3.21.61: icmp_seq=2 ttl=62 time=0.567 ms
64 bytes from 9.3.21.61: icmp_seq=3 ttl=62 time=0.546 ms
64 bytes from 9.3.21.61: icmp_seq=4 ttl=62 time=0.529 ms

--- 9.3.21.61 ping statistics ---
4 packets transmitted, 4 received, 0% packet loss, time 3000ms
rtt min/avg/max/mdev = 0.529/0.755/1.379/0.360 ms</msg>
<status status="PASS" endtime="20170802 19:09:30.436" starttime="20170802 19:09:30.431"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${RC}</arg>
<arg>${0}</arg>
</arguments>
<status status="PASS" endtime="20170802 19:09:30.437" starttime="20170802 19:09:30.436"></status>
</kw>
<status status="PASS" endtime="20170802 19:09:30.438" starttime="20170802 19:09:27.400"></status>
</kw>
<kw name="Get Current Time Stamp" library="openbmc_ffdc_utils">
<doc>Get the current time stamp data</doc>
<kw name="Get Current Date" library="DateTime">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20170802 19:09:30.492" level="INFO">${cur_time} = 2017-08-02 19:09:30:491968</msg>
<status status="PASS" endtime="20170802 19:09:30.492" starttime="20170802 19:09:30.492"></status>
</kw>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20170802 19:09:30.493" level="INFO">${cur_time} = 20170802190930491968</msg>
<status status="PASS" endtime="20170802 19:09:30.493" starttime="20170802 19:09:30.493"></status>
</kw>
<status status="PASS" endtime="20170802 19:09:30.493" starttime="20170802 19:09:30.491"></status>
</kw>
<msg timestamp="20170802 19:09:30.500" level="INFO">${FFDC_TIME} = 20170802190930491968</msg>
<kw name="Get Test Dir and Name" library="openbmc_ffdc_utils">
<doc>SUITE_NAME and TEST_NAME are automatic variables</doc>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${SUITE_NAME}</arg>
</arguments>
<assign>
<var>${suite_name}</var>
</assign>
<msg timestamp="20170802 19:09:30.503" level="INFO">${suite_name} = UpdateBmc</msg>
<status status="PASS" endtime="20170802 19:09:30.503" starttime="20170802 19:09:30.503"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${FFDC_TIME}_</arg>
<arg>${suite_name}</arg>
</arguments>
<assign>
<var>${suite_name}</var>
</assign>
<msg timestamp="20170802 19:09:30.504" level="INFO">${suite_name} = 20170802190930491968_UpdateBmc</msg>
<status status="PASS" endtime="20170802 19:09:30.504" starttime="20170802 19:09:30.504"></status>
</kw>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${TEST_NAME}</arg>
</arguments>
<assign>
<var>${test_name}</var>
</assign>
<msg timestamp="20170802 19:09:30.505" level="INFO">${test_name} = InitiateCodeUpdateBMC</msg>
<status status="PASS" endtime="20170802 19:09:30.505" starttime="20170802 19:09:30.504"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${FFDC_TIME}_</arg>
<arg>${test_name}</arg>
</arguments>
<assign>
<var>${test_name}</var>
</assign>
<msg timestamp="20170802 19:09:30.505" level="INFO">${test_name} = 20170802190930491968_InitiateCodeUpdateBMC</msg>
<status status="PASS" endtime="20170802 19:09:30.505" starttime="20170802 19:09:30.505"></status>
</kw>
<status status="PASS" endtime="20170802 19:09:30.506" starttime="20170802 19:09:30.502"></status>
</kw>
<msg timestamp="20170802 19:09:30.511" level="INFO">${FFDC_DIR_PATH} = /home/fspcibld/logs/20170802190930491968_UpdateBmc/20170802190930491968_InitiateCodeUpdateBMC/</msg>
<msg timestamp="20170802 19:09:30.515" level="INFO">${FFDC_PREFIX} = 20170802190930491968_</msg>
<msg timestamp="20170802 19:09:30.541" level="INFO">${LOG_PREFIX} = /home/fspcibld/logs/20170802190930491968_UpdateBmc/20170802190930491968_InitiateCodeUpdateBMC/20170802190930491968_</msg>
<kw name="Create Directory" library="OperatingSystem">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>/home/fspcibld/logs/20170802190930491968_UpdateBmc/20170802190930491968_InitiateCodeUpdateBMC/</arg>
</arguments>
<msg timestamp="20170802 19:09:30.543" html="yes" level="INFO">Created directory '&lt;a href="file:///home/fspcibld/logs/20170802190930491968_UpdateBmc/20170802190930491968_InitiateCodeUpdateBMC"&gt;/home/fspcibld/logs/20170802190930491968_UpdateBmc/20170802190930491968_InitiateCodeUpdateBMC&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170802 19:09:30.543" starttime="20170802 19:09:30.542"></status>
</kw>
<msg timestamp="20170802 19:09:30.548" level="INFO">${FFDC_FILE_PATH} = /home/fspcibld/logs/20170802190930491968_UpdateBmc/20170802190930491968_InitiateCodeUpdateBMC/20170802190930491968_BMC_general.txt</msg>
<kw name="Header Message" library="openbmc_ffdc_utils">
<doc>Write header message to the report document manifest.</doc>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${HEADER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170802 19:09:30.565" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170802190930491968_UpdateBmc/20170802190930491968_InitiateCodeUpdateBMC/20170802190930491968_BMC_general.txt"&gt;/home/fspcibld/logs/20170802190930491968_UpdateBmc/20170802190930491968_InitiateCodeUpdateBMC/20170802190930491968_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170802 19:09:30.565" starttime="20170802 19:09:30.564"></status>
</kw>
<status status="PASS" endtime="20170802 19:09:30.565" starttime="20170802 19:09:30.564"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170802 19:09:30.566" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170802190930491968_UpdateBmc/20170802190930491968_InitiateCodeUpdateBMC/20170802190930491968_BMC_general.txt"&gt;/home/fspcibld/logs/20170802190930491968_UpdateBmc/20170802190930491968_InitiateCodeUpdateBMC/20170802190930491968_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170802 19:09:30.566" starttime="20170802 19:09:30.566"></status>
</kw>
<status status="PASS" endtime="20170802 19:09:30.566" starttime="20170802 19:09:30.565"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Suite File\t\t: ${SUITE_NAME} ${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170802 19:09:30.567" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170802190930491968_UpdateBmc/20170802190930491968_InitiateCodeUpdateBMC/20170802190930491968_BMC_general.txt"&gt;/home/fspcibld/logs/20170802190930491968_UpdateBmc/20170802190930491968_InitiateCodeUpdateBMC/20170802190930491968_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170802 19:09:30.568" starttime="20170802 19:09:30.567"></status>
</kw>
<status status="PASS" endtime="20170802 19:09:30.568" starttime="20170802 19:09:30.566"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Case Name\t\t: ${TEST_NAME}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170802 19:09:30.569" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170802190930491968_UpdateBmc/20170802190930491968_InitiateCodeUpdateBMC/20170802190930491968_BMC_general.txt"&gt;/home/fspcibld/logs/20170802190930491968_UpdateBmc/20170802190930491968_InitiateCodeUpdateBMC/20170802190930491968_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170802 19:09:30.569" starttime="20170802 19:09:30.569"></status>
</kw>
<status status="PASS" endtime="20170802 19:09:30.569" starttime="20170802 19:09:30.568"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Source File\t: ${SUITE_SOURCE}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170802 19:09:30.570" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170802190930491968_UpdateBmc/20170802190930491968_InitiateCodeUpdateBMC/20170802190930491968_BMC_general.txt"&gt;/home/fspcibld/logs/20170802190930491968_UpdateBmc/20170802190930491968_InitiateCodeUpdateBMC/20170802190930491968_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170802 19:09:30.570" starttime="20170802 19:09:30.570"></status>
</kw>
<status status="PASS" endtime="20170802 19:09:30.570" starttime="20170802 19:09:30.569"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Failure Time Stamp\t: ${FFDC_TIME}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170802 19:09:30.572" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170802190930491968_UpdateBmc/20170802190930491968_InitiateCodeUpdateBMC/20170802190930491968_BMC_general.txt"&gt;/home/fspcibld/logs/20170802190930491968_UpdateBmc/20170802190930491968_InitiateCodeUpdateBMC/20170802190930491968_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170802 19:09:30.572" starttime="20170802 19:09:30.571"></status>
</kw>
<status status="PASS" endtime="20170802 19:09:30.572" starttime="20170802 19:09:30.571"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Error Message\t: ${TEST_MESSAGE}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170802 19:09:30.573" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170802190930491968_UpdateBmc/20170802190930491968_InitiateCodeUpdateBMC/20170802190930491968_BMC_general.txt"&gt;/home/fspcibld/logs/20170802190930491968_UpdateBmc/20170802190930491968_InitiateCodeUpdateBMC/20170802190930491968_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170802 19:09:30.573" starttime="20170802 19:09:30.573"></status>
</kw>
<status status="PASS" endtime="20170802 19:09:30.573" starttime="20170802 19:09:30.572"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Documentation\t:${\n}${TEST_DOCUMENTATION}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170802 19:09:30.574" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170802190930491968_UpdateBmc/20170802190930491968_InitiateCodeUpdateBMC/20170802190930491968_BMC_general.txt"&gt;/home/fspcibld/logs/20170802190930491968_UpdateBmc/20170802190930491968_InitiateCodeUpdateBMC/20170802190930491968_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170802 19:09:30.575" starttime="20170802 19:09:30.574"></status>
</kw>
<status status="PASS" endtime="20170802 19:09:30.575" starttime="20170802 19:09:30.573"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170802 19:09:30.576" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170802190930491968_UpdateBmc/20170802190930491968_InitiateCodeUpdateBMC/20170802190930491968_BMC_general.txt"&gt;/home/fspcibld/logs/20170802190930491968_UpdateBmc/20170802190930491968_InitiateCodeUpdateBMC/20170802190930491968_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170802 19:09:30.576" starttime="20170802 19:09:30.575"></status>
</kw>
<status status="PASS" endtime="20170802 19:09:30.576" starttime="20170802 19:09:30.575"></status>
</kw>
<kw name="Test Setup Info" library="openbmc_ffdc_utils">
<doc>BMC IP, Model and other information</doc>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}-----------------------${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170802 19:09:30.579" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170802190930491968_UpdateBmc/20170802190930491968_InitiateCodeUpdateBMC/20170802190930491968_BMC_general.txt"&gt;/home/fspcibld/logs/20170802190930491968_UpdateBmc/20170802190930491968_InitiateCodeUpdateBMC/20170802190930491968_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170802 19:09:30.579" starttime="20170802 19:09:30.578"></status>
</kw>
<status status="PASS" endtime="20170802 19:09:30.579" starttime="20170802 19:09:30.577"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Setup Information:</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170802 19:09:30.580" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170802190930491968_UpdateBmc/20170802190930491968_InitiateCodeUpdateBMC/20170802190930491968_BMC_general.txt"&gt;/home/fspcibld/logs/20170802190930491968_UpdateBmc/20170802190930491968_InitiateCodeUpdateBMC/20170802190930491968_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170802 19:09:30.580" starttime="20170802 19:09:30.580"></status>
</kw>
<status status="PASS" endtime="20170802 19:09:30.580" starttime="20170802 19:09:30.579"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}-----------------------${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170802 19:09:30.581" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170802190930491968_UpdateBmc/20170802190930491968_InitiateCodeUpdateBMC/20170802190930491968_BMC_general.txt"&gt;/home/fspcibld/logs/20170802190930491968_UpdateBmc/20170802190930491968_InitiateCodeUpdateBMC/20170802190930491968_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170802 19:09:30.581" starttime="20170802 19:09:30.581"></status>
</kw>
<status status="PASS" endtime="20170802 19:09:30.582" starttime="20170802 19:09:30.580"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>OPENBMC HOST \t: ${OPENBMC_HOST}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170802 19:09:30.583" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170802190930491968_UpdateBmc/20170802190930491968_InitiateCodeUpdateBMC/20170802190930491968_BMC_general.txt"&gt;/home/fspcibld/logs/20170802190930491968_UpdateBmc/20170802190930491968_InitiateCodeUpdateBMC/20170802190930491968_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170802 19:09:30.583" starttime="20170802 19:09:30.582"></status>
</kw>
<status status="PASS" endtime="20170802 19:09:30.583" starttime="20170802 19:09:30.582"></status>
</kw>
<kw name="Get BMC System Model" library="utils">
<doc>Get the BMC model from the device tree.</doc>
<assign>
<var>${model_name}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>cat ${devicetree_base} | cut -d " " -f 1</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${bmc_model}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20170802 19:09:30.611" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.21.61
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170802 19:09:30.611" level="INFO">Logging into '9.3.21.61:22' as 'root'.</msg>
<msg timestamp="20170802 19:09:55.634" level="INFO">Logging into '9.3.21.61:22' as 'root'.</msg>
<msg timestamp="20170802 19:10:20.668" level="INFO">Logging into '9.3.21.61:22' as 'root'.</msg>
<msg timestamp="20170802 19:10:45.694" level="INFO">Logging into '9.3.21.61:22' as 'root'.</msg>
<msg timestamp="20170802 19:11:10.717" level="INFO">Logging into '9.3.21.61:22' as 'root'.</msg>
<msg timestamp="20170802 19:11:35.743" level="INFO">${bmc_model} = None</msg>
<msg timestamp="20170802 19:11:35.743" level="INFO">${stderr} = None</msg>
<msg timestamp="20170802 19:11:35.744" level="INFO">${rc} = None</msg>
<msg timestamp="20170802 19:11:35.744" level="FAIL">SSHException: No existing session</msg>
<status status="FAIL" endtime="20170802 19:11:35.744" starttime="20170802 19:09:30.584"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20170802 19:11:35.745" level="FAIL">Could not get length of 'None'.</msg>
<status status="FAIL" endtime="20170802 19:11:35.745" starttime="20170802 19:11:35.745"></status>
</kw>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${bmc_model}</arg>
</arguments>
<msg timestamp="20170802 19:11:35.746" level="FAIL">Could not get length of 'None'.</msg>
<status status="FAIL" endtime="20170802 19:11:35.746" starttime="20170802 19:11:35.745"></status>
</kw>
<msg timestamp="20170802 19:11:35.746" level="INFO">${model_name} = None</msg>
<status status="FAIL" endtime="20170802 19:11:35.746" starttime="20170802 19:09:30.583"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>SYSTEM TYPE \t: ${model_name}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170802 19:11:35.748" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170802190930491968_UpdateBmc/20170802190930491968_InitiateCodeUpdateBMC/20170802190930491968_BMC_general.txt"&gt;/home/fspcibld/logs/20170802190930491968_UpdateBmc/20170802190930491968_InitiateCodeUpdateBMC/20170802190930491968_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170802 19:11:35.748" starttime="20170802 19:11:35.747"></status>
</kw>
<status status="PASS" endtime="20170802 19:11:35.748" starttime="20170802 19:11:35.746"></status>
</kw>
<status status="FAIL" endtime="20170802 19:11:35.748" starttime="20170802 19:09:30.577"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${MSG_INTRO}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170802 19:11:35.749" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170802190930491968_UpdateBmc/20170802190930491968_InitiateCodeUpdateBMC/20170802190930491968_BMC_general.txt"&gt;/home/fspcibld/logs/20170802190930491968_UpdateBmc/20170802190930491968_InitiateCodeUpdateBMC/20170802190930491968_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170802 19:11:35.749" starttime="20170802 19:11:35.749"></status>
</kw>
<status status="PASS" endtime="20170802 19:11:35.749" starttime="20170802 19:11:35.748"></status>
</kw>
<kw name="Get Ffdc Cmd Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg timestamp="20170802 19:11:35.750" level="INFO">@{entries} = [ APPLICATION DATA | DRIVER INFO | BMC DATA ]</msg>
<status status="PASS" endtime="20170802 19:11:35.750" starttime="20170802 19:11:35.750"></status>
</kw>
<kw type="for" name="${index} IN [ @{entries} ]">
<kw type="foritem" name="${index} = APPLICATION DATA">
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>* ${index.upper()}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170802 19:11:35.752" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170802190930491968_UpdateBmc/20170802190930491968_InitiateCodeUpdateBMC/20170802190930491968_BMC_general.txt"&gt;/home/fspcibld/logs/20170802190930491968_UpdateBmc/20170802190930491968_InitiateCodeUpdateBMC/20170802190930491968_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170802 19:11:35.752" starttime="20170802 19:11:35.751"></status>
</kw>
<status status="PASS" endtime="20170802 19:11:35.752" starttime="20170802 19:11:35.750"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170802 19:11:35.753" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170802190930491968_UpdateBmc/20170802190930491968_InitiateCodeUpdateBMC/20170802190930491968_BMC_general.txt"&gt;/home/fspcibld/logs/20170802190930491968_UpdateBmc/20170802190930491968_InitiateCodeUpdateBMC/20170802190930491968_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170802 19:11:35.753" starttime="20170802 19:11:35.753"></status>
</kw>
<status status="PASS" endtime="20170802 19:11:35.753" starttime="20170802 19:11:35.752"></status>
</kw>
<status status="PASS" endtime="20170802 19:11:35.753" starttime="20170802 19:11:35.750"></status>
</kw>
<kw type="foritem" name="${index} = DRIVER INFO">
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>* ${index.upper()}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170802 19:11:35.755" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170802190930491968_UpdateBmc/20170802190930491968_InitiateCodeUpdateBMC/20170802190930491968_BMC_general.txt"&gt;/home/fspcibld/logs/20170802190930491968_UpdateBmc/20170802190930491968_InitiateCodeUpdateBMC/20170802190930491968_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170802 19:11:35.755" starttime="20170802 19:11:35.754"></status>
</kw>
<status status="PASS" endtime="20170802 19:11:35.755" starttime="20170802 19:11:35.754"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170802 19:11:35.756" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170802190930491968_UpdateBmc/20170802190930491968_InitiateCodeUpdateBMC/20170802190930491968_BMC_general.txt"&gt;/home/fspcibld/logs/20170802190930491968_UpdateBmc/20170802190930491968_InitiateCodeUpdateBMC/20170802190930491968_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170802 19:11:35.756" starttime="20170802 19:11:35.756"></status>
</kw>
<status status="PASS" endtime="20170802 19:11:35.756" starttime="20170802 19:11:35.755"></status>
</kw>
<status status="PASS" endtime="20170802 19:11:35.756" starttime="20170802 19:11:35.754"></status>
</kw>
<kw type="foritem" name="${index} = BMC DATA">
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>* ${index.upper()}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170802 19:11:35.758" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170802190930491968_UpdateBmc/20170802190930491968_InitiateCodeUpdateBMC/20170802190930491968_BMC_general.txt"&gt;/home/fspcibld/logs/20170802190930491968_UpdateBmc/20170802190930491968_InitiateCodeUpdateBMC/20170802190930491968_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170802 19:11:35.758" starttime="20170802 19:11:35.757"></status>
</kw>
<status status="PASS" endtime="20170802 19:11:35.758" starttime="20170802 19:11:35.757"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170802 19:11:35.759" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170802190930491968_UpdateBmc/20170802190930491968_InitiateCodeUpdateBMC/20170802190930491968_BMC_general.txt"&gt;/home/fspcibld/logs/20170802190930491968_UpdateBmc/20170802190930491968_InitiateCodeUpdateBMC/20170802190930491968_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170802 19:11:35.759" starttime="20170802 19:11:35.759"></status>
</kw>
<status status="PASS" endtime="20170802 19:11:35.760" starttime="20170802 19:11:35.758"></status>
</kw>
<status status="PASS" endtime="20170802 19:11:35.760" starttime="20170802 19:11:35.756"></status>
</kw>
<status status="PASS" endtime="20170802 19:11:35.760" starttime="20170802 19:11:35.750"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${MSG_DETAIL}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170802 19:11:35.761" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170802190930491968_UpdateBmc/20170802190930491968_InitiateCodeUpdateBMC/20170802190930491968_BMC_general.txt"&gt;/home/fspcibld/logs/20170802190930491968_UpdateBmc/20170802190930491968_InitiateCodeUpdateBMC/20170802190930491968_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170802 19:11:35.761" starttime="20170802 19:11:35.761"></status>
</kw>
<status status="PASS" endtime="20170802 19:11:35.761" starttime="20170802 19:11:35.760"></status>
</kw>
<status status="FAIL" endtime="20170802 19:11:35.762" starttime="20170802 19:09:30.563"></status>
</kw>
<msg timestamp="20170802 19:11:35.762" level="FAIL">Several failures occurred:

1) SSHException: No existing session

2) Could not get length of 'None'.

3) Could not get length of 'None'.</msg>
<status status="FAIL" endtime="20170802 19:11:35.762" starttime="20170802 19:09:27.373"></status>
</kw>
<status status="FAIL" endtime="20170802 19:11:35.762" starttime="20170802 19:09:27.372"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}'=='True'</arg>
<arg>Recover Quiesced Host</arg>
</arguments>
<status status="PASS" endtime="20170802 19:11:35.763" starttime="20170802 19:11:35.763"></status>
</kw>
<kw name="Log Test Case Status" library="openbmc_ffdc_methods">
<doc>Test case execution result history.</doc>
<kw name="Get Variable Value" library="BuiltIn">
<doc>Returns variable value or ``default`` if the variable does not exist.</doc>
<arguments>
<arg>${FFDC_DIR_PATH_STYLE}</arg>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${FFDC_DIR_PATH_STYLE}</var>
</assign>
<msg timestamp="20170802 19:11:35.764" level="INFO">${FFDC_DIR_PATH_STYLE} = </msg>
<status status="PASS" endtime="20170802 19:11:35.764" starttime="20170802 19:11:35.764"></status>
</kw>
<kw name="Get Variable Value" library="BuiltIn">
<doc>Returns variable value or ``default`` if the variable does not exist.</doc>
<arguments>
<arg>${FFDC_DIR_PATH}</arg>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${FFDC_DIR_PATH}</var>
</assign>
<msg timestamp="20170802 19:11:35.765" level="INFO">${FFDC_DIR_PATH} = /home/fspcibld/logs/20170802190930491968_UpdateBmc/20170802190930491968_InitiateCodeUpdateBMC/</msg>
<status status="PASS" endtime="20170802 19:11:35.765" starttime="20170802 19:11:35.764"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${FFDC_DIR_PATH}' == '${EMPTY}'</arg>
<arg>Set FFDC Defaults</arg>
</arguments>
<status status="PASS" endtime="20170802 19:11:35.765" starttime="20170802 19:11:35.765"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${FFDC_DIR_PATH_STYLE}' == '${1}'</arg>
<arg>Run Keywords</arg>
<arg>Set Global Variable</arg>
<arg>${FFDC_LOG_PATH}</arg>
<arg>${FFDC_DIR_PATH}</arg>
<arg>AND</arg>
<arg>Set Global Variable</arg>
<arg>${TEST_HISTORY}</arg>
<arg>${FFDC_DIR_PATH}test_history.txt</arg>
</arguments>
<status status="PASS" endtime="20170802 19:11:35.766" starttime="20170802 19:11:35.766"></status>
</kw>
<kw name="Create Directory" library="OperatingSystem">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>${FFDC_LOG_PATH}</arg>
</arguments>
<msg timestamp="20170802 19:11:35.766" html="yes" level="INFO">Directory '&lt;a href="file:///home/fspcibld/logs"&gt;/home/fspcibld/logs&lt;/a&gt;' already exists.</msg>
<status status="PASS" endtime="20170802 19:11:35.767" starttime="20170802 19:11:35.766"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>OperatingSystem.File Should Exist</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<assign>
<var>${exist}</var>
</assign>
<kw name="File Should Exist" library="OperatingSystem">
<doc>Fails unless the given ``path`` points to an existing file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
</arguments>
<msg timestamp="20170802 19:11:35.768" html="yes" level="INFO">File '&lt;a href="file:///home/fspcibld/logs/test_history.txt"&gt;/home/fspcibld/logs/test_history.txt&lt;/a&gt;' exists.</msg>
<status status="PASS" endtime="20170802 19:11:35.768" starttime="20170802 19:11:35.767"></status>
</kw>
<msg timestamp="20170802 19:11:35.768" level="INFO">${exist} = True</msg>
<status status="PASS" endtime="20170802 19:11:35.768" starttime="20170802 19:11:35.767"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${exist}' == '${False}'</arg>
<arg>Create File</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<status status="PASS" endtime="20170802 19:11:35.769" starttime="20170802 19:11:35.768"></status>
</kw>
<kw name="Rpvars" library="gen_robot_print">
<arguments>
<arg>TEST_HISTORY</arg>
</arguments>
<status status="PASS" endtime="20170802 19:11:35.769" starttime="20170802 19:11:35.769"></status>
</kw>
<kw name="Get Current Time Stamp" library="openbmc_ffdc_utils">
<doc>Get the current time stamp data</doc>
<assign>
<var>${cur_time}</var>
</assign>
<kw name="Get Current Date" library="DateTime">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20170802 19:11:35.771" level="INFO">${cur_time} = 2017-08-02 19:11:35:770318</msg>
<status status="PASS" endtime="20170802 19:11:35.771" starttime="20170802 19:11:35.770"></status>
</kw>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20170802 19:11:35.771" level="INFO">${cur_time} = 20170802191135770318</msg>
<status status="PASS" endtime="20170802 19:11:35.771" starttime="20170802 19:11:35.771"></status>
</kw>
<msg timestamp="20170802 19:11:35.771" level="INFO">${cur_time} = 20170802191135770318</msg>
<status status="PASS" endtime="20170802 19:11:35.771" starttime="20170802 19:11:35.770"></status>
</kw>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
<arg>${cur_time}:${SUITE_NAME}:${TEST_NAME}:${TEST_STATUS}${\n}</arg>
</arguments>
<msg timestamp="20170802 19:11:35.772" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/test_history.txt"&gt;/home/fspcibld/logs/test_history.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170802 19:11:35.772" starttime="20170802 19:11:35.772"></status>
</kw>
<status status="PASS" endtime="20170802 19:11:35.773" starttime="20170802 19:11:35.763"></status>
</kw>
<status status="FAIL" endtime="20170802 19:11:35.773" starttime="20170802 19:08:06.653"></status>
</kw>
<msg timestamp="20170802 19:11:35.773" level="FAIL">Several failures occurred:

1) Replacing variables from keyword return value failed: Resolving variable '${state.rsplit('.', 1)[1]}' failed: AttributeError: 'NoneType' object has no attribute 'rsplit'

2) Several failures occurred:

1) SSHException: No existing session

2) Could not get length of 'None'.

3) Could not get length of 'None'.</msg>
<status status="FAIL" endtime="20170802 19:11:35.773" starttime="20170802 19:08:06.642">Several failures occurred:

1) Replacing variables from keyword return value failed: Resolving variable '${state.rsplit('.', 1)[1]}' failed: AttributeError: 'NoneType' object has no attribute 'rsplit'

2) Several failures occurred:

1) SSHException: No existing session

2) Could not get length of 'None'.

3) Could not get length of 'None'.</status>
</kw>
<doc>Initiate a code update on the BMC.</doc>
<tags>
<tag>Initiate_Code_Update_BMC</tag>
</tags>
<status status="FAIL" endtime="20170802 19:11:35.774" critical="yes" starttime="20170802 18:46:49.548">Keyword 'Verify Ping and REST Authentication' failed after retrying for 20 minutes. The last error was: REST Authentication Failed

Also teardown failed:
Several failures occurred:

1) Replacing variables from keyword return value failed: Resolving variable '${state.rsplit('.', 1)[1]}' failed: AttributeError: 'NoneType' object has no attribute 'rsplit'

2) Several failures occurred:

1) SSHException: No existing session

2) Could not get length of 'None'.

3) Could not get length of 'None'.</status>
</test>
<doc>Trigger code update to a target BMC.
Execution Method :
python -m robot -v OPENBMC_HOST:&lt;hostname&gt;
-v FILE_PATH:&lt;path/*all.tar&gt; update_bmc.robot

Code update method BMC using REST
Update work flow sequence:
- User input BMC File existence check
- Ping Test and REST authentication
- Set Host Power host setting Policy to RESTORE_LAST_STATE
On reboot this policy would ensure the BMC comes
online and stays at HOST_POWERED_OFF state.
- Issue poweroff
- Prune archived journal logs
- Prepare for Update
- Wait for BMC to come online clean
- Wait for BMC_READY state
- Apply preserve BMC Network setting
- SCP image to BMC
- Activate the flash image
- Warm Reset BMC to activate code
- Wait for BMC to come online time out 30 minutes
- Version check post update
- Identify REST url post update</doc>
<status status="FAIL" endtime="20170802 19:11:35.775" starttime="20170802 18:46:48.362"></status>
</suite>
<statistics>
<total>
<stat fail="1" pass="0">Critical Tests</stat>
<stat fail="1" pass="0">All Tests</stat>
</total>
<tag>
<stat fail="1" pass="0">Initiate_Code_Update_BMC</stat>
</tag>
<suite>
<stat fail="1" id="s1" name="Update Bmc" pass="0">Update Bmc</stat>
</suite>
</statistics>
<errors>
<msg timestamp="20170802 18:47:49.828" level="WARN">Retrying (Retry(total=2, connect=None, read=None, redirect=None, status=None)) after connection broken by 'ConnectTimeoutError(&lt;urllib3.connection.VerifiedHTTPSConnection object at 0x3fff7dfedc90&gt;, 'Connection to 9.3.21.61 timed out. (connect timeout=20.0)')': /login</msg>
<msg timestamp="20170802 18:48:10.050" level="WARN">Retrying (Retry(total=1, connect=None, read=None, redirect=None, status=None)) after connection broken by 'ConnectTimeoutError(&lt;urllib3.connection.VerifiedHTTPSConnection object at 0x3fff7dfede10&gt;, 'Connection to 9.3.21.61 timed out. (connect timeout=20.0)')': /login</msg>
<msg timestamp="20170802 19:08:56.717" level="WARN">Retrying (Retry(total=2, connect=None, read=None, redirect=None, status=None)) after connection broken by 'ReadTimeoutError("HTTPSConnectionPool(host='9.3.21.61', port=443): Read timed out. (read timeout=10.0)",)': /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<msg timestamp="20170802 19:09:06.929" level="WARN">Retrying (Retry(total=1, connect=None, read=None, redirect=None, status=None)) after connection broken by 'ReadTimeoutError("HTTPSConnectionPool(host='9.3.21.61', port=443): Read timed out. (read timeout=10.0)",)': /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<msg timestamp="20170802 19:09:17.344" level="WARN">Retrying (Retry(total=0, connect=None, read=None, redirect=None, status=None)) after connection broken by 'ReadTimeoutError("HTTPSConnectionPool(host='9.3.21.61', port=443): Read timed out. (read timeout=10.0)",)': /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
</errors>
</robot>
