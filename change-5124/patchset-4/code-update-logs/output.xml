<?xml version="1.0" encoding="UTF-8"?>
<robot generated="20170708 15:38:10.136" generator="Robot 3.0.2 (Python 2.7.12 on linux2)">
<suite source="/home/fspcibld/openbmc-test-automation/extended/code_update/update_bmc.robot" id="s1" name="Update Bmc">
<test id="s1-t1" name="Initiate Code Update BMC">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${FORCE_UPDATE} == ${0}</arg>
<arg>Prepare BMC For Update</arg>
</arguments>
<kw name="Prepare BMC For Update">
<doc>Prerequisite operation before code update.</doc>
<kw name="Check Boot Count And Time">
<doc>Check for unexpected reboots.</doc>
<kw name="Set BMC Reset Reference Time" library="utils">
<doc>Set current boot time as a reference and increment</doc>
<kw name="Get BMC Boot Time" library="utils">
<doc>Get boot time from /proc/stat.</doc>
<assign>
<var>${cur_btime}</var>
</assign>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg timestamp="20170708 15:38:11.016" level="FAIL">Dictionary does not contain key 'host'.</msg>
<status status="FAIL" endtime="20170708 15:38:11.016" starttime="20170708 15:38:11.016"></status>
</kw>
<msg timestamp="20170708 15:38:11.016" level="INFO">${has_host} = False</msg>
<status status="PASS" endtime="20170708 15:38:11.016" starttime="20170708 15:38:11.015"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status status="PASS" endtime="20170708 15:38:11.018" starttime="20170708 15:38:11.017"></status>
</kw>
<status status="PASS" endtime="20170708 15:38:11.018" starttime="20170708 15:38:11.017"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<status status="PASS" endtime="20170708 15:38:11.019" starttime="20170708 15:38:11.018"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg timestamp="20170708 15:38:11.020" level="FAIL">Dictionary does not contain key 'port'.</msg>
<status status="FAIL" endtime="20170708 15:38:11.020" starttime="20170708 15:38:11.019"></status>
</kw>
<msg timestamp="20170708 15:38:11.020" level="INFO">${has_port} = False</msg>
<status status="PASS" endtime="20170708 15:38:11.020" starttime="20170708 15:38:11.019"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status status="PASS" endtime="20170708 15:38:11.022" starttime="20170708 15:38:11.021"></status>
</kw>
<status status="PASS" endtime="20170708 15:38:11.022" starttime="20170708 15:38:11.021"></status>
</kw>
<status status="PASS" endtime="20170708 15:38:11.022" starttime="20170708 15:38:11.020"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg timestamp="20170708 15:38:11.022" level="INFO">Logging into '9.3.86.161:22' as 'root'.</msg>
<msg timestamp="20170708 15:38:12.785" level="INFO">Read output: root@witherspoon:~#</msg>
<status status="PASS" endtime="20170708 15:38:12.785" starttime="20170708 15:38:11.022"></status>
</kw>
<status status="PASS" endtime="20170708 15:38:12.785" starttime="20170708 15:38:11.015"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>egrep '^btime ' /proc/stat | cut -f 2 -d ' '</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${output}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170708 15:38:12.786" level="INFO">Executing command 'egrep '^btime ' /proc/stat | cut -f 2 -d ' ''.</msg>
<msg timestamp="20170708 15:38:12.862" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170708 15:38:12.863" level="INFO">${output} = 1499527809</msg>
<msg timestamp="20170708 15:38:12.863" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170708 15:38:12.863" starttime="20170708 15:38:12.786"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20170708 15:38:12.863" level="INFO">Length is 0</msg>
<status status="PASS" endtime="20170708 15:38:12.863" starttime="20170708 15:38:12.863"></status>
</kw>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<assign>
<var>${btime}</var>
</assign>
<msg timestamp="20170708 15:38:12.864" level="INFO">${btime} = 1499527809</msg>
<status status="PASS" endtime="20170708 15:38:12.864" starttime="20170708 15:38:12.864"></status>
</kw>
<msg timestamp="20170708 15:38:12.864" level="INFO">${cur_btime} = 1499527809</msg>
<status status="PASS" endtime="20170708 15:38:12.864" starttime="20170708 15:38:11.014"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${BOOT_TIME} == ${0} and ${BOOT_COUNT} == ${0}</arg>
<arg>Set Global Variable</arg>
<arg>${BOOT_TIME}</arg>
<arg>${cur_btime}</arg>
<arg>ELSE IF</arg>
<arg>${cur_btime} &gt; ${BOOT_TIME}</arg>
<arg>Run Keywords</arg>
<arg>Set Global Variable</arg>
<arg>${BOOT_TIME}</arg>
<arg>${cur_btime}</arg>
<arg>AND</arg>
<arg>Set Global Variable</arg>
<arg>${BOOT_COUNT}</arg>
<arg>${BOOT_COUNT + 1}</arg>
</arguments>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${BOOT_TIME}</arg>
<arg>${cur_btime}</arg>
</arguments>
<msg timestamp="20170708 15:38:12.866" level="INFO">${BOOT_TIME} = 1499527809</msg>
<status status="PASS" endtime="20170708 15:38:12.866" starttime="20170708 15:38:12.865"></status>
</kw>
<status status="PASS" endtime="20170708 15:38:12.866" starttime="20170708 15:38:12.865"></status>
</kw>
<status status="PASS" endtime="20170708 15:38:12.866" starttime="20170708 15:38:11.014"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>\n Boot Count: ${BOOT_COUNT}</arg>
</arguments>
<status status="PASS" endtime="20170708 15:38:12.867" starttime="20170708 15:38:12.866"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>\n Boot Time: ${BOOT_TIME}</arg>
</arguments>
<status status="PASS" endtime="20170708 15:38:12.867" starttime="20170708 15:38:12.867"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${BOOT_COUNT} &gt; ${MAX_BOOT_COUNT}</arg>
<arg>Log</arg>
<arg>Phantom Reboot!!! Unexpected reboot detected</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20170708 15:38:12.868" starttime="20170708 15:38:12.868"></status>
</kw>
<status status="PASS" endtime="20170708 15:38:12.868" starttime="20170708 15:38:11.013"></status>
</kw>
<kw name="Prune Journal Log" library="utils">
<doc>Prune archived journal logs.</doc>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg timestamp="20170708 15:38:12.871" level="FAIL">Dictionary does not contain key 'host'.</msg>
<status status="FAIL" endtime="20170708 15:38:12.871" starttime="20170708 15:38:12.870"></status>
</kw>
<msg timestamp="20170708 15:38:12.871" level="INFO">${has_host} = False</msg>
<status status="PASS" endtime="20170708 15:38:12.871" starttime="20170708 15:38:12.870"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status status="PASS" endtime="20170708 15:38:12.872" starttime="20170708 15:38:12.872"></status>
</kw>
<status status="PASS" endtime="20170708 15:38:12.872" starttime="20170708 15:38:12.871"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<status status="PASS" endtime="20170708 15:38:12.873" starttime="20170708 15:38:12.873"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg timestamp="20170708 15:38:12.874" level="FAIL">Dictionary does not contain key 'port'.</msg>
<status status="FAIL" endtime="20170708 15:38:12.874" starttime="20170708 15:38:12.874"></status>
</kw>
<msg timestamp="20170708 15:38:12.874" level="INFO">${has_port} = False</msg>
<status status="PASS" endtime="20170708 15:38:12.874" starttime="20170708 15:38:12.873"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status status="PASS" endtime="20170708 15:38:12.876" starttime="20170708 15:38:12.876"></status>
</kw>
<status status="PASS" endtime="20170708 15:38:12.876" starttime="20170708 15:38:12.875"></status>
</kw>
<status status="PASS" endtime="20170708 15:38:12.876" starttime="20170708 15:38:12.874"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg timestamp="20170708 15:38:12.877" level="INFO">Logging into '9.3.86.161:22' as 'root'.</msg>
<msg timestamp="20170708 15:38:14.563" level="INFO">Read output: root@witherspoon:~#</msg>
<status status="PASS" endtime="20170708 15:38:14.564" starttime="20170708 15:38:12.876"></status>
</kw>
<status status="PASS" endtime="20170708 15:38:14.564" starttime="20170708 15:38:12.869"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>journalctl --vacuum-size=${vacuum_size}</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<assign>
<var>${output}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20170708 15:38:14.565" level="INFO">Executing command 'journalctl --vacuum-size=1M'.</msg>
<msg timestamp="20170708 15:38:14.641" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170708 15:38:14.641" level="INFO">${output} = </msg>
<msg timestamp="20170708 15:38:14.641" level="INFO">${stderr} = Vacuuming done, freed 0B of archived journals from /run/log/journal/169f9b5a822f4338824a4e146beb5550.</msg>
<msg timestamp="20170708 15:38:14.641" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20170708 15:38:14.641" starttime="20170708 15:38:14.564"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${rc}</arg>
<arg>${0}</arg>
<arg>msg=${stderr}</arg>
</arguments>
<status status="PASS" endtime="20170708 15:38:14.642" starttime="20170708 15:38:14.642"></status>
</kw>
<status status="PASS" endtime="20170708 15:38:14.642" starttime="20170708 15:38:12.868"></status>
</kw>
<kw name="Power Off Request" library="state_manager">
<doc>Select appropriate poweroff keyword.</doc>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${OBMC_STATES_VERSION}' == '${0}'</arg>
<arg>Initiate Power Off</arg>
<arg>ELSE</arg>
<arg>Initiate Host PowerOff</arg>
</arguments>
<kw name="Initiate Host PowerOff" library="state_manager">
<doc>Initiate host power off.</doc>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=${HOST_POWEROFF_TRANS}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg timestamp="20170708 15:38:14.644" level="INFO">${args} = {u'data': 'xyz.openbmc_project.State.Host.Transition.Off'}</msg>
<status status="PASS" endtime="20170708 15:38:14.645" starttime="20170708 15:38:14.644"></status>
</kw>
<kw name="Write Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>RequestedHostTransition</arg>
<arg>data=${args}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170708 15:38:14.646" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0/</msg>
<status status="PASS" endtime="20170708 15:38:14.646" starttime="20170708 15:38:14.645"></status>
</kw>
<kw name="OpenBMC Put Request" library="rest_client">
<arguments>
<arg>${base_uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170708 15:38:14.649" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170708 15:38:14.650" starttime="20170708 15:38:14.648"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170708 15:38:14.650" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170708 15:38:14.650" starttime="20170708 15:38:14.650"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170708 15:38:14.651" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170708 15:38:14.651" starttime="20170708 15:38:14.651"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170708 15:38:14.652" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170708 15:38:14.652" starttime="20170708 15:38:14.651"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170708 15:38:14.956" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170708 15:38:14.956" starttime="20170708 15:38:14.652"></status>
</kw>
<msg timestamp="20170708 15:38:14.957" level="INFO">${status} = PASS</msg>
<msg timestamp="20170708 15:38:14.957" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170708 15:38:14.957" starttime="20170708 15:38:14.652"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170708 15:38:14.957" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170708 15:38:14.958" starttime="20170708 15:38:14.957"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170708 15:38:14.959" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170708 15:38:14.959" starttime="20170708 15:38:14.958"></status>
</kw>
<status status="PASS" endtime="20170708 15:38:14.959" starttime="20170708 15:38:14.648"></status>
</kw>
<status status="PASS" endtime="20170708 15:38:14.959" starttime="20170708 15:38:14.647"></status>
</kw>
<status status="PASS" endtime="20170708 15:38:14.959" starttime="20170708 15:38:14.647"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170708 15:38:14.960" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/RequestedHostTransition</msg>
<status status="PASS" endtime="20170708 15:38:14.960" starttime="20170708 15:38:14.960"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170708 15:38:14.961" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170708 15:38:14.961" starttime="20170708 15:38:14.961"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" endtime="20170708 15:38:14.962" starttime="20170708 15:38:14.962"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Put</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170708 15:38:14.964" level="INFO">${msg} = URI:https://9.3.86.161/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, method:Put, args:{u'data': {u'data': 'xyz.openbmc_project.State.Host.Transition.Off'}, u'headers': {u'Content-Type...</msg>
<status status="PASS" endtime="20170708 15:38:14.964" starttime="20170708 15:38:14.963"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170708 15:38:14.966" level="INFO">URI:https://9.3.86.161/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, method:Put, args:{u'data': {u'data': 'xyz.openbmc_project.State.Host.Transition.Off'}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20170708 15:38:14.966" starttime="20170708 15:38:14.965"></status>
</kw>
<status status="PASS" endtime="20170708 15:38:14.966" starttime="20170708 15:38:14.965"></status>
</kw>
<status status="PASS" endtime="20170708 15:38:14.966" starttime="20170708 15:38:14.962"></status>
</kw>
<kw name="Put Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a PUT request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170708 15:38:15.236" level="INFO">Put Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, data={"data": "xyz.openbmc_project.State.Host.Transition.Off"},                     headers={u'Content-Type': u'application/json'}, allow_redirects=True </msg>
<msg timestamp="20170708 15:38:15.236" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170708 15:38:15.236" starttime="20170708 15:38:14.966"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170708 15:38:15.237" level="INFO">${msg} = Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170708 15:38:15.238" starttime="20170708 15:38:15.237"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170708 15:38:15.239" level="INFO">Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170708 15:38:15.239" starttime="20170708 15:38:15.238"></status>
</kw>
<status status="PASS" endtime="20170708 15:38:15.239" starttime="20170708 15:38:15.238"></status>
</kw>
<status status="PASS" endtime="20170708 15:38:15.239" starttime="20170708 15:38:15.236"></status>
</kw>
<msg timestamp="20170708 15:38:15.239" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170708 15:38:15.239" starttime="20170708 15:38:14.646"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170708 15:38:15.240" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170708 15:38:15.240" starttime="20170708 15:38:15.240"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${json}</var>
</assign>
<msg timestamp="20170708 15:38:15.241" level="INFO">To JSON using : content={
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170708 15:38:15.241" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170708 15:38:15.241" level="INFO">${json} = {u'status': u'ok', u'message': u'200 OK', u'data': None}</msg>
<status status="PASS" endtime="20170708 15:38:15.241" starttime="20170708 15:38:15.241"></status>
</kw>
<status status="PASS" endtime="20170708 15:38:15.241" starttime="20170708 15:38:14.645"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${wait}' == '${0}'</arg>
<arg>Return From Keyword</arg>
</arguments>
<status status="PASS" endtime="20170708 15:38:15.242" starttime="20170708 15:38:15.241"></status>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>3 min</arg>
<arg>10 sec</arg>
<arg>Is Host Off</arg>
</arguments>
<kw name="Is Host Off" library="state_manager">
<doc>Check if host state is "Off".</doc>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170708 15:38:15.247" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170708 15:38:15.247" starttime="20170708 15:38:15.246"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170708 15:38:15.248" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170708 15:38:15.248" starttime="20170708 15:38:15.247"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170708 15:38:15.248" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170708 15:38:15.248" starttime="20170708 15:38:15.248"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170708 15:38:15.249" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170708 15:38:15.249" starttime="20170708 15:38:15.249"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170708 15:38:16.655" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170708 15:38:16.656" starttime="20170708 15:38:15.250"></status>
</kw>
<msg timestamp="20170708 15:38:16.656" level="INFO">${status} = PASS</msg>
<msg timestamp="20170708 15:38:16.656" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170708 15:38:16.656" starttime="20170708 15:38:15.249"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170708 15:38:16.656" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170708 15:38:16.657" starttime="20170708 15:38:16.656"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170708 15:38:16.657" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170708 15:38:16.657" starttime="20170708 15:38:16.657"></status>
</kw>
<status status="PASS" endtime="20170708 15:38:16.657" starttime="20170708 15:38:15.245"></status>
</kw>
<status status="PASS" endtime="20170708 15:38:16.657" starttime="20170708 15:38:15.245"></status>
</kw>
<status status="PASS" endtime="20170708 15:38:16.658" starttime="20170708 15:38:15.244"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170708 15:38:16.658" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" endtime="20170708 15:38:16.658" starttime="20170708 15:38:16.658"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170708 15:38:16.659" starttime="20170708 15:38:16.658"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170708 15:38:20.299" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170708 15:38:20.299" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170708 15:38:20.299" starttime="20170708 15:38:16.659"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170708 15:38:20.300" starttime="20170708 15:38:20.299"></status>
</kw>
<msg timestamp="20170708 15:38:20.300" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170708 15:38:20.300" starttime="20170708 15:38:15.244"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170708 15:38:20.301" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170708 15:38:20.301" starttime="20170708 15:38:20.300"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170708 15:38:20.301" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170708 15:38:20.301" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170708 15:38:20.301" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Off'}</msg>
<status status="PASS" endtime="20170708 15:38:20.302" starttime="20170708 15:38:20.301"></status>
</kw>
<msg timestamp="20170708 15:38:20.302" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Off</msg>
<status status="PASS" endtime="20170708 15:38:20.302" starttime="20170708 15:38:15.243"></status>
</kw>
<msg timestamp="20170708 15:38:20.302" level="INFO">${host_state} = Off</msg>
<status status="PASS" endtime="20170708 15:38:20.302" starttime="20170708 15:38:15.243"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${host_state}</arg>
</arguments>
<status status="PASS" endtime="20170708 15:38:20.303" starttime="20170708 15:38:20.302"></status>
</kw>
<status status="PASS" endtime="20170708 15:38:20.303" starttime="20170708 15:38:15.242"></status>
</kw>
<status status="PASS" endtime="20170708 15:38:20.303" starttime="20170708 15:38:15.242"></status>
</kw>
<status status="PASS" endtime="20170708 15:38:20.303" starttime="20170708 15:38:14.643"></status>
</kw>
<status status="PASS" endtime="20170708 15:38:20.303" starttime="20170708 15:38:14.643"></status>
</kw>
<status status="PASS" endtime="20170708 15:38:20.303" starttime="20170708 15:38:14.642"></status>
</kw>
<kw name="Set Policy Setting" library="code_update_utils">
<doc>Set the given test policy</doc>
<arguments>
<arg>RESTORE_LAST_STATE</arg>
</arguments>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=${policy}</arg>
</arguments>
<assign>
<var>${valueDict}</var>
</assign>
<msg timestamp="20170708 15:38:20.305" level="INFO">${valueDict} = {u'data': u'RESTORE_LAST_STATE'}</msg>
<status status="PASS" endtime="20170708 15:38:20.305" starttime="20170708 15:38:20.304"></status>
</kw>
<kw name="Write Attribute" library="rest_client">
<arguments>
<arg>${HOST_SETTING}</arg>
<arg>power_policy</arg>
<arg>data=${valueDict}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170708 15:38:20.306" level="INFO">${base_uri} = /org/openbmc/settings/host0</msg>
<status status="PASS" endtime="20170708 15:38:20.306" starttime="20170708 15:38:20.305"></status>
</kw>
<kw name="OpenBMC Put Request" library="rest_client">
<arguments>
<arg>${base_uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170708 15:38:20.309" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170708 15:38:20.309" starttime="20170708 15:38:20.308"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170708 15:38:20.310" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170708 15:38:20.310" starttime="20170708 15:38:20.310"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170708 15:38:20.311" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170708 15:38:20.311" starttime="20170708 15:38:20.310"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170708 15:38:20.311" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170708 15:38:20.311" starttime="20170708 15:38:20.311"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170708 15:38:20.685" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170708 15:38:20.685" starttime="20170708 15:38:20.312"></status>
</kw>
<msg timestamp="20170708 15:38:20.685" level="INFO">${status} = PASS</msg>
<msg timestamp="20170708 15:38:20.685" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170708 15:38:20.685" starttime="20170708 15:38:20.312"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170708 15:38:20.686" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170708 15:38:20.686" starttime="20170708 15:38:20.685"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170708 15:38:20.686" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170708 15:38:20.686" starttime="20170708 15:38:20.686"></status>
</kw>
<status status="PASS" endtime="20170708 15:38:20.687" starttime="20170708 15:38:20.308"></status>
</kw>
<status status="PASS" endtime="20170708 15:38:20.687" starttime="20170708 15:38:20.307"></status>
</kw>
<status status="PASS" endtime="20170708 15:38:20.687" starttime="20170708 15:38:20.307"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170708 15:38:20.687" level="INFO">${base_uri} = /org/openbmc/settings/host0/attr/power_policy</msg>
<status status="PASS" endtime="20170708 15:38:20.687" starttime="20170708 15:38:20.687"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170708 15:38:20.688" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170708 15:38:20.688" starttime="20170708 15:38:20.688"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" endtime="20170708 15:38:20.689" starttime="20170708 15:38:20.688"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Put</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170708 15:38:20.690" level="INFO">${msg} = URI:https://9.3.86.161/org/openbmc/settings/host0/attr/power_policy, method:Put, args:{u'data': {u'data': u'RESTORE_LAST_STATE'}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20170708 15:38:20.690" starttime="20170708 15:38:20.689"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170708 15:38:20.691" level="INFO">URI:https://9.3.86.161/org/openbmc/settings/host0/attr/power_policy, method:Put, args:{u'data': {u'data': u'RESTORE_LAST_STATE'}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20170708 15:38:20.691" starttime="20170708 15:38:20.691"></status>
</kw>
<status status="PASS" endtime="20170708 15:38:20.691" starttime="20170708 15:38:20.690"></status>
</kw>
<status status="PASS" endtime="20170708 15:38:20.691" starttime="20170708 15:38:20.689"></status>
</kw>
<kw name="Put Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a PUT request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170708 15:38:22.493" level="INFO">Put Request using : alias=openbmc, uri=/org/openbmc/settings/host0/attr/power_policy, data={"data": "RESTORE_LAST_STATE"},                     headers={u'Content-Type': u'application/json'}, allow_redirects=True </msg>
<msg timestamp="20170708 15:38:22.493" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170708 15:38:22.493" starttime="20170708 15:38:20.692"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170708 15:38:22.494" level="INFO">${msg} = Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170708 15:38:22.494" starttime="20170708 15:38:22.494"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170708 15:38:22.495" level="INFO">Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170708 15:38:22.496" starttime="20170708 15:38:22.495"></status>
</kw>
<status status="PASS" endtime="20170708 15:38:22.496" starttime="20170708 15:38:22.495"></status>
</kw>
<status status="PASS" endtime="20170708 15:38:22.496" starttime="20170708 15:38:22.493"></status>
</kw>
<msg timestamp="20170708 15:38:22.496" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170708 15:38:22.496" starttime="20170708 15:38:20.306"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170708 15:38:22.497" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170708 15:38:22.497" starttime="20170708 15:38:22.497"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${json}</var>
</assign>
<msg timestamp="20170708 15:38:22.498" level="INFO">To JSON using : content={
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170708 15:38:22.498" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170708 15:38:22.498" level="INFO">${json} = {u'status': u'ok', u'message': u'200 OK', u'data': None}</msg>
<status status="PASS" endtime="20170708 15:38:22.498" starttime="20170708 15:38:22.497"></status>
</kw>
<status status="PASS" endtime="20170708 15:38:22.498" starttime="20170708 15:38:20.305"></status>
</kw>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_SETTING}</arg>
<arg>power_policy</arg>
</arguments>
<assign>
<var>${currentPolicy}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170708 15:38:22.502" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170708 15:38:22.502" starttime="20170708 15:38:22.502"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170708 15:38:22.503" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170708 15:38:22.503" starttime="20170708 15:38:22.503"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170708 15:38:22.504" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170708 15:38:22.504" starttime="20170708 15:38:22.503"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170708 15:38:22.505" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170708 15:38:22.505" starttime="20170708 15:38:22.504"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170708 15:38:22.848" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170708 15:38:22.848" starttime="20170708 15:38:22.505"></status>
</kw>
<msg timestamp="20170708 15:38:22.848" level="INFO">${status} = PASS</msg>
<msg timestamp="20170708 15:38:22.848" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170708 15:38:22.848" starttime="20170708 15:38:22.505"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170708 15:38:22.849" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170708 15:38:22.849" starttime="20170708 15:38:22.848"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170708 15:38:22.850" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170708 15:38:22.850" starttime="20170708 15:38:22.849"></status>
</kw>
<status status="PASS" endtime="20170708 15:38:22.850" starttime="20170708 15:38:22.501"></status>
</kw>
<status status="PASS" endtime="20170708 15:38:22.850" starttime="20170708 15:38:22.501"></status>
</kw>
<status status="PASS" endtime="20170708 15:38:22.850" starttime="20170708 15:38:22.500"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170708 15:38:22.851" level="INFO">${base_uri} = /org/openbmc/settings/host0/attr/power_policy</msg>
<status status="PASS" endtime="20170708 15:38:22.851" starttime="20170708 15:38:22.851"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170708 15:38:22.852" starttime="20170708 15:38:22.852"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170708 15:38:22.990" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/settings/host0/attr/power_policy, headers=None json=None</msg>
<msg timestamp="20170708 15:38:22.990" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170708 15:38:22.990" starttime="20170708 15:38:22.852"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170708 15:38:22.990" starttime="20170708 15:38:22.990"></status>
</kw>
<msg timestamp="20170708 15:38:22.991" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170708 15:38:22.991" starttime="20170708 15:38:22.499"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170708 15:38:22.991" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170708 15:38:22.991" starttime="20170708 15:38:22.991"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170708 15:38:22.992" level="INFO">To JSON using : content={
  "data": "RESTORE_LAST_STATE", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170708 15:38:22.992" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170708 15:38:22.992" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'RESTORE_LAST_STATE'}</msg>
<status status="PASS" endtime="20170708 15:38:22.992" starttime="20170708 15:38:22.992"></status>
</kw>
<msg timestamp="20170708 15:38:22.992" level="INFO">${currentPolicy} = RESTORE_LAST_STATE</msg>
<status status="PASS" endtime="20170708 15:38:22.992" starttime="20170708 15:38:22.498"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${currentPolicy}</arg>
<arg>${policy}</arg>
</arguments>
<status status="PASS" endtime="20170708 15:38:22.993" starttime="20170708 15:38:22.993"></status>
</kw>
<status status="PASS" endtime="20170708 15:38:22.993" starttime="20170708 15:38:20.303"></status>
</kw>
<kw name="Prepare For Update" library="code_update_utils">
<doc>Switch to update mode in progress. This method calls</doc>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{EMPTY}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170708 15:38:22.994" level="INFO">${data} = {u'data': []}</msg>
<status status="PASS" endtime="20170708 15:38:22.994" starttime="20170708 15:38:22.994"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${BMC_PREP_METHOD}</arg>
<arg>data=${data}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170708 15:38:22.997" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170708 15:38:22.998" starttime="20170708 15:38:22.997"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170708 15:38:22.998" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170708 15:38:22.998" starttime="20170708 15:38:22.998"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170708 15:38:22.999" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170708 15:38:22.999" starttime="20170708 15:38:22.998"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170708 15:38:22.999" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170708 15:38:23.000" starttime="20170708 15:38:22.999"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170708 15:38:23.180" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170708 15:38:23.180" starttime="20170708 15:38:23.000"></status>
</kw>
<msg timestamp="20170708 15:38:23.181" level="INFO">${status} = PASS</msg>
<msg timestamp="20170708 15:38:23.181" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170708 15:38:23.181" starttime="20170708 15:38:23.000"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170708 15:38:23.181" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170708 15:38:23.181" starttime="20170708 15:38:23.181"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170708 15:38:23.182" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170708 15:38:23.182" starttime="20170708 15:38:23.182"></status>
</kw>
<status status="PASS" endtime="20170708 15:38:23.182" starttime="20170708 15:38:22.996"></status>
</kw>
<status status="PASS" endtime="20170708 15:38:23.182" starttime="20170708 15:38:22.996"></status>
</kw>
<status status="PASS" endtime="20170708 15:38:23.182" starttime="20170708 15:38:22.995"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170708 15:38:23.183" level="INFO">${base_uri} = /org/openbmc/control/flash/bmc/action/PrepareForUpdate</msg>
<status status="PASS" endtime="20170708 15:38:23.183" starttime="20170708 15:38:23.183"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170708 15:38:23.184" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170708 15:38:23.184" starttime="20170708 15:38:23.183"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" endtime="20170708 15:38:23.184" starttime="20170708 15:38:23.184"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170708 15:38:23.185" starttime="20170708 15:38:23.185"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170708 15:38:23.681" level="INFO">Post Request using : alias=openbmc, uri=/org/openbmc/control/flash/bmc/action/PrepareForUpdate, data={"data": []}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20170708 15:38:23.681" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170708 15:38:23.681" starttime="20170708 15:38:23.185"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170708 15:38:23.681" starttime="20170708 15:38:23.681"></status>
</kw>
<msg timestamp="20170708 15:38:23.682" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170708 15:38:23.682" starttime="20170708 15:38:22.994"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170708 15:38:23.682" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170708 15:38:23.682" starttime="20170708 15:38:23.682"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>10s</arg>
</arguments>
<msg timestamp="20170708 15:38:33.683" level="INFO">Slept 10 seconds</msg>
<status status="PASS" endtime="20170708 15:38:33.683" starttime="20170708 15:38:23.683"></status>
</kw>
<status status="PASS" endtime="20170708 15:38:33.683" starttime="20170708 15:38:22.993"></status>
</kw>
<kw name="Check If BMC is Up" library="utils">
<doc>Wait for Host to be online. Checks every X seconds</doc>
<arguments>
<arg>20 min</arg>
<arg>10 sec</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>${max_timeout}</arg>
<arg>${interval}</arg>
<arg>Verify Ping and REST Authentication</arg>
</arguments>
<kw name="Verify Ping and REST Authentication" library="utils">
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Ping Host</arg>
<arg>${OPENBMC_HOST}</arg>
</arguments>
<assign>
<var>${l_ping}</var>
</assign>
<kw name="Ping Host" library="utils">
<arguments>
<arg>${OPENBMC_HOST}</arg>
</arguments>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${host}</arg>
<arg>msg=No host provided</arg>
</arguments>
<msg timestamp="20170708 15:38:33.687" level="INFO">Length is 10</msg>
<status status="PASS" endtime="20170708 15:38:33.687" starttime="20170708 15:38:33.687"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>ping -c 4 ${host}</arg>
</arguments>
<assign>
<var>${RC}</var>
<var>${output}</var>
</assign>
<msg timestamp="20170708 15:38:33.693" level="INFO">Running command 'ping -c 4 9.3.86.161 2&gt;&amp;1'.</msg>
<msg timestamp="20170708 15:38:36.704" level="INFO">${RC} = 0</msg>
<msg timestamp="20170708 15:38:36.704" level="INFO">${output} = PING 9.3.86.161 (9.3.86.161) 56(84) bytes of data.
64 bytes from 9.3.86.161: icmp_seq=1 ttl=62 time=5.33 ms
64 bytes from 9.3.86.161: icmp_seq=2 ttl=62 time=0.642 ms
64 bytes from 9.3.86.161: icmp_seq...</msg>
<status status="PASS" endtime="20170708 15:38:36.704" starttime="20170708 15:38:33.687"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>RC: ${RC}\nOutput:\n${output}</arg>
</arguments>
<msg timestamp="20170708 15:38:36.707" level="INFO">RC: 0
Output:
PING 9.3.86.161 (9.3.86.161) 56(84) bytes of data.
64 bytes from 9.3.86.161: icmp_seq=1 ttl=62 time=5.33 ms
64 bytes from 9.3.86.161: icmp_seq=2 ttl=62 time=0.642 ms
64 bytes from 9.3.86.161: icmp_seq=3 ttl=62 time=0.614 ms
64 bytes from 9.3.86.161: icmp_seq=4 ttl=62 time=9.92 ms

--- 9.3.86.161 ping statistics ---
4 packets transmitted, 4 received, 0% packet loss, time 3000ms
rtt min/avg/max/mdev = 0.614/4.128/9.926/3.859 ms</msg>
<status status="PASS" endtime="20170708 15:38:36.707" starttime="20170708 15:38:36.706"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${RC}</arg>
<arg>${0}</arg>
</arguments>
<status status="PASS" endtime="20170708 15:38:36.708" starttime="20170708 15:38:36.708"></status>
</kw>
<status status="PASS" endtime="20170708 15:38:36.708" starttime="20170708 15:38:33.686"></status>
</kw>
<msg timestamp="20170708 15:38:36.708" level="INFO">${l_ping} = True</msg>
<status status="PASS" endtime="20170708 15:38:36.708" starttime="20170708 15:38:33.686"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${l_ping}' == '${False}'</arg>
<arg>Fail</arg>
<arg>msg=Ping Failed</arg>
</arguments>
<status status="PASS" endtime="20170708 15:38:36.710" starttime="20170708 15:38:36.709"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Initialize OpenBMC</arg>
</arguments>
<assign>
<var>${l_rest}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170708 15:38:36.713" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=20, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170708 15:38:36.714" starttime="20170708 15:38:36.712"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170708 15:38:36.714" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170708 15:38:36.714" starttime="20170708 15:38:36.714"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170708 15:38:36.715" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170708 15:38:36.715" starttime="20170708 15:38:36.715"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170708 15:38:36.716" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170708 15:38:36.716" starttime="20170708 15:38:36.715"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170708 15:38:36.886" level="FAIL">ConnectionError: ('Connection aborted.', error(104, 'Connection reset by peer'))</msg>
<status status="FAIL" endtime="20170708 15:38:36.886" starttime="20170708 15:38:36.716"></status>
</kw>
<msg timestamp="20170708 15:38:36.886" level="INFO">${status} = FAIL</msg>
<msg timestamp="20170708 15:38:36.886" level="INFO">${resp} = ConnectionError: ('Connection aborted.', error(104, 'Connection reset by peer'))</msg>
<status status="PASS" endtime="20170708 15:38:36.886" starttime="20170708 15:38:36.716"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170708 15:38:36.887" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20170708 15:38:36.887" level="FAIL">ConnectionError: ('Connection aborted.', error(104, 'Connection reset by peer')): FAIL != PASS</msg>
<status status="FAIL" endtime="20170708 15:38:36.887" starttime="20170708 15:38:36.887"></status>
</kw>
<status status="FAIL" endtime="20170708 15:38:36.887" starttime="20170708 15:38:36.712"></status>
</kw>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170708 15:38:56.889" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=20, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170708 15:38:56.894" starttime="20170708 15:38:56.889"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170708 15:38:56.894" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170708 15:38:56.894" starttime="20170708 15:38:56.894"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170708 15:38:56.895" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170708 15:38:56.895" starttime="20170708 15:38:56.895"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170708 15:38:56.896" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170708 15:38:56.896" starttime="20170708 15:38:56.895"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170708 15:39:16.919" level="WARN">Retrying (Retry(total=2, connect=None, read=None, redirect=None, status=None)) after connection broken by 'ConnectTimeoutError(&lt;urllib3.connection.VerifiedHTTPSConnection object at 0x3fffa8160a10&gt;, 'Connection to 9.3.86.161 timed out. (connect timeout=20.0)')': /login</msg>
<msg timestamp="20170708 15:39:37.141" level="WARN">Retrying (Retry(total=1, connect=None, read=None, redirect=None, status=None)) after connection broken by 'ConnectTimeoutError(&lt;urllib3.connection.VerifiedHTTPSConnection object at 0x3fffa81606d0&gt;, 'Connection to 9.3.86.161 timed out. (connect timeout=20.0)')': /login</msg>
<msg timestamp="20170708 15:40:12.224" level="FAIL">ReadTimeout: HTTPSConnectionPool(host='9.3.86.161', port=443): Read timed out. (read timeout=20.0)</msg>
<status status="FAIL" endtime="20170708 15:40:12.225" starttime="20170708 15:38:56.897"></status>
</kw>
<msg timestamp="20170708 15:40:12.225" level="INFO">${status} = FAIL</msg>
<msg timestamp="20170708 15:40:12.225" level="INFO">${resp} = ReadTimeout: HTTPSConnectionPool(host='9.3.86.161', port=443): Read timed out. (read timeout=20.0)</msg>
<status status="PASS" endtime="20170708 15:40:12.225" starttime="20170708 15:38:56.896"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170708 15:40:12.226" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20170708 15:40:12.226" level="FAIL">ReadTimeout: HTTPSConnectionPool(host='9.3.86.161', port=443): Read timed out. (read timeout=20.0): FAIL != PASS</msg>
<status status="FAIL" endtime="20170708 15:40:12.226" starttime="20170708 15:40:12.225"></status>
</kw>
<status status="FAIL" endtime="20170708 15:40:12.226" starttime="20170708 15:38:56.888"></status>
</kw>
<msg timestamp="20170708 15:40:12.226" level="FAIL">Keyword 'Post Login Request' failed after retrying for 40 seconds. The last error was: ReadTimeout: HTTPSConnectionPool(host='9.3.86.161', port=443): Read timed out. (read timeout=20.0): FAIL != PASS</msg>
<status status="FAIL" endtime="20170708 15:40:12.226" starttime="20170708 15:38:36.711"></status>
</kw>
<status status="FAIL" endtime="20170708 15:40:12.227" starttime="20170708 15:38:36.710"></status>
</kw>
<msg timestamp="20170708 15:40:12.227" level="INFO">${l_rest} = False</msg>
<status status="PASS" endtime="20170708 15:40:12.227" starttime="20170708 15:38:36.710"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${l_rest}' == '${False}'</arg>
<arg>Fail</arg>
<arg>msg=REST Authentication Failed</arg>
</arguments>
<kw name="Fail" library="BuiltIn">
<doc>Fails the test with the given message and optionally alters its tags.</doc>
<arguments>
<arg>msg=REST Authentication Failed</arg>
</arguments>
<msg timestamp="20170708 15:40:12.228" level="FAIL">REST Authentication Failed</msg>
<status status="FAIL" endtime="20170708 15:40:12.228" starttime="20170708 15:40:12.228"></status>
</kw>
<status status="FAIL" endtime="20170708 15:40:12.228" starttime="20170708 15:40:12.227"></status>
</kw>
<status status="FAIL" endtime="20170708 15:40:12.228" starttime="20170708 15:38:33.685"></status>
</kw>
<kw name="Verify Ping and REST Authentication" library="utils">
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Ping Host</arg>
<arg>${OPENBMC_HOST}</arg>
</arguments>
<assign>
<var>${l_ping}</var>
</assign>
<kw name="Ping Host" library="utils">
<arguments>
<arg>${OPENBMC_HOST}</arg>
</arguments>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${host}</arg>
<arg>msg=No host provided</arg>
</arguments>
<msg timestamp="20170708 15:40:22.230" level="INFO">Length is 10</msg>
<status status="PASS" endtime="20170708 15:40:22.230" starttime="20170708 15:40:22.230"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>ping -c 4 ${host}</arg>
</arguments>
<assign>
<var>${RC}</var>
<var>${output}</var>
</assign>
<msg timestamp="20170708 15:40:22.247" level="INFO">Running command 'ping -c 4 9.3.86.161 2&gt;&amp;1'.</msg>
<msg timestamp="20170708 15:40:25.243" level="INFO">${RC} = 0</msg>
<msg timestamp="20170708 15:40:25.243" level="INFO">${output} = PING 9.3.86.161 (9.3.86.161) 56(84) bytes of data.
64 bytes from 9.3.86.161: icmp_seq=1 ttl=62 time=1.86 ms
64 bytes from 9.3.86.161: icmp_seq=2 ttl=62 time=0.713 ms
64 bytes from 9.3.86.161: icmp_seq...</msg>
<status status="PASS" endtime="20170708 15:40:25.243" starttime="20170708 15:40:22.231"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>RC: ${RC}\nOutput:\n${output}</arg>
</arguments>
<msg timestamp="20170708 15:40:25.262" level="INFO">RC: 0
Output:
PING 9.3.86.161 (9.3.86.161) 56(84) bytes of data.
64 bytes from 9.3.86.161: icmp_seq=1 ttl=62 time=1.86 ms
64 bytes from 9.3.86.161: icmp_seq=2 ttl=62 time=0.713 ms
64 bytes from 9.3.86.161: icmp_seq=3 ttl=62 time=0.667 ms
64 bytes from 9.3.86.161: icmp_seq=4 ttl=62 time=0.642 ms

--- 9.3.86.161 ping statistics ---
4 packets transmitted, 4 received, 0% packet loss, time 3000ms
rtt min/avg/max/mdev = 0.642/0.972/1.867/0.517 ms</msg>
<status status="PASS" endtime="20170708 15:40:25.263" starttime="20170708 15:40:25.258"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${RC}</arg>
<arg>${0}</arg>
</arguments>
<status status="PASS" endtime="20170708 15:40:25.264" starttime="20170708 15:40:25.263"></status>
</kw>
<status status="PASS" endtime="20170708 15:40:25.265" starttime="20170708 15:40:22.230"></status>
</kw>
<msg timestamp="20170708 15:40:25.265" level="INFO">${l_ping} = True</msg>
<status status="PASS" endtime="20170708 15:40:25.265" starttime="20170708 15:40:22.229"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${l_ping}' == '${False}'</arg>
<arg>Fail</arg>
<arg>msg=Ping Failed</arg>
</arguments>
<status status="PASS" endtime="20170708 15:40:25.266" starttime="20170708 15:40:25.266"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Initialize OpenBMC</arg>
</arguments>
<assign>
<var>${l_rest}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170708 15:40:25.271" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=20, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170708 15:40:25.272" starttime="20170708 15:40:25.271"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170708 15:40:25.273" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170708 15:40:25.273" starttime="20170708 15:40:25.273"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170708 15:40:25.274" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170708 15:40:25.274" starttime="20170708 15:40:25.273"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170708 15:40:25.274" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170708 15:40:25.274" starttime="20170708 15:40:25.274"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170708 15:40:45.301" level="FAIL">ReadTimeout: HTTPSConnectionPool(host='9.3.86.161', port=443): Read timed out. (read timeout=20.0)</msg>
<status status="FAIL" endtime="20170708 15:40:45.301" starttime="20170708 15:40:25.275"></status>
</kw>
<msg timestamp="20170708 15:40:45.302" level="INFO">${status} = FAIL</msg>
<msg timestamp="20170708 15:40:45.302" level="INFO">${resp} = ReadTimeout: HTTPSConnectionPool(host='9.3.86.161', port=443): Read timed out. (read timeout=20.0)</msg>
<status status="PASS" endtime="20170708 15:40:45.302" starttime="20170708 15:40:25.275"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170708 15:40:45.302" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20170708 15:40:45.303" level="FAIL">ReadTimeout: HTTPSConnectionPool(host='9.3.86.161', port=443): Read timed out. (read timeout=20.0): FAIL != PASS</msg>
<status status="FAIL" endtime="20170708 15:40:45.303" starttime="20170708 15:40:45.302"></status>
</kw>
<status status="FAIL" endtime="20170708 15:40:45.303" starttime="20170708 15:40:25.270"></status>
</kw>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170708 15:41:05.305" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=20, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170708 15:41:05.305" starttime="20170708 15:41:05.304"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170708 15:41:05.306" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170708 15:41:05.306" starttime="20170708 15:41:05.305"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170708 15:41:05.306" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170708 15:41:05.307" starttime="20170708 15:41:05.306"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170708 15:41:05.307" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170708 15:41:05.307" starttime="20170708 15:41:05.307"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170708 15:41:05.597" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170708 15:41:05.597" starttime="20170708 15:41:05.308"></status>
</kw>
<msg timestamp="20170708 15:41:05.597" level="INFO">${status} = PASS</msg>
<msg timestamp="20170708 15:41:05.597" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170708 15:41:05.597" starttime="20170708 15:41:05.307"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170708 15:41:05.598" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170708 15:41:05.598" starttime="20170708 15:41:05.598"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170708 15:41:05.599" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170708 15:41:05.599" starttime="20170708 15:41:05.598"></status>
</kw>
<status status="PASS" endtime="20170708 15:41:05.599" starttime="20170708 15:41:05.303"></status>
</kw>
<status status="PASS" endtime="20170708 15:41:05.599" starttime="20170708 15:40:25.269"></status>
</kw>
<status status="PASS" endtime="20170708 15:41:05.599" starttime="20170708 15:40:25.267"></status>
</kw>
<msg timestamp="20170708 15:41:05.599" level="INFO">${l_rest} = True</msg>
<status status="PASS" endtime="20170708 15:41:05.599" starttime="20170708 15:40:25.267"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${l_rest}' == '${False}'</arg>
<arg>Fail</arg>
<arg>msg=REST Authentication Failed</arg>
</arguments>
<status status="PASS" endtime="20170708 15:41:05.600" starttime="20170708 15:41:05.600"></status>
</kw>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg timestamp="20170708 15:41:05.602" level="FAIL">Dictionary does not contain key 'host'.</msg>
<status status="FAIL" endtime="20170708 15:41:05.602" starttime="20170708 15:41:05.601"></status>
</kw>
<msg timestamp="20170708 15:41:05.602" level="INFO">${has_host} = False</msg>
<status status="PASS" endtime="20170708 15:41:05.602" starttime="20170708 15:41:05.601"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status status="PASS" endtime="20170708 15:41:05.603" starttime="20170708 15:41:05.603"></status>
</kw>
<status status="PASS" endtime="20170708 15:41:05.603" starttime="20170708 15:41:05.602"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<status status="PASS" endtime="20170708 15:41:05.604" starttime="20170708 15:41:05.603"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg timestamp="20170708 15:41:05.605" level="FAIL">Dictionary does not contain key 'port'.</msg>
<status status="FAIL" endtime="20170708 15:41:05.605" starttime="20170708 15:41:05.605"></status>
</kw>
<msg timestamp="20170708 15:41:05.605" level="INFO">${has_port} = False</msg>
<status status="PASS" endtime="20170708 15:41:05.605" starttime="20170708 15:41:05.604"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status status="PASS" endtime="20170708 15:41:05.608" starttime="20170708 15:41:05.606"></status>
</kw>
<status status="PASS" endtime="20170708 15:41:05.608" starttime="20170708 15:41:05.606"></status>
</kw>
<status status="PASS" endtime="20170708 15:41:05.608" starttime="20170708 15:41:05.605"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg timestamp="20170708 15:41:05.609" level="INFO">Logging into '9.3.86.161:22' as 'root'.</msg>
<msg timestamp="20170708 15:41:07.555" level="INFO">Read output: root@witherspoon:~#</msg>
<status status="PASS" endtime="20170708 15:41:07.556" starttime="20170708 15:41:05.608"></status>
</kw>
<status status="PASS" endtime="20170708 15:41:07.556" starttime="20170708 15:41:05.600"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>hostname</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${system}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170708 15:41:07.557" level="INFO">Executing command 'hostname'.</msg>
<msg timestamp="20170708 15:41:07.613" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170708 15:41:07.613" level="INFO">${system} = witherspoon</msg>
<msg timestamp="20170708 15:41:07.613" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170708 15:41:07.613" starttime="20170708 15:41:07.556"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20170708 15:41:07.614" level="INFO">Length is 0</msg>
<status status="PASS" endtime="20170708 15:41:07.614" starttime="20170708 15:41:07.613"></status>
</kw>
<status status="PASS" endtime="20170708 15:41:07.614" starttime="20170708 15:40:22.229"></status>
</kw>
<status status="PASS" endtime="20170708 15:41:07.614" starttime="20170708 15:38:33.684"></status>
</kw>
<status status="PASS" endtime="20170708 15:41:07.614" starttime="20170708 15:38:33.684"></status>
</kw>
<kw name="Check Boot Count And Time">
<doc>Check for unexpected reboots.</doc>
<kw name="Set BMC Reset Reference Time" library="utils">
<doc>Set current boot time as a reference and increment</doc>
<kw name="Get BMC Boot Time" library="utils">
<doc>Get boot time from /proc/stat.</doc>
<assign>
<var>${cur_btime}</var>
</assign>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg timestamp="20170708 15:41:07.617" level="FAIL">Dictionary does not contain key 'host'.</msg>
<status status="FAIL" endtime="20170708 15:41:07.617" starttime="20170708 15:41:07.617"></status>
</kw>
<msg timestamp="20170708 15:41:07.617" level="INFO">${has_host} = False</msg>
<status status="PASS" endtime="20170708 15:41:07.617" starttime="20170708 15:41:07.616"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status status="PASS" endtime="20170708 15:41:07.618" starttime="20170708 15:41:07.618"></status>
</kw>
<status status="PASS" endtime="20170708 15:41:07.618" starttime="20170708 15:41:07.617"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<status status="PASS" endtime="20170708 15:41:07.619" starttime="20170708 15:41:07.619"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg timestamp="20170708 15:41:07.620" level="FAIL">Dictionary does not contain key 'port'.</msg>
<status status="FAIL" endtime="20170708 15:41:07.620" starttime="20170708 15:41:07.620"></status>
</kw>
<msg timestamp="20170708 15:41:07.620" level="INFO">${has_port} = False</msg>
<status status="PASS" endtime="20170708 15:41:07.620" starttime="20170708 15:41:07.620"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status status="PASS" endtime="20170708 15:41:07.622" starttime="20170708 15:41:07.622"></status>
</kw>
<status status="PASS" endtime="20170708 15:41:07.622" starttime="20170708 15:41:07.621"></status>
</kw>
<status status="PASS" endtime="20170708 15:41:07.622" starttime="20170708 15:41:07.621"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg timestamp="20170708 15:41:07.623" level="INFO">Logging into '9.3.86.161:22' as 'root'.</msg>
<msg timestamp="20170708 15:41:09.408" level="INFO">Read output: root@witherspoon:~#</msg>
<status status="PASS" endtime="20170708 15:41:09.408" starttime="20170708 15:41:07.623"></status>
</kw>
<status status="PASS" endtime="20170708 15:41:09.408" starttime="20170708 15:41:07.615"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>egrep '^btime ' /proc/stat | cut -f 2 -d ' '</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${output}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170708 15:41:09.409" level="INFO">Executing command 'egrep '^btime ' /proc/stat | cut -f 2 -d ' ''.</msg>
<msg timestamp="20170708 15:41:09.485" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170708 15:41:09.486" level="INFO">${output} = 1499528353</msg>
<msg timestamp="20170708 15:41:09.486" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170708 15:41:09.486" starttime="20170708 15:41:09.408"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20170708 15:41:09.486" level="INFO">Length is 0</msg>
<status status="PASS" endtime="20170708 15:41:09.486" starttime="20170708 15:41:09.486"></status>
</kw>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<assign>
<var>${btime}</var>
</assign>
<msg timestamp="20170708 15:41:09.487" level="INFO">${btime} = 1499528353</msg>
<status status="PASS" endtime="20170708 15:41:09.487" starttime="20170708 15:41:09.487"></status>
</kw>
<msg timestamp="20170708 15:41:09.487" level="INFO">${cur_btime} = 1499528353</msg>
<status status="PASS" endtime="20170708 15:41:09.487" starttime="20170708 15:41:07.615"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${BOOT_TIME} == ${0} and ${BOOT_COUNT} == ${0}</arg>
<arg>Set Global Variable</arg>
<arg>${BOOT_TIME}</arg>
<arg>${cur_btime}</arg>
<arg>ELSE IF</arg>
<arg>${cur_btime} &gt; ${BOOT_TIME}</arg>
<arg>Run Keywords</arg>
<arg>Set Global Variable</arg>
<arg>${BOOT_TIME}</arg>
<arg>${cur_btime}</arg>
<arg>AND</arg>
<arg>Set Global Variable</arg>
<arg>${BOOT_COUNT}</arg>
<arg>${BOOT_COUNT + 1}</arg>
</arguments>
<kw name="Run Keywords" library="BuiltIn">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Set Global Variable</arg>
<arg>${BOOT_TIME}</arg>
<arg>${cur_btime}</arg>
<arg>AND</arg>
<arg>Set Global Variable</arg>
<arg>${BOOT_COUNT}</arg>
<arg>${BOOT_COUNT + 1}</arg>
</arguments>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${BOOT_TIME}</arg>
<arg>${cur_btime}</arg>
</arguments>
<msg timestamp="20170708 15:41:09.489" level="INFO">${BOOT_TIME} = 1499528353</msg>
<status status="PASS" endtime="20170708 15:41:09.489" starttime="20170708 15:41:09.489"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${BOOT_COUNT}</arg>
<arg>${BOOT_COUNT + 1}</arg>
</arguments>
<msg timestamp="20170708 15:41:09.490" level="INFO">${BOOT_COUNT} = 1</msg>
<status status="PASS" endtime="20170708 15:41:09.490" starttime="20170708 15:41:09.490"></status>
</kw>
<status status="PASS" endtime="20170708 15:41:09.490" starttime="20170708 15:41:09.489"></status>
</kw>
<status status="PASS" endtime="20170708 15:41:09.490" starttime="20170708 15:41:09.488"></status>
</kw>
<status status="PASS" endtime="20170708 15:41:09.491" starttime="20170708 15:41:07.615"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>\n Boot Count: ${BOOT_COUNT}</arg>
</arguments>
<status status="PASS" endtime="20170708 15:41:09.491" starttime="20170708 15:41:09.491"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>\n Boot Time: ${BOOT_TIME}</arg>
</arguments>
<status status="PASS" endtime="20170708 15:41:09.492" starttime="20170708 15:41:09.491"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${BOOT_COUNT} &gt; ${MAX_BOOT_COUNT}</arg>
<arg>Log</arg>
<arg>Phantom Reboot!!! Unexpected reboot detected</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20170708 15:41:09.492" starttime="20170708 15:41:09.492"></status>
</kw>
<status status="PASS" endtime="20170708 15:41:09.493" starttime="20170708 15:41:07.614"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Temp BMC URI Check</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Temp BMC URI Check">
<doc>Check for transient "BMC0" interface.</doc>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>/xyz/openbmc_project/state/BMC0/</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170708 15:41:09.496" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170708 15:41:09.497" starttime="20170708 15:41:09.496"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170708 15:41:09.497" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170708 15:41:09.497" starttime="20170708 15:41:09.497"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170708 15:41:09.498" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170708 15:41:09.498" starttime="20170708 15:41:09.498"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170708 15:41:09.499" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170708 15:41:09.499" starttime="20170708 15:41:09.498"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170708 15:41:09.678" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170708 15:41:09.678" starttime="20170708 15:41:09.500"></status>
</kw>
<msg timestamp="20170708 15:41:09.678" level="INFO">${status} = PASS</msg>
<msg timestamp="20170708 15:41:09.678" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170708 15:41:09.679" starttime="20170708 15:41:09.499"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170708 15:41:09.679" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170708 15:41:09.679" starttime="20170708 15:41:09.679"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170708 15:41:09.680" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170708 15:41:09.680" starttime="20170708 15:41:09.680"></status>
</kw>
<status status="PASS" endtime="20170708 15:41:09.680" starttime="20170708 15:41:09.495"></status>
</kw>
<status status="PASS" endtime="20170708 15:41:09.680" starttime="20170708 15:41:09.495"></status>
</kw>
<status status="PASS" endtime="20170708 15:41:09.680" starttime="20170708 15:41:09.494"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170708 15:41:09.681" level="INFO">${base_uri} = /xyz/openbmc_project/state/BMC0/</msg>
<status status="PASS" endtime="20170708 15:41:09.681" starttime="20170708 15:41:09.681"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170708 15:41:09.682" starttime="20170708 15:41:09.681"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170708 15:41:09.727" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/BMC0/, headers=None json=None</msg>
<msg timestamp="20170708 15:41:09.727" level="INFO">${ret} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20170708 15:41:09.727" starttime="20170708 15:41:09.682"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170708 15:41:09.728" starttime="20170708 15:41:09.727"></status>
</kw>
<msg timestamp="20170708 15:41:09.728" level="INFO">${resp} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20170708 15:41:09.728" starttime="20170708 15:41:09.494"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170708 15:41:09.729" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20170708 15:41:09.729" level="FAIL">404 != 200</msg>
<status status="FAIL" endtime="20170708 15:41:09.729" starttime="20170708 15:41:09.728"></status>
</kw>
<status status="FAIL" endtime="20170708 15:41:09.729" starttime="20170708 15:41:09.493"></status>
</kw>
<msg timestamp="20170708 15:41:09.729" level="INFO">${status} = False</msg>
<status status="PASS" endtime="20170708 15:41:09.729" starttime="20170708 15:41:09.493"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Wait For BMC Ready</arg>
<arg>ELSE</arg>
<arg>Wait For Temp BMC Ready</arg>
</arguments>
<kw name="Wait For BMC Ready" library="state_manager">
<doc>Check BMC state and wait for BMC Ready.</doc>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>BMC_READY</arg>
<arg>HOST_POWERED_OFF</arg>
</arguments>
<assign>
<var>@{states}</var>
</assign>
<msg timestamp="20170708 15:41:09.731" level="INFO">@{states} = [ BMC_READY | HOST_POWERED_OFF ]</msg>
<status status="PASS" endtime="20170708 15:41:09.731" starttime="20170708 15:41:09.730"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${OBMC_STATES_VERSION}' == '${0}'</arg>
<arg>Wait Until Keyword Succeeds</arg>
<arg>10 min</arg>
<arg>10 sec</arg>
<arg>Verify BMC State</arg>
<arg>${states}</arg>
<arg>ELSE</arg>
<arg>Wait Until Keyword Succeeds</arg>
<arg>10 min</arg>
<arg>10 sec</arg>
<arg>Is BMC Ready</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>10 min</arg>
<arg>10 sec</arg>
<arg>Is BMC Ready</arg>
</arguments>
<kw name="Is BMC Ready" library="state_manager">
<doc>Check if BMC state is Ready.</doc>
<kw name="Get BMC State" library="state_manager">
<doc>Return the state of the BMC.</doc>
<assign>
<var>${bmc_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${BMC_STATE_URI}</arg>
<arg>CurrentBMCState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170708 15:41:09.736" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170708 15:41:09.737" starttime="20170708 15:41:09.736"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170708 15:41:09.737" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170708 15:41:09.737" starttime="20170708 15:41:09.737"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170708 15:41:09.738" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170708 15:41:09.738" starttime="20170708 15:41:09.738"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170708 15:41:09.739" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170708 15:41:09.739" starttime="20170708 15:41:09.738"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170708 15:41:09.948" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170708 15:41:09.948" starttime="20170708 15:41:09.739"></status>
</kw>
<msg timestamp="20170708 15:41:09.949" level="INFO">${status} = PASS</msg>
<msg timestamp="20170708 15:41:09.949" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170708 15:41:09.949" starttime="20170708 15:41:09.739"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170708 15:41:09.949" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170708 15:41:09.949" starttime="20170708 15:41:09.949"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170708 15:41:09.950" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170708 15:41:09.950" starttime="20170708 15:41:09.950"></status>
</kw>
<status status="PASS" endtime="20170708 15:41:09.950" starttime="20170708 15:41:09.735"></status>
</kw>
<status status="PASS" endtime="20170708 15:41:09.950" starttime="20170708 15:41:09.735"></status>
</kw>
<status status="PASS" endtime="20170708 15:41:09.951" starttime="20170708 15:41:09.734"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170708 15:41:09.951" level="INFO">${base_uri} = /xyz/openbmc_project/state/bmc0//attr/CurrentBMCState</msg>
<status status="PASS" endtime="20170708 15:41:09.951" starttime="20170708 15:41:09.951"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170708 15:41:09.952" starttime="20170708 15:41:09.952"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170708 15:41:10.033" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/bmc0//attr/CurrentBMCState, headers=None json=None</msg>
<msg timestamp="20170708 15:41:10.033" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170708 15:41:10.033" starttime="20170708 15:41:09.952"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170708 15:41:10.034" starttime="20170708 15:41:10.034"></status>
</kw>
<msg timestamp="20170708 15:41:10.034" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170708 15:41:10.034" starttime="20170708 15:41:09.733"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170708 15:41:10.035" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170708 15:41:10.035" starttime="20170708 15:41:10.035"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170708 15:41:10.036" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.BMC.BMCState.Ready", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170708 15:41:10.036" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170708 15:41:10.036" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.BMC.BMCState.Ready'}</msg>
<status status="PASS" endtime="20170708 15:41:10.036" starttime="20170708 15:41:10.035"></status>
</kw>
<msg timestamp="20170708 15:41:10.036" level="INFO">${state} = xyz.openbmc_project.State.BMC.BMCState.Ready</msg>
<status status="PASS" endtime="20170708 15:41:10.036" starttime="20170708 15:41:09.733"></status>
</kw>
<msg timestamp="20170708 15:41:10.036" level="INFO">${bmc_state} = Ready</msg>
<status status="PASS" endtime="20170708 15:41:10.036" starttime="20170708 15:41:09.732"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${BMC_READY_STATE}</arg>
<arg>${bmc_state}</arg>
</arguments>
<status status="PASS" endtime="20170708 15:41:10.037" starttime="20170708 15:41:10.037"></status>
</kw>
<status status="PASS" endtime="20170708 15:41:10.037" starttime="20170708 15:41:09.732"></status>
</kw>
<status status="PASS" endtime="20170708 15:41:10.037" starttime="20170708 15:41:09.732"></status>
</kw>
<status status="PASS" endtime="20170708 15:41:10.037" starttime="20170708 15:41:09.731"></status>
</kw>
<status status="PASS" endtime="20170708 15:41:10.037" starttime="20170708 15:41:09.730"></status>
</kw>
<status status="PASS" endtime="20170708 15:41:10.038" starttime="20170708 15:41:09.729"></status>
</kw>
<status status="PASS" endtime="20170708 15:41:10.038" starttime="20170708 15:38:11.013"></status>
</kw>
<status status="PASS" endtime="20170708 15:41:10.038" starttime="20170708 15:38:11.012"></status>
</kw>
<kw name="Run Key U" library="gen_robot_keyword">
<doc>Run keyword unconditionally (i.e. without regard to global test_mode</doc>
<arguments>
<arg>Preserve BMC Network Setting</arg>
</arguments>
<kw name="Preserve BMC Network Setting" library="code_update_utils">
<doc>Preserve Network setting</doc>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${1}</arg>
</arguments>
<assign>
<var>${policy}</var>
</assign>
<msg timestamp="20170708 15:41:10.044" level="INFO">${policy} = 1</msg>
<status status="PASS" endtime="20170708 15:41:10.044" starttime="20170708 15:41:10.044"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=${policy}</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg timestamp="20170708 15:41:10.045" level="INFO">${value} = {u'data': 1}</msg>
<status status="PASS" endtime="20170708 15:41:10.045" starttime="20170708 15:41:10.045"></status>
</kw>
<kw name="Write Attribute" library="rest_client">
<arguments>
<arg>${BMC_UPD_ATTR}</arg>
<arg>preserve_network_settings</arg>
<arg>data=${value}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170708 15:41:10.046" level="INFO">${base_uri} = /org/openbmc/control/flash/bmc</msg>
<status status="PASS" endtime="20170708 15:41:10.046" starttime="20170708 15:41:10.046"></status>
</kw>
<kw name="OpenBMC Put Request" library="rest_client">
<arguments>
<arg>${base_uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170708 15:41:10.049" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170708 15:41:10.050" starttime="20170708 15:41:10.049"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170708 15:41:10.050" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170708 15:41:10.050" starttime="20170708 15:41:10.050"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170708 15:41:10.051" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170708 15:41:10.051" starttime="20170708 15:41:10.051"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170708 15:41:10.052" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170708 15:41:10.052" starttime="20170708 15:41:10.051"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170708 15:41:10.360" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170708 15:41:10.360" starttime="20170708 15:41:10.053"></status>
</kw>
<msg timestamp="20170708 15:41:10.360" level="INFO">${status} = PASS</msg>
<msg timestamp="20170708 15:41:10.360" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170708 15:41:10.360" starttime="20170708 15:41:10.052"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170708 15:41:10.361" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170708 15:41:10.361" starttime="20170708 15:41:10.360"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170708 15:41:10.361" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170708 15:41:10.361" starttime="20170708 15:41:10.361"></status>
</kw>
<status status="PASS" endtime="20170708 15:41:10.361" starttime="20170708 15:41:10.048"></status>
</kw>
<status status="PASS" endtime="20170708 15:41:10.362" starttime="20170708 15:41:10.048"></status>
</kw>
<status status="PASS" endtime="20170708 15:41:10.362" starttime="20170708 15:41:10.047"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170708 15:41:10.362" level="INFO">${base_uri} = /org/openbmc/control/flash/bmc/attr/preserve_network_settings</msg>
<status status="PASS" endtime="20170708 15:41:10.362" starttime="20170708 15:41:10.362"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170708 15:41:10.363" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170708 15:41:10.363" starttime="20170708 15:41:10.363"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" endtime="20170708 15:41:10.364" starttime="20170708 15:41:10.363"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Put</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170708 15:41:10.366" level="INFO">${msg} = URI:https://9.3.86.161/org/openbmc/control/flash/bmc/attr/preserve_network_settings, method:Put, args:{u'data': {u'data': 1}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20170708 15:41:10.366" starttime="20170708 15:41:10.365"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170708 15:41:10.367" level="INFO">URI:https://9.3.86.161/org/openbmc/control/flash/bmc/attr/preserve_network_settings, method:Put, args:{u'data': {u'data': 1}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20170708 15:41:10.367" starttime="20170708 15:41:10.366"></status>
</kw>
<status status="PASS" endtime="20170708 15:41:10.367" starttime="20170708 15:41:10.366"></status>
</kw>
<status status="PASS" endtime="20170708 15:41:10.367" starttime="20170708 15:41:10.364"></status>
</kw>
<kw name="Put Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a PUT request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170708 15:41:10.647" level="INFO">Put Request using : alias=openbmc, uri=/org/openbmc/control/flash/bmc/attr/preserve_network_settings, data={"data": 1},                     headers={u'Content-Type': u'application/json'}, allow_redirects=True </msg>
<msg timestamp="20170708 15:41:10.647" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170708 15:41:10.647" starttime="20170708 15:41:10.368"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170708 15:41:10.649" level="INFO">${msg} = Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170708 15:41:10.649" starttime="20170708 15:41:10.648"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170708 15:41:10.650" level="INFO">Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170708 15:41:10.650" starttime="20170708 15:41:10.650"></status>
</kw>
<status status="PASS" endtime="20170708 15:41:10.650" starttime="20170708 15:41:10.649"></status>
</kw>
<status status="PASS" endtime="20170708 15:41:10.650" starttime="20170708 15:41:10.648"></status>
</kw>
<msg timestamp="20170708 15:41:10.650" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170708 15:41:10.650" starttime="20170708 15:41:10.046"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170708 15:41:10.651" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170708 15:41:10.651" starttime="20170708 15:41:10.651"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${json}</var>
</assign>
<msg timestamp="20170708 15:41:10.652" level="INFO">To JSON using : content={
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170708 15:41:10.652" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170708 15:41:10.652" level="INFO">${json} = {u'status': u'ok', u'message': u'200 OK', u'data': None}</msg>
<status status="PASS" endtime="20170708 15:41:10.652" starttime="20170708 15:41:10.652"></status>
</kw>
<status status="PASS" endtime="20170708 15:41:10.652" starttime="20170708 15:41:10.045"></status>
</kw>
<kw name="Read Properties" library="rest_client">
<arguments>
<arg>${BMC_UPD_ATTR}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170708 15:41:10.656" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170708 15:41:10.656" starttime="20170708 15:41:10.656"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170708 15:41:10.657" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170708 15:41:10.657" starttime="20170708 15:41:10.656"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170708 15:41:10.657" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170708 15:41:10.657" starttime="20170708 15:41:10.657"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170708 15:41:10.658" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170708 15:41:10.658" starttime="20170708 15:41:10.658"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170708 15:41:10.834" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170708 15:41:10.834" starttime="20170708 15:41:10.659"></status>
</kw>
<msg timestamp="20170708 15:41:10.834" level="INFO">${status} = PASS</msg>
<msg timestamp="20170708 15:41:10.834" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170708 15:41:10.834" starttime="20170708 15:41:10.659"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170708 15:41:10.835" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170708 15:41:10.835" starttime="20170708 15:41:10.834"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170708 15:41:10.835" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170708 15:41:10.836" starttime="20170708 15:41:10.835"></status>
</kw>
<status status="PASS" endtime="20170708 15:41:10.836" starttime="20170708 15:41:10.655"></status>
</kw>
<status status="PASS" endtime="20170708 15:41:10.836" starttime="20170708 15:41:10.655"></status>
</kw>
<status status="PASS" endtime="20170708 15:41:10.836" starttime="20170708 15:41:10.654"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170708 15:41:10.836" level="INFO">${base_uri} = /org/openbmc/control/flash/bmc</msg>
<status status="PASS" endtime="20170708 15:41:10.837" starttime="20170708 15:41:10.836"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170708 15:41:10.837" starttime="20170708 15:41:10.837"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170708 15:41:10.935" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/control/flash/bmc, headers=None json=None</msg>
<msg timestamp="20170708 15:41:10.936" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170708 15:41:10.936" starttime="20170708 15:41:10.837"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170708 15:41:10.936" starttime="20170708 15:41:10.936"></status>
</kw>
<msg timestamp="20170708 15:41:10.937" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170708 15:41:10.937" starttime="20170708 15:41:10.653"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170708 15:41:10.937" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170708 15:41:10.937" starttime="20170708 15:41:10.937"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170708 15:41:10.938" level="INFO">To JSON using : content={
  "auto_apply": 0, 
  "clear_persistent_files": 0, 
  "filename": "", 
  "preserve_network_settings": 1, 
  "restore_application_defaults": 0, 
  "status": "Idle", 
  "update_kernel_and_apps": 0
} </msg>
<msg timestamp="20170708 15:41:10.938" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170708 15:41:10.938" level="INFO">${content} = {u'status': u'Idle', u'update_kernel_and_apps': 0, u'clear_persistent_files': 0, u'auto_apply': 0, u'filename': u'', u'preserve_network_settings': 1, u'restore_application_defaults': 0}</msg>
<status status="PASS" endtime="20170708 15:41:10.938" starttime="20170708 15:41:10.938"></status>
</kw>
<msg timestamp="20170708 15:41:10.938" level="FAIL">Replacing variables from keyword return value failed: Resolving variable '${content["data"]}' failed: KeyError: 'data'</msg>
<status status="FAIL" endtime="20170708 15:41:10.938" starttime="20170708 15:41:10.652"></status>
</kw>
<status status="FAIL" endtime="20170708 15:41:10.939" starttime="20170708 15:41:10.043"></status>
</kw>
<msg timestamp="20170708 15:41:10.940" level="FAIL">Replacing variables from keyword return value failed: Resolving variable '${content["data"]}' failed: KeyError: 'data'</msg>
<status status="FAIL" endtime="20170708 15:41:10.940" starttime="20170708 15:41:10.038"></status>
</kw>
<kw type="teardown" name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>FFDC On Test Case Fail</arg>
</arguments>
<kw name="FFDC On Test Case Fail" library="openbmc_ffdc">
<doc>Generic FFDC entry point. Place holder to hook in</doc>
<kw name="Is Host Quiesced" library="state_manager">
<doc>Check if host state is quiesced.</doc>
<assign>
<var>${status}</var>
</assign>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170708 15:41:10.952" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170708 15:41:10.953" starttime="20170708 15:41:10.952"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170708 15:41:10.953" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170708 15:41:10.953" starttime="20170708 15:41:10.953"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170708 15:41:10.954" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170708 15:41:10.954" starttime="20170708 15:41:10.953"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170708 15:41:10.954" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170708 15:41:10.954" starttime="20170708 15:41:10.954"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170708 15:41:11.132" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170708 15:41:11.132" starttime="20170708 15:41:10.955"></status>
</kw>
<msg timestamp="20170708 15:41:11.132" level="INFO">${status} = PASS</msg>
<msg timestamp="20170708 15:41:11.132" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170708 15:41:11.132" starttime="20170708 15:41:10.955"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170708 15:41:11.133" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170708 15:41:11.133" starttime="20170708 15:41:11.133"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170708 15:41:11.134" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170708 15:41:11.134" starttime="20170708 15:41:11.133"></status>
</kw>
<status status="PASS" endtime="20170708 15:41:11.134" starttime="20170708 15:41:10.951"></status>
</kw>
<status status="PASS" endtime="20170708 15:41:11.134" starttime="20170708 15:41:10.951"></status>
</kw>
<status status="PASS" endtime="20170708 15:41:11.134" starttime="20170708 15:41:10.950"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170708 15:41:11.135" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" endtime="20170708 15:41:11.135" starttime="20170708 15:41:11.134"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170708 15:41:11.135" starttime="20170708 15:41:11.135"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170708 15:41:11.214" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170708 15:41:11.214" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170708 15:41:11.214" starttime="20170708 15:41:11.136"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170708 15:41:11.215" starttime="20170708 15:41:11.214"></status>
</kw>
<msg timestamp="20170708 15:41:11.215" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170708 15:41:11.215" starttime="20170708 15:41:10.949"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170708 15:41:11.216" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170708 15:41:11.216" starttime="20170708 15:41:11.215"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170708 15:41:11.217" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170708 15:41:11.217" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170708 15:41:11.217" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Off'}</msg>
<status status="PASS" endtime="20170708 15:41:11.217" starttime="20170708 15:41:11.216"></status>
</kw>
<msg timestamp="20170708 15:41:11.217" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Off</msg>
<status status="PASS" endtime="20170708 15:41:11.217" starttime="20170708 15:41:10.949"></status>
</kw>
<msg timestamp="20170708 15:41:11.217" level="INFO">${host_state} = Off</msg>
<status status="PASS" endtime="20170708 15:41:11.217" starttime="20170708 15:41:10.948"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal</arg>
<arg>${host_state}</arg>
<arg>Quiesced</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${host_state}</arg>
<arg>Quiesced</arg>
</arguments>
<msg timestamp="20170708 15:41:11.218" level="FAIL">Off != Quiesced</msg>
<status status="FAIL" endtime="20170708 15:41:11.219" starttime="20170708 15:41:11.218"></status>
</kw>
<msg timestamp="20170708 15:41:11.219" level="INFO">${status} = False</msg>
<status status="PASS" endtime="20170708 15:41:11.219" starttime="20170708 15:41:11.218"></status>
</kw>
<msg timestamp="20170708 15:41:11.219" level="INFO">${status} = False</msg>
<status status="PASS" endtime="20170708 15:41:11.219" starttime="20170708 15:41:10.947"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${TEST_STATUS}' == 'FAIL' or '${status}'=='True'</arg>
<arg>FFDC</arg>
</arguments>
<kw name="Ffdc" library="openbmc_ffdc">
<doc>Gather First Failure Data Capture (FFDC).</doc>
<kw name="Ping Host" library="utils">
<arguments>
<arg>9.3.86.161</arg>
</arguments>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${host}</arg>
<arg>msg=No host provided</arg>
</arguments>
<msg timestamp="20170708 15:41:11.230" level="INFO">Length is 10</msg>
<status status="PASS" endtime="20170708 15:41:11.230" starttime="20170708 15:41:11.230"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>ping -c 4 ${host}</arg>
</arguments>
<assign>
<var>${RC}</var>
<var>${output}</var>
</assign>
<msg timestamp="20170708 15:41:11.236" level="INFO">Running command 'ping -c 4 9.3.86.161 2&gt;&amp;1'.</msg>
<msg timestamp="20170708 15:41:14.242" level="INFO">${RC} = 0</msg>
<msg timestamp="20170708 15:41:14.243" level="INFO">${output} = PING 9.3.86.161 (9.3.86.161) 56(84) bytes of data.
64 bytes from 9.3.86.161: icmp_seq=1 ttl=62 time=1.36 ms
64 bytes from 9.3.86.161: icmp_seq=2 ttl=62 time=0.624 ms
64 bytes from 9.3.86.161: icmp_seq...</msg>
<status status="PASS" endtime="20170708 15:41:14.243" starttime="20170708 15:41:11.230"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>RC: ${RC}\nOutput:\n${output}</arg>
</arguments>
<msg timestamp="20170708 15:41:14.246" level="INFO">RC: 0
Output:
PING 9.3.86.161 (9.3.86.161) 56(84) bytes of data.
64 bytes from 9.3.86.161: icmp_seq=1 ttl=62 time=1.36 ms
64 bytes from 9.3.86.161: icmp_seq=2 ttl=62 time=0.624 ms
64 bytes from 9.3.86.161: icmp_seq=3 ttl=62 time=0.607 ms
64 bytes from 9.3.86.161: icmp_seq=4 ttl=62 time=0.609 ms

--- 9.3.86.161 ping statistics ---
4 packets transmitted, 4 received, 0% packet loss, time 3001ms
rtt min/avg/max/mdev = 0.607/0.800/1.363/0.326 ms</msg>
<status status="PASS" endtime="20170708 15:41:14.246" starttime="20170708 15:41:14.245"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${RC}</arg>
<arg>${0}</arg>
</arguments>
<status status="PASS" endtime="20170708 15:41:14.247" starttime="20170708 15:41:14.246"></status>
</kw>
<status status="PASS" endtime="20170708 15:41:14.247" starttime="20170708 15:41:11.229"></status>
</kw>
<kw name="Get Current Time Stamp" library="openbmc_ffdc_utils">
<doc>Get the current time stamp data</doc>
<kw name="Get Current Date" library="DateTime">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20170708 15:41:14.266" level="INFO">${cur_time} = 2017-07-08 15:41:14:265719</msg>
<status status="PASS" endtime="20170708 15:41:14.266" starttime="20170708 15:41:14.266"></status>
</kw>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20170708 15:41:14.267" level="INFO">${cur_time} = 20170708154114265719</msg>
<status status="PASS" endtime="20170708 15:41:14.267" starttime="20170708 15:41:14.266"></status>
</kw>
<status status="PASS" endtime="20170708 15:41:14.267" starttime="20170708 15:41:14.265"></status>
</kw>
<msg timestamp="20170708 15:41:14.271" level="INFO">${FFDC_TIME} = 20170708154114265719</msg>
<kw name="Get Test Dir and Name" library="openbmc_ffdc_utils">
<doc>SUITE_NAME and TEST_NAME are automatic variables</doc>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${SUITE_NAME}</arg>
</arguments>
<assign>
<var>${suite_name}</var>
</assign>
<msg timestamp="20170708 15:41:14.272" level="INFO">${suite_name} = UpdateBmc</msg>
<status status="PASS" endtime="20170708 15:41:14.273" starttime="20170708 15:41:14.272"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${FFDC_TIME}_</arg>
<arg>${suite_name}</arg>
</arguments>
<assign>
<var>${suite_name}</var>
</assign>
<msg timestamp="20170708 15:41:14.273" level="INFO">${suite_name} = 20170708154114265719_UpdateBmc</msg>
<status status="PASS" endtime="20170708 15:41:14.273" starttime="20170708 15:41:14.273"></status>
</kw>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${TEST_NAME}</arg>
</arguments>
<assign>
<var>${test_name}</var>
</assign>
<msg timestamp="20170708 15:41:14.274" level="INFO">${test_name} = InitiateCodeUpdateBMC</msg>
<status status="PASS" endtime="20170708 15:41:14.274" starttime="20170708 15:41:14.274"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${FFDC_TIME}_</arg>
<arg>${test_name}</arg>
</arguments>
<assign>
<var>${test_name}</var>
</assign>
<msg timestamp="20170708 15:41:14.274" level="INFO">${test_name} = 20170708154114265719_InitiateCodeUpdateBMC</msg>
<status status="PASS" endtime="20170708 15:41:14.275" starttime="20170708 15:41:14.274"></status>
</kw>
<status status="PASS" endtime="20170708 15:41:14.275" starttime="20170708 15:41:14.272"></status>
</kw>
<msg timestamp="20170708 15:41:14.279" level="INFO">${FFDC_DIR_PATH} = /home/fspcibld/logs/20170708154114265719_UpdateBmc/20170708154114265719_InitiateCodeUpdateBMC/</msg>
<msg timestamp="20170708 15:41:14.284" level="INFO">${FFDC_PREFIX} = 20170708154114265719_</msg>
<msg timestamp="20170708 15:41:14.303" level="INFO">${LOG_PREFIX} = /home/fspcibld/logs/20170708154114265719_UpdateBmc/20170708154114265719_InitiateCodeUpdateBMC/20170708154114265719_</msg>
<kw name="Create Directory" library="OperatingSystem">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>/home/fspcibld/logs/20170708154114265719_UpdateBmc/20170708154114265719_InitiateCodeUpdateBMC/</arg>
</arguments>
<msg timestamp="20170708 15:41:14.304" html="yes" level="INFO">Created directory '&lt;a href="file:///home/fspcibld/logs/20170708154114265719_UpdateBmc/20170708154114265719_InitiateCodeUpdateBMC"&gt;/home/fspcibld/logs/20170708154114265719_UpdateBmc/20170708154114265719_InitiateCodeUpdateBMC&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170708 15:41:14.305" starttime="20170708 15:41:14.304"></status>
</kw>
<msg timestamp="20170708 15:41:14.309" level="INFO">${FFDC_FILE_PATH} = /home/fspcibld/logs/20170708154114265719_UpdateBmc/20170708154114265719_InitiateCodeUpdateBMC/20170708154114265719_BMC_general.txt</msg>
<kw name="Header Message" library="openbmc_ffdc_utils">
<doc>Write header message to the report document manifest.</doc>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${HEADER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170708 15:41:14.320" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170708154114265719_UpdateBmc/20170708154114265719_InitiateCodeUpdateBMC/20170708154114265719_BMC_general.txt"&gt;/home/fspcibld/logs/20170708154114265719_UpdateBmc/20170708154114265719_InitiateCodeUpdateBMC/20170708154114265719_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170708 15:41:14.320" starttime="20170708 15:41:14.319"></status>
</kw>
<status status="PASS" endtime="20170708 15:41:14.320" starttime="20170708 15:41:14.318"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170708 15:41:14.321" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170708154114265719_UpdateBmc/20170708154114265719_InitiateCodeUpdateBMC/20170708154114265719_BMC_general.txt"&gt;/home/fspcibld/logs/20170708154114265719_UpdateBmc/20170708154114265719_InitiateCodeUpdateBMC/20170708154114265719_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170708 15:41:14.321" starttime="20170708 15:41:14.321"></status>
</kw>
<status status="PASS" endtime="20170708 15:41:14.321" starttime="20170708 15:41:14.320"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Suite File\t\t: ${SUITE_NAME} ${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170708 15:41:14.322" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170708154114265719_UpdateBmc/20170708154114265719_InitiateCodeUpdateBMC/20170708154114265719_BMC_general.txt"&gt;/home/fspcibld/logs/20170708154114265719_UpdateBmc/20170708154114265719_InitiateCodeUpdateBMC/20170708154114265719_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170708 15:41:14.322" starttime="20170708 15:41:14.322"></status>
</kw>
<status status="PASS" endtime="20170708 15:41:14.322" starttime="20170708 15:41:14.321"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Case Name\t\t: ${TEST_NAME}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170708 15:41:14.324" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170708154114265719_UpdateBmc/20170708154114265719_InitiateCodeUpdateBMC/20170708154114265719_BMC_general.txt"&gt;/home/fspcibld/logs/20170708154114265719_UpdateBmc/20170708154114265719_InitiateCodeUpdateBMC/20170708154114265719_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170708 15:41:14.324" starttime="20170708 15:41:14.323"></status>
</kw>
<status status="PASS" endtime="20170708 15:41:14.324" starttime="20170708 15:41:14.323"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Source File\t: ${SUITE_SOURCE}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170708 15:41:14.325" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170708154114265719_UpdateBmc/20170708154114265719_InitiateCodeUpdateBMC/20170708154114265719_BMC_general.txt"&gt;/home/fspcibld/logs/20170708154114265719_UpdateBmc/20170708154114265719_InitiateCodeUpdateBMC/20170708154114265719_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170708 15:41:14.325" starttime="20170708 15:41:14.325"></status>
</kw>
<status status="PASS" endtime="20170708 15:41:14.325" starttime="20170708 15:41:14.324"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Failure Time Stamp\t: ${FFDC_TIME}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170708 15:41:14.326" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170708154114265719_UpdateBmc/20170708154114265719_InitiateCodeUpdateBMC/20170708154114265719_BMC_general.txt"&gt;/home/fspcibld/logs/20170708154114265719_UpdateBmc/20170708154114265719_InitiateCodeUpdateBMC/20170708154114265719_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170708 15:41:14.326" starttime="20170708 15:41:14.326"></status>
</kw>
<status status="PASS" endtime="20170708 15:41:14.327" starttime="20170708 15:41:14.325"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Error Message\t: ${TEST_MESSAGE}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170708 15:41:14.330" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170708154114265719_UpdateBmc/20170708154114265719_InitiateCodeUpdateBMC/20170708154114265719_BMC_general.txt"&gt;/home/fspcibld/logs/20170708154114265719_UpdateBmc/20170708154114265719_InitiateCodeUpdateBMC/20170708154114265719_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170708 15:41:14.330" starttime="20170708 15:41:14.327"></status>
</kw>
<status status="PASS" endtime="20170708 15:41:14.330" starttime="20170708 15:41:14.327"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Documentation\t:${\n}${TEST_DOCUMENTATION}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170708 15:41:14.332" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170708154114265719_UpdateBmc/20170708154114265719_InitiateCodeUpdateBMC/20170708154114265719_BMC_general.txt"&gt;/home/fspcibld/logs/20170708154114265719_UpdateBmc/20170708154114265719_InitiateCodeUpdateBMC/20170708154114265719_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170708 15:41:14.332" starttime="20170708 15:41:14.331"></status>
</kw>
<status status="PASS" endtime="20170708 15:41:14.332" starttime="20170708 15:41:14.330"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170708 15:41:14.333" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170708154114265719_UpdateBmc/20170708154114265719_InitiateCodeUpdateBMC/20170708154114265719_BMC_general.txt"&gt;/home/fspcibld/logs/20170708154114265719_UpdateBmc/20170708154114265719_InitiateCodeUpdateBMC/20170708154114265719_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170708 15:41:14.333" starttime="20170708 15:41:14.333"></status>
</kw>
<status status="PASS" endtime="20170708 15:41:14.333" starttime="20170708 15:41:14.332"></status>
</kw>
<kw name="Test Setup Info" library="openbmc_ffdc_utils">
<doc>BMC IP, Model and other information</doc>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}-----------------------${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170708 15:41:14.335" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170708154114265719_UpdateBmc/20170708154114265719_InitiateCodeUpdateBMC/20170708154114265719_BMC_general.txt"&gt;/home/fspcibld/logs/20170708154114265719_UpdateBmc/20170708154114265719_InitiateCodeUpdateBMC/20170708154114265719_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170708 15:41:14.335" starttime="20170708 15:41:14.334"></status>
</kw>
<status status="PASS" endtime="20170708 15:41:14.335" starttime="20170708 15:41:14.334"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Setup Information:</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170708 15:41:14.336" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170708154114265719_UpdateBmc/20170708154114265719_InitiateCodeUpdateBMC/20170708154114265719_BMC_general.txt"&gt;/home/fspcibld/logs/20170708154114265719_UpdateBmc/20170708154114265719_InitiateCodeUpdateBMC/20170708154114265719_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170708 15:41:14.336" starttime="20170708 15:41:14.336"></status>
</kw>
<status status="PASS" endtime="20170708 15:41:14.336" starttime="20170708 15:41:14.335"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}-----------------------${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170708 15:41:14.337" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170708154114265719_UpdateBmc/20170708154114265719_InitiateCodeUpdateBMC/20170708154114265719_BMC_general.txt"&gt;/home/fspcibld/logs/20170708154114265719_UpdateBmc/20170708154114265719_InitiateCodeUpdateBMC/20170708154114265719_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170708 15:41:14.337" starttime="20170708 15:41:14.337"></status>
</kw>
<status status="PASS" endtime="20170708 15:41:14.337" starttime="20170708 15:41:14.336"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>OPENBMC HOST \t: ${OPENBMC_HOST}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170708 15:41:14.339" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170708154114265719_UpdateBmc/20170708154114265719_InitiateCodeUpdateBMC/20170708154114265719_BMC_general.txt"&gt;/home/fspcibld/logs/20170708154114265719_UpdateBmc/20170708154114265719_InitiateCodeUpdateBMC/20170708154114265719_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170708 15:41:14.339" starttime="20170708 15:41:14.338"></status>
</kw>
<status status="PASS" endtime="20170708 15:41:14.339" starttime="20170708 15:41:14.338"></status>
</kw>
<kw name="Get BMC System Model" library="utils">
<doc>Get the BMC model from the device tree.</doc>
<assign>
<var>${model_name}</var>
</assign>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg timestamp="20170708 15:41:14.341" level="FAIL">Dictionary does not contain key 'host'.</msg>
<status status="FAIL" endtime="20170708 15:41:14.341" starttime="20170708 15:41:14.340"></status>
</kw>
<msg timestamp="20170708 15:41:14.341" level="INFO">${has_host} = False</msg>
<status status="PASS" endtime="20170708 15:41:14.341" starttime="20170708 15:41:14.340"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status status="PASS" endtime="20170708 15:41:14.342" starttime="20170708 15:41:14.342"></status>
</kw>
<status status="PASS" endtime="20170708 15:41:14.342" starttime="20170708 15:41:14.341"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<status status="PASS" endtime="20170708 15:41:14.343" starttime="20170708 15:41:14.343"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg timestamp="20170708 15:41:14.344" level="FAIL">Dictionary does not contain key 'port'.</msg>
<status status="FAIL" endtime="20170708 15:41:14.344" starttime="20170708 15:41:14.344"></status>
</kw>
<msg timestamp="20170708 15:41:14.344" level="INFO">${has_port} = False</msg>
<status status="PASS" endtime="20170708 15:41:14.344" starttime="20170708 15:41:14.343"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status status="PASS" endtime="20170708 15:41:14.346" starttime="20170708 15:41:14.346"></status>
</kw>
<status status="PASS" endtime="20170708 15:41:14.346" starttime="20170708 15:41:14.345"></status>
</kw>
<status status="PASS" endtime="20170708 15:41:14.347" starttime="20170708 15:41:14.345"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg timestamp="20170708 15:41:14.347" level="INFO">Logging into '9.3.86.161:22' as 'root'.</msg>
<msg timestamp="20170708 15:41:16.092" level="INFO">Read output: root@witherspoon:~#</msg>
<status status="PASS" endtime="20170708 15:41:16.093" starttime="20170708 15:41:14.347"></status>
</kw>
<status status="PASS" endtime="20170708 15:41:16.093" starttime="20170708 15:41:14.339"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>cat ${devicetree_base} | cut -d " " -f 1</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${bmc_model}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170708 15:41:16.094" level="INFO">Executing command 'cat /sys/firmware/devicetree/base/model | cut -d " " -f 1'.</msg>
<msg timestamp="20170708 15:41:16.171" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170708 15:41:16.171" level="INFO">${bmc_model} = Witherspoon</msg>
<msg timestamp="20170708 15:41:16.171" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170708 15:41:16.171" starttime="20170708 15:41:16.094"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20170708 15:41:16.171" level="INFO">Length is 0</msg>
<status status="PASS" endtime="20170708 15:41:16.172" starttime="20170708 15:41:16.171"></status>
</kw>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${bmc_model}</arg>
</arguments>
<msg timestamp="20170708 15:41:16.172" level="INFO">Length is 11</msg>
<status status="PASS" endtime="20170708 15:41:16.172" starttime="20170708 15:41:16.172"></status>
</kw>
<msg timestamp="20170708 15:41:16.172" level="INFO">${model_name} = Witherspoon</msg>
<status status="PASS" endtime="20170708 15:41:16.172" starttime="20170708 15:41:14.339"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>SYSTEM TYPE \t: ${model_name}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170708 15:41:16.174" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170708154114265719_UpdateBmc/20170708154114265719_InitiateCodeUpdateBMC/20170708154114265719_BMC_general.txt"&gt;/home/fspcibld/logs/20170708154114265719_UpdateBmc/20170708154114265719_InitiateCodeUpdateBMC/20170708154114265719_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170708 15:41:16.174" starttime="20170708 15:41:16.173"></status>
</kw>
<status status="PASS" endtime="20170708 15:41:16.174" starttime="20170708 15:41:16.173"></status>
</kw>
<status status="PASS" endtime="20170708 15:41:16.174" starttime="20170708 15:41:14.333"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${MSG_INTRO}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170708 15:41:16.175" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170708154114265719_UpdateBmc/20170708154114265719_InitiateCodeUpdateBMC/20170708154114265719_BMC_general.txt"&gt;/home/fspcibld/logs/20170708154114265719_UpdateBmc/20170708154114265719_InitiateCodeUpdateBMC/20170708154114265719_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170708 15:41:16.175" starttime="20170708 15:41:16.175"></status>
</kw>
<status status="PASS" endtime="20170708 15:41:16.175" starttime="20170708 15:41:16.174"></status>
</kw>
<kw name="Get Ffdc Cmd Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg timestamp="20170708 15:41:16.176" level="INFO">@{entries} = [ APPLICATION DATA | DRIVER INFO | BMC DATA ]</msg>
<status status="PASS" endtime="20170708 15:41:16.176" starttime="20170708 15:41:16.176"></status>
</kw>
<kw type="for" name="${index} IN [ @{entries} ]">
<kw type="foritem" name="${index} = APPLICATION DATA">
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>* ${index.upper()}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170708 15:41:16.177" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170708154114265719_UpdateBmc/20170708154114265719_InitiateCodeUpdateBMC/20170708154114265719_BMC_general.txt"&gt;/home/fspcibld/logs/20170708154114265719_UpdateBmc/20170708154114265719_InitiateCodeUpdateBMC/20170708154114265719_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170708 15:41:16.178" starttime="20170708 15:41:16.177"></status>
</kw>
<status status="PASS" endtime="20170708 15:41:16.178" starttime="20170708 15:41:16.176"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170708 15:41:16.179" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170708154114265719_UpdateBmc/20170708154114265719_InitiateCodeUpdateBMC/20170708154114265719_BMC_general.txt"&gt;/home/fspcibld/logs/20170708154114265719_UpdateBmc/20170708154114265719_InitiateCodeUpdateBMC/20170708154114265719_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170708 15:41:16.179" starttime="20170708 15:41:16.178"></status>
</kw>
<status status="PASS" endtime="20170708 15:41:16.179" starttime="20170708 15:41:16.178"></status>
</kw>
<status status="PASS" endtime="20170708 15:41:16.179" starttime="20170708 15:41:16.176"></status>
</kw>
<kw type="foritem" name="${index} = DRIVER INFO">
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>* ${index.upper()}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170708 15:41:16.180" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170708154114265719_UpdateBmc/20170708154114265719_InitiateCodeUpdateBMC/20170708154114265719_BMC_general.txt"&gt;/home/fspcibld/logs/20170708154114265719_UpdateBmc/20170708154114265719_InitiateCodeUpdateBMC/20170708154114265719_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170708 15:41:16.180" starttime="20170708 15:41:16.180"></status>
</kw>
<status status="PASS" endtime="20170708 15:41:16.180" starttime="20170708 15:41:16.179"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170708 15:41:16.182" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170708154114265719_UpdateBmc/20170708154114265719_InitiateCodeUpdateBMC/20170708154114265719_BMC_general.txt"&gt;/home/fspcibld/logs/20170708154114265719_UpdateBmc/20170708154114265719_InitiateCodeUpdateBMC/20170708154114265719_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170708 15:41:16.182" starttime="20170708 15:41:16.181"></status>
</kw>
<status status="PASS" endtime="20170708 15:41:16.182" starttime="20170708 15:41:16.181"></status>
</kw>
<status status="PASS" endtime="20170708 15:41:16.182" starttime="20170708 15:41:16.179"></status>
</kw>
<kw type="foritem" name="${index} = BMC DATA">
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>* ${index.upper()}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170708 15:41:16.183" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170708154114265719_UpdateBmc/20170708154114265719_InitiateCodeUpdateBMC/20170708154114265719_BMC_general.txt"&gt;/home/fspcibld/logs/20170708154114265719_UpdateBmc/20170708154114265719_InitiateCodeUpdateBMC/20170708154114265719_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170708 15:41:16.184" starttime="20170708 15:41:16.183"></status>
</kw>
<status status="PASS" endtime="20170708 15:41:16.184" starttime="20170708 15:41:16.182"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170708 15:41:16.185" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170708154114265719_UpdateBmc/20170708154114265719_InitiateCodeUpdateBMC/20170708154114265719_BMC_general.txt"&gt;/home/fspcibld/logs/20170708154114265719_UpdateBmc/20170708154114265719_InitiateCodeUpdateBMC/20170708154114265719_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170708 15:41:16.185" starttime="20170708 15:41:16.184"></status>
</kw>
<status status="PASS" endtime="20170708 15:41:16.185" starttime="20170708 15:41:16.184"></status>
</kw>
<status status="PASS" endtime="20170708 15:41:16.185" starttime="20170708 15:41:16.182"></status>
</kw>
<status status="PASS" endtime="20170708 15:41:16.185" starttime="20170708 15:41:16.176"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${MSG_DETAIL}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170708 15:41:16.186" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170708154114265719_UpdateBmc/20170708154114265719_InitiateCodeUpdateBMC/20170708154114265719_BMC_general.txt"&gt;/home/fspcibld/logs/20170708154114265719_UpdateBmc/20170708154114265719_InitiateCodeUpdateBMC/20170708154114265719_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170708 15:41:16.186" starttime="20170708 15:41:16.186"></status>
</kw>
<status status="PASS" endtime="20170708 15:41:16.186" starttime="20170708 15:41:16.185"></status>
</kw>
<status status="PASS" endtime="20170708 15:41:16.186" starttime="20170708 15:41:14.318"></status>
</kw>
<kw name="Call FFDC Methods" library="openbmc_ffdc_methods">
<doc>Call into FFDC Keyword index list.</doc>
<arguments>
<arg>ffdc_function_list=</arg>
</arguments>
<kw name="Get Ffdc Method Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg timestamp="20170708 15:41:16.192" level="INFO">@{entries} = [ BMC LOGS ]</msg>
<status status="PASS" endtime="20170708 15:41:16.192" starttime="20170708 15:41:16.192"></status>
</kw>
<kw type="for" name="${index} IN [ @{entries} ]">
<kw type="foritem" name="${index} = BMC LOGS">
<kw name="Method Call Keyword List" library="openbmc_ffdc_methods">
<doc>Iterate the list through keyword index.</doc>
<arguments>
<arg>${index}</arg>
<arg>${ffdc_function_list}</arg>
</arguments>
<kw name="Get Ffdc Method Call" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<assign>
<var>@{method_list}</var>
</assign>
<msg timestamp="20170708 15:41:16.193" level="INFO">@{method_list} = [ ('FFDC Generic Report', 'BMC FFDC Manifest') | ('Get Request FFDC', 'BMC FFDC Get Requests') | ('Core Files', 'SCP Coredump Files') | ('BMC Specific Files', 'BMC FFDC Files') | ('SEL Log', 'Collect ...</msg>
<status status="PASS" endtime="20170708 15:41:16.194" starttime="20170708 15:41:16.193"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${ffdc_function_list}' == '${EMPTY}'</arg>
<arg>Get FFDC Method Desc</arg>
<arg>${index}</arg>
<arg>ELSE</arg>
<arg>Split String</arg>
<arg>${ffdc_function_list}</arg>
<arg>separator=:</arg>
</arguments>
<assign>
<var>@{ffdc_function_list}</var>
</assign>
<kw name="Get Ffdc Method Desc" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<status status="PASS" endtime="20170708 15:41:16.195" starttime="20170708 15:41:16.195"></status>
</kw>
<msg timestamp="20170708 15:41:16.195" level="INFO">@{ffdc_function_list} = [ FFDC Generic Report | Get Request FFDC | Core Files | BMC Specific Files | SEL Log | OS FFDC ]</msg>
<status status="PASS" endtime="20170708 15:41:16.195" starttime="20170708 15:41:16.194"></status>
</kw>
<kw type="for" name="${method} IN [ @{method_list} ]">
<kw type="foritem" name="${method} = ('FFDC Generic Report', 'BMC FFDC Manifest')">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status status="PASS" endtime="20170708 15:41:16.198" starttime="20170708 15:41:16.198"></status>
</kw>
<msg timestamp="20170708 15:41:16.198" level="INFO">${status} = PASS</msg>
<msg timestamp="20170708 15:41:16.198" level="INFO">${ret_values} = None</msg>
<status status="PASS" endtime="20170708 15:41:16.198" starttime="20170708 15:41:16.197"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status status="PASS" endtime="20170708 15:41:16.199" starttime="20170708 15:41:16.199"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="BMC FFDC Manifest" library="openbmc_ffdc_methods">
<doc>Get the commands index for the FFDC_BMC_CMD,</doc>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg timestamp="20170708 15:41:16.215" level="FAIL">Dictionary does not contain key 'host'.</msg>
<status status="FAIL" endtime="20170708 15:41:16.215" starttime="20170708 15:41:16.215"></status>
</kw>
<msg timestamp="20170708 15:41:16.216" level="INFO">${has_host} = False</msg>
<status status="PASS" endtime="20170708 15:41:16.216" starttime="20170708 15:41:16.215"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status status="PASS" endtime="20170708 15:41:16.217" starttime="20170708 15:41:16.216"></status>
</kw>
<status status="PASS" endtime="20170708 15:41:16.217" starttime="20170708 15:41:16.216"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<status status="PASS" endtime="20170708 15:41:16.218" starttime="20170708 15:41:16.217"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg timestamp="20170708 15:41:16.219" level="FAIL">Dictionary does not contain key 'port'.</msg>
<status status="FAIL" endtime="20170708 15:41:16.219" starttime="20170708 15:41:16.218"></status>
</kw>
<msg timestamp="20170708 15:41:16.219" level="INFO">${has_port} = False</msg>
<status status="PASS" endtime="20170708 15:41:16.219" starttime="20170708 15:41:16.218"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status status="PASS" endtime="20170708 15:41:16.222" starttime="20170708 15:41:16.221"></status>
</kw>
<status status="PASS" endtime="20170708 15:41:16.222" starttime="20170708 15:41:16.221"></status>
</kw>
<status status="PASS" endtime="20170708 15:41:16.222" starttime="20170708 15:41:16.220"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg timestamp="20170708 15:41:16.223" level="INFO">Logging into '9.3.86.161:22' as 'root'.</msg>
<msg timestamp="20170708 15:41:17.899" level="INFO">Read output: root@witherspoon:~#</msg>
<status status="PASS" endtime="20170708 15:41:17.899" starttime="20170708 15:41:16.222"></status>
</kw>
<status status="PASS" endtime="20170708 15:41:17.899" starttime="20170708 15:41:16.214"></status>
</kw>
<kw name="Get Ffdc Cmd Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg timestamp="20170708 15:41:17.900" level="INFO">@{entries} = [ APPLICATION DATA | DRIVER INFO | BMC DATA ]</msg>
<status status="PASS" endtime="20170708 15:41:17.900" starttime="20170708 15:41:17.900"></status>
</kw>
<kw type="for" name="${index} IN [ @{entries} ]">
<kw type="foritem" name="${index} = APPLICATION DATA">
<kw name="Iterate BMC Command List Pairs" library="openbmc_ffdc_methods">
<doc>Feed in key pair list from dictionary to execute</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Bmc Cmd" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg timestamp="20170708 15:41:17.901" level="INFO">@{cmd_list} = [ ('BMC state', '/usr/sbin/obmcutil  state') ]</msg>
<status status="PASS" endtime="20170708 15:41:17.902" starttime="20170708 15:41:17.901"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${ENTRY_INDEX}</arg>
<arg>${key_index}</arg>
</arguments>
<msg timestamp="20170708 15:41:17.910" level="INFO">${ENTRY_INDEX} = APPLICATION DATA</msg>
<status status="PASS" endtime="20170708 15:41:17.910" starttime="20170708 15:41:17.902"></status>
</kw>
<kw type="for" name="${cmd} IN [ @{cmd_list} ]">
<kw type="foritem" name="${cmd} = ('BMC state', '/usr/sbin/obmcutil  state')">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170708 15:41:17.915" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170708154114265719_UpdateBmc/20170708154114265719_InitiateCodeUpdateBMC/20170708154114265719_BMC_general.txt"&gt;/home/fspcibld/logs/20170708154114265719_UpdateBmc/20170708154114265719_InitiateCodeUpdateBMC/20170708154114265719_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170708 15:41:17.915" starttime="20170708 15:41:17.914"></status>
</kw>
<status status="PASS" endtime="20170708 15:41:17.915" starttime="20170708 15:41:17.914"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170708 15:41:17.916" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170708154114265719_UpdateBmc/20170708154114265719_InitiateCodeUpdateBMC/20170708154114265719_BMC_general.txt"&gt;/home/fspcibld/logs/20170708154114265719_UpdateBmc/20170708154114265719_InitiateCodeUpdateBMC/20170708154114265719_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170708 15:41:17.917" starttime="20170708 15:41:17.916"></status>
</kw>
<status status="PASS" endtime="20170708 15:41:17.917" starttime="20170708 15:41:17.915"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170708 15:41:17.918" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170708154114265719_UpdateBmc/20170708154114265719_InitiateCodeUpdateBMC/20170708154114265719_BMC_general.txt"&gt;/home/fspcibld/logs/20170708154114265719_UpdateBmc/20170708154114265719_InitiateCodeUpdateBMC/20170708154114265719_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170708 15:41:17.918" starttime="20170708 15:41:17.917"></status>
</kw>
<status status="PASS" endtime="20170708 15:41:17.918" starttime="20170708 15:41:17.917"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170708 15:41:17.919" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170708154114265719_UpdateBmc/20170708154114265719_InitiateCodeUpdateBMC/20170708154114265719_BMC_general.txt"&gt;/home/fspcibld/logs/20170708154114265719_UpdateBmc/20170708154114265719_InitiateCodeUpdateBMC/20170708154114265719_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170708 15:41:17.919" starttime="20170708 15:41:17.919"></status>
</kw>
<status status="PASS" endtime="20170708 15:41:17.919" starttime="20170708 15:41:17.918"></status>
</kw>
<status status="PASS" endtime="20170708 15:41:17.919" starttime="20170708 15:41:17.913"></status>
</kw>
<status status="PASS" endtime="20170708 15:41:17.919" starttime="20170708 15:41:17.912"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170708 15:41:17.920" level="INFO">Executing command '/usr/sbin/obmcutil  state'.</msg>
<msg timestamp="20170708 15:41:19.356" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170708 15:41:19.357" level="INFO">${stdout} = CurrentBMCState:    xyz.openbmc_project.State.BMC.BMCState.Ready
CurrentPowerState:  xyz.openbmc_project.State.Chassis.PowerState.Off
CurrentHostState:   xyz.openbmc_project.State.Host.HostState.Off</msg>
<msg timestamp="20170708 15:41:19.357" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170708 15:41:19.357" starttime="20170708 15:41:17.920"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170708 15:41:19.364" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170708154114265719_UpdateBmc/20170708154114265719_InitiateCodeUpdateBMC/20170708154114265719_BMC_general.txt"&gt;/home/fspcibld/logs/20170708154114265719_UpdateBmc/20170708154114265719_InitiateCodeUpdateBMC/20170708154114265719_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170708 15:41:19.364" starttime="20170708 15:41:19.363"></status>
</kw>
<status status="PASS" endtime="20170708 15:41:19.364" starttime="20170708 15:41:19.362"></status>
</kw>
<status status="PASS" endtime="20170708 15:41:19.364" starttime="20170708 15:41:19.357"></status>
</kw>
<status status="PASS" endtime="20170708 15:41:19.364" starttime="20170708 15:41:17.911"></status>
</kw>
<status status="PASS" endtime="20170708 15:41:19.364" starttime="20170708 15:41:17.911"></status>
</kw>
<status status="PASS" endtime="20170708 15:41:19.364" starttime="20170708 15:41:17.910"></status>
</kw>
<status status="PASS" endtime="20170708 15:41:19.364" starttime="20170708 15:41:17.901"></status>
</kw>
<status status="PASS" endtime="20170708 15:41:19.364" starttime="20170708 15:41:17.900"></status>
</kw>
<kw type="foritem" name="${index} = DRIVER INFO">
<kw name="Iterate BMC Command List Pairs" library="openbmc_ffdc_methods">
<doc>Feed in key pair list from dictionary to execute</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Bmc Cmd" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg timestamp="20170708 15:41:19.365" level="INFO">@{cmd_list} = [ ('Build Info', 'cat /etc/version') | ('FW Level', 'cat /etc/os-release') ]</msg>
<status status="PASS" endtime="20170708 15:41:19.365" starttime="20170708 15:41:19.365"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${ENTRY_INDEX}</arg>
<arg>${key_index}</arg>
</arguments>
<msg timestamp="20170708 15:41:19.366" level="INFO">${ENTRY_INDEX} = DRIVER INFO</msg>
<status status="PASS" endtime="20170708 15:41:19.366" starttime="20170708 15:41:19.366"></status>
</kw>
<kw type="for" name="${cmd} IN [ @{cmd_list} ]">
<kw type="foritem" name="${cmd} = ('Build Info', 'cat /etc/version')">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170708 15:41:19.370" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170708154114265719_UpdateBmc/20170708154114265719_InitiateCodeUpdateBMC/20170708154114265719_BMC_general.txt"&gt;/home/fspcibld/logs/20170708154114265719_UpdateBmc/20170708154114265719_InitiateCodeUpdateBMC/20170708154114265719_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170708 15:41:19.370" starttime="20170708 15:41:19.370"></status>
</kw>
<status status="PASS" endtime="20170708 15:41:19.371" starttime="20170708 15:41:19.369"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170708 15:41:19.372" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170708154114265719_UpdateBmc/20170708154114265719_InitiateCodeUpdateBMC/20170708154114265719_BMC_general.txt"&gt;/home/fspcibld/logs/20170708154114265719_UpdateBmc/20170708154114265719_InitiateCodeUpdateBMC/20170708154114265719_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170708 15:41:19.372" starttime="20170708 15:41:19.371"></status>
</kw>
<status status="PASS" endtime="20170708 15:41:19.372" starttime="20170708 15:41:19.371"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170708 15:41:19.373" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170708154114265719_UpdateBmc/20170708154114265719_InitiateCodeUpdateBMC/20170708154114265719_BMC_general.txt"&gt;/home/fspcibld/logs/20170708154114265719_UpdateBmc/20170708154114265719_InitiateCodeUpdateBMC/20170708154114265719_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170708 15:41:19.373" starttime="20170708 15:41:19.373"></status>
</kw>
<status status="PASS" endtime="20170708 15:41:19.373" starttime="20170708 15:41:19.372"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170708 15:41:19.374" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170708154114265719_UpdateBmc/20170708154114265719_InitiateCodeUpdateBMC/20170708154114265719_BMC_general.txt"&gt;/home/fspcibld/logs/20170708154114265719_UpdateBmc/20170708154114265719_InitiateCodeUpdateBMC/20170708154114265719_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170708 15:41:19.375" starttime="20170708 15:41:19.374"></status>
</kw>
<status status="PASS" endtime="20170708 15:41:19.375" starttime="20170708 15:41:19.374"></status>
</kw>
<status status="PASS" endtime="20170708 15:41:19.375" starttime="20170708 15:41:19.368"></status>
</kw>
<status status="PASS" endtime="20170708 15:41:19.375" starttime="20170708 15:41:19.367"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170708 15:41:19.375" level="INFO">Executing command 'cat /etc/version'.</msg>
<msg timestamp="20170708 15:41:19.470" level="INFO">Command exited with return code 1.</msg>
<msg timestamp="20170708 15:41:19.470" level="INFO">${stdout} = </msg>
<msg timestamp="20170708 15:41:19.470" level="INFO">${stderr} = cat: can't open '/etc/version': No such file or directory</msg>
<status status="PASS" endtime="20170708 15:41:19.470" starttime="20170708 15:41:19.375"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170708 15:41:19.480" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170708154114265719_UpdateBmc/20170708154114265719_InitiateCodeUpdateBMC/20170708154114265719_BMC_general.txt"&gt;/home/fspcibld/logs/20170708154114265719_UpdateBmc/20170708154114265719_InitiateCodeUpdateBMC/20170708154114265719_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170708 15:41:19.480" starttime="20170708 15:41:19.480"></status>
</kw>
<status status="PASS" endtime="20170708 15:41:19.480" starttime="20170708 15:41:19.478"></status>
</kw>
<status status="PASS" endtime="20170708 15:41:19.480" starttime="20170708 15:41:19.471"></status>
</kw>
<status status="PASS" endtime="20170708 15:41:19.480" starttime="20170708 15:41:19.367"></status>
</kw>
<status status="PASS" endtime="20170708 15:41:19.481" starttime="20170708 15:41:19.366"></status>
</kw>
<kw type="foritem" name="${cmd} = ('FW Level', 'cat /etc/os-release')">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170708 15:41:19.484" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170708154114265719_UpdateBmc/20170708154114265719_InitiateCodeUpdateBMC/20170708154114265719_BMC_general.txt"&gt;/home/fspcibld/logs/20170708154114265719_UpdateBmc/20170708154114265719_InitiateCodeUpdateBMC/20170708154114265719_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170708 15:41:19.484" starttime="20170708 15:41:19.483"></status>
</kw>
<status status="PASS" endtime="20170708 15:41:19.484" starttime="20170708 15:41:19.483"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170708 15:41:19.485" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170708154114265719_UpdateBmc/20170708154114265719_InitiateCodeUpdateBMC/20170708154114265719_BMC_general.txt"&gt;/home/fspcibld/logs/20170708154114265719_UpdateBmc/20170708154114265719_InitiateCodeUpdateBMC/20170708154114265719_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170708 15:41:19.485" starttime="20170708 15:41:19.485"></status>
</kw>
<status status="PASS" endtime="20170708 15:41:19.485" starttime="20170708 15:41:19.484"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170708 15:41:19.486" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170708154114265719_UpdateBmc/20170708154114265719_InitiateCodeUpdateBMC/20170708154114265719_BMC_general.txt"&gt;/home/fspcibld/logs/20170708154114265719_UpdateBmc/20170708154114265719_InitiateCodeUpdateBMC/20170708154114265719_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170708 15:41:19.486" starttime="20170708 15:41:19.486"></status>
</kw>
<status status="PASS" endtime="20170708 15:41:19.487" starttime="20170708 15:41:19.485"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170708 15:41:19.488" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170708154114265719_UpdateBmc/20170708154114265719_InitiateCodeUpdateBMC/20170708154114265719_BMC_general.txt"&gt;/home/fspcibld/logs/20170708154114265719_UpdateBmc/20170708154114265719_InitiateCodeUpdateBMC/20170708154114265719_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170708 15:41:19.488" starttime="20170708 15:41:19.487"></status>
</kw>
<status status="PASS" endtime="20170708 15:41:19.488" starttime="20170708 15:41:19.487"></status>
</kw>
<status status="PASS" endtime="20170708 15:41:19.488" starttime="20170708 15:41:19.482"></status>
</kw>
<status status="PASS" endtime="20170708 15:41:19.488" starttime="20170708 15:41:19.482"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170708 15:41:19.489" level="INFO">Executing command 'cat /etc/os-release'.</msg>
<msg timestamp="20170708 15:41:19.630" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170708 15:41:19.630" level="INFO">${stdout} = ID="openbmc-phosphor"
NAME="Phosphor OpenBMC (Phosphor OpenBMC Project Reference Distro)"
VERSION="v1.99.7-108"
VERSION_ID="v1.99.7-108-gc34efb9"
PRETTY_NAME="Phosphor OpenBMC (Phosphor OpenBMC Projec...</msg>
<msg timestamp="20170708 15:41:19.630" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170708 15:41:19.630" starttime="20170708 15:41:19.489"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170708 15:41:19.637" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170708154114265719_UpdateBmc/20170708154114265719_InitiateCodeUpdateBMC/20170708154114265719_BMC_general.txt"&gt;/home/fspcibld/logs/20170708154114265719_UpdateBmc/20170708154114265719_InitiateCodeUpdateBMC/20170708154114265719_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170708 15:41:19.637" starttime="20170708 15:41:19.636"></status>
</kw>
<status status="PASS" endtime="20170708 15:41:19.637" starttime="20170708 15:41:19.636"></status>
</kw>
<status status="PASS" endtime="20170708 15:41:19.637" starttime="20170708 15:41:19.631"></status>
</kw>
<status status="PASS" endtime="20170708 15:41:19.637" starttime="20170708 15:41:19.481"></status>
</kw>
<status status="PASS" endtime="20170708 15:41:19.637" starttime="20170708 15:41:19.481"></status>
</kw>
<status status="PASS" endtime="20170708 15:41:19.637" starttime="20170708 15:41:19.366"></status>
</kw>
<status status="PASS" endtime="20170708 15:41:19.637" starttime="20170708 15:41:19.364"></status>
</kw>
<status status="PASS" endtime="20170708 15:41:19.637" starttime="20170708 15:41:19.364"></status>
</kw>
<kw type="foritem" name="${index} = BMC DATA">
<kw name="Iterate BMC Command List Pairs" library="openbmc_ffdc_methods">
<doc>Feed in key pair list from dictionary to execute</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Bmc Cmd" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg timestamp="20170708 15:41:19.639" level="INFO">@{cmd_list} = [ ('BMC Uptime', 'uptime') | ('BMC File System Disk Space Usage', 'df -hT') | ('BMC OS', 'uname -a') ]</msg>
<status status="PASS" endtime="20170708 15:41:19.639" starttime="20170708 15:41:19.638"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${ENTRY_INDEX}</arg>
<arg>${key_index}</arg>
</arguments>
<msg timestamp="20170708 15:41:19.639" level="INFO">${ENTRY_INDEX} = BMC DATA</msg>
<status status="PASS" endtime="20170708 15:41:19.639" starttime="20170708 15:41:19.639"></status>
</kw>
<kw type="for" name="${cmd} IN [ @{cmd_list} ]">
<kw type="foritem" name="${cmd} = ('BMC Uptime', 'uptime')">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170708 15:41:19.643" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170708154114265719_UpdateBmc/20170708154114265719_InitiateCodeUpdateBMC/20170708154114265719_BMC_general.txt"&gt;/home/fspcibld/logs/20170708154114265719_UpdateBmc/20170708154114265719_InitiateCodeUpdateBMC/20170708154114265719_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170708 15:41:19.643" starttime="20170708 15:41:19.642"></status>
</kw>
<status status="PASS" endtime="20170708 15:41:19.643" starttime="20170708 15:41:19.642"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170708 15:41:19.644" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170708154114265719_UpdateBmc/20170708154114265719_InitiateCodeUpdateBMC/20170708154114265719_BMC_general.txt"&gt;/home/fspcibld/logs/20170708154114265719_UpdateBmc/20170708154114265719_InitiateCodeUpdateBMC/20170708154114265719_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170708 15:41:19.644" starttime="20170708 15:41:19.644"></status>
</kw>
<status status="PASS" endtime="20170708 15:41:19.644" starttime="20170708 15:41:19.643"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170708 15:41:19.645" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170708154114265719_UpdateBmc/20170708154114265719_InitiateCodeUpdateBMC/20170708154114265719_BMC_general.txt"&gt;/home/fspcibld/logs/20170708154114265719_UpdateBmc/20170708154114265719_InitiateCodeUpdateBMC/20170708154114265719_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170708 15:41:19.646" starttime="20170708 15:41:19.645"></status>
</kw>
<status status="PASS" endtime="20170708 15:41:19.646" starttime="20170708 15:41:19.645"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170708 15:41:19.647" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170708154114265719_UpdateBmc/20170708154114265719_InitiateCodeUpdateBMC/20170708154114265719_BMC_general.txt"&gt;/home/fspcibld/logs/20170708154114265719_UpdateBmc/20170708154114265719_InitiateCodeUpdateBMC/20170708154114265719_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170708 15:41:19.647" starttime="20170708 15:41:19.646"></status>
</kw>
<status status="PASS" endtime="20170708 15:41:19.647" starttime="20170708 15:41:19.646"></status>
</kw>
<status status="PASS" endtime="20170708 15:41:19.647" starttime="20170708 15:41:19.641"></status>
</kw>
<status status="PASS" endtime="20170708 15:41:19.647" starttime="20170708 15:41:19.641"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170708 15:41:19.648" level="INFO">Executing command 'uptime'.</msg>
<msg timestamp="20170708 15:41:19.732" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170708 15:41:19.732" level="INFO">${stdout} =  15:41:32 up 2 min,  load average: 3.67, 1.74, 0.66</msg>
<msg timestamp="20170708 15:41:19.732" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170708 15:41:19.733" starttime="20170708 15:41:19.647"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170708 15:41:19.739" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170708154114265719_UpdateBmc/20170708154114265719_InitiateCodeUpdateBMC/20170708154114265719_BMC_general.txt"&gt;/home/fspcibld/logs/20170708154114265719_UpdateBmc/20170708154114265719_InitiateCodeUpdateBMC/20170708154114265719_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170708 15:41:19.739" starttime="20170708 15:41:19.738"></status>
</kw>
<status status="PASS" endtime="20170708 15:41:19.739" starttime="20170708 15:41:19.738"></status>
</kw>
<status status="PASS" endtime="20170708 15:41:19.739" starttime="20170708 15:41:19.733"></status>
</kw>
<status status="PASS" endtime="20170708 15:41:19.739" starttime="20170708 15:41:19.640"></status>
</kw>
<status status="PASS" endtime="20170708 15:41:19.739" starttime="20170708 15:41:19.640"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC File System Disk Space Usage', 'df -hT')">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170708 15:41:19.743" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170708154114265719_UpdateBmc/20170708154114265719_InitiateCodeUpdateBMC/20170708154114265719_BMC_general.txt"&gt;/home/fspcibld/logs/20170708154114265719_UpdateBmc/20170708154114265719_InitiateCodeUpdateBMC/20170708154114265719_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170708 15:41:19.743" starttime="20170708 15:41:19.742"></status>
</kw>
<status status="PASS" endtime="20170708 15:41:19.743" starttime="20170708 15:41:19.742"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170708 15:41:19.744" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170708154114265719_UpdateBmc/20170708154114265719_InitiateCodeUpdateBMC/20170708154114265719_BMC_general.txt"&gt;/home/fspcibld/logs/20170708154114265719_UpdateBmc/20170708154114265719_InitiateCodeUpdateBMC/20170708154114265719_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170708 15:41:19.744" starttime="20170708 15:41:19.744"></status>
</kw>
<status status="PASS" endtime="20170708 15:41:19.744" starttime="20170708 15:41:19.743"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170708 15:41:19.745" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170708154114265719_UpdateBmc/20170708154114265719_InitiateCodeUpdateBMC/20170708154114265719_BMC_general.txt"&gt;/home/fspcibld/logs/20170708154114265719_UpdateBmc/20170708154114265719_InitiateCodeUpdateBMC/20170708154114265719_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170708 15:41:19.745" starttime="20170708 15:41:19.745"></status>
</kw>
<status status="PASS" endtime="20170708 15:41:19.746" starttime="20170708 15:41:19.744"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170708 15:41:19.747" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170708154114265719_UpdateBmc/20170708154114265719_InitiateCodeUpdateBMC/20170708154114265719_BMC_general.txt"&gt;/home/fspcibld/logs/20170708154114265719_UpdateBmc/20170708154114265719_InitiateCodeUpdateBMC/20170708154114265719_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170708 15:41:19.747" starttime="20170708 15:41:19.746"></status>
</kw>
<status status="PASS" endtime="20170708 15:41:19.747" starttime="20170708 15:41:19.746"></status>
</kw>
<status status="PASS" endtime="20170708 15:41:19.747" starttime="20170708 15:41:19.741"></status>
</kw>
<status status="PASS" endtime="20170708 15:41:19.747" starttime="20170708 15:41:19.740"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170708 15:41:19.748" level="INFO">Executing command 'df -hT'.</msg>
<msg timestamp="20170708 15:41:19.826" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170708 15:41:19.826" level="INFO">${stdout} = Filesystem           Type            Size      Used Available Use% Mounted on
dev                  devtmpfs      210.2M         0    210.2M   0% /dev
tmpfs                tmpfs         211.1M     37.4...</msg>
<msg timestamp="20170708 15:41:19.826" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170708 15:41:19.826" starttime="20170708 15:41:19.747"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170708 15:41:19.836" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170708154114265719_UpdateBmc/20170708154114265719_InitiateCodeUpdateBMC/20170708154114265719_BMC_general.txt"&gt;/home/fspcibld/logs/20170708154114265719_UpdateBmc/20170708154114265719_InitiateCodeUpdateBMC/20170708154114265719_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170708 15:41:19.836" starttime="20170708 15:41:19.835"></status>
</kw>
<status status="PASS" endtime="20170708 15:41:19.836" starttime="20170708 15:41:19.834"></status>
</kw>
<status status="PASS" endtime="20170708 15:41:19.836" starttime="20170708 15:41:19.827"></status>
</kw>
<status status="PASS" endtime="20170708 15:41:19.836" starttime="20170708 15:41:19.740"></status>
</kw>
<status status="PASS" endtime="20170708 15:41:19.836" starttime="20170708 15:41:19.739"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC OS', 'uname -a')">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170708 15:41:19.839" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170708154114265719_UpdateBmc/20170708154114265719_InitiateCodeUpdateBMC/20170708154114265719_BMC_general.txt"&gt;/home/fspcibld/logs/20170708154114265719_UpdateBmc/20170708154114265719_InitiateCodeUpdateBMC/20170708154114265719_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170708 15:41:19.839" starttime="20170708 15:41:19.839"></status>
</kw>
<status status="PASS" endtime="20170708 15:41:19.839" starttime="20170708 15:41:19.838"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170708 15:41:19.841" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170708154114265719_UpdateBmc/20170708154114265719_InitiateCodeUpdateBMC/20170708154114265719_BMC_general.txt"&gt;/home/fspcibld/logs/20170708154114265719_UpdateBmc/20170708154114265719_InitiateCodeUpdateBMC/20170708154114265719_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170708 15:41:19.841" starttime="20170708 15:41:19.840"></status>
</kw>
<status status="PASS" endtime="20170708 15:41:19.841" starttime="20170708 15:41:19.839"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170708 15:41:19.842" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170708154114265719_UpdateBmc/20170708154114265719_InitiateCodeUpdateBMC/20170708154114265719_BMC_general.txt"&gt;/home/fspcibld/logs/20170708154114265719_UpdateBmc/20170708154114265719_InitiateCodeUpdateBMC/20170708154114265719_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170708 15:41:19.842" starttime="20170708 15:41:19.841"></status>
</kw>
<status status="PASS" endtime="20170708 15:41:19.842" starttime="20170708 15:41:19.841"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170708 15:41:19.843" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170708154114265719_UpdateBmc/20170708154114265719_InitiateCodeUpdateBMC/20170708154114265719_BMC_general.txt"&gt;/home/fspcibld/logs/20170708154114265719_UpdateBmc/20170708154114265719_InitiateCodeUpdateBMC/20170708154114265719_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170708 15:41:19.843" starttime="20170708 15:41:19.843"></status>
</kw>
<status status="PASS" endtime="20170708 15:41:19.843" starttime="20170708 15:41:19.842"></status>
</kw>
<status status="PASS" endtime="20170708 15:41:19.844" starttime="20170708 15:41:19.838"></status>
</kw>
<status status="PASS" endtime="20170708 15:41:19.844" starttime="20170708 15:41:19.837"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170708 15:41:19.844" level="INFO">Executing command 'uname -a'.</msg>
<msg timestamp="20170708 15:41:19.919" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170708 15:41:19.919" level="INFO">${stdout} = Linux witherspoon 4.10.17-7858cdff46b6d8aa4a4f88884a0623ff50fb78c9 #1 Sat Jul 8 06:02:17 UTC 2017 armv6l GNU/Linux</msg>
<msg timestamp="20170708 15:41:19.919" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170708 15:41:19.919" starttime="20170708 15:41:19.844"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170708 15:41:19.929" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170708154114265719_UpdateBmc/20170708154114265719_InitiateCodeUpdateBMC/20170708154114265719_BMC_general.txt"&gt;/home/fspcibld/logs/20170708154114265719_UpdateBmc/20170708154114265719_InitiateCodeUpdateBMC/20170708154114265719_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170708 15:41:19.929" starttime="20170708 15:41:19.928"></status>
</kw>
<status status="PASS" endtime="20170708 15:41:19.929" starttime="20170708 15:41:19.927"></status>
</kw>
<status status="PASS" endtime="20170708 15:41:19.929" starttime="20170708 15:41:19.920"></status>
</kw>
<status status="PASS" endtime="20170708 15:41:19.929" starttime="20170708 15:41:19.836"></status>
</kw>
<status status="PASS" endtime="20170708 15:41:19.929" starttime="20170708 15:41:19.836"></status>
</kw>
<status status="PASS" endtime="20170708 15:41:19.929" starttime="20170708 15:41:19.639"></status>
</kw>
<status status="PASS" endtime="20170708 15:41:19.930" starttime="20170708 15:41:19.638"></status>
</kw>
<status status="PASS" endtime="20170708 15:41:19.930" starttime="20170708 15:41:19.637"></status>
</kw>
<status status="PASS" endtime="20170708 15:41:19.930" starttime="20170708 15:41:17.900"></status>
</kw>
<status status="PASS" endtime="20170708 15:41:19.930" starttime="20170708 15:41:16.213"></status>
</kw>
<status status="PASS" endtime="20170708 15:41:19.930" starttime="20170708 15:41:16.200"></status>
</kw>
<status status="PASS" endtime="20170708 15:41:19.930" starttime="20170708 15:41:16.196"></status>
</kw>
<status status="PASS" endtime="20170708 15:41:19.930" starttime="20170708 15:41:16.195"></status>
</kw>
<kw type="foritem" name="${method} = ('Get Request FFDC', 'BMC FFDC Get Requests')">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status status="PASS" endtime="20170708 15:41:19.932" starttime="20170708 15:41:19.932"></status>
</kw>
<msg timestamp="20170708 15:41:19.932" level="INFO">${status} = PASS</msg>
<msg timestamp="20170708 15:41:19.932" level="INFO">${ret_values} = None</msg>
<status status="PASS" endtime="20170708 15:41:19.932" starttime="20170708 15:41:19.931"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status status="PASS" endtime="20170708 15:41:19.933" starttime="20170708 15:41:19.932"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="BMC FFDC Get Requests" library="openbmc_ffdc_methods">
<doc>Get the command list and iterate</doc>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg timestamp="20170708 15:41:19.949" level="FAIL">Dictionary does not contain key 'host'.</msg>
<status status="FAIL" endtime="20170708 15:41:19.949" starttime="20170708 15:41:19.948"></status>
</kw>
<msg timestamp="20170708 15:41:19.949" level="INFO">${has_host} = False</msg>
<status status="PASS" endtime="20170708 15:41:19.949" starttime="20170708 15:41:19.948"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status status="PASS" endtime="20170708 15:41:19.950" starttime="20170708 15:41:19.950"></status>
</kw>
<status status="PASS" endtime="20170708 15:41:19.950" starttime="20170708 15:41:19.949"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<status status="PASS" endtime="20170708 15:41:19.951" starttime="20170708 15:41:19.951"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg timestamp="20170708 15:41:19.952" level="FAIL">Dictionary does not contain key 'port'.</msg>
<status status="FAIL" endtime="20170708 15:41:19.952" starttime="20170708 15:41:19.952"></status>
</kw>
<msg timestamp="20170708 15:41:19.952" level="INFO">${has_port} = False</msg>
<status status="PASS" endtime="20170708 15:41:19.952" starttime="20170708 15:41:19.951"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status status="PASS" endtime="20170708 15:41:19.954" starttime="20170708 15:41:19.954"></status>
</kw>
<status status="PASS" endtime="20170708 15:41:19.954" starttime="20170708 15:41:19.953"></status>
</kw>
<status status="PASS" endtime="20170708 15:41:19.954" starttime="20170708 15:41:19.953"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg timestamp="20170708 15:41:19.955" level="INFO">Logging into '9.3.86.161:22' as 'root'.</msg>
<msg timestamp="20170708 15:41:21.600" level="INFO">Read output: root@witherspoon:~#</msg>
<status status="PASS" endtime="20170708 15:41:21.600" starttime="20170708 15:41:19.954"></status>
</kw>
<status status="PASS" endtime="20170708 15:41:21.600" starttime="20170708 15:41:19.947"></status>
</kw>
<kw name="Get Ffdc Get Request Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg timestamp="20170708 15:41:21.601" level="INFO">@{entries} = [ GET REQUESTS ]</msg>
<status status="PASS" endtime="20170708 15:41:21.601" starttime="20170708 15:41:21.601"></status>
</kw>
<kw type="for" name="${index} IN [ @{entries} ]">
<kw type="foritem" name="${index} = GET REQUESTS">
<kw name="Log FFDC Get Requests" library="openbmc_ffdc_methods">
<doc>Create file in current FFDC log directory.</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Get Request" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg timestamp="20170708 15:41:21.603" level="INFO">@{cmd_list} = [ ('BMC_elog', '/xyz/openbmc_project/logging/entry/enumerate') | ('BMC_sensor_list', '/org/openbmc/sensors/enumerate') | ('BMC_inventory', '/xyz/openbmc_project/inventory/enumerate') | ('BMC_led', '/o...</msg>
<status status="PASS" endtime="20170708 15:41:21.603" starttime="20170708 15:41:21.602"></status>
</kw>
<kw type="for" name="${cmd} IN [ @{cmd_list} ]">
<kw type="foritem" name="${cmd} = ('BMC_elog', '/xyz/openbmc_project/logging/entry/enumerate')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170708 15:41:21.604" level="INFO">${logpath} = /home/fspcibld/logs/20170708154114265719_UpdateBmc/20170708154114265719_InitiateCodeUpdateBMC/20170708154114265719_BMC_elog.txt</msg>
<status status="PASS" endtime="20170708 15:41:21.604" starttime="20170708 15:41:21.603"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170708 15:41:21.607" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170708 15:41:21.607" starttime="20170708 15:41:21.606"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170708 15:41:21.608" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170708 15:41:21.608" starttime="20170708 15:41:21.607"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170708 15:41:21.608" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170708 15:41:21.608" starttime="20170708 15:41:21.608"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170708 15:41:21.609" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170708 15:41:21.609" starttime="20170708 15:41:21.609"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170708 15:41:21.825" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170708 15:41:21.825" starttime="20170708 15:41:21.610"></status>
</kw>
<msg timestamp="20170708 15:41:21.825" level="INFO">${status} = PASS</msg>
<msg timestamp="20170708 15:41:21.825" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170708 15:41:21.825" starttime="20170708 15:41:21.609"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170708 15:41:21.826" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170708 15:41:21.826" starttime="20170708 15:41:21.826"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170708 15:41:21.827" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170708 15:41:21.827" starttime="20170708 15:41:21.826"></status>
</kw>
<status status="PASS" endtime="20170708 15:41:21.827" starttime="20170708 15:41:21.606"></status>
</kw>
<status status="PASS" endtime="20170708 15:41:21.827" starttime="20170708 15:41:21.605"></status>
</kw>
<status status="PASS" endtime="20170708 15:41:21.827" starttime="20170708 15:41:21.605"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170708 15:41:21.828" level="INFO">${base_uri} = /xyz/openbmc_project/logging/entry/enumerate</msg>
<status status="PASS" endtime="20170708 15:41:21.828" starttime="20170708 15:41:21.828"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170708 15:41:21.829" starttime="20170708 15:41:21.828"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170708 15:41:21.898" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry/enumerate, headers=None json=None</msg>
<msg timestamp="20170708 15:41:21.898" level="INFO">${ret} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20170708 15:41:21.899" starttime="20170708 15:41:21.829"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170708 15:41:21.899" starttime="20170708 15:41:21.899"></status>
</kw>
<msg timestamp="20170708 15:41:21.900" level="INFO">${resp} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20170708 15:41:21.900" starttime="20170708 15:41:21.604"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170708 15:41:21.901" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20170708 15:41:21.901" level="FAIL">404 != 200</msg>
<status status="FAIL" endtime="20170708 15:41:21.901" starttime="20170708 15:41:21.900"></status>
</kw>
<msg timestamp="20170708 15:41:21.901" level="INFO">${status} = False</msg>
<status status="PASS" endtime="20170708 15:41:21.901" starttime="20170708 15:41:21.900"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<kw name="Continue For Loop" library="BuiltIn">
<doc>Skips the current for loop iteration and continues from the next.</doc>
<msg timestamp="20170708 15:41:21.902" level="INFO">Continuing for loop from the next iteration.</msg>
<status status="PASS" endtime="20170708 15:41:21.902" starttime="20170708 15:41:21.902"></status>
</kw>
<status status="PASS" endtime="20170708 15:41:21.902" starttime="20170708 15:41:21.901"></status>
</kw>
<status status="PASS" endtime="20170708 15:41:21.902" starttime="20170708 15:41:21.603"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_sensor_list', '/org/openbmc/sensors/enumerate')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170708 15:41:21.903" level="INFO">${logpath} = /home/fspcibld/logs/20170708154114265719_UpdateBmc/20170708154114265719_InitiateCodeUpdateBMC/20170708154114265719_BMC_sensor_list.txt</msg>
<status status="PASS" endtime="20170708 15:41:21.903" starttime="20170708 15:41:21.903"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170708 15:41:21.907" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170708 15:41:21.907" starttime="20170708 15:41:21.906"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170708 15:41:21.908" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170708 15:41:21.908" starttime="20170708 15:41:21.907"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170708 15:41:21.908" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170708 15:41:21.908" starttime="20170708 15:41:21.908"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170708 15:41:21.909" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170708 15:41:21.909" starttime="20170708 15:41:21.909"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170708 15:41:22.209" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170708 15:41:22.209" starttime="20170708 15:41:21.910"></status>
</kw>
<msg timestamp="20170708 15:41:22.210" level="INFO">${status} = PASS</msg>
<msg timestamp="20170708 15:41:22.210" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170708 15:41:22.210" starttime="20170708 15:41:21.909"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170708 15:41:22.210" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170708 15:41:22.210" starttime="20170708 15:41:22.210"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170708 15:41:22.211" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170708 15:41:22.211" starttime="20170708 15:41:22.211"></status>
</kw>
<status status="PASS" endtime="20170708 15:41:22.211" starttime="20170708 15:41:21.906"></status>
</kw>
<status status="PASS" endtime="20170708 15:41:22.211" starttime="20170708 15:41:21.905"></status>
</kw>
<status status="PASS" endtime="20170708 15:41:22.211" starttime="20170708 15:41:21.905"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170708 15:41:22.212" level="INFO">${base_uri} = /org/openbmc/sensors/enumerate</msg>
<status status="PASS" endtime="20170708 15:41:22.212" starttime="20170708 15:41:22.212"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170708 15:41:22.213" starttime="20170708 15:41:22.212"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170708 15:41:22.432" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/enumerate, headers=None json=None</msg>
<msg timestamp="20170708 15:41:22.432" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170708 15:41:22.432" starttime="20170708 15:41:22.213"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170708 15:41:22.434" starttime="20170708 15:41:22.433"></status>
</kw>
<msg timestamp="20170708 15:41:22.434" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170708 15:41:22.434" starttime="20170708 15:41:21.903"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170708 15:41:22.435" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170708 15:41:22.436" starttime="20170708 15:41:22.435"></status>
</kw>
<msg timestamp="20170708 15:41:22.436" level="INFO">${status} = True</msg>
<status status="PASS" endtime="20170708 15:41:22.436" starttime="20170708 15:41:22.434"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status status="PASS" endtime="20170708 15:41:22.437" starttime="20170708 15:41:22.436"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg timestamp="20170708 15:41:22.438" level="INFO">To JSON using : content={
  "data": {
    "/org/openbmc/sensors/host/BootCount": {
      "error": 0, 
      "units": "", 
      "value": 3
    }, 
    "/org/openbmc/sensors/host/BootProgress": {
      "error": 0, 
      "units": "", 
      "value": "Off"
    }, 
    "/org/openbmc/sensors/host/OperatingSystemStatus": {
      "error": 0, 
      "units": "", 
      "value": "Off"
    }, 
    "/org/openbmc/sensors/host/PowerSupplyDerating": {
      "error": 0, 
      "units": "", 
      "value": 10
    }, 
    "/org/openbmc/sensors/host/PowerSupplyRedundancy": {
      "error": 0, 
      "units": "", 
      "value": "Disabled"
    }, 
    "/org/openbmc/sensors/host/TurboAllowed": {
      "error": 0, 
      "units": "", 
      "value": 0
    }, 
    "/org/openbmc/sensors/host/cpu0/OccStatus": {
      "error": 0, 
      "units": "", 
      "value": "Disabled"
    }, 
    "/org/openbmc/sensors/host/cpu1/OccStatus": {
      "error": 0, 
      "units": "", 
      "value": "Disabled"
    }, 
    "/org/openbmc/sensors/host/powercap": {
      "error": 0, 
      "units": "", 
      "value": 0
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170708 15:41:22.438" level="INFO">To JSON using : pretty_print=True </msg>
<msg timestamp="20170708 15:41:22.438" level="INFO">${jsondata} = {
    "data": {
        "/org/openbmc/sensors/host/BootCount": {
            "error": 0,
            "units": "",
            "value": 3
        },
        "/org/openbmc/sensors/host/BootProgress": {
...</msg>
<status status="PASS" endtime="20170708 15:41:22.438" starttime="20170708 15:41:22.437"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170708 15:41:22.440" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170708154114265719_UpdateBmc/20170708154114265719_InitiateCodeUpdateBMC/20170708154114265719_BMC_sensor_list.txt"&gt;/home/fspcibld/logs/20170708154114265719_UpdateBmc/20170708154114265719_InitiateCodeUpdateBMC/20170708154114265719_BMC_sensor_list.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170708 15:41:22.441" starttime="20170708 15:41:22.440"></status>
</kw>
<status status="PASS" endtime="20170708 15:41:22.441" starttime="20170708 15:41:22.439"></status>
</kw>
<status status="PASS" endtime="20170708 15:41:22.441" starttime="20170708 15:41:21.902"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_inventory', '/xyz/openbmc_project/inventory/enumerate')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170708 15:41:22.441" level="INFO">${logpath} = /home/fspcibld/logs/20170708154114265719_UpdateBmc/20170708154114265719_InitiateCodeUpdateBMC/20170708154114265719_BMC_inventory.txt</msg>
<status status="PASS" endtime="20170708 15:41:22.442" starttime="20170708 15:41:22.441"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170708 15:41:22.444" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170708 15:41:22.445" starttime="20170708 15:41:22.444"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170708 15:41:22.445" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170708 15:41:22.445" starttime="20170708 15:41:22.445"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170708 15:41:22.446" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170708 15:41:22.446" starttime="20170708 15:41:22.446"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170708 15:41:22.447" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170708 15:41:22.447" starttime="20170708 15:41:22.446"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170708 15:41:22.623" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170708 15:41:22.624" starttime="20170708 15:41:22.447"></status>
</kw>
<msg timestamp="20170708 15:41:22.624" level="INFO">${status} = PASS</msg>
<msg timestamp="20170708 15:41:22.624" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170708 15:41:22.624" starttime="20170708 15:41:22.447"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170708 15:41:22.625" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170708 15:41:22.625" starttime="20170708 15:41:22.624"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170708 15:41:22.625" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170708 15:41:22.625" starttime="20170708 15:41:22.625"></status>
</kw>
<status status="PASS" endtime="20170708 15:41:22.626" starttime="20170708 15:41:22.443"></status>
</kw>
<status status="PASS" endtime="20170708 15:41:22.626" starttime="20170708 15:41:22.443"></status>
</kw>
<status status="PASS" endtime="20170708 15:41:22.626" starttime="20170708 15:41:22.442"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170708 15:41:22.626" level="INFO">${base_uri} = /xyz/openbmc_project/inventory/enumerate</msg>
<status status="PASS" endtime="20170708 15:41:22.626" starttime="20170708 15:41:22.626"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170708 15:41:22.627" starttime="20170708 15:41:22.627"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170708 15:41:22.808" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/inventory/enumerate, headers=None json=None</msg>
<msg timestamp="20170708 15:41:22.809" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170708 15:41:22.809" starttime="20170708 15:41:22.627"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170708 15:41:22.809" starttime="20170708 15:41:22.809"></status>
</kw>
<msg timestamp="20170708 15:41:22.810" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170708 15:41:22.810" starttime="20170708 15:41:22.442"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170708 15:41:22.811" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170708 15:41:22.811" starttime="20170708 15:41:22.810"></status>
</kw>
<msg timestamp="20170708 15:41:22.811" level="INFO">${status} = True</msg>
<status status="PASS" endtime="20170708 15:41:22.811" starttime="20170708 15:41:22.810"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status status="PASS" endtime="20170708 15:41:22.812" starttime="20170708 15:41:22.811"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg timestamp="20170708 15:41:22.812" level="INFO">To JSON using : content={
  "data": {
    "/xyz/openbmc_project/inventory/system/chassis": {
      "AirCooled": 1, 
      "WaterCooled": 1
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc": {
      "BuildDate": "", 
      "FieldReplaceable": 0, 
      "Manufacturer": "IBM", 
      "Model": "", 
      "PartNumber": "01DH051", 
      "Present": 1, 
      "PrettyName": "BMC PLANAR  ", 
      "SerialNumber": "000000000000"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc/ethernet": {
      "FieldReplaceable": 0, 
      "MACAddress": "00:00:00:00:00:00", 
      "Present": 1, 
      "PrettyName": ""
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170708 15:41:22.812" level="INFO">To JSON using : pretty_print=True </msg>
<msg timestamp="20170708 15:41:22.813" level="INFO">${jsondata} = {
    "data": {
        "/xyz/openbmc_project/inventory/system/chassis": {
            "AirCooled": 1,
            "WaterCooled": 1
        },
        "/xyz/openbmc_project/inventory/system/chassis/mo...</msg>
<status status="PASS" endtime="20170708 15:41:22.813" starttime="20170708 15:41:22.812"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170708 15:41:22.814" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170708154114265719_UpdateBmc/20170708154114265719_InitiateCodeUpdateBMC/20170708154114265719_BMC_inventory.txt"&gt;/home/fspcibld/logs/20170708154114265719_UpdateBmc/20170708154114265719_InitiateCodeUpdateBMC/20170708154114265719_BMC_inventory.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170708 15:41:22.814" starttime="20170708 15:41:22.814"></status>
</kw>
<status status="PASS" endtime="20170708 15:41:22.814" starttime="20170708 15:41:22.813"></status>
</kw>
<status status="PASS" endtime="20170708 15:41:22.814" starttime="20170708 15:41:22.441"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_led', '/org/openbmc/records/events/enumerate')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170708 15:41:22.815" level="INFO">${logpath} = /home/fspcibld/logs/20170708154114265719_UpdateBmc/20170708154114265719_InitiateCodeUpdateBMC/20170708154114265719_BMC_led.txt</msg>
<status status="PASS" endtime="20170708 15:41:22.815" starttime="20170708 15:41:22.815"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170708 15:41:22.818" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170708 15:41:22.819" starttime="20170708 15:41:22.818"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170708 15:41:22.819" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170708 15:41:22.819" starttime="20170708 15:41:22.819"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170708 15:41:22.820" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170708 15:41:22.820" starttime="20170708 15:41:22.820"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170708 15:41:22.821" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170708 15:41:22.821" starttime="20170708 15:41:22.820"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170708 15:41:23.026" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170708 15:41:23.026" starttime="20170708 15:41:22.822"></status>
</kw>
<msg timestamp="20170708 15:41:23.026" level="INFO">${status} = PASS</msg>
<msg timestamp="20170708 15:41:23.026" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170708 15:41:23.026" starttime="20170708 15:41:22.821"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170708 15:41:23.027" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170708 15:41:23.027" starttime="20170708 15:41:23.026"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170708 15:41:23.027" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170708 15:41:23.028" starttime="20170708 15:41:23.027"></status>
</kw>
<status status="PASS" endtime="20170708 15:41:23.028" starttime="20170708 15:41:22.817"></status>
</kw>
<status status="PASS" endtime="20170708 15:41:23.028" starttime="20170708 15:41:22.817"></status>
</kw>
<status status="PASS" endtime="20170708 15:41:23.028" starttime="20170708 15:41:22.816"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170708 15:41:23.029" level="INFO">${base_uri} = /org/openbmc/records/events/enumerate</msg>
<status status="PASS" endtime="20170708 15:41:23.029" starttime="20170708 15:41:23.028"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170708 15:41:23.029" starttime="20170708 15:41:23.029"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170708 15:41:23.071" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/records/events/enumerate, headers=None json=None</msg>
<msg timestamp="20170708 15:41:23.071" level="INFO">${ret} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20170708 15:41:23.071" starttime="20170708 15:41:23.030"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170708 15:41:23.072" starttime="20170708 15:41:23.072"></status>
</kw>
<msg timestamp="20170708 15:41:23.072" level="INFO">${resp} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20170708 15:41:23.072" starttime="20170708 15:41:22.815"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170708 15:41:23.073" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20170708 15:41:23.074" level="FAIL">404 != 200</msg>
<status status="FAIL" endtime="20170708 15:41:23.074" starttime="20170708 15:41:23.073"></status>
</kw>
<msg timestamp="20170708 15:41:23.074" level="INFO">${status} = False</msg>
<status status="PASS" endtime="20170708 15:41:23.074" starttime="20170708 15:41:23.073"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<kw name="Continue For Loop" library="BuiltIn">
<doc>Skips the current for loop iteration and continues from the next.</doc>
<msg timestamp="20170708 15:41:23.075" level="INFO">Continuing for loop from the next iteration.</msg>
<status status="PASS" endtime="20170708 15:41:23.075" starttime="20170708 15:41:23.075"></status>
</kw>
<status status="PASS" endtime="20170708 15:41:23.075" starttime="20170708 15:41:23.074"></status>
</kw>
<status status="PASS" endtime="20170708 15:41:23.075" starttime="20170708 15:41:22.814"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_record_log', '/org/openbmc/control/led/enumerate')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170708 15:41:23.076" level="INFO">${logpath} = /home/fspcibld/logs/20170708154114265719_UpdateBmc/20170708154114265719_InitiateCodeUpdateBMC/20170708154114265719_BMC_record_log.txt</msg>
<status status="PASS" endtime="20170708 15:41:23.076" starttime="20170708 15:41:23.075"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170708 15:41:23.079" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170708 15:41:23.079" starttime="20170708 15:41:23.078"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170708 15:41:23.080" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170708 15:41:23.080" starttime="20170708 15:41:23.079"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170708 15:41:23.080" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170708 15:41:23.080" starttime="20170708 15:41:23.080"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170708 15:41:23.081" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170708 15:41:23.081" starttime="20170708 15:41:23.081"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170708 15:41:23.354" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170708 15:41:23.354" starttime="20170708 15:41:23.082"></status>
</kw>
<msg timestamp="20170708 15:41:23.355" level="INFO">${status} = PASS</msg>
<msg timestamp="20170708 15:41:23.355" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170708 15:41:23.355" starttime="20170708 15:41:23.081"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170708 15:41:23.355" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170708 15:41:23.355" starttime="20170708 15:41:23.355"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170708 15:41:23.356" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170708 15:41:23.356" starttime="20170708 15:41:23.356"></status>
</kw>
<status status="PASS" endtime="20170708 15:41:23.356" starttime="20170708 15:41:23.078"></status>
</kw>
<status status="PASS" endtime="20170708 15:41:23.356" starttime="20170708 15:41:23.077"></status>
</kw>
<status status="PASS" endtime="20170708 15:41:23.356" starttime="20170708 15:41:23.077"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170708 15:41:23.357" level="INFO">${base_uri} = /org/openbmc/control/led/enumerate</msg>
<status status="PASS" endtime="20170708 15:41:23.357" starttime="20170708 15:41:23.357"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170708 15:41:23.358" starttime="20170708 15:41:23.357"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170708 15:41:23.400" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/control/led/enumerate, headers=None json=None</msg>
<msg timestamp="20170708 15:41:23.400" level="INFO">${ret} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20170708 15:41:23.400" starttime="20170708 15:41:23.358"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170708 15:41:23.401" starttime="20170708 15:41:23.400"></status>
</kw>
<msg timestamp="20170708 15:41:23.401" level="INFO">${resp} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20170708 15:41:23.401" starttime="20170708 15:41:23.076"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170708 15:41:23.402" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20170708 15:41:23.402" level="FAIL">404 != 200</msg>
<status status="FAIL" endtime="20170708 15:41:23.402" starttime="20170708 15:41:23.402"></status>
</kw>
<msg timestamp="20170708 15:41:23.402" level="INFO">${status} = False</msg>
<status status="PASS" endtime="20170708 15:41:23.402" starttime="20170708 15:41:23.401"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<kw name="Continue For Loop" library="BuiltIn">
<doc>Skips the current for loop iteration and continues from the next.</doc>
<msg timestamp="20170708 15:41:23.403" level="INFO">Continuing for loop from the next iteration.</msg>
<status status="PASS" endtime="20170708 15:41:23.404" starttime="20170708 15:41:23.403"></status>
</kw>
<status status="PASS" endtime="20170708 15:41:23.404" starttime="20170708 15:41:23.403"></status>
</kw>
<status status="PASS" endtime="20170708 15:41:23.404" starttime="20170708 15:41:23.075"></status>
</kw>
<status status="PASS" endtime="20170708 15:41:23.404" starttime="20170708 15:41:21.603"></status>
</kw>
<status status="PASS" endtime="20170708 15:41:23.404" starttime="20170708 15:41:21.602"></status>
</kw>
<status status="PASS" endtime="20170708 15:41:23.404" starttime="20170708 15:41:21.601"></status>
</kw>
<status status="PASS" endtime="20170708 15:41:23.404" starttime="20170708 15:41:21.601"></status>
</kw>
<status status="PASS" endtime="20170708 15:41:23.404" starttime="20170708 15:41:19.946"></status>
</kw>
<status status="PASS" endtime="20170708 15:41:23.404" starttime="20170708 15:41:19.933"></status>
</kw>
<status status="PASS" endtime="20170708 15:41:23.404" starttime="20170708 15:41:19.930"></status>
</kw>
<status status="PASS" endtime="20170708 15:41:23.404" starttime="20170708 15:41:19.930"></status>
</kw>
<kw type="foritem" name="${method} = ('Core Files', 'SCP Coredump Files')">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status status="PASS" endtime="20170708 15:41:23.406" starttime="20170708 15:41:23.406"></status>
</kw>
<msg timestamp="20170708 15:41:23.406" level="INFO">${status} = PASS</msg>
<msg timestamp="20170708 15:41:23.406" level="INFO">${ret_values} = None</msg>
<status status="PASS" endtime="20170708 15:41:23.406" starttime="20170708 15:41:23.405"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status status="PASS" endtime="20170708 15:41:23.407" starttime="20170708 15:41:23.407"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="SCP Coredump Files" library="openbmc_ffdc_methods">
<doc>Copy core dump file from BMC to local system.</doc>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg timestamp="20170708 15:41:23.423" level="FAIL">Dictionary does not contain key 'host'.</msg>
<status status="FAIL" endtime="20170708 15:41:23.423" starttime="20170708 15:41:23.423"></status>
</kw>
<msg timestamp="20170708 15:41:23.423" level="INFO">${has_host} = False</msg>
<status status="PASS" endtime="20170708 15:41:23.423" starttime="20170708 15:41:23.422"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status status="PASS" endtime="20170708 15:41:23.425" starttime="20170708 15:41:23.424"></status>
</kw>
<status status="PASS" endtime="20170708 15:41:23.425" starttime="20170708 15:41:23.424"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<status status="PASS" endtime="20170708 15:41:23.426" starttime="20170708 15:41:23.425"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg timestamp="20170708 15:41:23.428" level="FAIL">Dictionary does not contain key 'port'.</msg>
<status status="FAIL" endtime="20170708 15:41:23.428" starttime="20170708 15:41:23.427"></status>
</kw>
<msg timestamp="20170708 15:41:23.428" level="INFO">${has_port} = False</msg>
<status status="PASS" endtime="20170708 15:41:23.428" starttime="20170708 15:41:23.426"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status status="PASS" endtime="20170708 15:41:23.431" starttime="20170708 15:41:23.430"></status>
</kw>
<status status="PASS" endtime="20170708 15:41:23.431" starttime="20170708 15:41:23.430"></status>
</kw>
<status status="PASS" endtime="20170708 15:41:23.431" starttime="20170708 15:41:23.428"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg timestamp="20170708 15:41:23.432" level="INFO">Logging into '9.3.86.161:22' as 'root'.</msg>
<msg timestamp="20170708 15:41:25.109" level="INFO">Read output: root@witherspoon:~#</msg>
<status status="PASS" endtime="20170708 15:41:25.110" starttime="20170708 15:41:23.432"></status>
</kw>
<status status="PASS" endtime="20170708 15:41:25.110" starttime="20170708 15:41:23.421"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>ls /tmp/core_*</arg>
</arguments>
<assign>
<var>${core_files}</var>
</assign>
<msg timestamp="20170708 15:41:25.110" level="INFO">Executing command 'ls /tmp/core_*'.</msg>
<msg timestamp="20170708 15:41:25.167" level="INFO">Command exited with return code 1.</msg>
<msg timestamp="20170708 15:41:25.167" level="INFO">${core_files} = </msg>
<status status="PASS" endtime="20170708 15:41:25.167" starttime="20170708 15:41:25.110"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${core_files}</arg>
</arguments>
<assign>
<var>@{core_list}</var>
</assign>
<msg timestamp="20170708 15:41:25.168" level="INFO">@{core_list} = [ ]</msg>
<status status="PASS" endtime="20170708 15:41:25.168" starttime="20170708 15:41:25.167"></status>
</kw>
<kw name="Open Connection for SCP" library="connection_client">
<kw name="Import Library" library="BuiltIn">
<doc>Imports a library with the given name and optional arguments.</doc>
<arguments>
<arg>SCPLibrary</arg>
<arg>WITH NAME</arg>
<arg>scp</arg>
</arguments>
<status status="PASS" endtime="20170708 15:41:25.175" starttime="20170708 15:41:25.168"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' == '${EMPTY}'</arg>
<arg>scp.Open connection</arg>
<arg>${OPENBMC_HOST}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>scp.Open connection</arg>
<arg>${OPENBMC_HOST}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
</arguments>
<kw name="Open Connection" library="scp">
<doc>Opens a new SCP connection to the given host.</doc>
<arguments>
<arg>${OPENBMC_HOST}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
</arguments>
<status status="PASS" endtime="20170708 15:41:25.910" starttime="20170708 15:41:25.176"></status>
</kw>
<status status="PASS" endtime="20170708 15:41:25.910" starttime="20170708 15:41:25.175"></status>
</kw>
<status status="PASS" endtime="20170708 15:41:25.910" starttime="20170708 15:41:25.168"></status>
</kw>
<kw type="for" name="${index} IN [ @{core_list} ]">
<status status="PASS" endtime="20170708 15:41:25.911" starttime="20170708 15:41:25.911"></status>
</kw>
<status status="PASS" endtime="20170708 15:41:25.911" starttime="20170708 15:41:23.421"></status>
</kw>
<status status="PASS" endtime="20170708 15:41:25.911" starttime="20170708 15:41:23.407"></status>
</kw>
<status status="PASS" endtime="20170708 15:41:25.911" starttime="20170708 15:41:23.405"></status>
</kw>
<status status="PASS" endtime="20170708 15:41:25.911" starttime="20170708 15:41:23.404"></status>
</kw>
<kw type="foritem" name="${method} = ('BMC Specific Files', 'BMC FFDC Files')">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status status="PASS" endtime="20170708 15:41:25.913" starttime="20170708 15:41:25.913"></status>
</kw>
<msg timestamp="20170708 15:41:25.913" level="INFO">${status} = PASS</msg>
<msg timestamp="20170708 15:41:25.913" level="INFO">${ret_values} = None</msg>
<status status="PASS" endtime="20170708 15:41:25.913" starttime="20170708 15:41:25.912"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status status="PASS" endtime="20170708 15:41:25.914" starttime="20170708 15:41:25.914"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="BMC FFDC Files" library="openbmc_ffdc_methods">
<doc>Get the command list and iterate</doc>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg timestamp="20170708 15:41:25.930" level="FAIL">Dictionary does not contain key 'host'.</msg>
<status status="FAIL" endtime="20170708 15:41:25.930" starttime="20170708 15:41:25.929"></status>
</kw>
<msg timestamp="20170708 15:41:25.930" level="INFO">${has_host} = False</msg>
<status status="PASS" endtime="20170708 15:41:25.930" starttime="20170708 15:41:25.929"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status status="PASS" endtime="20170708 15:41:25.931" starttime="20170708 15:41:25.931"></status>
</kw>
<status status="PASS" endtime="20170708 15:41:25.931" starttime="20170708 15:41:25.930"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<status status="PASS" endtime="20170708 15:41:25.932" starttime="20170708 15:41:25.932"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg timestamp="20170708 15:41:25.933" level="FAIL">Dictionary does not contain key 'port'.</msg>
<status status="FAIL" endtime="20170708 15:41:25.933" starttime="20170708 15:41:25.933"></status>
</kw>
<msg timestamp="20170708 15:41:25.933" level="INFO">${has_port} = False</msg>
<status status="PASS" endtime="20170708 15:41:25.933" starttime="20170708 15:41:25.932"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status status="PASS" endtime="20170708 15:41:25.935" starttime="20170708 15:41:25.935"></status>
</kw>
<status status="PASS" endtime="20170708 15:41:25.935" starttime="20170708 15:41:25.934"></status>
</kw>
<status status="PASS" endtime="20170708 15:41:25.935" starttime="20170708 15:41:25.934"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg timestamp="20170708 15:41:25.936" level="INFO">Logging into '9.3.86.161:22' as 'root'.</msg>
<msg timestamp="20170708 15:41:27.612" level="INFO">Read output: root@witherspoon:~#</msg>
<status status="PASS" endtime="20170708 15:41:27.613" starttime="20170708 15:41:25.936"></status>
</kw>
<status status="PASS" endtime="20170708 15:41:27.613" starttime="20170708 15:41:25.928"></status>
</kw>
<kw name="Get Ffdc File Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg timestamp="20170708 15:41:27.613" level="INFO">@{entries} = [ BMC FILES ]</msg>
<status status="PASS" endtime="20170708 15:41:27.613" starttime="20170708 15:41:27.613"></status>
</kw>
<kw type="for" name="${index} IN [ @{entries} ]">
<kw type="foritem" name="${index} = BMC FILES">
<kw name="Create File and Write Data" library="openbmc_ffdc_methods">
<doc>Create files to current FFDC log directory,</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Bmc File" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg timestamp="20170708 15:41:27.615" level="INFO">@{cmd_list} = [ ('BMC_proc_list', 'top -n 1 -b') | ('BMC_dmesg', 'dmesg') | ('BMC_meminfo', 'cat /proc/meminfo') | ('BMC_procinfo', 'cat /proc/cpuinfo') | ('BMC_journalctl', 'journalctl --no-pager') ]</msg>
<status status="PASS" endtime="20170708 15:41:27.615" starttime="20170708 15:41:27.615"></status>
</kw>
<kw type="for" name="${cmd} IN [ @{cmd_list} ]">
<kw type="foritem" name="${cmd} = ('BMC_proc_list', 'top -n 1 -b')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170708 15:41:27.616" level="INFO">${logpath} = /home/fspcibld/logs/20170708154114265719_UpdateBmc/20170708154114265719_InitiateCodeUpdateBMC/20170708154114265719_BMC_proc_list.txt</msg>
<status status="PASS" endtime="20170708 15:41:27.616" starttime="20170708 15:41:27.615"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status status="PASS" endtime="20170708 15:41:27.617" starttime="20170708 15:41:27.617"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170708 15:41:27.618" level="INFO">Executing command 'top -n 1 -b'.</msg>
<msg timestamp="20170708 15:41:27.906" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170708 15:41:27.906" level="INFO">${stdout} = Mem: 175528K used, 256772K free, 38360K shrd, 10836K buff, 73972K cached
CPU:   0% usr  23% sys   0% nic  76% idle   0% io   0% irq   0% sirq
Load average: 3.19 1.71 0.66 1/149 1169
  PID  PPID USER  ...</msg>
<msg timestamp="20170708 15:41:27.906" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170708 15:41:27.906" starttime="20170708 15:41:27.618"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170708 15:41:27.914" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170708154114265719_UpdateBmc/20170708154114265719_InitiateCodeUpdateBMC/20170708154114265719_BMC_proc_list.txt"&gt;/home/fspcibld/logs/20170708154114265719_UpdateBmc/20170708154114265719_InitiateCodeUpdateBMC/20170708154114265719_BMC_proc_list.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170708 15:41:27.914" starttime="20170708 15:41:27.914"></status>
</kw>
<status status="PASS" endtime="20170708 15:41:27.914" starttime="20170708 15:41:27.912"></status>
</kw>
<status status="PASS" endtime="20170708 15:41:27.914" starttime="20170708 15:41:27.907"></status>
</kw>
<status status="PASS" endtime="20170708 15:41:27.915" starttime="20170708 15:41:27.616"></status>
</kw>
<status status="PASS" endtime="20170708 15:41:27.915" starttime="20170708 15:41:27.615"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_dmesg', 'dmesg')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170708 15:41:27.915" level="INFO">${logpath} = /home/fspcibld/logs/20170708154114265719_UpdateBmc/20170708154114265719_InitiateCodeUpdateBMC/20170708154114265719_BMC_dmesg.txt</msg>
<status status="PASS" endtime="20170708 15:41:27.915" starttime="20170708 15:41:27.915"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status status="PASS" endtime="20170708 15:41:27.917" starttime="20170708 15:41:27.916"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170708 15:41:27.917" level="INFO">Executing command 'dmesg'.</msg>
<msg timestamp="20170708 15:41:28.109" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170708 15:41:28.109" level="INFO">${stdout} = [    0.000000] Booting Linux on physical CPU 0x0
[    0.000000] Linux version 4.10.17-7858cdff46b6d8aa4a4f88884a0623ff50fb78c9 (jenkins@openbmc-builder1) (gcc version 6.2.0 (GCC) ) #1 Sat Jul 8 06:02:...</msg>
<msg timestamp="20170708 15:41:28.109" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170708 15:41:28.109" starttime="20170708 15:41:27.917"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170708 15:41:28.117" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170708154114265719_UpdateBmc/20170708154114265719_InitiateCodeUpdateBMC/20170708154114265719_BMC_dmesg.txt"&gt;/home/fspcibld/logs/20170708154114265719_UpdateBmc/20170708154114265719_InitiateCodeUpdateBMC/20170708154114265719_BMC_dmesg.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170708 15:41:28.117" starttime="20170708 15:41:28.117"></status>
</kw>
<status status="PASS" endtime="20170708 15:41:28.117" starttime="20170708 15:41:28.116"></status>
</kw>
<status status="PASS" endtime="20170708 15:41:28.118" starttime="20170708 15:41:28.110"></status>
</kw>
<status status="PASS" endtime="20170708 15:41:28.118" starttime="20170708 15:41:27.916"></status>
</kw>
<status status="PASS" endtime="20170708 15:41:28.118" starttime="20170708 15:41:27.915"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_meminfo', 'cat /proc/meminfo')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170708 15:41:28.118" level="INFO">${logpath} = /home/fspcibld/logs/20170708154114265719_UpdateBmc/20170708154114265719_InitiateCodeUpdateBMC/20170708154114265719_BMC_meminfo.txt</msg>
<status status="PASS" endtime="20170708 15:41:28.119" starttime="20170708 15:41:28.118"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status status="PASS" endtime="20170708 15:41:28.120" starttime="20170708 15:41:28.120"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170708 15:41:28.120" level="INFO">Executing command 'cat /proc/meminfo'.</msg>
<msg timestamp="20170708 15:41:28.205" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170708 15:41:28.206" level="INFO">${stdout} = MemTotal:         432300 kB
MemFree:          256492 kB
MemAvailable:     299872 kB
Buffers:           10836 kB
Cached:            73976 kB
SwapCached:            0 kB
Active:           109148 kB
Inac...</msg>
<msg timestamp="20170708 15:41:28.206" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170708 15:41:28.206" starttime="20170708 15:41:28.120"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170708 15:41:28.212" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170708154114265719_UpdateBmc/20170708154114265719_InitiateCodeUpdateBMC/20170708154114265719_BMC_meminfo.txt"&gt;/home/fspcibld/logs/20170708154114265719_UpdateBmc/20170708154114265719_InitiateCodeUpdateBMC/20170708154114265719_BMC_meminfo.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170708 15:41:28.213" starttime="20170708 15:41:28.212"></status>
</kw>
<status status="PASS" endtime="20170708 15:41:28.213" starttime="20170708 15:41:28.211"></status>
</kw>
<status status="PASS" endtime="20170708 15:41:28.213" starttime="20170708 15:41:28.206"></status>
</kw>
<status status="PASS" endtime="20170708 15:41:28.213" starttime="20170708 15:41:28.119"></status>
</kw>
<status status="PASS" endtime="20170708 15:41:28.213" starttime="20170708 15:41:28.118"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_procinfo', 'cat /proc/cpuinfo')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170708 15:41:28.214" level="INFO">${logpath} = /home/fspcibld/logs/20170708154114265719_UpdateBmc/20170708154114265719_InitiateCodeUpdateBMC/20170708154114265719_BMC_procinfo.txt</msg>
<status status="PASS" endtime="20170708 15:41:28.214" starttime="20170708 15:41:28.213"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status status="PASS" endtime="20170708 15:41:28.215" starttime="20170708 15:41:28.215"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170708 15:41:28.216" level="INFO">Executing command 'cat /proc/cpuinfo'.</msg>
<msg timestamp="20170708 15:41:28.310" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170708 15:41:28.311" level="INFO">${stdout} = processor	: 0
model name	: ARMv6-compatible processor rev 7 (v6l)
BogoMIPS	: 789.70
Features	: half thumb fastmult edsp java tls 
CPU implementer	: 0x41
CPU architecture: 7
CPU variant	: 0x0
CPU part	...</msg>
<msg timestamp="20170708 15:41:28.311" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170708 15:41:28.311" starttime="20170708 15:41:28.215"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170708 15:41:28.317" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170708154114265719_UpdateBmc/20170708154114265719_InitiateCodeUpdateBMC/20170708154114265719_BMC_procinfo.txt"&gt;/home/fspcibld/logs/20170708154114265719_UpdateBmc/20170708154114265719_InitiateCodeUpdateBMC/20170708154114265719_BMC_procinfo.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170708 15:41:28.317" starttime="20170708 15:41:28.317"></status>
</kw>
<status status="PASS" endtime="20170708 15:41:28.317" starttime="20170708 15:41:28.316"></status>
</kw>
<status status="PASS" endtime="20170708 15:41:28.317" starttime="20170708 15:41:28.311"></status>
</kw>
<status status="PASS" endtime="20170708 15:41:28.318" starttime="20170708 15:41:28.214"></status>
</kw>
<status status="PASS" endtime="20170708 15:41:28.318" starttime="20170708 15:41:28.213"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_journalctl', 'journalctl --no-pager')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170708 15:41:28.319" level="INFO">${logpath} = /home/fspcibld/logs/20170708154114265719_UpdateBmc/20170708154114265719_InitiateCodeUpdateBMC/20170708154114265719_BMC_journalctl.txt</msg>
<status status="PASS" endtime="20170708 15:41:28.319" starttime="20170708 15:41:28.318"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status status="PASS" endtime="20170708 15:41:28.321" starttime="20170708 15:41:28.320"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170708 15:41:28.322" level="INFO">Executing command 'journalctl --no-pager'.</msg>
<msg timestamp="20170708 15:41:29.441" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170708 15:41:29.441" level="INFO">${stdout} = -- Logs begin at Sat 2017-07-08 15:39:30 UTC, end at Sat 2017-07-08 15:41:39 UTC. --
Jul 08 15:39:30 witherspoon kernel: Booting Linux on physical CPU 0x0
Jul 08 15:39:30 witherspoon kernel: Linux ver...</msg>
<msg timestamp="20170708 15:41:29.442" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170708 15:41:29.442" starttime="20170708 15:41:28.321"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170708 15:41:29.449" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170708154114265719_UpdateBmc/20170708154114265719_InitiateCodeUpdateBMC/20170708154114265719_BMC_journalctl.txt"&gt;/home/fspcibld/logs/20170708154114265719_UpdateBmc/20170708154114265719_InitiateCodeUpdateBMC/20170708154114265719_BMC_journalctl.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170708 15:41:29.449" starttime="20170708 15:41:29.448"></status>
</kw>
<status status="PASS" endtime="20170708 15:41:29.449" starttime="20170708 15:41:29.447"></status>
</kw>
<status status="PASS" endtime="20170708 15:41:29.449" starttime="20170708 15:41:29.442"></status>
</kw>
<status status="PASS" endtime="20170708 15:41:29.449" starttime="20170708 15:41:28.319"></status>
</kw>
<status status="PASS" endtime="20170708 15:41:29.449" starttime="20170708 15:41:28.318"></status>
</kw>
<status status="PASS" endtime="20170708 15:41:29.449" starttime="20170708 15:41:27.615"></status>
</kw>
<status status="PASS" endtime="20170708 15:41:29.450" starttime="20170708 15:41:27.614"></status>
</kw>
<status status="PASS" endtime="20170708 15:41:29.450" starttime="20170708 15:41:27.614"></status>
</kw>
<status status="PASS" endtime="20170708 15:41:29.450" starttime="20170708 15:41:27.614"></status>
</kw>
<status status="PASS" endtime="20170708 15:41:29.450" starttime="20170708 15:41:25.928"></status>
</kw>
<status status="PASS" endtime="20170708 15:41:29.450" starttime="20170708 15:41:25.914"></status>
</kw>
<status status="PASS" endtime="20170708 15:41:29.450" starttime="20170708 15:41:25.911"></status>
</kw>
<status status="PASS" endtime="20170708 15:41:29.450" starttime="20170708 15:41:25.911"></status>
</kw>
<kw type="foritem" name="${method} = ('SEL Log', 'Collect eSEL Log')">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status status="PASS" endtime="20170708 15:41:29.453" starttime="20170708 15:41:29.453"></status>
</kw>
<msg timestamp="20170708 15:41:29.453" level="INFO">${status} = PASS</msg>
<msg timestamp="20170708 15:41:29.453" level="INFO">${ret_values} = None</msg>
<status status="PASS" endtime="20170708 15:41:29.453" starttime="20170708 15:41:29.452"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status status="PASS" endtime="20170708 15:41:29.454" starttime="20170708 15:41:29.454"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="Collect eSEL Log" library="openbmc_ffdc_methods">
<doc>Collect eSEL log from logging entry and convert eSEL data</doc>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${BMC_LOGGING_ENTRY}/enumerate</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170708 15:41:29.472" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170708 15:41:29.472" starttime="20170708 15:41:29.471"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170708 15:41:29.473" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170708 15:41:29.473" starttime="20170708 15:41:29.473"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170708 15:41:29.474" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170708 15:41:29.474" starttime="20170708 15:41:29.473"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170708 15:41:29.474" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170708 15:41:29.474" starttime="20170708 15:41:29.474"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170708 15:41:29.682" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170708 15:41:29.683" starttime="20170708 15:41:29.475"></status>
</kw>
<msg timestamp="20170708 15:41:29.683" level="INFO">${status} = PASS</msg>
<msg timestamp="20170708 15:41:29.683" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170708 15:41:29.683" starttime="20170708 15:41:29.475"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170708 15:41:29.684" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170708 15:41:29.684" starttime="20170708 15:41:29.683"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170708 15:41:29.684" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170708 15:41:29.684" starttime="20170708 15:41:29.684"></status>
</kw>
<status status="PASS" endtime="20170708 15:41:29.685" starttime="20170708 15:41:29.470"></status>
</kw>
<status status="PASS" endtime="20170708 15:41:29.685" starttime="20170708 15:41:29.470"></status>
</kw>
<status status="PASS" endtime="20170708 15:41:29.685" starttime="20170708 15:41:29.469"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170708 15:41:29.685" level="INFO">${base_uri} = /xyz/openbmc_project/logging/entry//enumerate</msg>
<status status="PASS" endtime="20170708 15:41:29.685" starttime="20170708 15:41:29.685"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170708 15:41:29.686" starttime="20170708 15:41:29.686"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170708 15:41:29.728" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry//enumerate, headers=None json=None</msg>
<msg timestamp="20170708 15:41:29.728" level="INFO">${ret} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20170708 15:41:29.728" starttime="20170708 15:41:29.686"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170708 15:41:29.728" starttime="20170708 15:41:29.728"></status>
</kw>
<msg timestamp="20170708 15:41:29.729" level="INFO">${resp} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20170708 15:41:29.729" starttime="20170708 15:41:29.469"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170708 15:41:29.730" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20170708 15:41:29.730" level="FAIL">404 != 200</msg>
<status status="FAIL" endtime="20170708 15:41:29.730" starttime="20170708 15:41:29.729"></status>
</kw>
<msg timestamp="20170708 15:41:29.730" level="INFO">${status} = False</msg>
<status status="PASS" endtime="20170708 15:41:29.730" starttime="20170708 15:41:29.729"></status>
</kw>
<kw name="Return From Keyword If" library="BuiltIn">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
</arguments>
<msg timestamp="20170708 15:41:29.731" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" endtime="20170708 15:41:29.731" starttime="20170708 15:41:29.731"></status>
</kw>
<status status="PASS" endtime="20170708 15:41:29.731" starttime="20170708 15:41:29.468"></status>
</kw>
<status status="PASS" endtime="20170708 15:41:29.731" starttime="20170708 15:41:29.455"></status>
</kw>
<status status="PASS" endtime="20170708 15:41:29.731" starttime="20170708 15:41:29.451"></status>
</kw>
<status status="PASS" endtime="20170708 15:41:29.731" starttime="20170708 15:41:29.450"></status>
</kw>
<kw type="foritem" name="${method} = ('OS FFDC', 'OS FFDC Files')">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status status="PASS" endtime="20170708 15:41:29.733" starttime="20170708 15:41:29.733"></status>
</kw>
<msg timestamp="20170708 15:41:29.733" level="INFO">${status} = PASS</msg>
<msg timestamp="20170708 15:41:29.733" level="INFO">${ret_values} = None</msg>
<status status="PASS" endtime="20170708 15:41:29.733" starttime="20170708 15:41:29.732"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status status="PASS" endtime="20170708 15:41:29.734" starttime="20170708 15:41:29.734"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="OS FFDC Files" library="openbmc_ffdc_methods">
<doc>Get the command list and iterate</doc>
<kw name="Return From Keyword If" library="BuiltIn">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${OS_HOST}' == '${EMPTY}'</arg>
<arg>No OS Host Provided</arg>
</arguments>
<msg timestamp="20170708 15:41:29.749" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" endtime="20170708 15:41:29.749" starttime="20170708 15:41:29.748"></status>
</kw>
<status status="PASS" endtime="20170708 15:41:29.749" starttime="20170708 15:41:29.748"></status>
</kw>
<status status="PASS" endtime="20170708 15:41:29.749" starttime="20170708 15:41:29.734"></status>
</kw>
<status status="PASS" endtime="20170708 15:41:29.749" starttime="20170708 15:41:29.732"></status>
</kw>
<status status="PASS" endtime="20170708 15:41:29.749" starttime="20170708 15:41:29.731"></status>
</kw>
<status status="PASS" endtime="20170708 15:41:29.749" starttime="20170708 15:41:16.195"></status>
</kw>
<status status="PASS" endtime="20170708 15:41:29.749" starttime="20170708 15:41:16.192"></status>
</kw>
<status status="PASS" endtime="20170708 15:41:29.749" starttime="20170708 15:41:16.192"></status>
</kw>
<status status="PASS" endtime="20170708 15:41:29.749" starttime="20170708 15:41:16.192"></status>
</kw>
<kw name="Close All Connections" library="SSHLibrary">
<doc>Closes all open connections.</doc>
<status status="PASS" endtime="20170708 15:41:29.887" starttime="20170708 15:41:29.750"></status>
</kw>
<status status="PASS" endtime="20170708 15:41:29.887" starttime="20170708 15:41:16.191"></status>
</kw>
<status status="PASS" endtime="20170708 15:41:29.887" starttime="20170708 15:41:11.220"></status>
</kw>
<status status="PASS" endtime="20170708 15:41:29.887" starttime="20170708 15:41:11.219"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}'=='True'</arg>
<arg>Recover Quiesced Host</arg>
</arguments>
<status status="PASS" endtime="20170708 15:41:29.888" starttime="20170708 15:41:29.888"></status>
</kw>
<kw name="Log Test Case Status" library="openbmc_ffdc_methods">
<doc>Test case execution result history.</doc>
<kw name="Get Variable Value" library="BuiltIn">
<doc>Returns variable value or ``default`` if the variable does not exist.</doc>
<arguments>
<arg>${FFDC_DIR_PATH_STYLE}</arg>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${FFDC_DIR_PATH_STYLE}</var>
</assign>
<msg timestamp="20170708 15:41:29.890" level="INFO">${FFDC_DIR_PATH_STYLE} = </msg>
<status status="PASS" endtime="20170708 15:41:29.890" starttime="20170708 15:41:29.889"></status>
</kw>
<kw name="Get Variable Value" library="BuiltIn">
<doc>Returns variable value or ``default`` if the variable does not exist.</doc>
<arguments>
<arg>${FFDC_DIR_PATH}</arg>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${FFDC_DIR_PATH}</var>
</assign>
<msg timestamp="20170708 15:41:29.890" level="INFO">${FFDC_DIR_PATH} = /home/fspcibld/logs/20170708154114265719_UpdateBmc/20170708154114265719_InitiateCodeUpdateBMC/</msg>
<status status="PASS" endtime="20170708 15:41:29.890" starttime="20170708 15:41:29.890"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${FFDC_DIR_PATH}' == '${EMPTY}'</arg>
<arg>Set FFDC Defaults</arg>
</arguments>
<status status="PASS" endtime="20170708 15:41:29.891" starttime="20170708 15:41:29.891"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${FFDC_DIR_PATH_STYLE}' == '${1}'</arg>
<arg>Run Keywords</arg>
<arg>Set Global Variable</arg>
<arg>${FFDC_LOG_PATH}</arg>
<arg>${FFDC_DIR_PATH}</arg>
<arg>AND</arg>
<arg>Set Global Variable</arg>
<arg>${TEST_HISTORY}</arg>
<arg>${FFDC_DIR_PATH}test_history.txt</arg>
</arguments>
<status status="PASS" endtime="20170708 15:41:29.892" starttime="20170708 15:41:29.891"></status>
</kw>
<kw name="Create Directory" library="OperatingSystem">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>${FFDC_LOG_PATH}</arg>
</arguments>
<msg timestamp="20170708 15:41:29.892" html="yes" level="INFO">Directory '&lt;a href="file:///home/fspcibld/logs"&gt;/home/fspcibld/logs&lt;/a&gt;' already exists.</msg>
<status status="PASS" endtime="20170708 15:41:29.892" starttime="20170708 15:41:29.892"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>OperatingSystem.File Should Exist</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<assign>
<var>${exist}</var>
</assign>
<kw name="File Should Exist" library="OperatingSystem">
<doc>Fails unless the given ``path`` points to an existing file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
</arguments>
<msg timestamp="20170708 15:41:29.893" html="yes" level="INFO">File '&lt;a href="file:///home/fspcibld/logs/test_history.txt"&gt;/home/fspcibld/logs/test_history.txt&lt;/a&gt;' exists.</msg>
<status status="PASS" endtime="20170708 15:41:29.894" starttime="20170708 15:41:29.893"></status>
</kw>
<msg timestamp="20170708 15:41:29.894" level="INFO">${exist} = True</msg>
<status status="PASS" endtime="20170708 15:41:29.894" starttime="20170708 15:41:29.893"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${exist}' == '${False}'</arg>
<arg>Create File</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<status status="PASS" endtime="20170708 15:41:29.894" starttime="20170708 15:41:29.894"></status>
</kw>
<kw name="Rpvars" library="gen_robot_print">
<arguments>
<arg>TEST_HISTORY</arg>
</arguments>
<status status="PASS" endtime="20170708 15:41:29.895" starttime="20170708 15:41:29.895"></status>
</kw>
<kw name="Get Current Time Stamp" library="openbmc_ffdc_utils">
<doc>Get the current time stamp data</doc>
<assign>
<var>${cur_time}</var>
</assign>
<kw name="Get Current Date" library="DateTime">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20170708 15:41:29.896" level="INFO">${cur_time} = 2017-07-08 15:41:29:896127</msg>
<status status="PASS" endtime="20170708 15:41:29.896" starttime="20170708 15:41:29.896"></status>
</kw>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20170708 15:41:29.897" level="INFO">${cur_time} = 20170708154129896127</msg>
<status status="PASS" endtime="20170708 15:41:29.897" starttime="20170708 15:41:29.897"></status>
</kw>
<msg timestamp="20170708 15:41:29.897" level="INFO">${cur_time} = 20170708154129896127</msg>
<status status="PASS" endtime="20170708 15:41:29.897" starttime="20170708 15:41:29.895"></status>
</kw>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
<arg>${cur_time}:${SUITE_NAME}:${TEST_NAME}:${TEST_STATUS}${\n}</arg>
</arguments>
<msg timestamp="20170708 15:41:29.898" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/test_history.txt"&gt;/home/fspcibld/logs/test_history.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170708 15:41:29.898" starttime="20170708 15:41:29.897"></status>
</kw>
<status status="PASS" endtime="20170708 15:41:29.898" starttime="20170708 15:41:29.889"></status>
</kw>
<status status="PASS" endtime="20170708 15:41:29.898" starttime="20170708 15:41:10.947"></status>
</kw>
<status status="PASS" endtime="20170708 15:41:29.899" starttime="20170708 15:41:10.941"></status>
</kw>
<doc>Initiate a code update on the BMC.</doc>
<tags>
<tag>Initiate_Code_Update_BMC</tag>
</tags>
<status status="FAIL" endtime="20170708 15:41:29.899" critical="yes" starttime="20170708 15:38:11.010">Replacing variables from keyword return value failed: Resolving variable '${content["data"]}' failed: KeyError: 'data'</status>
</test>
<doc>Trigger code update to a target BMC.
Execution Method :
python -m robot -v OPENBMC_HOST:&lt;hostname&gt;
-v FILE_PATH:&lt;path/*all.tar&gt; update_bmc.robot

Code update method BMC using REST
Update work flow sequence:
- User input BMC File existence check
- Ping Test and REST authentication
- Set Host Power host setting Policy to RESTORE_LAST_STATE
On reboot this policy would ensure the BMC comes
online and stays at HOST_POWERED_OFF state.
- Issue poweroff
- Prune archived journal logs
- Prepare for Update
- Wait for BMC to come online clean
- Wait for BMC_READY state
- Apply preserve BMC Network setting
- SCP image to BMC
- Activate the flash image
- Warm Reset BMC to activate code
- Wait for BMC to come online time out 30 minutes
- Version check post update
- Identify REST url post update</doc>
<status status="FAIL" endtime="20170708 15:41:29.900" starttime="20170708 15:38:10.138"></status>
</suite>
<statistics>
<total>
<stat fail="1" pass="0">Critical Tests</stat>
<stat fail="1" pass="0">All Tests</stat>
</total>
<tag>
<stat fail="1" pass="0">Initiate_Code_Update_BMC</stat>
</tag>
<suite>
<stat fail="1" id="s1" name="Update Bmc" pass="0">Update Bmc</stat>
</suite>
</statistics>
<errors>
<msg timestamp="20170708 15:39:16.919" level="WARN">Retrying (Retry(total=2, connect=None, read=None, redirect=None, status=None)) after connection broken by 'ConnectTimeoutError(&lt;urllib3.connection.VerifiedHTTPSConnection object at 0x3fffa8160a10&gt;, 'Connection to 9.3.86.161 timed out. (connect timeout=20.0)')': /login</msg>
<msg timestamp="20170708 15:39:37.141" level="WARN">Retrying (Retry(total=1, connect=None, read=None, redirect=None, status=None)) after connection broken by 'ConnectTimeoutError(&lt;urllib3.connection.VerifiedHTTPSConnection object at 0x3fffa81606d0&gt;, 'Connection to 9.3.86.161 timed out. (connect timeout=20.0)')': /login</msg>
</errors>
</robot>
