<?xml version="1.0" encoding="UTF-8"?>
<robot generated="20170706 20:05:59.979" generator="Robot 3.0.2 (Python 2.7.12 on linux2)">
<suite source="/tmp/fspcibld/956/obmc-robot/tests" name="Tests" id="s1">
<kw name="System Driver Data" type="setup">
<doc>System driver information.</doc>
<kw library="connection_client" name="Open Connection And Log In">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw library="Collections" name="Dictionary Should Contain Key">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg level="FAIL" timestamp="20170706 20:06:00.573">Dictionary does not contain key 'host'.</msg>
<status endtime="20170706 20:06:00.573" starttime="20170706 20:06:00.573" status="FAIL"></status>
</kw>
<msg level="INFO" timestamp="20170706 20:06:00.573">${has_host} = False</msg>
<status endtime="20170706 20:06:00.573" starttime="20170706 20:06:00.572" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status endtime="20170706 20:06:00.574" starttime="20170706 20:06:00.574" status="PASS"></status>
</kw>
<status endtime="20170706 20:06:00.574" starttime="20170706 20:06:00.573" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<kw library="connection_client" name="User input SSH and HTTPs Ports">
<doc>Update the global SSH and HTTPs port variable for QEMU</doc>
<kw library="BuiltIn" name="Convert To Integer">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${SSH_PORT}</arg>
</arguments>
<assign>
<var>${port_num}</var>
</assign>
<msg level="INFO" timestamp="20170706 20:06:00.576">${port_num} = 22</msg>
<status endtime="20170706 20:06:00.576" starttime="20170706 20:06:00.575" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Replace Variables">
<doc>Replaces variables in the given text with their current values.</doc>
<arguments>
<arg>${port_num}</arg>
</arguments>
<assign>
<var>${SSH_PORT}</var>
</assign>
<msg level="INFO" timestamp="20170706 20:06:00.577">${SSH_PORT} = 22</msg>
<status endtime="20170706 20:06:00.577" starttime="20170706 20:06:00.576" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Convert To Integer">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${HTTPS_PORT}</arg>
</arguments>
<assign>
<var>${https_num}</var>
</assign>
<msg level="INFO" timestamp="20170706 20:06:00.577">${https_num} = 443</msg>
<status endtime="20170706 20:06:00.577" starttime="20170706 20:06:00.577" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Set Global Variable">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${AUTH_URI}</arg>
<arg>https://${OPENBMC_HOST}:${https_num}</arg>
</arguments>
<msg level="INFO" timestamp="20170706 20:06:00.578">${AUTH_URI} = https://9.3.21.61:443</msg>
<status endtime="20170706 20:06:00.578" starttime="20170706 20:06:00.578" status="PASS"></status>
</kw>
<status endtime="20170706 20:06:00.578" starttime="20170706 20:06:00.575" status="PASS"></status>
</kw>
<status endtime="20170706 20:06:00.578" starttime="20170706 20:06:00.575" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw library="Collections" name="Dictionary Should Contain Key">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg level="FAIL" timestamp="20170706 20:06:00.579">Dictionary does not contain key 'port'.</msg>
<status endtime="20170706 20:06:00.579" starttime="20170706 20:06:00.579" status="FAIL"></status>
</kw>
<msg level="INFO" timestamp="20170706 20:06:00.579">${has_port} = False</msg>
<status endtime="20170706 20:06:00.580" starttime="20170706 20:06:00.579" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keywords">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
</arguments>
<status endtime="20170706 20:06:00.581" starttime="20170706 20:06:00.581" status="PASS"></status>
</kw>
<kw library="SSHLibrary" name="Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status endtime="20170706 20:06:00.582" starttime="20170706 20:06:00.581" status="PASS"></status>
</kw>
<status endtime="20170706 20:06:00.582" starttime="20170706 20:06:00.580" status="PASS"></status>
</kw>
<status endtime="20170706 20:06:00.582" starttime="20170706 20:06:00.580" status="PASS"></status>
</kw>
<kw library="SSHLibrary" name="Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg level="INFO" timestamp="20170706 20:06:00.582">Logging into '9.3.21.61:22' as 'root'.</msg>
<msg level="INFO" timestamp="20170706 20:06:02.321">Read output: root@witherspoon:~#</msg>
<status endtime="20170706 20:06:02.321" starttime="20170706 20:06:00.582" status="PASS"></status>
</kw>
<status endtime="20170706 20:06:02.322" starttime="20170706 20:06:00.571" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Log BMC Driver Details</arg>
</arguments>
<kw name="Log BMC Driver Details">
<doc>Get BMC driver details and log.</doc>
<kw library="SSHLibrary" name="Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${DRIVER_CMD}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${output}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170706 20:06:02.323">Executing command 'cat /etc/os-release | grep ^VERSION_ID='.</msg>
<msg level="INFO" timestamp="20170706 20:06:02.401">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20170706 20:06:02.401">${output} = VERSION_ID="v1.99.7-84-g297bad6"</msg>
<msg level="INFO" timestamp="20170706 20:06:02.401">${stderr} = </msg>
<status endtime="20170706 20:06:02.402" starttime="20170706 20:06:02.323" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Empty">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg level="INFO" timestamp="20170706 20:06:02.402">Length is 0</msg>
<status endtime="20170706 20:06:02.402" starttime="20170706 20:06:02.402" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg level="INFO" timestamp="20170706 20:06:02.403">VERSION_ID="v1.99.7-84-g297bad6"</msg>
<status endtime="20170706 20:06:02.403" starttime="20170706 20:06:02.402" status="PASS"></status>
</kw>
<status endtime="20170706 20:06:02.403" starttime="20170706 20:06:02.323" status="PASS"></status>
</kw>
<status endtime="20170706 20:06:02.403" starttime="20170706 20:06:02.322" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Log PNOR Driver Details</arg>
</arguments>
<kw name="Log PNOR Driver Details">
<doc>Get PNOR driver details and log.</doc>
<kw library="utils" name="Execute Command On BMC">
<doc>Execute given command on BMC and return output.</doc>
<arguments>
<arg>${PNOR_CMD}</arg>
</arguments>
<assign>
<var>${pnor_details}</var>
</assign>
<kw library="SSHLibrary" name="Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${command}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170706 20:06:02.405">Executing command '/usr/sbin/pflash -r /tmp/out.txt -P VERSION; cat /tmp/out.txt'.</msg>
<msg level="INFO" timestamp="20170706 20:06:02.562">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20170706 20:06:02.562">${stdout} = Reading to "/tmp/out.txt" from 0x02820000..0x02821000 !
[                                                  ] 0%[==================================================] 100%
IBM-witherspoon-ibm-OP9_v1.17...</msg>
<msg level="INFO" timestamp="20170706 20:06:02.562">${stderr} = </msg>
<status endtime="20170706 20:06:02.562" starttime="20170706 20:06:02.404" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Empty">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg level="INFO" timestamp="20170706 20:06:02.563">Length is 0</msg>
<status endtime="20170706 20:06:02.563" starttime="20170706 20:06:02.563" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170706 20:06:02.563">${pnor_details} = Reading to "/tmp/out.txt" from 0x02820000..0x02821000 !
[                                                  ] 0%[==================================================] 100%
IBM-witherspoon-ibm-OP9_v1.17...</msg>
<status endtime="20170706 20:06:02.563" starttime="20170706 20:06:02.404" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>PNOR_INFO=${pnor_details}</arg>
</arguments>
<msg level="INFO" timestamp="20170706 20:06:02.564">PNOR_INFO=Reading to "/tmp/out.txt" from 0x02820000..0x02821000 !
[                                                  ] 0%[==================================================] 100%
IBM-witherspoon-ibm-OP9_v1.17_1.46
	op-build-v1.17-101-g1c57f18-dirty
	buildroot-2017.02.2-7-g23118ce
	skiboot-5.6.0-158-ga1e0a047b2a0
	hostboot-0ffbb55
	linux-4.11.6-openpower1-p57dd16e
	petitboot-v1.4.3-pfac92ff
	machine-xml-5b59a1d
	occ-1dc97a6
	hostboot-binaries-711147e
	capp-ucode-9c73e9f
	sbe-0df81aa
</msg>
<status endtime="20170706 20:06:02.565" starttime="20170706 20:06:02.563" status="PASS"></status>
</kw>
<status endtime="20170706 20:06:02.565" starttime="20170706 20:06:02.403" status="PASS"></status>
</kw>
<status endtime="20170706 20:06:02.565" starttime="20170706 20:06:02.403" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Log BMC Model</arg>
</arguments>
<kw name="Log BMC Model">
<doc>Fetch BMC Model name from system and log.</doc>
<kw library="utils" name="Get BMC System Model">
<doc>Get the BMC model from the device tree.</doc>
<assign>
<var>${bmc_model}</var>
</assign>
<kw library="connection_client" name="Open Connection And Log In">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw library="Collections" name="Dictionary Should Contain Key">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg level="FAIL" timestamp="20170706 20:06:02.567">Dictionary does not contain key 'host'.</msg>
<status endtime="20170706 20:06:02.567" starttime="20170706 20:06:02.567" status="FAIL"></status>
</kw>
<msg level="INFO" timestamp="20170706 20:06:02.567">${has_host} = False</msg>
<status endtime="20170706 20:06:02.567" starttime="20170706 20:06:02.566" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status endtime="20170706 20:06:02.568" starttime="20170706 20:06:02.568" status="PASS"></status>
</kw>
<status endtime="20170706 20:06:02.569" starttime="20170706 20:06:02.568" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<kw library="connection_client" name="User input SSH and HTTPs Ports">
<doc>Update the global SSH and HTTPs port variable for QEMU</doc>
<kw library="BuiltIn" name="Convert To Integer">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${SSH_PORT}</arg>
</arguments>
<assign>
<var>${port_num}</var>
</assign>
<msg level="INFO" timestamp="20170706 20:06:02.570">${port_num} = 22</msg>
<status endtime="20170706 20:06:02.570" starttime="20170706 20:06:02.570" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Replace Variables">
<doc>Replaces variables in the given text with their current values.</doc>
<arguments>
<arg>${port_num}</arg>
</arguments>
<assign>
<var>${SSH_PORT}</var>
</assign>
<msg level="INFO" timestamp="20170706 20:06:02.570">${SSH_PORT} = 22</msg>
<status endtime="20170706 20:06:02.570" starttime="20170706 20:06:02.570" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Convert To Integer">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${HTTPS_PORT}</arg>
</arguments>
<assign>
<var>${https_num}</var>
</assign>
<msg level="INFO" timestamp="20170706 20:06:02.571">${https_num} = 443</msg>
<status endtime="20170706 20:06:02.571" starttime="20170706 20:06:02.571" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Set Global Variable">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${AUTH_URI}</arg>
<arg>https://${OPENBMC_HOST}:${https_num}</arg>
</arguments>
<msg level="INFO" timestamp="20170706 20:06:02.572">${AUTH_URI} = https://9.3.21.61:443</msg>
<status endtime="20170706 20:06:02.572" starttime="20170706 20:06:02.571" status="PASS"></status>
</kw>
<status endtime="20170706 20:06:02.572" starttime="20170706 20:06:02.569" status="PASS"></status>
</kw>
<status endtime="20170706 20:06:02.572" starttime="20170706 20:06:02.569" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw library="Collections" name="Dictionary Should Contain Key">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg level="FAIL" timestamp="20170706 20:06:02.573">Dictionary does not contain key 'port'.</msg>
<status endtime="20170706 20:06:02.573" starttime="20170706 20:06:02.573" status="FAIL"></status>
</kw>
<msg level="INFO" timestamp="20170706 20:06:02.573">${has_port} = False</msg>
<status endtime="20170706 20:06:02.573" starttime="20170706 20:06:02.572" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keywords">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
</arguments>
<status endtime="20170706 20:06:02.575" starttime="20170706 20:06:02.575" status="PASS"></status>
</kw>
<kw library="SSHLibrary" name="Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status endtime="20170706 20:06:02.576" starttime="20170706 20:06:02.575" status="PASS"></status>
</kw>
<status endtime="20170706 20:06:02.576" starttime="20170706 20:06:02.574" status="PASS"></status>
</kw>
<status endtime="20170706 20:06:02.576" starttime="20170706 20:06:02.574" status="PASS"></status>
</kw>
<kw library="SSHLibrary" name="Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg level="INFO" timestamp="20170706 20:06:02.576">Logging into '9.3.21.61:22' as 'root'.</msg>
<msg level="INFO" timestamp="20170706 20:06:04.287">Read output: root@witherspoon:~#</msg>
<status endtime="20170706 20:06:04.288" starttime="20170706 20:06:02.576" status="PASS"></status>
</kw>
<status endtime="20170706 20:06:04.288" starttime="20170706 20:06:02.566" status="PASS"></status>
</kw>
<kw library="SSHLibrary" name="Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>cat ${devicetree_base} | cut -d " " -f 1</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${bmc_model}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170706 20:06:04.289">Executing command 'cat /sys/firmware/devicetree/base/model | cut -d " " -f 1'.</msg>
<msg level="INFO" timestamp="20170706 20:06:04.366">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20170706 20:06:04.366">${bmc_model} = Witherspoon</msg>
<msg level="INFO" timestamp="20170706 20:06:04.366">${stderr} = </msg>
<status endtime="20170706 20:06:04.366" starttime="20170706 20:06:04.288" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Empty">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg level="INFO" timestamp="20170706 20:06:04.367">Length is 0</msg>
<status endtime="20170706 20:06:04.367" starttime="20170706 20:06:04.366" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Not Be Empty">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${bmc_model}</arg>
</arguments>
<msg level="INFO" timestamp="20170706 20:06:04.367">Length is 11</msg>
<status endtime="20170706 20:06:04.367" starttime="20170706 20:06:04.367" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170706 20:06:04.367">${bmc_model} = Witherspoon</msg>
<status endtime="20170706 20:06:04.368" starttime="20170706 20:06:02.565" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>BMC Model=${bmc_model}</arg>
</arguments>
<msg level="INFO" timestamp="20170706 20:06:04.368">BMC Model=Witherspoon</msg>
<status endtime="20170706 20:06:04.368" starttime="20170706 20:06:04.368" status="PASS"></status>
</kw>
<status endtime="20170706 20:06:04.368" starttime="20170706 20:06:02.565" status="PASS"></status>
</kw>
<status endtime="20170706 20:06:04.368" starttime="20170706 20:06:02.565" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Enable Core Dump On BMC</arg>
</arguments>
<kw library="utils" name="Enable Core Dump On BMC">
<doc>Enable core dump collection.</doc>
<kw library="connection_client" name="Open Connection And Log In">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw library="Collections" name="Dictionary Should Contain Key">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg level="FAIL" timestamp="20170706 20:06:04.371">Dictionary does not contain key 'host'.</msg>
<status endtime="20170706 20:06:04.371" starttime="20170706 20:06:04.370" status="FAIL"></status>
</kw>
<msg level="INFO" timestamp="20170706 20:06:04.371">${has_host} = False</msg>
<status endtime="20170706 20:06:04.371" starttime="20170706 20:06:04.370" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status endtime="20170706 20:06:04.372" starttime="20170706 20:06:04.372" status="PASS"></status>
</kw>
<status endtime="20170706 20:06:04.372" starttime="20170706 20:06:04.371" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<kw library="connection_client" name="User input SSH and HTTPs Ports">
<doc>Update the global SSH and HTTPs port variable for QEMU</doc>
<kw library="BuiltIn" name="Convert To Integer">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${SSH_PORT}</arg>
</arguments>
<assign>
<var>${port_num}</var>
</assign>
<msg level="INFO" timestamp="20170706 20:06:04.374">${port_num} = 22</msg>
<status endtime="20170706 20:06:04.374" starttime="20170706 20:06:04.373" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Replace Variables">
<doc>Replaces variables in the given text with their current values.</doc>
<arguments>
<arg>${port_num}</arg>
</arguments>
<assign>
<var>${SSH_PORT}</var>
</assign>
<msg level="INFO" timestamp="20170706 20:06:04.374">${SSH_PORT} = 22</msg>
<status endtime="20170706 20:06:04.374" starttime="20170706 20:06:04.374" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Convert To Integer">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${HTTPS_PORT}</arg>
</arguments>
<assign>
<var>${https_num}</var>
</assign>
<msg level="INFO" timestamp="20170706 20:06:04.375">${https_num} = 443</msg>
<status endtime="20170706 20:06:04.375" starttime="20170706 20:06:04.375" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Set Global Variable">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${AUTH_URI}</arg>
<arg>https://${OPENBMC_HOST}:${https_num}</arg>
</arguments>
<msg level="INFO" timestamp="20170706 20:06:04.376">${AUTH_URI} = https://9.3.21.61:443</msg>
<status endtime="20170706 20:06:04.376" starttime="20170706 20:06:04.375" status="PASS"></status>
</kw>
<status endtime="20170706 20:06:04.376" starttime="20170706 20:06:04.373" status="PASS"></status>
</kw>
<status endtime="20170706 20:06:04.376" starttime="20170706 20:06:04.372" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw library="Collections" name="Dictionary Should Contain Key">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg level="FAIL" timestamp="20170706 20:06:04.377">Dictionary does not contain key 'port'.</msg>
<status endtime="20170706 20:06:04.377" starttime="20170706 20:06:04.376" status="FAIL"></status>
</kw>
<msg level="INFO" timestamp="20170706 20:06:04.377">${has_port} = False</msg>
<status endtime="20170706 20:06:04.377" starttime="20170706 20:06:04.376" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keywords">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
</arguments>
<status endtime="20170706 20:06:04.379" starttime="20170706 20:06:04.378" status="PASS"></status>
</kw>
<kw library="SSHLibrary" name="Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status endtime="20170706 20:06:04.379" starttime="20170706 20:06:04.379" status="PASS"></status>
</kw>
<status endtime="20170706 20:06:04.379" starttime="20170706 20:06:04.378" status="PASS"></status>
</kw>
<status endtime="20170706 20:06:04.379" starttime="20170706 20:06:04.377" status="PASS"></status>
</kw>
<kw library="SSHLibrary" name="Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg level="INFO" timestamp="20170706 20:06:04.380">Logging into '9.3.21.61:22' as 'root'.</msg>
<msg level="INFO" timestamp="20170706 20:06:06.159">Read output: root@witherspoon:~#</msg>
<status endtime="20170706 20:06:06.160" starttime="20170706 20:06:04.379" status="PASS"></status>
</kw>
<status endtime="20170706 20:06:06.160" starttime="20170706 20:06:04.369" status="PASS"></status>
</kw>
<kw library="utils" name="Execute Command On BMC">
<doc>Execute given command on BMC and return output.</doc>
<arguments>
<arg>echo '/tmp/core_%e.%p' | tee /proc/sys/kernel/core_pattern</arg>
</arguments>
<assign>
<var>${core_pattern}</var>
</assign>
<kw library="SSHLibrary" name="Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${command}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170706 20:06:06.161">Executing command 'echo '/tmp/core_%e.%p' | tee /proc/sys/kernel/core_pattern'.</msg>
<msg level="INFO" timestamp="20170706 20:06:06.269">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20170706 20:06:06.270">${stdout} = /tmp/core_%e.%p</msg>
<msg level="INFO" timestamp="20170706 20:06:06.270">${stderr} = </msg>
<status endtime="20170706 20:06:06.270" starttime="20170706 20:06:06.161" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Empty">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg level="INFO" timestamp="20170706 20:06:06.270">Length is 0</msg>
<status endtime="20170706 20:06:06.271" starttime="20170706 20:06:06.270" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170706 20:06:06.271">${core_pattern} = /tmp/core_%e.%p</msg>
<status endtime="20170706 20:06:06.271" starttime="20170706 20:06:06.160" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${core_pattern}</arg>
<arg>/tmp/core_%e.%p</arg>
</arguments>
<status endtime="20170706 20:06:06.271" starttime="20170706 20:06:06.271" status="PASS"></status>
</kw>
<status endtime="20170706 20:06:06.271" starttime="20170706 20:06:04.369" status="PASS"></status>
</kw>
<status endtime="20170706 20:06:06.271" starttime="20170706 20:06:04.368" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${DEBUG_TARBALL_PATH}' != '${EMPTY}'</arg>
<arg>Run Keyword And Ignore Error</arg>
<arg>Install Debug Tarball On BMC</arg>
<arg>${DEBUG_TARBALL_PATH}</arg>
</arguments>
<status endtime="20170706 20:06:06.272" starttime="20170706 20:06:06.272" status="PASS"></status>
</kw>
<status endtime="20170706 20:06:06.272" starttime="20170706 20:06:00.571" status="PASS"></status>
</kw>
<suite source="/tmp/fspcibld/956/obmc-robot/tests/security" name="Security" id="s1-s1">
<suite source="/tmp/fspcibld/956/obmc-robot/tests/security/test_ssl.robot" name="Test Ssl" id="s1-s1-s1">
<test name="Test SSL Connection" id="s1-s1-s1-t1">
<kw library="rest_client" name="Initialize OpenBMC">
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170706 20:06:06.370">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=20, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170706 20:06:06.371" starttime="20170706 20:06:06.370" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170706 20:06:06.371">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170706 20:06:06.372" starttime="20170706 20:06:06.371" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170706 20:06:06.372">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170706 20:06:06.372" starttime="20170706 20:06:06.372" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170706 20:06:06.373">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170706 20:06:06.373" starttime="20170706 20:06:06.373" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170706 20:06:06.614">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170706 20:06:06.614" starttime="20170706 20:06:06.374" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170706 20:06:06.614">${status} = PASS</msg>
<msg level="INFO" timestamp="20170706 20:06:06.614">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170706 20:06:06.614" starttime="20170706 20:06:06.374" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170706 20:06:06.615">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170706 20:06:06.615" starttime="20170706 20:06:06.615" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170706 20:06:06.616">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170706 20:06:06.617" starttime="20170706 20:06:06.616" status="PASS"></status>
</kw>
<status endtime="20170706 20:06:06.617" starttime="20170706 20:06:06.369" status="PASS"></status>
</kw>
<status endtime="20170706 20:06:06.617" starttime="20170706 20:06:06.369" status="PASS"></status>
</kw>
<status endtime="20170706 20:06:06.617" starttime="20170706 20:06:06.368" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc" name="FFDC On Test Case Fail" type="teardown">
<doc>Generic FFDC entry point. Place holder to hook in</doc>
<kw library="state_manager" name="Is Host Quiesced">
<doc>Check if host state is quiesced.</doc>
<assign>
<var>${status}</var>
</assign>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170706 20:06:06.622">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170706 20:06:06.623" starttime="20170706 20:06:06.622" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170706 20:06:06.624">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170706 20:06:06.624" starttime="20170706 20:06:06.623" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170706 20:06:06.625">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170706 20:06:06.625" starttime="20170706 20:06:06.624" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170706 20:06:06.627">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170706 20:06:06.627" starttime="20170706 20:06:06.626" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170706 20:06:06.866">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170706 20:06:06.866" starttime="20170706 20:06:06.627" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170706 20:06:06.866">${status} = PASS</msg>
<msg level="INFO" timestamp="20170706 20:06:06.866">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170706 20:06:06.866" starttime="20170706 20:06:06.627" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170706 20:06:06.867">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170706 20:06:06.867" starttime="20170706 20:06:06.867" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170706 20:06:06.868">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170706 20:06:06.869" starttime="20170706 20:06:06.868" status="PASS"></status>
</kw>
<status endtime="20170706 20:06:06.869" starttime="20170706 20:06:06.621" status="PASS"></status>
</kw>
<status endtime="20170706 20:06:06.869" starttime="20170706 20:06:06.621" status="PASS"></status>
</kw>
<status endtime="20170706 20:06:06.869" starttime="20170706 20:06:06.620" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170706 20:06:06.871">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170706 20:06:06.871" starttime="20170706 20:06:06.870" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170706 20:06:06.875">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170706 20:06:06.875" starttime="20170706 20:06:06.874" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170706 20:06:06.877">URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170706 20:06:06.878" starttime="20170706 20:06:06.877" status="PASS"></status>
</kw>
<status endtime="20170706 20:06:06.878" starttime="20170706 20:06:06.876" status="PASS"></status>
</kw>
<status endtime="20170706 20:06:06.878" starttime="20170706 20:06:06.872" status="PASS"></status>
</kw>
<status endtime="20170706 20:06:06.878" starttime="20170706 20:06:06.871" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170706 20:06:06.945">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170706 20:06:06.945">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170706 20:06:06.945" starttime="20170706 20:06:06.878" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170706 20:06:06.947">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170706 20:06:06.947" starttime="20170706 20:06:06.947" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170706 20:06:06.948">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170706 20:06:06.949" starttime="20170706 20:06:06.948" status="PASS"></status>
</kw>
<status endtime="20170706 20:06:06.949" starttime="20170706 20:06:06.947" status="PASS"></status>
</kw>
<status endtime="20170706 20:06:06.949" starttime="20170706 20:06:06.946" status="PASS"></status>
</kw>
<status endtime="20170706 20:06:06.949" starttime="20170706 20:06:06.946" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170706 20:06:06.949">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170706 20:06:06.949" starttime="20170706 20:06:06.619" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170706 20:06:06.950">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170706 20:06:06.950" starttime="20170706 20:06:06.949" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170706 20:06:06.950">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170706 20:06:06.950">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170706 20:06:06.950">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'status': u'ok', u'message': u'200 OK'}</msg>
<status endtime="20170706 20:06:06.951" starttime="20170706 20:06:06.950" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170706 20:06:06.951">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170706 20:06:06.951" starttime="20170706 20:06:06.619" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170706 20:06:06.951">${host_state} = Running</msg>
<status endtime="20170706 20:06:06.951" starttime="20170706 20:06:06.618" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal</arg>
<arg>${host_state}</arg>
<arg>Quiesced</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${host_state}</arg>
<arg>Quiesced</arg>
</arguments>
<msg level="FAIL" timestamp="20170706 20:06:06.952">Running != Quiesced</msg>
<status endtime="20170706 20:06:06.952" starttime="20170706 20:06:06.952" status="FAIL"></status>
</kw>
<msg level="INFO" timestamp="20170706 20:06:06.952">${status} = False</msg>
<status endtime="20170706 20:06:06.953" starttime="20170706 20:06:06.951" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170706 20:06:06.953">${status} = False</msg>
<status endtime="20170706 20:06:06.953" starttime="20170706 20:06:06.618" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${TEST_STATUS}' == 'FAIL' or '${status}'=='True'</arg>
<arg>FFDC</arg>
</arguments>
<status endtime="20170706 20:06:06.953" starttime="20170706 20:06:06.953" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}'=='True'</arg>
<arg>Recover Quiesced Host</arg>
</arguments>
<status endtime="20170706 20:06:06.954" starttime="20170706 20:06:06.954" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_methods" name="Log Test Case Status">
<doc>Test case execution result history.</doc>
<kw library="BuiltIn" name="Get Variable Value">
<doc>Returns variable value or ``default`` if the variable does not exist.</doc>
<arguments>
<arg>${FFDC_DIR_PATH_STYLE}</arg>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${FFDC_DIR_PATH_STYLE}</var>
</assign>
<msg level="INFO" timestamp="20170706 20:06:06.964">${FFDC_DIR_PATH_STYLE} = </msg>
<status endtime="20170706 20:06:06.964" starttime="20170706 20:06:06.954" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Get Variable Value">
<doc>Returns variable value or ``default`` if the variable does not exist.</doc>
<arguments>
<arg>${FFDC_DIR_PATH}</arg>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${FFDC_DIR_PATH}</var>
</assign>
<msg level="INFO" timestamp="20170706 20:06:06.972">${FFDC_DIR_PATH} = </msg>
<status endtime="20170706 20:06:06.972" starttime="20170706 20:06:06.964" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${FFDC_DIR_PATH}' == '${EMPTY}'</arg>
<arg>Set FFDC Defaults</arg>
</arguments>
<kw library="openbmc_ffdc" name="Set Ffdc Defaults">
<doc>Set a default value for ffdc_dir_path and ffdc_prefix if they don't</doc>
<kw library="openbmc_ffdc_utils" name="Get Current Time Stamp">
<doc>Get the current time stamp data</doc>
<kw library="DateTime" name="Get Current Date">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20170706 20:06:06.974">${cur_time} = 2017-07-06 20:06:06:973601</msg>
<status endtime="20170706 20:06:06.974" starttime="20170706 20:06:06.973" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_list" name="Get Strip String">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20170706 20:06:06.975">${cur_time} = 20170706200606973601</msg>
<status endtime="20170706 20:06:06.975" starttime="20170706 20:06:06.974" status="PASS"></status>
</kw>
<status endtime="20170706 20:06:06.975" starttime="20170706 20:06:06.973" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170706 20:06:06.979">${FFDC_TIME} = 20170706200606973601</msg>
<kw library="openbmc_ffdc_utils" name="Get Test Dir and Name">
<doc>SUITE_NAME and TEST_NAME are automatic variables</doc>
<kw library="openbmc_ffdc_list" name="Get Strip String">
<doc>########################################################################</doc>
<arguments>
<arg>${SUITE_NAME}</arg>
</arguments>
<assign>
<var>${suite_name}</var>
</assign>
<msg level="INFO" timestamp="20170706 20:06:06.981">${suite_name} = TestsSecurityTestSsl</msg>
<status endtime="20170706 20:06:06.981" starttime="20170706 20:06:06.980" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${FFDC_TIME}_</arg>
<arg>${suite_name}</arg>
</arguments>
<assign>
<var>${suite_name}</var>
</assign>
<msg level="INFO" timestamp="20170706 20:06:06.981">${suite_name} = 20170706200606973601_TestsSecurityTestSsl</msg>
<status endtime="20170706 20:06:06.981" starttime="20170706 20:06:06.981" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_list" name="Get Strip String">
<doc>########################################################################</doc>
<arguments>
<arg>${TEST_NAME}</arg>
</arguments>
<assign>
<var>${test_name}</var>
</assign>
<msg level="INFO" timestamp="20170706 20:06:06.982">${test_name} = TestSSLConnection</msg>
<status endtime="20170706 20:06:06.982" starttime="20170706 20:06:06.982" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${FFDC_TIME}_</arg>
<arg>${test_name}</arg>
</arguments>
<assign>
<var>${test_name}</var>
</assign>
<msg level="INFO" timestamp="20170706 20:06:06.983">${test_name} = 20170706200606973601_TestSSLConnection</msg>
<status endtime="20170706 20:06:06.983" starttime="20170706 20:06:06.982" status="PASS"></status>
</kw>
<status endtime="20170706 20:06:06.983" starttime="20170706 20:06:06.980" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170706 20:06:06.983">${FFDC_DIR_PATH} = /tmp/fspcibld/956/obmc-robot/logs/20170706200606973601_TestsSecurityTestSsl/20170706200606973601_TestSSLConnection/</msg>
<msg level="INFO" timestamp="20170706 20:06:06.987">${FFDC_PREFIX} = 20170706200606973601_</msg>
<status endtime="20170706 20:06:06.988" starttime="20170706 20:06:06.973" status="PASS"></status>
</kw>
<status endtime="20170706 20:06:06.988" starttime="20170706 20:06:06.972" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${FFDC_DIR_PATH_STYLE}' == '${1}'</arg>
<arg>Run Keywords</arg>
<arg>Set Global Variable</arg>
<arg>${FFDC_LOG_PATH}</arg>
<arg>${FFDC_DIR_PATH}</arg>
<arg>AND</arg>
<arg>Set Global Variable</arg>
<arg>${TEST_HISTORY}</arg>
<arg>${FFDC_DIR_PATH}test_history.txt</arg>
</arguments>
<status endtime="20170706 20:06:06.988" starttime="20170706 20:06:06.988" status="PASS"></status>
</kw>
<kw library="OperatingSystem" name="Create Directory">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>${FFDC_LOG_PATH}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170706 20:06:06.989">Created directory '&lt;a href="file:///tmp/fspcibld/956/obmc-robot/logs"&gt;/tmp/fspcibld/956/obmc-robot/logs&lt;/a&gt;'.</msg>
<status endtime="20170706 20:06:06.989" starttime="20170706 20:06:06.989" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>OperatingSystem.File Should Exist</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<assign>
<var>${exist}</var>
</assign>
<kw library="OperatingSystem" name="File Should Exist">
<doc>Fails unless the given ``path`` points to an existing file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
</arguments>
<msg level="FAIL" timestamp="20170706 20:06:06.990">File '/tmp/fspcibld/956/obmc-robot/logs/test_history.txt' does not exist.</msg>
<status endtime="20170706 20:06:06.990" starttime="20170706 20:06:06.990" status="FAIL"></status>
</kw>
<msg level="INFO" timestamp="20170706 20:06:06.990">${exist} = False</msg>
<status endtime="20170706 20:06:06.990" starttime="20170706 20:06:06.989" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${exist}' == '${False}'</arg>
<arg>Create File</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<kw library="OperatingSystem" name="Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170706 20:06:06.992">Created file '&lt;a href="file:///tmp/fspcibld/956/obmc-robot/logs/test_history.txt"&gt;/tmp/fspcibld/956/obmc-robot/logs/test_history.txt&lt;/a&gt;'.</msg>
<status endtime="20170706 20:06:06.992" starttime="20170706 20:06:06.991" status="PASS"></status>
</kw>
<status endtime="20170706 20:06:06.992" starttime="20170706 20:06:06.991" status="PASS"></status>
</kw>
<kw library="gen_robot_print" name="Rpvars">
<arguments>
<arg>TEST_HISTORY</arg>
</arguments>
<status endtime="20170706 20:06:06.992" starttime="20170706 20:06:06.992" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Get Current Time Stamp">
<doc>Get the current time stamp data</doc>
<assign>
<var>${cur_time}</var>
</assign>
<kw library="DateTime" name="Get Current Date">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20170706 20:06:06.994">${cur_time} = 2017-07-06 20:06:06:993633</msg>
<status endtime="20170706 20:06:06.994" starttime="20170706 20:06:06.993" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_list" name="Get Strip String">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20170706 20:06:06.995">${cur_time} = 20170706200606993633</msg>
<status endtime="20170706 20:06:06.995" starttime="20170706 20:06:06.994" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170706 20:06:06.995">${cur_time} = 20170706200606993633</msg>
<status endtime="20170706 20:06:06.995" starttime="20170706 20:06:06.993" status="PASS"></status>
</kw>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
<arg>${cur_time}:${SUITE_NAME}:${TEST_NAME}:${TEST_STATUS}${\n}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170706 20:06:06.997">Appended to file '&lt;a href="file:///tmp/fspcibld/956/obmc-robot/logs/test_history.txt"&gt;/tmp/fspcibld/956/obmc-robot/logs/test_history.txt&lt;/a&gt;'.</msg>
<status endtime="20170706 20:06:06.997" starttime="20170706 20:06:06.996" status="PASS"></status>
</kw>
<status endtime="20170706 20:06:06.998" starttime="20170706 20:06:06.954" status="PASS"></status>
</kw>
<status endtime="20170706 20:06:06.998" starttime="20170706 20:06:06.617" status="PASS"></status>
</kw>
<doc>This testcase is for testing the SSL connection to the
OpenBMC machine.</doc>
<tags>
<tag>Test_SSL_Connection</tag>
</tags>
<status critical="yes" endtime="20170706 20:06:06.998" starttime="20170706 20:06:06.368" status="PASS"></status>
</test>
<kw library="RequestsLibrary.RequestsKeywords" name="Delete All Sessions" type="teardown">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20170706 20:06:06.999">Delete All Sessions</msg>
<status endtime="20170706 20:06:06.999" starttime="20170706 20:06:06.999" status="PASS"></status>
</kw>
<doc>This testsuite is for testing SSL connection to OpenBMC</doc>
<status endtime="20170706 20:06:06.999" starttime="20170706 20:06:06.276" status="PASS"></status>
</suite>
<status endtime="20170706 20:06:07.002" starttime="20170706 20:06:06.273" status="PASS"></status>
</suite>
<suite source="/tmp/fspcibld/956/obmc-robot/tests/test_basic_poweron.robot" name="Test Basic Poweron" id="s1-s2">
<test name="Power On Test" id="s1-s2-t1">
<kw library="utils" name="Start SOL Console Logging" type="setup">
<doc>Start system console log to file.</doc>
<kw library="utils" name="Create OS Console File Path">
<doc>Create OS console file path name and return it.</doc>
<arguments>
<arg>${log_file_path}</arg>
</arguments>
<assign>
<var>${log_file_path}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>/tmp/${OPENBMC_HOST}_os_console</arg>
</arguments>
<assign>
<var>${default_file_path}</var>
</assign>
<msg level="INFO" timestamp="20170706 20:06:07.055">${default_file_path} = /tmp/9.3.21.61_os_console</msg>
<status endtime="20170706 20:06:07.055" starttime="20170706 20:06:07.055" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Set Variable If">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${log_file_path}' == '${EMPTY}'</arg>
<arg>${default_file_path}</arg>
<arg>${log_file_path}</arg>
</arguments>
<assign>
<var>${log_file_path}</var>
</assign>
<msg level="INFO" timestamp="20170706 20:06:07.056">${log_file_path} = /tmp/9.3.21.61_os_console</msg>
<status endtime="20170706 20:06:07.056" starttime="20170706 20:06:07.055" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170706 20:06:07.056">${log_file_path} = /tmp/9.3.21.61_os_console</msg>
<status endtime="20170706 20:06:07.056" starttime="20170706 20:06:07.054" status="PASS"></status>
</kw>
<kw library="utils" name="Stop SOL Console Logging">
<doc>Stop system console logging and return log output.</doc>
<arguments>
<arg>${log_file_path}</arg>
<arg>return_data=${return_data}</arg>
</arguments>
<assign>
<var>${log_output}</var>
</assign>
<kw library="utils" name="Create OS Console File Path">
<doc>Create OS console file path name and return it.</doc>
<arguments>
<arg>${log_file_path}</arg>
</arguments>
<assign>
<var>${log_file_path}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>/tmp/${OPENBMC_HOST}_os_console</arg>
</arguments>
<assign>
<var>${default_file_path}</var>
</assign>
<msg level="INFO" timestamp="20170706 20:06:07.058">${default_file_path} = /tmp/9.3.21.61_os_console</msg>
<status endtime="20170706 20:06:07.058" starttime="20170706 20:06:07.058" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Set Variable If">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${log_file_path}' == '${EMPTY}'</arg>
<arg>${default_file_path}</arg>
<arg>${log_file_path}</arg>
</arguments>
<assign>
<var>${log_file_path}</var>
</assign>
<msg level="INFO" timestamp="20170706 20:06:07.059">${log_file_path} = /tmp/9.3.21.61_os_console</msg>
<status endtime="20170706 20:06:07.059" starttime="20170706 20:06:07.058" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170706 20:06:07.059">${log_file_path} = /tmp/9.3.21.61_os_console</msg>
<status endtime="20170706 20:06:07.059" starttime="20170706 20:06:07.057" status="PASS"></status>
</kw>
<kw library="utils" name="Create OS Console Command String">
<doc>Return a command string to start OS console logging.</doc>
<assign>
<var>${search_string}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>which ssh_pw 2&gt;&amp;1</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170706 20:06:07.060">${cmd_buf} = which ssh_pw 2&gt;&amp;1</msg>
<status endtime="20170706 20:06:07.060" starttime="20170706 20:06:07.060" status="PASS"></status>
</kw>
<kw library="gen_robot_print" name="Rdpissuing">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status endtime="20170706 20:06:07.060" starttime="20170706 20:06:07.060" status="PASS"></status>
</kw>
<kw library="OperatingSystem" name="Run And Return Rc And Output">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg level="INFO" timestamp="20170706 20:06:07.066">Running command 'which ssh_pw 2&gt;&amp;1'.</msg>
<msg level="INFO" timestamp="20170706 20:06:07.069">${rc} = 0</msg>
<msg level="INFO" timestamp="20170706 20:06:07.069">${output} = /tmp/fspcibld/956/obmc-robot/.tox/witherspoon/bin/ssh_pw</msg>
<status endtime="20170706 20:06:07.069" starttime="20170706 20:06:07.061" status="PASS"></status>
</kw>
<kw library="gen_robot_print" name="Rdpvars">
<arguments>
<arg>rc</arg>
<arg>output</arg>
</arguments>
<status endtime="20170706 20:06:07.072" starttime="20170706 20:06:07.071" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${rc}</arg>
<arg>${0}</arg>
<arg>msg=${output}\n</arg>
</arguments>
<status endtime="20170706 20:06:07.073" starttime="20170706 20:06:07.072" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>ssh_pw ${OPENBMC_PASSWORD} -p 2200</arg>
<arg>-o "StrictHostKeyChecking no" ${OPENBMC_USERNAME}@${OPENBMC_HOST}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170706 20:06:07.073">${cmd_buf} = ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.3.21.61</msg>
<status endtime="20170706 20:06:07.073" starttime="20170706 20:06:07.073" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170706 20:06:07.074">${search_string} = ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.3.21.61</msg>
<status endtime="20170706 20:06:07.074" starttime="20170706 20:06:07.059" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>echo $(ps -ef | egrep '${search_string}'</arg>
<arg>| egrep -v grep | cut -c10-14)</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170706 20:06:07.074">${cmd_buf} = echo $(ps -ef | egrep 'ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.3.21.61' | egrep -v grep | cut -c10-14)</msg>
<status endtime="20170706 20:06:07.074" starttime="20170706 20:06:07.074" status="PASS"></status>
</kw>
<kw library="gen_robot_print" name="Rdpissuing">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status endtime="20170706 20:06:07.075" starttime="20170706 20:06:07.075" status="PASS"></status>
</kw>
<kw library="OperatingSystem" name="Run And Return Rc And Output">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${os_con_pid}</var>
</assign>
<msg level="INFO" timestamp="20170706 20:06:07.078">Running command 'echo $(ps -ef | egrep 'ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.3.21.61' | egrep -v grep | cut -c10-14) 2&gt;&amp;1'.</msg>
<msg level="INFO" timestamp="20170706 20:06:07.091">${rc} = 0</msg>
<msg level="INFO" timestamp="20170706 20:06:07.091">${os_con_pid} = </msg>
<status endtime="20170706 20:06:07.091" starttime="20170706 20:06:07.075" status="PASS"></status>
</kw>
<kw library="gen_robot_print" name="Rdpvars">
<arguments>
<arg>os_con_pid</arg>
</arguments>
<status endtime="20170706 20:06:07.094" starttime="20170706 20:06:07.093" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>kill -9 ${os_con_pid}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170706 20:06:07.094">${cmd_buf} = kill -9 </msg>
<status endtime="20170706 20:06:07.094" starttime="20170706 20:06:07.094" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${os_con_pid}' != '${EMPTY}'</arg>
<arg>Rdpissuing</arg>
<arg>${cmd_buf}</arg>
</arguments>
<status endtime="20170706 20:06:07.095" starttime="20170706 20:06:07.095" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${os_con_pid}' != '${EMPTY}'</arg>
<arg>Run And Return Rc And Output</arg>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg level="INFO" timestamp="20170706 20:06:07.096">${rc} = None</msg>
<msg level="INFO" timestamp="20170706 20:06:07.096">${output} = None</msg>
<status endtime="20170706 20:06:07.096" starttime="20170706 20:06:07.096" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${os_con_pid}' != '${EMPTY}'</arg>
<arg>Rdpvars</arg>
<arg>rc</arg>
<arg>output</arg>
</arguments>
<status endtime="20170706 20:06:07.097" starttime="20170706 20:06:07.097" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${targ_file_path}' != '${EMPTY}'</arg>
<arg>Run Keyword And Ignore Error</arg>
<arg>Copy File</arg>
<arg>${log_file_path}</arg>
<arg>${targ_file_path}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Copy File</arg>
<arg>${log_file_path}</arg>
<arg>${targ_file_path}</arg>
</arguments>
<kw library="OperatingSystem" name="Copy File">
<doc>Copies the source file into the destination.</doc>
<arguments>
<arg>${log_file_path}</arg>
<arg>${targ_file_path}</arg>
</arguments>
<msg level="FAIL" timestamp="20170706 20:06:07.099">Source file '/tmp/9.3.21.61_os_console' does not exist.</msg>
<status endtime="20170706 20:06:07.099" starttime="20170706 20:06:07.098" status="FAIL"></status>
</kw>
<status endtime="20170706 20:06:07.099" starttime="20170706 20:06:07.098" status="PASS"></status>
</kw>
<status endtime="20170706 20:06:07.099" starttime="20170706 20:06:07.097" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${output}</var>
</assign>
<msg level="INFO" timestamp="20170706 20:06:07.100">${output} = </msg>
<status endtime="20170706 20:06:07.100" starttime="20170706 20:06:07.099" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${debug}^1</arg>
</arguments>
<assign>
<var>${loc_quiet}</var>
</assign>
<msg level="INFO" timestamp="20170706 20:06:07.100">${loc_quiet} = 1</msg>
<status endtime="20170706 20:06:07.100" starttime="20170706 20:06:07.100" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${return_data}' == '${1}'</arg>
<arg>Cmd Fnc</arg>
<arg>cat ${log_file_path}</arg>
<arg>quiet=${loc_quiet}</arg>
<arg>print_output=${0}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<kw library="gen_cmd" name="Cmd Fnc">
<doc>Run the given command in a shell and return the shell return code.</doc>
<arguments>
<arg>cat ${log_file_path}</arg>
<arg>quiet=${loc_quiet}</arg>
<arg>print_output=${0}</arg>
</arguments>
<status endtime="20170706 20:06:07.530" starttime="20170706 20:06:07.101" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170706 20:06:07.530">${rc} = 1</msg>
<msg level="INFO" timestamp="20170706 20:06:07.531">${output} = cat: /tmp/9.3.21.61_os_console: No such file or directory
</msg>
<status endtime="20170706 20:06:07.531" starttime="20170706 20:06:07.100" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170706 20:06:07.531">${log_output} = cat: /tmp/9.3.21.61_os_console: No such file or directory
</msg>
<status endtime="20170706 20:06:07.531" starttime="20170706 20:06:07.056" status="PASS"></status>
</kw>
<kw library="OperatingSystem" name="Create File">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${log_file_path}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170706 20:06:07.534">Created file '&lt;a href="file:///tmp/9.3.21.61_os_console"&gt;/tmp/9.3.21.61_os_console&lt;/a&gt;'.</msg>
<status endtime="20170706 20:06:07.534" starttime="20170706 20:06:07.533" status="PASS"></status>
</kw>
<kw library="utils" name="Create OS Console Command String">
<doc>Return a command string to start OS console logging.</doc>
<assign>
<var>${sub_cmd_buf}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>which ssh_pw 2&gt;&amp;1</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170706 20:06:07.535">${cmd_buf} = which ssh_pw 2&gt;&amp;1</msg>
<status endtime="20170706 20:06:07.535" starttime="20170706 20:06:07.535" status="PASS"></status>
</kw>
<kw library="gen_robot_print" name="Rdpissuing">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status endtime="20170706 20:06:07.535" starttime="20170706 20:06:07.535" status="PASS"></status>
</kw>
<kw library="OperatingSystem" name="Run And Return Rc And Output">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg level="INFO" timestamp="20170706 20:06:07.539">Running command 'which ssh_pw 2&gt;&amp;1'.</msg>
<msg level="INFO" timestamp="20170706 20:06:07.542">${rc} = 0</msg>
<msg level="INFO" timestamp="20170706 20:06:07.542">${output} = /tmp/fspcibld/956/obmc-robot/.tox/witherspoon/bin/ssh_pw</msg>
<status endtime="20170706 20:06:07.542" starttime="20170706 20:06:07.536" status="PASS"></status>
</kw>
<kw library="gen_robot_print" name="Rdpvars">
<arguments>
<arg>rc</arg>
<arg>output</arg>
</arguments>
<status endtime="20170706 20:06:07.544" starttime="20170706 20:06:07.544" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${rc}</arg>
<arg>${0}</arg>
<arg>msg=${output}\n</arg>
</arguments>
<status endtime="20170706 20:06:07.545" starttime="20170706 20:06:07.545" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>ssh_pw ${OPENBMC_PASSWORD} -p 2200</arg>
<arg>-o "StrictHostKeyChecking no" ${OPENBMC_USERNAME}@${OPENBMC_HOST}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170706 20:06:07.546">${cmd_buf} = ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.3.21.61</msg>
<status endtime="20170706 20:06:07.546" starttime="20170706 20:06:07.545" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170706 20:06:07.546">${sub_cmd_buf} = ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.3.21.61</msg>
<status endtime="20170706 20:06:07.546" starttime="20170706 20:06:07.534" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${sub_cmd_buf} &gt; ${log_file_path} 2&gt;&amp;1 &amp;</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170706 20:06:07.547">${cmd_buf} = ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.3.21.61 &gt; /tmp/9.3.21.61_os_console 2&gt;&amp;1 &amp;</msg>
<status endtime="20170706 20:06:07.547" starttime="20170706 20:06:07.547" status="PASS"></status>
</kw>
<kw library="gen_robot_print" name="Rdpissuing">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status endtime="20170706 20:06:07.548" starttime="20170706 20:06:07.547" status="PASS"></status>
</kw>
<kw library="OperatingSystem" name="Run And Return Rc And Output">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg level="INFO" timestamp="20170706 20:06:07.552">Running command 'ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.3.21.61 &gt; /tmp/9.3.21.61_os_console 2&gt;&amp;1 &amp;'.</msg>
<msg level="INFO" timestamp="20170706 20:06:07.555">${rc} = 0</msg>
<msg level="INFO" timestamp="20170706 20:06:07.555">${output} = </msg>
<status endtime="20170706 20:06:07.555" starttime="20170706 20:06:07.548" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${rc}</arg>
<arg>${0}</arg>
</arguments>
<status endtime="20170706 20:06:07.558" starttime="20170706 20:06:07.557" status="PASS"></status>
</kw>
<status endtime="20170706 20:06:07.558" starttime="20170706 20:06:07.053" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Repeat Keyword">
<doc>Executes the specified keyword multiple times.</doc>
<arguments>
<arg>${LOOP_COUNT} times</arg>
<arg>Host Off And On</arg>
</arguments>
<msg level="INFO" timestamp="20170706 20:06:07.559">Repeating keyword, round 1/2.</msg>
<kw name="Host Off And On">
<doc>Verify power off and on.</doc>
<kw library="state_manager" name="Initiate Host PowerOff">
<doc>Initiate host power off.</doc>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=${HOST_POWEROFF_TRANS}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20170706 20:06:07.560">${args} = {u'data': 'xyz.openbmc_project.State.Host.Transition.Off'}</msg>
<status endtime="20170706 20:06:07.561" starttime="20170706 20:06:07.560" status="PASS"></status>
</kw>
<kw library="rest_client" name="Write Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>RequestedHostTransition</arg>
<arg>data=${args}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170706 20:06:07.562">${base_uri} = /xyz/openbmc_project/state/host0/</msg>
<status endtime="20170706 20:06:07.562" starttime="20170706 20:06:07.562" status="PASS"></status>
</kw>
<kw library="rest_client" name="OpenBMC Put Request">
<arguments>
<arg>${base_uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170706 20:06:07.566">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170706 20:06:07.567" starttime="20170706 20:06:07.566" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170706 20:06:07.567">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170706 20:06:07.567" starttime="20170706 20:06:07.567" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170706 20:06:07.568">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170706 20:06:07.568" starttime="20170706 20:06:07.568" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170706 20:06:07.569">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170706 20:06:07.569" starttime="20170706 20:06:07.568" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170706 20:06:08.102">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170706 20:06:08.103" starttime="20170706 20:06:07.570" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170706 20:06:08.103">${status} = PASS</msg>
<msg level="INFO" timestamp="20170706 20:06:08.103">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170706 20:06:08.103" starttime="20170706 20:06:07.569" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170706 20:06:08.103">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170706 20:06:08.103" starttime="20170706 20:06:08.103" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170706 20:06:08.104">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170706 20:06:08.104" starttime="20170706 20:06:08.104" status="PASS"></status>
</kw>
<status endtime="20170706 20:06:08.104" starttime="20170706 20:06:07.565" status="PASS"></status>
</kw>
<status endtime="20170706 20:06:08.104" starttime="20170706 20:06:07.564" status="PASS"></status>
</kw>
<status endtime="20170706 20:06:08.105" starttime="20170706 20:06:07.563" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170706 20:06:08.105">${base_uri} = /xyz/openbmc_project/state/host0//attr/RequestedHostTransition</msg>
<status endtime="20170706 20:06:08.105" starttime="20170706 20:06:08.105" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170706 20:06:08.106">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170706 20:06:08.106" starttime="20170706 20:06:08.105" status="PASS"></status>
</kw>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status endtime="20170706 20:06:08.106" starttime="20170706 20:06:08.106" status="PASS"></status>
</kw>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Put</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170706 20:06:08.108">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, method:Put, args:{u'data': {u'data': 'xyz.openbmc_project.State.Host.Transition.Off'}, u'headers': {u'Content-T...</msg>
<status endtime="20170706 20:06:08.108" starttime="20170706 20:06:08.107" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170706 20:06:08.109">URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, method:Put, args:{u'data': {u'data': 'xyz.openbmc_project.State.Host.Transition.Off'}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status endtime="20170706 20:06:08.109" starttime="20170706 20:06:08.109" status="PASS"></status>
</kw>
<status endtime="20170706 20:06:08.109" starttime="20170706 20:06:08.108" status="PASS"></status>
</kw>
<status endtime="20170706 20:06:08.109" starttime="20170706 20:06:08.107" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Put Request">
<doc>Send a PUT request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170706 20:06:08.606">Put Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, data={"data": "xyz.openbmc_project.State.Host.Transition.Off"},                     headers={u'Content-Type': u'application/json'}, allow_redirects=True </msg>
<msg level="INFO" timestamp="20170706 20:06:08.606">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170706 20:06:08.606" starttime="20170706 20:06:08.110" status="PASS"></status>
</kw>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170706 20:06:08.611">${msg} = Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170706 20:06:08.611" starttime="20170706 20:06:08.608" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170706 20:06:08.612">Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170706 20:06:08.612" starttime="20170706 20:06:08.612" status="PASS"></status>
</kw>
<status endtime="20170706 20:06:08.612" starttime="20170706 20:06:08.611" status="PASS"></status>
</kw>
<status endtime="20170706 20:06:08.612" starttime="20170706 20:06:08.607" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170706 20:06:08.613">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170706 20:06:08.613" starttime="20170706 20:06:07.562" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170706 20:06:08.613">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170706 20:06:08.613" starttime="20170706 20:06:08.613" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${json}</var>
</assign>
<msg level="INFO" timestamp="20170706 20:06:08.614">To JSON using : content={
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170706 20:06:08.614">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170706 20:06:08.614">${json} = {u'data': None, u'status': u'ok', u'message': u'200 OK'}</msg>
<status endtime="20170706 20:06:08.614" starttime="20170706 20:06:08.613" status="PASS"></status>
</kw>
<status endtime="20170706 20:06:08.614" starttime="20170706 20:06:07.561" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${wait}' == '${0}'</arg>
<arg>Return From Keyword</arg>
</arguments>
<status endtime="20170706 20:06:08.615" starttime="20170706 20:06:08.614" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>3 min</arg>
<arg>10 sec</arg>
<arg>Is Host Off</arg>
</arguments>
<kw library="state_manager" name="Is Host Off">
<doc>Check if host state is "Off".</doc>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170706 20:06:08.619">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170706 20:06:08.619" starttime="20170706 20:06:08.619" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170706 20:06:08.620">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170706 20:06:08.620" starttime="20170706 20:06:08.620" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170706 20:06:08.621">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170706 20:06:08.621" starttime="20170706 20:06:08.620" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170706 20:06:08.621">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170706 20:06:08.621" starttime="20170706 20:06:08.621" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170706 20:06:09.771">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170706 20:06:09.772" starttime="20170706 20:06:08.622" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170706 20:06:09.772">${status} = PASS</msg>
<msg level="INFO" timestamp="20170706 20:06:09.772">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170706 20:06:09.772" starttime="20170706 20:06:08.621" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170706 20:06:09.773">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170706 20:06:09.773" starttime="20170706 20:06:09.772" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170706 20:06:09.773">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170706 20:06:09.773" starttime="20170706 20:06:09.773" status="PASS"></status>
</kw>
<status endtime="20170706 20:06:09.774" starttime="20170706 20:06:08.618" status="PASS"></status>
</kw>
<status endtime="20170706 20:06:09.774" starttime="20170706 20:06:08.618" status="PASS"></status>
</kw>
<status endtime="20170706 20:06:09.774" starttime="20170706 20:06:08.617" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170706 20:06:09.774">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170706 20:06:09.774" starttime="20170706 20:06:09.774" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170706 20:06:09.777">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170706 20:06:09.777" starttime="20170706 20:06:09.776" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170706 20:06:09.778">URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170706 20:06:09.778" starttime="20170706 20:06:09.777" status="PASS"></status>
</kw>
<status endtime="20170706 20:06:09.778" starttime="20170706 20:06:09.777" status="PASS"></status>
</kw>
<status endtime="20170706 20:06:09.778" starttime="20170706 20:06:09.775" status="PASS"></status>
</kw>
<status endtime="20170706 20:06:09.778" starttime="20170706 20:06:09.775" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170706 20:06:13.052">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170706 20:06:13.053">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170706 20:06:13.053" starttime="20170706 20:06:09.778" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170706 20:06:13.055">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170706 20:06:13.055" starttime="20170706 20:06:13.054" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170706 20:06:13.056">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170706 20:06:13.056" starttime="20170706 20:06:13.056" status="PASS"></status>
</kw>
<status endtime="20170706 20:06:13.056" starttime="20170706 20:06:13.055" status="PASS"></status>
</kw>
<status endtime="20170706 20:06:13.056" starttime="20170706 20:06:13.054" status="PASS"></status>
</kw>
<status endtime="20170706 20:06:13.056" starttime="20170706 20:06:13.053" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170706 20:06:13.057">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170706 20:06:13.057" starttime="20170706 20:06:08.617" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170706 20:06:13.057">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170706 20:06:13.057" starttime="20170706 20:06:13.057" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170706 20:06:13.058">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170706 20:06:13.058">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170706 20:06:13.058">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'status': u'ok', u'message': u'200 OK'}</msg>
<status endtime="20170706 20:06:13.058" starttime="20170706 20:06:13.057" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170706 20:06:13.058">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170706 20:06:13.058" starttime="20170706 20:06:08.616" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170706 20:06:13.059">${host_state} = Running</msg>
<status endtime="20170706 20:06:13.059" starttime="20170706 20:06:08.616" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${host_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170706 20:06:13.059">Off != Running</msg>
<status endtime="20170706 20:06:13.059" starttime="20170706 20:06:13.059" status="FAIL"></status>
</kw>
<status endtime="20170706 20:06:13.060" starttime="20170706 20:06:08.615" status="FAIL"></status>
</kw>
<kw library="state_manager" name="Is Host Off">
<doc>Check if host state is "Off".</doc>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170706 20:06:23.065">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170706 20:06:23.066" starttime="20170706 20:06:23.065" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170706 20:06:23.066">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170706 20:06:23.066" starttime="20170706 20:06:23.066" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170706 20:06:23.067">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170706 20:06:23.067" starttime="20170706 20:06:23.067" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170706 20:06:23.068">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170706 20:06:23.068" starttime="20170706 20:06:23.067" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170706 20:06:23.256">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170706 20:06:23.256" starttime="20170706 20:06:23.068" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170706 20:06:23.256">${status} = PASS</msg>
<msg level="INFO" timestamp="20170706 20:06:23.256">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170706 20:06:23.256" starttime="20170706 20:06:23.068" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170706 20:06:23.257">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170706 20:06:23.257" starttime="20170706 20:06:23.257" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170706 20:06:23.258">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170706 20:06:23.258" starttime="20170706 20:06:23.257" status="PASS"></status>
</kw>
<status endtime="20170706 20:06:23.258" starttime="20170706 20:06:23.064" status="PASS"></status>
</kw>
<status endtime="20170706 20:06:23.258" starttime="20170706 20:06:23.063" status="PASS"></status>
</kw>
<status endtime="20170706 20:06:23.258" starttime="20170706 20:06:23.063" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170706 20:06:23.259">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170706 20:06:23.259" starttime="20170706 20:06:23.258" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170706 20:06:23.261">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170706 20:06:23.261" starttime="20170706 20:06:23.260" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170706 20:06:23.262">URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170706 20:06:23.262" starttime="20170706 20:06:23.261" status="PASS"></status>
</kw>
<status endtime="20170706 20:06:23.262" starttime="20170706 20:06:23.261" status="PASS"></status>
</kw>
<status endtime="20170706 20:06:23.262" starttime="20170706 20:06:23.259" status="PASS"></status>
</kw>
<status endtime="20170706 20:06:23.262" starttime="20170706 20:06:23.259" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170706 20:06:23.333">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170706 20:06:23.333">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170706 20:06:23.333" starttime="20170706 20:06:23.262" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170706 20:06:23.335">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170706 20:06:23.335" starttime="20170706 20:06:23.335" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170706 20:06:23.336">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170706 20:06:23.337" starttime="20170706 20:06:23.336" status="PASS"></status>
</kw>
<status endtime="20170706 20:06:23.337" starttime="20170706 20:06:23.335" status="PASS"></status>
</kw>
<status endtime="20170706 20:06:23.337" starttime="20170706 20:06:23.334" status="PASS"></status>
</kw>
<status endtime="20170706 20:06:23.337" starttime="20170706 20:06:23.334" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170706 20:06:23.337">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170706 20:06:23.337" starttime="20170706 20:06:23.062" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170706 20:06:23.338">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170706 20:06:23.338" starttime="20170706 20:06:23.337" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170706 20:06:23.338">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170706 20:06:23.338">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170706 20:06:23.339">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'status': u'ok', u'message': u'200 OK'}</msg>
<status endtime="20170706 20:06:23.339" starttime="20170706 20:06:23.338" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170706 20:06:23.339">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170706 20:06:23.339" starttime="20170706 20:06:23.062" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170706 20:06:23.339">${host_state} = Running</msg>
<status endtime="20170706 20:06:23.339" starttime="20170706 20:06:23.061" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${host_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170706 20:06:23.340">Off != Running</msg>
<status endtime="20170706 20:06:23.340" starttime="20170706 20:06:23.339" status="FAIL"></status>
</kw>
<status endtime="20170706 20:06:23.340" starttime="20170706 20:06:23.060" status="FAIL"></status>
</kw>
<kw library="state_manager" name="Is Host Off">
<doc>Check if host state is "Off".</doc>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170706 20:06:33.345">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170706 20:06:33.346" starttime="20170706 20:06:33.345" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170706 20:06:33.346">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170706 20:06:33.346" starttime="20170706 20:06:33.346" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170706 20:06:33.347">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170706 20:06:33.347" starttime="20170706 20:06:33.347" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170706 20:06:33.348">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170706 20:06:33.348" starttime="20170706 20:06:33.347" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170706 20:06:33.532">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170706 20:06:33.533" starttime="20170706 20:06:33.349" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170706 20:06:33.533">${status} = PASS</msg>
<msg level="INFO" timestamp="20170706 20:06:33.533">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170706 20:06:33.533" starttime="20170706 20:06:33.348" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170706 20:06:33.534">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170706 20:06:33.534" starttime="20170706 20:06:33.533" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170706 20:06:33.534">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170706 20:06:33.535" starttime="20170706 20:06:33.534" status="PASS"></status>
</kw>
<status endtime="20170706 20:06:33.535" starttime="20170706 20:06:33.345" status="PASS"></status>
</kw>
<status endtime="20170706 20:06:33.535" starttime="20170706 20:06:33.344" status="PASS"></status>
</kw>
<status endtime="20170706 20:06:33.535" starttime="20170706 20:06:33.343" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170706 20:06:33.536">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170706 20:06:33.536" starttime="20170706 20:06:33.535" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170706 20:06:33.538">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170706 20:06:33.538" starttime="20170706 20:06:33.537" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170706 20:06:33.539">URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170706 20:06:33.539" starttime="20170706 20:06:33.539" status="PASS"></status>
</kw>
<status endtime="20170706 20:06:33.540" starttime="20170706 20:06:33.538" status="PASS"></status>
</kw>
<status endtime="20170706 20:06:33.540" starttime="20170706 20:06:33.536" status="PASS"></status>
</kw>
<status endtime="20170706 20:06:33.540" starttime="20170706 20:06:33.536" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170706 20:06:33.607">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170706 20:06:33.607">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170706 20:06:33.607" starttime="20170706 20:06:33.540" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170706 20:06:33.609">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170706 20:06:33.609" starttime="20170706 20:06:33.609" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170706 20:06:33.610">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170706 20:06:33.610" starttime="20170706 20:06:33.610" status="PASS"></status>
</kw>
<status endtime="20170706 20:06:33.611" starttime="20170706 20:06:33.609" status="PASS"></status>
</kw>
<status endtime="20170706 20:06:33.611" starttime="20170706 20:06:33.608" status="PASS"></status>
</kw>
<status endtime="20170706 20:06:33.611" starttime="20170706 20:06:33.607" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170706 20:06:33.611">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170706 20:06:33.611" starttime="20170706 20:06:33.343" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170706 20:06:33.612">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170706 20:06:33.612" starttime="20170706 20:06:33.611" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170706 20:06:33.612">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170706 20:06:33.612">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170706 20:06:33.612">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'status': u'ok', u'message': u'200 OK'}</msg>
<status endtime="20170706 20:06:33.612" starttime="20170706 20:06:33.612" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170706 20:06:33.613">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170706 20:06:33.613" starttime="20170706 20:06:33.342" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170706 20:06:33.613">${host_state} = Running</msg>
<status endtime="20170706 20:06:33.613" starttime="20170706 20:06:33.342" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${host_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170706 20:06:33.614">Off != Running</msg>
<status endtime="20170706 20:06:33.614" starttime="20170706 20:06:33.613" status="FAIL"></status>
</kw>
<status endtime="20170706 20:06:33.614" starttime="20170706 20:06:33.341" status="FAIL"></status>
</kw>
<kw library="state_manager" name="Is Host Off">
<doc>Check if host state is "Off".</doc>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170706 20:06:43.620">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170706 20:06:43.621" starttime="20170706 20:06:43.620" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170706 20:06:43.621">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170706 20:06:43.621" starttime="20170706 20:06:43.621" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170706 20:06:43.622">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170706 20:06:43.622" starttime="20170706 20:06:43.621" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170706 20:06:43.622">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170706 20:06:43.622" starttime="20170706 20:06:43.622" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170706 20:06:43.824">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170706 20:06:43.824" starttime="20170706 20:06:43.623" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170706 20:06:43.824">${status} = PASS</msg>
<msg level="INFO" timestamp="20170706 20:06:43.824">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170706 20:06:43.824" starttime="20170706 20:06:43.623" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170706 20:06:43.825">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170706 20:06:43.825" starttime="20170706 20:06:43.825" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170706 20:06:43.826">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170706 20:06:43.826" starttime="20170706 20:06:43.825" status="PASS"></status>
</kw>
<status endtime="20170706 20:06:43.826" starttime="20170706 20:06:43.619" status="PASS"></status>
</kw>
<status endtime="20170706 20:06:43.826" starttime="20170706 20:06:43.618" status="PASS"></status>
</kw>
<status endtime="20170706 20:06:43.826" starttime="20170706 20:06:43.618" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170706 20:06:43.827">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170706 20:06:43.827" starttime="20170706 20:06:43.826" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170706 20:06:43.829">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170706 20:06:43.829" starttime="20170706 20:06:43.828" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170706 20:06:43.830">URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170706 20:06:43.830" starttime="20170706 20:06:43.830" status="PASS"></status>
</kw>
<status endtime="20170706 20:06:43.830" starttime="20170706 20:06:43.829" status="PASS"></status>
</kw>
<status endtime="20170706 20:06:43.830" starttime="20170706 20:06:43.827" status="PASS"></status>
</kw>
<status endtime="20170706 20:06:43.830" starttime="20170706 20:06:43.827" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170706 20:06:43.896">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170706 20:06:43.896">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170706 20:06:43.896" starttime="20170706 20:06:43.830" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170706 20:06:43.899">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170706 20:06:43.899" starttime="20170706 20:06:43.898" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170706 20:06:43.900">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170706 20:06:43.900" starttime="20170706 20:06:43.899" status="PASS"></status>
</kw>
<status endtime="20170706 20:06:43.900" starttime="20170706 20:06:43.899" status="PASS"></status>
</kw>
<status endtime="20170706 20:06:43.900" starttime="20170706 20:06:43.898" status="PASS"></status>
</kw>
<status endtime="20170706 20:06:43.900" starttime="20170706 20:06:43.897" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170706 20:06:43.901">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170706 20:06:43.901" starttime="20170706 20:06:43.617" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170706 20:06:43.901">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170706 20:06:43.901" starttime="20170706 20:06:43.901" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170706 20:06:43.902">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170706 20:06:43.902">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170706 20:06:43.902">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'status': u'ok', u'message': u'200 OK'}</msg>
<status endtime="20170706 20:06:43.902" starttime="20170706 20:06:43.902" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170706 20:06:43.902">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170706 20:06:43.903" starttime="20170706 20:06:43.616" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170706 20:06:43.903">${host_state} = Running</msg>
<status endtime="20170706 20:06:43.903" starttime="20170706 20:06:43.616" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${host_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170706 20:06:43.903">Off != Running</msg>
<status endtime="20170706 20:06:43.904" starttime="20170706 20:06:43.903" status="FAIL"></status>
</kw>
<status endtime="20170706 20:06:43.904" starttime="20170706 20:06:43.615" status="FAIL"></status>
</kw>
<kw library="state_manager" name="Is Host Off">
<doc>Check if host state is "Off".</doc>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170706 20:06:53.909">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170706 20:06:53.910" starttime="20170706 20:06:53.909" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170706 20:06:53.910">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170706 20:06:53.910" starttime="20170706 20:06:53.910" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170706 20:06:53.911">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170706 20:06:53.911" starttime="20170706 20:06:53.911" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170706 20:06:53.912">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170706 20:06:53.912" starttime="20170706 20:06:53.911" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170706 20:06:54.099">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170706 20:06:54.099" starttime="20170706 20:06:53.912" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170706 20:06:54.099">${status} = PASS</msg>
<msg level="INFO" timestamp="20170706 20:06:54.099">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170706 20:06:54.099" starttime="20170706 20:06:53.912" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170706 20:06:54.099">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170706 20:06:54.100" starttime="20170706 20:06:54.099" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170706 20:06:54.101">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170706 20:06:54.101" starttime="20170706 20:06:54.100" status="PASS"></status>
</kw>
<status endtime="20170706 20:06:54.101" starttime="20170706 20:06:53.908" status="PASS"></status>
</kw>
<status endtime="20170706 20:06:54.101" starttime="20170706 20:06:53.908" status="PASS"></status>
</kw>
<status endtime="20170706 20:06:54.101" starttime="20170706 20:06:53.907" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170706 20:06:54.102">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170706 20:06:54.102" starttime="20170706 20:06:54.101" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170706 20:06:54.104">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170706 20:06:54.104" starttime="20170706 20:06:54.103" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170706 20:06:54.105">URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170706 20:06:54.105" starttime="20170706 20:06:54.104" status="PASS"></status>
</kw>
<status endtime="20170706 20:06:54.105" starttime="20170706 20:06:54.104" status="PASS"></status>
</kw>
<status endtime="20170706 20:06:54.105" starttime="20170706 20:06:54.102" status="PASS"></status>
</kw>
<status endtime="20170706 20:06:54.105" starttime="20170706 20:06:54.102" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170706 20:06:54.170">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170706 20:06:54.170">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170706 20:06:54.170" starttime="20170706 20:06:54.105" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170706 20:06:54.172">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170706 20:06:54.172" starttime="20170706 20:06:54.172" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170706 20:06:54.173">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170706 20:06:54.173" starttime="20170706 20:06:54.173" status="PASS"></status>
</kw>
<status endtime="20170706 20:06:54.173" starttime="20170706 20:06:54.172" status="PASS"></status>
</kw>
<status endtime="20170706 20:06:54.173" starttime="20170706 20:06:54.171" status="PASS"></status>
</kw>
<status endtime="20170706 20:06:54.173" starttime="20170706 20:06:54.171" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170706 20:06:54.174">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170706 20:06:54.174" starttime="20170706 20:06:53.906" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170706 20:06:54.174">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170706 20:06:54.174" starttime="20170706 20:06:54.174" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170706 20:06:54.175">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170706 20:06:54.175">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170706 20:06:54.175">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'status': u'ok', u'message': u'200 OK'}</msg>
<status endtime="20170706 20:06:54.175" starttime="20170706 20:06:54.175" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170706 20:06:54.175">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170706 20:06:54.175" starttime="20170706 20:06:53.906" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170706 20:06:54.176">${host_state} = Running</msg>
<status endtime="20170706 20:06:54.176" starttime="20170706 20:06:53.905" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${host_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170706 20:06:54.176">Off != Running</msg>
<status endtime="20170706 20:06:54.176" starttime="20170706 20:06:54.176" status="FAIL"></status>
</kw>
<status endtime="20170706 20:06:54.177" starttime="20170706 20:06:53.905" status="FAIL"></status>
</kw>
<kw library="state_manager" name="Is Host Off">
<doc>Check if host state is "Off".</doc>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170706 20:07:04.182">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170706 20:07:04.182" starttime="20170706 20:07:04.181" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170706 20:07:04.183">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170706 20:07:04.183" starttime="20170706 20:07:04.182" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170706 20:07:04.183">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170706 20:07:04.183" starttime="20170706 20:07:04.183" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170706 20:07:04.184">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170706 20:07:04.184" starttime="20170706 20:07:04.183" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170706 20:07:04.365">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170706 20:07:04.365" starttime="20170706 20:07:04.185" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170706 20:07:04.365">${status} = PASS</msg>
<msg level="INFO" timestamp="20170706 20:07:04.365">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170706 20:07:04.365" starttime="20170706 20:07:04.184" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170706 20:07:04.366">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170706 20:07:04.366" starttime="20170706 20:07:04.366" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170706 20:07:04.367">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170706 20:07:04.367" starttime="20170706 20:07:04.366" status="PASS"></status>
</kw>
<status endtime="20170706 20:07:04.367" starttime="20170706 20:07:04.180" status="PASS"></status>
</kw>
<status endtime="20170706 20:07:04.367" starttime="20170706 20:07:04.180" status="PASS"></status>
</kw>
<status endtime="20170706 20:07:04.367" starttime="20170706 20:07:04.179" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170706 20:07:04.368">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170706 20:07:04.368" starttime="20170706 20:07:04.367" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170706 20:07:04.370">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170706 20:07:04.370" starttime="20170706 20:07:04.369" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170706 20:07:04.371">URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170706 20:07:04.371" starttime="20170706 20:07:04.371" status="PASS"></status>
</kw>
<status endtime="20170706 20:07:04.371" starttime="20170706 20:07:04.370" status="PASS"></status>
</kw>
<status endtime="20170706 20:07:04.371" starttime="20170706 20:07:04.369" status="PASS"></status>
</kw>
<status endtime="20170706 20:07:04.371" starttime="20170706 20:07:04.368" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170706 20:07:04.436">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170706 20:07:04.436">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170706 20:07:04.436" starttime="20170706 20:07:04.371" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170706 20:07:04.438">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170706 20:07:04.438" starttime="20170706 20:07:04.437" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170706 20:07:04.439">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170706 20:07:04.439" starttime="20170706 20:07:04.439" status="PASS"></status>
</kw>
<status endtime="20170706 20:07:04.440" starttime="20170706 20:07:04.438" status="PASS"></status>
</kw>
<status endtime="20170706 20:07:04.440" starttime="20170706 20:07:04.437" status="PASS"></status>
</kw>
<status endtime="20170706 20:07:04.440" starttime="20170706 20:07:04.437" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170706 20:07:04.440">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170706 20:07:04.440" starttime="20170706 20:07:04.179" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170706 20:07:04.441">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170706 20:07:04.441" starttime="20170706 20:07:04.440" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170706 20:07:04.441">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170706 20:07:04.441">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170706 20:07:04.441">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'status': u'ok', u'message': u'200 OK'}</msg>
<status endtime="20170706 20:07:04.441" starttime="20170706 20:07:04.441" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170706 20:07:04.442">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170706 20:07:04.442" starttime="20170706 20:07:04.178" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170706 20:07:04.442">${host_state} = Running</msg>
<status endtime="20170706 20:07:04.442" starttime="20170706 20:07:04.178" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${host_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170706 20:07:04.443">Off != Running</msg>
<status endtime="20170706 20:07:04.443" starttime="20170706 20:07:04.442" status="FAIL"></status>
</kw>
<status endtime="20170706 20:07:04.443" starttime="20170706 20:07:04.177" status="FAIL"></status>
</kw>
<kw library="state_manager" name="Is Host Off">
<doc>Check if host state is "Off".</doc>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170706 20:07:14.447">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170706 20:07:14.448" starttime="20170706 20:07:14.447" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170706 20:07:14.448">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170706 20:07:14.448" starttime="20170706 20:07:14.448" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170706 20:07:14.449">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170706 20:07:14.449" starttime="20170706 20:07:14.449" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170706 20:07:14.450">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170706 20:07:14.450" starttime="20170706 20:07:14.449" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170706 20:07:14.734">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170706 20:07:14.734" starttime="20170706 20:07:14.450" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170706 20:07:14.734">${status} = PASS</msg>
<msg level="INFO" timestamp="20170706 20:07:14.734">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170706 20:07:14.734" starttime="20170706 20:07:14.450" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170706 20:07:14.735">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170706 20:07:14.735" starttime="20170706 20:07:14.734" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170706 20:07:14.736">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170706 20:07:14.736" starttime="20170706 20:07:14.735" status="PASS"></status>
</kw>
<status endtime="20170706 20:07:14.736" starttime="20170706 20:07:14.446" status="PASS"></status>
</kw>
<status endtime="20170706 20:07:14.736" starttime="20170706 20:07:14.446" status="PASS"></status>
</kw>
<status endtime="20170706 20:07:14.736" starttime="20170706 20:07:14.445" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170706 20:07:14.737">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170706 20:07:14.737" starttime="20170706 20:07:14.736" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170706 20:07:14.739">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170706 20:07:14.739" starttime="20170706 20:07:14.738" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170706 20:07:14.740">URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170706 20:07:14.740" starttime="20170706 20:07:14.740" status="PASS"></status>
</kw>
<status endtime="20170706 20:07:14.740" starttime="20170706 20:07:14.739" status="PASS"></status>
</kw>
<status endtime="20170706 20:07:14.740" starttime="20170706 20:07:14.738" status="PASS"></status>
</kw>
<status endtime="20170706 20:07:14.740" starttime="20170706 20:07:14.737" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170706 20:07:14.806">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170706 20:07:14.806">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170706 20:07:14.806" starttime="20170706 20:07:14.741" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170706 20:07:14.808">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170706 20:07:14.808" starttime="20170706 20:07:14.807" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170706 20:07:14.809">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170706 20:07:14.809" starttime="20170706 20:07:14.808" status="PASS"></status>
</kw>
<status endtime="20170706 20:07:14.809" starttime="20170706 20:07:14.808" status="PASS"></status>
</kw>
<status endtime="20170706 20:07:14.809" starttime="20170706 20:07:14.807" status="PASS"></status>
</kw>
<status endtime="20170706 20:07:14.809" starttime="20170706 20:07:14.806" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170706 20:07:14.809">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170706 20:07:14.809" starttime="20170706 20:07:14.445" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170706 20:07:14.810">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170706 20:07:14.810" starttime="20170706 20:07:14.810" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170706 20:07:14.811">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170706 20:07:14.811">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170706 20:07:14.811">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'status': u'ok', u'message': u'200 OK'}</msg>
<status endtime="20170706 20:07:14.811" starttime="20170706 20:07:14.810" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170706 20:07:14.811">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170706 20:07:14.811" starttime="20170706 20:07:14.444" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170706 20:07:14.811">${host_state} = Running</msg>
<status endtime="20170706 20:07:14.812" starttime="20170706 20:07:14.444" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${host_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170706 20:07:14.812">Off != Running</msg>
<status endtime="20170706 20:07:14.812" starttime="20170706 20:07:14.812" status="FAIL"></status>
</kw>
<status endtime="20170706 20:07:14.812" starttime="20170706 20:07:14.443" status="FAIL"></status>
</kw>
<kw library="state_manager" name="Is Host Off">
<doc>Check if host state is "Off".</doc>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170706 20:07:24.818">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170706 20:07:24.819" starttime="20170706 20:07:24.818" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170706 20:07:24.819">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170706 20:07:24.820" starttime="20170706 20:07:24.819" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170706 20:07:24.820">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170706 20:07:24.820" starttime="20170706 20:07:24.820" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170706 20:07:24.821">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170706 20:07:24.821" starttime="20170706 20:07:24.820" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170706 20:07:25.032">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170706 20:07:25.033" starttime="20170706 20:07:24.821" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170706 20:07:25.033">${status} = PASS</msg>
<msg level="INFO" timestamp="20170706 20:07:25.033">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170706 20:07:25.033" starttime="20170706 20:07:24.821" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170706 20:07:25.033">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170706 20:07:25.034" starttime="20170706 20:07:25.033" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170706 20:07:25.034">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170706 20:07:25.034" starttime="20170706 20:07:25.034" status="PASS"></status>
</kw>
<status endtime="20170706 20:07:25.034" starttime="20170706 20:07:24.817" status="PASS"></status>
</kw>
<status endtime="20170706 20:07:25.035" starttime="20170706 20:07:24.817" status="PASS"></status>
</kw>
<status endtime="20170706 20:07:25.035" starttime="20170706 20:07:24.816" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170706 20:07:25.035">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170706 20:07:25.035" starttime="20170706 20:07:25.035" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170706 20:07:25.037">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170706 20:07:25.037" starttime="20170706 20:07:25.037" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170706 20:07:25.038">URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170706 20:07:25.038" starttime="20170706 20:07:25.038" status="PASS"></status>
</kw>
<status endtime="20170706 20:07:25.039" starttime="20170706 20:07:25.038" status="PASS"></status>
</kw>
<status endtime="20170706 20:07:25.039" starttime="20170706 20:07:25.036" status="PASS"></status>
</kw>
<status endtime="20170706 20:07:25.039" starttime="20170706 20:07:25.035" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170706 20:07:25.104">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170706 20:07:25.104">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170706 20:07:25.104" starttime="20170706 20:07:25.039" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170706 20:07:25.106">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170706 20:07:25.106" starttime="20170706 20:07:25.105" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170706 20:07:25.109">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170706 20:07:25.109" starttime="20170706 20:07:25.106" status="PASS"></status>
</kw>
<status endtime="20170706 20:07:25.109" starttime="20170706 20:07:25.106" status="PASS"></status>
</kw>
<status endtime="20170706 20:07:25.109" starttime="20170706 20:07:25.105" status="PASS"></status>
</kw>
<status endtime="20170706 20:07:25.109" starttime="20170706 20:07:25.104" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170706 20:07:25.109">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170706 20:07:25.109" starttime="20170706 20:07:24.815" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170706 20:07:25.110">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170706 20:07:25.110" starttime="20170706 20:07:25.110" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170706 20:07:25.111">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170706 20:07:25.111">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170706 20:07:25.111">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'status': u'ok', u'message': u'200 OK'}</msg>
<status endtime="20170706 20:07:25.111" starttime="20170706 20:07:25.110" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170706 20:07:25.111">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170706 20:07:25.111" starttime="20170706 20:07:24.814" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170706 20:07:25.111">${host_state} = Running</msg>
<status endtime="20170706 20:07:25.111" starttime="20170706 20:07:24.814" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${host_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170706 20:07:25.112">Off != Running</msg>
<status endtime="20170706 20:07:25.112" starttime="20170706 20:07:25.112" status="FAIL"></status>
</kw>
<status endtime="20170706 20:07:25.112" starttime="20170706 20:07:24.813" status="FAIL"></status>
</kw>
<kw library="state_manager" name="Is Host Off">
<doc>Check if host state is "Off".</doc>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170706 20:07:35.118">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170706 20:07:35.119" starttime="20170706 20:07:35.117" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170706 20:07:35.119">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170706 20:07:35.119" starttime="20170706 20:07:35.119" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170706 20:07:35.121">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170706 20:07:35.121" starttime="20170706 20:07:35.120" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170706 20:07:35.121">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170706 20:07:35.122" starttime="20170706 20:07:35.121" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170706 20:07:35.412">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170706 20:07:35.412" starttime="20170706 20:07:35.123" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170706 20:07:35.412">${status} = PASS</msg>
<msg level="INFO" timestamp="20170706 20:07:35.412">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170706 20:07:35.412" starttime="20170706 20:07:35.122" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170706 20:07:35.413">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170706 20:07:35.413" starttime="20170706 20:07:35.412" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170706 20:07:35.414">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170706 20:07:35.414" starttime="20170706 20:07:35.413" status="PASS"></status>
</kw>
<status endtime="20170706 20:07:35.414" starttime="20170706 20:07:35.117" status="PASS"></status>
</kw>
<status endtime="20170706 20:07:35.414" starttime="20170706 20:07:35.116" status="PASS"></status>
</kw>
<status endtime="20170706 20:07:35.414" starttime="20170706 20:07:35.115" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170706 20:07:35.414">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170706 20:07:35.415" starttime="20170706 20:07:35.414" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170706 20:07:35.417">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170706 20:07:35.417" starttime="20170706 20:07:35.416" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170706 20:07:35.419">URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170706 20:07:35.419" starttime="20170706 20:07:35.418" status="PASS"></status>
</kw>
<status endtime="20170706 20:07:35.419" starttime="20170706 20:07:35.418" status="PASS"></status>
</kw>
<status endtime="20170706 20:07:35.419" starttime="20170706 20:07:35.415" status="PASS"></status>
</kw>
<status endtime="20170706 20:07:35.419" starttime="20170706 20:07:35.415" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170706 20:07:35.486">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170706 20:07:35.486">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170706 20:07:35.486" starttime="20170706 20:07:35.419" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170706 20:07:35.488">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170706 20:07:35.488" starttime="20170706 20:07:35.487" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170706 20:07:35.489">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170706 20:07:35.489" starttime="20170706 20:07:35.488" status="PASS"></status>
</kw>
<status endtime="20170706 20:07:35.489" starttime="20170706 20:07:35.488" status="PASS"></status>
</kw>
<status endtime="20170706 20:07:35.489" starttime="20170706 20:07:35.487" status="PASS"></status>
</kw>
<status endtime="20170706 20:07:35.489" starttime="20170706 20:07:35.486" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170706 20:07:35.489">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170706 20:07:35.489" starttime="20170706 20:07:35.115" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170706 20:07:35.490">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170706 20:07:35.490" starttime="20170706 20:07:35.490" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170706 20:07:35.490">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170706 20:07:35.491">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170706 20:07:35.491">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'status': u'ok', u'message': u'200 OK'}</msg>
<status endtime="20170706 20:07:35.491" starttime="20170706 20:07:35.490" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170706 20:07:35.491">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170706 20:07:35.491" starttime="20170706 20:07:35.114" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170706 20:07:35.491">${host_state} = Running</msg>
<status endtime="20170706 20:07:35.491" starttime="20170706 20:07:35.114" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${host_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170706 20:07:35.492">Off != Running</msg>
<status endtime="20170706 20:07:35.492" starttime="20170706 20:07:35.492" status="FAIL"></status>
</kw>
<status endtime="20170706 20:07:35.492" starttime="20170706 20:07:35.113" status="FAIL"></status>
</kw>
<kw library="state_manager" name="Is Host Off">
<doc>Check if host state is "Off".</doc>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170706 20:07:45.500">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170706 20:07:45.501" starttime="20170706 20:07:45.500" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170706 20:07:45.501">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170706 20:07:45.501" starttime="20170706 20:07:45.501" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170706 20:07:45.502">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170706 20:07:45.502" starttime="20170706 20:07:45.502" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170706 20:07:45.503">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170706 20:07:45.503" starttime="20170706 20:07:45.502" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170706 20:07:45.812">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170706 20:07:45.812" starttime="20170706 20:07:45.503" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170706 20:07:45.812">${status} = PASS</msg>
<msg level="INFO" timestamp="20170706 20:07:45.812">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170706 20:07:45.812" starttime="20170706 20:07:45.503" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170706 20:07:45.813">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170706 20:07:45.813" starttime="20170706 20:07:45.813" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170706 20:07:45.814">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170706 20:07:45.814" starttime="20170706 20:07:45.814" status="PASS"></status>
</kw>
<status endtime="20170706 20:07:45.814" starttime="20170706 20:07:45.499" status="PASS"></status>
</kw>
<status endtime="20170706 20:07:45.814" starttime="20170706 20:07:45.498" status="PASS"></status>
</kw>
<status endtime="20170706 20:07:45.814" starttime="20170706 20:07:45.497" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170706 20:07:45.815">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170706 20:07:45.815" starttime="20170706 20:07:45.815" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170706 20:07:45.818">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170706 20:07:45.819" starttime="20170706 20:07:45.818" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170706 20:07:45.820">URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170706 20:07:45.820" starttime="20170706 20:07:45.819" status="PASS"></status>
</kw>
<status endtime="20170706 20:07:45.820" starttime="20170706 20:07:45.819" status="PASS"></status>
</kw>
<status endtime="20170706 20:07:45.820" starttime="20170706 20:07:45.817" status="PASS"></status>
</kw>
<status endtime="20170706 20:07:45.820" starttime="20170706 20:07:45.816" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170706 20:07:45.895">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170706 20:07:45.896">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170706 20:07:45.896" starttime="20170706 20:07:45.821" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170706 20:07:45.898">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170706 20:07:45.898" starttime="20170706 20:07:45.897" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170706 20:07:45.899">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170706 20:07:45.899" starttime="20170706 20:07:45.899" status="PASS"></status>
</kw>
<status endtime="20170706 20:07:45.899" starttime="20170706 20:07:45.898" status="PASS"></status>
</kw>
<status endtime="20170706 20:07:45.900" starttime="20170706 20:07:45.897" status="PASS"></status>
</kw>
<status endtime="20170706 20:07:45.900" starttime="20170706 20:07:45.896" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170706 20:07:45.900">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170706 20:07:45.900" starttime="20170706 20:07:45.496" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170706 20:07:45.900">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170706 20:07:45.901" starttime="20170706 20:07:45.900" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170706 20:07:45.901">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170706 20:07:45.901">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170706 20:07:45.901">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'status': u'ok', u'message': u'200 OK'}</msg>
<status endtime="20170706 20:07:45.901" starttime="20170706 20:07:45.901" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170706 20:07:45.902">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170706 20:07:45.902" starttime="20170706 20:07:45.495" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170706 20:07:45.902">${host_state} = Running</msg>
<status endtime="20170706 20:07:45.902" starttime="20170706 20:07:45.495" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${host_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170706 20:07:45.903">Off != Running</msg>
<status endtime="20170706 20:07:45.903" starttime="20170706 20:07:45.903" status="FAIL"></status>
</kw>
<status endtime="20170706 20:07:45.903" starttime="20170706 20:07:45.494" status="FAIL"></status>
</kw>
<kw library="state_manager" name="Is Host Off">
<doc>Check if host state is "Off".</doc>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170706 20:07:55.909">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170706 20:07:55.910" starttime="20170706 20:07:55.909" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170706 20:07:55.910">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170706 20:07:55.910" starttime="20170706 20:07:55.910" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170706 20:07:55.911">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170706 20:07:55.911" starttime="20170706 20:07:55.911" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170706 20:07:55.912">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170706 20:07:55.912" starttime="20170706 20:07:55.911" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170706 20:07:56.225">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170706 20:07:56.225" starttime="20170706 20:07:55.912" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170706 20:07:56.225">${status} = PASS</msg>
<msg level="INFO" timestamp="20170706 20:07:56.226">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170706 20:07:56.226" starttime="20170706 20:07:55.912" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170706 20:07:56.227">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170706 20:07:56.227" starttime="20170706 20:07:56.226" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170706 20:07:56.227">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170706 20:07:56.227" starttime="20170706 20:07:56.227" status="PASS"></status>
</kw>
<status endtime="20170706 20:07:56.228" starttime="20170706 20:07:55.908" status="PASS"></status>
</kw>
<status endtime="20170706 20:07:56.228" starttime="20170706 20:07:55.908" status="PASS"></status>
</kw>
<status endtime="20170706 20:07:56.228" starttime="20170706 20:07:55.907" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170706 20:07:56.228">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170706 20:07:56.228" starttime="20170706 20:07:56.228" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170706 20:07:56.231">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170706 20:07:56.231" starttime="20170706 20:07:56.230" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170706 20:07:56.231">URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170706 20:07:56.232" starttime="20170706 20:07:56.231" status="PASS"></status>
</kw>
<status endtime="20170706 20:07:56.232" starttime="20170706 20:07:56.231" status="PASS"></status>
</kw>
<status endtime="20170706 20:07:56.232" starttime="20170706 20:07:56.229" status="PASS"></status>
</kw>
<status endtime="20170706 20:07:56.232" starttime="20170706 20:07:56.229" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170706 20:07:56.299">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170706 20:07:56.299">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170706 20:07:56.299" starttime="20170706 20:07:56.232" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170706 20:07:56.301">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170706 20:07:56.301" starttime="20170706 20:07:56.300" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170706 20:07:56.302">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170706 20:07:56.302" starttime="20170706 20:07:56.302" status="PASS"></status>
</kw>
<status endtime="20170706 20:07:56.302" starttime="20170706 20:07:56.301" status="PASS"></status>
</kw>
<status endtime="20170706 20:07:56.302" starttime="20170706 20:07:56.300" status="PASS"></status>
</kw>
<status endtime="20170706 20:07:56.302" starttime="20170706 20:07:56.299" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170706 20:07:56.302">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170706 20:07:56.302" starttime="20170706 20:07:55.907" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170706 20:07:56.303">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170706 20:07:56.303" starttime="20170706 20:07:56.303" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170706 20:07:56.304">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170706 20:07:56.304">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170706 20:07:56.304">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'status': u'ok', u'message': u'200 OK'}</msg>
<status endtime="20170706 20:07:56.304" starttime="20170706 20:07:56.303" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170706 20:07:56.304">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170706 20:07:56.304" starttime="20170706 20:07:55.906" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170706 20:07:56.305">${host_state} = Running</msg>
<status endtime="20170706 20:07:56.305" starttime="20170706 20:07:55.905" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${host_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170706 20:07:56.305">Off != Running</msg>
<status endtime="20170706 20:07:56.305" starttime="20170706 20:07:56.305" status="FAIL"></status>
</kw>
<status endtime="20170706 20:07:56.305" starttime="20170706 20:07:55.904" status="FAIL"></status>
</kw>
<kw library="state_manager" name="Is Host Off">
<doc>Check if host state is "Off".</doc>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170706 20:08:06.310">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170706 20:08:06.311" starttime="20170706 20:08:06.310" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170706 20:08:06.311">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170706 20:08:06.311" starttime="20170706 20:08:06.311" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170706 20:08:06.312">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170706 20:08:06.312" starttime="20170706 20:08:06.312" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170706 20:08:06.313">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170706 20:08:06.313" starttime="20170706 20:08:06.312" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170706 20:08:06.575">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170706 20:08:06.575" starttime="20170706 20:08:06.313" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170706 20:08:06.575">${status} = PASS</msg>
<msg level="INFO" timestamp="20170706 20:08:06.575">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170706 20:08:06.575" starttime="20170706 20:08:06.313" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170706 20:08:06.576">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170706 20:08:06.576" starttime="20170706 20:08:06.576" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170706 20:08:06.577">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170706 20:08:06.577" starttime="20170706 20:08:06.576" status="PASS"></status>
</kw>
<status endtime="20170706 20:08:06.577" starttime="20170706 20:08:06.309" status="PASS"></status>
</kw>
<status endtime="20170706 20:08:06.577" starttime="20170706 20:08:06.309" status="PASS"></status>
</kw>
<status endtime="20170706 20:08:06.577" starttime="20170706 20:08:06.308" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170706 20:08:06.578">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170706 20:08:06.578" starttime="20170706 20:08:06.577" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170706 20:08:06.580">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170706 20:08:06.580" starttime="20170706 20:08:06.579" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170706 20:08:06.581">URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170706 20:08:06.581" starttime="20170706 20:08:06.580" status="PASS"></status>
</kw>
<status endtime="20170706 20:08:06.581" starttime="20170706 20:08:06.580" status="PASS"></status>
</kw>
<status endtime="20170706 20:08:06.581" starttime="20170706 20:08:06.578" status="PASS"></status>
</kw>
<status endtime="20170706 20:08:06.581" starttime="20170706 20:08:06.578" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170706 20:08:06.646">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170706 20:08:06.647">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170706 20:08:06.647" starttime="20170706 20:08:06.581" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170706 20:08:06.648">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170706 20:08:06.648" starttime="20170706 20:08:06.648" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170706 20:08:06.649">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170706 20:08:06.649" starttime="20170706 20:08:06.649" status="PASS"></status>
</kw>
<status endtime="20170706 20:08:06.650" starttime="20170706 20:08:06.649" status="PASS"></status>
</kw>
<status endtime="20170706 20:08:06.650" starttime="20170706 20:08:06.647" status="PASS"></status>
</kw>
<status endtime="20170706 20:08:06.650" starttime="20170706 20:08:06.647" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170706 20:08:06.650">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170706 20:08:06.650" starttime="20170706 20:08:06.308" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170706 20:08:06.651">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170706 20:08:06.651" starttime="20170706 20:08:06.650" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170706 20:08:06.651">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170706 20:08:06.651">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170706 20:08:06.651">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'status': u'ok', u'message': u'200 OK'}</msg>
<status endtime="20170706 20:08:06.651" starttime="20170706 20:08:06.651" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170706 20:08:06.652">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170706 20:08:06.652" starttime="20170706 20:08:06.307" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170706 20:08:06.652">${host_state} = Running</msg>
<status endtime="20170706 20:08:06.652" starttime="20170706 20:08:06.307" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${host_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170706 20:08:06.653">Off != Running</msg>
<status endtime="20170706 20:08:06.653" starttime="20170706 20:08:06.652" status="FAIL"></status>
</kw>
<status endtime="20170706 20:08:06.653" starttime="20170706 20:08:06.306" status="FAIL"></status>
</kw>
<kw library="state_manager" name="Is Host Off">
<doc>Check if host state is "Off".</doc>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170706 20:08:16.658">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170706 20:08:16.658" starttime="20170706 20:08:16.658" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170706 20:08:16.659">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170706 20:08:16.659" starttime="20170706 20:08:16.659" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170706 20:08:16.660">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170706 20:08:16.660" starttime="20170706 20:08:16.659" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170706 20:08:16.660">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170706 20:08:16.660" starttime="20170706 20:08:16.660" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170706 20:08:16.935">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170706 20:08:16.935" starttime="20170706 20:08:16.661" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170706 20:08:16.935">${status} = PASS</msg>
<msg level="INFO" timestamp="20170706 20:08:16.935">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170706 20:08:16.935" starttime="20170706 20:08:16.661" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170706 20:08:16.936">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170706 20:08:16.936" starttime="20170706 20:08:16.936" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170706 20:08:16.937">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170706 20:08:16.937" starttime="20170706 20:08:16.936" status="PASS"></status>
</kw>
<status endtime="20170706 20:08:16.937" starttime="20170706 20:08:16.657" status="PASS"></status>
</kw>
<status endtime="20170706 20:08:16.937" starttime="20170706 20:08:16.656" status="PASS"></status>
</kw>
<status endtime="20170706 20:08:16.937" starttime="20170706 20:08:16.656" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170706 20:08:16.938">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170706 20:08:16.938" starttime="20170706 20:08:16.937" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170706 20:08:16.940">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170706 20:08:16.940" starttime="20170706 20:08:16.939" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170706 20:08:16.941">URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170706 20:08:16.941" starttime="20170706 20:08:16.941" status="PASS"></status>
</kw>
<status endtime="20170706 20:08:16.941" starttime="20170706 20:08:16.940" status="PASS"></status>
</kw>
<status endtime="20170706 20:08:16.941" starttime="20170706 20:08:16.938" status="PASS"></status>
</kw>
<status endtime="20170706 20:08:16.941" starttime="20170706 20:08:16.938" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170706 20:08:17.006">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170706 20:08:17.006">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170706 20:08:17.006" starttime="20170706 20:08:16.941" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170706 20:08:17.008">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170706 20:08:17.008" starttime="20170706 20:08:17.007" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170706 20:08:17.009">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170706 20:08:17.009" starttime="20170706 20:08:17.008" status="PASS"></status>
</kw>
<status endtime="20170706 20:08:17.009" starttime="20170706 20:08:17.008" status="PASS"></status>
</kw>
<status endtime="20170706 20:08:17.009" starttime="20170706 20:08:17.007" status="PASS"></status>
</kw>
<status endtime="20170706 20:08:17.009" starttime="20170706 20:08:17.006" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170706 20:08:17.010">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170706 20:08:17.010" starttime="20170706 20:08:16.655" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170706 20:08:17.010">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170706 20:08:17.010" starttime="20170706 20:08:17.010" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170706 20:08:17.011">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170706 20:08:17.011">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170706 20:08:17.011">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'status': u'ok', u'message': u'200 OK'}</msg>
<status endtime="20170706 20:08:17.011" starttime="20170706 20:08:17.011" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170706 20:08:17.011">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170706 20:08:17.011" starttime="20170706 20:08:16.654" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170706 20:08:17.012">${host_state} = Running</msg>
<status endtime="20170706 20:08:17.012" starttime="20170706 20:08:16.654" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${host_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170706 20:08:17.013">Off != Running</msg>
<status endtime="20170706 20:08:17.013" starttime="20170706 20:08:17.012" status="FAIL"></status>
</kw>
<status endtime="20170706 20:08:17.013" starttime="20170706 20:08:16.653" status="FAIL"></status>
</kw>
<kw library="state_manager" name="Is Host Off">
<doc>Check if host state is "Off".</doc>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170706 20:08:27.018">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170706 20:08:27.018" starttime="20170706 20:08:27.018" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170706 20:08:27.019">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170706 20:08:27.019" starttime="20170706 20:08:27.019" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170706 20:08:27.020">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170706 20:08:27.020" starttime="20170706 20:08:27.019" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170706 20:08:27.020">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170706 20:08:27.020" starttime="20170706 20:08:27.020" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170706 20:08:27.295">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170706 20:08:27.296" starttime="20170706 20:08:27.021" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170706 20:08:27.296">${status} = PASS</msg>
<msg level="INFO" timestamp="20170706 20:08:27.296">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170706 20:08:27.296" starttime="20170706 20:08:27.021" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170706 20:08:27.296">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170706 20:08:27.296" starttime="20170706 20:08:27.296" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170706 20:08:27.297">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170706 20:08:27.297" starttime="20170706 20:08:27.297" status="PASS"></status>
</kw>
<status endtime="20170706 20:08:27.297" starttime="20170706 20:08:27.017" status="PASS"></status>
</kw>
<status endtime="20170706 20:08:27.297" starttime="20170706 20:08:27.017" status="PASS"></status>
</kw>
<status endtime="20170706 20:08:27.297" starttime="20170706 20:08:27.016" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170706 20:08:27.298">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170706 20:08:27.298" starttime="20170706 20:08:27.298" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170706 20:08:27.300">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170706 20:08:27.301" starttime="20170706 20:08:27.300" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170706 20:08:27.301">URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170706 20:08:27.301" starttime="20170706 20:08:27.301" status="PASS"></status>
</kw>
<status endtime="20170706 20:08:27.302" starttime="20170706 20:08:27.301" status="PASS"></status>
</kw>
<status endtime="20170706 20:08:27.302" starttime="20170706 20:08:27.299" status="PASS"></status>
</kw>
<status endtime="20170706 20:08:27.302" starttime="20170706 20:08:27.298" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170706 20:08:27.368">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170706 20:08:27.368">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170706 20:08:27.368" starttime="20170706 20:08:27.302" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170706 20:08:27.370">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170706 20:08:27.370" starttime="20170706 20:08:27.369" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170706 20:08:27.370">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170706 20:08:27.371" starttime="20170706 20:08:27.370" status="PASS"></status>
</kw>
<status endtime="20170706 20:08:27.371" starttime="20170706 20:08:27.370" status="PASS"></status>
</kw>
<status endtime="20170706 20:08:27.371" starttime="20170706 20:08:27.369" status="PASS"></status>
</kw>
<status endtime="20170706 20:08:27.371" starttime="20170706 20:08:27.368" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170706 20:08:27.371">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170706 20:08:27.371" starttime="20170706 20:08:27.015" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170706 20:08:27.372">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170706 20:08:27.372" starttime="20170706 20:08:27.371" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170706 20:08:27.372">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170706 20:08:27.372">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170706 20:08:27.372">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'status': u'ok', u'message': u'200 OK'}</msg>
<status endtime="20170706 20:08:27.372" starttime="20170706 20:08:27.372" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170706 20:08:27.373">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170706 20:08:27.373" starttime="20170706 20:08:27.015" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170706 20:08:27.373">${host_state} = Running</msg>
<status endtime="20170706 20:08:27.373" starttime="20170706 20:08:27.014" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${host_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170706 20:08:27.374">Off != Running</msg>
<status endtime="20170706 20:08:27.374" starttime="20170706 20:08:27.373" status="FAIL"></status>
</kw>
<status endtime="20170706 20:08:27.374" starttime="20170706 20:08:27.014" status="FAIL"></status>
</kw>
<kw library="state_manager" name="Is Host Off">
<doc>Check if host state is "Off".</doc>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170706 20:08:37.378">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170706 20:08:37.379" starttime="20170706 20:08:37.378" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170706 20:08:37.380">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170706 20:08:37.380" starttime="20170706 20:08:37.379" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170706 20:08:37.380">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170706 20:08:37.380" starttime="20170706 20:08:37.380" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170706 20:08:37.381">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170706 20:08:37.381" starttime="20170706 20:08:37.381" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170706 20:08:37.641">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170706 20:08:37.641" starttime="20170706 20:08:37.382" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170706 20:08:37.641">${status} = PASS</msg>
<msg level="INFO" timestamp="20170706 20:08:37.641">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170706 20:08:37.641" starttime="20170706 20:08:37.381" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170706 20:08:37.642">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170706 20:08:37.642" starttime="20170706 20:08:37.642" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170706 20:08:37.643">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170706 20:08:37.643" starttime="20170706 20:08:37.642" status="PASS"></status>
</kw>
<status endtime="20170706 20:08:37.643" starttime="20170706 20:08:37.378" status="PASS"></status>
</kw>
<status endtime="20170706 20:08:37.643" starttime="20170706 20:08:37.377" status="PASS"></status>
</kw>
<status endtime="20170706 20:08:37.643" starttime="20170706 20:08:37.377" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170706 20:08:37.644">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170706 20:08:37.644" starttime="20170706 20:08:37.643" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170706 20:08:37.646">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170706 20:08:37.646" starttime="20170706 20:08:37.645" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170706 20:08:37.647">URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170706 20:08:37.647" starttime="20170706 20:08:37.646" status="PASS"></status>
</kw>
<status endtime="20170706 20:08:37.647" starttime="20170706 20:08:37.646" status="PASS"></status>
</kw>
<status endtime="20170706 20:08:37.647" starttime="20170706 20:08:37.644" status="PASS"></status>
</kw>
<status endtime="20170706 20:08:37.647" starttime="20170706 20:08:37.644" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170706 20:08:37.713">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170706 20:08:37.713">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170706 20:08:37.713" starttime="20170706 20:08:37.647" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170706 20:08:37.715">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170706 20:08:37.715" starttime="20170706 20:08:37.714" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170706 20:08:37.715">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170706 20:08:37.716" starttime="20170706 20:08:37.715" status="PASS"></status>
</kw>
<status endtime="20170706 20:08:37.716" starttime="20170706 20:08:37.715" status="PASS"></status>
</kw>
<status endtime="20170706 20:08:37.716" starttime="20170706 20:08:37.714" status="PASS"></status>
</kw>
<status endtime="20170706 20:08:37.716" starttime="20170706 20:08:37.713" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170706 20:08:37.716">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170706 20:08:37.716" starttime="20170706 20:08:37.376" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170706 20:08:37.717">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170706 20:08:37.717" starttime="20170706 20:08:37.716" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170706 20:08:37.717">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170706 20:08:37.717">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170706 20:08:37.717">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'status': u'ok', u'message': u'200 OK'}</msg>
<status endtime="20170706 20:08:37.717" starttime="20170706 20:08:37.717" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170706 20:08:37.718">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170706 20:08:37.718" starttime="20170706 20:08:37.375" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170706 20:08:37.718">${host_state} = Running</msg>
<status endtime="20170706 20:08:37.718" starttime="20170706 20:08:37.375" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${host_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170706 20:08:37.719">Off != Running</msg>
<status endtime="20170706 20:08:37.719" starttime="20170706 20:08:37.718" status="FAIL"></status>
</kw>
<status endtime="20170706 20:08:37.719" starttime="20170706 20:08:37.374" status="FAIL"></status>
</kw>
<kw library="state_manager" name="Is Host Off">
<doc>Check if host state is "Off".</doc>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170706 20:08:47.725">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170706 20:08:47.725" starttime="20170706 20:08:47.724" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170706 20:08:47.726">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170706 20:08:47.726" starttime="20170706 20:08:47.726" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170706 20:08:47.727">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170706 20:08:47.727" starttime="20170706 20:08:47.727" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170706 20:08:47.728">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170706 20:08:47.728" starttime="20170706 20:08:47.728" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170706 20:08:47.997">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170706 20:08:47.997" starttime="20170706 20:08:47.729" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170706 20:08:47.998">${status} = PASS</msg>
<msg level="INFO" timestamp="20170706 20:08:47.998">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170706 20:08:47.998" starttime="20170706 20:08:47.729" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170706 20:08:47.998">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170706 20:08:47.998" starttime="20170706 20:08:47.998" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170706 20:08:47.999">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170706 20:08:47.999" starttime="20170706 20:08:47.999" status="PASS"></status>
</kw>
<status endtime="20170706 20:08:47.999" starttime="20170706 20:08:47.724" status="PASS"></status>
</kw>
<status endtime="20170706 20:08:47.999" starttime="20170706 20:08:47.723" status="PASS"></status>
</kw>
<status endtime="20170706 20:08:47.999" starttime="20170706 20:08:47.722" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170706 20:08:48.000">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170706 20:08:48.000" starttime="20170706 20:08:48.000" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170706 20:08:48.002">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170706 20:08:48.002" starttime="20170706 20:08:48.001" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170706 20:08:48.003">URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170706 20:08:48.003" starttime="20170706 20:08:48.003" status="PASS"></status>
</kw>
<status endtime="20170706 20:08:48.003" starttime="20170706 20:08:48.002" status="PASS"></status>
</kw>
<status endtime="20170706 20:08:48.003" starttime="20170706 20:08:48.001" status="PASS"></status>
</kw>
<status endtime="20170706 20:08:48.003" starttime="20170706 20:08:48.000" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170706 20:08:48.069">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170706 20:08:48.069">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170706 20:08:48.069" starttime="20170706 20:08:48.004" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170706 20:08:48.071">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170706 20:08:48.071" starttime="20170706 20:08:48.071" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170706 20:08:48.072">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170706 20:08:48.072" starttime="20170706 20:08:48.072" status="PASS"></status>
</kw>
<status endtime="20170706 20:08:48.072" starttime="20170706 20:08:48.071" status="PASS"></status>
</kw>
<status endtime="20170706 20:08:48.072" starttime="20170706 20:08:48.070" status="PASS"></status>
</kw>
<status endtime="20170706 20:08:48.072" starttime="20170706 20:08:48.070" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170706 20:08:48.073">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170706 20:08:48.073" starttime="20170706 20:08:47.721" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170706 20:08:48.073">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170706 20:08:48.073" starttime="20170706 20:08:48.073" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170706 20:08:48.074">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170706 20:08:48.074">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170706 20:08:48.074">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'status': u'ok', u'message': u'200 OK'}</msg>
<status endtime="20170706 20:08:48.074" starttime="20170706 20:08:48.074" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170706 20:08:48.074">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170706 20:08:48.074" starttime="20170706 20:08:47.720" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170706 20:08:48.075">${host_state} = Running</msg>
<status endtime="20170706 20:08:48.075" starttime="20170706 20:08:47.720" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${host_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170706 20:08:48.075">Off != Running</msg>
<status endtime="20170706 20:08:48.075" starttime="20170706 20:08:48.075" status="FAIL"></status>
</kw>
<status endtime="20170706 20:08:48.075" starttime="20170706 20:08:47.719" status="FAIL"></status>
</kw>
<kw library="state_manager" name="Is Host Off">
<doc>Check if host state is "Off".</doc>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170706 20:08:58.080">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170706 20:08:58.080" starttime="20170706 20:08:58.079" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170706 20:08:58.081">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170706 20:08:58.081" starttime="20170706 20:08:58.080" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170706 20:08:58.081">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170706 20:08:58.081" starttime="20170706 20:08:58.081" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170706 20:08:58.082">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170706 20:08:58.082" starttime="20170706 20:08:58.082" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170706 20:08:58.347">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170706 20:08:58.348" starttime="20170706 20:08:58.083" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170706 20:08:58.348">${status} = PASS</msg>
<msg level="INFO" timestamp="20170706 20:08:58.348">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170706 20:08:58.348" starttime="20170706 20:08:58.082" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170706 20:08:58.348">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170706 20:08:58.349" starttime="20170706 20:08:58.348" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170706 20:08:58.349">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170706 20:08:58.349" starttime="20170706 20:08:58.349" status="PASS"></status>
</kw>
<status endtime="20170706 20:08:58.349" starttime="20170706 20:08:58.079" status="PASS"></status>
</kw>
<status endtime="20170706 20:08:58.349" starttime="20170706 20:08:58.079" status="PASS"></status>
</kw>
<status endtime="20170706 20:08:58.349" starttime="20170706 20:08:58.078" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170706 20:08:58.350">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170706 20:08:58.350" starttime="20170706 20:08:58.350" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170706 20:08:58.352">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170706 20:08:58.352" starttime="20170706 20:08:58.352" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170706 20:08:58.353">URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170706 20:08:58.353" starttime="20170706 20:08:58.353" status="PASS"></status>
</kw>
<status endtime="20170706 20:08:58.353" starttime="20170706 20:08:58.352" status="PASS"></status>
</kw>
<status endtime="20170706 20:08:58.353" starttime="20170706 20:08:58.351" status="PASS"></status>
</kw>
<status endtime="20170706 20:08:58.353" starttime="20170706 20:08:58.350" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170706 20:08:58.418">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170706 20:08:58.418">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170706 20:08:58.419" starttime="20170706 20:08:58.354" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170706 20:08:58.420">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170706 20:08:58.420" starttime="20170706 20:08:58.420" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170706 20:08:58.421">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170706 20:08:58.421" starttime="20170706 20:08:58.421" status="PASS"></status>
</kw>
<status endtime="20170706 20:08:58.421" starttime="20170706 20:08:58.420" status="PASS"></status>
</kw>
<status endtime="20170706 20:08:58.421" starttime="20170706 20:08:58.419" status="PASS"></status>
</kw>
<status endtime="20170706 20:08:58.422" starttime="20170706 20:08:58.419" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170706 20:08:58.422">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170706 20:08:58.422" starttime="20170706 20:08:58.077" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170706 20:08:58.422">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170706 20:08:58.422" starttime="20170706 20:08:58.422" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170706 20:08:58.423">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170706 20:08:58.423">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170706 20:08:58.423">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'status': u'ok', u'message': u'200 OK'}</msg>
<status endtime="20170706 20:08:58.423" starttime="20170706 20:08:58.423" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170706 20:08:58.423">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170706 20:08:58.424" starttime="20170706 20:08:58.077" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170706 20:08:58.424">${host_state} = Running</msg>
<status endtime="20170706 20:08:58.424" starttime="20170706 20:08:58.076" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${host_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170706 20:08:58.424">Off != Running</msg>
<status endtime="20170706 20:08:58.425" starttime="20170706 20:08:58.424" status="FAIL"></status>
</kw>
<status endtime="20170706 20:08:58.425" starttime="20170706 20:08:58.076" status="FAIL"></status>
</kw>
<kw library="state_manager" name="Is Host Off">
<doc>Check if host state is "Off".</doc>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170706 20:09:08.430">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170706 20:09:08.430" starttime="20170706 20:09:08.430" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170706 20:09:08.431">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170706 20:09:08.431" starttime="20170706 20:09:08.431" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170706 20:09:08.432">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170706 20:09:08.432" starttime="20170706 20:09:08.431" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170706 20:09:08.432">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170706 20:09:08.432" starttime="20170706 20:09:08.432" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170706 20:09:08.689">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170706 20:09:08.689" starttime="20170706 20:09:08.433" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170706 20:09:08.690">${status} = PASS</msg>
<msg level="INFO" timestamp="20170706 20:09:08.690">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170706 20:09:08.690" starttime="20170706 20:09:08.433" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170706 20:09:08.690">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170706 20:09:08.691" starttime="20170706 20:09:08.690" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170706 20:09:08.691">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170706 20:09:08.691" starttime="20170706 20:09:08.691" status="PASS"></status>
</kw>
<status endtime="20170706 20:09:08.691" starttime="20170706 20:09:08.429" status="PASS"></status>
</kw>
<status endtime="20170706 20:09:08.691" starttime="20170706 20:09:08.428" status="PASS"></status>
</kw>
<status endtime="20170706 20:09:08.692" starttime="20170706 20:09:08.427" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170706 20:09:08.692">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170706 20:09:08.692" starttime="20170706 20:09:08.692" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170706 20:09:08.694">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170706 20:09:08.694" starttime="20170706 20:09:08.694" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170706 20:09:08.695">URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170706 20:09:08.695" starttime="20170706 20:09:08.695" status="PASS"></status>
</kw>
<status endtime="20170706 20:09:08.695" starttime="20170706 20:09:08.694" status="PASS"></status>
</kw>
<status endtime="20170706 20:09:08.696" starttime="20170706 20:09:08.693" status="PASS"></status>
</kw>
<status endtime="20170706 20:09:08.696" starttime="20170706 20:09:08.692" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170706 20:09:08.760">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170706 20:09:08.760">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170706 20:09:08.760" starttime="20170706 20:09:08.696" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170706 20:09:08.762">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170706 20:09:08.762" starttime="20170706 20:09:08.761" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170706 20:09:08.763">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170706 20:09:08.763" starttime="20170706 20:09:08.763" status="PASS"></status>
</kw>
<status endtime="20170706 20:09:08.763" starttime="20170706 20:09:08.762" status="PASS"></status>
</kw>
<status endtime="20170706 20:09:08.764" starttime="20170706 20:09:08.761" status="PASS"></status>
</kw>
<status endtime="20170706 20:09:08.764" starttime="20170706 20:09:08.761" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170706 20:09:08.764">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170706 20:09:08.764" starttime="20170706 20:09:08.427" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170706 20:09:08.764">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170706 20:09:08.764" starttime="20170706 20:09:08.764" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170706 20:09:08.765">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170706 20:09:08.765">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170706 20:09:08.765">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'status': u'ok', u'message': u'200 OK'}</msg>
<status endtime="20170706 20:09:08.766" starttime="20170706 20:09:08.765" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170706 20:09:08.766">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170706 20:09:08.766" starttime="20170706 20:09:08.426" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170706 20:09:08.766">${host_state} = Running</msg>
<status endtime="20170706 20:09:08.766" starttime="20170706 20:09:08.426" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${host_state}</arg>
</arguments>
<msg level="FAIL" timestamp="20170706 20:09:08.767">Off != Running</msg>
<status endtime="20170706 20:09:08.767" starttime="20170706 20:09:08.767" status="FAIL"></status>
</kw>
<status endtime="20170706 20:09:08.768" starttime="20170706 20:09:08.425" status="FAIL"></status>
</kw>
<msg level="FAIL" timestamp="20170706 20:09:08.768">Keyword 'Is Host Off' failed after retrying for 3 minutes. The last error was: Off != Running</msg>
<status endtime="20170706 20:09:08.768" starttime="20170706 20:06:08.615" status="FAIL"></status>
</kw>
<status endtime="20170706 20:09:08.768" starttime="20170706 20:06:07.559" status="FAIL"></status>
</kw>
<status endtime="20170706 20:09:08.768" starttime="20170706 20:06:07.559" status="FAIL"></status>
</kw>
<status endtime="20170706 20:09:08.769" starttime="20170706 20:06:07.558" status="FAIL"></status>
</kw>
<kw name="Test Exit Logs" type="teardown">
<doc>Collect FFDC and SOL log.</doc>
<kw library="openbmc_ffdc" name="FFDC On Test Case Fail">
<doc>Generic FFDC entry point. Place holder to hook in</doc>
<kw library="state_manager" name="Is Host Quiesced">
<doc>Check if host state is quiesced.</doc>
<assign>
<var>${status}</var>
</assign>
<kw library="state_manager" name="Get Host State">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw library="rest_client" name="Read Attribute">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170706 20:09:08.776">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170706 20:09:08.776" starttime="20170706 20:09:08.775" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170706 20:09:08.777">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170706 20:09:08.777" starttime="20170706 20:09:08.777" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170706 20:09:08.778">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170706 20:09:08.778" starttime="20170706 20:09:08.778" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170706 20:09:08.779">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170706 20:09:08.779" starttime="20170706 20:09:08.778" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170706 20:09:08.959">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170706 20:09:08.959" starttime="20170706 20:09:08.780" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170706 20:09:08.959">${status} = PASS</msg>
<msg level="INFO" timestamp="20170706 20:09:08.959">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170706 20:09:08.959" starttime="20170706 20:09:08.779" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170706 20:09:08.960">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170706 20:09:08.960" starttime="20170706 20:09:08.959" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170706 20:09:08.960">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170706 20:09:08.960" starttime="20170706 20:09:08.960" status="PASS"></status>
</kw>
<status endtime="20170706 20:09:08.961" starttime="20170706 20:09:08.775" status="PASS"></status>
</kw>
<status endtime="20170706 20:09:08.961" starttime="20170706 20:09:08.774" status="PASS"></status>
</kw>
<status endtime="20170706 20:09:08.961" starttime="20170706 20:09:08.773" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170706 20:09:08.961">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status endtime="20170706 20:09:08.961" starttime="20170706 20:09:08.961" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="rest_client" name="Log Request">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170706 20:09:08.963">${msg} = URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170706 20:09:08.963" starttime="20170706 20:09:08.963" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170706 20:09:08.964">URI:https://9.3.21.61:443/xyz/openbmc_project/state/host0//attr/CurrentHostState, method:Get, args:{}</msg>
<status endtime="20170706 20:09:08.965" starttime="20170706 20:09:08.964" status="PASS"></status>
</kw>
<status endtime="20170706 20:09:08.965" starttime="20170706 20:09:08.964" status="PASS"></status>
</kw>
<status endtime="20170706 20:09:08.965" starttime="20170706 20:09:08.962" status="PASS"></status>
</kw>
<status endtime="20170706 20:09:08.965" starttime="20170706 20:09:08.962" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170706 20:09:09.030">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg level="INFO" timestamp="20170706 20:09:09.030">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170706 20:09:09.030" starttime="20170706 20:09:08.965" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw library="rest_client" name="Log Response">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20170706 20:09:09.032">${msg} = Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170706 20:09:09.032" starttime="20170706 20:09:09.032" status="PASS"></status>
</kw>
<kw library="rest_client" name="Logging">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20170706 20:09:09.033">Response code:200, Content:{
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20170706 20:09:09.033" starttime="20170706 20:09:09.033" status="PASS"></status>
</kw>
<status endtime="20170706 20:09:09.033" starttime="20170706 20:09:09.032" status="PASS"></status>
</kw>
<status endtime="20170706 20:09:09.033" starttime="20170706 20:09:09.031" status="PASS"></status>
</kw>
<status endtime="20170706 20:09:09.034" starttime="20170706 20:09:09.031" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170706 20:09:09.034">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170706 20:09:09.034" starttime="20170706 20:09:08.772" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170706 20:09:09.034">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170706 20:09:09.034" starttime="20170706 20:09:09.034" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20170706 20:09:09.035">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Running", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170706 20:09:09.035">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20170706 20:09:09.035">${content} = {u'data': u'xyz.openbmc_project.State.Host.HostState.Running', u'status': u'ok', u'message': u'200 OK'}</msg>
<status endtime="20170706 20:09:09.035" starttime="20170706 20:09:09.035" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170706 20:09:09.035">${state} = xyz.openbmc_project.State.Host.HostState.Running</msg>
<status endtime="20170706 20:09:09.036" starttime="20170706 20:09:08.771" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170706 20:09:09.036">${host_state} = Running</msg>
<status endtime="20170706 20:09:09.036" starttime="20170706 20:09:08.771" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal</arg>
<arg>${host_state}</arg>
<arg>Quiesced</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${host_state}</arg>
<arg>Quiesced</arg>
</arguments>
<msg level="FAIL" timestamp="20170706 20:09:09.037">Running != Quiesced</msg>
<status endtime="20170706 20:09:09.037" starttime="20170706 20:09:09.036" status="FAIL"></status>
</kw>
<msg level="INFO" timestamp="20170706 20:09:09.037">${status} = False</msg>
<status endtime="20170706 20:09:09.037" starttime="20170706 20:09:09.036" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170706 20:09:09.037">${status} = False</msg>
<status endtime="20170706 20:09:09.037" starttime="20170706 20:09:08.770" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${TEST_STATUS}' == 'FAIL' or '${status}'=='True'</arg>
<arg>FFDC</arg>
</arguments>
<kw library="openbmc_ffdc" name="Ffdc">
<doc>Gather First Failure Data Capture (FFDC).</doc>
<kw library="utils" name="Ping Host">
<arguments>
<arg>9.3.21.61</arg>
</arguments>
<kw library="BuiltIn" name="Should Not Be Empty">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${host}</arg>
<arg>msg=No host provided</arg>
</arguments>
<msg level="INFO" timestamp="20170706 20:09:09.079">Length is 9</msg>
<status endtime="20170706 20:09:09.079" starttime="20170706 20:09:09.079" status="PASS"></status>
</kw>
<kw library="OperatingSystem" name="Run And Return Rc And Output">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>ping -c 4 ${host}</arg>
</arguments>
<assign>
<var>${RC}</var>
<var>${output}</var>
</assign>
<msg level="INFO" timestamp="20170706 20:09:09.121">Running command 'ping -c 4 9.3.21.61 2&gt;&amp;1'.</msg>
<msg level="INFO" timestamp="20170706 20:09:12.127">${RC} = 0</msg>
<msg level="INFO" timestamp="20170706 20:09:12.127">${output} = PING 9.3.21.61 (9.3.21.61) 56(84) bytes of data.
64 bytes from 9.3.21.61: icmp_seq=1 ttl=62 time=0.712 ms
64 bytes from 9.3.21.61: icmp_seq=2 ttl=62 time=0.810 ms
64 bytes from 9.3.21.61: icmp_seq=3 t...</msg>
<status endtime="20170706 20:09:12.128" starttime="20170706 20:09:09.080" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>RC: ${RC}\nOutput:\n${output}</arg>
</arguments>
<msg level="INFO" timestamp="20170706 20:09:12.136">RC: 0
Output:
PING 9.3.21.61 (9.3.21.61) 56(84) bytes of data.
64 bytes from 9.3.21.61: icmp_seq=1 ttl=62 time=0.712 ms
64 bytes from 9.3.21.61: icmp_seq=2 ttl=62 time=0.810 ms
64 bytes from 9.3.21.61: icmp_seq=3 ttl=62 time=0.584 ms
64 bytes from 9.3.21.61: icmp_seq=4 ttl=62 time=0.593 ms

--- 9.3.21.61 ping statistics ---
4 packets transmitted, 4 received, 0% packet loss, time 2998ms
rtt min/avg/max/mdev = 0.584/0.674/0.810/0.098 ms</msg>
<status endtime="20170706 20:09:12.136" starttime="20170706 20:09:12.134" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${RC}</arg>
<arg>${0}</arg>
</arguments>
<status endtime="20170706 20:09:12.138" starttime="20170706 20:09:12.136" status="PASS"></status>
</kw>
<status endtime="20170706 20:09:12.138" starttime="20170706 20:09:09.078" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Get Current Time Stamp">
<doc>Get the current time stamp data</doc>
<kw library="DateTime" name="Get Current Date">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20170706 20:09:12.177">${cur_time} = 2017-07-06 20:09:12:176963</msg>
<status endtime="20170706 20:09:12.177" starttime="20170706 20:09:12.177" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_list" name="Get Strip String">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20170706 20:09:12.178">${cur_time} = 20170706200912176963</msg>
<status endtime="20170706 20:09:12.178" starttime="20170706 20:09:12.178" status="PASS"></status>
</kw>
<status endtime="20170706 20:09:12.178" starttime="20170706 20:09:12.176" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170706 20:09:12.178">${FFDC_TIME} = 20170706200912176963</msg>
<kw library="openbmc_ffdc_utils" name="Get Test Dir and Name">
<doc>SUITE_NAME and TEST_NAME are automatic variables</doc>
<kw library="openbmc_ffdc_list" name="Get Strip String">
<doc>########################################################################</doc>
<arguments>
<arg>${SUITE_NAME}</arg>
</arguments>
<assign>
<var>${suite_name}</var>
</assign>
<msg level="INFO" timestamp="20170706 20:09:12.189">${suite_name} = TestsTestBasicPoweron</msg>
<status endtime="20170706 20:09:12.189" starttime="20170706 20:09:12.189" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${FFDC_TIME}_</arg>
<arg>${suite_name}</arg>
</arguments>
<assign>
<var>${suite_name}</var>
</assign>
<msg level="INFO" timestamp="20170706 20:09:12.190">${suite_name} = 20170706200912176963_TestsTestBasicPoweron</msg>
<status endtime="20170706 20:09:12.190" starttime="20170706 20:09:12.190" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_list" name="Get Strip String">
<doc>########################################################################</doc>
<arguments>
<arg>${TEST_NAME}</arg>
</arguments>
<assign>
<var>${test_name}</var>
</assign>
<msg level="INFO" timestamp="20170706 20:09:12.191">${test_name} = PowerOnTest</msg>
<status endtime="20170706 20:09:12.191" starttime="20170706 20:09:12.190" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${FFDC_TIME}_</arg>
<arg>${test_name}</arg>
</arguments>
<assign>
<var>${test_name}</var>
</assign>
<msg level="INFO" timestamp="20170706 20:09:12.191">${test_name} = 20170706200912176963_PowerOnTest</msg>
<status endtime="20170706 20:09:12.191" starttime="20170706 20:09:12.191" status="PASS"></status>
</kw>
<status endtime="20170706 20:09:12.192" starttime="20170706 20:09:12.189" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170706 20:09:12.192">${FFDC_DIR_PATH} = /tmp/fspcibld/956/obmc-robot/logs/20170706200912176963_TestsTestBasicPoweron/20170706200912176963_PowerOnTest/</msg>
<msg level="INFO" timestamp="20170706 20:09:12.194">${FFDC_PREFIX} = 20170706200912176963_</msg>
<msg level="INFO" timestamp="20170706 20:09:12.223">${LOG_PREFIX} = /tmp/fspcibld/956/obmc-robot/logs/20170706200912176963_TestsTestBasicPoweron/20170706200912176963_PowerOnTest/20170706200912176963_</msg>
<kw library="OperatingSystem" name="Create Directory">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>/tmp/fspcibld/956/obmc-robot/logs/20170706200912176963_TestsTestBasicPoweron/20170706200912176963_PowerOnTest/</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170706 20:09:12.225">Created directory '&lt;a href="file:///tmp/fspcibld/956/obmc-robot/logs/20170706200912176963_TestsTestBasicPoweron/20170706200912176963_PowerOnTest"&gt;/tmp/fspcibld/956/obmc-robot/logs/20170706200912176963_TestsTestBasicPoweron/20170706200912176963_PowerOnTest&lt;/a&gt;'.</msg>
<status endtime="20170706 20:09:12.225" starttime="20170706 20:09:12.224" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170706 20:09:12.230">${FFDC_FILE_PATH} = /tmp/fspcibld/956/obmc-robot/logs/20170706200912176963_TestsTestBasicPoweron/20170706200912176963_PowerOnTest/20170706200912176963_BMC_general.txt</msg>
<kw library="openbmc_ffdc_utils" name="Header Message">
<doc>Write header message to the report document manifest.</doc>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${HEADER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170706 20:09:12.257">Appended to file '&lt;a href="file:///tmp/fspcibld/956/obmc-robot/logs/20170706200912176963_TestsTestBasicPoweron/20170706200912176963_PowerOnTest/20170706200912176963_BMC_general.txt"&gt;/tmp/fspcibld/956/obmc-robot/logs/20170706200912176963_TestsTestBasicPoweron/20170706200912176963_PowerOnTest/20170706200912176963_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170706 20:09:12.257" starttime="20170706 20:09:12.256" status="PASS"></status>
</kw>
<status endtime="20170706 20:09:12.257" starttime="20170706 20:09:12.255" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170706 20:09:12.258">Appended to file '&lt;a href="file:///tmp/fspcibld/956/obmc-robot/logs/20170706200912176963_TestsTestBasicPoweron/20170706200912176963_PowerOnTest/20170706200912176963_BMC_general.txt"&gt;/tmp/fspcibld/956/obmc-robot/logs/20170706200912176963_TestsTestBasicPoweron/20170706200912176963_PowerOnTest/20170706200912176963_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170706 20:09:12.258" starttime="20170706 20:09:12.258" status="PASS"></status>
</kw>
<status endtime="20170706 20:09:12.258" starttime="20170706 20:09:12.257" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Suite File\t\t: ${SUITE_NAME} ${\n}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170706 20:09:12.259">Appended to file '&lt;a href="file:///tmp/fspcibld/956/obmc-robot/logs/20170706200912176963_TestsTestBasicPoweron/20170706200912176963_PowerOnTest/20170706200912176963_BMC_general.txt"&gt;/tmp/fspcibld/956/obmc-robot/logs/20170706200912176963_TestsTestBasicPoweron/20170706200912176963_PowerOnTest/20170706200912176963_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170706 20:09:12.259" starttime="20170706 20:09:12.259" status="PASS"></status>
</kw>
<status endtime="20170706 20:09:12.260" starttime="20170706 20:09:12.258" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Case Name\t\t: ${TEST_NAME}${\n}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170706 20:09:12.265">Appended to file '&lt;a href="file:///tmp/fspcibld/956/obmc-robot/logs/20170706200912176963_TestsTestBasicPoweron/20170706200912176963_PowerOnTest/20170706200912176963_BMC_general.txt"&gt;/tmp/fspcibld/956/obmc-robot/logs/20170706200912176963_TestsTestBasicPoweron/20170706200912176963_PowerOnTest/20170706200912176963_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170706 20:09:12.265" starttime="20170706 20:09:12.264" status="PASS"></status>
</kw>
<status endtime="20170706 20:09:12.265" starttime="20170706 20:09:12.260" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Source File\t: ${SUITE_SOURCE}${\n}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170706 20:09:12.266">Appended to file '&lt;a href="file:///tmp/fspcibld/956/obmc-robot/logs/20170706200912176963_TestsTestBasicPoweron/20170706200912176963_PowerOnTest/20170706200912176963_BMC_general.txt"&gt;/tmp/fspcibld/956/obmc-robot/logs/20170706200912176963_TestsTestBasicPoweron/20170706200912176963_PowerOnTest/20170706200912176963_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170706 20:09:12.266" starttime="20170706 20:09:12.266" status="PASS"></status>
</kw>
<status endtime="20170706 20:09:12.267" starttime="20170706 20:09:12.265" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Failure Time Stamp\t: ${FFDC_TIME}${\n}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170706 20:09:12.268">Appended to file '&lt;a href="file:///tmp/fspcibld/956/obmc-robot/logs/20170706200912176963_TestsTestBasicPoweron/20170706200912176963_PowerOnTest/20170706200912176963_BMC_general.txt"&gt;/tmp/fspcibld/956/obmc-robot/logs/20170706200912176963_TestsTestBasicPoweron/20170706200912176963_PowerOnTest/20170706200912176963_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170706 20:09:12.268" starttime="20170706 20:09:12.267" status="PASS"></status>
</kw>
<status endtime="20170706 20:09:12.268" starttime="20170706 20:09:12.267" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Error Message\t: ${TEST_MESSAGE}${\n}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170706 20:09:12.269">Appended to file '&lt;a href="file:///tmp/fspcibld/956/obmc-robot/logs/20170706200912176963_TestsTestBasicPoweron/20170706200912176963_PowerOnTest/20170706200912176963_BMC_general.txt"&gt;/tmp/fspcibld/956/obmc-robot/logs/20170706200912176963_TestsTestBasicPoweron/20170706200912176963_PowerOnTest/20170706200912176963_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170706 20:09:12.269" starttime="20170706 20:09:12.269" status="PASS"></status>
</kw>
<status endtime="20170706 20:09:12.269" starttime="20170706 20:09:12.268" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Documentation\t:${\n}${TEST_DOCUMENTATION}${\n}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170706 20:09:12.271">Appended to file '&lt;a href="file:///tmp/fspcibld/956/obmc-robot/logs/20170706200912176963_TestsTestBasicPoweron/20170706200912176963_PowerOnTest/20170706200912176963_BMC_general.txt"&gt;/tmp/fspcibld/956/obmc-robot/logs/20170706200912176963_TestsTestBasicPoweron/20170706200912176963_PowerOnTest/20170706200912176963_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170706 20:09:12.271" starttime="20170706 20:09:12.270" status="PASS"></status>
</kw>
<status endtime="20170706 20:09:12.271" starttime="20170706 20:09:12.269" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170706 20:09:12.272">Appended to file '&lt;a href="file:///tmp/fspcibld/956/obmc-robot/logs/20170706200912176963_TestsTestBasicPoweron/20170706200912176963_PowerOnTest/20170706200912176963_BMC_general.txt"&gt;/tmp/fspcibld/956/obmc-robot/logs/20170706200912176963_TestsTestBasicPoweron/20170706200912176963_PowerOnTest/20170706200912176963_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170706 20:09:12.272" starttime="20170706 20:09:12.271" status="PASS"></status>
</kw>
<status endtime="20170706 20:09:12.272" starttime="20170706 20:09:12.271" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Test Setup Info">
<doc>BMC IP, Model and other information</doc>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}-----------------------${\n}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170706 20:09:12.274">Appended to file '&lt;a href="file:///tmp/fspcibld/956/obmc-robot/logs/20170706200912176963_TestsTestBasicPoweron/20170706200912176963_PowerOnTest/20170706200912176963_BMC_general.txt"&gt;/tmp/fspcibld/956/obmc-robot/logs/20170706200912176963_TestsTestBasicPoweron/20170706200912176963_PowerOnTest/20170706200912176963_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170706 20:09:12.274" starttime="20170706 20:09:12.273" status="PASS"></status>
</kw>
<status endtime="20170706 20:09:12.274" starttime="20170706 20:09:12.273" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Setup Information:</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170706 20:09:12.275">Appended to file '&lt;a href="file:///tmp/fspcibld/956/obmc-robot/logs/20170706200912176963_TestsTestBasicPoweron/20170706200912176963_PowerOnTest/20170706200912176963_BMC_general.txt"&gt;/tmp/fspcibld/956/obmc-robot/logs/20170706200912176963_TestsTestBasicPoweron/20170706200912176963_PowerOnTest/20170706200912176963_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170706 20:09:12.275" starttime="20170706 20:09:12.274" status="PASS"></status>
</kw>
<status endtime="20170706 20:09:12.275" starttime="20170706 20:09:12.274" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}-----------------------${\n}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170706 20:09:12.276">Appended to file '&lt;a href="file:///tmp/fspcibld/956/obmc-robot/logs/20170706200912176963_TestsTestBasicPoweron/20170706200912176963_PowerOnTest/20170706200912176963_BMC_general.txt"&gt;/tmp/fspcibld/956/obmc-robot/logs/20170706200912176963_TestsTestBasicPoweron/20170706200912176963_PowerOnTest/20170706200912176963_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170706 20:09:12.276" starttime="20170706 20:09:12.276" status="PASS"></status>
</kw>
<status endtime="20170706 20:09:12.276" starttime="20170706 20:09:12.275" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>OPENBMC HOST \t: ${OPENBMC_HOST}${\n}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170706 20:09:12.278">Appended to file '&lt;a href="file:///tmp/fspcibld/956/obmc-robot/logs/20170706200912176963_TestsTestBasicPoweron/20170706200912176963_PowerOnTest/20170706200912176963_BMC_general.txt"&gt;/tmp/fspcibld/956/obmc-robot/logs/20170706200912176963_TestsTestBasicPoweron/20170706200912176963_PowerOnTest/20170706200912176963_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170706 20:09:12.278" starttime="20170706 20:09:12.277" status="PASS"></status>
</kw>
<status endtime="20170706 20:09:12.278" starttime="20170706 20:09:12.277" status="PASS"></status>
</kw>
<kw library="utils" name="Get BMC System Model">
<doc>Get the BMC model from the device tree.</doc>
<assign>
<var>${model_name}</var>
</assign>
<kw library="connection_client" name="Open Connection And Log In">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw library="Collections" name="Dictionary Should Contain Key">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg level="FAIL" timestamp="20170706 20:09:12.280">Dictionary does not contain key 'host'.</msg>
<status endtime="20170706 20:09:12.280" starttime="20170706 20:09:12.280" status="FAIL"></status>
</kw>
<msg level="INFO" timestamp="20170706 20:09:12.280">${has_host} = False</msg>
<status endtime="20170706 20:09:12.280" starttime="20170706 20:09:12.279" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status endtime="20170706 20:09:12.281" starttime="20170706 20:09:12.281" status="PASS"></status>
</kw>
<status endtime="20170706 20:09:12.282" starttime="20170706 20:09:12.281" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<kw library="connection_client" name="User input SSH and HTTPs Ports">
<doc>Update the global SSH and HTTPs port variable for QEMU</doc>
<kw library="BuiltIn" name="Convert To Integer">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${SSH_PORT}</arg>
</arguments>
<assign>
<var>${port_num}</var>
</assign>
<msg level="INFO" timestamp="20170706 20:09:12.283">${port_num} = 22</msg>
<status endtime="20170706 20:09:12.283" starttime="20170706 20:09:12.283" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Replace Variables">
<doc>Replaces variables in the given text with their current values.</doc>
<arguments>
<arg>${port_num}</arg>
</arguments>
<assign>
<var>${SSH_PORT}</var>
</assign>
<msg level="INFO" timestamp="20170706 20:09:12.284">${SSH_PORT} = 22</msg>
<status endtime="20170706 20:09:12.284" starttime="20170706 20:09:12.283" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Convert To Integer">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${HTTPS_PORT}</arg>
</arguments>
<assign>
<var>${https_num}</var>
</assign>
<msg level="INFO" timestamp="20170706 20:09:12.284">${https_num} = 443</msg>
<status endtime="20170706 20:09:12.284" starttime="20170706 20:09:12.284" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Set Global Variable">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${AUTH_URI}</arg>
<arg>https://${OPENBMC_HOST}:${https_num}</arg>
</arguments>
<msg level="INFO" timestamp="20170706 20:09:12.285">${AUTH_URI} = https://9.3.21.61:443</msg>
<status endtime="20170706 20:09:12.285" starttime="20170706 20:09:12.285" status="PASS"></status>
</kw>
<status endtime="20170706 20:09:12.285" starttime="20170706 20:09:12.282" status="PASS"></status>
</kw>
<status endtime="20170706 20:09:12.285" starttime="20170706 20:09:12.282" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw library="Collections" name="Dictionary Should Contain Key">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg level="FAIL" timestamp="20170706 20:09:12.286">Dictionary does not contain key 'port'.</msg>
<status endtime="20170706 20:09:12.286" starttime="20170706 20:09:12.286" status="FAIL"></status>
</kw>
<msg level="INFO" timestamp="20170706 20:09:12.286">${has_port} = False</msg>
<status endtime="20170706 20:09:12.287" starttime="20170706 20:09:12.286" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keywords">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
</arguments>
<status endtime="20170706 20:09:12.288" starttime="20170706 20:09:12.288" status="PASS"></status>
</kw>
<kw library="SSHLibrary" name="Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status endtime="20170706 20:09:12.289" starttime="20170706 20:09:12.288" status="PASS"></status>
</kw>
<status endtime="20170706 20:09:12.289" starttime="20170706 20:09:12.287" status="PASS"></status>
</kw>
<status endtime="20170706 20:09:12.289" starttime="20170706 20:09:12.287" status="PASS"></status>
</kw>
<kw library="SSHLibrary" name="Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg level="INFO" timestamp="20170706 20:09:12.290">Logging into '9.3.21.61:22' as 'root'.</msg>
<msg level="INFO" timestamp="20170706 20:09:13.937">Read output: root@witherspoon:~#</msg>
<status endtime="20170706 20:09:13.937" starttime="20170706 20:09:12.290" status="PASS"></status>
</kw>
<status endtime="20170706 20:09:13.937" starttime="20170706 20:09:12.278" status="PASS"></status>
</kw>
<kw library="SSHLibrary" name="Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>cat ${devicetree_base} | cut -d " " -f 1</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${bmc_model}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170706 20:09:13.938">Executing command 'cat /sys/firmware/devicetree/base/model | cut -d " " -f 1'.</msg>
<msg level="INFO" timestamp="20170706 20:09:14.015">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20170706 20:09:14.015">${bmc_model} = Witherspoon</msg>
<msg level="INFO" timestamp="20170706 20:09:14.015">${stderr} = </msg>
<status endtime="20170706 20:09:14.015" starttime="20170706 20:09:13.938" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Empty">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg level="INFO" timestamp="20170706 20:09:14.016">Length is 0</msg>
<status endtime="20170706 20:09:14.016" starttime="20170706 20:09:14.016" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Not Be Empty">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${bmc_model}</arg>
</arguments>
<msg level="INFO" timestamp="20170706 20:09:14.016">Length is 11</msg>
<status endtime="20170706 20:09:14.016" starttime="20170706 20:09:14.016" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170706 20:09:14.017">${model_name} = Witherspoon</msg>
<status endtime="20170706 20:09:14.017" starttime="20170706 20:09:12.278" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>SYSTEM TYPE \t: ${model_name}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170706 20:09:14.018">Appended to file '&lt;a href="file:///tmp/fspcibld/956/obmc-robot/logs/20170706200912176963_TestsTestBasicPoweron/20170706200912176963_PowerOnTest/20170706200912176963_BMC_general.txt"&gt;/tmp/fspcibld/956/obmc-robot/logs/20170706200912176963_TestsTestBasicPoweron/20170706200912176963_PowerOnTest/20170706200912176963_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170706 20:09:14.018" starttime="20170706 20:09:14.018" status="PASS"></status>
</kw>
<status endtime="20170706 20:09:14.019" starttime="20170706 20:09:14.017" status="PASS"></status>
</kw>
<status endtime="20170706 20:09:14.019" starttime="20170706 20:09:12.272" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${MSG_INTRO}${\n}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170706 20:09:14.020">Appended to file '&lt;a href="file:///tmp/fspcibld/956/obmc-robot/logs/20170706200912176963_TestsTestBasicPoweron/20170706200912176963_PowerOnTest/20170706200912176963_BMC_general.txt"&gt;/tmp/fspcibld/956/obmc-robot/logs/20170706200912176963_TestsTestBasicPoweron/20170706200912176963_PowerOnTest/20170706200912176963_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170706 20:09:14.020" starttime="20170706 20:09:14.019" status="PASS"></status>
</kw>
<status endtime="20170706 20:09:14.020" starttime="20170706 20:09:14.019" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_list" name="Get Ffdc Cmd Index">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg level="INFO" timestamp="20170706 20:09:14.021">@{entries} = [ DRIVER INFO | BMC DATA | APPLICATION DATA ]</msg>
<status endtime="20170706 20:09:14.021" starttime="20170706 20:09:14.020" status="PASS"></status>
</kw>
<kw name="${index} IN [ @{entries} ]" type="for">
<kw name="${index} = DRIVER INFO" type="foritem">
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>* ${index.upper()}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170706 20:09:14.022">Appended to file '&lt;a href="file:///tmp/fspcibld/956/obmc-robot/logs/20170706200912176963_TestsTestBasicPoweron/20170706200912176963_PowerOnTest/20170706200912176963_BMC_general.txt"&gt;/tmp/fspcibld/956/obmc-robot/logs/20170706200912176963_TestsTestBasicPoweron/20170706200912176963_PowerOnTest/20170706200912176963_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170706 20:09:14.022" starttime="20170706 20:09:14.022" status="PASS"></status>
</kw>
<status endtime="20170706 20:09:14.022" starttime="20170706 20:09:14.021" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170706 20:09:14.023">Appended to file '&lt;a href="file:///tmp/fspcibld/956/obmc-robot/logs/20170706200912176963_TestsTestBasicPoweron/20170706200912176963_PowerOnTest/20170706200912176963_BMC_general.txt"&gt;/tmp/fspcibld/956/obmc-robot/logs/20170706200912176963_TestsTestBasicPoweron/20170706200912176963_PowerOnTest/20170706200912176963_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170706 20:09:14.023" starttime="20170706 20:09:14.023" status="PASS"></status>
</kw>
<status endtime="20170706 20:09:14.024" starttime="20170706 20:09:14.022" status="PASS"></status>
</kw>
<status endtime="20170706 20:09:14.024" starttime="20170706 20:09:14.021" status="PASS"></status>
</kw>
<kw name="${index} = BMC DATA" type="foritem">
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>* ${index.upper()}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170706 20:09:14.025">Appended to file '&lt;a href="file:///tmp/fspcibld/956/obmc-robot/logs/20170706200912176963_TestsTestBasicPoweron/20170706200912176963_PowerOnTest/20170706200912176963_BMC_general.txt"&gt;/tmp/fspcibld/956/obmc-robot/logs/20170706200912176963_TestsTestBasicPoweron/20170706200912176963_PowerOnTest/20170706200912176963_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170706 20:09:14.025" starttime="20170706 20:09:14.024" status="PASS"></status>
</kw>
<status endtime="20170706 20:09:14.025" starttime="20170706 20:09:14.024" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170706 20:09:14.026">Appended to file '&lt;a href="file:///tmp/fspcibld/956/obmc-robot/logs/20170706200912176963_TestsTestBasicPoweron/20170706200912176963_PowerOnTest/20170706200912176963_BMC_general.txt"&gt;/tmp/fspcibld/956/obmc-robot/logs/20170706200912176963_TestsTestBasicPoweron/20170706200912176963_PowerOnTest/20170706200912176963_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170706 20:09:14.026" starttime="20170706 20:09:14.026" status="PASS"></status>
</kw>
<status endtime="20170706 20:09:14.026" starttime="20170706 20:09:14.025" status="PASS"></status>
</kw>
<status endtime="20170706 20:09:14.026" starttime="20170706 20:09:14.024" status="PASS"></status>
</kw>
<kw name="${index} = APPLICATION DATA" type="foritem">
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>* ${index.upper()}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170706 20:09:14.027">Appended to file '&lt;a href="file:///tmp/fspcibld/956/obmc-robot/logs/20170706200912176963_TestsTestBasicPoweron/20170706200912176963_PowerOnTest/20170706200912176963_BMC_general.txt"&gt;/tmp/fspcibld/956/obmc-robot/logs/20170706200912176963_TestsTestBasicPoweron/20170706200912176963_PowerOnTest/20170706200912176963_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170706 20:09:14.028" starttime="20170706 20:09:14.027" status="PASS"></status>
</kw>
<status endtime="20170706 20:09:14.028" starttime="20170706 20:09:14.027" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170706 20:09:14.029">Appended to file '&lt;a href="file:///tmp/fspcibld/956/obmc-robot/logs/20170706200912176963_TestsTestBasicPoweron/20170706200912176963_PowerOnTest/20170706200912176963_BMC_general.txt"&gt;/tmp/fspcibld/956/obmc-robot/logs/20170706200912176963_TestsTestBasicPoweron/20170706200912176963_PowerOnTest/20170706200912176963_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170706 20:09:14.029" starttime="20170706 20:09:14.028" status="PASS"></status>
</kw>
<status endtime="20170706 20:09:14.029" starttime="20170706 20:09:14.028" status="PASS"></status>
</kw>
<status endtime="20170706 20:09:14.029" starttime="20170706 20:09:14.026" status="PASS"></status>
</kw>
<status endtime="20170706 20:09:14.029" starttime="20170706 20:09:14.021" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${MSG_DETAIL}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170706 20:09:14.030">Appended to file '&lt;a href="file:///tmp/fspcibld/956/obmc-robot/logs/20170706200912176963_TestsTestBasicPoweron/20170706200912176963_PowerOnTest/20170706200912176963_BMC_general.txt"&gt;/tmp/fspcibld/956/obmc-robot/logs/20170706200912176963_TestsTestBasicPoweron/20170706200912176963_PowerOnTest/20170706200912176963_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170706 20:09:14.030" starttime="20170706 20:09:14.030" status="PASS"></status>
</kw>
<status endtime="20170706 20:09:14.030" starttime="20170706 20:09:14.029" status="PASS"></status>
</kw>
<status endtime="20170706 20:09:14.031" starttime="20170706 20:09:12.255" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_methods" name="Call FFDC Methods">
<doc>Call into FFDC Keyword index list.</doc>
<arguments>
<arg>ffdc_function_list=</arg>
</arguments>
<kw library="openbmc_ffdc_list" name="Get Ffdc Method Index">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg level="INFO" timestamp="20170706 20:09:14.041">@{entries} = [ BMC LOGS ]</msg>
<status endtime="20170706 20:09:14.041" starttime="20170706 20:09:14.041" status="PASS"></status>
</kw>
<kw name="${index} IN [ @{entries} ]" type="for">
<kw name="${index} = BMC LOGS" type="foritem">
<kw library="openbmc_ffdc_methods" name="Method Call Keyword List">
<doc>Iterate the list through keyword index.</doc>
<arguments>
<arg>${index}</arg>
<arg>${ffdc_function_list}</arg>
</arguments>
<kw library="openbmc_ffdc_list" name="Get Ffdc Method Call">
<doc>########################################################################</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<assign>
<var>@{method_list}</var>
</assign>
<msg level="INFO" timestamp="20170706 20:09:14.042">@{method_list} = [ ('FFDC Generic Report', 'BMC FFDC Manifest') | ('Core Files', 'SCP Coredump Files') | ('OS FFDC', 'OS FFDC Files') | ('BMC Specific Files', 'BMC FFDC Files') | ('SEL Log', 'Collect eSEL Log') | ('Ge...</msg>
<status endtime="20170706 20:09:14.042" starttime="20170706 20:09:14.042" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${ffdc_function_list}' == '${EMPTY}'</arg>
<arg>Get FFDC Method Desc</arg>
<arg>${index}</arg>
<arg>ELSE</arg>
<arg>Split String</arg>
<arg>${ffdc_function_list}</arg>
<arg>separator=:</arg>
</arguments>
<assign>
<var>@{ffdc_function_list}</var>
</assign>
<kw library="openbmc_ffdc_list" name="Get Ffdc Method Desc">
<doc>########################################################################</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<status endtime="20170706 20:09:14.044" starttime="20170706 20:09:14.044" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170706 20:09:14.045">@{ffdc_function_list} = [ FFDC Generic Report | Core Files | OS FFDC | BMC Specific Files | SEL Log | Get Request FFDC ]</msg>
<status endtime="20170706 20:09:14.045" starttime="20170706 20:09:14.043" status="PASS"></status>
</kw>
<kw name="${method} IN [ @{method_list} ]" type="for">
<kw name="${method} = ('FFDC Generic Report', 'BMC FFDC Manifest')" type="foritem">
<kw library="openbmc_ffdc_methods" name="Execute Keyword Method">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw library="Collections" name="List Should Contain Value">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status endtime="20170706 20:09:14.047" starttime="20170706 20:09:14.047" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170706 20:09:14.047">${status} = PASS</msg>
<msg level="INFO" timestamp="20170706 20:09:14.047">${ret_values} = None</msg>
<status endtime="20170706 20:09:14.047" starttime="20170706 20:09:14.046" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status endtime="20170706 20:09:14.048" starttime="20170706 20:09:14.048" status="PASS"></status>
</kw>
<kw library="gen_robot_keyword" name="Run Key">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw library="openbmc_ffdc_methods" name="BMC FFDC Manifest">
<doc>Get the commands index for the FFDC_BMC_CMD,</doc>
<kw library="connection_client" name="Open Connection And Log In">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw library="Collections" name="Dictionary Should Contain Key">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg level="FAIL" timestamp="20170706 20:09:14.094">Dictionary does not contain key 'host'.</msg>
<status endtime="20170706 20:09:14.094" starttime="20170706 20:09:14.092" status="FAIL"></status>
</kw>
<msg level="INFO" timestamp="20170706 20:09:14.095">${has_host} = False</msg>
<status endtime="20170706 20:09:14.095" starttime="20170706 20:09:14.091" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status endtime="20170706 20:09:14.096" starttime="20170706 20:09:14.096" status="PASS"></status>
</kw>
<status endtime="20170706 20:09:14.096" starttime="20170706 20:09:14.095" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<kw library="connection_client" name="User input SSH and HTTPs Ports">
<doc>Update the global SSH and HTTPs port variable for QEMU</doc>
<kw library="BuiltIn" name="Convert To Integer">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${SSH_PORT}</arg>
</arguments>
<assign>
<var>${port_num}</var>
</assign>
<msg level="INFO" timestamp="20170706 20:09:14.099">${port_num} = 22</msg>
<status endtime="20170706 20:09:14.099" starttime="20170706 20:09:14.098" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Replace Variables">
<doc>Replaces variables in the given text with their current values.</doc>
<arguments>
<arg>${port_num}</arg>
</arguments>
<assign>
<var>${SSH_PORT}</var>
</assign>
<msg level="INFO" timestamp="20170706 20:09:14.099">${SSH_PORT} = 22</msg>
<status endtime="20170706 20:09:14.099" starttime="20170706 20:09:14.099" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Convert To Integer">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${HTTPS_PORT}</arg>
</arguments>
<assign>
<var>${https_num}</var>
</assign>
<msg level="INFO" timestamp="20170706 20:09:14.100">${https_num} = 443</msg>
<status endtime="20170706 20:09:14.100" starttime="20170706 20:09:14.100" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Set Global Variable">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${AUTH_URI}</arg>
<arg>https://${OPENBMC_HOST}:${https_num}</arg>
</arguments>
<msg level="INFO" timestamp="20170706 20:09:14.101">${AUTH_URI} = https://9.3.21.61:443</msg>
<status endtime="20170706 20:09:14.101" starttime="20170706 20:09:14.101" status="PASS"></status>
</kw>
<status endtime="20170706 20:09:14.101" starttime="20170706 20:09:14.097" status="PASS"></status>
</kw>
<status endtime="20170706 20:09:14.101" starttime="20170706 20:09:14.097" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw library="Collections" name="Dictionary Should Contain Key">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg level="FAIL" timestamp="20170706 20:09:14.102">Dictionary does not contain key 'port'.</msg>
<status endtime="20170706 20:09:14.102" starttime="20170706 20:09:14.102" status="FAIL"></status>
</kw>
<msg level="INFO" timestamp="20170706 20:09:14.103">${has_port} = False</msg>
<status endtime="20170706 20:09:14.103" starttime="20170706 20:09:14.102" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keywords">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
</arguments>
<status endtime="20170706 20:09:14.104" starttime="20170706 20:09:14.104" status="PASS"></status>
</kw>
<kw library="SSHLibrary" name="Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status endtime="20170706 20:09:14.105" starttime="20170706 20:09:14.105" status="PASS"></status>
</kw>
<status endtime="20170706 20:09:14.105" starttime="20170706 20:09:14.104" status="PASS"></status>
</kw>
<status endtime="20170706 20:09:14.105" starttime="20170706 20:09:14.103" status="PASS"></status>
</kw>
<kw library="SSHLibrary" name="Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg level="INFO" timestamp="20170706 20:09:14.106">Logging into '9.3.21.61:22' as 'root'.</msg>
<msg level="INFO" timestamp="20170706 20:09:15.851">Read output: root@witherspoon:~#</msg>
<status endtime="20170706 20:09:15.852" starttime="20170706 20:09:14.105" status="PASS"></status>
</kw>
<status endtime="20170706 20:09:15.852" starttime="20170706 20:09:14.091" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_list" name="Get Ffdc Cmd Index">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg level="INFO" timestamp="20170706 20:09:15.853">@{entries} = [ DRIVER INFO | BMC DATA | APPLICATION DATA ]</msg>
<status endtime="20170706 20:09:15.853" starttime="20170706 20:09:15.852" status="PASS"></status>
</kw>
<kw name="${index} IN [ @{entries} ]" type="for">
<kw name="${index} = DRIVER INFO" type="foritem">
<kw library="openbmc_ffdc_methods" name="Iterate BMC Command List Pairs">
<doc>Feed in key pair list from dictionary to execute</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw library="openbmc_ffdc_list" name="Get Ffdc Bmc Cmd">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg level="INFO" timestamp="20170706 20:09:15.854">@{cmd_list} = [ ('Build Info', 'cat /etc/version') | ('FW Level', 'cat /etc/os-release') ]</msg>
<status endtime="20170706 20:09:15.854" starttime="20170706 20:09:15.854" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Set Suite Variable">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${ENTRY_INDEX}</arg>
<arg>${key_index}</arg>
</arguments>
<msg level="INFO" timestamp="20170706 20:09:15.858">${ENTRY_INDEX} = DRIVER INFO</msg>
<status endtime="20170706 20:09:15.858" starttime="20170706 20:09:15.854" status="PASS"></status>
</kw>
<kw name="${cmd} IN [ @{cmd_list} ]" type="for">
<kw name="${cmd} = ('Build Info', 'cat /etc/version')" type="foritem">
<kw library="openbmc_ffdc_methods" name="Execute Command and Write FFDC">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Cmd Output to FFDC File">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170706 20:09:15.862">Appended to file '&lt;a href="file:///tmp/fspcibld/956/obmc-robot/logs/20170706200912176963_TestsTestBasicPoweron/20170706200912176963_PowerOnTest/20170706200912176963_BMC_general.txt"&gt;/tmp/fspcibld/956/obmc-robot/logs/20170706200912176963_TestsTestBasicPoweron/20170706200912176963_PowerOnTest/20170706200912176963_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170706 20:09:15.862" starttime="20170706 20:09:15.861" status="PASS"></status>
</kw>
<status endtime="20170706 20:09:15.862" starttime="20170706 20:09:15.861" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170706 20:09:15.864">Appended to file '&lt;a href="file:///tmp/fspcibld/956/obmc-robot/logs/20170706200912176963_TestsTestBasicPoweron/20170706200912176963_PowerOnTest/20170706200912176963_BMC_general.txt"&gt;/tmp/fspcibld/956/obmc-robot/logs/20170706200912176963_TestsTestBasicPoweron/20170706200912176963_PowerOnTest/20170706200912176963_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170706 20:09:15.864" starttime="20170706 20:09:15.864" status="PASS"></status>
</kw>
<status endtime="20170706 20:09:15.865" starttime="20170706 20:09:15.863" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170706 20:09:15.866">Appended to file '&lt;a href="file:///tmp/fspcibld/956/obmc-robot/logs/20170706200912176963_TestsTestBasicPoweron/20170706200912176963_PowerOnTest/20170706200912176963_BMC_general.txt"&gt;/tmp/fspcibld/956/obmc-robot/logs/20170706200912176963_TestsTestBasicPoweron/20170706200912176963_PowerOnTest/20170706200912176963_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170706 20:09:15.866" starttime="20170706 20:09:15.865" status="PASS"></status>
</kw>
<status endtime="20170706 20:09:15.866" starttime="20170706 20:09:15.865" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170706 20:09:15.867">Appended to file '&lt;a href="file:///tmp/fspcibld/956/obmc-robot/logs/20170706200912176963_TestsTestBasicPoweron/20170706200912176963_PowerOnTest/20170706200912176963_BMC_general.txt"&gt;/tmp/fspcibld/956/obmc-robot/logs/20170706200912176963_TestsTestBasicPoweron/20170706200912176963_PowerOnTest/20170706200912176963_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170706 20:09:15.867" starttime="20170706 20:09:15.867" status="PASS"></status>
</kw>
<status endtime="20170706 20:09:15.867" starttime="20170706 20:09:15.866" status="PASS"></status>
</kw>
<status endtime="20170706 20:09:15.867" starttime="20170706 20:09:15.860" status="PASS"></status>
</kw>
<status endtime="20170706 20:09:15.867" starttime="20170706 20:09:15.860" status="PASS"></status>
</kw>
<kw library="SSHLibrary" name="Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170706 20:09:15.868">Executing command 'cat /etc/version'.</msg>
<msg level="INFO" timestamp="20170706 20:09:15.925">Command exited with return code 1.</msg>
<msg level="INFO" timestamp="20170706 20:09:15.925">${stdout} = </msg>
<msg level="INFO" timestamp="20170706 20:09:15.925">${stderr} = cat: can't open '/etc/version': No such file or directory</msg>
<status endtime="20170706 20:09:15.925" starttime="20170706 20:09:15.868" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170706 20:09:15.932">Appended to file '&lt;a href="file:///tmp/fspcibld/956/obmc-robot/logs/20170706200912176963_TestsTestBasicPoweron/20170706200912176963_PowerOnTest/20170706200912176963_BMC_general.txt"&gt;/tmp/fspcibld/956/obmc-robot/logs/20170706200912176963_TestsTestBasicPoweron/20170706200912176963_PowerOnTest/20170706200912176963_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170706 20:09:15.932" starttime="20170706 20:09:15.931" status="PASS"></status>
</kw>
<status endtime="20170706 20:09:15.932" starttime="20170706 20:09:15.931" status="PASS"></status>
</kw>
<status endtime="20170706 20:09:15.932" starttime="20170706 20:09:15.926" status="PASS"></status>
</kw>
<status endtime="20170706 20:09:15.932" starttime="20170706 20:09:15.859" status="PASS"></status>
</kw>
<status endtime="20170706 20:09:15.932" starttime="20170706 20:09:15.859" status="PASS"></status>
</kw>
<kw name="${cmd} = ('FW Level', 'cat /etc/os-release')" type="foritem">
<kw library="openbmc_ffdc_methods" name="Execute Command and Write FFDC">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Cmd Output to FFDC File">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170706 20:09:15.936">Appended to file '&lt;a href="file:///tmp/fspcibld/956/obmc-robot/logs/20170706200912176963_TestsTestBasicPoweron/20170706200912176963_PowerOnTest/20170706200912176963_BMC_general.txt"&gt;/tmp/fspcibld/956/obmc-robot/logs/20170706200912176963_TestsTestBasicPoweron/20170706200912176963_PowerOnTest/20170706200912176963_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170706 20:09:15.936" starttime="20170706 20:09:15.935" status="PASS"></status>
</kw>
<status endtime="20170706 20:09:15.936" starttime="20170706 20:09:15.935" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170706 20:09:15.937">Appended to file '&lt;a href="file:///tmp/fspcibld/956/obmc-robot/logs/20170706200912176963_TestsTestBasicPoweron/20170706200912176963_PowerOnTest/20170706200912176963_BMC_general.txt"&gt;/tmp/fspcibld/956/obmc-robot/logs/20170706200912176963_TestsTestBasicPoweron/20170706200912176963_PowerOnTest/20170706200912176963_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170706 20:09:15.938" starttime="20170706 20:09:15.937" status="PASS"></status>
</kw>
<status endtime="20170706 20:09:15.938" starttime="20170706 20:09:15.936" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170706 20:09:15.939">Appended to file '&lt;a href="file:///tmp/fspcibld/956/obmc-robot/logs/20170706200912176963_TestsTestBasicPoweron/20170706200912176963_PowerOnTest/20170706200912176963_BMC_general.txt"&gt;/tmp/fspcibld/956/obmc-robot/logs/20170706200912176963_TestsTestBasicPoweron/20170706200912176963_PowerOnTest/20170706200912176963_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170706 20:09:15.939" starttime="20170706 20:09:15.938" status="PASS"></status>
</kw>
<status endtime="20170706 20:09:15.939" starttime="20170706 20:09:15.938" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170706 20:09:15.940">Appended to file '&lt;a href="file:///tmp/fspcibld/956/obmc-robot/logs/20170706200912176963_TestsTestBasicPoweron/20170706200912176963_PowerOnTest/20170706200912176963_BMC_general.txt"&gt;/tmp/fspcibld/956/obmc-robot/logs/20170706200912176963_TestsTestBasicPoweron/20170706200912176963_PowerOnTest/20170706200912176963_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170706 20:09:15.940" starttime="20170706 20:09:15.940" status="PASS"></status>
</kw>
<status endtime="20170706 20:09:15.940" starttime="20170706 20:09:15.939" status="PASS"></status>
</kw>
<status endtime="20170706 20:09:15.941" starttime="20170706 20:09:15.934" status="PASS"></status>
</kw>
<status endtime="20170706 20:09:15.941" starttime="20170706 20:09:15.934" status="PASS"></status>
</kw>
<kw library="SSHLibrary" name="Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170706 20:09:15.941">Executing command 'cat /etc/os-release'.</msg>
<msg level="INFO" timestamp="20170706 20:09:16.026">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20170706 20:09:16.026">${stdout} = ID="openbmc-phosphor"
NAME="Phosphor OpenBMC (Phosphor OpenBMC Project Reference Distro)"
VERSION="v1.99.7-84"
VERSION_ID="v1.99.7-84-g297bad6"
PRETTY_NAME="Phosphor OpenBMC (Phosphor OpenBMC Project ...</msg>
<msg level="INFO" timestamp="20170706 20:09:16.026">${stderr} = </msg>
<status endtime="20170706 20:09:16.026" starttime="20170706 20:09:15.941" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170706 20:09:16.033">Appended to file '&lt;a href="file:///tmp/fspcibld/956/obmc-robot/logs/20170706200912176963_TestsTestBasicPoweron/20170706200912176963_PowerOnTest/20170706200912176963_BMC_general.txt"&gt;/tmp/fspcibld/956/obmc-robot/logs/20170706200912176963_TestsTestBasicPoweron/20170706200912176963_PowerOnTest/20170706200912176963_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170706 20:09:16.033" starttime="20170706 20:09:16.032" status="PASS"></status>
</kw>
<status endtime="20170706 20:09:16.033" starttime="20170706 20:09:16.031" status="PASS"></status>
</kw>
<status endtime="20170706 20:09:16.033" starttime="20170706 20:09:16.027" status="PASS"></status>
</kw>
<status endtime="20170706 20:09:16.033" starttime="20170706 20:09:15.933" status="PASS"></status>
</kw>
<status endtime="20170706 20:09:16.033" starttime="20170706 20:09:15.933" status="PASS"></status>
</kw>
<status endtime="20170706 20:09:16.033" starttime="20170706 20:09:15.859" status="PASS"></status>
</kw>
<status endtime="20170706 20:09:16.033" starttime="20170706 20:09:15.853" status="PASS"></status>
</kw>
<status endtime="20170706 20:09:16.033" starttime="20170706 20:09:15.853" status="PASS"></status>
</kw>
<kw name="${index} = BMC DATA" type="foritem">
<kw library="openbmc_ffdc_methods" name="Iterate BMC Command List Pairs">
<doc>Feed in key pair list from dictionary to execute</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw library="openbmc_ffdc_list" name="Get Ffdc Bmc Cmd">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg level="INFO" timestamp="20170706 20:09:16.034">@{cmd_list} = [ ('BMC OS', 'uname -a') | ('BMC Uptime', 'uptime') | ('BMC File System Disk Space Usage', 'df -hT') ]</msg>
<status endtime="20170706 20:09:16.034" starttime="20170706 20:09:16.034" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Set Suite Variable">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${ENTRY_INDEX}</arg>
<arg>${key_index}</arg>
</arguments>
<msg level="INFO" timestamp="20170706 20:09:16.035">${ENTRY_INDEX} = BMC DATA</msg>
<status endtime="20170706 20:09:16.035" starttime="20170706 20:09:16.035" status="PASS"></status>
</kw>
<kw name="${cmd} IN [ @{cmd_list} ]" type="for">
<kw name="${cmd} = ('BMC OS', 'uname -a')" type="foritem">
<kw library="openbmc_ffdc_methods" name="Execute Command and Write FFDC">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Cmd Output to FFDC File">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170706 20:09:16.038">Appended to file '&lt;a href="file:///tmp/fspcibld/956/obmc-robot/logs/20170706200912176963_TestsTestBasicPoweron/20170706200912176963_PowerOnTest/20170706200912176963_BMC_general.txt"&gt;/tmp/fspcibld/956/obmc-robot/logs/20170706200912176963_TestsTestBasicPoweron/20170706200912176963_PowerOnTest/20170706200912176963_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170706 20:09:16.038" starttime="20170706 20:09:16.038" status="PASS"></status>
</kw>
<status endtime="20170706 20:09:16.038" starttime="20170706 20:09:16.037" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170706 20:09:16.039">Appended to file '&lt;a href="file:///tmp/fspcibld/956/obmc-robot/logs/20170706200912176963_TestsTestBasicPoweron/20170706200912176963_PowerOnTest/20170706200912176963_BMC_general.txt"&gt;/tmp/fspcibld/956/obmc-robot/logs/20170706200912176963_TestsTestBasicPoweron/20170706200912176963_PowerOnTest/20170706200912176963_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170706 20:09:16.040" starttime="20170706 20:09:16.039" status="PASS"></status>
</kw>
<status endtime="20170706 20:09:16.040" starttime="20170706 20:09:16.038" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170706 20:09:16.041">Appended to file '&lt;a href="file:///tmp/fspcibld/956/obmc-robot/logs/20170706200912176963_TestsTestBasicPoweron/20170706200912176963_PowerOnTest/20170706200912176963_BMC_general.txt"&gt;/tmp/fspcibld/956/obmc-robot/logs/20170706200912176963_TestsTestBasicPoweron/20170706200912176963_PowerOnTest/20170706200912176963_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170706 20:09:16.041" starttime="20170706 20:09:16.040" status="PASS"></status>
</kw>
<status endtime="20170706 20:09:16.041" starttime="20170706 20:09:16.040" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170706 20:09:16.042">Appended to file '&lt;a href="file:///tmp/fspcibld/956/obmc-robot/logs/20170706200912176963_TestsTestBasicPoweron/20170706200912176963_PowerOnTest/20170706200912176963_BMC_general.txt"&gt;/tmp/fspcibld/956/obmc-robot/logs/20170706200912176963_TestsTestBasicPoweron/20170706200912176963_PowerOnTest/20170706200912176963_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170706 20:09:16.042" starttime="20170706 20:09:16.042" status="PASS"></status>
</kw>
<status endtime="20170706 20:09:16.042" starttime="20170706 20:09:16.041" status="PASS"></status>
</kw>
<status endtime="20170706 20:09:16.042" starttime="20170706 20:09:16.037" status="PASS"></status>
</kw>
<status endtime="20170706 20:09:16.043" starttime="20170706 20:09:16.036" status="PASS"></status>
</kw>
<kw library="SSHLibrary" name="Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170706 20:09:16.043">Executing command 'uname -a'.</msg>
<msg level="INFO" timestamp="20170706 20:09:16.138">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20170706 20:09:16.138">${stdout} = Linux witherspoon 4.10.17-990f06c35b7e119f00967e90f0514dbbd2e1b51b #1 Thu Jul 6 18:48:56 UTC 2017 armv6l GNU/Linux</msg>
<msg level="INFO" timestamp="20170706 20:09:16.138">${stderr} = </msg>
<status endtime="20170706 20:09:16.138" starttime="20170706 20:09:16.043" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170706 20:09:16.144">Appended to file '&lt;a href="file:///tmp/fspcibld/956/obmc-robot/logs/20170706200912176963_TestsTestBasicPoweron/20170706200912176963_PowerOnTest/20170706200912176963_BMC_general.txt"&gt;/tmp/fspcibld/956/obmc-robot/logs/20170706200912176963_TestsTestBasicPoweron/20170706200912176963_PowerOnTest/20170706200912176963_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170706 20:09:16.144" starttime="20170706 20:09:16.143" status="PASS"></status>
</kw>
<status endtime="20170706 20:09:16.144" starttime="20170706 20:09:16.143" status="PASS"></status>
</kw>
<status endtime="20170706 20:09:16.144" starttime="20170706 20:09:16.138" status="PASS"></status>
</kw>
<status endtime="20170706 20:09:16.144" starttime="20170706 20:09:16.036" status="PASS"></status>
</kw>
<status endtime="20170706 20:09:16.144" starttime="20170706 20:09:16.035" status="PASS"></status>
</kw>
<kw name="${cmd} = ('BMC Uptime', 'uptime')" type="foritem">
<kw library="openbmc_ffdc_methods" name="Execute Command and Write FFDC">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Cmd Output to FFDC File">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170706 20:09:16.150">Appended to file '&lt;a href="file:///tmp/fspcibld/956/obmc-robot/logs/20170706200912176963_TestsTestBasicPoweron/20170706200912176963_PowerOnTest/20170706200912176963_BMC_general.txt"&gt;/tmp/fspcibld/956/obmc-robot/logs/20170706200912176963_TestsTestBasicPoweron/20170706200912176963_PowerOnTest/20170706200912176963_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170706 20:09:16.150" starttime="20170706 20:09:16.149" status="PASS"></status>
</kw>
<status endtime="20170706 20:09:16.150" starttime="20170706 20:09:16.146" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170706 20:09:16.151">Appended to file '&lt;a href="file:///tmp/fspcibld/956/obmc-robot/logs/20170706200912176963_TestsTestBasicPoweron/20170706200912176963_PowerOnTest/20170706200912176963_BMC_general.txt"&gt;/tmp/fspcibld/956/obmc-robot/logs/20170706200912176963_TestsTestBasicPoweron/20170706200912176963_PowerOnTest/20170706200912176963_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170706 20:09:16.151" starttime="20170706 20:09:16.151" status="PASS"></status>
</kw>
<status endtime="20170706 20:09:16.151" starttime="20170706 20:09:16.150" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170706 20:09:16.152">Appended to file '&lt;a href="file:///tmp/fspcibld/956/obmc-robot/logs/20170706200912176963_TestsTestBasicPoweron/20170706200912176963_PowerOnTest/20170706200912176963_BMC_general.txt"&gt;/tmp/fspcibld/956/obmc-robot/logs/20170706200912176963_TestsTestBasicPoweron/20170706200912176963_PowerOnTest/20170706200912176963_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170706 20:09:16.152" starttime="20170706 20:09:16.152" status="PASS"></status>
</kw>
<status endtime="20170706 20:09:16.153" starttime="20170706 20:09:16.151" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170706 20:09:16.154">Appended to file '&lt;a href="file:///tmp/fspcibld/956/obmc-robot/logs/20170706200912176963_TestsTestBasicPoweron/20170706200912176963_PowerOnTest/20170706200912176963_BMC_general.txt"&gt;/tmp/fspcibld/956/obmc-robot/logs/20170706200912176963_TestsTestBasicPoweron/20170706200912176963_PowerOnTest/20170706200912176963_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170706 20:09:16.154" starttime="20170706 20:09:16.153" status="PASS"></status>
</kw>
<status endtime="20170706 20:09:16.154" starttime="20170706 20:09:16.153" status="PASS"></status>
</kw>
<status endtime="20170706 20:09:16.154" starttime="20170706 20:09:16.146" status="PASS"></status>
</kw>
<status endtime="20170706 20:09:16.154" starttime="20170706 20:09:16.145" status="PASS"></status>
</kw>
<kw library="SSHLibrary" name="Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170706 20:09:16.155">Executing command 'uptime'.</msg>
<msg level="INFO" timestamp="20170706 20:09:16.239">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20170706 20:09:16.240">${stdout} =  20:09:16 up 12 min,  load average: 0.41, 0.89, 0.85</msg>
<msg level="INFO" timestamp="20170706 20:09:16.240">${stderr} = </msg>
<status endtime="20170706 20:09:16.240" starttime="20170706 20:09:16.154" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170706 20:09:16.246">Appended to file '&lt;a href="file:///tmp/fspcibld/956/obmc-robot/logs/20170706200912176963_TestsTestBasicPoweron/20170706200912176963_PowerOnTest/20170706200912176963_BMC_general.txt"&gt;/tmp/fspcibld/956/obmc-robot/logs/20170706200912176963_TestsTestBasicPoweron/20170706200912176963_PowerOnTest/20170706200912176963_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170706 20:09:16.246" starttime="20170706 20:09:16.245" status="PASS"></status>
</kw>
<status endtime="20170706 20:09:16.246" starttime="20170706 20:09:16.245" status="PASS"></status>
</kw>
<status endtime="20170706 20:09:16.246" starttime="20170706 20:09:16.240" status="PASS"></status>
</kw>
<status endtime="20170706 20:09:16.246" starttime="20170706 20:09:16.145" status="PASS"></status>
</kw>
<status endtime="20170706 20:09:16.246" starttime="20170706 20:09:16.144" status="PASS"></status>
</kw>
<kw name="${cmd} = ('BMC File System Disk Space Usage', 'df -hT')" type="foritem">
<kw library="openbmc_ffdc_methods" name="Execute Command and Write FFDC">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Cmd Output to FFDC File">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170706 20:09:16.249">Appended to file '&lt;a href="file:///tmp/fspcibld/956/obmc-robot/logs/20170706200912176963_TestsTestBasicPoweron/20170706200912176963_PowerOnTest/20170706200912176963_BMC_general.txt"&gt;/tmp/fspcibld/956/obmc-robot/logs/20170706200912176963_TestsTestBasicPoweron/20170706200912176963_PowerOnTest/20170706200912176963_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170706 20:09:16.249" starttime="20170706 20:09:16.249" status="PASS"></status>
</kw>
<status endtime="20170706 20:09:16.249" starttime="20170706 20:09:16.248" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170706 20:09:16.251">Appended to file '&lt;a href="file:///tmp/fspcibld/956/obmc-robot/logs/20170706200912176963_TestsTestBasicPoweron/20170706200912176963_PowerOnTest/20170706200912176963_BMC_general.txt"&gt;/tmp/fspcibld/956/obmc-robot/logs/20170706200912176963_TestsTestBasicPoweron/20170706200912176963_PowerOnTest/20170706200912176963_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170706 20:09:16.251" starttime="20170706 20:09:16.250" status="PASS"></status>
</kw>
<status endtime="20170706 20:09:16.251" starttime="20170706 20:09:16.250" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170706 20:09:16.252">Appended to file '&lt;a href="file:///tmp/fspcibld/956/obmc-robot/logs/20170706200912176963_TestsTestBasicPoweron/20170706200912176963_PowerOnTest/20170706200912176963_BMC_general.txt"&gt;/tmp/fspcibld/956/obmc-robot/logs/20170706200912176963_TestsTestBasicPoweron/20170706200912176963_PowerOnTest/20170706200912176963_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170706 20:09:16.252" starttime="20170706 20:09:16.252" status="PASS"></status>
</kw>
<status endtime="20170706 20:09:16.252" starttime="20170706 20:09:16.251" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170706 20:09:16.253">Appended to file '&lt;a href="file:///tmp/fspcibld/956/obmc-robot/logs/20170706200912176963_TestsTestBasicPoweron/20170706200912176963_PowerOnTest/20170706200912176963_BMC_general.txt"&gt;/tmp/fspcibld/956/obmc-robot/logs/20170706200912176963_TestsTestBasicPoweron/20170706200912176963_PowerOnTest/20170706200912176963_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170706 20:09:16.253" starttime="20170706 20:09:16.253" status="PASS"></status>
</kw>
<status endtime="20170706 20:09:16.253" starttime="20170706 20:09:16.252" status="PASS"></status>
</kw>
<status endtime="20170706 20:09:16.254" starttime="20170706 20:09:16.248" status="PASS"></status>
</kw>
<status endtime="20170706 20:09:16.254" starttime="20170706 20:09:16.247" status="PASS"></status>
</kw>
<kw library="SSHLibrary" name="Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170706 20:09:16.254">Executing command 'df -hT'.</msg>
<msg level="INFO" timestamp="20170706 20:09:16.339">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20170706 20:09:16.339">${stdout} = Filesystem           Type            Size      Used Available Use% Mounted on
dev                  devtmpfs      210.2M         0    210.2M   0% /dev
tmpfs                tmpfs         211.1M     14.0...</msg>
<msg level="INFO" timestamp="20170706 20:09:16.339">${stderr} = </msg>
<status endtime="20170706 20:09:16.339" starttime="20170706 20:09:16.254" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170706 20:09:16.375">Appended to file '&lt;a href="file:///tmp/fspcibld/956/obmc-robot/logs/20170706200912176963_TestsTestBasicPoweron/20170706200912176963_PowerOnTest/20170706200912176963_BMC_general.txt"&gt;/tmp/fspcibld/956/obmc-robot/logs/20170706200912176963_TestsTestBasicPoweron/20170706200912176963_PowerOnTest/20170706200912176963_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170706 20:09:16.375" starttime="20170706 20:09:16.374" status="PASS"></status>
</kw>
<status endtime="20170706 20:09:16.375" starttime="20170706 20:09:16.344" status="PASS"></status>
</kw>
<status endtime="20170706 20:09:16.375" starttime="20170706 20:09:16.339" status="PASS"></status>
</kw>
<status endtime="20170706 20:09:16.375" starttime="20170706 20:09:16.247" status="PASS"></status>
</kw>
<status endtime="20170706 20:09:16.375" starttime="20170706 20:09:16.246" status="PASS"></status>
</kw>
<status endtime="20170706 20:09:16.375" starttime="20170706 20:09:16.035" status="PASS"></status>
</kw>
<status endtime="20170706 20:09:16.375" starttime="20170706 20:09:16.034" status="PASS"></status>
</kw>
<status endtime="20170706 20:09:16.375" starttime="20170706 20:09:16.033" status="PASS"></status>
</kw>
<kw name="${index} = APPLICATION DATA" type="foritem">
<kw library="openbmc_ffdc_methods" name="Iterate BMC Command List Pairs">
<doc>Feed in key pair list from dictionary to execute</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw library="openbmc_ffdc_list" name="Get Ffdc Bmc Cmd">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg level="INFO" timestamp="20170706 20:09:16.377">@{cmd_list} = [ ('BMC state', '/usr/sbin/obmcutil  state') ]</msg>
<status endtime="20170706 20:09:16.377" starttime="20170706 20:09:16.377" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Set Suite Variable">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${ENTRY_INDEX}</arg>
<arg>${key_index}</arg>
</arguments>
<msg level="INFO" timestamp="20170706 20:09:16.378">${ENTRY_INDEX} = APPLICATION DATA</msg>
<status endtime="20170706 20:09:16.378" starttime="20170706 20:09:16.378" status="PASS"></status>
</kw>
<kw name="${cmd} IN [ @{cmd_list} ]" type="for">
<kw name="${cmd} = ('BMC state', '/usr/sbin/obmcutil  state')" type="foritem">
<kw library="openbmc_ffdc_methods" name="Execute Command and Write FFDC">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Cmd Output to FFDC File">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170706 20:09:16.381">Appended to file '&lt;a href="file:///tmp/fspcibld/956/obmc-robot/logs/20170706200912176963_TestsTestBasicPoweron/20170706200912176963_PowerOnTest/20170706200912176963_BMC_general.txt"&gt;/tmp/fspcibld/956/obmc-robot/logs/20170706200912176963_TestsTestBasicPoweron/20170706200912176963_PowerOnTest/20170706200912176963_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170706 20:09:16.381" starttime="20170706 20:09:16.381" status="PASS"></status>
</kw>
<status endtime="20170706 20:09:16.381" starttime="20170706 20:09:16.380" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170706 20:09:16.383">Appended to file '&lt;a href="file:///tmp/fspcibld/956/obmc-robot/logs/20170706200912176963_TestsTestBasicPoweron/20170706200912176963_PowerOnTest/20170706200912176963_BMC_general.txt"&gt;/tmp/fspcibld/956/obmc-robot/logs/20170706200912176963_TestsTestBasicPoweron/20170706200912176963_PowerOnTest/20170706200912176963_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170706 20:09:16.383" starttime="20170706 20:09:16.382" status="PASS"></status>
</kw>
<status endtime="20170706 20:09:16.383" starttime="20170706 20:09:16.382" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170706 20:09:16.384">Appended to file '&lt;a href="file:///tmp/fspcibld/956/obmc-robot/logs/20170706200912176963_TestsTestBasicPoweron/20170706200912176963_PowerOnTest/20170706200912176963_BMC_general.txt"&gt;/tmp/fspcibld/956/obmc-robot/logs/20170706200912176963_TestsTestBasicPoweron/20170706200912176963_PowerOnTest/20170706200912176963_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170706 20:09:16.384" starttime="20170706 20:09:16.384" status="PASS"></status>
</kw>
<status endtime="20170706 20:09:16.384" starttime="20170706 20:09:16.383" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170706 20:09:16.385">Appended to file '&lt;a href="file:///tmp/fspcibld/956/obmc-robot/logs/20170706200912176963_TestsTestBasicPoweron/20170706200912176963_PowerOnTest/20170706200912176963_BMC_general.txt"&gt;/tmp/fspcibld/956/obmc-robot/logs/20170706200912176963_TestsTestBasicPoweron/20170706200912176963_PowerOnTest/20170706200912176963_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170706 20:09:16.385" starttime="20170706 20:09:16.385" status="PASS"></status>
</kw>
<status endtime="20170706 20:09:16.386" starttime="20170706 20:09:16.384" status="PASS"></status>
</kw>
<status endtime="20170706 20:09:16.386" starttime="20170706 20:09:16.380" status="PASS"></status>
</kw>
<status endtime="20170706 20:09:16.386" starttime="20170706 20:09:16.379" status="PASS"></status>
</kw>
<kw library="SSHLibrary" name="Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170706 20:09:16.386">Executing command '/usr/sbin/obmcutil  state'.</msg>
<msg level="INFO" timestamp="20170706 20:09:17.854">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20170706 20:09:17.854">${stdout} = CurrentBMCState:    xyz.openbmc_project.State.BMC.BMCState.Ready
CurrentPowerState:  xyz.openbmc_project.State.Chassis.PowerState.On
CurrentHostState:   xyz.openbmc_project.State.Host.HostState.Runnin...</msg>
<msg level="INFO" timestamp="20170706 20:09:17.854">${stderr} = </msg>
<status endtime="20170706 20:09:17.854" starttime="20170706 20:09:16.386" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170706 20:09:17.860">Appended to file '&lt;a href="file:///tmp/fspcibld/956/obmc-robot/logs/20170706200912176963_TestsTestBasicPoweron/20170706200912176963_PowerOnTest/20170706200912176963_BMC_general.txt"&gt;/tmp/fspcibld/956/obmc-robot/logs/20170706200912176963_TestsTestBasicPoweron/20170706200912176963_PowerOnTest/20170706200912176963_BMC_general.txt&lt;/a&gt;'.</msg>
<status endtime="20170706 20:09:17.860" starttime="20170706 20:09:17.860" status="PASS"></status>
</kw>
<status endtime="20170706 20:09:17.861" starttime="20170706 20:09:17.859" status="PASS"></status>
</kw>
<status endtime="20170706 20:09:17.861" starttime="20170706 20:09:17.854" status="PASS"></status>
</kw>
<status endtime="20170706 20:09:17.861" starttime="20170706 20:09:16.378" status="PASS"></status>
</kw>
<status endtime="20170706 20:09:17.861" starttime="20170706 20:09:16.378" status="PASS"></status>
</kw>
<status endtime="20170706 20:09:17.861" starttime="20170706 20:09:16.378" status="PASS"></status>
</kw>
<status endtime="20170706 20:09:17.861" starttime="20170706 20:09:16.376" status="PASS"></status>
</kw>
<status endtime="20170706 20:09:17.861" starttime="20170706 20:09:16.376" status="PASS"></status>
</kw>
<status endtime="20170706 20:09:17.861" starttime="20170706 20:09:15.853" status="PASS"></status>
</kw>
<status endtime="20170706 20:09:17.861" starttime="20170706 20:09:14.090" status="PASS"></status>
</kw>
<status endtime="20170706 20:09:17.861" starttime="20170706 20:09:14.048" status="PASS"></status>
</kw>
<status endtime="20170706 20:09:17.861" starttime="20170706 20:09:14.046" status="PASS"></status>
</kw>
<status endtime="20170706 20:09:17.861" starttime="20170706 20:09:14.045" status="PASS"></status>
</kw>
<kw name="${method} = ('Core Files', 'SCP Coredump Files')" type="foritem">
<kw library="openbmc_ffdc_methods" name="Execute Keyword Method">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw library="Collections" name="List Should Contain Value">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status endtime="20170706 20:09:17.863" starttime="20170706 20:09:17.863" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170706 20:09:17.863">${status} = PASS</msg>
<msg level="INFO" timestamp="20170706 20:09:17.863">${ret_values} = None</msg>
<status endtime="20170706 20:09:17.863" starttime="20170706 20:09:17.862" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status endtime="20170706 20:09:17.864" starttime="20170706 20:09:17.864" status="PASS"></status>
</kw>
<kw library="gen_robot_keyword" name="Run Key">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw library="openbmc_ffdc_methods" name="SCP Coredump Files">
<doc>Copy core dump file from BMC to local system.</doc>
<kw library="connection_client" name="Open Connection And Log In">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw library="Collections" name="Dictionary Should Contain Key">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg level="FAIL" timestamp="20170706 20:09:17.908">Dictionary does not contain key 'host'.</msg>
<status endtime="20170706 20:09:17.908" starttime="20170706 20:09:17.907" status="FAIL"></status>
</kw>
<msg level="INFO" timestamp="20170706 20:09:17.908">${has_host} = False</msg>
<status endtime="20170706 20:09:17.908" starttime="20170706 20:09:17.906" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status endtime="20170706 20:09:17.913" starttime="20170706 20:09:17.912" status="PASS"></status>
</kw>
<status endtime="20170706 20:09:17.913" starttime="20170706 20:09:17.911" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<kw library="connection_client" name="User input SSH and HTTPs Ports">
<doc>Update the global SSH and HTTPs port variable for QEMU</doc>
<kw library="BuiltIn" name="Convert To Integer">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${SSH_PORT}</arg>
</arguments>
<assign>
<var>${port_num}</var>
</assign>
<msg level="INFO" timestamp="20170706 20:09:17.915">${port_num} = 22</msg>
<status endtime="20170706 20:09:17.915" starttime="20170706 20:09:17.914" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Replace Variables">
<doc>Replaces variables in the given text with their current values.</doc>
<arguments>
<arg>${port_num}</arg>
</arguments>
<assign>
<var>${SSH_PORT}</var>
</assign>
<msg level="INFO" timestamp="20170706 20:09:17.916">${SSH_PORT} = 22</msg>
<status endtime="20170706 20:09:17.916" starttime="20170706 20:09:17.915" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Convert To Integer">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${HTTPS_PORT}</arg>
</arguments>
<assign>
<var>${https_num}</var>
</assign>
<msg level="INFO" timestamp="20170706 20:09:17.917">${https_num} = 443</msg>
<status endtime="20170706 20:09:17.917" starttime="20170706 20:09:17.916" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Set Global Variable">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${AUTH_URI}</arg>
<arg>https://${OPENBMC_HOST}:${https_num}</arg>
</arguments>
<msg level="INFO" timestamp="20170706 20:09:17.918">${AUTH_URI} = https://9.3.21.61:443</msg>
<status endtime="20170706 20:09:17.918" starttime="20170706 20:09:17.917" status="PASS"></status>
</kw>
<status endtime="20170706 20:09:17.918" starttime="20170706 20:09:17.914" status="PASS"></status>
</kw>
<status endtime="20170706 20:09:17.918" starttime="20170706 20:09:17.913" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw library="Collections" name="Dictionary Should Contain Key">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg level="FAIL" timestamp="20170706 20:09:17.920">Dictionary does not contain key 'port'.</msg>
<status endtime="20170706 20:09:17.920" starttime="20170706 20:09:17.919" status="FAIL"></status>
</kw>
<msg level="INFO" timestamp="20170706 20:09:17.920">${has_port} = False</msg>
<status endtime="20170706 20:09:17.920" starttime="20170706 20:09:17.919" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keywords">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
</arguments>
<status endtime="20170706 20:09:17.923" starttime="20170706 20:09:17.922" status="PASS"></status>
</kw>
<kw library="SSHLibrary" name="Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status endtime="20170706 20:09:17.924" starttime="20170706 20:09:17.923" status="PASS"></status>
</kw>
<status endtime="20170706 20:09:17.924" starttime="20170706 20:09:17.921" status="PASS"></status>
</kw>
<status endtime="20170706 20:09:17.924" starttime="20170706 20:09:17.920" status="PASS"></status>
</kw>
<kw library="SSHLibrary" name="Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg level="INFO" timestamp="20170706 20:09:17.925">Logging into '9.3.21.61:22' as 'root'.</msg>
<msg level="INFO" timestamp="20170706 20:09:19.644">Read output: root@witherspoon:~#</msg>
<status endtime="20170706 20:09:19.644" starttime="20170706 20:09:17.924" status="PASS"></status>
</kw>
<status endtime="20170706 20:09:19.644" starttime="20170706 20:09:17.906" status="PASS"></status>
</kw>
<kw library="SSHLibrary" name="Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>ls /tmp/core_*</arg>
</arguments>
<assign>
<var>${core_files}</var>
</assign>
<msg level="INFO" timestamp="20170706 20:09:19.645">Executing command 'ls /tmp/core_*'.</msg>
<msg level="INFO" timestamp="20170706 20:09:19.701">Command exited with return code 1.</msg>
<msg level="INFO" timestamp="20170706 20:09:19.702">${core_files} = </msg>
<status endtime="20170706 20:09:19.702" starttime="20170706 20:09:19.645" status="PASS"></status>
</kw>
<kw library="String" name="Split String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${core_files}</arg>
</arguments>
<assign>
<var>@{core_list}</var>
</assign>
<msg level="INFO" timestamp="20170706 20:09:19.702">@{core_list} = [ ]</msg>
<status endtime="20170706 20:09:19.702" starttime="20170706 20:09:19.702" status="PASS"></status>
</kw>
<kw library="connection_client" name="Open Connection for SCP">
<kw library="BuiltIn" name="Import Library">
<doc>Imports a library with the given name and optional arguments.</doc>
<arguments>
<arg>SCPLibrary</arg>
<arg>WITH NAME</arg>
<arg>scp</arg>
</arguments>
<status endtime="20170706 20:09:19.717" starttime="20170706 20:09:19.703" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' == '${EMPTY}'</arg>
<arg>scp.Open connection</arg>
<arg>${OPENBMC_HOST}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>scp.Open connection</arg>
<arg>${OPENBMC_HOST}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>scp.Open connection</arg>
<arg>${OPENBMC_HOST}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
</arguments>
<kw library="scp" name="Open Connection">
<doc>Opens a new SCP connection to the given host.</doc>
<arguments>
<arg>${OPENBMC_HOST}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
</arguments>
<status endtime="20170706 20:09:20.357" starttime="20170706 20:09:19.719" status="PASS"></status>
</kw>
<status endtime="20170706 20:09:20.357" starttime="20170706 20:09:19.718" status="PASS"></status>
</kw>
<status endtime="20170706 20:09:20.357" starttime="20170706 20:09:19.718" status="PASS"></status>
</kw>
<status endtime="20170706 20:09:20.358" starttime="20170706 20:09:19.702" status="PASS"></status>
</kw>
<kw name="${index} IN [ @{core_list} ]" type="for">
<status endtime="20170706 20:09:20.358" starttime="20170706 20:09:20.358" status="PASS"></status>
</kw>
<status endtime="20170706 20:09:20.358" starttime="20170706 20:09:17.905" status="PASS"></status>
</kw>
<status endtime="20170706 20:09:20.358" starttime="20170706 20:09:17.864" status="PASS"></status>
</kw>
<status endtime="20170706 20:09:20.358" starttime="20170706 20:09:17.862" status="PASS"></status>
</kw>
<status endtime="20170706 20:09:20.358" starttime="20170706 20:09:17.861" status="PASS"></status>
</kw>
<kw name="${method} = ('OS FFDC', 'OS FFDC Files')" type="foritem">
<kw library="openbmc_ffdc_methods" name="Execute Keyword Method">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw library="Collections" name="List Should Contain Value">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status endtime="20170706 20:09:20.361" starttime="20170706 20:09:20.360" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170706 20:09:20.361">${status} = PASS</msg>
<msg level="INFO" timestamp="20170706 20:09:20.361">${ret_values} = None</msg>
<status endtime="20170706 20:09:20.361" starttime="20170706 20:09:20.360" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status endtime="20170706 20:09:20.361" starttime="20170706 20:09:20.361" status="PASS"></status>
</kw>
<kw library="gen_robot_keyword" name="Run Key">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw library="openbmc_ffdc_methods" name="OS FFDC Files">
<doc>Get the command list and iterate</doc>
<kw library="BuiltIn" name="Return From Keyword If">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${OS_HOST}' == '${EMPTY}'</arg>
<arg>No OS Host Provided</arg>
</arguments>
<msg level="INFO" timestamp="20170706 20:09:20.412">Returning from the enclosing user keyword.</msg>
<status endtime="20170706 20:09:20.413" starttime="20170706 20:09:20.412" status="PASS"></status>
</kw>
<status endtime="20170706 20:09:20.413" starttime="20170706 20:09:20.411" status="PASS"></status>
</kw>
<status endtime="20170706 20:09:20.413" starttime="20170706 20:09:20.361" status="PASS"></status>
</kw>
<status endtime="20170706 20:09:20.413" starttime="20170706 20:09:20.359" status="PASS"></status>
</kw>
<status endtime="20170706 20:09:20.413" starttime="20170706 20:09:20.359" status="PASS"></status>
</kw>
<kw name="${method} = ('BMC Specific Files', 'BMC FFDC Files')" type="foritem">
<kw library="openbmc_ffdc_methods" name="Execute Keyword Method">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw library="Collections" name="List Should Contain Value">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status endtime="20170706 20:09:20.415" starttime="20170706 20:09:20.415" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170706 20:09:20.415">${status} = PASS</msg>
<msg level="INFO" timestamp="20170706 20:09:20.415">${ret_values} = None</msg>
<status endtime="20170706 20:09:20.415" starttime="20170706 20:09:20.414" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status endtime="20170706 20:09:20.416" starttime="20170706 20:09:20.415" status="PASS"></status>
</kw>
<kw library="gen_robot_keyword" name="Run Key">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw library="openbmc_ffdc_methods" name="BMC FFDC Files">
<doc>Get the command list and iterate</doc>
<kw library="connection_client" name="Open Connection And Log In">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw library="Collections" name="Dictionary Should Contain Key">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg level="FAIL" timestamp="20170706 20:09:20.462">Dictionary does not contain key 'host'.</msg>
<status endtime="20170706 20:09:20.462" starttime="20170706 20:09:20.461" status="FAIL"></status>
</kw>
<msg level="INFO" timestamp="20170706 20:09:20.462">${has_host} = False</msg>
<status endtime="20170706 20:09:20.462" starttime="20170706 20:09:20.460" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status endtime="20170706 20:09:20.463" starttime="20170706 20:09:20.463" status="PASS"></status>
</kw>
<status endtime="20170706 20:09:20.463" starttime="20170706 20:09:20.462" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<kw library="connection_client" name="User input SSH and HTTPs Ports">
<doc>Update the global SSH and HTTPs port variable for QEMU</doc>
<kw library="BuiltIn" name="Convert To Integer">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${SSH_PORT}</arg>
</arguments>
<assign>
<var>${port_num}</var>
</assign>
<msg level="INFO" timestamp="20170706 20:09:20.465">${port_num} = 22</msg>
<status endtime="20170706 20:09:20.465" starttime="20170706 20:09:20.465" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Replace Variables">
<doc>Replaces variables in the given text with their current values.</doc>
<arguments>
<arg>${port_num}</arg>
</arguments>
<assign>
<var>${SSH_PORT}</var>
</assign>
<msg level="INFO" timestamp="20170706 20:09:20.465">${SSH_PORT} = 22</msg>
<status endtime="20170706 20:09:20.466" starttime="20170706 20:09:20.465" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Convert To Integer">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${HTTPS_PORT}</arg>
</arguments>
<assign>
<var>${https_num}</var>
</assign>
<msg level="INFO" timestamp="20170706 20:09:20.466">${https_num} = 443</msg>
<status endtime="20170706 20:09:20.466" starttime="20170706 20:09:20.466" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Set Global Variable">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${AUTH_URI}</arg>
<arg>https://${OPENBMC_HOST}:${https_num}</arg>
</arguments>
<msg level="INFO" timestamp="20170706 20:09:20.467">${AUTH_URI} = https://9.3.21.61:443</msg>
<status endtime="20170706 20:09:20.467" starttime="20170706 20:09:20.466" status="PASS"></status>
</kw>
<status endtime="20170706 20:09:20.467" starttime="20170706 20:09:20.464" status="PASS"></status>
</kw>
<status endtime="20170706 20:09:20.467" starttime="20170706 20:09:20.463" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw library="Collections" name="Dictionary Should Contain Key">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg level="FAIL" timestamp="20170706 20:09:20.468">Dictionary does not contain key 'port'.</msg>
<status endtime="20170706 20:09:20.468" starttime="20170706 20:09:20.468" status="FAIL"></status>
</kw>
<msg level="INFO" timestamp="20170706 20:09:20.468">${has_port} = False</msg>
<status endtime="20170706 20:09:20.468" starttime="20170706 20:09:20.467" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keywords">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
</arguments>
<status endtime="20170706 20:09:20.470" starttime="20170706 20:09:20.470" status="PASS"></status>
</kw>
<kw library="SSHLibrary" name="Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status endtime="20170706 20:09:20.471" starttime="20170706 20:09:20.470" status="PASS"></status>
</kw>
<status endtime="20170706 20:09:20.471" starttime="20170706 20:09:20.469" status="PASS"></status>
</kw>
<status endtime="20170706 20:09:20.471" starttime="20170706 20:09:20.469" status="PASS"></status>
</kw>
<kw library="SSHLibrary" name="Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg level="INFO" timestamp="20170706 20:09:20.471">Logging into '9.3.21.61:22' as 'root'.</msg>
<msg level="INFO" timestamp="20170706 20:09:22.183">Read output: root@witherspoon:~#</msg>
<status endtime="20170706 20:09:22.183" starttime="20170706 20:09:20.471" status="PASS"></status>
</kw>
<status endtime="20170706 20:09:22.183" starttime="20170706 20:09:20.459" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_list" name="Get Ffdc File Index">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg level="INFO" timestamp="20170706 20:09:22.184">@{entries} = [ BMC FILES ]</msg>
<status endtime="20170706 20:09:22.184" starttime="20170706 20:09:22.184" status="PASS"></status>
</kw>
<kw name="${index} IN [ @{entries} ]" type="for">
<kw name="${index} = BMC FILES" type="foritem">
<kw library="openbmc_ffdc_methods" name="Create File and Write Data">
<doc>Create files to current FFDC log directory,</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw library="openbmc_ffdc_list" name="Get Ffdc Bmc File">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg level="INFO" timestamp="20170706 20:09:22.186">@{cmd_list} = [ ('BMC_journalctl', 'journalctl --no-pager') | ('BMC_procinfo', 'cat /proc/cpuinfo') | ('BMC_proc_list', 'top -n 1 -b') | ('BMC_dmesg', 'dmesg') | ('BMC_meminfo', 'cat /proc/meminfo') ]</msg>
<status endtime="20170706 20:09:22.186" starttime="20170706 20:09:22.185" status="PASS"></status>
</kw>
<kw name="${cmd} IN [ @{cmd_list} ]" type="for">
<kw name="${cmd} = ('BMC_journalctl', 'journalctl --no-pager')" type="foritem">
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20170706 20:09:22.187">${logpath} = /tmp/fspcibld/956/obmc-robot/logs/20170706200912176963_TestsTestBasicPoweron/20170706200912176963_PowerOnTest/20170706200912176963_BMC_journalctl.txt</msg>
<status endtime="20170706 20:09:22.187" starttime="20170706 20:09:22.187" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_methods" name="Execute Command and Write FFDC">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status endtime="20170706 20:09:22.189" starttime="20170706 20:09:22.189" status="PASS"></status>
</kw>
<kw library="SSHLibrary" name="Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170706 20:09:22.190">Executing command 'journalctl --no-pager'.</msg>
<msg level="INFO" timestamp="20170706 20:09:24.482">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20170706 20:09:24.484">${stdout} = -- Logs begin at Thu 2017-07-06 19:57:15 UTC, end at Thu 2017-07-06 20:09:21 UTC. --
Jul 06 19:57:15 witherspoon kernel: Booting Linux on physical CPU 0x0
Jul 06 19:57:15 witherspoon kernel: Linux ver...</msg>
<msg level="INFO" timestamp="20170706 20:09:24.484">${stderr} = </msg>
<status endtime="20170706 20:09:24.484" starttime="20170706 20:09:22.190" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170706 20:09:24.493">Appended to file '&lt;a href="file:///tmp/fspcibld/956/obmc-robot/logs/20170706200912176963_TestsTestBasicPoweron/20170706200912176963_PowerOnTest/20170706200912176963_BMC_journalctl.txt"&gt;/tmp/fspcibld/956/obmc-robot/logs/20170706200912176963_TestsTestBasicPoweron/20170706200912176963_PowerOnTest/20170706200912176963_BMC_journalctl.txt&lt;/a&gt;'.</msg>
<status endtime="20170706 20:09:24.494" starttime="20170706 20:09:24.492" status="PASS"></status>
</kw>
<status endtime="20170706 20:09:24.494" starttime="20170706 20:09:24.490" status="PASS"></status>
</kw>
<status endtime="20170706 20:09:24.494" starttime="20170706 20:09:24.484" status="PASS"></status>
</kw>
<status endtime="20170706 20:09:24.494" starttime="20170706 20:09:22.188" status="PASS"></status>
</kw>
<status endtime="20170706 20:09:24.494" starttime="20170706 20:09:22.186" status="PASS"></status>
</kw>
<kw name="${cmd} = ('BMC_procinfo', 'cat /proc/cpuinfo')" type="foritem">
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20170706 20:09:24.495">${logpath} = /tmp/fspcibld/956/obmc-robot/logs/20170706200912176963_TestsTestBasicPoweron/20170706200912176963_PowerOnTest/20170706200912176963_BMC_procinfo.txt</msg>
<status endtime="20170706 20:09:24.495" starttime="20170706 20:09:24.494" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_methods" name="Execute Command and Write FFDC">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status endtime="20170706 20:09:24.496" starttime="20170706 20:09:24.496" status="PASS"></status>
</kw>
<kw library="SSHLibrary" name="Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170706 20:09:24.497">Executing command 'cat /proc/cpuinfo'.</msg>
<msg level="INFO" timestamp="20170706 20:09:24.581">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20170706 20:09:24.581">${stdout} = processor	: 0
model name	: ARMv6-compatible processor rev 7 (v6l)
BogoMIPS	: 789.70
Features	: half thumb fastmult edsp java tls 
CPU implementer	: 0x41
CPU architecture: 7
CPU variant	: 0x0
CPU part	...</msg>
<msg level="INFO" timestamp="20170706 20:09:24.581">${stderr} = </msg>
<status endtime="20170706 20:09:24.582" starttime="20170706 20:09:24.496" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170706 20:09:24.588">Appended to file '&lt;a href="file:///tmp/fspcibld/956/obmc-robot/logs/20170706200912176963_TestsTestBasicPoweron/20170706200912176963_PowerOnTest/20170706200912176963_BMC_procinfo.txt"&gt;/tmp/fspcibld/956/obmc-robot/logs/20170706200912176963_TestsTestBasicPoweron/20170706200912176963_PowerOnTest/20170706200912176963_BMC_procinfo.txt&lt;/a&gt;'.</msg>
<status endtime="20170706 20:09:24.588" starttime="20170706 20:09:24.587" status="PASS"></status>
</kw>
<status endtime="20170706 20:09:24.588" starttime="20170706 20:09:24.586" status="PASS"></status>
</kw>
<status endtime="20170706 20:09:24.588" starttime="20170706 20:09:24.582" status="PASS"></status>
</kw>
<status endtime="20170706 20:09:24.588" starttime="20170706 20:09:24.495" status="PASS"></status>
</kw>
<status endtime="20170706 20:09:24.588" starttime="20170706 20:09:24.494" status="PASS"></status>
</kw>
<kw name="${cmd} = ('BMC_proc_list', 'top -n 1 -b')" type="foritem">
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20170706 20:09:24.589">${logpath} = /tmp/fspcibld/956/obmc-robot/logs/20170706200912176963_TestsTestBasicPoweron/20170706200912176963_PowerOnTest/20170706200912176963_BMC_proc_list.txt</msg>
<status endtime="20170706 20:09:24.589" starttime="20170706 20:09:24.588" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_methods" name="Execute Command and Write FFDC">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status endtime="20170706 20:09:24.590" starttime="20170706 20:09:24.590" status="PASS"></status>
</kw>
<kw library="SSHLibrary" name="Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170706 20:09:24.591">Executing command 'top -n 1 -b'.</msg>
<msg level="INFO" timestamp="20170706 20:09:24.907">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20170706 20:09:24.907">${stdout} = Mem: 156656K used, 275676K free, 14604K shrd, 10888K buff, 51008K cached
CPU:   8% usr   8% sys   0% nic  83% idle   0% io   0% irq   0% sirq
Load average: 0.35 0.87 0.85 1/149 1523
  PID  PPID USER  ...</msg>
<msg level="INFO" timestamp="20170706 20:09:24.907">${stderr} = </msg>
<status endtime="20170706 20:09:24.907" starttime="20170706 20:09:24.590" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170706 20:09:24.914">Appended to file '&lt;a href="file:///tmp/fspcibld/956/obmc-robot/logs/20170706200912176963_TestsTestBasicPoweron/20170706200912176963_PowerOnTest/20170706200912176963_BMC_proc_list.txt"&gt;/tmp/fspcibld/956/obmc-robot/logs/20170706200912176963_TestsTestBasicPoweron/20170706200912176963_PowerOnTest/20170706200912176963_BMC_proc_list.txt&lt;/a&gt;'.</msg>
<status endtime="20170706 20:09:24.914" starttime="20170706 20:09:24.913" status="PASS"></status>
</kw>
<status endtime="20170706 20:09:24.914" starttime="20170706 20:09:24.912" status="PASS"></status>
</kw>
<status endtime="20170706 20:09:24.914" starttime="20170706 20:09:24.908" status="PASS"></status>
</kw>
<status endtime="20170706 20:09:24.914" starttime="20170706 20:09:24.589" status="PASS"></status>
</kw>
<status endtime="20170706 20:09:24.915" starttime="20170706 20:09:24.588" status="PASS"></status>
</kw>
<kw name="${cmd} = ('BMC_dmesg', 'dmesg')" type="foritem">
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20170706 20:09:24.916">${logpath} = /tmp/fspcibld/956/obmc-robot/logs/20170706200912176963_TestsTestBasicPoweron/20170706200912176963_PowerOnTest/20170706200912176963_BMC_dmesg.txt</msg>
<status endtime="20170706 20:09:24.916" starttime="20170706 20:09:24.915" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_methods" name="Execute Command and Write FFDC">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status endtime="20170706 20:09:24.917" starttime="20170706 20:09:24.917" status="PASS"></status>
</kw>
<kw library="SSHLibrary" name="Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170706 20:09:24.917">Executing command 'dmesg'.</msg>
<msg level="INFO" timestamp="20170706 20:09:25.045">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20170706 20:09:25.045">${stdout} = [    2.050000] ipmi-bt-host 1e789140.ibt: Using IRQ 22
[    2.050000] Serial: 8250/16550 driver, 6 ports, IRQ sharing enabled
[    2.050000] 1e783000.serial: ttyS0 at MMIO 0x1e783000 (irq = 23, base_b...</msg>
<msg level="INFO" timestamp="20170706 20:09:25.045">${stderr} = </msg>
<status endtime="20170706 20:09:25.045" starttime="20170706 20:09:24.917" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170706 20:09:25.052">Appended to file '&lt;a href="file:///tmp/fspcibld/956/obmc-robot/logs/20170706200912176963_TestsTestBasicPoweron/20170706200912176963_PowerOnTest/20170706200912176963_BMC_dmesg.txt"&gt;/tmp/fspcibld/956/obmc-robot/logs/20170706200912176963_TestsTestBasicPoweron/20170706200912176963_PowerOnTest/20170706200912176963_BMC_dmesg.txt&lt;/a&gt;'.</msg>
<status endtime="20170706 20:09:25.052" starttime="20170706 20:09:25.051" status="PASS"></status>
</kw>
<status endtime="20170706 20:09:25.052" starttime="20170706 20:09:25.050" status="PASS"></status>
</kw>
<status endtime="20170706 20:09:25.052" starttime="20170706 20:09:25.045" status="PASS"></status>
</kw>
<status endtime="20170706 20:09:25.052" starttime="20170706 20:09:24.916" status="PASS"></status>
</kw>
<status endtime="20170706 20:09:25.052" starttime="20170706 20:09:24.915" status="PASS"></status>
</kw>
<kw name="${cmd} = ('BMC_meminfo', 'cat /proc/meminfo')" type="foritem">
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20170706 20:09:25.053">${logpath} = /tmp/fspcibld/956/obmc-robot/logs/20170706200912176963_TestsTestBasicPoweron/20170706200912176963_PowerOnTest/20170706200912176963_BMC_meminfo.txt</msg>
<status endtime="20170706 20:09:25.053" starttime="20170706 20:09:25.053" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_methods" name="Execute Command and Write FFDC">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status endtime="20170706 20:09:25.054" starttime="20170706 20:09:25.054" status="PASS"></status>
</kw>
<kw library="SSHLibrary" name="Execute Command">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20170706 20:09:25.055">Executing command 'cat /proc/meminfo'.</msg>
<msg level="INFO" timestamp="20170706 20:09:25.135">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20170706 20:09:25.136">${stdout} = MemTotal:         432332 kB
MemFree:          275676 kB
MemAvailable:     320240 kB
Buffers:           10888 kB
Cached:            51012 kB
SwapCached:            0 kB
Active:           104400 kB
Inac...</msg>
<msg level="INFO" timestamp="20170706 20:09:25.136">${stderr} = </msg>
<status endtime="20170706 20:09:25.136" starttime="20170706 20:09:25.054" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170706 20:09:25.143">Appended to file '&lt;a href="file:///tmp/fspcibld/956/obmc-robot/logs/20170706200912176963_TestsTestBasicPoweron/20170706200912176963_PowerOnTest/20170706200912176963_BMC_meminfo.txt"&gt;/tmp/fspcibld/956/obmc-robot/logs/20170706200912176963_TestsTestBasicPoweron/20170706200912176963_PowerOnTest/20170706200912176963_BMC_meminfo.txt&lt;/a&gt;'.</msg>
<status endtime="20170706 20:09:25.143" starttime="20170706 20:09:25.141" status="PASS"></status>
</kw>
<status endtime="20170706 20:09:25.143" starttime="20170706 20:09:25.141" status="PASS"></status>
</kw>
<status endtime="20170706 20:09:25.143" starttime="20170706 20:09:25.136" status="PASS"></status>
</kw>
<status endtime="20170706 20:09:25.143" starttime="20170706 20:09:25.053" status="PASS"></status>
</kw>
<status endtime="20170706 20:09:25.143" starttime="20170706 20:09:25.052" status="PASS"></status>
</kw>
<status endtime="20170706 20:09:25.143" starttime="20170706 20:09:22.186" status="PASS"></status>
</kw>
<status endtime="20170706 20:09:25.143" starttime="20170706 20:09:22.185" status="PASS"></status>
</kw>
<status endtime="20170706 20:09:25.143" starttime="20170706 20:09:22.184" status="PASS"></status>
</kw>
<status endtime="20170706 20:09:25.143" starttime="20170706 20:09:22.184" status="PASS"></status>
</kw>
<status endtime="20170706 20:09:25.144" starttime="20170706 20:09:20.459" status="PASS"></status>
</kw>
<status endtime="20170706 20:09:25.144" starttime="20170706 20:09:20.416" status="PASS"></status>
</kw>
<status endtime="20170706 20:09:25.144" starttime="20170706 20:09:20.413" status="PASS"></status>
</kw>
<status endtime="20170706 20:09:25.144" starttime="20170706 20:09:20.413" status="PASS"></status>
</kw>
<kw name="${method} = ('SEL Log', 'Collect eSEL Log')" type="foritem">
<kw library="openbmc_ffdc_methods" name="Execute Keyword Method">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw library="Collections" name="List Should Contain Value">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status endtime="20170706 20:09:25.146" starttime="20170706 20:09:25.146" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170706 20:09:25.146">${status} = PASS</msg>
<msg level="INFO" timestamp="20170706 20:09:25.146">${ret_values} = None</msg>
<status endtime="20170706 20:09:25.146" starttime="20170706 20:09:25.145" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status endtime="20170706 20:09:25.147" starttime="20170706 20:09:25.146" status="PASS"></status>
</kw>
<kw library="gen_robot_keyword" name="Run Key">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw library="openbmc_ffdc_methods" name="Collect eSEL Log">
<doc>Collect eSEL log from logging entry and convert eSEL data</doc>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${BMC_LOGGING_ENTRY}/enumerate</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170706 20:09:25.191">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170706 20:09:25.192" starttime="20170706 20:09:25.191" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170706 20:09:25.192">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170706 20:09:25.192" starttime="20170706 20:09:25.192" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170706 20:09:25.193">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170706 20:09:25.193" starttime="20170706 20:09:25.193" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170706 20:09:25.194">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170706 20:09:25.194" starttime="20170706 20:09:25.193" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170706 20:09:25.459">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170706 20:09:25.459" starttime="20170706 20:09:25.195" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170706 20:09:25.459">${status} = PASS</msg>
<msg level="INFO" timestamp="20170706 20:09:25.459">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170706 20:09:25.459" starttime="20170706 20:09:25.194" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170706 20:09:25.460">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170706 20:09:25.460" starttime="20170706 20:09:25.459" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170706 20:09:25.460">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170706 20:09:25.460" starttime="20170706 20:09:25.460" status="PASS"></status>
</kw>
<status endtime="20170706 20:09:25.461" starttime="20170706 20:09:25.190" status="PASS"></status>
</kw>
<status endtime="20170706 20:09:25.461" starttime="20170706 20:09:25.188" status="PASS"></status>
</kw>
<status endtime="20170706 20:09:25.461" starttime="20170706 20:09:25.187" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170706 20:09:25.461">${base_uri} = /xyz/openbmc_project/logging/entry//enumerate</msg>
<status endtime="20170706 20:09:25.461" starttime="20170706 20:09:25.461" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status endtime="20170706 20:09:25.462" starttime="20170706 20:09:25.462" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170706 20:09:25.507">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry//enumerate, headers=None json=None</msg>
<msg level="INFO" timestamp="20170706 20:09:25.507">${ret} = &lt;Response [404]&gt;</msg>
<status endtime="20170706 20:09:25.507" starttime="20170706 20:09:25.462" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status endtime="20170706 20:09:25.508" starttime="20170706 20:09:25.507" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170706 20:09:25.508">${resp} = &lt;Response [404]&gt;</msg>
<status endtime="20170706 20:09:25.508" starttime="20170706 20:09:25.186" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170706 20:09:25.509">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg level="FAIL" timestamp="20170706 20:09:25.509">404 != 200</msg>
<status endtime="20170706 20:09:25.509" starttime="20170706 20:09:25.508" status="FAIL"></status>
</kw>
<msg level="INFO" timestamp="20170706 20:09:25.509">${status} = False</msg>
<status endtime="20170706 20:09:25.509" starttime="20170706 20:09:25.508" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Return From Keyword If">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
</arguments>
<msg level="INFO" timestamp="20170706 20:09:25.510">Returning from the enclosing user keyword.</msg>
<status endtime="20170706 20:09:25.510" starttime="20170706 20:09:25.509" status="PASS"></status>
</kw>
<status endtime="20170706 20:09:25.510" starttime="20170706 20:09:25.186" status="PASS"></status>
</kw>
<status endtime="20170706 20:09:25.510" starttime="20170706 20:09:25.147" status="PASS"></status>
</kw>
<status endtime="20170706 20:09:25.510" starttime="20170706 20:09:25.144" status="PASS"></status>
</kw>
<status endtime="20170706 20:09:25.510" starttime="20170706 20:09:25.144" status="PASS"></status>
</kw>
<kw name="${method} = ('Get Request FFDC', 'BMC FFDC Get Requests')" type="foritem">
<kw library="openbmc_ffdc_methods" name="Execute Keyword Method">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw library="Collections" name="List Should Contain Value">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status endtime="20170706 20:09:25.512" starttime="20170706 20:09:25.512" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170706 20:09:25.512">${status} = PASS</msg>
<msg level="INFO" timestamp="20170706 20:09:25.512">${ret_values} = None</msg>
<status endtime="20170706 20:09:25.512" starttime="20170706 20:09:25.511" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status endtime="20170706 20:09:25.513" starttime="20170706 20:09:25.513" status="PASS"></status>
</kw>
<kw library="gen_robot_keyword" name="Run Key">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw library="openbmc_ffdc_methods" name="BMC FFDC Get Requests">
<doc>Get the command list and iterate</doc>
<kw library="connection_client" name="Open Connection And Log In">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw library="Collections" name="Dictionary Should Contain Key">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg level="FAIL" timestamp="20170706 20:09:25.557">Dictionary does not contain key 'host'.</msg>
<status endtime="20170706 20:09:25.557" starttime="20170706 20:09:25.557" status="FAIL"></status>
</kw>
<msg level="INFO" timestamp="20170706 20:09:25.557">${has_host} = False</msg>
<status endtime="20170706 20:09:25.557" starttime="20170706 20:09:25.556" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status endtime="20170706 20:09:25.558" starttime="20170706 20:09:25.558" status="PASS"></status>
</kw>
<status endtime="20170706 20:09:25.558" starttime="20170706 20:09:25.557" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<kw library="connection_client" name="User input SSH and HTTPs Ports">
<doc>Update the global SSH and HTTPs port variable for QEMU</doc>
<kw library="BuiltIn" name="Convert To Integer">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${SSH_PORT}</arg>
</arguments>
<assign>
<var>${port_num}</var>
</assign>
<msg level="INFO" timestamp="20170706 20:09:25.560">${port_num} = 22</msg>
<status endtime="20170706 20:09:25.560" starttime="20170706 20:09:25.560" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Replace Variables">
<doc>Replaces variables in the given text with their current values.</doc>
<arguments>
<arg>${port_num}</arg>
</arguments>
<assign>
<var>${SSH_PORT}</var>
</assign>
<msg level="INFO" timestamp="20170706 20:09:25.560">${SSH_PORT} = 22</msg>
<status endtime="20170706 20:09:25.561" starttime="20170706 20:09:25.560" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Convert To Integer">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${HTTPS_PORT}</arg>
</arguments>
<assign>
<var>${https_num}</var>
</assign>
<msg level="INFO" timestamp="20170706 20:09:25.561">${https_num} = 443</msg>
<status endtime="20170706 20:09:25.561" starttime="20170706 20:09:25.561" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Set Global Variable">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${AUTH_URI}</arg>
<arg>https://${OPENBMC_HOST}:${https_num}</arg>
</arguments>
<msg level="INFO" timestamp="20170706 20:09:25.562">${AUTH_URI} = https://9.3.21.61:443</msg>
<status endtime="20170706 20:09:25.562" starttime="20170706 20:09:25.561" status="PASS"></status>
</kw>
<status endtime="20170706 20:09:25.562" starttime="20170706 20:09:25.559" status="PASS"></status>
</kw>
<status endtime="20170706 20:09:25.562" starttime="20170706 20:09:25.559" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw library="Collections" name="Dictionary Should Contain Key">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg level="FAIL" timestamp="20170706 20:09:25.564">Dictionary does not contain key 'port'.</msg>
<status endtime="20170706 20:09:25.564" starttime="20170706 20:09:25.563" status="FAIL"></status>
</kw>
<msg level="INFO" timestamp="20170706 20:09:25.564">${has_port} = False</msg>
<status endtime="20170706 20:09:25.564" starttime="20170706 20:09:25.563" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keywords">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw library="Collections" name="Set To Dictionary">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
</arguments>
<status endtime="20170706 20:09:25.567" starttime="20170706 20:09:25.566" status="PASS"></status>
</kw>
<kw library="SSHLibrary" name="Open Connection">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status endtime="20170706 20:09:25.568" starttime="20170706 20:09:25.567" status="PASS"></status>
</kw>
<status endtime="20170706 20:09:25.568" starttime="20170706 20:09:25.566" status="PASS"></status>
</kw>
<status endtime="20170706 20:09:25.568" starttime="20170706 20:09:25.565" status="PASS"></status>
</kw>
<kw library="SSHLibrary" name="Login">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg level="INFO" timestamp="20170706 20:09:25.569">Logging into '9.3.21.61:22' as 'root'.</msg>
<msg level="INFO" timestamp="20170706 20:09:27.216">Read output: root@witherspoon:~#</msg>
<status endtime="20170706 20:09:27.216" starttime="20170706 20:09:25.568" status="PASS"></status>
</kw>
<status endtime="20170706 20:09:27.217" starttime="20170706 20:09:25.556" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_list" name="Get Ffdc Get Request Index">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg level="INFO" timestamp="20170706 20:09:27.217">@{entries} = [ GET REQUESTS ]</msg>
<status endtime="20170706 20:09:27.217" starttime="20170706 20:09:27.217" status="PASS"></status>
</kw>
<kw name="${index} IN [ @{entries} ]" type="for">
<kw name="${index} = GET REQUESTS" type="foritem">
<kw library="openbmc_ffdc_methods" name="Log FFDC Get Requests">
<doc>Create file in current FFDC log directory.</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw library="openbmc_ffdc_list" name="Get Ffdc Get Request">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg level="INFO" timestamp="20170706 20:09:27.218">@{cmd_list} = [ ('BMC_record_log', '/org/openbmc/control/led/enumerate') | ('BMC_inventory', '/xyz/openbmc_project/inventory/enumerate') | ('BMC_led', '/org/openbmc/records/events/enumerate') | ('BMC_sensor_list', ...</msg>
<status endtime="20170706 20:09:27.219" starttime="20170706 20:09:27.218" status="PASS"></status>
</kw>
<kw name="${cmd} IN [ @{cmd_list} ]" type="for">
<kw name="${cmd} = ('BMC_record_log', '/org/openbmc/control/led/enumerate')" type="foritem">
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20170706 20:09:27.220">${logpath} = /tmp/fspcibld/956/obmc-robot/logs/20170706200912176963_TestsTestBasicPoweron/20170706200912176963_PowerOnTest/20170706200912176963_BMC_record_log.txt</msg>
<status endtime="20170706 20:09:27.220" starttime="20170706 20:09:27.219" status="PASS"></status>
</kw>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170706 20:09:27.223">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170706 20:09:27.224" starttime="20170706 20:09:27.223" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170706 20:09:27.225">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170706 20:09:27.225" starttime="20170706 20:09:27.224" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170706 20:09:27.226">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170706 20:09:27.226" starttime="20170706 20:09:27.225" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170706 20:09:27.227">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170706 20:09:27.227" starttime="20170706 20:09:27.226" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170706 20:09:27.442">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170706 20:09:27.442" starttime="20170706 20:09:27.228" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170706 20:09:27.443">${status} = PASS</msg>
<msg level="INFO" timestamp="20170706 20:09:27.443">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170706 20:09:27.443" starttime="20170706 20:09:27.227" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170706 20:09:27.443">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170706 20:09:27.443" starttime="20170706 20:09:27.443" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170706 20:09:27.444">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170706 20:09:27.444" starttime="20170706 20:09:27.444" status="PASS"></status>
</kw>
<status endtime="20170706 20:09:27.444" starttime="20170706 20:09:27.222" status="PASS"></status>
</kw>
<status endtime="20170706 20:09:27.444" starttime="20170706 20:09:27.221" status="PASS"></status>
</kw>
<status endtime="20170706 20:09:27.444" starttime="20170706 20:09:27.220" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170706 20:09:27.445">${base_uri} = /org/openbmc/control/led/enumerate</msg>
<status endtime="20170706 20:09:27.445" starttime="20170706 20:09:27.445" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status endtime="20170706 20:09:27.446" starttime="20170706 20:09:27.445" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170706 20:09:27.490">Get Request using : alias=openbmc, uri=/org/openbmc/control/led/enumerate, headers=None json=None</msg>
<msg level="INFO" timestamp="20170706 20:09:27.490">${ret} = &lt;Response [404]&gt;</msg>
<status endtime="20170706 20:09:27.490" starttime="20170706 20:09:27.446" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status endtime="20170706 20:09:27.490" starttime="20170706 20:09:27.490" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170706 20:09:27.491">${resp} = &lt;Response [404]&gt;</msg>
<status endtime="20170706 20:09:27.491" starttime="20170706 20:09:27.220" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170706 20:09:27.492">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg level="FAIL" timestamp="20170706 20:09:27.492">404 != 200</msg>
<status endtime="20170706 20:09:27.492" starttime="20170706 20:09:27.491" status="FAIL"></status>
</kw>
<msg level="INFO" timestamp="20170706 20:09:27.492">${status} = False</msg>
<status endtime="20170706 20:09:27.492" starttime="20170706 20:09:27.491" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<kw library="BuiltIn" name="Continue For Loop">
<doc>Skips the current for loop iteration and continues from the next.</doc>
<msg level="INFO" timestamp="20170706 20:09:27.493">Continuing for loop from the next iteration.</msg>
<status endtime="20170706 20:09:27.493" starttime="20170706 20:09:27.493" status="PASS"></status>
</kw>
<status endtime="20170706 20:09:27.493" starttime="20170706 20:09:27.492" status="PASS"></status>
</kw>
<status endtime="20170706 20:09:27.493" starttime="20170706 20:09:27.219" status="PASS"></status>
</kw>
<kw name="${cmd} = ('BMC_inventory', '/xyz/openbmc_project/inventory/enumerate')" type="foritem">
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20170706 20:09:27.494">${logpath} = /tmp/fspcibld/956/obmc-robot/logs/20170706200912176963_TestsTestBasicPoweron/20170706200912176963_PowerOnTest/20170706200912176963_BMC_inventory.txt</msg>
<status endtime="20170706 20:09:27.494" starttime="20170706 20:09:27.494" status="PASS"></status>
</kw>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170706 20:09:27.497">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170706 20:09:27.497" starttime="20170706 20:09:27.496" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170706 20:09:27.498">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170706 20:09:27.498" starttime="20170706 20:09:27.498" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170706 20:09:27.499">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170706 20:09:27.499" starttime="20170706 20:09:27.498" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170706 20:09:27.500">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170706 20:09:27.500" starttime="20170706 20:09:27.499" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170706 20:09:27.794">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170706 20:09:27.794" starttime="20170706 20:09:27.501" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170706 20:09:27.795">${status} = PASS</msg>
<msg level="INFO" timestamp="20170706 20:09:27.795">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170706 20:09:27.795" starttime="20170706 20:09:27.500" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170706 20:09:27.795">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170706 20:09:27.795" starttime="20170706 20:09:27.795" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170706 20:09:27.796">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170706 20:09:27.796" starttime="20170706 20:09:27.796" status="PASS"></status>
</kw>
<status endtime="20170706 20:09:27.796" starttime="20170706 20:09:27.496" status="PASS"></status>
</kw>
<status endtime="20170706 20:09:27.796" starttime="20170706 20:09:27.495" status="PASS"></status>
</kw>
<status endtime="20170706 20:09:27.796" starttime="20170706 20:09:27.495" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170706 20:09:27.797">${base_uri} = /xyz/openbmc_project/inventory/enumerate</msg>
<status endtime="20170706 20:09:27.797" starttime="20170706 20:09:27.797" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status endtime="20170706 20:09:27.798" starttime="20170706 20:09:27.797" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170706 20:09:29.644">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/inventory/enumerate, headers=None json=None</msg>
<msg level="INFO" timestamp="20170706 20:09:29.644">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170706 20:09:29.644" starttime="20170706 20:09:27.798" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status endtime="20170706 20:09:29.645" starttime="20170706 20:09:29.644" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170706 20:09:29.645">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170706 20:09:29.645" starttime="20170706 20:09:27.494" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170706 20:09:29.646">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170706 20:09:29.646" starttime="20170706 20:09:29.646" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170706 20:09:29.646">${status} = True</msg>
<status endtime="20170706 20:09:29.646" starttime="20170706 20:09:29.645" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status endtime="20170706 20:09:29.647" starttime="20170706 20:09:29.646" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg level="INFO" timestamp="20170706 20:09:29.649">To JSON using : content={
  "data": {
    "/xyz/openbmc_project/inventory/system": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 0, 
      "Manufacturer": "", 
      "Model": "8335-GTC", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "", 
      "SerialNumber": "13186FA"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis": {
      "AirCooled": 1, 
      "WaterCooled": 1
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard": {
      "BuildDate": "", 
      "Manufacturer": "0000000000000000", 
      "Model": "", 
      "PartNumber": "00VK614         ", 
      "Present": 0, 
      "PrettyName": "SYSTEM PLANAR   ", 
      "SerialNumber": "YL30UF759004    "
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc": {
      "BuildDate": "", 
      "FieldReplaceable": 0, 
      "Manufacturer": "IBM", 
      "Model": "", 
      "PartNumber": "01DH118", 
      "Present": 1, 
      "PrettyName": "BMC PLANAR  ", 
      "SerialNumber": "000000000000"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc/ethernet": {
      "FieldReplaceable": 0, 
      "MACAddress": "00:00:00:00:00:00", 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "IBM", 
      "Model": "", 
      "PartNumber": "01HL983", 
      "Present": 1, 
      "PrettyName": "PROCESSOR MODULE", 
      "SerialNumber": "YA3933820456", 
      "Version": "10"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core0": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core1": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core10": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core11": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core12": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core13": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core14": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core15": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core16": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core17": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core18": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core19": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core2": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core20": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core21": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core22": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core23": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core3": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core4": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core5": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core6": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core7": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core8": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu0/core9": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "IBM", 
      "Model": "", 
      "PartNumber": "01HL983", 
      "Present": 1, 
      "PrettyName": "PROCESSOR MODULE", 
      "SerialNumber": "YA3933817667", 
      "Version": "10"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core0": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core1": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core10": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core11": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core12": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core13": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core14": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core15": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core16": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core17": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core18": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core19": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core2": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core20": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core21": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core22": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core23": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core3": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core4": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core5": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core6": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core7": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core8": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/cpu1/core9": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm0": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "18ASF1G72PZ-2G6B1   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x16c7bbd9", 
      "Version": "0x31"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm1": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "18ASF1G72PZ-2G6B1   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x16c7b8a5", 
      "Version": "0x31"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm10": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm11": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm12": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm13": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm14": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "18ASF1G72PZ-2G6B1   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x16c7b974", 
      "Version": "0x31"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm15": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm2": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm3": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm4": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm5": {
      "Functional": 1, 
      "Present": 0, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm6": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "18ASF1G72PZ-2G6B1   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x16c7bbab", 
      "Version": "0x31"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm7": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "18ASF1G72PZ-2G6B1   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x16c7e64d", 
      "Version": "0x31"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm8": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "18ASF1G72PZ-2G6B1   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x16c7bbea", 
      "Version": "0x31"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/dimm9": {
      "BuildDate": "", 
      "Cached": 0, 
      "FieldReplaceable": 1, 
      "Functional": 1, 
      "Manufacturer": "0x2c80", 
      "Model": "18ASF1G72PZ-2G6B1   ", 
      "PartNumber": "", 
      "Present": 1, 
      "PrettyName": "0x0c", 
      "SerialNumber": "0x16c7bbcf", 
      "Version": "0x31"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/fan0": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": "fan0"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/fan1": {
      "Functional": 0, 
      "Present": 1, 
      "PrettyName": "fan1"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/fan2": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": "fan2"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/fan3": {
      "Functional": 1, 
      "Present": 1, 
      "PrettyName": "fan3"
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170706 20:09:29.650">To JSON using : pretty_print=True </msg>
<msg level="INFO" timestamp="20170706 20:09:29.650">${jsondata} = {
    "data": {
        "/xyz/openbmc_project/inventory/system": {
            "BuildDate": "",
            "Cached": 0,
            "FieldReplaceable": 0,
            "Manufacturer": "",
            ...</msg>
<status endtime="20170706 20:09:29.650" starttime="20170706 20:09:29.647" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170706 20:09:29.652">Appended to file '&lt;a href="file:///tmp/fspcibld/956/obmc-robot/logs/20170706200912176963_TestsTestBasicPoweron/20170706200912176963_PowerOnTest/20170706200912176963_BMC_inventory.txt"&gt;/tmp/fspcibld/956/obmc-robot/logs/20170706200912176963_TestsTestBasicPoweron/20170706200912176963_PowerOnTest/20170706200912176963_BMC_inventory.txt&lt;/a&gt;'.</msg>
<status endtime="20170706 20:09:29.652" starttime="20170706 20:09:29.651" status="PASS"></status>
</kw>
<status endtime="20170706 20:09:29.652" starttime="20170706 20:09:29.650" status="PASS"></status>
</kw>
<status endtime="20170706 20:09:29.652" starttime="20170706 20:09:27.493" status="PASS"></status>
</kw>
<kw name="${cmd} = ('BMC_led', '/org/openbmc/records/events/enumerate')" type="foritem">
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20170706 20:09:29.653">${logpath} = /tmp/fspcibld/956/obmc-robot/logs/20170706200912176963_TestsTestBasicPoweron/20170706200912176963_PowerOnTest/20170706200912176963_BMC_led.txt</msg>
<status endtime="20170706 20:09:29.653" starttime="20170706 20:09:29.653" status="PASS"></status>
</kw>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170706 20:09:29.657">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170706 20:09:29.658" starttime="20170706 20:09:29.657" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170706 20:09:29.659">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170706 20:09:29.659" starttime="20170706 20:09:29.658" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170706 20:09:29.660">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170706 20:09:29.660" starttime="20170706 20:09:29.659" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170706 20:09:29.661">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170706 20:09:29.661" starttime="20170706 20:09:29.660" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170706 20:09:29.841">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170706 20:09:29.841" starttime="20170706 20:09:29.662" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170706 20:09:29.841">${status} = PASS</msg>
<msg level="INFO" timestamp="20170706 20:09:29.841">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170706 20:09:29.841" starttime="20170706 20:09:29.661" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170706 20:09:29.842">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170706 20:09:29.842" starttime="20170706 20:09:29.842" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170706 20:09:29.843">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170706 20:09:29.843" starttime="20170706 20:09:29.842" status="PASS"></status>
</kw>
<status endtime="20170706 20:09:29.843" starttime="20170706 20:09:29.656" status="PASS"></status>
</kw>
<status endtime="20170706 20:09:29.843" starttime="20170706 20:09:29.655" status="PASS"></status>
</kw>
<status endtime="20170706 20:09:29.843" starttime="20170706 20:09:29.654" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170706 20:09:29.844">${base_uri} = /org/openbmc/records/events/enumerate</msg>
<status endtime="20170706 20:09:29.844" starttime="20170706 20:09:29.843" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status endtime="20170706 20:09:29.844" starttime="20170706 20:09:29.844" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170706 20:09:29.888">Get Request using : alias=openbmc, uri=/org/openbmc/records/events/enumerate, headers=None json=None</msg>
<msg level="INFO" timestamp="20170706 20:09:29.888">${ret} = &lt;Response [404]&gt;</msg>
<status endtime="20170706 20:09:29.888" starttime="20170706 20:09:29.844" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status endtime="20170706 20:09:29.889" starttime="20170706 20:09:29.888" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170706 20:09:29.889">${resp} = &lt;Response [404]&gt;</msg>
<status endtime="20170706 20:09:29.889" starttime="20170706 20:09:29.654" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170706 20:09:29.890">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg level="FAIL" timestamp="20170706 20:09:29.890">404 != 200</msg>
<status endtime="20170706 20:09:29.890" starttime="20170706 20:09:29.890" status="FAIL"></status>
</kw>
<msg level="INFO" timestamp="20170706 20:09:29.890">${status} = False</msg>
<status endtime="20170706 20:09:29.890" starttime="20170706 20:09:29.889" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<kw library="BuiltIn" name="Continue For Loop">
<doc>Skips the current for loop iteration and continues from the next.</doc>
<msg level="INFO" timestamp="20170706 20:09:29.891">Continuing for loop from the next iteration.</msg>
<status endtime="20170706 20:09:29.891" starttime="20170706 20:09:29.891" status="PASS"></status>
</kw>
<status endtime="20170706 20:09:29.892" starttime="20170706 20:09:29.891" status="PASS"></status>
</kw>
<status endtime="20170706 20:09:29.892" starttime="20170706 20:09:29.652" status="PASS"></status>
</kw>
<kw name="${cmd} = ('BMC_sensor_list', '/org/openbmc/sensors/enumerate')" type="foritem">
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20170706 20:09:29.892">${logpath} = /tmp/fspcibld/956/obmc-robot/logs/20170706200912176963_TestsTestBasicPoweron/20170706200912176963_PowerOnTest/20170706200912176963_BMC_sensor_list.txt</msg>
<status endtime="20170706 20:09:29.892" starttime="20170706 20:09:29.892" status="PASS"></status>
</kw>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170706 20:09:29.897">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170706 20:09:29.897" starttime="20170706 20:09:29.896" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170706 20:09:29.898">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170706 20:09:29.898" starttime="20170706 20:09:29.897" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170706 20:09:29.898">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170706 20:09:29.898" starttime="20170706 20:09:29.898" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170706 20:09:29.899">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170706 20:09:29.899" starttime="20170706 20:09:29.899" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170706 20:09:30.162">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170706 20:09:30.162" starttime="20170706 20:09:29.900" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170706 20:09:30.162">${status} = PASS</msg>
<msg level="INFO" timestamp="20170706 20:09:30.162">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170706 20:09:30.162" starttime="20170706 20:09:29.899" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170706 20:09:30.163">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170706 20:09:30.163" starttime="20170706 20:09:30.162" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170706 20:09:30.164">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170706 20:09:30.164" starttime="20170706 20:09:30.163" status="PASS"></status>
</kw>
<status endtime="20170706 20:09:30.164" starttime="20170706 20:09:29.894" status="PASS"></status>
</kw>
<status endtime="20170706 20:09:30.164" starttime="20170706 20:09:29.894" status="PASS"></status>
</kw>
<status endtime="20170706 20:09:30.164" starttime="20170706 20:09:29.893" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170706 20:09:30.165">${base_uri} = /org/openbmc/sensors/enumerate</msg>
<status endtime="20170706 20:09:30.165" starttime="20170706 20:09:30.165" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status endtime="20170706 20:09:30.166" starttime="20170706 20:09:30.165" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170706 20:09:30.387">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/enumerate, headers=None json=None</msg>
<msg level="INFO" timestamp="20170706 20:09:30.387">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20170706 20:09:30.387" starttime="20170706 20:09:30.166" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status endtime="20170706 20:09:30.388" starttime="20170706 20:09:30.387" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170706 20:09:30.388">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170706 20:09:30.388" starttime="20170706 20:09:29.893" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170706 20:09:30.389">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170706 20:09:30.389" starttime="20170706 20:09:30.388" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170706 20:09:30.389">${status} = True</msg>
<status endtime="20170706 20:09:30.389" starttime="20170706 20:09:30.388" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status endtime="20170706 20:09:30.390" starttime="20170706 20:09:30.389" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="To Json">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg level="INFO" timestamp="20170706 20:09:30.390">To JSON using : content={
  "data": {
    "/org/openbmc/sensors/host/BootCount": {
      "error": 0, 
      "units": "", 
      "value": 3
    }, 
    "/org/openbmc/sensors/host/BootProgress": {
      "error": 0, 
      "units": "", 
      "value": "FW Progress, Starting OS"
    }, 
    "/org/openbmc/sensors/host/OperatingSystemStatus": {
      "error": 0, 
      "units": "", 
      "value": "Off"
    }, 
    "/org/openbmc/sensors/host/PowerSupplyDerating": {
      "error": 0, 
      "units": "", 
      "value": 10
    }, 
    "/org/openbmc/sensors/host/PowerSupplyRedundancy": {
      "error": 0, 
      "units": "", 
      "value": "Disabled"
    }, 
    "/org/openbmc/sensors/host/TurboAllowed": {
      "error": 0, 
      "units": "", 
      "value": 0
    }, 
    "/org/openbmc/sensors/host/cpu0/OccStatus": {
      "error": 0, 
      "units": "", 
      "value": "Disabled"
    }, 
    "/org/openbmc/sensors/host/cpu1/OccStatus": {
      "error": 0, 
      "units": "", 
      "value": "Disabled"
    }, 
    "/org/openbmc/sensors/host/powercap": {
      "error": 0, 
      "units": "", 
      "value": 0
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20170706 20:09:30.390">To JSON using : pretty_print=True </msg>
<msg level="INFO" timestamp="20170706 20:09:30.391">${jsondata} = {
    "data": {
        "/org/openbmc/sensors/host/BootCount": {
            "error": 0,
            "units": "",
            "value": 3
        },
        "/org/openbmc/sensors/host/BootProgress": {
...</msg>
<status endtime="20170706 20:09:30.391" starttime="20170706 20:09:30.390" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Write Data To File">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170706 20:09:30.392">Appended to file '&lt;a href="file:///tmp/fspcibld/956/obmc-robot/logs/20170706200912176963_TestsTestBasicPoweron/20170706200912176963_PowerOnTest/20170706200912176963_BMC_sensor_list.txt"&gt;/tmp/fspcibld/956/obmc-robot/logs/20170706200912176963_TestsTestBasicPoweron/20170706200912176963_PowerOnTest/20170706200912176963_BMC_sensor_list.txt&lt;/a&gt;'.</msg>
<status endtime="20170706 20:09:30.392" starttime="20170706 20:09:30.391" status="PASS"></status>
</kw>
<status endtime="20170706 20:09:30.392" starttime="20170706 20:09:30.391" status="PASS"></status>
</kw>
<status endtime="20170706 20:09:30.393" starttime="20170706 20:09:29.892" status="PASS"></status>
</kw>
<kw name="${cmd} = ('BMC_elog', '/xyz/openbmc_project/logging/entry/enumerate')" type="foritem">
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg level="INFO" timestamp="20170706 20:09:30.393">${logpath} = /tmp/fspcibld/956/obmc-robot/logs/20170706200912176963_TestsTestBasicPoweron/20170706200912176963_PowerOnTest/20170706200912176963_BMC_elog.txt</msg>
<status endtime="20170706 20:09:30.393" starttime="20170706 20:09:30.393" status="PASS"></status>
</kw>
<kw library="rest_client" name="OpenBMC Get Request">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw library="rest_client" name="Initialize OpenBMC">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw library="BuiltIn" name="Wait Until Keyword Succeeds">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="rest_client" name="Post Login Request">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw library="RequestsLibrary.RequestsKeywords" name="Create Session">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20170706 20:09:30.396">Creating Session using : alias=openbmc, url=https://9.3.21.61:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20170706 20:09:30.397" starttime="20170706 20:09:30.396" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20170706 20:09:30.397">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20170706 20:09:30.397" starttime="20170706 20:09:30.397" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create List">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20170706 20:09:30.398">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20170706 20:09:30.398" starttime="20170706 20:09:30.398" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Create Dictionary">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20170706 20:09:30.399">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20170706 20:09:30.399" starttime="20170706 20:09:30.398" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw library="RequestsLibrary.RequestsKeywords" name="Post Request">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg level="INFO" timestamp="20170706 20:09:30.582">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status endtime="20170706 20:09:30.582" starttime="20170706 20:09:30.399" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170706 20:09:30.582">${status} = PASS</msg>
<msg level="INFO" timestamp="20170706 20:09:30.582">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20170706 20:09:30.582" starttime="20170706 20:09:30.399" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg level="INFO" timestamp="20170706 20:09:30.583">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170706 20:09:30.583" starttime="20170706 20:09:30.582" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170706 20:09:30.583">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20170706 20:09:30.583" starttime="20170706 20:09:30.583" status="PASS"></status>
</kw>
<status endtime="20170706 20:09:30.583" starttime="20170706 20:09:30.395" status="PASS"></status>
</kw>
<status endtime="20170706 20:09:30.584" starttime="20170706 20:09:30.395" status="PASS"></status>
</kw>
<status endtime="20170706 20:09:30.584" starttime="20170706 20:09:30.394" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20170706 20:09:30.584">${base_uri} = /xyz/openbmc_project/logging/entry/enumerate</msg>
<status endtime="20170706 20:09:30.584" starttime="20170706 20:09:30.584" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status endtime="20170706 20:09:30.585" starttime="20170706 20:09:30.585" status="PASS"></status>
</kw>
<kw library="RequestsLibrary.RequestsKeywords" name="Get Request">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20170706 20:09:30.669">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry/enumerate, headers=None json=None</msg>
<msg level="INFO" timestamp="20170706 20:09:30.670">${ret} = &lt;Response [404]&gt;</msg>
<status endtime="20170706 20:09:30.670" starttime="20170706 20:09:30.585" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status endtime="20170706 20:09:30.670" starttime="20170706 20:09:30.670" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170706 20:09:30.670">${resp} = &lt;Response [404]&gt;</msg>
<status endtime="20170706 20:09:30.671" starttime="20170706 20:09:30.393" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw library="BuiltIn" name="Should Be Equal As Strings">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20170706 20:09:30.672">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg level="FAIL" timestamp="20170706 20:09:30.672">404 != 200</msg>
<status endtime="20170706 20:09:30.672" starttime="20170706 20:09:30.671" status="FAIL"></status>
</kw>
<msg level="INFO" timestamp="20170706 20:09:30.672">${status} = False</msg>
<status endtime="20170706 20:09:30.672" starttime="20170706 20:09:30.671" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<kw library="BuiltIn" name="Continue For Loop">
<doc>Skips the current for loop iteration and continues from the next.</doc>
<msg level="INFO" timestamp="20170706 20:09:30.673">Continuing for loop from the next iteration.</msg>
<status endtime="20170706 20:09:30.673" starttime="20170706 20:09:30.673" status="PASS"></status>
</kw>
<status endtime="20170706 20:09:30.673" starttime="20170706 20:09:30.672" status="PASS"></status>
</kw>
<status endtime="20170706 20:09:30.673" starttime="20170706 20:09:30.393" status="PASS"></status>
</kw>
<status endtime="20170706 20:09:30.673" starttime="20170706 20:09:27.219" status="PASS"></status>
</kw>
<status endtime="20170706 20:09:30.673" starttime="20170706 20:09:27.218" status="PASS"></status>
</kw>
<status endtime="20170706 20:09:30.673" starttime="20170706 20:09:27.217" status="PASS"></status>
</kw>
<status endtime="20170706 20:09:30.673" starttime="20170706 20:09:27.217" status="PASS"></status>
</kw>
<status endtime="20170706 20:09:30.673" starttime="20170706 20:09:25.555" status="PASS"></status>
</kw>
<status endtime="20170706 20:09:30.674" starttime="20170706 20:09:25.513" status="PASS"></status>
</kw>
<status endtime="20170706 20:09:30.674" starttime="20170706 20:09:25.511" status="PASS"></status>
</kw>
<status endtime="20170706 20:09:30.674" starttime="20170706 20:09:25.510" status="PASS"></status>
</kw>
<status endtime="20170706 20:09:30.674" starttime="20170706 20:09:14.045" status="PASS"></status>
</kw>
<status endtime="20170706 20:09:30.674" starttime="20170706 20:09:14.041" status="PASS"></status>
</kw>
<status endtime="20170706 20:09:30.674" starttime="20170706 20:09:14.041" status="PASS"></status>
</kw>
<status endtime="20170706 20:09:30.674" starttime="20170706 20:09:14.041" status="PASS"></status>
</kw>
<kw library="SSHLibrary" name="Close All Connections">
<doc>Closes all open connections.</doc>
<status endtime="20170706 20:09:30.796" starttime="20170706 20:09:30.674" status="PASS"></status>
</kw>
<status endtime="20170706 20:09:30.796" starttime="20170706 20:09:14.040" status="PASS"></status>
</kw>
<status endtime="20170706 20:09:30.797" starttime="20170706 20:09:09.038" status="PASS"></status>
</kw>
<status endtime="20170706 20:09:30.797" starttime="20170706 20:09:09.038" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}'=='True'</arg>
<arg>Recover Quiesced Host</arg>
</arguments>
<status endtime="20170706 20:09:30.798" starttime="20170706 20:09:30.797" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_methods" name="Log Test Case Status">
<doc>Test case execution result history.</doc>
<kw library="BuiltIn" name="Get Variable Value">
<doc>Returns variable value or ``default`` if the variable does not exist.</doc>
<arguments>
<arg>${FFDC_DIR_PATH_STYLE}</arg>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${FFDC_DIR_PATH_STYLE}</var>
</assign>
<msg level="INFO" timestamp="20170706 20:09:30.808">${FFDC_DIR_PATH_STYLE} = </msg>
<status endtime="20170706 20:09:30.808" starttime="20170706 20:09:30.798" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Get Variable Value">
<doc>Returns variable value or ``default`` if the variable does not exist.</doc>
<arguments>
<arg>${FFDC_DIR_PATH}</arg>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${FFDC_DIR_PATH}</var>
</assign>
<msg level="INFO" timestamp="20170706 20:09:30.809">${FFDC_DIR_PATH} = /tmp/fspcibld/956/obmc-robot/logs/20170706200912176963_TestsTestBasicPoweron/20170706200912176963_PowerOnTest/</msg>
<status endtime="20170706 20:09:30.809" starttime="20170706 20:09:30.808" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${FFDC_DIR_PATH}' == '${EMPTY}'</arg>
<arg>Set FFDC Defaults</arg>
</arguments>
<status endtime="20170706 20:09:30.810" starttime="20170706 20:09:30.809" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${FFDC_DIR_PATH_STYLE}' == '${1}'</arg>
<arg>Run Keywords</arg>
<arg>Set Global Variable</arg>
<arg>${FFDC_LOG_PATH}</arg>
<arg>${FFDC_DIR_PATH}</arg>
<arg>AND</arg>
<arg>Set Global Variable</arg>
<arg>${TEST_HISTORY}</arg>
<arg>${FFDC_DIR_PATH}test_history.txt</arg>
</arguments>
<status endtime="20170706 20:09:30.811" starttime="20170706 20:09:30.810" status="PASS"></status>
</kw>
<kw library="OperatingSystem" name="Create Directory">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>${FFDC_LOG_PATH}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170706 20:09:30.811">Directory '&lt;a href="file:///tmp/fspcibld/956/obmc-robot/logs"&gt;/tmp/fspcibld/956/obmc-robot/logs&lt;/a&gt;' already exists.</msg>
<status endtime="20170706 20:09:30.812" starttime="20170706 20:09:30.811" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword And Return Status">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>OperatingSystem.File Should Exist</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<assign>
<var>${exist}</var>
</assign>
<kw library="OperatingSystem" name="File Should Exist">
<doc>Fails unless the given ``path`` points to an existing file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170706 20:09:30.812">File '&lt;a href="file:///tmp/fspcibld/956/obmc-robot/logs/test_history.txt"&gt;/tmp/fspcibld/956/obmc-robot/logs/test_history.txt&lt;/a&gt;' exists.</msg>
<status endtime="20170706 20:09:30.813" starttime="20170706 20:09:30.812" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170706 20:09:30.813">${exist} = True</msg>
<status endtime="20170706 20:09:30.813" starttime="20170706 20:09:30.812" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${exist}' == '${False}'</arg>
<arg>Create File</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<status endtime="20170706 20:09:30.813" starttime="20170706 20:09:30.813" status="PASS"></status>
</kw>
<kw library="gen_robot_print" name="Rpvars">
<arguments>
<arg>TEST_HISTORY</arg>
</arguments>
<status endtime="20170706 20:09:30.814" starttime="20170706 20:09:30.813" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_utils" name="Get Current Time Stamp">
<doc>Get the current time stamp data</doc>
<assign>
<var>${cur_time}</var>
</assign>
<kw library="DateTime" name="Get Current Date">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20170706 20:09:30.815">${cur_time} = 2017-07-06 20:09:30:814819</msg>
<status endtime="20170706 20:09:30.815" starttime="20170706 20:09:30.815" status="PASS"></status>
</kw>
<kw library="openbmc_ffdc_list" name="Get Strip String">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20170706 20:09:30.816">${cur_time} = 20170706200930814819</msg>
<status endtime="20170706 20:09:30.816" starttime="20170706 20:09:30.815" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170706 20:09:30.816">${cur_time} = 20170706200930814819</msg>
<status endtime="20170706 20:09:30.816" starttime="20170706 20:09:30.814" status="PASS"></status>
</kw>
<kw library="OperatingSystem" name="Append To File">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
<arg>${cur_time}:${SUITE_NAME}:${TEST_NAME}:${TEST_STATUS}${\n}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170706 20:09:30.817">Appended to file '&lt;a href="file:///tmp/fspcibld/956/obmc-robot/logs/test_history.txt"&gt;/tmp/fspcibld/956/obmc-robot/logs/test_history.txt&lt;/a&gt;'.</msg>
<status endtime="20170706 20:09:30.817" starttime="20170706 20:09:30.816" status="PASS"></status>
</kw>
<status endtime="20170706 20:09:30.817" starttime="20170706 20:09:30.798" status="PASS"></status>
</kw>
<status endtime="20170706 20:09:30.817" starttime="20170706 20:09:08.770" status="PASS"></status>
</kw>
<kw library="utils" name="Stop SOL Console Logging">
<doc>Stop system console logging and return log output.</doc>
<assign>
<var>${sol_log}</var>
</assign>
<kw library="utils" name="Create OS Console File Path">
<doc>Create OS console file path name and return it.</doc>
<arguments>
<arg>${log_file_path}</arg>
</arguments>
<assign>
<var>${log_file_path}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>/tmp/${OPENBMC_HOST}_os_console</arg>
</arguments>
<assign>
<var>${default_file_path}</var>
</assign>
<msg level="INFO" timestamp="20170706 20:09:30.819">${default_file_path} = /tmp/9.3.21.61_os_console</msg>
<status endtime="20170706 20:09:30.819" starttime="20170706 20:09:30.818" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Set Variable If">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${log_file_path}' == '${EMPTY}'</arg>
<arg>${default_file_path}</arg>
<arg>${log_file_path}</arg>
</arguments>
<assign>
<var>${log_file_path}</var>
</assign>
<msg level="INFO" timestamp="20170706 20:09:30.819">${log_file_path} = /tmp/9.3.21.61_os_console</msg>
<status endtime="20170706 20:09:30.819" starttime="20170706 20:09:30.819" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170706 20:09:30.820">${log_file_path} = /tmp/9.3.21.61_os_console</msg>
<status endtime="20170706 20:09:30.820" starttime="20170706 20:09:30.818" status="PASS"></status>
</kw>
<kw library="utils" name="Create OS Console Command String">
<doc>Return a command string to start OS console logging.</doc>
<assign>
<var>${search_string}</var>
</assign>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>which ssh_pw 2&gt;&amp;1</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170706 20:09:30.820">${cmd_buf} = which ssh_pw 2&gt;&amp;1</msg>
<status endtime="20170706 20:09:30.821" starttime="20170706 20:09:30.820" status="PASS"></status>
</kw>
<kw library="gen_robot_print" name="Rdpissuing">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status endtime="20170706 20:09:30.821" starttime="20170706 20:09:30.821" status="PASS"></status>
</kw>
<kw library="OperatingSystem" name="Run And Return Rc And Output">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg level="INFO" timestamp="20170706 20:09:30.825">Running command 'which ssh_pw 2&gt;&amp;1'.</msg>
<msg level="INFO" timestamp="20170706 20:09:30.829">${rc} = 0</msg>
<msg level="INFO" timestamp="20170706 20:09:30.829">${output} = /tmp/fspcibld/956/obmc-robot/.tox/witherspoon/bin/ssh_pw</msg>
<status endtime="20170706 20:09:30.829" starttime="20170706 20:09:30.821" status="PASS"></status>
</kw>
<kw library="gen_robot_print" name="Rdpvars">
<arguments>
<arg>rc</arg>
<arg>output</arg>
</arguments>
<status endtime="20170706 20:09:30.832" starttime="20170706 20:09:30.831" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Should Be Equal">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${rc}</arg>
<arg>${0}</arg>
<arg>msg=${output}\n</arg>
</arguments>
<status endtime="20170706 20:09:30.833" starttime="20170706 20:09:30.833" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>ssh_pw ${OPENBMC_PASSWORD} -p 2200</arg>
<arg>-o "StrictHostKeyChecking no" ${OPENBMC_USERNAME}@${OPENBMC_HOST}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170706 20:09:30.834">${cmd_buf} = ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.3.21.61</msg>
<status endtime="20170706 20:09:30.834" starttime="20170706 20:09:30.833" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170706 20:09:30.834">${search_string} = ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.3.21.61</msg>
<status endtime="20170706 20:09:30.834" starttime="20170706 20:09:30.820" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>echo $(ps -ef | egrep '${search_string}'</arg>
<arg>| egrep -v grep | cut -c10-14)</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170706 20:09:30.835">${cmd_buf} = echo $(ps -ef | egrep 'ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.3.21.61' | egrep -v grep | cut -c10-14)</msg>
<status endtime="20170706 20:09:30.835" starttime="20170706 20:09:30.835" status="PASS"></status>
</kw>
<kw library="gen_robot_print" name="Rdpissuing">
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<status endtime="20170706 20:09:30.836" starttime="20170706 20:09:30.835" status="PASS"></status>
</kw>
<kw library="OperatingSystem" name="Run And Return Rc And Output">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${os_con_pid}</var>
</assign>
<msg level="INFO" timestamp="20170706 20:09:30.839">Running command 'echo $(ps -ef | egrep 'ssh_pw 0penBmc -p 2200 -o "StrictHostKeyChecking no" root@9.3.21.61' | egrep -v grep | cut -c10-14) 2&gt;&amp;1'.</msg>
<msg level="INFO" timestamp="20170706 20:09:30.854">${rc} = 0</msg>
<msg level="INFO" timestamp="20170706 20:09:30.854">${os_con_pid} = </msg>
<status endtime="20170706 20:09:30.854" starttime="20170706 20:09:30.836" status="PASS"></status>
</kw>
<kw library="gen_robot_print" name="Rdpvars">
<arguments>
<arg>os_con_pid</arg>
</arguments>
<status endtime="20170706 20:09:30.857" starttime="20170706 20:09:30.856" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Catenate">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>kill -9 ${os_con_pid}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg level="INFO" timestamp="20170706 20:09:30.858">${cmd_buf} = kill -9 </msg>
<status endtime="20170706 20:09:30.858" starttime="20170706 20:09:30.857" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${os_con_pid}' != '${EMPTY}'</arg>
<arg>Rdpissuing</arg>
<arg>${cmd_buf}</arg>
</arguments>
<status endtime="20170706 20:09:30.862" starttime="20170706 20:09:30.858" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${os_con_pid}' != '${EMPTY}'</arg>
<arg>Run And Return Rc And Output</arg>
<arg>${cmd_buf}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<msg level="INFO" timestamp="20170706 20:09:30.863">${rc} = None</msg>
<msg level="INFO" timestamp="20170706 20:09:30.863">${output} = None</msg>
<status endtime="20170706 20:09:30.863" starttime="20170706 20:09:30.862" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${os_con_pid}' != '${EMPTY}'</arg>
<arg>Rdpvars</arg>
<arg>rc</arg>
<arg>output</arg>
</arguments>
<status endtime="20170706 20:09:30.863" starttime="20170706 20:09:30.863" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${targ_file_path}' != '${EMPTY}'</arg>
<arg>Run Keyword And Ignore Error</arg>
<arg>Copy File</arg>
<arg>${log_file_path}</arg>
<arg>${targ_file_path}</arg>
</arguments>
<kw library="BuiltIn" name="Run Keyword And Ignore Error">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Copy File</arg>
<arg>${log_file_path}</arg>
<arg>${targ_file_path}</arg>
</arguments>
<kw library="OperatingSystem" name="Copy File">
<doc>Copies the source file into the destination.</doc>
<arguments>
<arg>${log_file_path}</arg>
<arg>${targ_file_path}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20170706 20:09:30.868">Copied file from '&lt;a href="file:///tmp/9.3.21.61_os_console"&gt;/tmp/9.3.21.61_os_console&lt;/a&gt;' to '&lt;a href="file:///tmp/fspcibld/956/obmc-robot/logs/9.3.21.61_os_console"&gt;/tmp/fspcibld/956/obmc-robot/logs/9.3.21.61_os_console&lt;/a&gt;'.</msg>
<status endtime="20170706 20:09:30.868" starttime="20170706 20:09:30.865" status="PASS"></status>
</kw>
<status endtime="20170706 20:09:30.868" starttime="20170706 20:09:30.864" status="PASS"></status>
</kw>
<status endtime="20170706 20:09:30.868" starttime="20170706 20:09:30.864" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Set Variable">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${output}</var>
</assign>
<msg level="INFO" timestamp="20170706 20:09:30.869">${output} = </msg>
<status endtime="20170706 20:09:30.869" starttime="20170706 20:09:30.868" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Evaluate">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${debug}^1</arg>
</arguments>
<assign>
<var>${loc_quiet}</var>
</assign>
<msg level="INFO" timestamp="20170706 20:09:30.869">${loc_quiet} = 1</msg>
<status endtime="20170706 20:09:30.869" starttime="20170706 20:09:30.869" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Run Keyword If">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${return_data}' == '${1}'</arg>
<arg>Cmd Fnc</arg>
<arg>cat ${log_file_path}</arg>
<arg>quiet=${loc_quiet}</arg>
<arg>print_output=${0}</arg>
</arguments>
<assign>
<var>${rc}</var>
<var>${output}</var>
</assign>
<kw library="gen_cmd" name="Cmd Fnc">
<doc>Run the given command in a shell and return the shell return code.</doc>
<arguments>
<arg>cat ${log_file_path}</arg>
<arg>quiet=${loc_quiet}</arg>
<arg>print_output=${0}</arg>
</arguments>
<status endtime="20170706 20:09:30.917" starttime="20170706 20:09:30.870" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170706 20:09:30.918">${rc} = 0</msg>
<msg level="INFO" timestamp="20170706 20:09:30.919">${output} = spawn ssh -p 2200 -o StrictHostKeyChecking no root@9.3.21.61
Warning: Permanently added '[9.3.21.61]:2200' (RSA) to the list of known hosts.
root@9.3.21.61's password: 
[24;13H1[24;26H[24;10HUb...</msg>
<status endtime="20170706 20:09:30.919" starttime="20170706 20:09:30.870" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20170706 20:09:30.920">${sol_log} = spawn ssh -p 2200 -o StrictHostKeyChecking no root@9.3.21.61
Warning: Permanently added '[9.3.21.61]:2200' (RSA) to the list of known hosts.
root@9.3.21.61's password: 
[24;13H1[24;26H[24;10HUb...</msg>
<status endtime="20170706 20:09:30.920" starttime="20170706 20:09:30.817" status="PASS"></status>
</kw>
<kw library="BuiltIn" name="Log">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${sol_log}</arg>
</arguments>
<msg level="INFO" timestamp="20170706 20:09:30.922">spawn ssh -p 2200 -o StrictHostKeyChecking no root@9.3.21.61
Warning: Permanently added '[9.3.21.61]:2200' (RSA) to the list of known hosts.
root@9.3.21.61's password: 
[24;13H1[24;26H[24;10HUbuntu          [24;16H Loaded kernel image from file:///var/petitboot/mnt/dev/sda2/boot/vmlinux-4.10.[?7l0[?7h[24;9Hinitrd from file:///var/petitboot/mnt/dev/sda2/boot/initrd.img-4.10.0-2[?7l6[?7h Running boot hooks[K Performing kexec loadreboot[   47.500916656,5] IPMI: Soft shutdown requested
The system is going down NOW!
Sent SIGTERM to all processes
Sent SIGKILL to all processes
[   33.671759] kexec_core: Starting new kernel
[   51.348578928,5] OPAL: Switch to big-endian OS
[   51.438722064,5] OPAL: Switch to little-endian OS
 -&gt; smp_release_cpus()
spinning_secondaries = 15
 &lt;- smp_release_cpus()
[    1.653681] Unable to open file: /etc/keys/x509_ima.der (-2)
[    1.653688] Unable to open file: /etc/keys/x509_evm.der (-2)
[40m[2J[-1;-1f[?25l[-1;-1f[40m[37mUbuntu 17.04[-1;-1f[37m.  [37m.  [37m.  [37m.[-1;-1f[40m[37mUbuntu 17.04[-1;-1f[33m.  [37m.  [37m.  [37m.[-1;-1f[40m[37mUbuntu 17.04[-1;-1f[33m.  [33m.  [37m.  [37m.[-1;-1f[40m[37mUbuntu 17.04[-1;-1f[33m.  [33m.  [33m.  [37m.[-1;-1f[40m[37mUbuntu 17.04[-1;-1f[33m.  [33m.  [33m.  [33m.[-1;-1f[40m[37mUbuntu 17.04[-1;-1f[37m.  [33m.  [33m.  [33m.[-1;-1f[40m[37mUbuntu 17.04[-1;-1f[37m.  [37m.  [33m.  [33m.[-1;-1f[40m[37mUbuntu 17.04[-1;-1f[37m.  [37m.  [37m.  [33m.[-1;-1f[40m[37mUbuntu 17.04[-1;-1f[37m.  [37m.  [37m.  [37m.[-1;-1f[40m[37mUbuntu 17.04[-1;-1f[33m.  [37m.  [37m.  [37m.[-1;-1f[40m[37mUbuntu 17.04[-1;-1f[33m.  [33m.  [37m.  [37m.[-1;-1f[40m[37mUbuntu 17.04[-1;-1f[33m.  [33m.  [33m.  [37m.[49m[2J[-1;-1f[?25h
Ubuntu 17.04 ws017p1 hvc0

ws017p1 login: </msg>
<status endtime="20170706 20:09:30.923" starttime="20170706 20:09:30.922" status="PASS"></status>
</kw>
<status endtime="20170706 20:09:30.923" starttime="20170706 20:09:08.769" status="PASS"></status>
</kw>
<doc>Power off and on.</doc>
<tags>
<tag>chassisboot</tag>
<tag>Power_On_Test</tag>
</tags>
<status critical="yes" endtime="20170706 20:09:30.923" starttime="20170706 20:06:07.053" status="FAIL">Keyword 'Is Host Off' failed after retrying for 3 minutes. The last error was: Off != Running</status>
</test>
<doc>Test power on for HW CI.</doc>
<status endtime="20170706 20:09:30.925" starttime="20170706 20:06:07.003" status="FAIL"></status>
</suite>
<doc>Set metadata for test suite.</doc>
<status endtime="20170706 20:09:30.928" starttime="20170706 20:05:59.981" status="FAIL"></status>
</suite>
<statistics>
<total>
<stat pass="1" fail="1">Critical Tests</stat>
<stat pass="1" fail="1">All Tests</stat>
</total>
<tag>
<stat pass="0" fail="1">chassisboot</stat>
<stat pass="0" fail="1">Power_On_Test</stat>
<stat pass="1" fail="0">Test_SSL_Connection</stat>
</tag>
<suite>
<stat pass="1" name="Tests" fail="1" id="s1">Tests</stat>
<stat pass="1" name="Security" fail="0" id="s1-s1">Tests.Security</stat>
<stat pass="1" name="Test Ssl" fail="0" id="s1-s1-s1">Tests.Security.Test Ssl</stat>
<stat pass="0" name="Test Basic Poweron" fail="1" id="s1-s2">Tests.Test Basic Poweron</stat>
</suite>
</statistics>
<errors>
</errors>
</robot>
