<?xml version="1.0" encoding="UTF-8"?>
<robot generator="Robot 3.0 (Python 2.7.12 on linux2)" generated="20161202 21:42:27.684">
<suite name="Tests" id="s1" source="/tmp/root/11941/obmc-robot/tests">
<suite name="Security" id="s1-s1" source="/tmp/root/11941/obmc-robot/tests/security">
<suite name="Test Ssl" id="s1-s1-s1" source="/tmp/root/11941/obmc-robot/tests/security/test_ssl.robot">
<test name="Test SSL Connection" id="s1-s1-s1-t1">
<kw name="Initialize OpenBMC" library="rest_client">
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161202 21:42:28.146">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20161202 21:42:28.147" starttime="20161202 21:42:28.146" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161202 21:42:28.147">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20161202 21:42:28.147" starttime="20161202 21:42:28.147" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161202 21:42:28.148">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20161202 21:42:28.148" starttime="20161202 21:42:28.147" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161202 21:42:28.148">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20161202 21:42:28.148" starttime="20161202 21:42:28.148" status="PASS"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161202 21:42:28.724">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161202 21:42:28.724">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161202 21:42:28.724" starttime="20161202 21:42:28.149" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161202 21:42:28.725">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20161202 21:42:28.725" starttime="20161202 21:42:28.724" status="PASS"></status>
</kw>
<status endtime="20161202 21:42:28.725" starttime="20161202 21:42:28.145" status="PASS"></status>
</kw>
<kw name="FFDC On Test Case Fail" library="openbmc_ffdc" type="teardown">
<doc>Generic FFDC entry point. Place holder to hook in</doc>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${TEST_STATUS}' == 'FAIL'</arg>
<arg>FFDC</arg>
</arguments>
<status endtime="20161202 21:42:28.728" starttime="20161202 21:42:28.726" status="PASS"></status>
</kw>
<kw name="Log Test Case Status" library="openbmc_ffdc_methods">
<doc>Test case execution result history.</doc>
<kw name="Create Directory" library="OperatingSystem">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>${FFDC_LOG_PATH}</arg>
</arguments>
<msg level="INFO" timestamp="20161202 21:42:28.729" html="yes">Created directory '&lt;a href="file:///tmp/root/11941/obmc-robot/logs"&gt;/tmp/root/11941/obmc-robot/logs&lt;/a&gt;'.</msg>
<status endtime="20161202 21:42:28.730" starttime="20161202 21:42:28.729" status="PASS"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>OperatingSystem.File Should Exist</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<assign>
<var>${exist}</var>
</assign>
<kw name="File Should Exist" library="OperatingSystem">
<doc>Fails unless the given ``path`` points to an existing file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
</arguments>
<msg level="FAIL" timestamp="20161202 21:42:28.730">File '/tmp/root/11941/obmc-robot/logs/test_history.txt' does not exist.</msg>
<status endtime="20161202 21:42:28.731" starttime="20161202 21:42:28.730" status="FAIL"></status>
</kw>
<msg level="INFO" timestamp="20161202 21:42:28.731">${exist} = False</msg>
<status endtime="20161202 21:42:28.731" starttime="20161202 21:42:28.730" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${exist}' == '${False}'</arg>
<arg>Create File</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<kw name="Create File" library="OperatingSystem">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
</arguments>
<msg level="INFO" timestamp="20161202 21:42:28.734" html="yes">Created file '&lt;a href="file:///tmp/root/11941/obmc-robot/logs/test_history.txt"&gt;/tmp/root/11941/obmc-robot/logs/test_history.txt&lt;/a&gt;'.</msg>
<status endtime="20161202 21:42:28.734" starttime="20161202 21:42:28.734" status="PASS"></status>
</kw>
<status endtime="20161202 21:42:28.734" starttime="20161202 21:42:28.731" status="PASS"></status>
</kw>
<kw name="Get Current Time Stamp" library="openbmc_ffdc_utils">
<doc>Get the current time stamp data</doc>
<assign>
<var>${cur_time}</var>
</assign>
<kw name="Get Current Date" library="DateTime">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20161202 21:42:28.735">${cur_time} = 2016-12-02 21:42:28:734642</msg>
<status endtime="20161202 21:42:28.735" starttime="20161202 21:42:28.734" status="PASS"></status>
</kw>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20161202 21:42:28.735">${cur_time} = 20161202214228734642</msg>
<status endtime="20161202 21:42:28.735" starttime="20161202 21:42:28.735" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20161202 21:42:28.736">${cur_time} = 20161202214228734642</msg>
<status endtime="20161202 21:42:28.736" starttime="20161202 21:42:28.734" status="PASS"></status>
</kw>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
<arg>${cur_time}:${SUITE_NAME}:${TEST_NAME}:${TEST_STATUS}${\n}</arg>
</arguments>
<msg level="INFO" timestamp="20161202 21:42:28.736" html="yes">Appended to file '&lt;a href="file:///tmp/root/11941/obmc-robot/logs/test_history.txt"&gt;/tmp/root/11941/obmc-robot/logs/test_history.txt&lt;/a&gt;'.</msg>
<status endtime="20161202 21:42:28.736" starttime="20161202 21:42:28.736" status="PASS"></status>
</kw>
<status endtime="20161202 21:42:28.736" starttime="20161202 21:42:28.729" status="PASS"></status>
</kw>
<status endtime="20161202 21:42:28.737" starttime="20161202 21:42:28.725" status="PASS"></status>
</kw>
<doc>This testcase is for testing the SSL connection to the
OpenBMC machine.</doc>
<tags>
<tag>Test_SSL_Connection</tag>
</tags>
<status endtime="20161202 21:42:28.737" starttime="20161202 21:42:28.145" status="PASS" critical="yes"></status>
</test>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords" type="teardown">
<doc>Removes all the session objects</doc>
<msg level="INFO" timestamp="20161202 21:42:28.737">Delete All Sessions</msg>
<status endtime="20161202 21:42:28.737" starttime="20161202 21:42:28.737" status="PASS"></status>
</kw>
<doc>This testsuite is for testing SSL connection to OpenBMC</doc>
<status endtime="20161202 21:42:28.737" starttime="20161202 21:42:27.707" status="PASS"></status>
</suite>
<status endtime="20161202 21:42:28.739" starttime="20161202 21:42:27.706" status="PASS"></status>
</suite>
<suite name="Test Association" id="s1-s2" source="/tmp/root/11941/obmc-robot/tests/test_association.robot">
<kw name="Suite Initialization Setup" type="setup">
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg level="FAIL" timestamp="20161202 21:42:28.768">Dictionary does not contain key 'host'.</msg>
<status endtime="20161202 21:42:28.768" starttime="20161202 21:42:28.767" status="FAIL"></status>
</kw>
<msg level="INFO" timestamp="20161202 21:42:28.768">${has_host} = False</msg>
<status endtime="20161202 21:42:28.768" starttime="20161202 21:42:28.767" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status endtime="20161202 21:42:28.771" starttime="20161202 21:42:28.771" status="PASS"></status>
</kw>
<status endtime="20161202 21:42:28.771" starttime="20161202 21:42:28.768" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<kw name="User input SSH and HTTPs Ports" library="connection_client">
<doc>Update the global SSH and HTTPs port variable for QEMU</doc>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${SSH_PORT}</arg>
</arguments>
<assign>
<var>${port_num}</var>
</assign>
<msg level="INFO" timestamp="20161202 21:42:28.775">${port_num} = 22</msg>
<status endtime="20161202 21:42:28.775" starttime="20161202 21:42:28.775" status="PASS"></status>
</kw>
<kw name="Replace Variables" library="BuiltIn">
<doc>Replaces variables in the given text with their current values.</doc>
<arguments>
<arg>${port_num}</arg>
</arguments>
<assign>
<var>${SSH_PORT}</var>
</assign>
<msg level="INFO" timestamp="20161202 21:42:28.776">${SSH_PORT} = 22</msg>
<status endtime="20161202 21:42:28.776" starttime="20161202 21:42:28.775" status="PASS"></status>
</kw>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${HTTPS_PORT}</arg>
</arguments>
<assign>
<var>${https_num}</var>
</assign>
<msg level="INFO" timestamp="20161202 21:42:28.776">${https_num} = 443</msg>
<status endtime="20161202 21:42:28.776" starttime="20161202 21:42:28.776" status="PASS"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${AUTH_URI}</arg>
<arg>https://${OPENBMC_HOST}:${https_num}</arg>
</arguments>
<msg level="INFO" timestamp="20161202 21:42:28.777">${AUTH_URI} = https://9.3.23.30:443</msg>
<status endtime="20161202 21:42:28.777" starttime="20161202 21:42:28.776" status="PASS"></status>
</kw>
<status endtime="20161202 21:42:28.777" starttime="20161202 21:42:28.774" status="PASS"></status>
</kw>
<status endtime="20161202 21:42:28.777" starttime="20161202 21:42:28.772" status="PASS"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg level="FAIL" timestamp="20161202 21:42:28.778">Dictionary does not contain key 'port'.</msg>
<status endtime="20161202 21:42:28.778" starttime="20161202 21:42:28.777" status="FAIL"></status>
</kw>
<msg level="INFO" timestamp="20161202 21:42:28.778">${has_port} = False</msg>
<status endtime="20161202 21:42:28.778" starttime="20161202 21:42:28.777" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keywords" library="BuiltIn">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
</arguments>
<status endtime="20161202 21:42:28.782" starttime="20161202 21:42:28.782" status="PASS"></status>
</kw>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status endtime="20161202 21:42:28.782" starttime="20161202 21:42:28.782" status="PASS"></status>
</kw>
<status endtime="20161202 21:42:28.782" starttime="20161202 21:42:28.781" status="PASS"></status>
</kw>
<status endtime="20161202 21:42:28.783" starttime="20161202 21:42:28.778" status="PASS"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg level="INFO" timestamp="20161202 21:42:28.783">Logging into '9.3.23.30:22' as 'root'.</msg>
<msg level="INFO" timestamp="20161202 21:42:31.700">Read output: 7[r[999;999H[6n</msg>
<status endtime="20161202 21:42:31.701" starttime="20161202 21:42:28.783" status="PASS"></status>
</kw>
<status endtime="20161202 21:42:31.701" starttime="20161202 21:42:28.767" status="PASS"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Clear all logs</arg>
</arguments>
<kw name="Clear all logs">
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>/org/openbmc/records/events/action/clear</arg>
<arg>data=${NIL}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161202 21:42:31.705">${base_uri} = /org/openbmc/records/events/action/clear</msg>
<status endtime="20161202 21:42:31.705" starttime="20161202 21:42:31.704" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161202 21:42:31.706">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20161202 21:42:31.706" starttime="20161202 21:42:31.705" status="PASS"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status endtime="20161202 21:42:31.707" starttime="20161202 21:42:31.706" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161202 21:42:31.715">${msg} = URI:https://9.3.23.30:443/org/openbmc/records/events/action/clear, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status endtime="20161202 21:42:31.715" starttime="20161202 21:42:31.713" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161202 21:42:31.716">URI:https://9.3.23.30:443/org/openbmc/records/events/action/clear, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status endtime="20161202 21:42:31.716" starttime="20161202 21:42:31.715" status="PASS"></status>
</kw>
<status endtime="20161202 21:42:31.716" starttime="20161202 21:42:31.715" status="PASS"></status>
</kw>
<status endtime="20161202 21:42:31.717" starttime="20161202 21:42:31.713" status="PASS"></status>
</kw>
<status endtime="20161202 21:42:31.717" starttime="20161202 21:42:31.707" status="PASS"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161202 21:42:31.718">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20161202 21:42:31.719" starttime="20161202 21:42:31.718" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161202 21:42:31.720">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20161202 21:42:31.720" starttime="20161202 21:42:31.719" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161202 21:42:31.720">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20161202 21:42:31.720" starttime="20161202 21:42:31.720" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161202 21:42:31.721">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20161202 21:42:31.721" starttime="20161202 21:42:31.721" status="PASS"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161202 21:42:32.049">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161202 21:42:32.049">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161202 21:42:32.049" starttime="20161202 21:42:31.721" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161202 21:42:32.050">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20161202 21:42:32.050" starttime="20161202 21:42:32.050" status="PASS"></status>
</kw>
<status endtime="20161202 21:42:32.050" starttime="20161202 21:42:31.717" status="PASS"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161202 21:42:32.336">Post Request using : alias=openbmc, uri=/org/openbmc/records/events/action/clear, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161202 21:42:32.336">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20161202 21:42:32.336" starttime="20161202 21:42:32.051" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161202 21:42:32.340">${msg} = Response code:200, Content:{
  "data": 0, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20161202 21:42:32.340" starttime="20161202 21:42:32.339" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161202 21:42:32.341">Response code:200, Content:{
  "data": 0, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20161202 21:42:32.341" starttime="20161202 21:42:32.340" status="PASS"></status>
</kw>
<status endtime="20161202 21:42:32.341" starttime="20161202 21:42:32.340" status="PASS"></status>
</kw>
<status endtime="20161202 21:42:32.341" starttime="20161202 21:42:32.339" status="PASS"></status>
</kw>
<status endtime="20161202 21:42:32.341" starttime="20161202 21:42:32.336" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20161202 21:42:32.341">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161202 21:42:32.341" starttime="20161202 21:42:31.703" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161202 21:42:32.342">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20161202 21:42:32.342" starttime="20161202 21:42:32.341" status="PASS"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>/org/openbmc/records/events/</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161202 21:42:32.343">${base_uri} = /org/openbmc/records/events/</msg>
<status endtime="20161202 21:42:32.343" starttime="20161202 21:42:32.342" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161202 21:42:32.347">${msg} = URI:https://9.3.23.30:443/org/openbmc/records/events/, method:Get, args:{}</msg>
<status endtime="20161202 21:42:32.347" starttime="20161202 21:42:32.346" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161202 21:42:32.348">URI:https://9.3.23.30:443/org/openbmc/records/events/, method:Get, args:{}</msg>
<status endtime="20161202 21:42:32.348" starttime="20161202 21:42:32.348" status="PASS"></status>
</kw>
<status endtime="20161202 21:42:32.348" starttime="20161202 21:42:32.347" status="PASS"></status>
</kw>
<status endtime="20161202 21:42:32.348" starttime="20161202 21:42:32.346" status="PASS"></status>
</kw>
<status endtime="20161202 21:42:32.348" starttime="20161202 21:42:32.343" status="PASS"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161202 21:42:32.349">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20161202 21:42:32.349" starttime="20161202 21:42:32.349" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161202 21:42:32.350">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20161202 21:42:32.350" starttime="20161202 21:42:32.350" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161202 21:42:32.350">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20161202 21:42:32.350" starttime="20161202 21:42:32.350" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161202 21:42:32.351">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20161202 21:42:32.351" starttime="20161202 21:42:32.351" status="PASS"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161202 21:42:32.992">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161202 21:42:32.992">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161202 21:42:32.992" starttime="20161202 21:42:32.351" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161202 21:42:32.993">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20161202 21:42:32.993" starttime="20161202 21:42:32.993" status="PASS"></status>
</kw>
<status endtime="20161202 21:42:32.994" starttime="20161202 21:42:32.348" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161202 21:42:33.057">Get Request using : alias=openbmc, uri=/org/openbmc/records/events/, headers=None </msg>
<msg level="INFO" timestamp="20161202 21:42:33.057">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20161202 21:42:33.057" starttime="20161202 21:42:32.994" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161202 21:42:33.065">${msg} = Response code:200, Content:{
  "data": [], 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20161202 21:42:33.065" starttime="20161202 21:42:33.064" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161202 21:42:33.066">Response code:200, Content:{
  "data": [], 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20161202 21:42:33.066" starttime="20161202 21:42:33.066" status="PASS"></status>
</kw>
<status endtime="20161202 21:42:33.066" starttime="20161202 21:42:33.065" status="PASS"></status>
</kw>
<status endtime="20161202 21:42:33.066" starttime="20161202 21:42:33.063" status="PASS"></status>
</kw>
<status endtime="20161202 21:42:33.067" starttime="20161202 21:42:33.058" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20161202 21:42:33.067">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161202 21:42:33.067" starttime="20161202 21:42:32.342" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${json}</var>
</assign>
<msg level="INFO" timestamp="20161202 21:42:33.068">To JSON using : content={
  "data": [], 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161202 21:42:33.068">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161202 21:42:33.068">${json} = {u'message': u'200 OK', u'status': u'ok', u'data': []}</msg>
<status endtime="20161202 21:42:33.068" starttime="20161202 21:42:33.067" status="PASS"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${json['data']}</arg>
</arguments>
<msg level="INFO" timestamp="20161202 21:42:33.069">Length is 0</msg>
<status endtime="20161202 21:42:33.069" starttime="20161202 21:42:33.069" status="PASS"></status>
</kw>
<status endtime="20161202 21:42:33.069" starttime="20161202 21:42:31.702" status="PASS"></status>
</kw>
<status endtime="20161202 21:42:33.070" starttime="20161202 21:42:31.701" status="PASS"></status>
</kw>
<status endtime="20161202 21:42:33.070" starttime="20161202 21:42:28.766" status="PASS"></status>
</kw>
<test name="Create error log on single FRU" id="s1-s2-t1">
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Clear all logs</arg>
</arguments>
<kw name="Clear all logs">
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>/org/openbmc/records/events/action/clear</arg>
<arg>data=${NIL}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161202 21:42:33.072">${base_uri} = /org/openbmc/records/events/action/clear</msg>
<status endtime="20161202 21:42:33.072" starttime="20161202 21:42:33.072" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161202 21:42:33.073">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20161202 21:42:33.073" starttime="20161202 21:42:33.072" status="PASS"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status endtime="20161202 21:42:33.073" starttime="20161202 21:42:33.073" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161202 21:42:33.077">${msg} = URI:https://9.3.23.30:443/org/openbmc/records/events/action/clear, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status endtime="20161202 21:42:33.077" starttime="20161202 21:42:33.077" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161202 21:42:33.078">URI:https://9.3.23.30:443/org/openbmc/records/events/action/clear, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status endtime="20161202 21:42:33.078" starttime="20161202 21:42:33.078" status="PASS"></status>
</kw>
<status endtime="20161202 21:42:33.078" starttime="20161202 21:42:33.078" status="PASS"></status>
</kw>
<status endtime="20161202 21:42:33.079" starttime="20161202 21:42:33.076" status="PASS"></status>
</kw>
<status endtime="20161202 21:42:33.079" starttime="20161202 21:42:33.073" status="PASS"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161202 21:42:33.079">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20161202 21:42:33.080" starttime="20161202 21:42:33.079" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161202 21:42:33.080">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20161202 21:42:33.080" starttime="20161202 21:42:33.080" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161202 21:42:33.081">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20161202 21:42:33.081" starttime="20161202 21:42:33.081" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161202 21:42:33.081">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20161202 21:42:33.082" starttime="20161202 21:42:33.081" status="PASS"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161202 21:42:33.408">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161202 21:42:33.408">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161202 21:42:33.408" starttime="20161202 21:42:33.082" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161202 21:42:33.409">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20161202 21:42:33.409" starttime="20161202 21:42:33.409" status="PASS"></status>
</kw>
<status endtime="20161202 21:42:33.409" starttime="20161202 21:42:33.079" status="PASS"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161202 21:42:33.641">Post Request using : alias=openbmc, uri=/org/openbmc/records/events/action/clear, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161202 21:42:33.641">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20161202 21:42:33.641" starttime="20161202 21:42:33.410" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161202 21:42:33.652">${msg} = Response code:200, Content:{
  "data": 0, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20161202 21:42:33.652" starttime="20161202 21:42:33.651" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161202 21:42:33.653">Response code:200, Content:{
  "data": 0, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20161202 21:42:33.653" starttime="20161202 21:42:33.653" status="PASS"></status>
</kw>
<status endtime="20161202 21:42:33.653" starttime="20161202 21:42:33.652" status="PASS"></status>
</kw>
<status endtime="20161202 21:42:33.654" starttime="20161202 21:42:33.647" status="PASS"></status>
</kw>
<status endtime="20161202 21:42:33.654" starttime="20161202 21:42:33.641" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20161202 21:42:33.654">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161202 21:42:33.654" starttime="20161202 21:42:33.071" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161202 21:42:33.655">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20161202 21:42:33.655" starttime="20161202 21:42:33.654" status="PASS"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>/org/openbmc/records/events/</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161202 21:42:33.657">${base_uri} = /org/openbmc/records/events/</msg>
<status endtime="20161202 21:42:33.657" starttime="20161202 21:42:33.656" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161202 21:42:33.662">${msg} = URI:https://9.3.23.30:443/org/openbmc/records/events/, method:Get, args:{}</msg>
<status endtime="20161202 21:42:33.662" starttime="20161202 21:42:33.662" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161202 21:42:33.663">URI:https://9.3.23.30:443/org/openbmc/records/events/, method:Get, args:{}</msg>
<status endtime="20161202 21:42:33.663" starttime="20161202 21:42:33.663" status="PASS"></status>
</kw>
<status endtime="20161202 21:42:33.663" starttime="20161202 21:42:33.663" status="PASS"></status>
</kw>
<status endtime="20161202 21:42:33.664" starttime="20161202 21:42:33.661" status="PASS"></status>
</kw>
<status endtime="20161202 21:42:33.664" starttime="20161202 21:42:33.657" status="PASS"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161202 21:42:33.664">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20161202 21:42:33.665" starttime="20161202 21:42:33.664" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161202 21:42:33.665">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20161202 21:42:33.666" starttime="20161202 21:42:33.665" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161202 21:42:33.666">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20161202 21:42:33.666" starttime="20161202 21:42:33.666" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161202 21:42:33.667">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20161202 21:42:33.667" starttime="20161202 21:42:33.666" status="PASS"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161202 21:42:34.006">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161202 21:42:34.006">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161202 21:42:34.006" starttime="20161202 21:42:33.667" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161202 21:42:34.007">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20161202 21:42:34.007" starttime="20161202 21:42:34.006" status="PASS"></status>
</kw>
<status endtime="20161202 21:42:34.007" starttime="20161202 21:42:33.664" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161202 21:42:34.091">Get Request using : alias=openbmc, uri=/org/openbmc/records/events/, headers=None </msg>
<msg level="INFO" timestamp="20161202 21:42:34.091">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20161202 21:42:34.092" starttime="20161202 21:42:34.007" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161202 21:42:34.096">${msg} = Response code:200, Content:{
  "data": [], 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20161202 21:42:34.096" starttime="20161202 21:42:34.095" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161202 21:42:34.097">Response code:200, Content:{
  "data": [], 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20161202 21:42:34.097" starttime="20161202 21:42:34.097" status="PASS"></status>
</kw>
<status endtime="20161202 21:42:34.097" starttime="20161202 21:42:34.096" status="PASS"></status>
</kw>
<status endtime="20161202 21:42:34.097" starttime="20161202 21:42:34.095" status="PASS"></status>
</kw>
<status endtime="20161202 21:42:34.097" starttime="20161202 21:42:34.092" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20161202 21:42:34.097">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161202 21:42:34.097" starttime="20161202 21:42:33.655" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${json}</var>
</assign>
<msg level="INFO" timestamp="20161202 21:42:34.098">To JSON using : content={
  "data": [], 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161202 21:42:34.098">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161202 21:42:34.098">${json} = {u'message': u'200 OK', u'status': u'ok', u'data': []}</msg>
<status endtime="20161202 21:42:34.098" starttime="20161202 21:42:34.098" status="PASS"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${json['data']}</arg>
</arguments>
<msg level="INFO" timestamp="20161202 21:42:34.099">Length is 0</msg>
<status endtime="20161202 21:42:34.099" starttime="20161202 21:42:34.098" status="PASS"></status>
</kw>
<status endtime="20161202 21:42:34.099" starttime="20161202 21:42:33.071" status="PASS"></status>
</kw>
<status endtime="20161202 21:42:34.099" starttime="20161202 21:42:33.071" status="PASS"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${CREATE_ERROR_SINGLE_FRU}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${elog}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20161202 21:42:34.099">Executing command 'busctl call org.openbmc.records.events /org/openbmc/records/events org.openbmc.recordlog acceptHostMessage sssay "Error" "Testing failure" "/org/openbmc/inventory/system/chassis/motherboard/dimm1" 1 1'.</msg>
<msg level="INFO" timestamp="20161202 21:42:34.662">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20161202 21:42:34.662">${elog} = q 165</msg>
<msg level="INFO" timestamp="20161202 21:42:34.662">${stderr} = </msg>
<status endtime="20161202 21:42:34.662" starttime="20161202 21:42:34.099" status="PASS"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg level="INFO" timestamp="20161202 21:42:34.663">Length is 0</msg>
<status endtime="20161202 21:42:34.663" starttime="20161202 21:42:34.663" status="PASS"></status>
</kw>
<kw name="Get EventList">
<assign>
<var>${log_list}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>/org/openbmc/records/events/</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161202 21:42:34.665">${base_uri} = /org/openbmc/records/events/</msg>
<status endtime="20161202 21:42:34.665" starttime="20161202 21:42:34.665" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161202 21:42:34.672">${msg} = URI:https://9.3.23.30:443/org/openbmc/records/events/, method:Get, args:{}</msg>
<status endtime="20161202 21:42:34.672" starttime="20161202 21:42:34.671" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161202 21:42:34.673">URI:https://9.3.23.30:443/org/openbmc/records/events/, method:Get, args:{}</msg>
<status endtime="20161202 21:42:34.673" starttime="20161202 21:42:34.672" status="PASS"></status>
</kw>
<status endtime="20161202 21:42:34.673" starttime="20161202 21:42:34.672" status="PASS"></status>
</kw>
<status endtime="20161202 21:42:34.673" starttime="20161202 21:42:34.670" status="PASS"></status>
</kw>
<status endtime="20161202 21:42:34.673" starttime="20161202 21:42:34.666" status="PASS"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161202 21:42:34.674">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20161202 21:42:34.674" starttime="20161202 21:42:34.674" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161202 21:42:34.675">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20161202 21:42:34.675" starttime="20161202 21:42:34.674" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161202 21:42:34.675">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20161202 21:42:34.675" starttime="20161202 21:42:34.675" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161202 21:42:34.676">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20161202 21:42:34.676" starttime="20161202 21:42:34.676" status="PASS"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161202 21:42:35.142">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161202 21:42:35.142">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161202 21:42:35.142" starttime="20161202 21:42:34.676" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161202 21:42:35.143">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20161202 21:42:35.143" starttime="20161202 21:42:35.142" status="PASS"></status>
</kw>
<status endtime="20161202 21:42:35.143" starttime="20161202 21:42:34.673" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161202 21:42:35.202">Get Request using : alias=openbmc, uri=/org/openbmc/records/events/, headers=None </msg>
<msg level="INFO" timestamp="20161202 21:42:35.202">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20161202 21:42:35.203" starttime="20161202 21:42:35.144" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161202 21:42:35.210">${msg} = Response code:200, Content:{
  "data": [
    "/org/openbmc/records/events/165"
  ], 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20161202 21:42:35.210" starttime="20161202 21:42:35.209" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161202 21:42:35.212">Response code:200, Content:{
  "data": [
    "/org/openbmc/records/events/165"
  ], 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20161202 21:42:35.212" starttime="20161202 21:42:35.211" status="PASS"></status>
</kw>
<status endtime="20161202 21:42:35.212" starttime="20161202 21:42:35.210" status="PASS"></status>
</kw>
<status endtime="20161202 21:42:35.212" starttime="20161202 21:42:35.208" status="PASS"></status>
</kw>
<status endtime="20161202 21:42:35.212" starttime="20161202 21:42:35.203" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20161202 21:42:35.212">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161202 21:42:35.213" starttime="20161202 21:42:34.664" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161202 21:42:35.213">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20161202 21:42:35.213" starttime="20161202 21:42:35.213" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg level="INFO" timestamp="20161202 21:42:35.214">To JSON using : content={
  "data": [
    "/org/openbmc/records/events/165"
  ], 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161202 21:42:35.214">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161202 21:42:35.215">${jsondata} = {u'message': u'200 OK', u'status': u'ok', u'data': [u'/org/openbmc/records/events/165']}</msg>
<status endtime="20161202 21:42:35.215" starttime="20161202 21:42:35.214" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20161202 21:42:35.215">${log_list} = [u'/org/openbmc/records/events/165']</msg>
<status endtime="20161202 21:42:35.215" starttime="20161202 21:42:34.663" status="PASS"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>'${log_list}'</arg>
<arg>${elog.strip('q ')}</arg>
</arguments>
<status endtime="20161202 21:42:35.216" starttime="20161202 21:42:35.215" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${EVENT_RECORD}/${elog.strip('q ')}</arg>
<arg>/fru</arg>
</arguments>
<assign>
<var>${association_uri}</var>
</assign>
<msg level="INFO" timestamp="20161202 21:42:35.217">${association_uri} = /org/openbmc/records/events/165/fru</msg>
<status endtime="20161202 21:42:35.217" starttime="20161202 21:42:35.216" status="PASS"></status>
</kw>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${association_uri}</arg>
<arg>endpoints</arg>
</arguments>
<assign>
<var>${association_content}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161202 21:42:35.219">${base_uri} = /org/openbmc/records/events/165/fru/attr/endpoints</msg>
<status endtime="20161202 21:42:35.219" starttime="20161202 21:42:35.219" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161202 21:42:35.224">${msg} = URI:https://9.3.23.30:443/org/openbmc/records/events/165/fru/attr/endpoints, method:Get, args:{}</msg>
<status endtime="20161202 21:42:35.224" starttime="20161202 21:42:35.223" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161202 21:42:35.224">URI:https://9.3.23.30:443/org/openbmc/records/events/165/fru/attr/endpoints, method:Get, args:{}</msg>
<status endtime="20161202 21:42:35.225" starttime="20161202 21:42:35.224" status="PASS"></status>
</kw>
<status endtime="20161202 21:42:35.225" starttime="20161202 21:42:35.224" status="PASS"></status>
</kw>
<status endtime="20161202 21:42:35.225" starttime="20161202 21:42:35.223" status="PASS"></status>
</kw>
<status endtime="20161202 21:42:35.225" starttime="20161202 21:42:35.220" status="PASS"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161202 21:42:35.226">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20161202 21:42:35.226" starttime="20161202 21:42:35.225" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161202 21:42:35.227">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20161202 21:42:35.227" starttime="20161202 21:42:35.226" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161202 21:42:35.227">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20161202 21:42:35.227" starttime="20161202 21:42:35.227" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161202 21:42:35.228">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20161202 21:42:35.228" starttime="20161202 21:42:35.228" status="PASS"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161202 21:42:35.558">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161202 21:42:35.559">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161202 21:42:35.559" starttime="20161202 21:42:35.228" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161202 21:42:35.560">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20161202 21:42:35.560" starttime="20161202 21:42:35.559" status="PASS"></status>
</kw>
<status endtime="20161202 21:42:35.560" starttime="20161202 21:42:35.225" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161202 21:42:35.643">Get Request using : alias=openbmc, uri=/org/openbmc/records/events/165/fru/attr/endpoints, headers=None </msg>
<msg level="INFO" timestamp="20161202 21:42:35.643">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20161202 21:42:35.644" starttime="20161202 21:42:35.560" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161202 21:42:35.651">${msg} = Response code:200, Content:{
  "data": [
    "/org/openbmc/inventory/system/chassis/motherboard/dimm1"
  ], 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20161202 21:42:35.651" starttime="20161202 21:42:35.650" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161202 21:42:35.652">Response code:200, Content:{
  "data": [
    "/org/openbmc/inventory/system/chassis/motherboard/dimm1"
  ], 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20161202 21:42:35.652" starttime="20161202 21:42:35.652" status="PASS"></status>
</kw>
<status endtime="20161202 21:42:35.652" starttime="20161202 21:42:35.651" status="PASS"></status>
</kw>
<status endtime="20161202 21:42:35.653" starttime="20161202 21:42:35.649" status="PASS"></status>
</kw>
<status endtime="20161202 21:42:35.653" starttime="20161202 21:42:35.644" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20161202 21:42:35.653">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161202 21:42:35.653" starttime="20161202 21:42:35.218" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161202 21:42:35.654">To JSON using : content={
  "data": [
    "/org/openbmc/inventory/system/chassis/motherboard/dimm1"
  ], 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161202 21:42:35.654">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161202 21:42:35.654">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': [u'/org/openbmc/inventory/system/chassis/motherboard/dimm1']}</msg>
<status endtime="20161202 21:42:35.654" starttime="20161202 21:42:35.653" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20161202 21:42:35.655">${association_content} = [u'/org/openbmc/inventory/system/chassis/motherboard/dimm1']</msg>
<status endtime="20161202 21:42:35.655" starttime="20161202 21:42:35.217" status="PASS"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${association_content}</arg>
<arg>${DIMM1_URI}</arg>
</arguments>
<status endtime="20161202 21:42:35.655" starttime="20161202 21:42:35.655" status="PASS"></status>
</kw>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${DIMM1_URI}/event</arg>
<arg>endpoints</arg>
</arguments>
<assign>
<var>${dimm1_event}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161202 21:42:35.658">${base_uri} = /org/openbmc/inventory/system/chassis/motherboard/dimm1/event/attr/endpoints</msg>
<status endtime="20161202 21:42:35.658" starttime="20161202 21:42:35.658" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161202 21:42:35.668">${msg} = URI:https://9.3.23.30:443/org/openbmc/inventory/system/chassis/motherboard/dimm1/event/attr/endpoints, method:Get, args:{}</msg>
<status endtime="20161202 21:42:35.668" starttime="20161202 21:42:35.666" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161202 21:42:35.669">URI:https://9.3.23.30:443/org/openbmc/inventory/system/chassis/motherboard/dimm1/event/attr/endpoints, method:Get, args:{}</msg>
<status endtime="20161202 21:42:35.669" starttime="20161202 21:42:35.669" status="PASS"></status>
</kw>
<status endtime="20161202 21:42:35.670" starttime="20161202 21:42:35.668" status="PASS"></status>
</kw>
<status endtime="20161202 21:42:35.670" starttime="20161202 21:42:35.664" status="PASS"></status>
</kw>
<status endtime="20161202 21:42:35.670" starttime="20161202 21:42:35.659" status="PASS"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161202 21:42:35.671">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20161202 21:42:35.671" starttime="20161202 21:42:35.670" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161202 21:42:35.671">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20161202 21:42:35.671" starttime="20161202 21:42:35.671" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161202 21:42:35.672">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20161202 21:42:35.672" starttime="20161202 21:42:35.672" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161202 21:42:35.673">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20161202 21:42:35.673" starttime="20161202 21:42:35.672" status="PASS"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161202 21:42:36.005">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161202 21:42:36.005">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161202 21:42:36.005" starttime="20161202 21:42:35.673" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161202 21:42:36.006">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20161202 21:42:36.006" starttime="20161202 21:42:36.006" status="PASS"></status>
</kw>
<status endtime="20161202 21:42:36.006" starttime="20161202 21:42:35.670" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161202 21:42:36.084">Get Request using : alias=openbmc, uri=/org/openbmc/inventory/system/chassis/motherboard/dimm1/event/attr/endpoints, headers=None </msg>
<msg level="INFO" timestamp="20161202 21:42:36.084">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20161202 21:42:36.084" starttime="20161202 21:42:36.006" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161202 21:42:36.088">${msg} = Response code:200, Content:{
  "data": [
    "/org/openbmc/records/events/165"
  ], 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20161202 21:42:36.088" starttime="20161202 21:42:36.088" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161202 21:42:36.089">Response code:200, Content:{
  "data": [
    "/org/openbmc/records/events/165"
  ], 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20161202 21:42:36.089" starttime="20161202 21:42:36.089" status="PASS"></status>
</kw>
<status endtime="20161202 21:42:36.089" starttime="20161202 21:42:36.089" status="PASS"></status>
</kw>
<status endtime="20161202 21:42:36.090" starttime="20161202 21:42:36.087" status="PASS"></status>
</kw>
<status endtime="20161202 21:42:36.090" starttime="20161202 21:42:36.085" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20161202 21:42:36.090">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161202 21:42:36.090" starttime="20161202 21:42:35.656" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161202 21:42:36.090">To JSON using : content={
  "data": [
    "/org/openbmc/records/events/165"
  ], 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161202 21:42:36.090">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161202 21:42:36.090">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': [u'/org/openbmc/records/events/165']}</msg>
<status endtime="20161202 21:42:36.090" starttime="20161202 21:42:36.090" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20161202 21:42:36.091">${dimm1_event} = [u'/org/openbmc/records/events/165']</msg>
<status endtime="20161202 21:42:36.091" starttime="20161202 21:42:35.656" status="PASS"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${dimm1_event}</arg>
<arg>${log_list[0]}</arg>
</arguments>
<status endtime="20161202 21:42:36.091" starttime="20161202 21:42:36.091" status="PASS"></status>
</kw>
<kw name="FFDC On Test Case Fail" library="openbmc_ffdc" type="teardown">
<doc>Generic FFDC entry point. Place holder to hook in</doc>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${TEST_STATUS}' == 'FAIL'</arg>
<arg>FFDC</arg>
</arguments>
<status endtime="20161202 21:42:36.095" starttime="20161202 21:42:36.092" status="PASS"></status>
</kw>
<kw name="Log Test Case Status" library="openbmc_ffdc_methods">
<doc>Test case execution result history.</doc>
<kw name="Create Directory" library="OperatingSystem">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>${FFDC_LOG_PATH}</arg>
</arguments>
<msg level="INFO" timestamp="20161202 21:42:36.096" html="yes">Directory '&lt;a href="file:///tmp/root/11941/obmc-robot/logs"&gt;/tmp/root/11941/obmc-robot/logs&lt;/a&gt;' already exists.</msg>
<status endtime="20161202 21:42:36.096" starttime="20161202 21:42:36.095" status="PASS"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>OperatingSystem.File Should Exist</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<assign>
<var>${exist}</var>
</assign>
<kw name="File Should Exist" library="OperatingSystem">
<doc>Fails unless the given ``path`` points to an existing file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
</arguments>
<msg level="INFO" timestamp="20161202 21:42:36.097" html="yes">File '&lt;a href="file:///tmp/root/11941/obmc-robot/logs/test_history.txt"&gt;/tmp/root/11941/obmc-robot/logs/test_history.txt&lt;/a&gt;' exists.</msg>
<status endtime="20161202 21:42:36.097" starttime="20161202 21:42:36.096" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20161202 21:42:36.097">${exist} = True</msg>
<status endtime="20161202 21:42:36.097" starttime="20161202 21:42:36.096" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${exist}' == '${False}'</arg>
<arg>Create File</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<status endtime="20161202 21:42:36.100" starttime="20161202 21:42:36.097" status="PASS"></status>
</kw>
<kw name="Get Current Time Stamp" library="openbmc_ffdc_utils">
<doc>Get the current time stamp data</doc>
<assign>
<var>${cur_time}</var>
</assign>
<kw name="Get Current Date" library="DateTime">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20161202 21:42:36.101">${cur_time} = 2016-12-02 21:42:36:100745</msg>
<status endtime="20161202 21:42:36.101" starttime="20161202 21:42:36.101" status="PASS"></status>
</kw>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20161202 21:42:36.102">${cur_time} = 20161202214236100745</msg>
<status endtime="20161202 21:42:36.102" starttime="20161202 21:42:36.101" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20161202 21:42:36.102">${cur_time} = 20161202214236100745</msg>
<status endtime="20161202 21:42:36.102" starttime="20161202 21:42:36.100" status="PASS"></status>
</kw>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
<arg>${cur_time}:${SUITE_NAME}:${TEST_NAME}:${TEST_STATUS}${\n}</arg>
</arguments>
<msg level="INFO" timestamp="20161202 21:42:36.103" html="yes">Appended to file '&lt;a href="file:///tmp/root/11941/obmc-robot/logs/test_history.txt"&gt;/tmp/root/11941/obmc-robot/logs/test_history.txt&lt;/a&gt;'.</msg>
<status endtime="20161202 21:42:36.103" starttime="20161202 21:42:36.102" status="PASS"></status>
</kw>
<status endtime="20161202 21:42:36.103" starttime="20161202 21:42:36.095" status="PASS"></status>
</kw>
<status endtime="20161202 21:42:36.103" starttime="20161202 21:42:36.092" status="PASS"></status>
</kw>
<doc>***GOOD PATH***
Create an error log on single FRU and verify
its association.
</doc>
<tags>
<tag>Create_error_log_on_single_FRU</tag>
</tags>
<status endtime="20161202 21:42:36.103" starttime="20161202 21:42:33.070" status="PASS" critical="yes"></status>
</test>
<test name="Delete error log" id="s1-s2-t2">
<kw name="Create a test log">
<assign>
<var>${log_uri1}</var>
</assign>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{EMPTY}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161202 21:42:36.105">${data} = {u'data': []}</msg>
<status endtime="20161202 21:42:36.105" starttime="20161202 21:42:36.104" status="PASS"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>/org/openbmc/records/events/action/acceptTestMessage</arg>
<arg>data=${data}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161202 21:42:36.106">${base_uri} = /org/openbmc/records/events/action/acceptTestMessage</msg>
<status endtime="20161202 21:42:36.106" starttime="20161202 21:42:36.105" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161202 21:42:36.106">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20161202 21:42:36.106" starttime="20161202 21:42:36.106" status="PASS"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status endtime="20161202 21:42:36.107" starttime="20161202 21:42:36.106" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161202 21:42:36.111">${msg} = URI:https://9.3.23.30:443/org/openbmc/records/events/action/acceptTestMessage, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status endtime="20161202 21:42:36.111" starttime="20161202 21:42:36.110" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161202 21:42:36.112">URI:https://9.3.23.30:443/org/openbmc/records/events/action/acceptTestMessage, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status endtime="20161202 21:42:36.112" starttime="20161202 21:42:36.111" status="PASS"></status>
</kw>
<status endtime="20161202 21:42:36.112" starttime="20161202 21:42:36.111" status="PASS"></status>
</kw>
<status endtime="20161202 21:42:36.112" starttime="20161202 21:42:36.110" status="PASS"></status>
</kw>
<status endtime="20161202 21:42:36.112" starttime="20161202 21:42:36.107" status="PASS"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161202 21:42:36.113">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20161202 21:42:36.113" starttime="20161202 21:42:36.113" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161202 21:42:36.114">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20161202 21:42:36.114" starttime="20161202 21:42:36.113" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161202 21:42:36.114">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20161202 21:42:36.114" starttime="20161202 21:42:36.114" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161202 21:42:36.115">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20161202 21:42:36.115" starttime="20161202 21:42:36.114" status="PASS"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161202 21:42:36.450">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161202 21:42:36.450">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161202 21:42:36.450" starttime="20161202 21:42:36.115" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161202 21:42:36.451">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20161202 21:42:36.451" starttime="20161202 21:42:36.450" status="PASS"></status>
</kw>
<status endtime="20161202 21:42:36.451" starttime="20161202 21:42:36.112" status="PASS"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161202 21:42:36.741">Post Request using : alias=openbmc, uri=/org/openbmc/records/events/action/acceptTestMessage, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161202 21:42:36.741">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20161202 21:42:36.742" starttime="20161202 21:42:36.451" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161202 21:42:36.749">${msg} = Response code:200, Content:{
  "data": 166, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20161202 21:42:36.749" starttime="20161202 21:42:36.748" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161202 21:42:36.750">Response code:200, Content:{
  "data": 166, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20161202 21:42:36.750" starttime="20161202 21:42:36.750" status="PASS"></status>
</kw>
<status endtime="20161202 21:42:36.750" starttime="20161202 21:42:36.749" status="PASS"></status>
</kw>
<status endtime="20161202 21:42:36.750" starttime="20161202 21:42:36.747" status="PASS"></status>
</kw>
<status endtime="20161202 21:42:36.751" starttime="20161202 21:42:36.742" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20161202 21:42:36.751">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161202 21:42:36.751" starttime="20161202 21:42:36.105" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161202 21:42:36.751">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20161202 21:42:36.751" starttime="20161202 21:42:36.751" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${json}</var>
</assign>
<msg level="INFO" timestamp="20161202 21:42:36.752">To JSON using : content={
  "data": 166, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161202 21:42:36.752">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161202 21:42:36.752">${json} = {u'message': u'200 OK', u'status': u'ok', u'data': 166}</msg>
<status endtime="20161202 21:42:36.752" starttime="20161202 21:42:36.751" status="PASS"></status>
</kw>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${json['data']}</arg>
</arguments>
<assign>
<var>${LOGID}</var>
</assign>
<msg level="INFO" timestamp="20161202 21:42:36.752">${LOGID} = 166</msg>
<status endtime="20161202 21:42:36.753" starttime="20161202 21:42:36.752" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>/org/openbmc/records/events/</arg>
<arg>${LOGID}</arg>
</arguments>
<assign>
<var>${uri}</var>
</assign>
<msg level="INFO" timestamp="20161202 21:42:36.753">${uri} = /org/openbmc/records/events/166</msg>
<status endtime="20161202 21:42:36.753" starttime="20161202 21:42:36.753" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20161202 21:42:36.753">${log_uri1} = /org/openbmc/records/events/166</msg>
<status endtime="20161202 21:42:36.753" starttime="20161202 21:42:36.104" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${log_uri1}</arg>
<arg>/fru</arg>
</arguments>
<assign>
<var>${association_uri1}</var>
</assign>
<msg level="INFO" timestamp="20161202 21:42:36.754">${association_uri1} = /org/openbmc/records/events/166/fru</msg>
<status endtime="20161202 21:42:36.754" starttime="20161202 21:42:36.753" status="PASS"></status>
</kw>
<kw name="Create a test log">
<assign>
<var>${log_uri2}</var>
</assign>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{EMPTY}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161202 21:42:36.754">${data} = {u'data': []}</msg>
<status endtime="20161202 21:42:36.755" starttime="20161202 21:42:36.754" status="PASS"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>/org/openbmc/records/events/action/acceptTestMessage</arg>
<arg>data=${data}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161202 21:42:36.755">${base_uri} = /org/openbmc/records/events/action/acceptTestMessage</msg>
<status endtime="20161202 21:42:36.756" starttime="20161202 21:42:36.755" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161202 21:42:36.756">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20161202 21:42:36.756" starttime="20161202 21:42:36.756" status="PASS"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status endtime="20161202 21:42:36.757" starttime="20161202 21:42:36.756" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161202 21:42:36.761">${msg} = URI:https://9.3.23.30:443/org/openbmc/records/events/action/acceptTestMessage, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status endtime="20161202 21:42:36.761" starttime="20161202 21:42:36.760" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161202 21:42:36.762">URI:https://9.3.23.30:443/org/openbmc/records/events/action/acceptTestMessage, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status endtime="20161202 21:42:36.762" starttime="20161202 21:42:36.762" status="PASS"></status>
</kw>
<status endtime="20161202 21:42:36.762" starttime="20161202 21:42:36.761" status="PASS"></status>
</kw>
<status endtime="20161202 21:42:36.762" starttime="20161202 21:42:36.760" status="PASS"></status>
</kw>
<status endtime="20161202 21:42:36.762" starttime="20161202 21:42:36.757" status="PASS"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161202 21:42:36.763">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20161202 21:42:36.763" starttime="20161202 21:42:36.763" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161202 21:42:36.764">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20161202 21:42:36.764" starttime="20161202 21:42:36.764" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161202 21:42:36.764">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20161202 21:42:36.764" starttime="20161202 21:42:36.764" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161202 21:42:36.765">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20161202 21:42:36.765" starttime="20161202 21:42:36.765" status="PASS"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161202 21:42:37.183">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161202 21:42:37.183">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161202 21:42:37.183" starttime="20161202 21:42:36.765" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161202 21:42:37.184">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20161202 21:42:37.184" starttime="20161202 21:42:37.183" status="PASS"></status>
</kw>
<status endtime="20161202 21:42:37.184" starttime="20161202 21:42:36.762" status="PASS"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161202 21:42:37.486">Post Request using : alias=openbmc, uri=/org/openbmc/records/events/action/acceptTestMessage, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161202 21:42:37.486">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20161202 21:42:37.486" starttime="20161202 21:42:37.184" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161202 21:42:37.491">${msg} = Response code:200, Content:{
  "data": 167, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20161202 21:42:37.491" starttime="20161202 21:42:37.490" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161202 21:42:37.492">Response code:200, Content:{
  "data": 167, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20161202 21:42:37.492" starttime="20161202 21:42:37.492" status="PASS"></status>
</kw>
<status endtime="20161202 21:42:37.492" starttime="20161202 21:42:37.491" status="PASS"></status>
</kw>
<status endtime="20161202 21:42:37.493" starttime="20161202 21:42:37.489" status="PASS"></status>
</kw>
<status endtime="20161202 21:42:37.493" starttime="20161202 21:42:37.486" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20161202 21:42:37.493">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161202 21:42:37.493" starttime="20161202 21:42:36.755" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161202 21:42:37.494">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20161202 21:42:37.494" starttime="20161202 21:42:37.493" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${json}</var>
</assign>
<msg level="INFO" timestamp="20161202 21:42:37.495">To JSON using : content={
  "data": 167, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161202 21:42:37.495">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161202 21:42:37.495">${json} = {u'message': u'200 OK', u'status': u'ok', u'data': 167}</msg>
<status endtime="20161202 21:42:37.495" starttime="20161202 21:42:37.494" status="PASS"></status>
</kw>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${json['data']}</arg>
</arguments>
<assign>
<var>${LOGID}</var>
</assign>
<msg level="INFO" timestamp="20161202 21:42:37.496">${LOGID} = 167</msg>
<status endtime="20161202 21:42:37.496" starttime="20161202 21:42:37.496" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>/org/openbmc/records/events/</arg>
<arg>${LOGID}</arg>
</arguments>
<assign>
<var>${uri}</var>
</assign>
<msg level="INFO" timestamp="20161202 21:42:37.497">${uri} = /org/openbmc/records/events/167</msg>
<status endtime="20161202 21:42:37.497" starttime="20161202 21:42:37.497" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20161202 21:42:37.497">${log_uri2} = /org/openbmc/records/events/167</msg>
<status endtime="20161202 21:42:37.497" starttime="20161202 21:42:36.754" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${log_uri1}</arg>
<arg>/action/delete</arg>
</arguments>
<assign>
<var>${del_uri}</var>
</assign>
<msg level="INFO" timestamp="20161202 21:42:37.498">${del_uri} = /org/openbmc/records/events/166/action/delete</msg>
<status endtime="20161202 21:42:37.498" starttime="20161202 21:42:37.498" status="PASS"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${del_uri}</arg>
<arg>data=${NIL}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161202 21:42:37.500">${base_uri} = /org/openbmc/records/events/166/action/delete</msg>
<status endtime="20161202 21:42:37.500" starttime="20161202 21:42:37.500" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161202 21:42:37.501">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20161202 21:42:37.501" starttime="20161202 21:42:37.500" status="PASS"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status endtime="20161202 21:42:37.501" starttime="20161202 21:42:37.501" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161202 21:42:37.506">${msg} = URI:https://9.3.23.30:443/org/openbmc/records/events/166/action/delete, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status endtime="20161202 21:42:37.506" starttime="20161202 21:42:37.505" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161202 21:42:37.506">URI:https://9.3.23.30:443/org/openbmc/records/events/166/action/delete, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status endtime="20161202 21:42:37.506" starttime="20161202 21:42:37.506" status="PASS"></status>
</kw>
<status endtime="20161202 21:42:37.507" starttime="20161202 21:42:37.506" status="PASS"></status>
</kw>
<status endtime="20161202 21:42:37.507" starttime="20161202 21:42:37.504" status="PASS"></status>
</kw>
<status endtime="20161202 21:42:37.507" starttime="20161202 21:42:37.502" status="PASS"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161202 21:42:37.507">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20161202 21:42:37.508" starttime="20161202 21:42:37.507" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161202 21:42:37.508">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20161202 21:42:37.508" starttime="20161202 21:42:37.508" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161202 21:42:37.509">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20161202 21:42:37.509" starttime="20161202 21:42:37.509" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161202 21:42:37.509">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20161202 21:42:37.510" starttime="20161202 21:42:37.509" status="PASS"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161202 21:42:37.885">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161202 21:42:37.885">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161202 21:42:37.885" starttime="20161202 21:42:37.510" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161202 21:42:37.886">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20161202 21:42:37.886" starttime="20161202 21:42:37.886" status="PASS"></status>
</kw>
<status endtime="20161202 21:42:37.886" starttime="20161202 21:42:37.507" status="PASS"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161202 21:42:38.109">Post Request using : alias=openbmc, uri=/org/openbmc/records/events/166/action/delete, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161202 21:42:38.109">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20161202 21:42:38.109" starttime="20161202 21:42:37.886" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161202 21:42:38.114">${msg} = Response code:200, Content:{
  "data": 0, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20161202 21:42:38.114" starttime="20161202 21:42:38.113" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161202 21:42:38.114">Response code:200, Content:{
  "data": 0, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20161202 21:42:38.115" starttime="20161202 21:42:38.114" status="PASS"></status>
</kw>
<status endtime="20161202 21:42:38.115" starttime="20161202 21:42:38.114" status="PASS"></status>
</kw>
<status endtime="20161202 21:42:38.115" starttime="20161202 21:42:38.113" status="PASS"></status>
</kw>
<status endtime="20161202 21:42:38.115" starttime="20161202 21:42:38.110" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20161202 21:42:38.115">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161202 21:42:38.115" starttime="20161202 21:42:37.499" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161202 21:42:38.116">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20161202 21:42:38.116" starttime="20161202 21:42:38.115" status="PASS"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${association_uri1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161202 21:42:38.117">${base_uri} = /org/openbmc/records/events/166/fru</msg>
<status endtime="20161202 21:42:38.117" starttime="20161202 21:42:38.116" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161202 21:42:38.121">${msg} = URI:https://9.3.23.30:443/org/openbmc/records/events/166/fru, method:Get, args:{}</msg>
<status endtime="20161202 21:42:38.121" starttime="20161202 21:42:38.120" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161202 21:42:38.122">URI:https://9.3.23.30:443/org/openbmc/records/events/166/fru, method:Get, args:{}</msg>
<status endtime="20161202 21:42:38.122" starttime="20161202 21:42:38.121" status="PASS"></status>
</kw>
<status endtime="20161202 21:42:38.122" starttime="20161202 21:42:38.121" status="PASS"></status>
</kw>
<status endtime="20161202 21:42:38.122" starttime="20161202 21:42:38.120" status="PASS"></status>
</kw>
<status endtime="20161202 21:42:38.122" starttime="20161202 21:42:38.117" status="PASS"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161202 21:42:38.123">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20161202 21:42:38.123" starttime="20161202 21:42:38.123" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161202 21:42:38.124">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20161202 21:42:38.124" starttime="20161202 21:42:38.124" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161202 21:42:38.124">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20161202 21:42:38.124" starttime="20161202 21:42:38.124" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161202 21:42:38.125">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20161202 21:42:38.125" starttime="20161202 21:42:38.125" status="PASS"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161202 21:42:38.685">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161202 21:42:38.686">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161202 21:42:38.686" starttime="20161202 21:42:38.125" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161202 21:42:38.687">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20161202 21:42:38.687" starttime="20161202 21:42:38.686" status="PASS"></status>
</kw>
<status endtime="20161202 21:42:38.687" starttime="20161202 21:42:38.122" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161202 21:42:38.854">Get Request using : alias=openbmc, uri=/org/openbmc/records/events/166/fru, headers=None </msg>
<msg level="INFO" timestamp="20161202 21:42:38.854">${ret} = &lt;Response [404]&gt;</msg>
<status endtime="20161202 21:42:38.854" starttime="20161202 21:42:38.688" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161202 21:42:38.861">${msg} = Response code:404, Content:{
  "data": {
    "description": "org.freedesktop.DBus.Error.FileNotFound: path or object not found: /org/openbmc/records/events/166/fru"
  }, 
  "message": "404 Not Found",...</msg>
<status endtime="20161202 21:42:38.861" starttime="20161202 21:42:38.860" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161202 21:42:38.863">Response code:404, Content:{
  "data": {
    "description": "org.freedesktop.DBus.Error.FileNotFound: path or object not found: /org/openbmc/records/events/166/fru"
  }, 
  "message": "404 Not Found", 
  "status": "error"
}</msg>
<status endtime="20161202 21:42:38.863" starttime="20161202 21:42:38.862" status="PASS"></status>
</kw>
<status endtime="20161202 21:42:38.863" starttime="20161202 21:42:38.861" status="PASS"></status>
</kw>
<status endtime="20161202 21:42:38.863" starttime="20161202 21:42:38.860" status="PASS"></status>
</kw>
<status endtime="20161202 21:42:38.863" starttime="20161202 21:42:38.855" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20161202 21:42:38.864">${resp} = &lt;Response [404]&gt;</msg>
<status endtime="20161202 21:42:38.864" starttime="20161202 21:42:38.116" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg level="INFO" timestamp="20161202 21:42:38.864">To JSON using : content={
  "data": {
    "description": "org.freedesktop.DBus.Error.FileNotFound: path or object not found: /org/openbmc/records/events/166/fru"
  }, 
  "message": "404 Not Found", 
  "status": "error"
} </msg>
<msg level="INFO" timestamp="20161202 21:42:38.865">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161202 21:42:38.865">${jsondata} = {u'message': u'404 Not Found', u'status': u'error', u'data': {u'description': u'org.freedesktop.DBus.Error.FileNotFound: path or object not found: /org/openbmc/records/events/166/fru'}}</msg>
<status endtime="20161202 21:42:38.865" starttime="20161202 21:42:38.864" status="PASS"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${jsondata['message']}</arg>
<arg>404 Not Found</arg>
</arguments>
<status endtime="20161202 21:42:38.866" starttime="20161202 21:42:38.865" status="PASS"></status>
</kw>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${DIMM3_URI}/event</arg>
<arg>endpoints</arg>
</arguments>
<assign>
<var>${dimm3_event}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161202 21:42:38.868">${base_uri} = /org/openbmc/inventory/system/chassis/motherboard/dimm3/event/attr/endpoints</msg>
<status endtime="20161202 21:42:38.868" starttime="20161202 21:42:38.868" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161202 21:42:38.875">${msg} = URI:https://9.3.23.30:443/org/openbmc/inventory/system/chassis/motherboard/dimm3/event/attr/endpoints, method:Get, args:{}</msg>
<status endtime="20161202 21:42:38.875" starttime="20161202 21:42:38.874" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161202 21:42:38.876">URI:https://9.3.23.30:443/org/openbmc/inventory/system/chassis/motherboard/dimm3/event/attr/endpoints, method:Get, args:{}</msg>
<status endtime="20161202 21:42:38.876" starttime="20161202 21:42:38.875" status="PASS"></status>
</kw>
<status endtime="20161202 21:42:38.876" starttime="20161202 21:42:38.875" status="PASS"></status>
</kw>
<status endtime="20161202 21:42:38.876" starttime="20161202 21:42:38.873" status="PASS"></status>
</kw>
<status endtime="20161202 21:42:38.876" starttime="20161202 21:42:38.869" status="PASS"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161202 21:42:38.877">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20161202 21:42:38.878" starttime="20161202 21:42:38.877" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161202 21:42:38.878">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20161202 21:42:38.878" starttime="20161202 21:42:38.878" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161202 21:42:38.879">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20161202 21:42:38.879" starttime="20161202 21:42:38.878" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161202 21:42:38.879">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20161202 21:42:38.879" starttime="20161202 21:42:38.879" status="PASS"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161202 21:42:39.559">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161202 21:42:39.559">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161202 21:42:39.559" starttime="20161202 21:42:38.879" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161202 21:42:39.560">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20161202 21:42:39.560" starttime="20161202 21:42:39.560" status="PASS"></status>
</kw>
<status endtime="20161202 21:42:39.561" starttime="20161202 21:42:38.876" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161202 21:42:39.802">Get Request using : alias=openbmc, uri=/org/openbmc/inventory/system/chassis/motherboard/dimm3/event/attr/endpoints, headers=None </msg>
<msg level="INFO" timestamp="20161202 21:42:39.802">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20161202 21:42:39.802" starttime="20161202 21:42:39.561" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161202 21:42:39.809">${msg} = Response code:200, Content:{
  "data": [
    "/org/openbmc/records/events/167"
  ], 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20161202 21:42:39.810" starttime="20161202 21:42:39.808" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161202 21:42:39.811">Response code:200, Content:{
  "data": [
    "/org/openbmc/records/events/167"
  ], 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20161202 21:42:39.811" starttime="20161202 21:42:39.811" status="PASS"></status>
</kw>
<status endtime="20161202 21:42:39.811" starttime="20161202 21:42:39.810" status="PASS"></status>
</kw>
<status endtime="20161202 21:42:39.811" starttime="20161202 21:42:39.808" status="PASS"></status>
</kw>
<status endtime="20161202 21:42:39.812" starttime="20161202 21:42:39.803" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20161202 21:42:39.812">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161202 21:42:39.812" starttime="20161202 21:42:38.867" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161202 21:42:39.813">To JSON using : content={
  "data": [
    "/org/openbmc/records/events/167"
  ], 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161202 21:42:39.813">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161202 21:42:39.813">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': [u'/org/openbmc/records/events/167']}</msg>
<status endtime="20161202 21:42:39.813" starttime="20161202 21:42:39.812" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20161202 21:42:39.813">${dimm3_event} = [u'/org/openbmc/records/events/167']</msg>
<status endtime="20161202 21:42:39.814" starttime="20161202 21:42:38.866" status="PASS"></status>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<arguments>
<arg>${dimm3_event}</arg>
<arg>${log_uri1}</arg>
</arguments>
<status endtime="20161202 21:42:39.814" starttime="20161202 21:42:39.814" status="PASS"></status>
</kw>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${DIMM2_URI}/event</arg>
<arg>endpoints</arg>
</arguments>
<assign>
<var>${dimm2_event}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161202 21:42:39.817">${base_uri} = /org/openbmc/inventory/system/chassis/motherboard/dimm2/event/attr/endpoints</msg>
<status endtime="20161202 21:42:39.817" starttime="20161202 21:42:39.816" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161202 21:42:39.823">${msg} = URI:https://9.3.23.30:443/org/openbmc/inventory/system/chassis/motherboard/dimm2/event/attr/endpoints, method:Get, args:{}</msg>
<status endtime="20161202 21:42:39.823" starttime="20161202 21:42:39.822" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161202 21:42:39.824">URI:https://9.3.23.30:443/org/openbmc/inventory/system/chassis/motherboard/dimm2/event/attr/endpoints, method:Get, args:{}</msg>
<status endtime="20161202 21:42:39.824" starttime="20161202 21:42:39.823" status="PASS"></status>
</kw>
<status endtime="20161202 21:42:39.824" starttime="20161202 21:42:39.823" status="PASS"></status>
</kw>
<status endtime="20161202 21:42:39.824" starttime="20161202 21:42:39.821" status="PASS"></status>
</kw>
<status endtime="20161202 21:42:39.824" starttime="20161202 21:42:39.817" status="PASS"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161202 21:42:39.825">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20161202 21:42:39.826" starttime="20161202 21:42:39.824" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161202 21:42:39.827">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20161202 21:42:39.827" starttime="20161202 21:42:39.827" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161202 21:42:39.827">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20161202 21:42:39.827" starttime="20161202 21:42:39.827" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161202 21:42:39.828">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20161202 21:42:39.828" starttime="20161202 21:42:39.828" status="PASS"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161202 21:42:40.310">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161202 21:42:40.311">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161202 21:42:40.311" starttime="20161202 21:42:39.828" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161202 21:42:40.311">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20161202 21:42:40.311" starttime="20161202 21:42:40.311" status="PASS"></status>
</kw>
<status endtime="20161202 21:42:40.311" starttime="20161202 21:42:39.824" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161202 21:42:40.389">Get Request using : alias=openbmc, uri=/org/openbmc/inventory/system/chassis/motherboard/dimm2/event/attr/endpoints, headers=None </msg>
<msg level="INFO" timestamp="20161202 21:42:40.390">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20161202 21:42:40.390" starttime="20161202 21:42:40.312" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161202 21:42:40.394">${msg} = Response code:200, Content:{
  "data": [
    "/org/openbmc/records/events/167"
  ], 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20161202 21:42:40.394" starttime="20161202 21:42:40.393" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161202 21:42:40.395">Response code:200, Content:{
  "data": [
    "/org/openbmc/records/events/167"
  ], 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20161202 21:42:40.395" starttime="20161202 21:42:40.394" status="PASS"></status>
</kw>
<status endtime="20161202 21:42:40.395" starttime="20161202 21:42:40.394" status="PASS"></status>
</kw>
<status endtime="20161202 21:42:40.395" starttime="20161202 21:42:40.393" status="PASS"></status>
</kw>
<status endtime="20161202 21:42:40.395" starttime="20161202 21:42:40.390" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20161202 21:42:40.395">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161202 21:42:40.395" starttime="20161202 21:42:39.815" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161202 21:42:40.396">To JSON using : content={
  "data": [
    "/org/openbmc/records/events/167"
  ], 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161202 21:42:40.396">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161202 21:42:40.396">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': [u'/org/openbmc/records/events/167']}</msg>
<status endtime="20161202 21:42:40.396" starttime="20161202 21:42:40.395" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20161202 21:42:40.396">${dimm2_event} = [u'/org/openbmc/records/events/167']</msg>
<status endtime="20161202 21:42:40.396" starttime="20161202 21:42:39.815" status="PASS"></status>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<arguments>
<arg>${dimm2_event}</arg>
<arg>${log_uri1}</arg>
</arguments>
<status endtime="20161202 21:42:40.397" starttime="20161202 21:42:40.396" status="PASS"></status>
</kw>
<kw name="FFDC On Test Case Fail" library="openbmc_ffdc" type="teardown">
<doc>Generic FFDC entry point. Place holder to hook in</doc>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${TEST_STATUS}' == 'FAIL'</arg>
<arg>FFDC</arg>
</arguments>
<status endtime="20161202 21:42:40.400" starttime="20161202 21:42:40.397" status="PASS"></status>
</kw>
<kw name="Log Test Case Status" library="openbmc_ffdc_methods">
<doc>Test case execution result history.</doc>
<kw name="Create Directory" library="OperatingSystem">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>${FFDC_LOG_PATH}</arg>
</arguments>
<msg level="INFO" timestamp="20161202 21:42:40.401" html="yes">Directory '&lt;a href="file:///tmp/root/11941/obmc-robot/logs"&gt;/tmp/root/11941/obmc-robot/logs&lt;/a&gt;' already exists.</msg>
<status endtime="20161202 21:42:40.401" starttime="20161202 21:42:40.400" status="PASS"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>OperatingSystem.File Should Exist</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<assign>
<var>${exist}</var>
</assign>
<kw name="File Should Exist" library="OperatingSystem">
<doc>Fails unless the given ``path`` points to an existing file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
</arguments>
<msg level="INFO" timestamp="20161202 21:42:40.402" html="yes">File '&lt;a href="file:///tmp/root/11941/obmc-robot/logs/test_history.txt"&gt;/tmp/root/11941/obmc-robot/logs/test_history.txt&lt;/a&gt;' exists.</msg>
<status endtime="20161202 21:42:40.402" starttime="20161202 21:42:40.401" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20161202 21:42:40.402">${exist} = True</msg>
<status endtime="20161202 21:42:40.402" starttime="20161202 21:42:40.401" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${exist}' == '${False}'</arg>
<arg>Create File</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<status endtime="20161202 21:42:40.405" starttime="20161202 21:42:40.402" status="PASS"></status>
</kw>
<kw name="Get Current Time Stamp" library="openbmc_ffdc_utils">
<doc>Get the current time stamp data</doc>
<assign>
<var>${cur_time}</var>
</assign>
<kw name="Get Current Date" library="DateTime">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20161202 21:42:40.405">${cur_time} = 2016-12-02 21:42:40:405305</msg>
<status endtime="20161202 21:42:40.405" starttime="20161202 21:42:40.405" status="PASS"></status>
</kw>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20161202 21:42:40.406">${cur_time} = 20161202214240405305</msg>
<status endtime="20161202 21:42:40.406" starttime="20161202 21:42:40.406" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20161202 21:42:40.406">${cur_time} = 20161202214240405305</msg>
<status endtime="20161202 21:42:40.406" starttime="20161202 21:42:40.405" status="PASS"></status>
</kw>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
<arg>${cur_time}:${SUITE_NAME}:${TEST_NAME}:${TEST_STATUS}${\n}</arg>
</arguments>
<msg level="INFO" timestamp="20161202 21:42:40.407" html="yes">Appended to file '&lt;a href="file:///tmp/root/11941/obmc-robot/logs/test_history.txt"&gt;/tmp/root/11941/obmc-robot/logs/test_history.txt&lt;/a&gt;'.</msg>
<status endtime="20161202 21:42:40.407" starttime="20161202 21:42:40.406" status="PASS"></status>
</kw>
<status endtime="20161202 21:42:40.407" starttime="20161202 21:42:40.400" status="PASS"></status>
</kw>
<status endtime="20161202 21:42:40.407" starttime="20161202 21:42:40.397" status="PASS"></status>
</kw>
<doc>***BAD PATH***
Delete an error log and verify that its
association is also removed.
</doc>
<tags>
<tag>Delete_error_log</tag>
</tags>
<status endtime="20161202 21:42:40.407" starttime="20161202 21:42:36.103" status="PASS" critical="yes"></status>
</test>
<kw name="Close All Connections" library="SSHLibrary" type="teardown">
<doc>Closes all open connections.</doc>
<status endtime="20161202 21:42:40.416" starttime="20161202 21:42:40.408" status="PASS"></status>
</kw>
<doc>This suite is used for testing eventlog association.</doc>
<status endtime="20161202 21:42:40.416" starttime="20161202 21:42:28.739" status="PASS"></status>
</suite>
<suite name="Test Basic Poweron" id="s1-s3" source="/tmp/root/11941/obmc-robot/tests/test_basic_poweron.robot">
<test name="power on test" id="s1-s3-t1">
<kw name="Start SOL Console Logging" library="utils" type="setup">
<doc>Start logging to a file in /tmp so that it can</doc>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg level="FAIL" timestamp="20161202 21:42:40.441">Dictionary does not contain key 'host'.</msg>
<status endtime="20161202 21:42:40.441" starttime="20161202 21:42:40.441" status="FAIL"></status>
</kw>
<msg level="INFO" timestamp="20161202 21:42:40.441">${has_host} = False</msg>
<status endtime="20161202 21:42:40.442" starttime="20161202 21:42:40.441" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status endtime="20161202 21:42:40.445" starttime="20161202 21:42:40.445" status="PASS"></status>
</kw>
<status endtime="20161202 21:42:40.445" starttime="20161202 21:42:40.442" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<kw name="User input SSH and HTTPs Ports" library="connection_client">
<doc>Update the global SSH and HTTPs port variable for QEMU</doc>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${SSH_PORT}</arg>
</arguments>
<assign>
<var>${port_num}</var>
</assign>
<msg level="INFO" timestamp="20161202 21:42:40.449">${port_num} = 22</msg>
<status endtime="20161202 21:42:40.449" starttime="20161202 21:42:40.449" status="PASS"></status>
</kw>
<kw name="Replace Variables" library="BuiltIn">
<doc>Replaces variables in the given text with their current values.</doc>
<arguments>
<arg>${port_num}</arg>
</arguments>
<assign>
<var>${SSH_PORT}</var>
</assign>
<msg level="INFO" timestamp="20161202 21:42:40.450">${SSH_PORT} = 22</msg>
<status endtime="20161202 21:42:40.450" starttime="20161202 21:42:40.449" status="PASS"></status>
</kw>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${HTTPS_PORT}</arg>
</arguments>
<assign>
<var>${https_num}</var>
</assign>
<msg level="INFO" timestamp="20161202 21:42:40.450">${https_num} = 443</msg>
<status endtime="20161202 21:42:40.450" starttime="20161202 21:42:40.450" status="PASS"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${AUTH_URI}</arg>
<arg>https://${OPENBMC_HOST}:${https_num}</arg>
</arguments>
<msg level="INFO" timestamp="20161202 21:42:40.451">${AUTH_URI} = https://9.3.23.30:443</msg>
<status endtime="20161202 21:42:40.451" starttime="20161202 21:42:40.450" status="PASS"></status>
</kw>
<status endtime="20161202 21:42:40.451" starttime="20161202 21:42:40.448" status="PASS"></status>
</kw>
<status endtime="20161202 21:42:40.451" starttime="20161202 21:42:40.445" status="PASS"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg level="FAIL" timestamp="20161202 21:42:40.452">Dictionary does not contain key 'port'.</msg>
<status endtime="20161202 21:42:40.452" starttime="20161202 21:42:40.452" status="FAIL"></status>
</kw>
<msg level="INFO" timestamp="20161202 21:42:40.453">${has_port} = False</msg>
<status endtime="20161202 21:42:40.453" starttime="20161202 21:42:40.452" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keywords" library="BuiltIn">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
</arguments>
<status endtime="20161202 21:42:40.456" starttime="20161202 21:42:40.456" status="PASS"></status>
</kw>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status endtime="20161202 21:42:40.457" starttime="20161202 21:42:40.457" status="PASS"></status>
</kw>
<status endtime="20161202 21:42:40.457" starttime="20161202 21:42:40.456" status="PASS"></status>
</kw>
<status endtime="20161202 21:42:40.457" starttime="20161202 21:42:40.453" status="PASS"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg level="INFO" timestamp="20161202 21:42:40.458">Logging into '9.3.23.30:22' as 'root'.</msg>
<msg level="INFO" timestamp="20161202 21:42:42.840">Read output: 7[r[999;999H[6n</msg>
<status endtime="20161202 21:42:42.841" starttime="20161202 21:42:40.457" status="PASS"></status>
</kw>
<status endtime="20161202 21:42:42.841" starttime="20161202 21:42:40.440" status="PASS"></status>
</kw>
<kw name="Get Time Stamp" library="utils">
<doc>Get the current time stamp data</doc>
<assign>
<var>${cur_time}</var>
</assign>
<kw name="Get Current Date" library="DateTime">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y%m%d%H%M%S%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20161202 21:42:42.843">${cur_time} = 20161202214242842453</msg>
<status endtime="20161202 21:42:42.843" starttime="20161202 21:42:42.842" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20161202 21:42:42.843">${cur_time} = 20161202214242842453</msg>
<status endtime="20161202 21:42:42.843" starttime="20161202 21:42:42.841" status="PASS"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${LOG_TIME}</arg>
<arg>${cur_time}</arg>
</arguments>
<msg level="INFO" timestamp="20161202 21:42:42.848">${LOG_TIME} = 20161202214242842453</msg>
<status endtime="20161202 21:42:42.848" starttime="20161202 21:42:42.844" status="PASS"></status>
</kw>
<kw name="Start Command" library="SSHLibrary">
<doc>Starts execution of the `command` on the remote machine and returns immediately.</doc>
<arguments>
<arg>obmc-console-client &gt; ${file_path}-${LOG_TIME}_$$</arg>
</arguments>
<msg level="INFO" timestamp="20161202 21:42:42.849">Starting command 'obmc-console-client &gt; /tmp/obmc-console.log-20161202214242842453_$$'.</msg>
<status endtime="20161202 21:42:42.857" starttime="20161202 21:42:42.849" status="PASS"></status>
</kw>
<status endtime="20161202 21:42:42.857" starttime="20161202 21:42:40.440" status="PASS"></status>
</kw>
<kw name="BMC Power Off" library="poweroffs">
<doc>Powers off the system and makes sure that all states are</doc>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg level="FAIL" timestamp="20161202 21:42:42.859">Dictionary does not contain key 'host'.</msg>
<status endtime="20161202 21:42:42.859" starttime="20161202 21:42:42.859" status="FAIL"></status>
</kw>
<msg level="INFO" timestamp="20161202 21:42:42.859">${has_host} = False</msg>
<status endtime="20161202 21:42:42.859" starttime="20161202 21:42:42.858" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status endtime="20161202 21:42:42.864" starttime="20161202 21:42:42.863" status="PASS"></status>
</kw>
<status endtime="20161202 21:42:42.864" starttime="20161202 21:42:42.859" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<kw name="User input SSH and HTTPs Ports" library="connection_client">
<doc>Update the global SSH and HTTPs port variable for QEMU</doc>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${SSH_PORT}</arg>
</arguments>
<assign>
<var>${port_num}</var>
</assign>
<msg level="INFO" timestamp="20161202 21:42:42.869">${port_num} = 22</msg>
<status endtime="20161202 21:42:42.869" starttime="20161202 21:42:42.869" status="PASS"></status>
</kw>
<kw name="Replace Variables" library="BuiltIn">
<doc>Replaces variables in the given text with their current values.</doc>
<arguments>
<arg>${port_num}</arg>
</arguments>
<assign>
<var>${SSH_PORT}</var>
</assign>
<msg level="INFO" timestamp="20161202 21:42:42.870">${SSH_PORT} = 22</msg>
<status endtime="20161202 21:42:42.870" starttime="20161202 21:42:42.870" status="PASS"></status>
</kw>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${HTTPS_PORT}</arg>
</arguments>
<assign>
<var>${https_num}</var>
</assign>
<msg level="INFO" timestamp="20161202 21:42:42.870">${https_num} = 443</msg>
<status endtime="20161202 21:42:42.870" starttime="20161202 21:42:42.870" status="PASS"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${AUTH_URI}</arg>
<arg>https://${OPENBMC_HOST}:${https_num}</arg>
</arguments>
<msg level="INFO" timestamp="20161202 21:42:42.871">${AUTH_URI} = https://9.3.23.30:443</msg>
<status endtime="20161202 21:42:42.871" starttime="20161202 21:42:42.871" status="PASS"></status>
</kw>
<status endtime="20161202 21:42:42.871" starttime="20161202 21:42:42.868" status="PASS"></status>
</kw>
<status endtime="20161202 21:42:42.871" starttime="20161202 21:42:42.864" status="PASS"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg level="FAIL" timestamp="20161202 21:42:42.872">Dictionary does not contain key 'port'.</msg>
<status endtime="20161202 21:42:42.872" starttime="20161202 21:42:42.872" status="FAIL"></status>
</kw>
<msg level="INFO" timestamp="20161202 21:42:42.872">${has_port} = False</msg>
<status endtime="20161202 21:42:42.872" starttime="20161202 21:42:42.871" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keywords" library="BuiltIn">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
</arguments>
<status endtime="20161202 21:42:42.876" starttime="20161202 21:42:42.876" status="PASS"></status>
</kw>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status endtime="20161202 21:42:42.877" starttime="20161202 21:42:42.876" status="PASS"></status>
</kw>
<status endtime="20161202 21:42:42.877" starttime="20161202 21:42:42.875" status="PASS"></status>
</kw>
<status endtime="20161202 21:42:42.877" starttime="20161202 21:42:42.872" status="PASS"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg level="INFO" timestamp="20161202 21:42:42.877">Logging into '9.3.23.30:22' as 'root'.</msg>
<msg level="INFO" timestamp="20161202 21:42:45.231">Read output: 7[r[999;999H[6n</msg>
<status endtime="20161202 21:42:45.232" starttime="20161202 21:42:42.877" status="PASS"></status>
</kw>
<status endtime="20161202 21:42:45.232" starttime="20161202 21:42:42.858" status="PASS"></status>
</kw>
<kw name="Initiate Power Off" library="utils">
<doc>Initiates the power off and waits until the Is Power Off</doc>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161202 21:42:45.233">@{arglist} = [ ]</msg>
<status endtime="20161202 21:42:45.233" starttime="20161202 21:42:45.233" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161202 21:42:45.234">${args} = {u'data': []}</msg>
<status endtime="20161202 21:42:45.234" starttime="20161202 21:42:45.234" status="PASS"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}control/chassis0/</arg>
<arg>powerOff</arg>
<arg>data=${args}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161202 21:42:45.236">${base_uri} = /org/openbmc/control/chassis0/</msg>
<status endtime="20161202 21:42:45.236" starttime="20161202 21:42:45.236" status="PASS"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161202 21:42:45.239">${base_uri} = /org/openbmc/control/chassis0//action/powerOff</msg>
<status endtime="20161202 21:42:45.239" starttime="20161202 21:42:45.238" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161202 21:42:45.240">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20161202 21:42:45.240" starttime="20161202 21:42:45.239" status="PASS"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status endtime="20161202 21:42:45.241" starttime="20161202 21:42:45.240" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161202 21:42:45.247">${msg} = URI:https://9.3.23.30:443/org/openbmc/control/chassis0//action/powerOff, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status endtime="20161202 21:42:45.247" starttime="20161202 21:42:45.246" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161202 21:42:45.248">URI:https://9.3.23.30:443/org/openbmc/control/chassis0//action/powerOff, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status endtime="20161202 21:42:45.248" starttime="20161202 21:42:45.248" status="PASS"></status>
</kw>
<status endtime="20161202 21:42:45.248" starttime="20161202 21:42:45.247" status="PASS"></status>
</kw>
<status endtime="20161202 21:42:45.249" starttime="20161202 21:42:45.245" status="PASS"></status>
</kw>
<status endtime="20161202 21:42:45.249" starttime="20161202 21:42:45.241" status="PASS"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161202 21:42:45.250">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20161202 21:42:45.250" starttime="20161202 21:42:45.250" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161202 21:42:45.251">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20161202 21:42:45.251" starttime="20161202 21:42:45.250" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161202 21:42:45.251">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20161202 21:42:45.251" starttime="20161202 21:42:45.251" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161202 21:42:45.252">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20161202 21:42:45.252" starttime="20161202 21:42:45.252" status="PASS"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161202 21:42:45.581">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161202 21:42:45.581">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161202 21:42:45.581" starttime="20161202 21:42:45.252" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161202 21:42:45.582">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20161202 21:42:45.583" starttime="20161202 21:42:45.582" status="PASS"></status>
</kw>
<status endtime="20161202 21:42:45.583" starttime="20161202 21:42:45.249" status="PASS"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161202 21:42:45.877">Post Request using : alias=openbmc, uri=/org/openbmc/control/chassis0//action/powerOff, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161202 21:42:45.878">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20161202 21:42:45.878" starttime="20161202 21:42:45.583" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161202 21:42:45.885">${msg} = Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20161202 21:42:45.885" starttime="20161202 21:42:45.884" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161202 21:42:45.886">Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20161202 21:42:45.886" starttime="20161202 21:42:45.886" status="PASS"></status>
</kw>
<status endtime="20161202 21:42:45.887" starttime="20161202 21:42:45.885" status="PASS"></status>
</kw>
<status endtime="20161202 21:42:45.887" starttime="20161202 21:42:45.883" status="PASS"></status>
</kw>
<status endtime="20161202 21:42:45.887" starttime="20161202 21:42:45.878" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20161202 21:42:45.887">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161202 21:42:45.887" starttime="20161202 21:42:45.237" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20161202 21:42:45.888">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161202 21:42:45.888" starttime="20161202 21:42:45.235" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161202 21:42:45.889">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20161202 21:42:45.889" starttime="20161202 21:42:45.888" status="PASS"></status>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>1 min</arg>
<arg>10 sec</arg>
<arg>Is Power Off</arg>
</arguments>
<kw name="Is Power Off" library="utils">
<kw name="Get Power State" library="utils">
<doc>Returns the power state as an integer. Either 0 or 1.</doc>
<assign>
<var>${state}</var>
</assign>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161202 21:42:45.891">@{arglist} = [ ]</msg>
<status endtime="20161202 21:42:45.891" starttime="20161202 21:42:45.891" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161202 21:42:45.891">${args} = {u'data': []}</msg>
<status endtime="20161202 21:42:45.892" starttime="20161202 21:42:45.891" status="PASS"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}control/chassis0/</arg>
<arg>getPowerState</arg>
<arg>data=${args}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161202 21:42:45.893">${base_uri} = /org/openbmc/control/chassis0/</msg>
<status endtime="20161202 21:42:45.893" starttime="20161202 21:42:45.892" status="PASS"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161202 21:42:45.894">${base_uri} = /org/openbmc/control/chassis0//action/getPowerState</msg>
<status endtime="20161202 21:42:45.894" starttime="20161202 21:42:45.894" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161202 21:42:45.894">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20161202 21:42:45.894" starttime="20161202 21:42:45.894" status="PASS"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status endtime="20161202 21:42:45.895" starttime="20161202 21:42:45.895" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161202 21:42:45.899">${msg} = URI:https://9.3.23.30:443/org/openbmc/control/chassis0//action/getPowerState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status endtime="20161202 21:42:45.899" starttime="20161202 21:42:45.898" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161202 21:42:45.900">URI:https://9.3.23.30:443/org/openbmc/control/chassis0//action/getPowerState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status endtime="20161202 21:42:45.900" starttime="20161202 21:42:45.900" status="PASS"></status>
</kw>
<status endtime="20161202 21:42:45.900" starttime="20161202 21:42:45.899" status="PASS"></status>
</kw>
<status endtime="20161202 21:42:45.900" starttime="20161202 21:42:45.898" status="PASS"></status>
</kw>
<status endtime="20161202 21:42:45.900" starttime="20161202 21:42:45.895" status="PASS"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161202 21:42:45.901">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20161202 21:42:45.902" starttime="20161202 21:42:45.901" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161202 21:42:45.902">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20161202 21:42:45.902" starttime="20161202 21:42:45.902" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161202 21:42:45.903">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20161202 21:42:45.903" starttime="20161202 21:42:45.902" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161202 21:42:45.903">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20161202 21:42:45.903" starttime="20161202 21:42:45.903" status="PASS"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161202 21:42:46.562">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161202 21:42:46.563">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161202 21:42:46.563" starttime="20161202 21:42:45.903" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161202 21:42:46.564">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20161202 21:42:46.564" starttime="20161202 21:42:46.563" status="PASS"></status>
</kw>
<status endtime="20161202 21:42:46.564" starttime="20161202 21:42:45.900" status="PASS"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161202 21:42:46.932">Post Request using : alias=openbmc, uri=/org/openbmc/control/chassis0//action/getPowerState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161202 21:42:46.932">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20161202 21:42:46.933" starttime="20161202 21:42:46.565" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161202 21:42:46.939">${msg} = Response code:200, Content:{
  "data": 0, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20161202 21:42:46.939" starttime="20161202 21:42:46.938" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161202 21:42:46.941">Response code:200, Content:{
  "data": 0, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20161202 21:42:46.941" starttime="20161202 21:42:46.940" status="PASS"></status>
</kw>
<status endtime="20161202 21:42:46.941" starttime="20161202 21:42:46.940" status="PASS"></status>
</kw>
<status endtime="20161202 21:42:46.941" starttime="20161202 21:42:46.938" status="PASS"></status>
</kw>
<status endtime="20161202 21:42:46.941" starttime="20161202 21:42:46.933" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20161202 21:42:46.942">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161202 21:42:46.942" starttime="20161202 21:42:45.893" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20161202 21:42:46.942">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161202 21:42:46.942" starttime="20161202 21:42:45.892" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161202 21:42:46.943">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20161202 21:42:46.943" starttime="20161202 21:42:46.943" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161202 21:42:46.944">To JSON using : content={
  "data": 0, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161202 21:42:46.944">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161202 21:42:46.944">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': 0}</msg>
<status endtime="20161202 21:42:46.944" starttime="20161202 21:42:46.944" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20161202 21:42:46.945">${state} = 0</msg>
<status endtime="20161202 21:42:46.945" starttime="20161202 21:42:45.890" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${state}</arg>
<arg>${0}</arg>
</arguments>
<status endtime="20161202 21:42:46.946" starttime="20161202 21:42:46.945" status="PASS"></status>
</kw>
<status endtime="20161202 21:42:46.946" starttime="20161202 21:42:45.890" status="PASS"></status>
</kw>
<status endtime="20161202 21:42:46.946" starttime="20161202 21:42:45.890" status="PASS"></status>
</kw>
<status endtime="20161202 21:42:46.946" starttime="20161202 21:42:45.232" status="PASS"></status>
</kw>
<kw name="Check Power Off States" library="poweroffs">
<doc>Checks that the BMC state, power state, and boot progress</doc>
<kw name="Get Power State" library="utils">
<doc>Returns the power state as an integer. Either 0 or 1.</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161202 21:42:46.948">@{arglist} = [ ]</msg>
<status endtime="20161202 21:42:46.948" starttime="20161202 21:42:46.948" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161202 21:42:46.949">${args} = {u'data': []}</msg>
<status endtime="20161202 21:42:46.949" starttime="20161202 21:42:46.948" status="PASS"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}control/chassis0/</arg>
<arg>getPowerState</arg>
<arg>data=${args}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161202 21:42:46.951">${base_uri} = /org/openbmc/control/chassis0/</msg>
<status endtime="20161202 21:42:46.951" starttime="20161202 21:42:46.950" status="PASS"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161202 21:42:46.952">${base_uri} = /org/openbmc/control/chassis0//action/getPowerState</msg>
<status endtime="20161202 21:42:46.952" starttime="20161202 21:42:46.951" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161202 21:42:46.952">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20161202 21:42:46.952" starttime="20161202 21:42:46.952" status="PASS"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status endtime="20161202 21:42:46.953" starttime="20161202 21:42:46.953" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161202 21:42:46.957">${msg} = URI:https://9.3.23.30:443/org/openbmc/control/chassis0//action/getPowerState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status endtime="20161202 21:42:46.957" starttime="20161202 21:42:46.957" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161202 21:42:46.958">URI:https://9.3.23.30:443/org/openbmc/control/chassis0//action/getPowerState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status endtime="20161202 21:42:46.958" starttime="20161202 21:42:46.958" status="PASS"></status>
</kw>
<status endtime="20161202 21:42:46.958" starttime="20161202 21:42:46.957" status="PASS"></status>
</kw>
<status endtime="20161202 21:42:46.958" starttime="20161202 21:42:46.956" status="PASS"></status>
</kw>
<status endtime="20161202 21:42:46.958" starttime="20161202 21:42:46.953" status="PASS"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161202 21:42:46.959">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20161202 21:42:46.960" starttime="20161202 21:42:46.959" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161202 21:42:46.960">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20161202 21:42:46.960" starttime="20161202 21:42:46.960" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161202 21:42:46.961">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20161202 21:42:46.961" starttime="20161202 21:42:46.960" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161202 21:42:46.961">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20161202 21:42:46.961" starttime="20161202 21:42:46.961" status="PASS"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161202 21:42:48.612">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161202 21:42:48.612">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161202 21:42:48.612" starttime="20161202 21:42:46.962" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161202 21:42:48.613">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20161202 21:42:48.613" starttime="20161202 21:42:48.613" status="PASS"></status>
</kw>
<status endtime="20161202 21:42:48.614" starttime="20161202 21:42:46.959" status="PASS"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161202 21:42:49.583">Post Request using : alias=openbmc, uri=/org/openbmc/control/chassis0//action/getPowerState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161202 21:42:49.583">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20161202 21:42:49.583" starttime="20161202 21:42:48.614" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161202 21:42:49.590">${msg} = Response code:200, Content:{
  "data": 0, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20161202 21:42:49.590" starttime="20161202 21:42:49.589" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161202 21:42:49.592">Response code:200, Content:{
  "data": 0, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20161202 21:42:49.592" starttime="20161202 21:42:49.592" status="PASS"></status>
</kw>
<status endtime="20161202 21:42:49.592" starttime="20161202 21:42:49.591" status="PASS"></status>
</kw>
<status endtime="20161202 21:42:49.593" starttime="20161202 21:42:49.589" status="PASS"></status>
</kw>
<status endtime="20161202 21:42:49.593" starttime="20161202 21:42:49.584" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20161202 21:42:49.593">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161202 21:42:49.593" starttime="20161202 21:42:46.951" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20161202 21:42:49.594">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161202 21:42:49.594" starttime="20161202 21:42:46.949" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161202 21:42:49.594">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20161202 21:42:49.595" starttime="20161202 21:42:49.594" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161202 21:42:49.595">To JSON using : content={
  "data": 0, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161202 21:42:49.596">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161202 21:42:49.596">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': 0}</msg>
<status endtime="20161202 21:42:49.596" starttime="20161202 21:42:49.595" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20161202 21:42:49.596">${power_state} = 0</msg>
<status endtime="20161202 21:42:49.596" starttime="20161202 21:42:46.947" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${power_state}</arg>
<arg>${0}</arg>
</arguments>
<status endtime="20161202 21:42:49.597" starttime="20161202 21:42:49.597" status="PASS"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Power State: ${power_state}</arg>
</arguments>
<status endtime="20161202 21:42:49.598" starttime="20161202 21:42:49.597" status="PASS"></status>
</kw>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161202 21:42:49.601">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20161202 21:42:49.601" starttime="20161202 21:42:49.600" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161202 21:42:49.605">${msg} = URI:https://9.3.23.30:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20161202 21:42:49.605" starttime="20161202 21:42:49.604" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161202 21:42:49.606">URI:https://9.3.23.30:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20161202 21:42:49.606" starttime="20161202 21:42:49.606" status="PASS"></status>
</kw>
<status endtime="20161202 21:42:49.606" starttime="20161202 21:42:49.605" status="PASS"></status>
</kw>
<status endtime="20161202 21:42:49.606" starttime="20161202 21:42:49.604" status="PASS"></status>
</kw>
<status endtime="20161202 21:42:49.606" starttime="20161202 21:42:49.601" status="PASS"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161202 21:42:49.607">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20161202 21:42:49.607" starttime="20161202 21:42:49.607" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161202 21:42:49.608">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20161202 21:42:49.608" starttime="20161202 21:42:49.607" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161202 21:42:49.608">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20161202 21:42:49.608" starttime="20161202 21:42:49.608" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161202 21:42:49.609">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20161202 21:42:49.609" starttime="20161202 21:42:49.609" status="PASS"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161202 21:42:50.747">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161202 21:42:50.747">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161202 21:42:50.747" starttime="20161202 21:42:49.609" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161202 21:42:50.748">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20161202 21:42:50.749" starttime="20161202 21:42:50.748" status="PASS"></status>
</kw>
<status endtime="20161202 21:42:50.749" starttime="20161202 21:42:49.606" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161202 21:42:50.954">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None </msg>
<msg level="INFO" timestamp="20161202 21:42:50.954">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20161202 21:42:50.954" starttime="20161202 21:42:50.749" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161202 21:42:50.961">${msg} = Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20161202 21:42:50.961" starttime="20161202 21:42:50.960" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161202 21:42:50.962">Response code:200, Content:{
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20161202 21:42:50.962" starttime="20161202 21:42:50.962" status="PASS"></status>
</kw>
<status endtime="20161202 21:42:50.963" starttime="20161202 21:42:50.961" status="PASS"></status>
</kw>
<status endtime="20161202 21:42:50.963" starttime="20161202 21:42:50.959" status="PASS"></status>
</kw>
<status endtime="20161202 21:42:50.963" starttime="20161202 21:42:50.954" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20161202 21:42:50.963">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161202 21:42:50.963" starttime="20161202 21:42:49.600" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161202 21:42:50.964">To JSON using : content={
  "data": "Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161202 21:42:50.964">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161202 21:42:50.964">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'Off'}</msg>
<status endtime="20161202 21:42:50.964" starttime="20161202 21:42:50.964" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20161202 21:42:50.965">${state} = Off</msg>
<status endtime="20161202 21:42:50.965" starttime="20161202 21:42:49.599" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20161202 21:42:50.965">${boot_progress} = Off</msg>
<status endtime="20161202 21:42:50.965" starttime="20161202 21:42:49.598" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>Off</arg>
</arguments>
<status endtime="20161202 21:42:50.966" starttime="20161202 21:42:50.966" status="PASS"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Boot Progress: ${boot_progress}</arg>
</arguments>
<status endtime="20161202 21:42:50.967" starttime="20161202 21:42:50.966" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>BMC_READY</arg>
<arg>HOST_POWERED_OFF</arg>
</arguments>
<assign>
<var>@{states}</var>
</assign>
<msg level="INFO" timestamp="20161202 21:42:50.967">@{states} = [ BMC_READY | HOST_POWERED_OFF ]</msg>
<status endtime="20161202 21:42:50.968" starttime="20161202 21:42:50.967" status="PASS"></status>
</kw>
<kw name="Get BMC State" library="utils">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${bmc_state}</var>
</assign>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161202 21:42:50.970">@{arglist} = [ ]</msg>
<status endtime="20161202 21:42:50.970" starttime="20161202 21:42:50.969" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161202 21:42:50.972">${args} = {u'data': []}</msg>
<status endtime="20161202 21:42:50.972" starttime="20161202 21:42:50.971" status="PASS"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161202 21:42:50.974">${base_uri} = /org/openbmc/managers/System/</msg>
<status endtime="20161202 21:42:50.974" starttime="20161202 21:42:50.974" status="PASS"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161202 21:42:50.977">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status endtime="20161202 21:42:50.978" starttime="20161202 21:42:50.977" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161202 21:42:50.979">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20161202 21:42:50.979" starttime="20161202 21:42:50.978" status="PASS"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status endtime="20161202 21:42:50.980" starttime="20161202 21:42:50.979" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161202 21:42:50.984">${msg} = URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status endtime="20161202 21:42:50.984" starttime="20161202 21:42:50.984" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161202 21:42:50.985">URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status endtime="20161202 21:42:50.985" starttime="20161202 21:42:50.985" status="PASS"></status>
</kw>
<status endtime="20161202 21:42:50.986" starttime="20161202 21:42:50.984" status="PASS"></status>
</kw>
<status endtime="20161202 21:42:50.986" starttime="20161202 21:42:50.983" status="PASS"></status>
</kw>
<status endtime="20161202 21:42:50.986" starttime="20161202 21:42:50.980" status="PASS"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161202 21:42:50.987">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20161202 21:42:50.987" starttime="20161202 21:42:50.986" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161202 21:42:50.987">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20161202 21:42:50.987" starttime="20161202 21:42:50.987" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161202 21:42:50.988">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20161202 21:42:50.988" starttime="20161202 21:42:50.988" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161202 21:42:50.988">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20161202 21:42:50.989" starttime="20161202 21:42:50.988" status="PASS"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161202 21:42:51.319">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161202 21:42:51.319">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161202 21:42:51.319" starttime="20161202 21:42:50.989" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161202 21:42:51.320">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20161202 21:42:51.320" starttime="20161202 21:42:51.320" status="PASS"></status>
</kw>
<status endtime="20161202 21:42:51.320" starttime="20161202 21:42:50.986" status="PASS"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161202 21:42:51.602">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161202 21:42:51.602">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20161202 21:42:51.602" starttime="20161202 21:42:51.321" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161202 21:42:51.609">${msg} = Response code:200, Content:{
  "data": "BMC_READY", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20161202 21:42:51.609" starttime="20161202 21:42:51.608" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161202 21:42:51.611">Response code:200, Content:{
  "data": "BMC_READY", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20161202 21:42:51.611" starttime="20161202 21:42:51.611" status="PASS"></status>
</kw>
<status endtime="20161202 21:42:51.611" starttime="20161202 21:42:51.610" status="PASS"></status>
</kw>
<status endtime="20161202 21:42:51.611" starttime="20161202 21:42:51.608" status="PASS"></status>
</kw>
<status endtime="20161202 21:42:51.611" starttime="20161202 21:42:51.603" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20161202 21:42:51.612">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161202 21:42:51.612" starttime="20161202 21:42:50.975" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20161202 21:42:51.612">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161202 21:42:51.612" starttime="20161202 21:42:50.972" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161202 21:42:51.613">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20161202 21:42:51.613" starttime="20161202 21:42:51.613" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161202 21:42:51.614">To JSON using : content={
  "data": "BMC_READY", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161202 21:42:51.614">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161202 21:42:51.614">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'BMC_READY'}</msg>
<status endtime="20161202 21:42:51.614" starttime="20161202 21:42:51.614" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20161202 21:42:51.615">${bmc_state} = BMC_READY</msg>
<status endtime="20161202 21:42:51.615" starttime="20161202 21:42:50.968" status="PASS"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${states}</arg>
<arg>${bmc_state}</arg>
</arguments>
<status endtime="20161202 21:42:51.616" starttime="20161202 21:42:51.615" status="PASS"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>BMC State: ${bmc_state}</arg>
</arguments>
<status endtime="20161202 21:42:51.616" starttime="20161202 21:42:51.616" status="PASS"></status>
</kw>
<status endtime="20161202 21:42:51.617" starttime="20161202 21:42:46.946" status="PASS"></status>
</kw>
<kw name="Close Connection" library="SSHLibrary">
<doc>Closes the current connection.</doc>
<status endtime="20161202 21:42:51.731" starttime="20161202 21:42:51.617" status="PASS"></status>
</kw>
<status endtime="20161202 21:42:51.731" starttime="20161202 21:42:42.857" status="PASS"></status>
</kw>
<kw name="BMC Power On" library="powerons">
<doc>Powers on the system, checks that the OS is functional, and</doc>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>alias=bmc_connection</arg>
</arguments>
<assign>
<var>&amp;{bmc_connection_args}</var>
</assign>
<msg level="INFO" timestamp="20161202 21:42:51.732">&amp;{bmc_connection_args} = { alias=bmc_connection }</msg>
<status endtime="20161202 21:42:51.733" starttime="20161202 21:42:51.732" status="PASS"></status>
</kw>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<arguments>
<arg>&amp;{bmc_connection_args}</arg>
</arguments>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg level="FAIL" timestamp="20161202 21:42:51.737">Dictionary does not contain key 'host'.</msg>
<status endtime="20161202 21:42:51.737" starttime="20161202 21:42:51.737" status="FAIL"></status>
</kw>
<msg level="INFO" timestamp="20161202 21:42:51.737">${has_host} = False</msg>
<status endtime="20161202 21:42:51.737" starttime="20161202 21:42:51.734" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status endtime="20161202 21:42:51.743" starttime="20161202 21:42:51.743" status="PASS"></status>
</kw>
<status endtime="20161202 21:42:51.743" starttime="20161202 21:42:51.738" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<kw name="User input SSH and HTTPs Ports" library="connection_client">
<doc>Update the global SSH and HTTPs port variable for QEMU</doc>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${SSH_PORT}</arg>
</arguments>
<assign>
<var>${port_num}</var>
</assign>
<msg level="INFO" timestamp="20161202 21:42:51.750">${port_num} = 22</msg>
<status endtime="20161202 21:42:51.750" starttime="20161202 21:42:51.750" status="PASS"></status>
</kw>
<kw name="Replace Variables" library="BuiltIn">
<doc>Replaces variables in the given text with their current values.</doc>
<arguments>
<arg>${port_num}</arg>
</arguments>
<assign>
<var>${SSH_PORT}</var>
</assign>
<msg level="INFO" timestamp="20161202 21:42:51.750">${SSH_PORT} = 22</msg>
<status endtime="20161202 21:42:51.751" starttime="20161202 21:42:51.750" status="PASS"></status>
</kw>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${HTTPS_PORT}</arg>
</arguments>
<assign>
<var>${https_num}</var>
</assign>
<msg level="INFO" timestamp="20161202 21:42:51.751">${https_num} = 443</msg>
<status endtime="20161202 21:42:51.751" starttime="20161202 21:42:51.751" status="PASS"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${AUTH_URI}</arg>
<arg>https://${OPENBMC_HOST}:${https_num}</arg>
</arguments>
<msg level="INFO" timestamp="20161202 21:42:51.752">${AUTH_URI} = https://9.3.23.30:443</msg>
<status endtime="20161202 21:42:51.752" starttime="20161202 21:42:51.751" status="PASS"></status>
</kw>
<status endtime="20161202 21:42:51.752" starttime="20161202 21:42:51.749" status="PASS"></status>
</kw>
<status endtime="20161202 21:42:51.752" starttime="20161202 21:42:51.744" status="PASS"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg level="FAIL" timestamp="20161202 21:42:51.753">Dictionary does not contain key 'port'.</msg>
<status endtime="20161202 21:42:51.753" starttime="20161202 21:42:51.752" status="FAIL"></status>
</kw>
<msg level="INFO" timestamp="20161202 21:42:51.753">${has_port} = False</msg>
<status endtime="20161202 21:42:51.753" starttime="20161202 21:42:51.752" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keywords" library="BuiltIn">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
</arguments>
<status endtime="20161202 21:42:51.757" starttime="20161202 21:42:51.756" status="PASS"></status>
</kw>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status endtime="20161202 21:42:51.757" starttime="20161202 21:42:51.757" status="PASS"></status>
</kw>
<status endtime="20161202 21:42:51.757" starttime="20161202 21:42:51.756" status="PASS"></status>
</kw>
<status endtime="20161202 21:42:51.757" starttime="20161202 21:42:51.753" status="PASS"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg level="INFO" timestamp="20161202 21:42:51.758">Logging into '9.3.23.30:22' as 'root'.</msg>
<msg level="INFO" timestamp="20161202 21:42:54.010">Read output: 7[r[999;999H[6n</msg>
<status endtime="20161202 21:42:54.011" starttime="20161202 21:42:51.758" status="PASS"></status>
</kw>
<status endtime="20161202 21:42:54.011" starttime="20161202 21:42:51.733" status="PASS"></status>
</kw>
<kw name="Initiate Power On" library="utils">
<doc>Initiates the power on and waits until the Is Power On</doc>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161202 21:42:54.013">@{arglist} = [ ]</msg>
<status endtime="20161202 21:42:54.013" starttime="20161202 21:42:54.013" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161202 21:42:54.014">${args} = {u'data': []}</msg>
<status endtime="20161202 21:42:54.014" starttime="20161202 21:42:54.013" status="PASS"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}control/chassis0/</arg>
<arg>powerOn</arg>
<arg>data=${args}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161202 21:42:54.016">${base_uri} = /org/openbmc/control/chassis0/</msg>
<status endtime="20161202 21:42:54.016" starttime="20161202 21:42:54.015" status="PASS"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161202 21:42:54.018">${base_uri} = /org/openbmc/control/chassis0//action/powerOn</msg>
<status endtime="20161202 21:42:54.018" starttime="20161202 21:42:54.018" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161202 21:42:54.019">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20161202 21:42:54.019" starttime="20161202 21:42:54.019" status="PASS"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status endtime="20161202 21:42:54.020" starttime="20161202 21:42:54.020" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161202 21:42:54.024">${msg} = URI:https://9.3.23.30:443/org/openbmc/control/chassis0//action/powerOn, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status endtime="20161202 21:42:54.025" starttime="20161202 21:42:54.024" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161202 21:42:54.025">URI:https://9.3.23.30:443/org/openbmc/control/chassis0//action/powerOn, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status endtime="20161202 21:42:54.026" starttime="20161202 21:42:54.025" status="PASS"></status>
</kw>
<status endtime="20161202 21:42:54.026" starttime="20161202 21:42:54.025" status="PASS"></status>
</kw>
<status endtime="20161202 21:42:54.026" starttime="20161202 21:42:54.023" status="PASS"></status>
</kw>
<status endtime="20161202 21:42:54.026" starttime="20161202 21:42:54.020" status="PASS"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161202 21:42:54.027">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20161202 21:42:54.027" starttime="20161202 21:42:54.026" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161202 21:42:54.028">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20161202 21:42:54.028" starttime="20161202 21:42:54.027" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161202 21:42:54.028">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20161202 21:42:54.028" starttime="20161202 21:42:54.028" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161202 21:42:54.029">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20161202 21:42:54.029" starttime="20161202 21:42:54.028" status="PASS"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161202 21:42:54.511">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161202 21:42:54.511">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161202 21:42:54.511" starttime="20161202 21:42:54.029" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161202 21:42:54.512">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20161202 21:42:54.512" starttime="20161202 21:42:54.512" status="PASS"></status>
</kw>
<status endtime="20161202 21:42:54.512" starttime="20161202 21:42:54.026" status="PASS"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161202 21:42:54.805">Post Request using : alias=openbmc, uri=/org/openbmc/control/chassis0//action/powerOn, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161202 21:42:54.805">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20161202 21:42:54.805" starttime="20161202 21:42:54.512" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161202 21:42:54.813">${msg} = Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20161202 21:42:54.813" starttime="20161202 21:42:54.812" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161202 21:42:54.814">Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20161202 21:42:54.815" starttime="20161202 21:42:54.814" status="PASS"></status>
</kw>
<status endtime="20161202 21:42:54.815" starttime="20161202 21:42:54.813" status="PASS"></status>
</kw>
<status endtime="20161202 21:42:54.815" starttime="20161202 21:42:54.811" status="PASS"></status>
</kw>
<status endtime="20161202 21:42:54.815" starttime="20161202 21:42:54.806" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20161202 21:42:54.815">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161202 21:42:54.815" starttime="20161202 21:42:54.017" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20161202 21:42:54.816">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161202 21:42:54.816" starttime="20161202 21:42:54.014" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161202 21:42:54.817">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20161202 21:42:54.817" starttime="20161202 21:42:54.816" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${wait}' == '${0}'</arg>
<arg>Return From Keyword</arg>
</arguments>
<status endtime="20161202 21:42:54.821" starttime="20161202 21:42:54.817" status="PASS"></status>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>3 min</arg>
<arg>10 sec</arg>
<arg>Is Power On</arg>
</arguments>
<kw name="Is Power On" library="utils">
<kw name="Get Power State" library="utils">
<doc>Returns the power state as an integer. Either 0 or 1.</doc>
<assign>
<var>${state}</var>
</assign>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161202 21:42:54.822">@{arglist} = [ ]</msg>
<status endtime="20161202 21:42:54.822" starttime="20161202 21:42:54.822" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161202 21:42:54.823">${args} = {u'data': []}</msg>
<status endtime="20161202 21:42:54.823" starttime="20161202 21:42:54.823" status="PASS"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}control/chassis0/</arg>
<arg>getPowerState</arg>
<arg>data=${args}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161202 21:42:54.824">${base_uri} = /org/openbmc/control/chassis0/</msg>
<status endtime="20161202 21:42:54.824" starttime="20161202 21:42:54.824" status="PASS"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161202 21:42:54.825">${base_uri} = /org/openbmc/control/chassis0//action/getPowerState</msg>
<status endtime="20161202 21:42:54.825" starttime="20161202 21:42:54.825" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161202 21:42:54.826">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20161202 21:42:54.826" starttime="20161202 21:42:54.826" status="PASS"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status endtime="20161202 21:42:54.826" starttime="20161202 21:42:54.826" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161202 21:42:54.831">${msg} = URI:https://9.3.23.30:443/org/openbmc/control/chassis0//action/getPowerState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status endtime="20161202 21:42:54.831" starttime="20161202 21:42:54.830" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161202 21:42:54.832">URI:https://9.3.23.30:443/org/openbmc/control/chassis0//action/getPowerState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status endtime="20161202 21:42:54.832" starttime="20161202 21:42:54.831" status="PASS"></status>
</kw>
<status endtime="20161202 21:42:54.832" starttime="20161202 21:42:54.831" status="PASS"></status>
</kw>
<status endtime="20161202 21:42:54.832" starttime="20161202 21:42:54.829" status="PASS"></status>
</kw>
<status endtime="20161202 21:42:54.832" starttime="20161202 21:42:54.827" status="PASS"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161202 21:42:54.833">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20161202 21:42:54.833" starttime="20161202 21:42:54.832" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161202 21:42:54.834">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20161202 21:42:54.834" starttime="20161202 21:42:54.833" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161202 21:42:54.834">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20161202 21:42:54.834" starttime="20161202 21:42:54.834" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161202 21:42:54.835">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20161202 21:42:54.835" starttime="20161202 21:42:54.834" status="PASS"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161202 21:42:56.982">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161202 21:42:56.982">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161202 21:42:56.982" starttime="20161202 21:42:54.835" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161202 21:42:56.983">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20161202 21:42:56.983" starttime="20161202 21:42:56.982" status="PASS"></status>
</kw>
<status endtime="20161202 21:42:56.983" starttime="20161202 21:42:54.832" status="PASS"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161202 21:43:00.188">Post Request using : alias=openbmc, uri=/org/openbmc/control/chassis0//action/getPowerState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161202 21:43:00.189">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20161202 21:43:00.189" starttime="20161202 21:42:56.984" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161202 21:43:00.196">${msg} = Response code:200, Content:{
  "data": 0, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20161202 21:43:00.196" starttime="20161202 21:43:00.195" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161202 21:43:00.199">Response code:200, Content:{
  "data": 0, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20161202 21:43:00.199" starttime="20161202 21:43:00.198" status="PASS"></status>
</kw>
<status endtime="20161202 21:43:00.199" starttime="20161202 21:43:00.197" status="PASS"></status>
</kw>
<status endtime="20161202 21:43:00.199" starttime="20161202 21:43:00.194" status="PASS"></status>
</kw>
<status endtime="20161202 21:43:00.200" starttime="20161202 21:43:00.189" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20161202 21:43:00.200">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161202 21:43:00.200" starttime="20161202 21:42:54.824" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20161202 21:43:00.200">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161202 21:43:00.200" starttime="20161202 21:42:54.823" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161202 21:43:00.201">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20161202 21:43:00.201" starttime="20161202 21:43:00.201" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161202 21:43:00.201">To JSON using : content={
  "data": 0, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161202 21:43:00.202">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161202 21:43:00.202">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': 0}</msg>
<status endtime="20161202 21:43:00.202" starttime="20161202 21:43:00.201" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20161202 21:43:00.202">${state} = 0</msg>
<status endtime="20161202 21:43:00.202" starttime="20161202 21:42:54.822" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${state}</arg>
<arg>${1}</arg>
</arguments>
<msg level="FAIL" timestamp="20161202 21:43:00.203">0 != 1</msg>
<status endtime="20161202 21:43:00.203" starttime="20161202 21:43:00.202" status="FAIL"></status>
</kw>
<status endtime="20161202 21:43:00.203" starttime="20161202 21:42:54.822" status="FAIL"></status>
</kw>
<kw name="Is Power On" library="utils">
<kw name="Get Power State" library="utils">
<doc>Returns the power state as an integer. Either 0 or 1.</doc>
<assign>
<var>${state}</var>
</assign>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161202 21:43:10.206">@{arglist} = [ ]</msg>
<status endtime="20161202 21:43:10.207" starttime="20161202 21:43:10.206" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161202 21:43:10.208">${args} = {u'data': []}</msg>
<status endtime="20161202 21:43:10.208" starttime="20161202 21:43:10.207" status="PASS"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}control/chassis0/</arg>
<arg>getPowerState</arg>
<arg>data=${args}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161202 21:43:10.210">${base_uri} = /org/openbmc/control/chassis0/</msg>
<status endtime="20161202 21:43:10.210" starttime="20161202 21:43:10.210" status="PASS"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161202 21:43:10.212">${base_uri} = /org/openbmc/control/chassis0//action/getPowerState</msg>
<status endtime="20161202 21:43:10.212" starttime="20161202 21:43:10.212" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161202 21:43:10.213">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20161202 21:43:10.213" starttime="20161202 21:43:10.213" status="PASS"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status endtime="20161202 21:43:10.214" starttime="20161202 21:43:10.214" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161202 21:43:10.223">${msg} = URI:https://9.3.23.30:443/org/openbmc/control/chassis0//action/getPowerState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status endtime="20161202 21:43:10.223" starttime="20161202 21:43:10.222" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161202 21:43:10.224">URI:https://9.3.23.30:443/org/openbmc/control/chassis0//action/getPowerState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status endtime="20161202 21:43:10.224" starttime="20161202 21:43:10.223" status="PASS"></status>
</kw>
<status endtime="20161202 21:43:10.224" starttime="20161202 21:43:10.223" status="PASS"></status>
</kw>
<status endtime="20161202 21:43:10.224" starttime="20161202 21:43:10.221" status="PASS"></status>
</kw>
<status endtime="20161202 21:43:10.224" starttime="20161202 21:43:10.215" status="PASS"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161202 21:43:10.225">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20161202 21:43:10.226" starttime="20161202 21:43:10.225" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161202 21:43:10.226">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20161202 21:43:10.226" starttime="20161202 21:43:10.226" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161202 21:43:10.227">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20161202 21:43:10.227" starttime="20161202 21:43:10.226" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161202 21:43:10.227">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20161202 21:43:10.227" starttime="20161202 21:43:10.227" status="PASS"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161202 21:43:10.554">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161202 21:43:10.555">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161202 21:43:10.555" starttime="20161202 21:43:10.228" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161202 21:43:10.555">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20161202 21:43:10.555" starttime="20161202 21:43:10.555" status="PASS"></status>
</kw>
<status endtime="20161202 21:43:10.556" starttime="20161202 21:43:10.225" status="PASS"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161202 21:43:10.819">Post Request using : alias=openbmc, uri=/org/openbmc/control/chassis0//action/getPowerState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161202 21:43:10.819">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20161202 21:43:10.819" starttime="20161202 21:43:10.556" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161202 21:43:10.823">${msg} = Response code:200, Content:{
  "data": 1, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20161202 21:43:10.823" starttime="20161202 21:43:10.823" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161202 21:43:10.824">Response code:200, Content:{
  "data": 1, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20161202 21:43:10.824" starttime="20161202 21:43:10.824" status="PASS"></status>
</kw>
<status endtime="20161202 21:43:10.824" starttime="20161202 21:43:10.823" status="PASS"></status>
</kw>
<status endtime="20161202 21:43:10.824" starttime="20161202 21:43:10.822" status="PASS"></status>
</kw>
<status endtime="20161202 21:43:10.824" starttime="20161202 21:43:10.819" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20161202 21:43:10.824">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161202 21:43:10.824" starttime="20161202 21:43:10.211" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20161202 21:43:10.825">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161202 21:43:10.825" starttime="20161202 21:43:10.208" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161202 21:43:10.825">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20161202 21:43:10.826" starttime="20161202 21:43:10.825" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161202 21:43:10.826">To JSON using : content={
  "data": 1, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161202 21:43:10.826">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161202 21:43:10.826">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': 1}</msg>
<status endtime="20161202 21:43:10.826" starttime="20161202 21:43:10.826" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20161202 21:43:10.827">${state} = 1</msg>
<status endtime="20161202 21:43:10.827" starttime="20161202 21:43:10.205" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${state}</arg>
<arg>${1}</arg>
</arguments>
<status endtime="20161202 21:43:10.827" starttime="20161202 21:43:10.827" status="PASS"></status>
</kw>
<status endtime="20161202 21:43:10.828" starttime="20161202 21:43:10.204" status="PASS"></status>
</kw>
<status endtime="20161202 21:43:10.828" starttime="20161202 21:42:54.821" status="PASS"></status>
</kw>
<status endtime="20161202 21:43:10.828" starttime="20161202 21:42:54.012" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${OS_HOST}' != '${EMPTY}'</arg>
<arg>Wait For OS</arg>
</arguments>
<status endtime="20161202 21:43:10.832" starttime="20161202 21:43:10.828" status="PASS"></status>
</kw>
<kw name="Switch Connection" library="SSHLibrary">
<doc>Switches the active connection by index or alias.</doc>
<arguments>
<arg>bmc_connection</arg>
</arguments>
<status endtime="20161202 21:43:10.833" starttime="20161202 21:43:10.832" status="PASS"></status>
</kw>
<kw name="Check Power On States" library="powerons">
<doc>Checks that the BMC state, power state, and boot progress</doc>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>${OS_WAIT_TIMEOUT}</arg>
<arg>10sec</arg>
<arg>Is Host Booted</arg>
</arguments>
<kw name="Is Host Booted" library="powerons">
<kw name="Get BMC State" library="utils">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${bmc_state}</var>
</assign>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161202 21:43:10.835">@{arglist} = [ ]</msg>
<status endtime="20161202 21:43:10.835" starttime="20161202 21:43:10.835" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161202 21:43:10.836">${args} = {u'data': []}</msg>
<status endtime="20161202 21:43:10.836" starttime="20161202 21:43:10.835" status="PASS"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161202 21:43:10.837">${base_uri} = /org/openbmc/managers/System/</msg>
<status endtime="20161202 21:43:10.837" starttime="20161202 21:43:10.837" status="PASS"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161202 21:43:10.838">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status endtime="20161202 21:43:10.838" starttime="20161202 21:43:10.838" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161202 21:43:10.839">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20161202 21:43:10.839" starttime="20161202 21:43:10.838" status="PASS"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status endtime="20161202 21:43:10.839" starttime="20161202 21:43:10.839" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161202 21:43:10.844">${msg} = URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status endtime="20161202 21:43:10.844" starttime="20161202 21:43:10.843" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161202 21:43:10.845">URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status endtime="20161202 21:43:10.845" starttime="20161202 21:43:10.845" status="PASS"></status>
</kw>
<status endtime="20161202 21:43:10.845" starttime="20161202 21:43:10.844" status="PASS"></status>
</kw>
<status endtime="20161202 21:43:10.845" starttime="20161202 21:43:10.842" status="PASS"></status>
</kw>
<status endtime="20161202 21:43:10.846" starttime="20161202 21:43:10.839" status="PASS"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161202 21:43:10.846">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20161202 21:43:10.847" starttime="20161202 21:43:10.846" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161202 21:43:10.847">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20161202 21:43:10.847" starttime="20161202 21:43:10.847" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161202 21:43:10.848">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20161202 21:43:10.848" starttime="20161202 21:43:10.847" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161202 21:43:10.848">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20161202 21:43:10.848" starttime="20161202 21:43:10.848" status="PASS"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161202 21:43:11.326">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161202 21:43:11.326">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161202 21:43:11.326" starttime="20161202 21:43:10.849" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161202 21:43:11.326">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20161202 21:43:11.326" starttime="20161202 21:43:11.326" status="PASS"></status>
</kw>
<status endtime="20161202 21:43:11.327" starttime="20161202 21:43:10.846" status="PASS"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161202 21:43:11.611">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161202 21:43:11.611">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20161202 21:43:11.611" starttime="20161202 21:43:11.327" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161202 21:43:11.618">${msg} = Response code:200, Content:{
  "data": "HOST_BOOTING", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20161202 21:43:11.618" starttime="20161202 21:43:11.617" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161202 21:43:11.619">Response code:200, Content:{
  "data": "HOST_BOOTING", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20161202 21:43:11.619" starttime="20161202 21:43:11.619" status="PASS"></status>
</kw>
<status endtime="20161202 21:43:11.620" starttime="20161202 21:43:11.618" status="PASS"></status>
</kw>
<status endtime="20161202 21:43:11.620" starttime="20161202 21:43:11.616" status="PASS"></status>
</kw>
<status endtime="20161202 21:43:11.620" starttime="20161202 21:43:11.611" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20161202 21:43:11.620">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161202 21:43:11.620" starttime="20161202 21:43:10.837" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20161202 21:43:11.621">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161202 21:43:11.621" starttime="20161202 21:43:10.836" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161202 21:43:11.621">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20161202 21:43:11.621" starttime="20161202 21:43:11.621" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161202 21:43:11.622">To JSON using : content={
  "data": "HOST_BOOTING", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161202 21:43:11.622">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161202 21:43:11.622">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'HOST_BOOTING'}</msg>
<status endtime="20161202 21:43:11.622" starttime="20161202 21:43:11.621" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20161202 21:43:11.622">${bmc_state} = HOST_BOOTING</msg>
<status endtime="20161202 21:43:11.622" starttime="20161202 21:43:10.834" status="PASS"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${bmc_state}</arg>
<arg>HOST_BOOTED</arg>
</arguments>
<msg level="FAIL" timestamp="20161202 21:43:11.623">'HOST_BOOTING' does not contain 'HOST_BOOTED'</msg>
<status endtime="20161202 21:43:11.623" starttime="20161202 21:43:11.622" status="FAIL"></status>
</kw>
<status endtime="20161202 21:43:11.623" starttime="20161202 21:43:10.834" status="FAIL"></status>
</kw>
<kw name="Is Host Booted" library="powerons">
<kw name="Get BMC State" library="utils">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${bmc_state}</var>
</assign>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161202 21:43:21.626">@{arglist} = [ ]</msg>
<status endtime="20161202 21:43:21.626" starttime="20161202 21:43:21.625" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161202 21:43:21.627">${args} = {u'data': []}</msg>
<status endtime="20161202 21:43:21.627" starttime="20161202 21:43:21.626" status="PASS"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161202 21:43:21.628">${base_uri} = /org/openbmc/managers/System/</msg>
<status endtime="20161202 21:43:21.629" starttime="20161202 21:43:21.628" status="PASS"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161202 21:43:21.630">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status endtime="20161202 21:43:21.631" starttime="20161202 21:43:21.630" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161202 21:43:21.631">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20161202 21:43:21.631" starttime="20161202 21:43:21.631" status="PASS"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status endtime="20161202 21:43:21.632" starttime="20161202 21:43:21.632" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161202 21:43:21.639">${msg} = URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status endtime="20161202 21:43:21.639" starttime="20161202 21:43:21.637" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161202 21:43:21.640">URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status endtime="20161202 21:43:21.640" starttime="20161202 21:43:21.639" status="PASS"></status>
</kw>
<status endtime="20161202 21:43:21.640" starttime="20161202 21:43:21.639" status="PASS"></status>
</kw>
<status endtime="20161202 21:43:21.640" starttime="20161202 21:43:21.637" status="PASS"></status>
</kw>
<status endtime="20161202 21:43:21.640" starttime="20161202 21:43:21.632" status="PASS"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161202 21:43:21.641">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20161202 21:43:21.642" starttime="20161202 21:43:21.641" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161202 21:43:21.642">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20161202 21:43:21.642" starttime="20161202 21:43:21.642" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161202 21:43:21.643">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20161202 21:43:21.643" starttime="20161202 21:43:21.642" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161202 21:43:21.643">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20161202 21:43:21.643" starttime="20161202 21:43:21.643" status="PASS"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161202 21:43:22.266">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161202 21:43:22.267">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161202 21:43:22.267" starttime="20161202 21:43:21.644" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161202 21:43:22.267">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20161202 21:43:22.267" starttime="20161202 21:43:22.267" status="PASS"></status>
</kw>
<status endtime="20161202 21:43:22.267" starttime="20161202 21:43:21.641" status="PASS"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161202 21:43:22.785">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161202 21:43:22.785">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20161202 21:43:22.785" starttime="20161202 21:43:22.268" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161202 21:43:22.789">${msg} = Response code:200, Content:{
  "data": "HOST_BOOTING", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20161202 21:43:22.789" starttime="20161202 21:43:22.789" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161202 21:43:22.790">Response code:200, Content:{
  "data": "HOST_BOOTING", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20161202 21:43:22.790" starttime="20161202 21:43:22.790" status="PASS"></status>
</kw>
<status endtime="20161202 21:43:22.790" starttime="20161202 21:43:22.789" status="PASS"></status>
</kw>
<status endtime="20161202 21:43:22.790" starttime="20161202 21:43:22.788" status="PASS"></status>
</kw>
<status endtime="20161202 21:43:22.790" starttime="20161202 21:43:22.785" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20161202 21:43:22.790">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161202 21:43:22.790" starttime="20161202 21:43:21.629" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20161202 21:43:22.791">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161202 21:43:22.791" starttime="20161202 21:43:21.627" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161202 21:43:22.791">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20161202 21:43:22.791" starttime="20161202 21:43:22.791" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161202 21:43:22.792">To JSON using : content={
  "data": "HOST_BOOTING", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161202 21:43:22.792">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161202 21:43:22.792">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'HOST_BOOTING'}</msg>
<status endtime="20161202 21:43:22.792" starttime="20161202 21:43:22.791" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20161202 21:43:22.792">${bmc_state} = HOST_BOOTING</msg>
<status endtime="20161202 21:43:22.792" starttime="20161202 21:43:21.624" status="PASS"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${bmc_state}</arg>
<arg>HOST_BOOTED</arg>
</arguments>
<msg level="FAIL" timestamp="20161202 21:43:22.793">'HOST_BOOTING' does not contain 'HOST_BOOTED'</msg>
<status endtime="20161202 21:43:22.793" starttime="20161202 21:43:22.793" status="FAIL"></status>
</kw>
<status endtime="20161202 21:43:22.793" starttime="20161202 21:43:21.623" status="FAIL"></status>
</kw>
<kw name="Is Host Booted" library="powerons">
<kw name="Get BMC State" library="utils">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${bmc_state}</var>
</assign>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161202 21:43:32.795">@{arglist} = [ ]</msg>
<status endtime="20161202 21:43:32.795" starttime="20161202 21:43:32.795" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161202 21:43:32.796">${args} = {u'data': []}</msg>
<status endtime="20161202 21:43:32.797" starttime="20161202 21:43:32.796" status="PASS"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161202 21:43:32.798">${base_uri} = /org/openbmc/managers/System/</msg>
<status endtime="20161202 21:43:32.798" starttime="20161202 21:43:32.798" status="PASS"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161202 21:43:32.801">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status endtime="20161202 21:43:32.801" starttime="20161202 21:43:32.800" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161202 21:43:32.802">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20161202 21:43:32.802" starttime="20161202 21:43:32.801" status="PASS"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status endtime="20161202 21:43:32.802" starttime="20161202 21:43:32.802" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161202 21:43:32.811">${msg} = URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status endtime="20161202 21:43:32.811" starttime="20161202 21:43:32.809" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161202 21:43:32.811">URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status endtime="20161202 21:43:32.812" starttime="20161202 21:43:32.811" status="PASS"></status>
</kw>
<status endtime="20161202 21:43:32.812" starttime="20161202 21:43:32.811" status="PASS"></status>
</kw>
<status endtime="20161202 21:43:32.812" starttime="20161202 21:43:32.808" status="PASS"></status>
</kw>
<status endtime="20161202 21:43:32.812" starttime="20161202 21:43:32.803" status="PASS"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161202 21:43:32.813">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20161202 21:43:32.813" starttime="20161202 21:43:32.812" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161202 21:43:32.814">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20161202 21:43:32.814" starttime="20161202 21:43:32.813" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161202 21:43:32.814">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20161202 21:43:32.814" starttime="20161202 21:43:32.814" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161202 21:43:32.815">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20161202 21:43:32.815" starttime="20161202 21:43:32.814" status="PASS"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161202 21:43:33.352">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161202 21:43:33.352">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161202 21:43:33.352" starttime="20161202 21:43:32.815" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161202 21:43:33.352">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20161202 21:43:33.352" starttime="20161202 21:43:33.352" status="PASS"></status>
</kw>
<status endtime="20161202 21:43:33.353" starttime="20161202 21:43:32.812" status="PASS"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161202 21:43:33.799">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161202 21:43:33.799">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20161202 21:43:33.799" starttime="20161202 21:43:33.353" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161202 21:43:33.806">${msg} = Response code:200, Content:{
  "data": "HOST_BOOTING", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20161202 21:43:33.806" starttime="20161202 21:43:33.806" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161202 21:43:33.808">Response code:200, Content:{
  "data": "HOST_BOOTING", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20161202 21:43:33.808" starttime="20161202 21:43:33.807" status="PASS"></status>
</kw>
<status endtime="20161202 21:43:33.808" starttime="20161202 21:43:33.807" status="PASS"></status>
</kw>
<status endtime="20161202 21:43:33.808" starttime="20161202 21:43:33.805" status="PASS"></status>
</kw>
<status endtime="20161202 21:43:33.808" starttime="20161202 21:43:33.800" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20161202 21:43:33.809">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161202 21:43:33.809" starttime="20161202 21:43:32.799" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20161202 21:43:33.809">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161202 21:43:33.809" starttime="20161202 21:43:32.797" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161202 21:43:33.810">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20161202 21:43:33.810" starttime="20161202 21:43:33.809" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161202 21:43:33.811">To JSON using : content={
  "data": "HOST_BOOTING", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161202 21:43:33.811">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161202 21:43:33.811">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'HOST_BOOTING'}</msg>
<status endtime="20161202 21:43:33.811" starttime="20161202 21:43:33.811" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20161202 21:43:33.811">${bmc_state} = HOST_BOOTING</msg>
<status endtime="20161202 21:43:33.812" starttime="20161202 21:43:32.794" status="PASS"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${bmc_state}</arg>
<arg>HOST_BOOTED</arg>
</arguments>
<msg level="FAIL" timestamp="20161202 21:43:33.812">'HOST_BOOTING' does not contain 'HOST_BOOTED'</msg>
<status endtime="20161202 21:43:33.812" starttime="20161202 21:43:33.812" status="FAIL"></status>
</kw>
<status endtime="20161202 21:43:33.812" starttime="20161202 21:43:32.794" status="FAIL"></status>
</kw>
<kw name="Is Host Booted" library="powerons">
<kw name="Get BMC State" library="utils">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${bmc_state}</var>
</assign>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161202 21:43:43.815">@{arglist} = [ ]</msg>
<status endtime="20161202 21:43:43.815" starttime="20161202 21:43:43.815" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161202 21:43:43.816">${args} = {u'data': []}</msg>
<status endtime="20161202 21:43:43.816" starttime="20161202 21:43:43.815" status="PASS"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161202 21:43:43.818">${base_uri} = /org/openbmc/managers/System/</msg>
<status endtime="20161202 21:43:43.818" starttime="20161202 21:43:43.817" status="PASS"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161202 21:43:43.820">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status endtime="20161202 21:43:43.820" starttime="20161202 21:43:43.819" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161202 21:43:43.821">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20161202 21:43:43.821" starttime="20161202 21:43:43.820" status="PASS"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status endtime="20161202 21:43:43.821" starttime="20161202 21:43:43.821" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161202 21:43:43.826">${msg} = URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status endtime="20161202 21:43:43.826" starttime="20161202 21:43:43.825" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161202 21:43:43.827">URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status endtime="20161202 21:43:43.827" starttime="20161202 21:43:43.827" status="PASS"></status>
</kw>
<status endtime="20161202 21:43:43.827" starttime="20161202 21:43:43.826" status="PASS"></status>
</kw>
<status endtime="20161202 21:43:43.827" starttime="20161202 21:43:43.825" status="PASS"></status>
</kw>
<status endtime="20161202 21:43:43.827" starttime="20161202 21:43:43.822" status="PASS"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161202 21:43:43.828">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20161202 21:43:43.828" starttime="20161202 21:43:43.828" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161202 21:43:43.829">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20161202 21:43:43.829" starttime="20161202 21:43:43.829" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161202 21:43:43.830">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20161202 21:43:43.830" starttime="20161202 21:43:43.829" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161202 21:43:43.830">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20161202 21:43:43.830" starttime="20161202 21:43:43.830" status="PASS"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161202 21:43:44.325">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161202 21:43:44.325">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161202 21:43:44.325" starttime="20161202 21:43:43.831" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161202 21:43:44.326">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20161202 21:43:44.326" starttime="20161202 21:43:44.326" status="PASS"></status>
</kw>
<status endtime="20161202 21:43:44.326" starttime="20161202 21:43:43.827" status="PASS"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161202 21:43:44.855">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161202 21:43:44.855">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20161202 21:43:44.855" starttime="20161202 21:43:44.326" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161202 21:43:44.862">${msg} = Response code:200, Content:{
  "data": "HOST_BOOTING", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20161202 21:43:44.862" starttime="20161202 21:43:44.861" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161202 21:43:44.862">Response code:200, Content:{
  "data": "HOST_BOOTING", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20161202 21:43:44.863" starttime="20161202 21:43:44.862" status="PASS"></status>
</kw>
<status endtime="20161202 21:43:44.863" starttime="20161202 21:43:44.862" status="PASS"></status>
</kw>
<status endtime="20161202 21:43:44.863" starttime="20161202 21:43:44.860" status="PASS"></status>
</kw>
<status endtime="20161202 21:43:44.863" starttime="20161202 21:43:44.855" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20161202 21:43:44.863">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161202 21:43:44.863" starttime="20161202 21:43:43.818" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20161202 21:43:44.863">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161202 21:43:44.863" starttime="20161202 21:43:43.816" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161202 21:43:44.864">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20161202 21:43:44.864" starttime="20161202 21:43:44.864" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161202 21:43:44.865">To JSON using : content={
  "data": "HOST_BOOTING", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161202 21:43:44.865">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161202 21:43:44.865">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'HOST_BOOTING'}</msg>
<status endtime="20161202 21:43:44.865" starttime="20161202 21:43:44.864" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20161202 21:43:44.865">${bmc_state} = HOST_BOOTING</msg>
<status endtime="20161202 21:43:44.865" starttime="20161202 21:43:43.813" status="PASS"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${bmc_state}</arg>
<arg>HOST_BOOTED</arg>
</arguments>
<msg level="FAIL" timestamp="20161202 21:43:44.866">'HOST_BOOTING' does not contain 'HOST_BOOTED'</msg>
<status endtime="20161202 21:43:44.866" starttime="20161202 21:43:44.865" status="FAIL"></status>
</kw>
<status endtime="20161202 21:43:44.866" starttime="20161202 21:43:43.813" status="FAIL"></status>
</kw>
<kw name="Is Host Booted" library="powerons">
<kw name="Get BMC State" library="utils">
<doc>Returns the state of the BMC as a string. (i.e: BMC_READY)</doc>
<assign>
<var>${bmc_state}</var>
</assign>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161202 21:43:54.869">@{arglist} = [ ]</msg>
<status endtime="20161202 21:43:54.869" starttime="20161202 21:43:54.868" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161202 21:43:54.870">${args} = {u'data': []}</msg>
<status endtime="20161202 21:43:54.870" starttime="20161202 21:43:54.869" status="PASS"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}managers/System/</arg>
<arg>getSystemState</arg>
<arg>data=${args}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161202 21:43:54.872">${base_uri} = /org/openbmc/managers/System/</msg>
<status endtime="20161202 21:43:54.872" starttime="20161202 21:43:54.871" status="PASS"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161202 21:43:54.874">${base_uri} = /org/openbmc/managers/System//action/getSystemState</msg>
<status endtime="20161202 21:43:54.874" starttime="20161202 21:43:54.873" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161202 21:43:54.875">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20161202 21:43:54.875" starttime="20161202 21:43:54.874" status="PASS"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status endtime="20161202 21:43:54.876" starttime="20161202 21:43:54.875" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161202 21:43:54.885">${msg} = URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status endtime="20161202 21:43:54.885" starttime="20161202 21:43:54.884" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161202 21:43:54.886">URI:https://9.3.23.30:443/org/openbmc/managers/System//action/getSystemState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status endtime="20161202 21:43:54.886" starttime="20161202 21:43:54.885" status="PASS"></status>
</kw>
<status endtime="20161202 21:43:54.886" starttime="20161202 21:43:54.885" status="PASS"></status>
</kw>
<status endtime="20161202 21:43:54.886" starttime="20161202 21:43:54.881" status="PASS"></status>
</kw>
<status endtime="20161202 21:43:54.886" starttime="20161202 21:43:54.876" status="PASS"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161202 21:43:54.887">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20161202 21:43:54.888" starttime="20161202 21:43:54.887" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161202 21:43:54.889">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20161202 21:43:54.889" starttime="20161202 21:43:54.888" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161202 21:43:54.889">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20161202 21:43:54.889" starttime="20161202 21:43:54.889" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161202 21:43:54.890">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20161202 21:43:54.890" starttime="20161202 21:43:54.889" status="PASS"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161202 21:43:55.423">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161202 21:43:55.423">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161202 21:43:55.423" starttime="20161202 21:43:54.890" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161202 21:43:55.424">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20161202 21:43:55.424" starttime="20161202 21:43:55.423" status="PASS"></status>
</kw>
<status endtime="20161202 21:43:55.424" starttime="20161202 21:43:54.886" status="PASS"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161202 21:43:55.826">Post Request using : alias=openbmc, uri=/org/openbmc/managers/System//action/getSystemState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161202 21:43:55.826">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20161202 21:43:55.826" starttime="20161202 21:43:55.424" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161202 21:43:55.833">${msg} = Response code:200, Content:{
  "data": "HOST_BOOTED", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20161202 21:43:55.833" starttime="20161202 21:43:55.832" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161202 21:43:55.834">Response code:200, Content:{
  "data": "HOST_BOOTED", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20161202 21:43:55.834" starttime="20161202 21:43:55.834" status="PASS"></status>
</kw>
<status endtime="20161202 21:43:55.834" starttime="20161202 21:43:55.833" status="PASS"></status>
</kw>
<status endtime="20161202 21:43:55.835" starttime="20161202 21:43:55.832" status="PASS"></status>
</kw>
<status endtime="20161202 21:43:55.835" starttime="20161202 21:43:55.826" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20161202 21:43:55.835">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161202 21:43:55.835" starttime="20161202 21:43:54.872" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20161202 21:43:55.835">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161202 21:43:55.835" starttime="20161202 21:43:54.870" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161202 21:43:55.836">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20161202 21:43:55.836" starttime="20161202 21:43:55.836" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161202 21:43:55.837">To JSON using : content={
  "data": "HOST_BOOTED", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161202 21:43:55.837">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161202 21:43:55.837">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'HOST_BOOTED'}</msg>
<status endtime="20161202 21:43:55.837" starttime="20161202 21:43:55.837" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20161202 21:43:55.838">${bmc_state} = HOST_BOOTED</msg>
<status endtime="20161202 21:43:55.838" starttime="20161202 21:43:54.867" status="PASS"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${bmc_state}</arg>
<arg>HOST_BOOTED</arg>
</arguments>
<status endtime="20161202 21:43:55.838" starttime="20161202 21:43:55.838" status="PASS"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>BMC State: ${bmc_state}</arg>
</arguments>
<status endtime="20161202 21:43:55.839" starttime="20161202 21:43:55.838" status="PASS"></status>
</kw>
<status endtime="20161202 21:43:55.839" starttime="20161202 21:43:54.866" status="PASS"></status>
</kw>
<status endtime="20161202 21:43:55.839" starttime="20161202 21:43:10.833" status="PASS"></status>
</kw>
<kw name="Get Boot Progress" library="utils">
<assign>
<var>${boot_progress}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}sensors/host/BootProgress</arg>
<arg>value</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161202 21:43:55.842">${base_uri} = /org/openbmc/sensors/host/BootProgress/attr/value</msg>
<status endtime="20161202 21:43:55.842" starttime="20161202 21:43:55.842" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161202 21:43:55.847">${msg} = URI:https://9.3.23.30:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20161202 21:43:55.847" starttime="20161202 21:43:55.847" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161202 21:43:55.848">URI:https://9.3.23.30:443/org/openbmc/sensors/host/BootProgress/attr/value, method:Get, args:{}</msg>
<status endtime="20161202 21:43:55.848" starttime="20161202 21:43:55.848" status="PASS"></status>
</kw>
<status endtime="20161202 21:43:55.848" starttime="20161202 21:43:55.847" status="PASS"></status>
</kw>
<status endtime="20161202 21:43:55.848" starttime="20161202 21:43:55.846" status="PASS"></status>
</kw>
<status endtime="20161202 21:43:55.848" starttime="20161202 21:43:55.843" status="PASS"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161202 21:43:55.849">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20161202 21:43:55.850" starttime="20161202 21:43:55.849" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161202 21:43:55.850">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20161202 21:43:55.850" starttime="20161202 21:43:55.850" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161202 21:43:55.851">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20161202 21:43:55.851" starttime="20161202 21:43:55.850" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161202 21:43:55.851">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20161202 21:43:55.851" starttime="20161202 21:43:55.851" status="PASS"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161202 21:43:56.473">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161202 21:43:56.473">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161202 21:43:56.473" starttime="20161202 21:43:55.852" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161202 21:43:56.473">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20161202 21:43:56.473" starttime="20161202 21:43:56.473" status="PASS"></status>
</kw>
<status endtime="20161202 21:43:56.473" starttime="20161202 21:43:55.848" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161202 21:43:56.644">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/host/BootProgress/attr/value, headers=None </msg>
<msg level="INFO" timestamp="20161202 21:43:56.644">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20161202 21:43:56.644" starttime="20161202 21:43:56.474" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161202 21:43:56.652">${msg} = Response code:200, Content:{
  "data": "FW Progress, Starting OS", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20161202 21:43:56.652" starttime="20161202 21:43:56.650" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161202 21:43:56.653">Response code:200, Content:{
  "data": "FW Progress, Starting OS", 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20161202 21:43:56.653" starttime="20161202 21:43:56.653" status="PASS"></status>
</kw>
<status endtime="20161202 21:43:56.653" starttime="20161202 21:43:56.652" status="PASS"></status>
</kw>
<status endtime="20161202 21:43:56.653" starttime="20161202 21:43:56.650" status="PASS"></status>
</kw>
<status endtime="20161202 21:43:56.654" starttime="20161202 21:43:56.645" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20161202 21:43:56.654">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161202 21:43:56.654" starttime="20161202 21:43:55.840" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161202 21:43:56.655">To JSON using : content={
  "data": "FW Progress, Starting OS", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161202 21:43:56.655">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161202 21:43:56.655">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': u'FW Progress, Starting OS'}</msg>
<status endtime="20161202 21:43:56.655" starttime="20161202 21:43:56.654" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20161202 21:43:56.655">${state} = FW Progress, Starting OS</msg>
<status endtime="20161202 21:43:56.655" starttime="20161202 21:43:55.840" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20161202 21:43:56.655">${boot_progress} = FW Progress, Starting OS</msg>
<status endtime="20161202 21:43:56.656" starttime="20161202 21:43:55.839" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${boot_progress}</arg>
<arg>FW Progress, Starting OS</arg>
</arguments>
<status endtime="20161202 21:43:56.656" starttime="20161202 21:43:56.656" status="PASS"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Boot Progress: ${boot_progress}</arg>
</arguments>
<status endtime="20161202 21:43:56.657" starttime="20161202 21:43:56.656" status="PASS"></status>
</kw>
<kw name="Get Power State" library="utils">
<doc>Returns the power state as an integer. Either 0 or 1.</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>@{arglist}</var>
</assign>
<msg level="INFO" timestamp="20161202 21:43:56.658">@{arglist} = [ ]</msg>
<status endtime="20161202 21:43:56.658" starttime="20161202 21:43:56.658" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{arglist}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg level="INFO" timestamp="20161202 21:43:56.659">${args} = {u'data': []}</msg>
<status endtime="20161202 21:43:56.659" starttime="20161202 21:43:56.658" status="PASS"></status>
</kw>
<kw name="Call Method" library="rest_client">
<arguments>
<arg>${OPENBMC_BASE_URI}control/chassis0/</arg>
<arg>getPowerState</arg>
<arg>data=${args}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161202 21:43:56.660">${base_uri} = /org/openbmc/control/chassis0/</msg>
<status endtime="20161202 21:43:56.660" starttime="20161202 21:43:56.660" status="PASS"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${base_uri}/action/${method}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161202 21:43:56.662">${base_uri} = /org/openbmc/control/chassis0//action/getPowerState</msg>
<status endtime="20161202 21:43:56.662" starttime="20161202 21:43:56.661" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161202 21:43:56.663">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20161202 21:43:56.663" starttime="20161202 21:43:56.662" status="PASS"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status endtime="20161202 21:43:56.663" starttime="20161202 21:43:56.663" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161202 21:43:56.667">${msg} = URI:https://9.3.23.30:443/org/openbmc/control/chassis0//action/getPowerState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status endtime="20161202 21:43:56.668" starttime="20161202 21:43:56.667" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161202 21:43:56.668">URI:https://9.3.23.30:443/org/openbmc/control/chassis0//action/getPowerState, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status endtime="20161202 21:43:56.668" starttime="20161202 21:43:56.668" status="PASS"></status>
</kw>
<status endtime="20161202 21:43:56.668" starttime="20161202 21:43:56.668" status="PASS"></status>
</kw>
<status endtime="20161202 21:43:56.669" starttime="20161202 21:43:56.666" status="PASS"></status>
</kw>
<status endtime="20161202 21:43:56.669" starttime="20161202 21:43:56.663" status="PASS"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161202 21:43:56.669">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20161202 21:43:56.670" starttime="20161202 21:43:56.669" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161202 21:43:56.670">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20161202 21:43:56.670" starttime="20161202 21:43:56.670" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161202 21:43:56.671">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20161202 21:43:56.671" starttime="20161202 21:43:56.671" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161202 21:43:56.672">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20161202 21:43:56.672" starttime="20161202 21:43:56.671" status="PASS"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161202 21:43:57.215">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161202 21:43:57.215">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161202 21:43:57.215" starttime="20161202 21:43:56.672" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161202 21:43:57.216">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20161202 21:43:57.216" starttime="20161202 21:43:57.216" status="PASS"></status>
</kw>
<status endtime="20161202 21:43:57.216" starttime="20161202 21:43:56.669" status="PASS"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161202 21:43:58.074">Post Request using : alias=openbmc, uri=/org/openbmc/control/chassis0//action/getPowerState, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161202 21:43:58.074">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20161202 21:43:58.074" starttime="20161202 21:43:57.216" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161202 21:43:58.081">${msg} = Response code:200, Content:{
  "data": 1, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20161202 21:43:58.081" starttime="20161202 21:43:58.080" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161202 21:43:58.082">Response code:200, Content:{
  "data": 1, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20161202 21:43:58.082" starttime="20161202 21:43:58.082" status="PASS"></status>
</kw>
<status endtime="20161202 21:43:58.082" starttime="20161202 21:43:58.081" status="PASS"></status>
</kw>
<status endtime="20161202 21:43:58.083" starttime="20161202 21:43:58.079" status="PASS"></status>
</kw>
<status endtime="20161202 21:43:58.083" starttime="20161202 21:43:58.074" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20161202 21:43:58.083">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161202 21:43:58.083" starttime="20161202 21:43:56.660" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20161202 21:43:58.083">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161202 21:43:58.083" starttime="20161202 21:43:56.659" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161202 21:43:58.084">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20161202 21:43:58.084" starttime="20161202 21:43:58.084" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161202 21:43:58.085">To JSON using : content={
  "data": 1, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161202 21:43:58.085">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161202 21:43:58.086">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': 1}</msg>
<status endtime="20161202 21:43:58.086" starttime="20161202 21:43:58.085" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20161202 21:43:58.086">${power_state} = 1</msg>
<status endtime="20161202 21:43:58.086" starttime="20161202 21:43:56.657" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${power_state}</arg>
<arg>${1}</arg>
</arguments>
<status endtime="20161202 21:43:58.087" starttime="20161202 21:43:58.086" status="PASS"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Power State: ${power_state}</arg>
</arguments>
<status endtime="20161202 21:43:58.088" starttime="20161202 21:43:58.087" status="PASS"></status>
</kw>
<status endtime="20161202 21:43:58.088" starttime="20161202 21:43:10.833" status="PASS"></status>
</kw>
<kw name="Close Connection" library="SSHLibrary">
<doc>Closes the current connection.</doc>
<status endtime="20161202 21:43:58.120" starttime="20161202 21:43:58.088" status="PASS"></status>
</kw>
<status endtime="20161202 21:43:58.120" starttime="20161202 21:42:51.731" status="PASS"></status>
</kw>
<kw name="Test Exit Logs" type="teardown">
<doc>Log FFDC if failed and collect SOL</doc>
<kw name="FFDC On Test Case Fail" library="openbmc_ffdc">
<doc>Generic FFDC entry point. Place holder to hook in</doc>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${TEST_STATUS}' == 'FAIL'</arg>
<arg>FFDC</arg>
</arguments>
<status endtime="20161202 21:43:58.126" starttime="20161202 21:43:58.122" status="PASS"></status>
</kw>
<kw name="Log Test Case Status" library="openbmc_ffdc_methods">
<doc>Test case execution result history.</doc>
<kw name="Create Directory" library="OperatingSystem">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>${FFDC_LOG_PATH}</arg>
</arguments>
<msg level="INFO" timestamp="20161202 21:43:58.127" html="yes">Directory '&lt;a href="file:///tmp/root/11941/obmc-robot/logs"&gt;/tmp/root/11941/obmc-robot/logs&lt;/a&gt;' already exists.</msg>
<status endtime="20161202 21:43:58.127" starttime="20161202 21:43:58.127" status="PASS"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>OperatingSystem.File Should Exist</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<assign>
<var>${exist}</var>
</assign>
<kw name="File Should Exist" library="OperatingSystem">
<doc>Fails unless the given ``path`` points to an existing file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
</arguments>
<msg level="INFO" timestamp="20161202 21:43:58.129" html="yes">File '&lt;a href="file:///tmp/root/11941/obmc-robot/logs/test_history.txt"&gt;/tmp/root/11941/obmc-robot/logs/test_history.txt&lt;/a&gt;' exists.</msg>
<status endtime="20161202 21:43:58.129" starttime="20161202 21:43:58.128" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20161202 21:43:58.129">${exist} = True</msg>
<status endtime="20161202 21:43:58.129" starttime="20161202 21:43:58.128" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${exist}' == '${False}'</arg>
<arg>Create File</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<status endtime="20161202 21:43:58.133" starttime="20161202 21:43:58.129" status="PASS"></status>
</kw>
<kw name="Get Current Time Stamp" library="openbmc_ffdc_utils">
<doc>Get the current time stamp data</doc>
<assign>
<var>${cur_time}</var>
</assign>
<kw name="Get Current Date" library="DateTime">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20161202 21:43:58.134">${cur_time} = 2016-12-02 21:43:58:134148</msg>
<status endtime="20161202 21:43:58.134" starttime="20161202 21:43:58.134" status="PASS"></status>
</kw>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20161202 21:43:58.135">${cur_time} = 20161202214358134148</msg>
<status endtime="20161202 21:43:58.135" starttime="20161202 21:43:58.135" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20161202 21:43:58.135">${cur_time} = 20161202214358134148</msg>
<status endtime="20161202 21:43:58.135" starttime="20161202 21:43:58.133" status="PASS"></status>
</kw>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
<arg>${cur_time}:${SUITE_NAME}:${TEST_NAME}:${TEST_STATUS}${\n}</arg>
</arguments>
<msg level="INFO" timestamp="20161202 21:43:58.136" html="yes">Appended to file '&lt;a href="file:///tmp/root/11941/obmc-robot/logs/test_history.txt"&gt;/tmp/root/11941/obmc-robot/logs/test_history.txt&lt;/a&gt;'.</msg>
<status endtime="20161202 21:43:58.136" starttime="20161202 21:43:58.135" status="PASS"></status>
</kw>
<status endtime="20161202 21:43:58.136" starttime="20161202 21:43:58.126" status="PASS"></status>
</kw>
<status endtime="20161202 21:43:58.136" starttime="20161202 21:43:58.121" status="PASS"></status>
</kw>
<kw name="Stop SOL Console Logging" library="utils">
<doc>Login to BMC and Stop the obmc-console-client process.</doc>
<assign>
<var>${sol_log}</var>
</assign>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg level="FAIL" timestamp="20161202 21:43:58.139">Dictionary does not contain key 'host'.</msg>
<status endtime="20161202 21:43:58.139" starttime="20161202 21:43:58.138" status="FAIL"></status>
</kw>
<msg level="INFO" timestamp="20161202 21:43:58.139">${has_host} = False</msg>
<status endtime="20161202 21:43:58.139" starttime="20161202 21:43:58.138" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status endtime="20161202 21:43:58.142" starttime="20161202 21:43:58.142" status="PASS"></status>
</kw>
<status endtime="20161202 21:43:58.142" starttime="20161202 21:43:58.139" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<kw name="User input SSH and HTTPs Ports" library="connection_client">
<doc>Update the global SSH and HTTPs port variable for QEMU</doc>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${SSH_PORT}</arg>
</arguments>
<assign>
<var>${port_num}</var>
</assign>
<msg level="INFO" timestamp="20161202 21:43:58.146">${port_num} = 22</msg>
<status endtime="20161202 21:43:58.146" starttime="20161202 21:43:58.146" status="PASS"></status>
</kw>
<kw name="Replace Variables" library="BuiltIn">
<doc>Replaces variables in the given text with their current values.</doc>
<arguments>
<arg>${port_num}</arg>
</arguments>
<assign>
<var>${SSH_PORT}</var>
</assign>
<msg level="INFO" timestamp="20161202 21:43:58.146">${SSH_PORT} = 22</msg>
<status endtime="20161202 21:43:58.146" starttime="20161202 21:43:58.146" status="PASS"></status>
</kw>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${HTTPS_PORT}</arg>
</arguments>
<assign>
<var>${https_num}</var>
</assign>
<msg level="INFO" timestamp="20161202 21:43:58.147">${https_num} = 443</msg>
<status endtime="20161202 21:43:58.147" starttime="20161202 21:43:58.147" status="PASS"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${AUTH_URI}</arg>
<arg>https://${OPENBMC_HOST}:${https_num}</arg>
</arguments>
<msg level="INFO" timestamp="20161202 21:43:58.148">${AUTH_URI} = https://9.3.23.30:443</msg>
<status endtime="20161202 21:43:58.148" starttime="20161202 21:43:58.147" status="PASS"></status>
</kw>
<status endtime="20161202 21:43:58.148" starttime="20161202 21:43:58.145" status="PASS"></status>
</kw>
<status endtime="20161202 21:43:58.148" starttime="20161202 21:43:58.142" status="PASS"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg level="FAIL" timestamp="20161202 21:43:58.149">Dictionary does not contain key 'port'.</msg>
<status endtime="20161202 21:43:58.149" starttime="20161202 21:43:58.148" status="FAIL"></status>
</kw>
<msg level="INFO" timestamp="20161202 21:43:58.149">${has_port} = False</msg>
<status endtime="20161202 21:43:58.149" starttime="20161202 21:43:58.148" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keywords" library="BuiltIn">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
</arguments>
<status endtime="20161202 21:43:58.153" starttime="20161202 21:43:58.152" status="PASS"></status>
</kw>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status endtime="20161202 21:43:58.153" starttime="20161202 21:43:58.153" status="PASS"></status>
</kw>
<status endtime="20161202 21:43:58.153" starttime="20161202 21:43:58.152" status="PASS"></status>
</kw>
<status endtime="20161202 21:43:58.153" starttime="20161202 21:43:58.149" status="PASS"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg level="INFO" timestamp="20161202 21:43:58.154">Logging into '9.3.23.30:22' as 'root'.</msg>
<msg level="INFO" timestamp="20161202 21:44:02.902">Read output: 7[r[999;999H[6n</msg>
<status endtime="20161202 21:44:02.902" starttime="20161202 21:43:58.154" status="PASS"></status>
</kw>
<status endtime="20161202 21:44:02.903" starttime="20161202 21:43:58.137" status="PASS"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>ls ${file_path}-${LOG_TIME}_* | cut -d'_' -f 2</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${pid}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20161202 21:44:02.904">Executing command 'ls /tmp/obmc-console.log-20161202214242842453_* | cut -d'_' -f 2'.</msg>
<msg level="INFO" timestamp="20161202 21:44:03.013">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20161202 21:44:03.014">${pid} = 876</msg>
<msg level="INFO" timestamp="20161202 21:44:03.014">${stderr} = </msg>
<status endtime="20161202 21:44:03.014" starttime="20161202 21:44:02.903" status="PASS"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg level="INFO" timestamp="20161202 21:44:03.014">Length is 0</msg>
<status endtime="20161202 21:44:03.015" starttime="20161202 21:44:03.014" status="PASS"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>ps ax | grep ${pid} | grep -v grep</arg>
<arg>return_stdout=False</arg>
<arg>return_rc=True</arg>
</arguments>
<assign>
<var>${rc}</var>
</assign>
<msg level="INFO" timestamp="20161202 21:44:03.015">Executing command 'ps ax | grep 876 | grep -v grep'.</msg>
<msg level="INFO" timestamp="20161202 21:44:03.414">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20161202 21:44:03.414">${rc} = 0</msg>
<status endtime="20161202 21:44:03.414" starttime="20161202 21:44:03.015" status="PASS"></status>
</kw>
<kw name="Return From Keyword If" library="BuiltIn">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${rc}' == '${1}'</arg>
<arg>No obmc-console-client process running</arg>
</arguments>
<status endtime="20161202 21:44:03.419" starttime="20161202 21:44:03.415" status="PASS"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>kill -s KILL ${pid}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${console}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20161202 21:44:03.420">Executing command 'kill -s KILL 876'.</msg>
<msg level="INFO" timestamp="20161202 21:44:03.507">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20161202 21:44:03.507">${console} = </msg>
<msg level="INFO" timestamp="20161202 21:44:03.507">${stderr} = </msg>
<status endtime="20161202 21:44:03.507" starttime="20161202 21:44:03.420" status="PASS"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg level="INFO" timestamp="20161202 21:44:03.508">Length is 0</msg>
<status endtime="20161202 21:44:03.508" starttime="20161202 21:44:03.507" status="PASS"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Current Client PID:${pid}</arg>
</arguments>
<msg level="INFO" timestamp="20161202 21:44:03.508">Current Client PID:876</msg>
<status endtime="20161202 21:44:03.508" starttime="20161202 21:44:03.508" status="PASS"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>cat ${file_path}-${LOG_TIME}_${pid}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${console}</var>
<var>${stderr}</var>
</assign>
<msg level="INFO" timestamp="20161202 21:44:03.509">Executing command 'cat /tmp/obmc-console.log-20161202214242842453_876'.</msg>
<msg level="INFO" timestamp="20161202 21:44:03.605">Command exited with return code 0.</msg>
<msg level="INFO" timestamp="20161202 21:44:03.605">${console} =   3.72047|ISTEP  6. 3
  4.16033|ISTEP  6. 4
  4.16120|ISTEP  6. 5
  9.32154|HWAS|PRESENT&gt; DIMM[03]=A0A0A0A0A0A0A0A0
  9.32154|HWAS|PRESENT&gt; Membuf[04]=CCCC000000000000
  9.32155|HWAS|PRESENT&gt; Pro...</msg>
<msg level="INFO" timestamp="20161202 21:44:03.605">${stderr} = </msg>
<status endtime="20161202 21:44:03.605" starttime="20161202 21:44:03.508" status="PASS"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg level="INFO" timestamp="20161202 21:44:03.606">Length is 0</msg>
<status endtime="20161202 21:44:03.606" starttime="20161202 21:44:03.606" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20161202 21:44:03.606">${sol_log} =   3.72047|ISTEP  6. 3
  4.16033|ISTEP  6. 4
  4.16120|ISTEP  6. 5
  9.32154|HWAS|PRESENT&gt; DIMM[03]=A0A0A0A0A0A0A0A0
  9.32154|HWAS|PRESENT&gt; Membuf[04]=CCCC000000000000
  9.32155|HWAS|PRESENT&gt; Pro...</msg>
<status endtime="20161202 21:44:03.606" starttime="20161202 21:43:58.137" status="PASS"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${sol_log}</arg>
</arguments>
<msg level="INFO" timestamp="20161202 21:44:03.607">  3.72047|ISTEP  6. 3
  4.16033|ISTEP  6. 4
  4.16120|ISTEP  6. 5
  9.32154|HWAS|PRESENT&gt; DIMM[03]=A0A0A0A0A0A0A0A0
  9.32154|HWAS|PRESENT&gt; Membuf[04]=CCCC000000000000
  9.32155|HWAS|PRESENT&gt; Proc[05]=C000000000000000
  9.44739|ISTEP  6. 6
  9.55504|ISTEP  6. 7
 12.61566|ISTEP  6. 8
 12.65327|ISTEP  6. 9
 15.25011|ISTEP  6.10
 15.26940|ISTEP  6.11
 17.02503|ISTEP  6.12
 17.02692|ISTEP  6.13
 17.02748|ISTEP  7. 1
 17.08626|ISTEP  7. 2
 17.20987|ISTEP  7. 3
 17.24202|ISTEP  7. 4
 17.28292|ISTEP  7. 5
 17.50403|ISTEP  7. 6
 17.53247|ISTEP  7. 7
 17.74759|ISTEP  7. 8
 17.89118|ISTEP  7. 9
 17.89208|ISTEP  8. 1
 18.05568|ISTEP  8. 2
 18.87182|ISTEP  8. 3
 18.88176|ISTEP  8. 4
 19.15330|ISTEP  8. 5
 19.15405|ISTEP  8. 6
 19.87606|ISTEP  8. 7
 19.87674|ISTEP  8. 8
 19.97115|ISTEP  9. 1
 20.56172|ISTEP  9. 2
 21.44005|ISTEP 10. 1
 21.72667|ISTEP 10. 2
 22.76072|ISTEP 10. 3
 22.76140|ISTEP 10. 4
 22.76198|ISTEP 10. 5
 22.76295|ISTEP 10. 6
 22.76356|ISTEP 10. 7
 22.76435|ISTEP 10. 8
 22.76499|ISTEP 10. 9
 22.76593|ISTEP 10.10
 22.76653|ISTEP 10.11
 22.76714|ISTEP 10.12
 22.76810|ISTEP 10.13
 22.76870|ISTEP 10.14
 22.76950|ISTEP 11. 1
 22.96152|ISTEP 11. 2
 22.96240|ISTEP 11. 3
 23.13054|ISTEP 11. 4
 23.28652|ISTEP 11. 5
 23.43681|ISTEP 11. 6
 25.02619|ISTEP 11. 7
 25.02743|ISTEP 11. 8
 25.47581|ISTEP 11. 9
 25.47706|ISTEP 11.10
 25.55351|ISTEP 11.11
 25.55448|ISTEP 11.12
 25.55512|ISTEP 11.13
 25.55611|ISTEP 12. 1
 25.65690|ISTEP 12. 2
 25.72998|ISTEP 12. 3
 25.77089|ISTEP 12. 4
 26.14335|ISTEP 12. 5
 26.14425|ISTEP 13. 1
 26.24582|ISTEP 13. 2
 26.29921|ISTEP 13. 3
 26.30018|ISTEP 13. 4
 26.32205|ISTEP 13. 5
 26.32404|ISTEP 13. 6
 27.21042|ISTEP 13. 7
 27.40743|ISTEP 13. 8
 27.57385|ISTEP 13. 9
 29.19910|ISTEP 13.10
 29.23077|ISTEP 13.11
 29.32462|ISTEP 13.12
 29.32559|ISTEP 14. 1
 29.35839|ISTEP 14. 2
 29.36898|ISTEP 14. 3
 34.97710|ISTEP 14. 4
 35.02947|ISTEP 14. 5
 35.08083|ISTEP 14. 6
 35.10046|ISTEP 14. 7
 35.19222|ISTEP 14. 8
 35.19430|ISTEP 15. 1
 35.59432|ISTEP 15. 2
 35.60589|ISTEP 15. 3
 35.70769|ISTEP 16. 1
 36.87896|ISTEP 16. 2
 37.33544|ISTEP 16. 3
 37.34498|ISTEP 16. 4
 37.36258|ISTEP 18.13
 37.53411|ISTEP 18.14
 37.54257|ISTEP 21. 1
 48.61729|htmgt|OCCs are now running in ACTIVE state
 56.33307|ISTEP 21. 2
 56.33620|ISTEP 21. 3
[30256134175,5] SkiBoot skiboot-5.2.0-opdirty starting...
[30256138682,5] initial console log level: memory 7, driver 5
[30256141259,6] CPU: P8 generation processor(max 8 threads/core)
[30256143530,7] CPU: Boot CPU PIR is 0x0068 PVR is 0x004d0200
[30256146084,7] CPU: Initial max PIR set to 0x1fff
[30256521070,5] OPAL table: 0x300a6c40 .. 0x300a70b0, branch table: 0x30002000
[30256525940,5] FDT: Parsing fdt @0xff00000
[30261314433,5] XSCOM: chip 0x0 at 0x3fc0000000000 [P8 DD2.0]
[30261323317,5] XSCOM: chip 0x8 at 0x3fc4000000000 [P8 DD2.0]
[30261330024,6] XSTOP: XSCOM addr = 0x2010c82, FIR bit = 31
[30261332871,6] MFSI 0:0: Initialized
[30261334678,6] MFSI 0:2: Initialized
[30261336490,6] MFSI 0:1: Initialized
[30261338550,6] MFSI 8:0: Initialized
[30261340319,6] MFSI 8:2: Initialized
[30261342117,6] MFSI 8:1: Initialized
[30261633103,5] LPC: Bus on chip 0 PCB_Addr=0xb0020
[30261646470,5] LPC: Default bus on chip 0
[30261767333,6] MEM: parsing reserved memory from node /ibm,hostboot/reserved-memory
[30261777294,7] HOMER: Init chip 0
[30261779564,7]   PBA BAR0 : 0x0000002ffd800000
[30261781860,7]   PBA MASK0: 0x0000000000300000
[30261784196,7]   HOMER Image at 0x2ffd800000 size 4MB
[30261787562,7]   PBA BAR2 : 0x4000002ffda00000
[30261789850,7]   PBA MASK2: 0x0000000000000000
[30261791963,7]   SLW Image at 0x2ffda00000 size 1MB
[30261795022,7]   PBA BAR3 : 0x0000002fff800000
[30261797252,7]   PBA MASK3: 0x0000000000700000
[30261799469,7]   OCC Common Area at 0x2fff800000 size 8MB
[30261801940,7] HOMER: Init chip 8
[30261804380,7]   PBA BAR0 : 0x0000002ffdc00000
[30261806526,7]   PBA MASK0: 0x0000000000300000
[30261808714,7]   HOMER Image at 0x2ffdc00000 size 4MB
[30261811911,7]   PBA BAR2 : 0x4000002ffde00000
[30261814164,7]   PBA MASK2: 0x0000000000000000
[30261816268,7]   SLW Image at 0x2ffde00000 size 1MB
[30261819338,7]   PBA BAR3 : 0x0000002fff800000
[30261821515,7]   PBA MASK3: 0x0000000000700000
[30261823730,7]   OCC Common Area at 0x2fff800000 size 8MB
[30261833154,7] CPU idle state device tree init
[30261835637,4] SLW: HB-provided idle states property found
[30261970093,5] PLAT: Fixing up PSI BAR on chip 0 BAR=3fffe80000001
[30262003607,7] AST: PNOR LPC offset: 0x0c000000
[30262078001,5] PLAT: Using virtual UART
[30265157295,5] PLAT: Detected Barreleye platform
[30268891438,5] CENTAUR: Found centaur for chip 0x0 channel 0
[30268977647,5] CENTAUR:   FSI host: 0x0 cMFSI0 port 3
[30269066341,5] CENTAUR: Found centaur for chip 0x0 channel 1
[30269158520,5] CENTAUR:   FSI host: 0x0 cMFSI0 port 2
[30269241929,5] CENTAUR: Found centaur for chip 0x8 channel 0
[30269320568,5] CENTAUR:   FSI host: 0x8 cMFSI0 port 3
[30269405423,5] CENTAUR: Found centaur for chip 0x8 channel 1
[30269486408,5] CENTAUR:   FSI host: 0x8 cMFSI0 port 2
[30269572472,5] CENTAUR: Found centaur for chip 0x8 channel 4
[30269655912,5] CENTAUR:   FSI host: 0x8 cMFSI0 port 7
[30269737466,5] CENTAUR: Found centaur for chip 0x8 channel 5
[30269821750,5] CENTAUR:   FSI host: 0x8 cMFSI0 port 6
[30270036208,5] PSI[0x000]: Found PSI bridge [working=1, active=0]
[30270138754,5] PSI[0x008]: Working chip not found
[991792593,5] BT: Interface initialized, IO 0x00e4</msg>
<status endtime="20161202 21:44:03.607" starttime="20161202 21:44:03.607" status="PASS"></status>
</kw>
<status endtime="20161202 21:44:03.608" starttime="20161202 21:43:58.121" status="PASS"></status>
</kw>
<doc>Power OFF and power ON</doc>
<tags>
<tag>chassisboot</tag>
<tag>power_on_test</tag>
</tags>
<status endtime="20161202 21:44:03.608" starttime="20161202 21:42:40.439" status="PASS" critical="yes"></status>
</test>
<doc>This module will test basic power on use cases for CI</doc>
<status endtime="20161202 21:44:03.609" starttime="20161202 21:42:40.418" status="PASS"></status>
</suite>
<suite name="Test Eventlog" id="s1-s4" source="/tmp/root/11941/obmc-robot/tests/test_eventlog.robot">
<kw name="Open Connection And Log In" library="connection_client" type="setup">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg level="FAIL" timestamp="20161202 21:44:03.637">Dictionary does not contain key 'host'.</msg>
<status endtime="20161202 21:44:03.637" starttime="20161202 21:44:03.636" status="FAIL"></status>
</kw>
<msg level="INFO" timestamp="20161202 21:44:03.637">${has_host} = False</msg>
<status endtime="20161202 21:44:03.637" starttime="20161202 21:44:03.636" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status endtime="20161202 21:44:03.640" starttime="20161202 21:44:03.640" status="PASS"></status>
</kw>
<status endtime="20161202 21:44:03.640" starttime="20161202 21:44:03.637" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<kw name="User input SSH and HTTPs Ports" library="connection_client">
<doc>Update the global SSH and HTTPs port variable for QEMU</doc>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${SSH_PORT}</arg>
</arguments>
<assign>
<var>${port_num}</var>
</assign>
<msg level="INFO" timestamp="20161202 21:44:03.644">${port_num} = 22</msg>
<status endtime="20161202 21:44:03.644" starttime="20161202 21:44:03.644" status="PASS"></status>
</kw>
<kw name="Replace Variables" library="BuiltIn">
<doc>Replaces variables in the given text with their current values.</doc>
<arguments>
<arg>${port_num}</arg>
</arguments>
<assign>
<var>${SSH_PORT}</var>
</assign>
<msg level="INFO" timestamp="20161202 21:44:03.644">${SSH_PORT} = 22</msg>
<status endtime="20161202 21:44:03.644" starttime="20161202 21:44:03.644" status="PASS"></status>
</kw>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${HTTPS_PORT}</arg>
</arguments>
<assign>
<var>${https_num}</var>
</assign>
<msg level="INFO" timestamp="20161202 21:44:03.645">${https_num} = 443</msg>
<status endtime="20161202 21:44:03.645" starttime="20161202 21:44:03.645" status="PASS"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${AUTH_URI}</arg>
<arg>https://${OPENBMC_HOST}:${https_num}</arg>
</arguments>
<msg level="INFO" timestamp="20161202 21:44:03.646">${AUTH_URI} = https://9.3.23.30:443</msg>
<status endtime="20161202 21:44:03.646" starttime="20161202 21:44:03.645" status="PASS"></status>
</kw>
<status endtime="20161202 21:44:03.646" starttime="20161202 21:44:03.643" status="PASS"></status>
</kw>
<status endtime="20161202 21:44:03.646" starttime="20161202 21:44:03.641" status="PASS"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg level="FAIL" timestamp="20161202 21:44:03.647">Dictionary does not contain key 'port'.</msg>
<status endtime="20161202 21:44:03.647" starttime="20161202 21:44:03.646" status="FAIL"></status>
</kw>
<msg level="INFO" timestamp="20161202 21:44:03.647">${has_port} = False</msg>
<status endtime="20161202 21:44:03.647" starttime="20161202 21:44:03.646" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keywords" library="BuiltIn">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
</arguments>
<status endtime="20161202 21:44:03.651" starttime="20161202 21:44:03.651" status="PASS"></status>
</kw>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status endtime="20161202 21:44:03.652" starttime="20161202 21:44:03.651" status="PASS"></status>
</kw>
<status endtime="20161202 21:44:03.652" starttime="20161202 21:44:03.651" status="PASS"></status>
</kw>
<status endtime="20161202 21:44:03.652" starttime="20161202 21:44:03.647" status="PASS"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg level="INFO" timestamp="20161202 21:44:03.652">Logging into '9.3.23.30:22' as 'root'.</msg>
<msg level="INFO" timestamp="20161202 21:44:06.099">Read output: 7[r[999;999H[6n</msg>
<status endtime="20161202 21:44:06.099" starttime="20161202 21:44:03.652" status="PASS"></status>
</kw>
<status endtime="20161202 21:44:06.100" starttime="20161202 21:44:03.636" status="PASS"></status>
</kw>
<test name="clear any logs" id="s1-s4-t1">
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>/org/openbmc/records/events/action/clear</arg>
<arg>data=${NIL}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161202 21:44:06.103">${base_uri} = /org/openbmc/records/events/action/clear</msg>
<status endtime="20161202 21:44:06.103" starttime="20161202 21:44:06.102" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161202 21:44:06.103">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20161202 21:44:06.104" starttime="20161202 21:44:06.103" status="PASS"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status endtime="20161202 21:44:06.104" starttime="20161202 21:44:06.104" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161202 21:44:06.112">${msg} = URI:https://9.3.23.30:443/org/openbmc/records/events/action/clear, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status endtime="20161202 21:44:06.112" starttime="20161202 21:44:06.110" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161202 21:44:06.113">URI:https://9.3.23.30:443/org/openbmc/records/events/action/clear, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status endtime="20161202 21:44:06.113" starttime="20161202 21:44:06.113" status="PASS"></status>
</kw>
<status endtime="20161202 21:44:06.113" starttime="20161202 21:44:06.112" status="PASS"></status>
</kw>
<status endtime="20161202 21:44:06.113" starttime="20161202 21:44:06.109" status="PASS"></status>
</kw>
<status endtime="20161202 21:44:06.113" starttime="20161202 21:44:06.105" status="PASS"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161202 21:44:06.114">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20161202 21:44:06.115" starttime="20161202 21:44:06.114" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161202 21:44:06.115">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20161202 21:44:06.115" starttime="20161202 21:44:06.115" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161202 21:44:06.116">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20161202 21:44:06.116" starttime="20161202 21:44:06.115" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161202 21:44:06.116">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20161202 21:44:06.116" starttime="20161202 21:44:06.116" status="PASS"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161202 21:44:06.582">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161202 21:44:06.582">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161202 21:44:06.583" starttime="20161202 21:44:06.117" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161202 21:44:06.584">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20161202 21:44:06.584" starttime="20161202 21:44:06.583" status="PASS"></status>
</kw>
<status endtime="20161202 21:44:06.584" starttime="20161202 21:44:06.113" status="PASS"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161202 21:44:06.854">Post Request using : alias=openbmc, uri=/org/openbmc/records/events/action/clear, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161202 21:44:06.854">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20161202 21:44:06.854" starttime="20161202 21:44:06.584" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161202 21:44:06.861">${msg} = Response code:200, Content:{
  "data": 0, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20161202 21:44:06.861" starttime="20161202 21:44:06.860" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161202 21:44:06.862">Response code:200, Content:{
  "data": 0, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20161202 21:44:06.862" starttime="20161202 21:44:06.862" status="PASS"></status>
</kw>
<status endtime="20161202 21:44:06.862" starttime="20161202 21:44:06.861" status="PASS"></status>
</kw>
<status endtime="20161202 21:44:06.863" starttime="20161202 21:44:06.859" status="PASS"></status>
</kw>
<status endtime="20161202 21:44:06.863" starttime="20161202 21:44:06.855" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20161202 21:44:06.863">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161202 21:44:06.863" starttime="20161202 21:44:06.101" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161202 21:44:06.863">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20161202 21:44:06.863" starttime="20161202 21:44:06.863" status="PASS"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>/org/openbmc/records/events/</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161202 21:44:06.864">${base_uri} = /org/openbmc/records/events/</msg>
<status endtime="20161202 21:44:06.865" starttime="20161202 21:44:06.864" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161202 21:44:06.869">${msg} = URI:https://9.3.23.30:443/org/openbmc/records/events/, method:Get, args:{}</msg>
<status endtime="20161202 21:44:06.869" starttime="20161202 21:44:06.868" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161202 21:44:06.870">URI:https://9.3.23.30:443/org/openbmc/records/events/, method:Get, args:{}</msg>
<status endtime="20161202 21:44:06.870" starttime="20161202 21:44:06.870" status="PASS"></status>
</kw>
<status endtime="20161202 21:44:06.870" starttime="20161202 21:44:06.869" status="PASS"></status>
</kw>
<status endtime="20161202 21:44:06.871" starttime="20161202 21:44:06.868" status="PASS"></status>
</kw>
<status endtime="20161202 21:44:06.871" starttime="20161202 21:44:06.865" status="PASS"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161202 21:44:06.872">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20161202 21:44:06.872" starttime="20161202 21:44:06.871" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161202 21:44:06.872">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20161202 21:44:06.873" starttime="20161202 21:44:06.872" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161202 21:44:06.873">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20161202 21:44:06.873" starttime="20161202 21:44:06.873" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161202 21:44:06.874">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20161202 21:44:06.874" starttime="20161202 21:44:06.873" status="PASS"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161202 21:44:07.431">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161202 21:44:07.432">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161202 21:44:07.432" starttime="20161202 21:44:06.874" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161202 21:44:07.432">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20161202 21:44:07.432" starttime="20161202 21:44:07.432" status="PASS"></status>
</kw>
<status endtime="20161202 21:44:07.432" starttime="20161202 21:44:06.871" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161202 21:44:07.490">Get Request using : alias=openbmc, uri=/org/openbmc/records/events/, headers=None </msg>
<msg level="INFO" timestamp="20161202 21:44:07.490">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20161202 21:44:07.490" starttime="20161202 21:44:07.433" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161202 21:44:07.497">${msg} = Response code:200, Content:{
  "data": [], 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20161202 21:44:07.497" starttime="20161202 21:44:07.496" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161202 21:44:07.499">Response code:200, Content:{
  "data": [], 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20161202 21:44:07.499" starttime="20161202 21:44:07.498" status="PASS"></status>
</kw>
<status endtime="20161202 21:44:07.499" starttime="20161202 21:44:07.498" status="PASS"></status>
</kw>
<status endtime="20161202 21:44:07.499" starttime="20161202 21:44:07.495" status="PASS"></status>
</kw>
<status endtime="20161202 21:44:07.499" starttime="20161202 21:44:07.490" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20161202 21:44:07.500">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161202 21:44:07.500" starttime="20161202 21:44:06.864" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${json}</var>
</assign>
<msg level="INFO" timestamp="20161202 21:44:07.501">To JSON using : content={
  "data": [], 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161202 21:44:07.501">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161202 21:44:07.501">${json} = {u'message': u'200 OK', u'status': u'ok', u'data': []}</msg>
<status endtime="20161202 21:44:07.501" starttime="20161202 21:44:07.500" status="PASS"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${json['data']}</arg>
</arguments>
<msg level="INFO" timestamp="20161202 21:44:07.502">Length is 0</msg>
<status endtime="20161202 21:44:07.502" starttime="20161202 21:44:07.501" status="PASS"></status>
</kw>
<kw name="FFDC On Test Case Fail" library="openbmc_ffdc" type="teardown">
<doc>Generic FFDC entry point. Place holder to hook in</doc>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${TEST_STATUS}' == 'FAIL'</arg>
<arg>FFDC</arg>
</arguments>
<status endtime="20161202 21:44:07.505" starttime="20161202 21:44:07.502" status="PASS"></status>
</kw>
<kw name="Log Test Case Status" library="openbmc_ffdc_methods">
<doc>Test case execution result history.</doc>
<kw name="Create Directory" library="OperatingSystem">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>${FFDC_LOG_PATH}</arg>
</arguments>
<msg level="INFO" timestamp="20161202 21:44:07.506" html="yes">Directory '&lt;a href="file:///tmp/root/11941/obmc-robot/logs"&gt;/tmp/root/11941/obmc-robot/logs&lt;/a&gt;' already exists.</msg>
<status endtime="20161202 21:44:07.506" starttime="20161202 21:44:07.506" status="PASS"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>OperatingSystem.File Should Exist</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<assign>
<var>${exist}</var>
</assign>
<kw name="File Should Exist" library="OperatingSystem">
<doc>Fails unless the given ``path`` points to an existing file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
</arguments>
<msg level="INFO" timestamp="20161202 21:44:07.507" html="yes">File '&lt;a href="file:///tmp/root/11941/obmc-robot/logs/test_history.txt"&gt;/tmp/root/11941/obmc-robot/logs/test_history.txt&lt;/a&gt;' exists.</msg>
<status endtime="20161202 21:44:07.507" starttime="20161202 21:44:07.507" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20161202 21:44:07.507">${exist} = True</msg>
<status endtime="20161202 21:44:07.507" starttime="20161202 21:44:07.506" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${exist}' == '${False}'</arg>
<arg>Create File</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<status endtime="20161202 21:44:07.510" starttime="20161202 21:44:07.507" status="PASS"></status>
</kw>
<kw name="Get Current Time Stamp" library="openbmc_ffdc_utils">
<doc>Get the current time stamp data</doc>
<assign>
<var>${cur_time}</var>
</assign>
<kw name="Get Current Date" library="DateTime">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20161202 21:44:07.511">${cur_time} = 2016-12-02 21:44:07:510585</msg>
<status endtime="20161202 21:44:07.511" starttime="20161202 21:44:07.510" status="PASS"></status>
</kw>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20161202 21:44:07.511">${cur_time} = 20161202214407510585</msg>
<status endtime="20161202 21:44:07.511" starttime="20161202 21:44:07.511" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20161202 21:44:07.512">${cur_time} = 20161202214407510585</msg>
<status endtime="20161202 21:44:07.512" starttime="20161202 21:44:07.510" status="PASS"></status>
</kw>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
<arg>${cur_time}:${SUITE_NAME}:${TEST_NAME}:${TEST_STATUS}${\n}</arg>
</arguments>
<msg level="INFO" timestamp="20161202 21:44:07.512" html="yes">Appended to file '&lt;a href="file:///tmp/root/11941/obmc-robot/logs/test_history.txt"&gt;/tmp/root/11941/obmc-robot/logs/test_history.txt&lt;/a&gt;'.</msg>
<status endtime="20161202 21:44:07.512" starttime="20161202 21:44:07.512" status="PASS"></status>
</kw>
<status endtime="20161202 21:44:07.513" starttime="20161202 21:44:07.505" status="PASS"></status>
</kw>
<status endtime="20161202 21:44:07.513" starttime="20161202 21:44:07.502" status="PASS"></status>
</kw>
<doc>Test delete all events</doc>
<tags>
<tag>CI</tag>
<tag>clear_any_logs</tag>
</tags>
<status endtime="20161202 21:44:07.513" starttime="20161202 21:44:06.100" status="PASS" critical="yes"></status>
</test>
<test name="write a log" id="s1-s4-t2">
<kw name="create a test log">
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{EMPTY}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161202 21:44:07.514">${data} = {u'data': []}</msg>
<status endtime="20161202 21:44:07.514" starttime="20161202 21:44:07.514" status="PASS"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>/org/openbmc/records/events/action/acceptTestMessage</arg>
<arg>data=${data}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161202 21:44:07.515">${base_uri} = /org/openbmc/records/events/action/acceptTestMessage</msg>
<status endtime="20161202 21:44:07.515" starttime="20161202 21:44:07.515" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161202 21:44:07.516">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20161202 21:44:07.516" starttime="20161202 21:44:07.515" status="PASS"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status endtime="20161202 21:44:07.516" starttime="20161202 21:44:07.516" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161202 21:44:07.521">${msg} = URI:https://9.3.23.30:443/org/openbmc/records/events/action/acceptTestMessage, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status endtime="20161202 21:44:07.521" starttime="20161202 21:44:07.520" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161202 21:44:07.522">URI:https://9.3.23.30:443/org/openbmc/records/events/action/acceptTestMessage, method:Post, args:{u'data': {u'data': []}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status endtime="20161202 21:44:07.522" starttime="20161202 21:44:07.522" status="PASS"></status>
</kw>
<status endtime="20161202 21:44:07.522" starttime="20161202 21:44:07.521" status="PASS"></status>
</kw>
<status endtime="20161202 21:44:07.522" starttime="20161202 21:44:07.519" status="PASS"></status>
</kw>
<status endtime="20161202 21:44:07.522" starttime="20161202 21:44:07.517" status="PASS"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161202 21:44:07.523">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20161202 21:44:07.523" starttime="20161202 21:44:07.523" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161202 21:44:07.524">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20161202 21:44:07.524" starttime="20161202 21:44:07.524" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161202 21:44:07.524">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20161202 21:44:07.524" starttime="20161202 21:44:07.524" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161202 21:44:07.525">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20161202 21:44:07.525" starttime="20161202 21:44:07.525" status="PASS"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161202 21:44:07.854">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161202 21:44:07.854">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161202 21:44:07.854" starttime="20161202 21:44:07.525" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161202 21:44:07.854">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20161202 21:44:07.854" starttime="20161202 21:44:07.854" status="PASS"></status>
</kw>
<status endtime="20161202 21:44:07.855" starttime="20161202 21:44:07.522" status="PASS"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161202 21:44:08.166">Post Request using : alias=openbmc, uri=/org/openbmc/records/events/action/acceptTestMessage, data={"data": []},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161202 21:44:08.166">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20161202 21:44:08.166" starttime="20161202 21:44:07.855" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161202 21:44:08.170">${msg} = Response code:200, Content:{
  "data": 168, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20161202 21:44:08.170" starttime="20161202 21:44:08.169" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161202 21:44:08.171">Response code:200, Content:{
  "data": 168, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20161202 21:44:08.171" starttime="20161202 21:44:08.171" status="PASS"></status>
</kw>
<status endtime="20161202 21:44:08.171" starttime="20161202 21:44:08.170" status="PASS"></status>
</kw>
<status endtime="20161202 21:44:08.171" starttime="20161202 21:44:08.169" status="PASS"></status>
</kw>
<status endtime="20161202 21:44:08.171" starttime="20161202 21:44:08.166" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20161202 21:44:08.171">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161202 21:44:08.171" starttime="20161202 21:44:07.514" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161202 21:44:08.172">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20161202 21:44:08.172" starttime="20161202 21:44:08.172" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${json}</var>
</assign>
<msg level="INFO" timestamp="20161202 21:44:08.172">To JSON using : content={
  "data": 168, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161202 21:44:08.173">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161202 21:44:08.173">${json} = {u'message': u'200 OK', u'status': u'ok', u'data': 168}</msg>
<status endtime="20161202 21:44:08.173" starttime="20161202 21:44:08.172" status="PASS"></status>
</kw>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${json['data']}</arg>
</arguments>
<assign>
<var>${LOGID}</var>
</assign>
<msg level="INFO" timestamp="20161202 21:44:08.173">${LOGID} = 168</msg>
<status endtime="20161202 21:44:08.173" starttime="20161202 21:44:08.173" status="PASS"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>/org/openbmc/records/events/</arg>
<arg>${LOGID}</arg>
</arguments>
<assign>
<var>${uri}</var>
</assign>
<msg level="INFO" timestamp="20161202 21:44:08.174">${uri} = /org/openbmc/records/events/168</msg>
<status endtime="20161202 21:44:08.174" starttime="20161202 21:44:08.173" status="PASS"></status>
</kw>
<status endtime="20161202 21:44:08.174" starttime="20161202 21:44:07.513" status="PASS"></status>
</kw>
<kw name="FFDC On Test Case Fail" library="openbmc_ffdc" type="teardown">
<doc>Generic FFDC entry point. Place holder to hook in</doc>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${TEST_STATUS}' == 'FAIL'</arg>
<arg>FFDC</arg>
</arguments>
<status endtime="20161202 21:44:08.177" starttime="20161202 21:44:08.175" status="PASS"></status>
</kw>
<kw name="Log Test Case Status" library="openbmc_ffdc_methods">
<doc>Test case execution result history.</doc>
<kw name="Create Directory" library="OperatingSystem">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>${FFDC_LOG_PATH}</arg>
</arguments>
<msg level="INFO" timestamp="20161202 21:44:08.178" html="yes">Directory '&lt;a href="file:///tmp/root/11941/obmc-robot/logs"&gt;/tmp/root/11941/obmc-robot/logs&lt;/a&gt;' already exists.</msg>
<status endtime="20161202 21:44:08.178" starttime="20161202 21:44:08.178" status="PASS"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>OperatingSystem.File Should Exist</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<assign>
<var>${exist}</var>
</assign>
<kw name="File Should Exist" library="OperatingSystem">
<doc>Fails unless the given ``path`` points to an existing file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
</arguments>
<msg level="INFO" timestamp="20161202 21:44:08.179" html="yes">File '&lt;a href="file:///tmp/root/11941/obmc-robot/logs/test_history.txt"&gt;/tmp/root/11941/obmc-robot/logs/test_history.txt&lt;/a&gt;' exists.</msg>
<status endtime="20161202 21:44:08.179" starttime="20161202 21:44:08.179" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20161202 21:44:08.179">${exist} = True</msg>
<status endtime="20161202 21:44:08.179" starttime="20161202 21:44:08.178" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${exist}' == '${False}'</arg>
<arg>Create File</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<status endtime="20161202 21:44:08.182" starttime="20161202 21:44:08.179" status="PASS"></status>
</kw>
<kw name="Get Current Time Stamp" library="openbmc_ffdc_utils">
<doc>Get the current time stamp data</doc>
<assign>
<var>${cur_time}</var>
</assign>
<kw name="Get Current Date" library="DateTime">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20161202 21:44:08.183">${cur_time} = 2016-12-02 21:44:08:182651</msg>
<status endtime="20161202 21:44:08.183" starttime="20161202 21:44:08.182" status="PASS"></status>
</kw>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20161202 21:44:08.183">${cur_time} = 20161202214408182651</msg>
<status endtime="20161202 21:44:08.183" starttime="20161202 21:44:08.183" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20161202 21:44:08.184">${cur_time} = 20161202214408182651</msg>
<status endtime="20161202 21:44:08.184" starttime="20161202 21:44:08.182" status="PASS"></status>
</kw>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
<arg>${cur_time}:${SUITE_NAME}:${TEST_NAME}:${TEST_STATUS}${\n}</arg>
</arguments>
<msg level="INFO" timestamp="20161202 21:44:08.184" html="yes">Appended to file '&lt;a href="file:///tmp/root/11941/obmc-robot/logs/test_history.txt"&gt;/tmp/root/11941/obmc-robot/logs/test_history.txt&lt;/a&gt;'.</msg>
<status endtime="20161202 21:44:08.184" starttime="20161202 21:44:08.184" status="PASS"></status>
</kw>
<status endtime="20161202 21:44:08.184" starttime="20161202 21:44:08.177" status="PASS"></status>
</kw>
<status endtime="20161202 21:44:08.185" starttime="20161202 21:44:08.174" status="PASS"></status>
</kw>
<doc>Test create event</doc>
<tags>
<tag>CI</tag>
<tag>write_a_log</tag>
</tags>
<status endtime="20161202 21:44:08.185" starttime="20161202 21:44:07.513" status="PASS" critical="yes"></status>
</test>
<kw name="Close All Connections" library="SSHLibrary" type="teardown">
<doc>Closes all open connections.</doc>
<status endtime="20161202 21:44:08.264" starttime="20161202 21:44:08.185" status="PASS"></status>
</kw>
<doc>This suite is used for testing the error logging
capability from the host</doc>
<status endtime="20161202 21:44:08.264" starttime="20161202 21:44:03.611" status="PASS"></status>
</suite>
<suite name="Test Obmcrest" id="s1-s5" source="/tmp/root/11941/obmc-robot/tests/test_obmcrest.robot">
<test name="Get a Property" id="s1-s5-t1">
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>/org/openbmc/inventory/system/chassis/motherboard/cpu0</arg>
<arg>is_fru</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg level="INFO" timestamp="20161202 21:44:08.311">${base_uri} = /org/openbmc/inventory/system/chassis/motherboard/cpu0/attr/is_fru</msg>
<status endtime="20161202 21:44:08.311" starttime="20161202 21:44:08.310" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161202 21:44:08.315">${msg} = URI:https://9.3.23.30:443/org/openbmc/inventory/system/chassis/motherboard/cpu0/attr/is_fru, method:Get, args:{}</msg>
<status endtime="20161202 21:44:08.315" starttime="20161202 21:44:08.314" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161202 21:44:08.316">URI:https://9.3.23.30:443/org/openbmc/inventory/system/chassis/motherboard/cpu0/attr/is_fru, method:Get, args:{}</msg>
<status endtime="20161202 21:44:08.316" starttime="20161202 21:44:08.316" status="PASS"></status>
</kw>
<status endtime="20161202 21:44:08.316" starttime="20161202 21:44:08.315" status="PASS"></status>
</kw>
<status endtime="20161202 21:44:08.316" starttime="20161202 21:44:08.314" status="PASS"></status>
</kw>
<status endtime="20161202 21:44:08.316" starttime="20161202 21:44:08.311" status="PASS"></status>
</kw>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg level="INFO" timestamp="20161202 21:44:08.317">Creating Session using : alias=openbmc, url=https://9.3.23.30:443, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status endtime="20161202 21:44:08.317" starttime="20161202 21:44:08.317" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg level="INFO" timestamp="20161202 21:44:08.318">${headers} = {u'Content-Type': u'application/json'}</msg>
<status endtime="20161202 21:44:08.318" starttime="20161202 21:44:08.317" status="PASS"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg level="INFO" timestamp="20161202 21:44:08.318">@{credentials} = [ root | 0penBmc ]</msg>
<status endtime="20161202 21:44:08.318" starttime="20161202 21:44:08.318" status="PASS"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20161202 21:44:08.319">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status endtime="20161202 21:44:08.319" starttime="20161202 21:44:08.319" status="PASS"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20161202 21:44:09.265">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]},                     headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg level="INFO" timestamp="20161202 21:44:09.265">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161202 21:44:09.265" starttime="20161202 21:44:08.319" status="PASS"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg level="INFO" timestamp="20161202 21:44:09.266">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status endtime="20161202 21:44:09.266" starttime="20161202 21:44:09.266" status="PASS"></status>
</kw>
<status endtime="20161202 21:44:09.267" starttime="20161202 21:44:08.316" status="PASS"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20161202 21:44:09.473">Get Request using : alias=openbmc, uri=/org/openbmc/inventory/system/chassis/motherboard/cpu0/attr/is_fru, headers=None </msg>
<msg level="INFO" timestamp="20161202 21:44:09.474">${ret} = &lt;Response [200]&gt;</msg>
<status endtime="20161202 21:44:09.474" starttime="20161202 21:44:09.267" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg level="INFO" timestamp="20161202 21:44:09.481">${msg} = Response code:200, Content:{
  "data": 1, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20161202 21:44:09.481" starttime="20161202 21:44:09.480" status="PASS"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20161202 21:44:09.482">Response code:200, Content:{
  "data": 1, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status endtime="20161202 21:44:09.483" starttime="20161202 21:44:09.482" status="PASS"></status>
</kw>
<status endtime="20161202 21:44:09.483" starttime="20161202 21:44:09.481" status="PASS"></status>
</kw>
<status endtime="20161202 21:44:09.483" starttime="20161202 21:44:09.480" status="PASS"></status>
</kw>
<status endtime="20161202 21:44:09.483" starttime="20161202 21:44:09.474" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20161202 21:44:09.483">${resp} = &lt;Response [200]&gt;</msg>
<status endtime="20161202 21:44:09.483" starttime="20161202 21:44:08.310" status="PASS"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg level="INFO" timestamp="20161202 21:44:09.484">To JSON using : content={
  "data": 1, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg level="INFO" timestamp="20161202 21:44:09.484">To JSON using : pretty_print=False </msg>
<msg level="INFO" timestamp="20161202 21:44:09.484">${content} = {u'message': u'200 OK', u'status': u'ok', u'data': 1}</msg>
<status endtime="20161202 21:44:09.484" starttime="20161202 21:44:09.484" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20161202 21:44:09.485">${resp} = 1</msg>
<status endtime="20161202 21:44:09.485" starttime="20161202 21:44:08.309" status="PASS"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${resp}</arg>
<arg>${1}</arg>
</arguments>
<status endtime="20161202 21:44:09.486" starttime="20161202 21:44:09.485" status="PASS"></status>
</kw>
<kw name="FFDC On Test Case Fail" library="openbmc_ffdc" type="teardown">
<doc>Generic FFDC entry point. Place holder to hook in</doc>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${TEST_STATUS}' == 'FAIL'</arg>
<arg>FFDC</arg>
</arguments>
<status endtime="20161202 21:44:09.490" starttime="20161202 21:44:09.486" status="PASS"></status>
</kw>
<kw name="Log Test Case Status" library="openbmc_ffdc_methods">
<doc>Test case execution result history.</doc>
<kw name="Create Directory" library="OperatingSystem">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>${FFDC_LOG_PATH}</arg>
</arguments>
<msg level="INFO" timestamp="20161202 21:44:09.491" html="yes">Directory '&lt;a href="file:///tmp/root/11941/obmc-robot/logs"&gt;/tmp/root/11941/obmc-robot/logs&lt;/a&gt;' already exists.</msg>
<status endtime="20161202 21:44:09.492" starttime="20161202 21:44:09.491" status="PASS"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>OperatingSystem.File Should Exist</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<assign>
<var>${exist}</var>
</assign>
<kw name="File Should Exist" library="OperatingSystem">
<doc>Fails unless the given ``path`` points to an existing file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
</arguments>
<msg level="INFO" timestamp="20161202 21:44:09.492" html="yes">File '&lt;a href="file:///tmp/root/11941/obmc-robot/logs/test_history.txt"&gt;/tmp/root/11941/obmc-robot/logs/test_history.txt&lt;/a&gt;' exists.</msg>
<status endtime="20161202 21:44:09.492" starttime="20161202 21:44:09.492" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20161202 21:44:09.492">${exist} = True</msg>
<status endtime="20161202 21:44:09.493" starttime="20161202 21:44:09.492" status="PASS"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${exist}' == '${False}'</arg>
<arg>Create File</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<status endtime="20161202 21:44:09.495" starttime="20161202 21:44:09.493" status="PASS"></status>
</kw>
<kw name="Get Current Time Stamp" library="openbmc_ffdc_utils">
<doc>Get the current time stamp data</doc>
<assign>
<var>${cur_time}</var>
</assign>
<kw name="Get Current Date" library="DateTime">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20161202 21:44:09.496">${cur_time} = 2016-12-02 21:44:09:495897</msg>
<status endtime="20161202 21:44:09.496" starttime="20161202 21:44:09.496" status="PASS"></status>
</kw>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg level="INFO" timestamp="20161202 21:44:09.497">${cur_time} = 20161202214409495897</msg>
<status endtime="20161202 21:44:09.497" starttime="20161202 21:44:09.496" status="PASS"></status>
</kw>
<msg level="INFO" timestamp="20161202 21:44:09.497">${cur_time} = 20161202214409495897</msg>
<status endtime="20161202 21:44:09.497" starttime="20161202 21:44:09.495" status="PASS"></status>
</kw>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given contend to the specified file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
<arg>${cur_time}:${SUITE_NAME}:${TEST_NAME}:${TEST_STATUS}${\n}</arg>
</arguments>
<msg level="INFO" timestamp="20161202 21:44:09.497" html="yes">Appended to file '&lt;a href="file:///tmp/root/11941/obmc-robot/logs/test_history.txt"&gt;/tmp/root/11941/obmc-robot/logs/test_history.txt&lt;/a&gt;'.</msg>
<status endtime="20161202 21:44:09.498" starttime="20161202 21:44:09.497" status="PASS"></status>
</kw>
<status endtime="20161202 21:44:09.498" starttime="20161202 21:44:09.491" status="PASS"></status>
</kw>
<status endtime="20161202 21:44:09.498" starttime="20161202 21:44:09.486" status="PASS"></status>
</kw>
<tags>
<tag>Get_a_Property</tag>
</tags>
<status endtime="20161202 21:44:09.498" starttime="20161202 21:44:08.309" status="PASS" critical="yes"></status>
</test>
<doc>This suite will verifiy all OpenBMC rest interfaces
Details of valid interfaces can be found here...
https://github.com/openbmc/docs/blob/master/rest-api.md</doc>
<status endtime="20161202 21:44:09.498" starttime="20161202 21:44:08.266" status="PASS"></status>
</suite>
<status endtime="20161202 21:44:09.501" starttime="20161202 21:42:27.686" status="PASS"></status>
</suite>
<statistics>
<total>
<stat pass="7" fail="0">Critical Tests</stat>
<stat pass="7" fail="0">All Tests</stat>
</total>
<tag>
<stat pass="1" fail="0">chassisboot</stat>
<stat pass="2" fail="0">CI</stat>
<stat pass="1" fail="0">clear_any_logs</stat>
<stat pass="1" fail="0">Create_error_log_on_single_FRU</stat>
<stat pass="1" fail="0">Delete_error_log</stat>
<stat pass="1" fail="0">Get_a_Property</stat>
<stat pass="1" fail="0">power_on_test</stat>
<stat pass="1" fail="0">Test_SSL_Connection</stat>
<stat pass="1" fail="0">write_a_log</stat>
</tag>
<suite>
<stat pass="7" id="s1" name="Tests" fail="0">Tests</stat>
<stat pass="1" id="s1-s1" name="Security" fail="0">Tests.Security</stat>
<stat pass="1" id="s1-s1-s1" name="Test Ssl" fail="0">Tests.Security.Test Ssl</stat>
<stat pass="2" id="s1-s2" name="Test Association" fail="0">Tests.Test Association</stat>
<stat pass="1" id="s1-s3" name="Test Basic Poweron" fail="0">Tests.Test Basic Poweron</stat>
<stat pass="2" id="s1-s4" name="Test Eventlog" fail="0">Tests.Test Eventlog</stat>
<stat pass="1" id="s1-s5" name="Test Obmcrest" fail="0">Tests.Test Obmcrest</stat>
</suite>
</statistics>
<errors>
</errors>
</robot>
