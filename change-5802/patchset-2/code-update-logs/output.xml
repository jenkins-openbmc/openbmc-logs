<?xml version="1.0" encoding="UTF-8"?>
<robot generated="20170805 04:45:17.279" generator="Robot 3.0.2 (Python 2.7.12 on linux2)">
<suite source="/home/fspcibld/openbmc-test-automation/extended/code_update/update_bmc.robot" id="s1" name="Update Bmc">
<test id="s1-t1" name="Initiate Code Update BMC">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${LAST_KNOWN_GOOD_VERSION}' != '${EMPTY}'</arg>
<arg>Run Keyword And Return Status</arg>
<arg>Validate BMC Version</arg>
<arg>${LAST_KNOWN_GOOD_VERSION}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<msg timestamp="20170805 04:45:18.337" level="INFO">${status} = None</msg>
<status status="PASS" endtime="20170805 04:45:18.337" starttime="20170805 04:45:18.336"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${True}'</arg>
<arg>Pass Execution</arg>
<arg>The BMC already has the requested build loaded so no further action will be taken.</arg>
</arguments>
<status status="PASS" endtime="20170805 04:45:18.337" starttime="20170805 04:45:18.337"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${FORCE_UPDATE} == ${0}</arg>
<arg>Prepare BMC For Update</arg>
</arguments>
<kw name="Prepare BMC For Update">
<doc>Prerequisite operation before code update.</doc>
<kw name="Check Boot Count And Time">
<doc>Check for unexpected reboots.</doc>
<kw name="Set BMC Reset Reference Time" library="utils">
<doc>Set current boot time as a reference and increment</doc>
<kw name="Get BMC Boot Time" library="utils">
<doc>Get boot time from /proc/stat.</doc>
<assign>
<var>${cur_btime}</var>
</assign>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg timestamp="20170805 04:45:18.341" level="FAIL">Dictionary does not contain key 'host'.</msg>
<status status="FAIL" endtime="20170805 04:45:18.341" starttime="20170805 04:45:18.341"></status>
</kw>
<msg timestamp="20170805 04:45:18.341" level="INFO">${has_host} = False</msg>
<status status="PASS" endtime="20170805 04:45:18.341" starttime="20170805 04:45:18.340"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status status="PASS" endtime="20170805 04:45:18.343" starttime="20170805 04:45:18.342"></status>
</kw>
<status status="PASS" endtime="20170805 04:45:18.343" starttime="20170805 04:45:18.342"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<status status="PASS" endtime="20170805 04:45:18.343" starttime="20170805 04:45:18.343"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg timestamp="20170805 04:45:18.345" level="FAIL">Dictionary does not contain key 'port'.</msg>
<status status="FAIL" endtime="20170805 04:45:18.345" starttime="20170805 04:45:18.344"></status>
</kw>
<msg timestamp="20170805 04:45:18.345" level="INFO">${has_port} = False</msg>
<status status="PASS" endtime="20170805 04:45:18.345" starttime="20170805 04:45:18.344"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status status="PASS" endtime="20170805 04:45:18.347" starttime="20170805 04:45:18.346"></status>
</kw>
<status status="PASS" endtime="20170805 04:45:18.347" starttime="20170805 04:45:18.346"></status>
</kw>
<status status="PASS" endtime="20170805 04:45:18.347" starttime="20170805 04:45:18.345"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg timestamp="20170805 04:45:18.347" level="INFO">Logging into '9.3.86.161:22' as 'root'.</msg>
<msg timestamp="20170805 04:45:20.037" level="INFO">Read output: root@witherspoon:~#</msg>
<status status="PASS" endtime="20170805 04:45:20.037" starttime="20170805 04:45:18.347"></status>
</kw>
<status status="PASS" endtime="20170805 04:45:20.038" starttime="20170805 04:45:18.340"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>egrep '^btime ' /proc/stat | cut -f 2 -d ' '</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${output}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170805 04:45:20.038" level="INFO">Executing command 'egrep '^btime ' /proc/stat | cut -f 2 -d ' ''.</msg>
<msg timestamp="20170805 04:45:20.143" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170805 04:45:20.144" level="INFO">${output} = 1501907954</msg>
<msg timestamp="20170805 04:45:20.144" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170805 04:45:20.144" starttime="20170805 04:45:20.038"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20170805 04:45:20.144" level="INFO">Length is 0</msg>
<status status="PASS" endtime="20170805 04:45:20.144" starttime="20170805 04:45:20.144"></status>
</kw>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<assign>
<var>${btime}</var>
</assign>
<msg timestamp="20170805 04:45:20.145" level="INFO">${btime} = 1501907954</msg>
<status status="PASS" endtime="20170805 04:45:20.145" starttime="20170805 04:45:20.145"></status>
</kw>
<msg timestamp="20170805 04:45:20.145" level="INFO">${cur_btime} = 1501907954</msg>
<status status="PASS" endtime="20170805 04:45:20.145" starttime="20170805 04:45:18.339"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${BOOT_TIME} == ${0} and ${BOOT_COUNT} == ${0}</arg>
<arg>Set Global Variable</arg>
<arg>${BOOT_TIME}</arg>
<arg>${cur_btime}</arg>
<arg>ELSE IF</arg>
<arg>${cur_btime} &gt; ${BOOT_TIME}</arg>
<arg>Run Keywords</arg>
<arg>Set Global Variable</arg>
<arg>${BOOT_TIME}</arg>
<arg>${cur_btime}</arg>
<arg>AND</arg>
<arg>Set Global Variable</arg>
<arg>${BOOT_COUNT}</arg>
<arg>${BOOT_COUNT + 1}</arg>
</arguments>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${BOOT_TIME}</arg>
<arg>${cur_btime}</arg>
</arguments>
<msg timestamp="20170805 04:45:20.147" level="INFO">${BOOT_TIME} = 1501907954</msg>
<status status="PASS" endtime="20170805 04:45:20.147" starttime="20170805 04:45:20.147"></status>
</kw>
<status status="PASS" endtime="20170805 04:45:20.147" starttime="20170805 04:45:20.146"></status>
</kw>
<status status="PASS" endtime="20170805 04:45:20.147" starttime="20170805 04:45:18.339"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>\n Boot Count: ${BOOT_COUNT}</arg>
</arguments>
<status status="PASS" endtime="20170805 04:45:20.148" starttime="20170805 04:45:20.148"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>\n Boot Time: ${BOOT_TIME}</arg>
</arguments>
<status status="PASS" endtime="20170805 04:45:20.149" starttime="20170805 04:45:20.148"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${BOOT_COUNT} &gt; ${MAX_BOOT_COUNT}</arg>
<arg>Log</arg>
<arg>Phantom Reboot!!! Unexpected reboot detected</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20170805 04:45:20.149" starttime="20170805 04:45:20.149"></status>
</kw>
<status status="PASS" endtime="20170805 04:45:20.150" starttime="20170805 04:45:18.338"></status>
</kw>
<kw name="Prune Journal Log" library="utils">
<doc>Prune archived journal logs.</doc>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg timestamp="20170805 04:45:20.152" level="FAIL">Dictionary does not contain key 'host'.</msg>
<status status="FAIL" endtime="20170805 04:45:20.152" starttime="20170805 04:45:20.152"></status>
</kw>
<msg timestamp="20170805 04:45:20.153" level="INFO">${has_host} = False</msg>
<status status="PASS" endtime="20170805 04:45:20.153" starttime="20170805 04:45:20.151"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status status="PASS" endtime="20170805 04:45:20.154" starttime="20170805 04:45:20.154"></status>
</kw>
<status status="PASS" endtime="20170805 04:45:20.154" starttime="20170805 04:45:20.153"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<status status="PASS" endtime="20170805 04:45:20.155" starttime="20170805 04:45:20.155"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg timestamp="20170805 04:45:20.156" level="FAIL">Dictionary does not contain key 'port'.</msg>
<status status="FAIL" endtime="20170805 04:45:20.156" starttime="20170805 04:45:20.156"></status>
</kw>
<msg timestamp="20170805 04:45:20.156" level="INFO">${has_port} = False</msg>
<status status="PASS" endtime="20170805 04:45:20.156" starttime="20170805 04:45:20.155"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status status="PASS" endtime="20170805 04:45:20.158" starttime="20170805 04:45:20.158"></status>
</kw>
<status status="PASS" endtime="20170805 04:45:20.158" starttime="20170805 04:45:20.158"></status>
</kw>
<status status="PASS" endtime="20170805 04:45:20.158" starttime="20170805 04:45:20.157"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg timestamp="20170805 04:45:20.159" level="INFO">Logging into '9.3.86.161:22' as 'root'.</msg>
<msg timestamp="20170805 04:45:21.868" level="INFO">Read output: root@witherspoon:~#</msg>
<status status="PASS" endtime="20170805 04:45:21.868" starttime="20170805 04:45:20.159"></status>
</kw>
<status status="PASS" endtime="20170805 04:45:21.868" starttime="20170805 04:45:20.150"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>journalctl --vacuum-size=${vacuum_size}</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<assign>
<var>${output}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20170805 04:45:21.869" level="INFO">Executing command 'journalctl --vacuum-size=1M'.</msg>
<msg timestamp="20170805 04:45:21.946" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170805 04:45:21.946" level="INFO">${output} = </msg>
<msg timestamp="20170805 04:45:21.946" level="INFO">${stderr} = Vacuuming done, freed 0B of archived journals from /run/log/journal/cc6e1404d87444e8a089dfdb00a18f7d.</msg>
<msg timestamp="20170805 04:45:21.946" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20170805 04:45:21.946" starttime="20170805 04:45:21.869"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${rc}</arg>
<arg>${0}</arg>
<arg>msg=${stderr}</arg>
</arguments>
<status status="PASS" endtime="20170805 04:45:21.947" starttime="20170805 04:45:21.946"></status>
</kw>
<status status="PASS" endtime="20170805 04:45:21.947" starttime="20170805 04:45:20.150"></status>
</kw>
<kw name="Power Off Request" library="state_manager">
<doc>Select appropriate poweroff keyword.</doc>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${OBMC_STATES_VERSION}' == '${0}'</arg>
<arg>Initiate Power Off</arg>
<arg>ELSE</arg>
<arg>Initiate Host PowerOff</arg>
</arguments>
<kw name="Initiate Host PowerOff" library="state_manager">
<doc>Initiate host power off.</doc>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=${HOST_POWEROFF_TRANS}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg timestamp="20170805 04:45:21.950" level="INFO">${args} = {u'data': 'xyz.openbmc_project.State.Host.Transition.Off'}</msg>
<status status="PASS" endtime="20170805 04:45:21.950" starttime="20170805 04:45:21.949"></status>
</kw>
<kw name="Write Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>RequestedHostTransition</arg>
<arg>data=${args}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170805 04:45:21.951" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0/</msg>
<status status="PASS" endtime="20170805 04:45:21.951" starttime="20170805 04:45:21.950"></status>
</kw>
<kw name="OpenBMC Put Request" library="rest_client">
<arguments>
<arg>${base_uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170805 04:45:21.954" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170805 04:45:21.955" starttime="20170805 04:45:21.953"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170805 04:45:21.955" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170805 04:45:21.955" starttime="20170805 04:45:21.955"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170805 04:45:21.956" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170805 04:45:21.956" starttime="20170805 04:45:21.956"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170805 04:45:21.957" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170805 04:45:21.957" starttime="20170805 04:45:21.956"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170805 04:45:22.209" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170805 04:45:22.209" starttime="20170805 04:45:21.958"></status>
</kw>
<msg timestamp="20170805 04:45:22.209" level="INFO">${status} = PASS</msg>
<msg timestamp="20170805 04:45:22.209" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170805 04:45:22.209" starttime="20170805 04:45:21.957"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170805 04:45:22.210" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170805 04:45:22.210" starttime="20170805 04:45:22.209"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170805 04:45:22.211" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170805 04:45:22.211" starttime="20170805 04:45:22.210"></status>
</kw>
<status status="PASS" endtime="20170805 04:45:22.211" starttime="20170805 04:45:21.953"></status>
</kw>
<status status="PASS" endtime="20170805 04:45:22.211" starttime="20170805 04:45:21.952"></status>
</kw>
<status status="PASS" endtime="20170805 04:45:22.211" starttime="20170805 04:45:21.952"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170805 04:45:22.212" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/RequestedHostTransition</msg>
<status status="PASS" endtime="20170805 04:45:22.212" starttime="20170805 04:45:22.211"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170805 04:45:22.212" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170805 04:45:22.212" starttime="20170805 04:45:22.212"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" endtime="20170805 04:45:22.213" starttime="20170805 04:45:22.213"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Put</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170805 04:45:22.216" level="INFO">${msg} = URI:https://9.3.86.161/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, method:Put, args:{u'data': {u'data': 'xyz.openbmc_project.State.Host.Transition.Off'}, u'headers': {u'Content-Type...</msg>
<status status="PASS" endtime="20170805 04:45:22.216" starttime="20170805 04:45:22.215"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170805 04:45:22.217" level="INFO">URI:https://9.3.86.161/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, method:Put, args:{u'data': {u'data': 'xyz.openbmc_project.State.Host.Transition.Off'}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20170805 04:45:22.217" starttime="20170805 04:45:22.217"></status>
</kw>
<status status="PASS" endtime="20170805 04:45:22.217" starttime="20170805 04:45:22.216"></status>
</kw>
<status status="PASS" endtime="20170805 04:45:22.218" starttime="20170805 04:45:22.213"></status>
</kw>
<kw name="Put Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a PUT request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170805 04:45:22.505" level="INFO">Put Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, data={"data": "xyz.openbmc_project.State.Host.Transition.Off"},                     headers={u'Content-Type': u'application/json'}, allow_redirects=True </msg>
<msg timestamp="20170805 04:45:22.506" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170805 04:45:22.506" starttime="20170805 04:45:22.218"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170805 04:45:22.507" level="INFO">${msg} = Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170805 04:45:22.507" starttime="20170805 04:45:22.506"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170805 04:45:22.508" level="INFO">Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170805 04:45:22.508" starttime="20170805 04:45:22.508"></status>
</kw>
<status status="PASS" endtime="20170805 04:45:22.508" starttime="20170805 04:45:22.507"></status>
</kw>
<status status="PASS" endtime="20170805 04:45:22.508" starttime="20170805 04:45:22.506"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170805 04:45:22.509" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170805 04:45:22.509" starttime="20170805 04:45:22.509"></status>
</kw>
<msg timestamp="20170805 04:45:22.509" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170805 04:45:22.509" starttime="20170805 04:45:21.951"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170805 04:45:22.510" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170805 04:45:22.510" starttime="20170805 04:45:22.510"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${json}</var>
</assign>
<msg timestamp="20170805 04:45:22.511" level="INFO">To JSON using : content={
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170805 04:45:22.511" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170805 04:45:22.511" level="INFO">${json} = {u'status': u'ok', u'message': u'200 OK', u'data': None}</msg>
<status status="PASS" endtime="20170805 04:45:22.511" starttime="20170805 04:45:22.510"></status>
</kw>
<status status="PASS" endtime="20170805 04:45:22.511" starttime="20170805 04:45:21.950"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${wait}' == '${0}'</arg>
<arg>Return From Keyword</arg>
</arguments>
<status status="PASS" endtime="20170805 04:45:22.512" starttime="20170805 04:45:22.511"></status>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>6 min</arg>
<arg>10 sec</arg>
<arg>Is Host Off</arg>
</arguments>
<kw name="Is Host Off" library="state_manager">
<doc>Check if host state is "Off".</doc>
<kw name="Is Chassis Off" library="state_manager">
<doc>Check if chassis state is "Off".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170805 04:45:22.517" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170805 04:45:22.518" starttime="20170805 04:45:22.517"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170805 04:45:22.518" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170805 04:45:22.518" starttime="20170805 04:45:22.518"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170805 04:45:22.519" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170805 04:45:22.519" starttime="20170805 04:45:22.519"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170805 04:45:22.520" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170805 04:45:22.520" starttime="20170805 04:45:22.519"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170805 04:45:24.337" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170805 04:45:24.337" starttime="20170805 04:45:22.521"></status>
</kw>
<msg timestamp="20170805 04:45:24.337" level="INFO">${status} = PASS</msg>
<msg timestamp="20170805 04:45:24.337" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170805 04:45:24.338" starttime="20170805 04:45:22.520"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170805 04:45:24.338" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170805 04:45:24.338" starttime="20170805 04:45:24.338"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170805 04:45:24.339" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170805 04:45:24.339" starttime="20170805 04:45:24.339"></status>
</kw>
<status status="PASS" endtime="20170805 04:45:24.339" starttime="20170805 04:45:22.516"></status>
</kw>
<status status="PASS" endtime="20170805 04:45:24.339" starttime="20170805 04:45:22.516"></status>
</kw>
<status status="PASS" endtime="20170805 04:45:24.340" starttime="20170805 04:45:22.515"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170805 04:45:24.340" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" endtime="20170805 04:45:24.340" starttime="20170805 04:45:24.340"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170805 04:45:24.341" starttime="20170805 04:45:24.341"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170805 04:45:28.066" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170805 04:45:28.066" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170805 04:45:28.067" starttime="20170805 04:45:24.341"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170805 04:45:28.067" starttime="20170805 04:45:28.067"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170805 04:45:28.068" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170805 04:45:28.068" starttime="20170805 04:45:28.068"></status>
</kw>
<msg timestamp="20170805 04:45:28.068" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170805 04:45:28.068" starttime="20170805 04:45:22.514"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170805 04:45:28.069" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170805 04:45:28.069" starttime="20170805 04:45:28.068"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170805 04:45:28.070" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170805 04:45:28.070" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170805 04:45:28.070" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off'}</msg>
<status status="PASS" endtime="20170805 04:45:28.070" starttime="20170805 04:45:28.069"></status>
</kw>
<msg timestamp="20170805 04:45:28.070" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status status="PASS" endtime="20170805 04:45:28.070" starttime="20170805 04:45:22.514"></status>
</kw>
<msg timestamp="20170805 04:45:28.071" level="INFO">${power_state} = Off</msg>
<status status="PASS" endtime="20170805 04:45:28.071" starttime="20170805 04:45:22.513"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${power_state}</arg>
</arguments>
<status status="PASS" endtime="20170805 04:45:28.071" starttime="20170805 04:45:28.071"></status>
</kw>
<status status="PASS" endtime="20170805 04:45:28.071" starttime="20170805 04:45:22.513"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170805 04:45:28.076" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170805 04:45:28.076" starttime="20170805 04:45:28.075"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170805 04:45:28.077" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170805 04:45:28.077" starttime="20170805 04:45:28.077"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170805 04:45:28.078" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170805 04:45:28.078" starttime="20170805 04:45:28.077"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170805 04:45:28.078" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170805 04:45:28.078" starttime="20170805 04:45:28.078"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170805 04:45:28.267" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170805 04:45:28.267" starttime="20170805 04:45:28.079"></status>
</kw>
<msg timestamp="20170805 04:45:28.267" level="INFO">${status} = PASS</msg>
<msg timestamp="20170805 04:45:28.268" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170805 04:45:28.268" starttime="20170805 04:45:28.079"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170805 04:45:28.268" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170805 04:45:28.269" starttime="20170805 04:45:28.268"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170805 04:45:28.270" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170805 04:45:28.270" starttime="20170805 04:45:28.269"></status>
</kw>
<status status="PASS" endtime="20170805 04:45:28.270" starttime="20170805 04:45:28.075"></status>
</kw>
<status status="PASS" endtime="20170805 04:45:28.270" starttime="20170805 04:45:28.074"></status>
</kw>
<status status="PASS" endtime="20170805 04:45:28.270" starttime="20170805 04:45:28.074"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170805 04:45:28.271" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" endtime="20170805 04:45:28.271" starttime="20170805 04:45:28.270"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170805 04:45:28.271" starttime="20170805 04:45:28.271"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170805 04:45:28.535" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170805 04:45:28.535" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170805 04:45:28.536" starttime="20170805 04:45:28.272"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170805 04:45:28.536" starttime="20170805 04:45:28.536"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170805 04:45:28.537" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170805 04:45:28.537" starttime="20170805 04:45:28.537"></status>
</kw>
<msg timestamp="20170805 04:45:28.537" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170805 04:45:28.537" starttime="20170805 04:45:28.073"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170805 04:45:28.538" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170805 04:45:28.538" starttime="20170805 04:45:28.537"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170805 04:45:28.539" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170805 04:45:28.539" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170805 04:45:28.539" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Off'}</msg>
<status status="PASS" endtime="20170805 04:45:28.539" starttime="20170805 04:45:28.538"></status>
</kw>
<msg timestamp="20170805 04:45:28.539" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Off</msg>
<status status="PASS" endtime="20170805 04:45:28.539" starttime="20170805 04:45:28.072"></status>
</kw>
<msg timestamp="20170805 04:45:28.539" level="INFO">${host_state} = Off</msg>
<status status="PASS" endtime="20170805 04:45:28.540" starttime="20170805 04:45:28.072"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${host_state}</arg>
</arguments>
<status status="PASS" endtime="20170805 04:45:28.540" starttime="20170805 04:45:28.540"></status>
</kw>
<status status="PASS" endtime="20170805 04:45:28.540" starttime="20170805 04:45:22.513"></status>
</kw>
<status status="PASS" endtime="20170805 04:45:28.540" starttime="20170805 04:45:22.512"></status>
</kw>
<status status="PASS" endtime="20170805 04:45:28.540" starttime="20170805 04:45:21.948"></status>
</kw>
<status status="PASS" endtime="20170805 04:45:28.541" starttime="20170805 04:45:21.948"></status>
</kw>
<status status="PASS" endtime="20170805 04:45:28.541" starttime="20170805 04:45:21.947"></status>
</kw>
<kw name="Set Policy Setting" library="code_update_utils">
<doc>Set the given test policy</doc>
<arguments>
<arg>RESTORE_LAST_STATE</arg>
</arguments>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=${policy}</arg>
</arguments>
<assign>
<var>${valueDict}</var>
</assign>
<msg timestamp="20170805 04:45:28.542" level="INFO">${valueDict} = {u'data': u'RESTORE_LAST_STATE'}</msg>
<status status="PASS" endtime="20170805 04:45:28.542" starttime="20170805 04:45:28.541"></status>
</kw>
<kw name="Write Attribute" library="rest_client">
<arguments>
<arg>${HOST_SETTING}</arg>
<arg>power_policy</arg>
<arg>data=${valueDict}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170805 04:45:28.543" level="INFO">${base_uri} = /org/openbmc/settings/host0</msg>
<status status="PASS" endtime="20170805 04:45:28.543" starttime="20170805 04:45:28.543"></status>
</kw>
<kw name="OpenBMC Put Request" library="rest_client">
<arguments>
<arg>${base_uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170805 04:45:28.546" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170805 04:45:28.547" starttime="20170805 04:45:28.546"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170805 04:45:28.548" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170805 04:45:28.548" starttime="20170805 04:45:28.547"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170805 04:45:28.549" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170805 04:45:28.549" starttime="20170805 04:45:28.548"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170805 04:45:28.550" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170805 04:45:28.550" starttime="20170805 04:45:28.549"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170805 04:45:28.901" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170805 04:45:28.902" starttime="20170805 04:45:28.551"></status>
</kw>
<msg timestamp="20170805 04:45:28.902" level="INFO">${status} = PASS</msg>
<msg timestamp="20170805 04:45:28.902" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170805 04:45:28.902" starttime="20170805 04:45:28.550"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170805 04:45:28.902" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170805 04:45:28.903" starttime="20170805 04:45:28.902"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170805 04:45:28.903" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170805 04:45:28.904" starttime="20170805 04:45:28.903"></status>
</kw>
<status status="PASS" endtime="20170805 04:45:28.904" starttime="20170805 04:45:28.545"></status>
</kw>
<status status="PASS" endtime="20170805 04:45:28.904" starttime="20170805 04:45:28.545"></status>
</kw>
<status status="PASS" endtime="20170805 04:45:28.904" starttime="20170805 04:45:28.544"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170805 04:45:28.905" level="INFO">${base_uri} = /org/openbmc/settings/host0/attr/power_policy</msg>
<status status="PASS" endtime="20170805 04:45:28.905" starttime="20170805 04:45:28.904"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170805 04:45:28.905" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170805 04:45:28.905" starttime="20170805 04:45:28.905"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" endtime="20170805 04:45:28.906" starttime="20170805 04:45:28.906"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Put</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170805 04:45:28.908" level="INFO">${msg} = URI:https://9.3.86.161/org/openbmc/settings/host0/attr/power_policy, method:Put, args:{u'data': {u'data': u'RESTORE_LAST_STATE'}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20170805 04:45:28.908" starttime="20170805 04:45:28.907"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170805 04:45:28.909" level="INFO">URI:https://9.3.86.161/org/openbmc/settings/host0/attr/power_policy, method:Put, args:{u'data': {u'data': u'RESTORE_LAST_STATE'}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20170805 04:45:28.909" starttime="20170805 04:45:28.908"></status>
</kw>
<status status="PASS" endtime="20170805 04:45:28.909" starttime="20170805 04:45:28.908"></status>
</kw>
<status status="PASS" endtime="20170805 04:45:28.909" starttime="20170805 04:45:28.906"></status>
</kw>
<kw name="Put Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a PUT request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170805 04:45:29.310" level="INFO">Put Request using : alias=openbmc, uri=/org/openbmc/settings/host0/attr/power_policy, data={"data": "RESTORE_LAST_STATE"},                     headers={u'Content-Type': u'application/json'}, allow_redirects=True </msg>
<msg timestamp="20170805 04:45:29.311" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170805 04:45:29.311" starttime="20170805 04:45:28.910"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170805 04:45:29.312" level="INFO">${msg} = Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170805 04:45:29.312" starttime="20170805 04:45:29.311"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170805 04:45:29.313" level="INFO">Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170805 04:45:29.313" starttime="20170805 04:45:29.313"></status>
</kw>
<status status="PASS" endtime="20170805 04:45:29.313" starttime="20170805 04:45:29.312"></status>
</kw>
<status status="PASS" endtime="20170805 04:45:29.313" starttime="20170805 04:45:29.311"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170805 04:45:29.314" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170805 04:45:29.314" starttime="20170805 04:45:29.314"></status>
</kw>
<msg timestamp="20170805 04:45:29.318" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170805 04:45:29.318" starttime="20170805 04:45:28.543"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170805 04:45:29.319" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170805 04:45:29.319" starttime="20170805 04:45:29.318"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${json}</var>
</assign>
<msg timestamp="20170805 04:45:29.319" level="INFO">To JSON using : content={
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170805 04:45:29.319" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170805 04:45:29.320" level="INFO">${json} = {u'status': u'ok', u'message': u'200 OK', u'data': None}</msg>
<status status="PASS" endtime="20170805 04:45:29.320" starttime="20170805 04:45:29.319"></status>
</kw>
<status status="PASS" endtime="20170805 04:45:29.320" starttime="20170805 04:45:28.542"></status>
</kw>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_SETTING}</arg>
<arg>power_policy</arg>
</arguments>
<assign>
<var>${currentPolicy}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170805 04:45:29.326" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170805 04:45:29.327" starttime="20170805 04:45:29.326"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170805 04:45:29.327" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170805 04:45:29.328" starttime="20170805 04:45:29.327"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170805 04:45:29.328" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170805 04:45:29.328" starttime="20170805 04:45:29.328"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170805 04:45:29.329" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170805 04:45:29.329" starttime="20170805 04:45:29.329"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170805 04:45:29.599" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170805 04:45:29.599" starttime="20170805 04:45:29.330"></status>
</kw>
<msg timestamp="20170805 04:45:29.599" level="INFO">${status} = PASS</msg>
<msg timestamp="20170805 04:45:29.599" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170805 04:45:29.599" starttime="20170805 04:45:29.329"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170805 04:45:29.600" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170805 04:45:29.600" starttime="20170805 04:45:29.600"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170805 04:45:29.601" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170805 04:45:29.601" starttime="20170805 04:45:29.600"></status>
</kw>
<status status="PASS" endtime="20170805 04:45:29.601" starttime="20170805 04:45:29.325"></status>
</kw>
<status status="PASS" endtime="20170805 04:45:29.601" starttime="20170805 04:45:29.325"></status>
</kw>
<status status="PASS" endtime="20170805 04:45:29.601" starttime="20170805 04:45:29.321"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170805 04:45:29.602" level="INFO">${base_uri} = /org/openbmc/settings/host0/attr/power_policy</msg>
<status status="PASS" endtime="20170805 04:45:29.602" starttime="20170805 04:45:29.602"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170805 04:45:29.603" starttime="20170805 04:45:29.602"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170805 04:45:29.748" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/settings/host0/attr/power_policy, headers=None json=None</msg>
<msg timestamp="20170805 04:45:29.748" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170805 04:45:29.748" starttime="20170805 04:45:29.603"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170805 04:45:29.749" starttime="20170805 04:45:29.749"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170805 04:45:29.749" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170805 04:45:29.750" starttime="20170805 04:45:29.749"></status>
</kw>
<msg timestamp="20170805 04:45:29.750" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170805 04:45:29.750" starttime="20170805 04:45:29.320"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170805 04:45:29.751" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170805 04:45:29.751" starttime="20170805 04:45:29.750"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170805 04:45:29.752" level="INFO">To JSON using : content={
  "data": "RESTORE_LAST_STATE", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170805 04:45:29.752" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170805 04:45:29.752" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'RESTORE_LAST_STATE'}</msg>
<status status="PASS" endtime="20170805 04:45:29.752" starttime="20170805 04:45:29.751"></status>
</kw>
<msg timestamp="20170805 04:45:29.753" level="INFO">${currentPolicy} = RESTORE_LAST_STATE</msg>
<status status="PASS" endtime="20170805 04:45:29.753" starttime="20170805 04:45:29.320"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${currentPolicy}</arg>
<arg>${policy}</arg>
</arguments>
<status status="PASS" endtime="20170805 04:45:29.754" starttime="20170805 04:45:29.753"></status>
</kw>
<status status="PASS" endtime="20170805 04:45:29.754" starttime="20170805 04:45:28.541"></status>
</kw>
<kw name="Prepare For Update" library="code_update_utils">
<doc>Switch to update mode in progress. This method calls</doc>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{EMPTY}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170805 04:45:29.755" level="INFO">${data} = {u'data': []}</msg>
<status status="PASS" endtime="20170805 04:45:29.755" starttime="20170805 04:45:29.755"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${BMC_PREP_METHOD}</arg>
<arg>data=${data}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170805 04:45:29.760" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170805 04:45:29.761" starttime="20170805 04:45:29.760"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170805 04:45:29.761" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170805 04:45:29.761" starttime="20170805 04:45:29.761"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170805 04:45:29.762" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170805 04:45:29.762" starttime="20170805 04:45:29.762"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170805 04:45:29.763" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170805 04:45:29.763" starttime="20170805 04:45:29.762"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170805 04:45:29.945" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170805 04:45:29.945" starttime="20170805 04:45:29.764"></status>
</kw>
<msg timestamp="20170805 04:45:29.945" level="INFO">${status} = PASS</msg>
<msg timestamp="20170805 04:45:29.945" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170805 04:45:29.945" starttime="20170805 04:45:29.763"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170805 04:45:29.946" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170805 04:45:29.946" starttime="20170805 04:45:29.946"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170805 04:45:29.947" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170805 04:45:29.947" starttime="20170805 04:45:29.946"></status>
</kw>
<status status="PASS" endtime="20170805 04:45:29.947" starttime="20170805 04:45:29.758"></status>
</kw>
<status status="PASS" endtime="20170805 04:45:29.947" starttime="20170805 04:45:29.758"></status>
</kw>
<status status="PASS" endtime="20170805 04:45:29.947" starttime="20170805 04:45:29.757"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170805 04:45:29.948" level="INFO">${base_uri} = /org/openbmc/control/flash/bmc/action/PrepareForUpdate</msg>
<status status="PASS" endtime="20170805 04:45:29.948" starttime="20170805 04:45:29.947"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170805 04:45:29.949" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170805 04:45:29.949" starttime="20170805 04:45:29.948"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" endtime="20170805 04:45:29.949" starttime="20170805 04:45:29.949"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170805 04:45:29.950" starttime="20170805 04:45:29.950"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170805 04:45:30.313" level="INFO">Post Request using : alias=openbmc, uri=/org/openbmc/control/flash/bmc/action/PrepareForUpdate, data={"data": []}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20170805 04:45:30.313" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170805 04:45:30.313" starttime="20170805 04:45:29.950"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170805 04:45:30.314" starttime="20170805 04:45:30.313"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170805 04:45:30.314" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170805 04:45:30.314" starttime="20170805 04:45:30.314"></status>
</kw>
<msg timestamp="20170805 04:45:30.315" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170805 04:45:30.315" starttime="20170805 04:45:29.756"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170805 04:45:30.315" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170805 04:45:30.315" starttime="20170805 04:45:30.315"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>10s</arg>
</arguments>
<msg timestamp="20170805 04:45:40.316" level="INFO">Slept 10 seconds</msg>
<status status="PASS" endtime="20170805 04:45:40.316" starttime="20170805 04:45:30.316"></status>
</kw>
<status status="PASS" endtime="20170805 04:45:40.317" starttime="20170805 04:45:29.754"></status>
</kw>
<kw name="Check If BMC is Up" library="utils">
<doc>Wait for Host to be online. Checks every X seconds</doc>
<arguments>
<arg>20 min</arg>
<arg>10 sec</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>${max_timeout}</arg>
<arg>${interval}</arg>
<arg>Verify Ping and REST Authentication</arg>
</arguments>
<kw name="Verify Ping and REST Authentication" library="utils">
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Ping Host</arg>
<arg>${OPENBMC_HOST}</arg>
</arguments>
<assign>
<var>${l_ping}</var>
</assign>
<kw name="Ping Host" library="utils">
<arguments>
<arg>${OPENBMC_HOST}</arg>
</arguments>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${host}</arg>
<arg>msg=No host provided</arg>
</arguments>
<msg timestamp="20170805 04:45:40.320" level="INFO">Length is 10</msg>
<status status="PASS" endtime="20170805 04:45:40.320" starttime="20170805 04:45:40.320"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>ping -c 4 ${host}</arg>
</arguments>
<assign>
<var>${RC}</var>
<var>${output}</var>
</assign>
<msg timestamp="20170805 04:45:40.325" level="INFO">Running command 'ping -c 4 9.3.86.161 2&gt;&amp;1'.</msg>
<msg timestamp="20170805 04:45:43.331" level="INFO">${RC} = 0</msg>
<msg timestamp="20170805 04:45:43.331" level="INFO">${output} = PING 9.3.86.161 (9.3.86.161) 56(84) bytes of data.
64 bytes from 9.3.86.161: icmp_seq=1 ttl=62 time=6.23 ms
64 bytes from 9.3.86.161: icmp_seq=2 ttl=62 time=86.6 ms
64 bytes from 9.3.86.161: icmp_seq=...</msg>
<status status="PASS" endtime="20170805 04:45:43.331" starttime="20170805 04:45:40.320"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>RC: ${RC}\nOutput:\n${output}</arg>
</arguments>
<msg timestamp="20170805 04:45:43.334" level="INFO">RC: 0
Output:
PING 9.3.86.161 (9.3.86.161) 56(84) bytes of data.
64 bytes from 9.3.86.161: icmp_seq=1 ttl=62 time=6.23 ms
64 bytes from 9.3.86.161: icmp_seq=2 ttl=62 time=86.6 ms
64 bytes from 9.3.86.161: icmp_seq=3 ttl=62 time=0.586 ms
64 bytes from 9.3.86.161: icmp_seq=4 ttl=62 time=0.599 ms

--- 9.3.86.161 ping statistics ---
4 packets transmitted, 4 received, 0% packet loss, time 3001ms
rtt min/avg/max/mdev = 0.586/23.529/86.694/36.541 ms</msg>
<status status="PASS" endtime="20170805 04:45:43.334" starttime="20170805 04:45:43.333"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${RC}</arg>
<arg>${0}</arg>
</arguments>
<status status="PASS" endtime="20170805 04:45:43.335" starttime="20170805 04:45:43.334"></status>
</kw>
<status status="PASS" endtime="20170805 04:45:43.335" starttime="20170805 04:45:40.319"></status>
</kw>
<msg timestamp="20170805 04:45:43.335" level="INFO">${l_ping} = True</msg>
<status status="PASS" endtime="20170805 04:45:43.335" starttime="20170805 04:45:40.319"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${l_ping}' == '${False}'</arg>
<arg>Fail</arg>
<arg>msg=Ping Failed</arg>
</arguments>
<status status="PASS" endtime="20170805 04:45:43.336" starttime="20170805 04:45:43.336"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Initialize OpenBMC</arg>
</arguments>
<assign>
<var>${l_rest}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170805 04:45:43.339" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=20, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170805 04:45:43.340" starttime="20170805 04:45:43.339"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170805 04:45:43.341" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170805 04:45:43.341" starttime="20170805 04:45:43.340"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170805 04:45:43.341" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170805 04:45:43.341" starttime="20170805 04:45:43.341"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170805 04:45:43.342" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170805 04:45:43.342" starttime="20170805 04:45:43.342"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170805 04:45:43.648" level="FAIL">ConnectionError: ('Connection aborted.', error(104, 'Connection reset by peer'))</msg>
<status status="FAIL" endtime="20170805 04:45:43.649" starttime="20170805 04:45:43.343"></status>
</kw>
<msg timestamp="20170805 04:45:43.649" level="INFO">${status} = FAIL</msg>
<msg timestamp="20170805 04:45:43.649" level="INFO">${resp} = ConnectionError: ('Connection aborted.', error(104, 'Connection reset by peer'))</msg>
<status status="PASS" endtime="20170805 04:45:43.649" starttime="20170805 04:45:43.343"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170805 04:45:43.650" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20170805 04:45:43.650" level="FAIL">ConnectionError: ('Connection aborted.', error(104, 'Connection reset by peer')): FAIL != PASS</msg>
<status status="FAIL" endtime="20170805 04:45:43.650" starttime="20170805 04:45:43.649"></status>
</kw>
<status status="FAIL" endtime="20170805 04:45:43.650" starttime="20170805 04:45:43.338"></status>
</kw>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170805 04:46:03.652" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=20, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170805 04:46:03.653" starttime="20170805 04:46:03.652"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170805 04:46:03.653" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170805 04:46:03.653" starttime="20170805 04:46:03.653"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170805 04:46:03.654" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170805 04:46:03.654" starttime="20170805 04:46:03.654"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170805 04:46:03.655" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170805 04:46:03.655" starttime="20170805 04:46:03.654"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170805 04:46:23.678" level="WARN">Retrying (Retry(total=2, connect=None, read=None, redirect=None, status=None)) after connection broken by 'ConnectTimeoutError(&lt;urllib3.connection.VerifiedHTTPSConnection object at 0x3fffa8630910&gt;, 'Connection to 9.3.86.161 timed out. (connect timeout=20.0)')': /login</msg>
<msg timestamp="20170805 04:46:43.899" level="WARN">Retrying (Retry(total=1, connect=None, read=None, redirect=None, status=None)) after connection broken by 'ConnectTimeoutError(&lt;urllib3.connection.VerifiedHTTPSConnection object at 0x3fffa8630390&gt;, 'Connection to 9.3.86.161 timed out. (connect timeout=20.0)')': /login</msg>
<msg timestamp="20170805 04:47:10.933" level="FAIL">ReadTimeout: HTTPSConnectionPool(host='9.3.86.161', port=443): Read timed out. (read timeout=20.0)</msg>
<status status="FAIL" endtime="20170805 04:47:10.934" starttime="20170805 04:46:03.656"></status>
</kw>
<msg timestamp="20170805 04:47:10.934" level="INFO">${status} = FAIL</msg>
<msg timestamp="20170805 04:47:10.934" level="INFO">${resp} = ReadTimeout: HTTPSConnectionPool(host='9.3.86.161', port=443): Read timed out. (read timeout=20.0)</msg>
<status status="PASS" endtime="20170805 04:47:10.934" starttime="20170805 04:46:03.655"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170805 04:47:10.935" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20170805 04:47:10.935" level="FAIL">ReadTimeout: HTTPSConnectionPool(host='9.3.86.161', port=443): Read timed out. (read timeout=20.0): FAIL != PASS</msg>
<status status="FAIL" endtime="20170805 04:47:10.935" starttime="20170805 04:47:10.934"></status>
</kw>
<status status="FAIL" endtime="20170805 04:47:10.935" starttime="20170805 04:46:03.651"></status>
</kw>
<msg timestamp="20170805 04:47:10.935" level="FAIL">Keyword 'Post Login Request' failed after retrying for 40 seconds. The last error was: ReadTimeout: HTTPSConnectionPool(host='9.3.86.161', port=443): Read timed out. (read timeout=20.0): FAIL != PASS</msg>
<status status="FAIL" endtime="20170805 04:47:10.935" starttime="20170805 04:45:43.338"></status>
</kw>
<status status="FAIL" endtime="20170805 04:47:10.935" starttime="20170805 04:45:43.337"></status>
</kw>
<msg timestamp="20170805 04:47:10.936" level="INFO">${l_rest} = False</msg>
<status status="PASS" endtime="20170805 04:47:10.936" starttime="20170805 04:45:43.336"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${l_rest}' == '${False}'</arg>
<arg>Fail</arg>
<arg>msg=REST Authentication Failed</arg>
</arguments>
<kw name="Fail" library="BuiltIn">
<doc>Fails the test with the given message and optionally alters its tags.</doc>
<arguments>
<arg>msg=REST Authentication Failed</arg>
</arguments>
<msg timestamp="20170805 04:47:10.937" level="FAIL">REST Authentication Failed</msg>
<status status="FAIL" endtime="20170805 04:47:10.937" starttime="20170805 04:47:10.937"></status>
</kw>
<status status="FAIL" endtime="20170805 04:47:10.937" starttime="20170805 04:47:10.936"></status>
</kw>
<status status="FAIL" endtime="20170805 04:47:10.937" starttime="20170805 04:45:40.318"></status>
</kw>
<kw name="Verify Ping and REST Authentication" library="utils">
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Ping Host</arg>
<arg>${OPENBMC_HOST}</arg>
</arguments>
<assign>
<var>${l_ping}</var>
</assign>
<kw name="Ping Host" library="utils">
<arguments>
<arg>${OPENBMC_HOST}</arg>
</arguments>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${host}</arg>
<arg>msg=No host provided</arg>
</arguments>
<msg timestamp="20170805 04:47:20.940" level="INFO">Length is 10</msg>
<status status="PASS" endtime="20170805 04:47:20.940" starttime="20170805 04:47:20.939"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>ping -c 4 ${host}</arg>
</arguments>
<assign>
<var>${RC}</var>
<var>${output}</var>
</assign>
<msg timestamp="20170805 04:47:20.959" level="INFO">Running command 'ping -c 4 9.3.86.161 2&gt;&amp;1'.</msg>
<msg timestamp="20170805 04:47:23.955" level="INFO">${RC} = 0</msg>
<msg timestamp="20170805 04:47:23.955" level="INFO">${output} = PING 9.3.86.161 (9.3.86.161) 56(84) bytes of data.
64 bytes from 9.3.86.161: icmp_seq=1 ttl=62 time=2.12 ms
64 bytes from 9.3.86.161: icmp_seq=2 ttl=62 time=0.578 ms
64 bytes from 9.3.86.161: icmp_seq...</msg>
<status status="PASS" endtime="20170805 04:47:23.956" starttime="20170805 04:47:20.940"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>RC: ${RC}\nOutput:\n${output}</arg>
</arguments>
<msg timestamp="20170805 04:47:23.975" level="INFO">RC: 0
Output:
PING 9.3.86.161 (9.3.86.161) 56(84) bytes of data.
64 bytes from 9.3.86.161: icmp_seq=1 ttl=62 time=2.12 ms
64 bytes from 9.3.86.161: icmp_seq=2 ttl=62 time=0.578 ms
64 bytes from 9.3.86.161: icmp_seq=3 ttl=62 time=1.96 ms
64 bytes from 9.3.86.161: icmp_seq=4 ttl=62 time=0.645 ms

--- 9.3.86.161 ping statistics ---
4 packets transmitted, 4 received, 0% packet loss, time 3001ms
rtt min/avg/max/mdev = 0.578/1.329/2.127/0.720 ms</msg>
<status status="PASS" endtime="20170805 04:47:23.975" starttime="20170805 04:47:23.972"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${RC}</arg>
<arg>${0}</arg>
</arguments>
<status status="PASS" endtime="20170805 04:47:23.978" starttime="20170805 04:47:23.977"></status>
</kw>
<status status="PASS" endtime="20170805 04:47:23.978" starttime="20170805 04:47:20.939"></status>
</kw>
<msg timestamp="20170805 04:47:23.979" level="INFO">${l_ping} = True</msg>
<status status="PASS" endtime="20170805 04:47:23.979" starttime="20170805 04:47:20.938"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${l_ping}' == '${False}'</arg>
<arg>Fail</arg>
<arg>msg=Ping Failed</arg>
</arguments>
<status status="PASS" endtime="20170805 04:47:23.981" starttime="20170805 04:47:23.980"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Initialize OpenBMC</arg>
</arguments>
<assign>
<var>${l_rest}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170805 04:47:23.986" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=20, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170805 04:47:23.990" starttime="20170805 04:47:23.984"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170805 04:47:23.991" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170805 04:47:23.991" starttime="20170805 04:47:23.990"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170805 04:47:23.991" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170805 04:47:23.991" starttime="20170805 04:47:23.991"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170805 04:47:23.992" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170805 04:47:23.992" starttime="20170805 04:47:23.992"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170805 04:47:44.017" level="FAIL">ReadTimeout: HTTPSConnectionPool(host='9.3.86.161', port=443): Read timed out. (read timeout=20.0)</msg>
<status status="FAIL" endtime="20170805 04:47:44.017" starttime="20170805 04:47:23.993"></status>
</kw>
<msg timestamp="20170805 04:47:44.018" level="INFO">${status} = FAIL</msg>
<msg timestamp="20170805 04:47:44.018" level="INFO">${resp} = ReadTimeout: HTTPSConnectionPool(host='9.3.86.161', port=443): Read timed out. (read timeout=20.0)</msg>
<status status="PASS" endtime="20170805 04:47:44.018" starttime="20170805 04:47:23.992"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170805 04:47:44.019" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20170805 04:47:44.019" level="FAIL">ReadTimeout: HTTPSConnectionPool(host='9.3.86.161', port=443): Read timed out. (read timeout=20.0): FAIL != PASS</msg>
<status status="FAIL" endtime="20170805 04:47:44.019" starttime="20170805 04:47:44.018"></status>
</kw>
<status status="FAIL" endtime="20170805 04:47:44.019" starttime="20170805 04:47:23.984"></status>
</kw>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170805 04:48:04.021" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=20, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170805 04:48:04.022" starttime="20170805 04:48:04.020"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170805 04:48:04.023" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170805 04:48:04.023" starttime="20170805 04:48:04.022"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170805 04:48:04.023" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170805 04:48:04.023" starttime="20170805 04:48:04.023"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170805 04:48:04.024" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170805 04:48:04.024" starttime="20170805 04:48:04.024"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170805 04:48:04.283" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170805 04:48:04.283" starttime="20170805 04:48:04.025"></status>
</kw>
<msg timestamp="20170805 04:48:04.283" level="INFO">${status} = PASS</msg>
<msg timestamp="20170805 04:48:04.283" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170805 04:48:04.283" starttime="20170805 04:48:04.025"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170805 04:48:04.284" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170805 04:48:04.284" starttime="20170805 04:48:04.283"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170805 04:48:04.285" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170805 04:48:04.285" starttime="20170805 04:48:04.284"></status>
</kw>
<status status="PASS" endtime="20170805 04:48:04.285" starttime="20170805 04:48:04.019"></status>
</kw>
<status status="PASS" endtime="20170805 04:48:04.285" starttime="20170805 04:47:23.983"></status>
</kw>
<status status="PASS" endtime="20170805 04:48:04.285" starttime="20170805 04:47:23.982"></status>
</kw>
<msg timestamp="20170805 04:48:04.285" level="INFO">${l_rest} = True</msg>
<status status="PASS" endtime="20170805 04:48:04.285" starttime="20170805 04:47:23.982"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${l_rest}' == '${False}'</arg>
<arg>Fail</arg>
<arg>msg=REST Authentication Failed</arg>
</arguments>
<status status="PASS" endtime="20170805 04:48:04.286" starttime="20170805 04:48:04.285"></status>
</kw>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg timestamp="20170805 04:48:04.288" level="FAIL">Dictionary does not contain key 'host'.</msg>
<status status="FAIL" endtime="20170805 04:48:04.288" starttime="20170805 04:48:04.287"></status>
</kw>
<msg timestamp="20170805 04:48:04.288" level="INFO">${has_host} = False</msg>
<status status="PASS" endtime="20170805 04:48:04.288" starttime="20170805 04:48:04.287"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status status="PASS" endtime="20170805 04:48:04.289" starttime="20170805 04:48:04.289"></status>
</kw>
<status status="PASS" endtime="20170805 04:48:04.289" starttime="20170805 04:48:04.288"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<status status="PASS" endtime="20170805 04:48:04.290" starttime="20170805 04:48:04.290"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg timestamp="20170805 04:48:04.291" level="FAIL">Dictionary does not contain key 'port'.</msg>
<status status="FAIL" endtime="20170805 04:48:04.291" starttime="20170805 04:48:04.291"></status>
</kw>
<msg timestamp="20170805 04:48:04.291" level="INFO">${has_port} = False</msg>
<status status="PASS" endtime="20170805 04:48:04.291" starttime="20170805 04:48:04.290"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status status="PASS" endtime="20170805 04:48:04.293" starttime="20170805 04:48:04.293"></status>
</kw>
<status status="PASS" endtime="20170805 04:48:04.293" starttime="20170805 04:48:04.292"></status>
</kw>
<status status="PASS" endtime="20170805 04:48:04.293" starttime="20170805 04:48:04.292"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg timestamp="20170805 04:48:04.294" level="INFO">Logging into '9.3.86.161:22' as 'root'.</msg>
<msg timestamp="20170805 04:48:06.241" level="INFO">Read output: root@witherspoon:~#</msg>
<status status="PASS" endtime="20170805 04:48:06.242" starttime="20170805 04:48:04.294"></status>
</kw>
<status status="PASS" endtime="20170805 04:48:06.242" starttime="20170805 04:48:04.286"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>hostname</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${system}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170805 04:48:06.243" level="INFO">Executing command 'hostname'.</msg>
<msg timestamp="20170805 04:48:06.324" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170805 04:48:06.324" level="INFO">${system} = witherspoon</msg>
<msg timestamp="20170805 04:48:06.324" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170805 04:48:06.324" starttime="20170805 04:48:06.242"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20170805 04:48:06.324" level="INFO">Length is 0</msg>
<status status="PASS" endtime="20170805 04:48:06.325" starttime="20170805 04:48:06.324"></status>
</kw>
<status status="PASS" endtime="20170805 04:48:06.325" starttime="20170805 04:47:20.938"></status>
</kw>
<status status="PASS" endtime="20170805 04:48:06.325" starttime="20170805 04:45:40.318"></status>
</kw>
<status status="PASS" endtime="20170805 04:48:06.325" starttime="20170805 04:45:40.317"></status>
</kw>
<kw name="Check Boot Count And Time">
<doc>Check for unexpected reboots.</doc>
<kw name="Set BMC Reset Reference Time" library="utils">
<doc>Set current boot time as a reference and increment</doc>
<kw name="Get BMC Boot Time" library="utils">
<doc>Get boot time from /proc/stat.</doc>
<assign>
<var>${cur_btime}</var>
</assign>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg timestamp="20170805 04:48:06.328" level="FAIL">Dictionary does not contain key 'host'.</msg>
<status status="FAIL" endtime="20170805 04:48:06.328" starttime="20170805 04:48:06.327"></status>
</kw>
<msg timestamp="20170805 04:48:06.328" level="INFO">${has_host} = False</msg>
<status status="PASS" endtime="20170805 04:48:06.328" starttime="20170805 04:48:06.327"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status status="PASS" endtime="20170805 04:48:06.329" starttime="20170805 04:48:06.329"></status>
</kw>
<status status="PASS" endtime="20170805 04:48:06.329" starttime="20170805 04:48:06.328"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<status status="PASS" endtime="20170805 04:48:06.330" starttime="20170805 04:48:06.330"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg timestamp="20170805 04:48:06.331" level="FAIL">Dictionary does not contain key 'port'.</msg>
<status status="FAIL" endtime="20170805 04:48:06.331" starttime="20170805 04:48:06.331"></status>
</kw>
<msg timestamp="20170805 04:48:06.331" level="INFO">${has_port} = False</msg>
<status status="PASS" endtime="20170805 04:48:06.331" starttime="20170805 04:48:06.330"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status status="PASS" endtime="20170805 04:48:06.333" starttime="20170805 04:48:06.333"></status>
</kw>
<status status="PASS" endtime="20170805 04:48:06.333" starttime="20170805 04:48:06.333"></status>
</kw>
<status status="PASS" endtime="20170805 04:48:06.333" starttime="20170805 04:48:06.332"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg timestamp="20170805 04:48:06.334" level="INFO">Logging into '9.3.86.161:22' as 'root'.</msg>
<msg timestamp="20170805 04:48:08.027" level="INFO">Read output: root@witherspoon:~#</msg>
<status status="PASS" endtime="20170805 04:48:08.027" starttime="20170805 04:48:06.334"></status>
</kw>
<status status="PASS" endtime="20170805 04:48:08.028" starttime="20170805 04:48:06.326"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>egrep '^btime ' /proc/stat | cut -f 2 -d ' '</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${output}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170805 04:48:08.028" level="INFO">Executing command 'egrep '^btime ' /proc/stat | cut -f 2 -d ' ''.</msg>
<msg timestamp="20170805 04:48:08.105" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170805 04:48:08.105" level="INFO">${output} = 1501908373</msg>
<msg timestamp="20170805 04:48:08.105" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170805 04:48:08.105" starttime="20170805 04:48:08.028"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20170805 04:48:08.106" level="INFO">Length is 0</msg>
<status status="PASS" endtime="20170805 04:48:08.106" starttime="20170805 04:48:08.105"></status>
</kw>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<assign>
<var>${btime}</var>
</assign>
<msg timestamp="20170805 04:48:08.107" level="INFO">${btime} = 1501908373</msg>
<status status="PASS" endtime="20170805 04:48:08.107" starttime="20170805 04:48:08.106"></status>
</kw>
<msg timestamp="20170805 04:48:08.107" level="INFO">${cur_btime} = 1501908373</msg>
<status status="PASS" endtime="20170805 04:48:08.107" starttime="20170805 04:48:06.326"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${BOOT_TIME} == ${0} and ${BOOT_COUNT} == ${0}</arg>
<arg>Set Global Variable</arg>
<arg>${BOOT_TIME}</arg>
<arg>${cur_btime}</arg>
<arg>ELSE IF</arg>
<arg>${cur_btime} &gt; ${BOOT_TIME}</arg>
<arg>Run Keywords</arg>
<arg>Set Global Variable</arg>
<arg>${BOOT_TIME}</arg>
<arg>${cur_btime}</arg>
<arg>AND</arg>
<arg>Set Global Variable</arg>
<arg>${BOOT_COUNT}</arg>
<arg>${BOOT_COUNT + 1}</arg>
</arguments>
<kw name="Run Keywords" library="BuiltIn">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Set Global Variable</arg>
<arg>${BOOT_TIME}</arg>
<arg>${cur_btime}</arg>
<arg>AND</arg>
<arg>Set Global Variable</arg>
<arg>${BOOT_COUNT}</arg>
<arg>${BOOT_COUNT + 1}</arg>
</arguments>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${BOOT_TIME}</arg>
<arg>${cur_btime}</arg>
</arguments>
<msg timestamp="20170805 04:48:08.109" level="INFO">${BOOT_TIME} = 1501908373</msg>
<status status="PASS" endtime="20170805 04:48:08.109" starttime="20170805 04:48:08.109"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${BOOT_COUNT}</arg>
<arg>${BOOT_COUNT + 1}</arg>
</arguments>
<msg timestamp="20170805 04:48:08.110" level="INFO">${BOOT_COUNT} = 1</msg>
<status status="PASS" endtime="20170805 04:48:08.110" starttime="20170805 04:48:08.110"></status>
</kw>
<status status="PASS" endtime="20170805 04:48:08.110" starttime="20170805 04:48:08.108"></status>
</kw>
<status status="PASS" endtime="20170805 04:48:08.110" starttime="20170805 04:48:08.107"></status>
</kw>
<status status="PASS" endtime="20170805 04:48:08.110" starttime="20170805 04:48:06.326"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>\n Boot Count: ${BOOT_COUNT}</arg>
</arguments>
<status status="PASS" endtime="20170805 04:48:08.111" starttime="20170805 04:48:08.111"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>\n Boot Time: ${BOOT_TIME}</arg>
</arguments>
<status status="PASS" endtime="20170805 04:48:08.112" starttime="20170805 04:48:08.111"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${BOOT_COUNT} &gt; ${MAX_BOOT_COUNT}</arg>
<arg>Log</arg>
<arg>Phantom Reboot!!! Unexpected reboot detected</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20170805 04:48:08.112" starttime="20170805 04:48:08.112"></status>
</kw>
<status status="PASS" endtime="20170805 04:48:08.112" starttime="20170805 04:48:06.325"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Temp BMC URI Check</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Temp BMC URI Check">
<doc>Check for transient "BMC0" interface.</doc>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>/xyz/openbmc_project/state/BMC0/</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170805 04:48:08.116" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170805 04:48:08.116" starttime="20170805 04:48:08.115"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170805 04:48:08.117" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170805 04:48:08.117" starttime="20170805 04:48:08.117"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170805 04:48:08.118" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170805 04:48:08.118" starttime="20170805 04:48:08.117"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170805 04:48:08.118" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170805 04:48:08.119" starttime="20170805 04:48:08.118"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170805 04:48:08.313" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170805 04:48:08.313" starttime="20170805 04:48:08.119"></status>
</kw>
<msg timestamp="20170805 04:48:08.313" level="INFO">${status} = PASS</msg>
<msg timestamp="20170805 04:48:08.313" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170805 04:48:08.314" starttime="20170805 04:48:08.119"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170805 04:48:08.314" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170805 04:48:08.314" starttime="20170805 04:48:08.314"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170805 04:48:08.315" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170805 04:48:08.315" starttime="20170805 04:48:08.315"></status>
</kw>
<status status="PASS" endtime="20170805 04:48:08.315" starttime="20170805 04:48:08.115"></status>
</kw>
<status status="PASS" endtime="20170805 04:48:08.315" starttime="20170805 04:48:08.114"></status>
</kw>
<status status="PASS" endtime="20170805 04:48:08.316" starttime="20170805 04:48:08.114"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170805 04:48:08.316" level="INFO">${base_uri} = /xyz/openbmc_project/state/BMC0/</msg>
<status status="PASS" endtime="20170805 04:48:08.316" starttime="20170805 04:48:08.316"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170805 04:48:08.317" starttime="20170805 04:48:08.317"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170805 04:48:08.371" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/BMC0/, headers=None json=None</msg>
<msg timestamp="20170805 04:48:08.371" level="INFO">${ret} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20170805 04:48:08.371" starttime="20170805 04:48:08.317"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170805 04:48:08.372" starttime="20170805 04:48:08.372"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170805 04:48:08.373" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170805 04:48:08.373" starttime="20170805 04:48:08.372"></status>
</kw>
<msg timestamp="20170805 04:48:08.373" level="INFO">${resp} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20170805 04:48:08.373" starttime="20170805 04:48:08.113"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170805 04:48:08.374" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20170805 04:48:08.374" level="FAIL">404 != 200</msg>
<status status="FAIL" endtime="20170805 04:48:08.374" starttime="20170805 04:48:08.373"></status>
</kw>
<status status="FAIL" endtime="20170805 04:48:08.374" starttime="20170805 04:48:08.113"></status>
</kw>
<msg timestamp="20170805 04:48:08.374" level="INFO">${status} = False</msg>
<status status="PASS" endtime="20170805 04:48:08.374" starttime="20170805 04:48:08.113"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Wait For BMC Ready</arg>
<arg>ELSE</arg>
<arg>Wait For Temp BMC Ready</arg>
</arguments>
<kw name="Wait For BMC Ready" library="state_manager">
<doc>Check BMC state and wait for BMC Ready.</doc>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>BMC_READY</arg>
<arg>HOST_POWERED_OFF</arg>
</arguments>
<assign>
<var>@{states}</var>
</assign>
<msg timestamp="20170805 04:48:08.376" level="INFO">@{states} = [ BMC_READY | HOST_POWERED_OFF ]</msg>
<status status="PASS" endtime="20170805 04:48:08.376" starttime="20170805 04:48:08.375"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${OBMC_STATES_VERSION}' == '${0}'</arg>
<arg>Wait Until Keyword Succeeds</arg>
<arg>10 min</arg>
<arg>10 sec</arg>
<arg>Verify BMC State</arg>
<arg>${states}</arg>
<arg>ELSE</arg>
<arg>Wait Until Keyword Succeeds</arg>
<arg>10 min</arg>
<arg>10 sec</arg>
<arg>Is BMC Ready</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>10 min</arg>
<arg>10 sec</arg>
<arg>Is BMC Ready</arg>
</arguments>
<kw name="Is BMC Ready" library="state_manager">
<doc>Check if BMC state is Ready.</doc>
<kw name="Get BMC State" library="state_manager">
<doc>Return the state of the BMC.</doc>
<assign>
<var>${bmc_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${BMC_STATE_URI}</arg>
<arg>CurrentBMCState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170805 04:48:08.381" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170805 04:48:08.381" starttime="20170805 04:48:08.381"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170805 04:48:08.382" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170805 04:48:08.382" starttime="20170805 04:48:08.382"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170805 04:48:08.383" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170805 04:48:08.383" starttime="20170805 04:48:08.382"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170805 04:48:08.384" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170805 04:48:08.384" starttime="20170805 04:48:08.383"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170805 04:48:08.619" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170805 04:48:08.620" starttime="20170805 04:48:08.384"></status>
</kw>
<msg timestamp="20170805 04:48:08.620" level="INFO">${status} = PASS</msg>
<msg timestamp="20170805 04:48:08.620" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170805 04:48:08.620" starttime="20170805 04:48:08.384"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170805 04:48:08.620" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170805 04:48:08.621" starttime="20170805 04:48:08.620"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170805 04:48:08.621" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170805 04:48:08.621" starttime="20170805 04:48:08.621"></status>
</kw>
<status status="PASS" endtime="20170805 04:48:08.622" starttime="20170805 04:48:08.380"></status>
</kw>
<status status="PASS" endtime="20170805 04:48:08.622" starttime="20170805 04:48:08.380"></status>
</kw>
<status status="PASS" endtime="20170805 04:48:08.622" starttime="20170805 04:48:08.379"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170805 04:48:08.623" level="INFO">${base_uri} = /xyz/openbmc_project/state/bmc0//attr/CurrentBMCState</msg>
<status status="PASS" endtime="20170805 04:48:08.623" starttime="20170805 04:48:08.622"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170805 04:48:08.623" starttime="20170805 04:48:08.623"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170805 04:48:08.714" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/bmc0//attr/CurrentBMCState, headers=None json=None</msg>
<msg timestamp="20170805 04:48:08.714" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170805 04:48:08.714" starttime="20170805 04:48:08.624"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170805 04:48:08.715" starttime="20170805 04:48:08.715"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170805 04:48:08.716" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170805 04:48:08.716" starttime="20170805 04:48:08.715"></status>
</kw>
<msg timestamp="20170805 04:48:08.716" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170805 04:48:08.716" starttime="20170805 04:48:08.378"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170805 04:48:08.717" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170805 04:48:08.717" starttime="20170805 04:48:08.716"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170805 04:48:08.717" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.BMC.BMCState.Ready", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170805 04:48:08.717" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170805 04:48:08.717" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.BMC.BMCState.Ready'}</msg>
<status status="PASS" endtime="20170805 04:48:08.717" starttime="20170805 04:48:08.717"></status>
</kw>
<msg timestamp="20170805 04:48:08.718" level="INFO">${state} = xyz.openbmc_project.State.BMC.BMCState.Ready</msg>
<status status="PASS" endtime="20170805 04:48:08.718" starttime="20170805 04:48:08.378"></status>
</kw>
<msg timestamp="20170805 04:48:08.718" level="INFO">${bmc_state} = Ready</msg>
<status status="PASS" endtime="20170805 04:48:08.718" starttime="20170805 04:48:08.377"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${BMC_READY_STATE}</arg>
<arg>${bmc_state}</arg>
</arguments>
<status status="PASS" endtime="20170805 04:48:08.719" starttime="20170805 04:48:08.718"></status>
</kw>
<status status="PASS" endtime="20170805 04:48:08.719" starttime="20170805 04:48:08.377"></status>
</kw>
<status status="PASS" endtime="20170805 04:48:08.719" starttime="20170805 04:48:08.377"></status>
</kw>
<status status="PASS" endtime="20170805 04:48:08.719" starttime="20170805 04:48:08.376"></status>
</kw>
<status status="PASS" endtime="20170805 04:48:08.719" starttime="20170805 04:48:08.375"></status>
</kw>
<status status="PASS" endtime="20170805 04:48:08.719" starttime="20170805 04:48:08.374"></status>
</kw>
<status status="PASS" endtime="20170805 04:48:08.719" starttime="20170805 04:45:18.338"></status>
</kw>
<status status="PASS" endtime="20170805 04:48:08.720" starttime="20170805 04:45:18.338"></status>
</kw>
<kw name="Run Key U" library="gen_robot_keyword">
<doc>Run keyword unconditionally (i.e. without regard to global test_mode</doc>
<arguments>
<arg>Preserve BMC Network Setting</arg>
</arguments>
<kw name="Preserve BMC Network Setting" library="code_update_utils">
<doc>Preserve Network setting</doc>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${1}</arg>
</arguments>
<assign>
<var>${policy}</var>
</assign>
<msg timestamp="20170805 04:48:08.726" level="INFO">${policy} = 1</msg>
<status status="PASS" endtime="20170805 04:48:08.726" starttime="20170805 04:48:08.726"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=${policy}</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg timestamp="20170805 04:48:08.727" level="INFO">${value} = {u'data': 1}</msg>
<status status="PASS" endtime="20170805 04:48:08.727" starttime="20170805 04:48:08.726"></status>
</kw>
<kw name="Write Attribute" library="rest_client">
<arguments>
<arg>${BMC_UPD_ATTR}</arg>
<arg>preserve_network_settings</arg>
<arg>data=${value}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170805 04:48:08.728" level="INFO">${base_uri} = /org/openbmc/control/flash/bmc</msg>
<status status="PASS" endtime="20170805 04:48:08.728" starttime="20170805 04:48:08.727"></status>
</kw>
<kw name="OpenBMC Put Request" library="rest_client">
<arguments>
<arg>${base_uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170805 04:48:08.731" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170805 04:48:08.731" starttime="20170805 04:48:08.730"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170805 04:48:08.732" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170805 04:48:08.732" starttime="20170805 04:48:08.731"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170805 04:48:08.733" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170805 04:48:08.733" starttime="20170805 04:48:08.732"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170805 04:48:08.733" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170805 04:48:08.733" starttime="20170805 04:48:08.733"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170805 04:48:08.950" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170805 04:48:08.950" starttime="20170805 04:48:08.734"></status>
</kw>
<msg timestamp="20170805 04:48:08.950" level="INFO">${status} = PASS</msg>
<msg timestamp="20170805 04:48:08.950" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170805 04:48:08.950" starttime="20170805 04:48:08.734"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170805 04:48:08.951" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170805 04:48:08.951" starttime="20170805 04:48:08.951"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170805 04:48:08.952" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170805 04:48:08.952" starttime="20170805 04:48:08.951"></status>
</kw>
<status status="PASS" endtime="20170805 04:48:08.952" starttime="20170805 04:48:08.730"></status>
</kw>
<status status="PASS" endtime="20170805 04:48:08.952" starttime="20170805 04:48:08.729"></status>
</kw>
<status status="PASS" endtime="20170805 04:48:08.952" starttime="20170805 04:48:08.729"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170805 04:48:08.953" level="INFO">${base_uri} = /org/openbmc/control/flash/bmc/attr/preserve_network_settings</msg>
<status status="PASS" endtime="20170805 04:48:08.953" starttime="20170805 04:48:08.952"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170805 04:48:08.954" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170805 04:48:08.954" starttime="20170805 04:48:08.954"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" endtime="20170805 04:48:08.954" starttime="20170805 04:48:08.954"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Put</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170805 04:48:08.956" level="INFO">${msg} = URI:https://9.3.86.161/org/openbmc/control/flash/bmc/attr/preserve_network_settings, method:Put, args:{u'data': {u'data': 1}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20170805 04:48:08.956" starttime="20170805 04:48:08.955"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170805 04:48:08.957" level="INFO">URI:https://9.3.86.161/org/openbmc/control/flash/bmc/attr/preserve_network_settings, method:Put, args:{u'data': {u'data': 1}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20170805 04:48:08.957" starttime="20170805 04:48:08.957"></status>
</kw>
<status status="PASS" endtime="20170805 04:48:08.957" starttime="20170805 04:48:08.956"></status>
</kw>
<status status="PASS" endtime="20170805 04:48:08.958" starttime="20170805 04:48:08.955"></status>
</kw>
<kw name="Put Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a PUT request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170805 04:48:09.206" level="INFO">Put Request using : alias=openbmc, uri=/org/openbmc/control/flash/bmc/attr/preserve_network_settings, data={"data": 1},                     headers={u'Content-Type': u'application/json'}, allow_redirects=True </msg>
<msg timestamp="20170805 04:48:09.206" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170805 04:48:09.206" starttime="20170805 04:48:08.958"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170805 04:48:09.208" level="INFO">${msg} = Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170805 04:48:09.208" starttime="20170805 04:48:09.207"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170805 04:48:09.209" level="INFO">Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170805 04:48:09.209" starttime="20170805 04:48:09.208"></status>
</kw>
<status status="PASS" endtime="20170805 04:48:09.209" starttime="20170805 04:48:09.208"></status>
</kw>
<status status="PASS" endtime="20170805 04:48:09.210" starttime="20170805 04:48:09.207"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170805 04:48:09.210" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170805 04:48:09.210" starttime="20170805 04:48:09.210"></status>
</kw>
<msg timestamp="20170805 04:48:09.211" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170805 04:48:09.211" starttime="20170805 04:48:08.728"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170805 04:48:09.212" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170805 04:48:09.212" starttime="20170805 04:48:09.211"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${json}</var>
</assign>
<msg timestamp="20170805 04:48:09.212" level="INFO">To JSON using : content={
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170805 04:48:09.213" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170805 04:48:09.213" level="INFO">${json} = {u'status': u'ok', u'message': u'200 OK', u'data': None}</msg>
<status status="PASS" endtime="20170805 04:48:09.213" starttime="20170805 04:48:09.212"></status>
</kw>
<status status="PASS" endtime="20170805 04:48:09.213" starttime="20170805 04:48:08.727"></status>
</kw>
<kw name="Read Properties" library="rest_client">
<arguments>
<arg>${BMC_UPD_ATTR}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170805 04:48:09.217" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170805 04:48:09.217" starttime="20170805 04:48:09.216"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170805 04:48:09.217" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170805 04:48:09.218" starttime="20170805 04:48:09.217"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170805 04:48:09.218" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170805 04:48:09.218" starttime="20170805 04:48:09.218"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170805 04:48:09.219" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170805 04:48:09.219" starttime="20170805 04:48:09.218"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170805 04:48:09.467" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170805 04:48:09.467" starttime="20170805 04:48:09.220"></status>
</kw>
<msg timestamp="20170805 04:48:09.467" level="INFO">${status} = PASS</msg>
<msg timestamp="20170805 04:48:09.467" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170805 04:48:09.467" starttime="20170805 04:48:09.219"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170805 04:48:09.468" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170805 04:48:09.468" starttime="20170805 04:48:09.467"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170805 04:48:09.468" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170805 04:48:09.469" starttime="20170805 04:48:09.468"></status>
</kw>
<status status="PASS" endtime="20170805 04:48:09.469" starttime="20170805 04:48:09.215"></status>
</kw>
<status status="PASS" endtime="20170805 04:48:09.469" starttime="20170805 04:48:09.215"></status>
</kw>
<status status="PASS" endtime="20170805 04:48:09.469" starttime="20170805 04:48:09.214"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170805 04:48:09.469" level="INFO">${base_uri} = /org/openbmc/control/flash/bmc</msg>
<status status="PASS" endtime="20170805 04:48:09.470" starttime="20170805 04:48:09.469"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170805 04:48:09.470" starttime="20170805 04:48:09.470"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170805 04:48:09.666" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/control/flash/bmc, headers=None json=None</msg>
<msg timestamp="20170805 04:48:09.666" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170805 04:48:09.666" starttime="20170805 04:48:09.470"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170805 04:48:09.667" starttime="20170805 04:48:09.667"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170805 04:48:09.667" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170805 04:48:09.668" starttime="20170805 04:48:09.667"></status>
</kw>
<msg timestamp="20170805 04:48:09.668" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170805 04:48:09.668" starttime="20170805 04:48:09.214"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170805 04:48:09.668" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170805 04:48:09.669" starttime="20170805 04:48:09.668"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170805 04:48:09.669" level="INFO">To JSON using : content={
  "data": {
    "auto_apply": 0, 
    "clear_persistent_files": 0, 
    "filename": "", 
    "preserve_network_settings": 1, 
    "restore_application_defaults": 0, 
    "status": "Idle", 
    "update_kernel_and_apps": 0
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170805 04:48:09.669" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170805 04:48:09.669" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': {u'status': u'Idle', u'update_kernel_and_apps': 0, u'clear_persistent_files': 0, u'auto_apply': 0, u'filename': u'', u'preserve_network_settings': 1,...</msg>
<status status="PASS" endtime="20170805 04:48:09.669" starttime="20170805 04:48:09.669"></status>
</kw>
<msg timestamp="20170805 04:48:09.670" level="INFO">${data} = {u'status': u'Idle', u'update_kernel_and_apps': 0, u'clear_persistent_files': 0, u'auto_apply': 0, u'filename': u'', u'preserve_network_settings': 1, u'restore_application_defaults': 0}</msg>
<status status="PASS" endtime="20170805 04:48:09.670" starttime="20170805 04:48:09.213"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${data['preserve_network_settings']}</arg>
<arg>${1}</arg>
<arg>msg=0 indicates network is not preserved</arg>
</arguments>
<status status="PASS" endtime="20170805 04:48:09.670" starttime="20170805 04:48:09.670"></status>
</kw>
<status status="PASS" endtime="20170805 04:48:09.671" starttime="20170805 04:48:08.725"></status>
</kw>
<status status="PASS" endtime="20170805 04:48:09.671" starttime="20170805 04:48:08.720"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>SCP Tar Image File To BMC \ ${FILE_PATH}</arg>
</arguments>
<kw name="SCP Tar Image File to BMC" library="code_update_utils">
<doc>Copy BMC tar image to BMC.</doc>
<arguments>
<arg>/home/fspcibld/obmc-phosphor-image-witherspoon-20170805043559.static.mtd.all.tar</arg>
</arguments>
<kw name="Open Connection for SCP" library="connection_client">
<kw name="Import Library" library="BuiltIn">
<doc>Imports a library with the given name and optional arguments.</doc>
<arguments>
<arg>SCPLibrary</arg>
<arg>WITH NAME</arg>
<arg>scp</arg>
</arguments>
<status status="PASS" endtime="20170805 04:48:09.689" starttime="20170805 04:48:09.680"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' == '${EMPTY}'</arg>
<arg>scp.Open connection</arg>
<arg>${OPENBMC_HOST}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>scp.Open connection</arg>
<arg>${OPENBMC_HOST}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
</arguments>
<kw name="Open Connection" library="scp">
<doc>Opens a new SCP connection to the given host.</doc>
<arguments>
<arg>${OPENBMC_HOST}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
</arguments>
<status status="PASS" endtime="20170805 04:48:10.947" starttime="20170805 04:48:09.690"></status>
</kw>
<status status="PASS" endtime="20170805 04:48:10.947" starttime="20170805 04:48:09.689"></status>
</kw>
<status status="PASS" endtime="20170805 04:48:10.947" starttime="20170805 04:48:09.679"></status>
</kw>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg timestamp="20170805 04:48:10.949" level="FAIL">Dictionary does not contain key 'host'.</msg>
<status status="FAIL" endtime="20170805 04:48:10.949" starttime="20170805 04:48:10.948"></status>
</kw>
<msg timestamp="20170805 04:48:10.949" level="INFO">${has_host} = False</msg>
<status status="PASS" endtime="20170805 04:48:10.949" starttime="20170805 04:48:10.948"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status status="PASS" endtime="20170805 04:48:10.950" starttime="20170805 04:48:10.950"></status>
</kw>
<status status="PASS" endtime="20170805 04:48:10.950" starttime="20170805 04:48:10.949"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<status status="PASS" endtime="20170805 04:48:10.951" starttime="20170805 04:48:10.951"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg timestamp="20170805 04:48:10.952" level="FAIL">Dictionary does not contain key 'port'.</msg>
<status status="FAIL" endtime="20170805 04:48:10.952" starttime="20170805 04:48:10.952"></status>
</kw>
<msg timestamp="20170805 04:48:10.952" level="INFO">${has_port} = False</msg>
<status status="PASS" endtime="20170805 04:48:10.952" starttime="20170805 04:48:10.951"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status status="PASS" endtime="20170805 04:48:10.954" starttime="20170805 04:48:10.954"></status>
</kw>
<status status="PASS" endtime="20170805 04:48:10.954" starttime="20170805 04:48:10.954"></status>
</kw>
<status status="PASS" endtime="20170805 04:48:10.954" starttime="20170805 04:48:10.953"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg timestamp="20170805 04:48:10.955" level="INFO">Logging into '9.3.86.161:22' as 'root'.</msg>
<msg timestamp="20170805 04:48:12.962" level="INFO">Read output: root@witherspoon:~#</msg>
<status status="PASS" endtime="20170805 04:48:12.963" starttime="20170805 04:48:10.955"></status>
</kw>
<status status="PASS" endtime="20170805 04:48:12.963" starttime="20170805 04:48:10.947"></status>
</kw>
<kw name="Loop SCP Retry" library="code_update_utils">
<doc>Try transferring the file 4 times.</doc>
<arguments>
<arg>${image_file_path}</arg>
</arguments>
<kw type="for" name="${index} IN RANGE [ 0 | 4 ]">
<kw type="foritem" name="${index} = 0">
<kw name="Retry SCP" library="code_update_utils">
<doc>Delete the incomplete file and scp file.</doc>
<arguments>
<arg>${image_file_path}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/tmp/flashimg</arg>
</arguments>
<assign>
<var>${targ_file_path}</var>
</assign>
<msg timestamp="20170805 04:48:12.965" level="INFO">${targ_file_path} = /tmp/flashimg</msg>
<status status="PASS" endtime="20170805 04:48:12.965" starttime="20170805 04:48:12.964"></status>
</kw>
<kw name="Execute Command On BMC" library="utils">
<doc>Execute given command on BMC and return output.</doc>
<arguments>
<arg>rm -f /tmp/flashimg</arg>
</arguments>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${command}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170805 04:48:12.965" level="INFO">Executing command 'rm -f /tmp/flashimg'.</msg>
<msg timestamp="20170805 04:48:13.036" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170805 04:48:13.036" level="INFO">${stdout} = </msg>
<msg timestamp="20170805 04:48:13.036" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170805 04:48:13.036" starttime="20170805 04:48:12.965"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20170805 04:48:13.037" level="INFO">Length is 0</msg>
<status status="PASS" endtime="20170805 04:48:13.037" starttime="20170805 04:48:13.036"></status>
</kw>
<status status="PASS" endtime="20170805 04:48:13.037" starttime="20170805 04:48:12.965"></status>
</kw>
<kw name="Put File" library="scp">
<doc>Uploads a file to the remote machine from the local machine.</doc>
<arguments>
<arg>${image_file_path}</arg>
<arg>${targ_file_path}</arg>
</arguments>
<status status="PASS" endtime="20170805 04:48:39.977" starttime="20170805 04:48:13.037"></status>
</kw>
<kw name="Execute Command On BMC" library="utils">
<doc>Execute given command on BMC and return output.</doc>
<arguments>
<arg>ls -lh ${targ_file_path}</arg>
</arguments>
<assign>
<var>${file_size}</var>
</assign>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${command}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170805 04:48:39.979" level="INFO">Executing command 'ls -lh /tmp/flashimg'.</msg>
<msg timestamp="20170805 04:48:40.035" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170805 04:48:40.036" level="INFO">${stdout} = -rw-r--r--    1 root     root       36.4M Aug  5 04:48 /tmp/flashimg</msg>
<msg timestamp="20170805 04:48:40.036" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170805 04:48:40.036" starttime="20170805 04:48:39.979"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20170805 04:48:40.036" level="INFO">Length is 0</msg>
<status status="PASS" endtime="20170805 04:48:40.036" starttime="20170805 04:48:40.036"></status>
</kw>
<msg timestamp="20170805 04:48:40.037" level="INFO">${file_size} = -rw-r--r--    1 root     root       36.4M Aug  5 04:48 /tmp/flashimg</msg>
<status status="PASS" endtime="20170805 04:48:40.037" starttime="20170805 04:48:39.978"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${file_size}</arg>
<arg>32.0M</arg>
<arg>msg=Incomplete file transfer.</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${file_size}</arg>
<arg>32.0M</arg>
<arg>msg=Incomplete file transfer.</arg>
</arguments>
<msg timestamp="20170805 04:48:40.038" level="FAIL">Incomplete file transfer.: '-rw-r--r--    1 root     root       36.4M Aug  5 04:48 /tmp/flashimg' does not contain '32.0M'</msg>
<status status="FAIL" endtime="20170805 04:48:40.038" starttime="20170805 04:48:40.037"></status>
</kw>
<msg timestamp="20170805 04:48:40.038" level="INFO">${status} = False</msg>
<status status="PASS" endtime="20170805 04:48:40.038" starttime="20170805 04:48:40.037"></status>
</kw>
<msg timestamp="20170805 04:48:40.038" level="INFO">${status} = False</msg>
<status status="PASS" endtime="20170805 04:48:40.038" starttime="20170805 04:48:12.964"></status>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${True}'</arg>
</arguments>
<status status="PASS" endtime="20170805 04:48:40.039" starttime="20170805 04:48:40.039"></status>
</kw>
<status status="PASS" endtime="20170805 04:48:40.039" starttime="20170805 04:48:12.964"></status>
</kw>
<kw type="foritem" name="${index} = 1">
<kw name="Retry SCP" library="code_update_utils">
<doc>Delete the incomplete file and scp file.</doc>
<arguments>
<arg>${image_file_path}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/tmp/flashimg</arg>
</arguments>
<assign>
<var>${targ_file_path}</var>
</assign>
<msg timestamp="20170805 04:48:40.040" level="INFO">${targ_file_path} = /tmp/flashimg</msg>
<status status="PASS" endtime="20170805 04:48:40.040" starttime="20170805 04:48:40.040"></status>
</kw>
<kw name="Execute Command On BMC" library="utils">
<doc>Execute given command on BMC and return output.</doc>
<arguments>
<arg>rm -f /tmp/flashimg</arg>
</arguments>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${command}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170805 04:48:40.041" level="INFO">Executing command 'rm -f /tmp/flashimg'.</msg>
<msg timestamp="20170805 04:48:40.146" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170805 04:48:40.146" level="INFO">${stdout} = </msg>
<msg timestamp="20170805 04:48:40.146" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170805 04:48:40.146" starttime="20170805 04:48:40.041"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20170805 04:48:40.147" level="INFO">Length is 0</msg>
<status status="PASS" endtime="20170805 04:48:40.147" starttime="20170805 04:48:40.147"></status>
</kw>
<status status="PASS" endtime="20170805 04:48:40.147" starttime="20170805 04:48:40.040"></status>
</kw>
<kw name="Put File" library="scp">
<doc>Uploads a file to the remote machine from the local machine.</doc>
<arguments>
<arg>${image_file_path}</arg>
<arg>${targ_file_path}</arg>
</arguments>
<status status="PASS" endtime="20170805 04:49:06.469" starttime="20170805 04:48:40.147"></status>
</kw>
<kw name="Execute Command On BMC" library="utils">
<doc>Execute given command on BMC and return output.</doc>
<arguments>
<arg>ls -lh ${targ_file_path}</arg>
</arguments>
<assign>
<var>${file_size}</var>
</assign>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${command}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170805 04:49:06.471" level="INFO">Executing command 'ls -lh /tmp/flashimg'.</msg>
<msg timestamp="20170805 04:49:06.548" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170805 04:49:06.548" level="INFO">${stdout} = -rw-r--r--    1 root     root       36.4M Aug  5 04:49 /tmp/flashimg</msg>
<msg timestamp="20170805 04:49:06.548" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170805 04:49:06.548" starttime="20170805 04:49:06.470"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20170805 04:49:06.548" level="INFO">Length is 0</msg>
<status status="PASS" endtime="20170805 04:49:06.548" starttime="20170805 04:49:06.548"></status>
</kw>
<msg timestamp="20170805 04:49:06.549" level="INFO">${file_size} = -rw-r--r--    1 root     root       36.4M Aug  5 04:49 /tmp/flashimg</msg>
<status status="PASS" endtime="20170805 04:49:06.549" starttime="20170805 04:49:06.470"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${file_size}</arg>
<arg>32.0M</arg>
<arg>msg=Incomplete file transfer.</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${file_size}</arg>
<arg>32.0M</arg>
<arg>msg=Incomplete file transfer.</arg>
</arguments>
<msg timestamp="20170805 04:49:06.550" level="FAIL">Incomplete file transfer.: '-rw-r--r--    1 root     root       36.4M Aug  5 04:49 /tmp/flashimg' does not contain '32.0M'</msg>
<status status="FAIL" endtime="20170805 04:49:06.550" starttime="20170805 04:49:06.549"></status>
</kw>
<msg timestamp="20170805 04:49:06.550" level="INFO">${status} = False</msg>
<status status="PASS" endtime="20170805 04:49:06.550" starttime="20170805 04:49:06.549"></status>
</kw>
<msg timestamp="20170805 04:49:06.550" level="INFO">${status} = False</msg>
<status status="PASS" endtime="20170805 04:49:06.550" starttime="20170805 04:48:40.039"></status>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${True}'</arg>
</arguments>
<status status="PASS" endtime="20170805 04:49:06.551" starttime="20170805 04:49:06.551"></status>
</kw>
<status status="PASS" endtime="20170805 04:49:06.551" starttime="20170805 04:48:40.039"></status>
</kw>
<kw type="foritem" name="${index} = 2">
<kw name="Retry SCP" library="code_update_utils">
<doc>Delete the incomplete file and scp file.</doc>
<arguments>
<arg>${image_file_path}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/tmp/flashimg</arg>
</arguments>
<assign>
<var>${targ_file_path}</var>
</assign>
<msg timestamp="20170805 04:49:06.552" level="INFO">${targ_file_path} = /tmp/flashimg</msg>
<status status="PASS" endtime="20170805 04:49:06.552" starttime="20170805 04:49:06.552"></status>
</kw>
<kw name="Execute Command On BMC" library="utils">
<doc>Execute given command on BMC and return output.</doc>
<arguments>
<arg>rm -f /tmp/flashimg</arg>
</arguments>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${command}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170805 04:49:06.553" level="INFO">Executing command 'rm -f /tmp/flashimg'.</msg>
<msg timestamp="20170805 04:49:06.727" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170805 04:49:06.727" level="INFO">${stdout} = </msg>
<msg timestamp="20170805 04:49:06.727" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170805 04:49:06.727" starttime="20170805 04:49:06.553"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20170805 04:49:06.727" level="INFO">Length is 0</msg>
<status status="PASS" endtime="20170805 04:49:06.728" starttime="20170805 04:49:06.727"></status>
</kw>
<status status="PASS" endtime="20170805 04:49:06.728" starttime="20170805 04:49:06.552"></status>
</kw>
<kw name="Put File" library="scp">
<doc>Uploads a file to the remote machine from the local machine.</doc>
<arguments>
<arg>${image_file_path}</arg>
<arg>${targ_file_path}</arg>
</arguments>
<status status="PASS" endtime="20170805 04:49:31.641" starttime="20170805 04:49:06.728"></status>
</kw>
<kw name="Execute Command On BMC" library="utils">
<doc>Execute given command on BMC and return output.</doc>
<arguments>
<arg>ls -lh ${targ_file_path}</arg>
</arguments>
<assign>
<var>${file_size}</var>
</assign>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${command}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170805 04:49:31.643" level="INFO">Executing command 'ls -lh /tmp/flashimg'.</msg>
<msg timestamp="20170805 04:49:31.702" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170805 04:49:31.702" level="INFO">${stdout} = -rw-r--r--    1 root     root       36.4M Aug  5 04:49 /tmp/flashimg</msg>
<msg timestamp="20170805 04:49:31.702" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170805 04:49:31.702" starttime="20170805 04:49:31.642"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20170805 04:49:31.703" level="INFO">Length is 0</msg>
<status status="PASS" endtime="20170805 04:49:31.703" starttime="20170805 04:49:31.703"></status>
</kw>
<msg timestamp="20170805 04:49:31.703" level="INFO">${file_size} = -rw-r--r--    1 root     root       36.4M Aug  5 04:49 /tmp/flashimg</msg>
<status status="PASS" endtime="20170805 04:49:31.703" starttime="20170805 04:49:31.642"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${file_size}</arg>
<arg>32.0M</arg>
<arg>msg=Incomplete file transfer.</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${file_size}</arg>
<arg>32.0M</arg>
<arg>msg=Incomplete file transfer.</arg>
</arguments>
<msg timestamp="20170805 04:49:31.704" level="FAIL">Incomplete file transfer.: '-rw-r--r--    1 root     root       36.4M Aug  5 04:49 /tmp/flashimg' does not contain '32.0M'</msg>
<status status="FAIL" endtime="20170805 04:49:31.705" starttime="20170805 04:49:31.704"></status>
</kw>
<msg timestamp="20170805 04:49:31.705" level="INFO">${status} = False</msg>
<status status="PASS" endtime="20170805 04:49:31.705" starttime="20170805 04:49:31.704"></status>
</kw>
<msg timestamp="20170805 04:49:31.705" level="INFO">${status} = False</msg>
<status status="PASS" endtime="20170805 04:49:31.705" starttime="20170805 04:49:06.551"></status>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${True}'</arg>
</arguments>
<status status="PASS" endtime="20170805 04:49:31.706" starttime="20170805 04:49:31.705"></status>
</kw>
<status status="PASS" endtime="20170805 04:49:31.706" starttime="20170805 04:49:06.551"></status>
</kw>
<kw type="foritem" name="${index} = 3">
<kw name="Retry SCP" library="code_update_utils">
<doc>Delete the incomplete file and scp file.</doc>
<arguments>
<arg>${image_file_path}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/tmp/flashimg</arg>
</arguments>
<assign>
<var>${targ_file_path}</var>
</assign>
<msg timestamp="20170805 04:49:31.707" level="INFO">${targ_file_path} = /tmp/flashimg</msg>
<status status="PASS" endtime="20170805 04:49:31.707" starttime="20170805 04:49:31.707"></status>
</kw>
<kw name="Execute Command On BMC" library="utils">
<doc>Execute given command on BMC and return output.</doc>
<arguments>
<arg>rm -f /tmp/flashimg</arg>
</arguments>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${command}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170805 04:49:31.708" level="INFO">Executing command 'rm -f /tmp/flashimg'.</msg>
<msg timestamp="20170805 04:49:31.845" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170805 04:49:31.845" level="INFO">${stdout} = </msg>
<msg timestamp="20170805 04:49:31.845" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170805 04:49:31.845" starttime="20170805 04:49:31.708"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20170805 04:49:31.846" level="INFO">Length is 0</msg>
<status status="PASS" endtime="20170805 04:49:31.846" starttime="20170805 04:49:31.846"></status>
</kw>
<status status="PASS" endtime="20170805 04:49:31.846" starttime="20170805 04:49:31.707"></status>
</kw>
<kw name="Put File" library="scp">
<doc>Uploads a file to the remote machine from the local machine.</doc>
<arguments>
<arg>${image_file_path}</arg>
<arg>${targ_file_path}</arg>
</arguments>
<status status="PASS" endtime="20170805 04:49:56.215" starttime="20170805 04:49:31.846"></status>
</kw>
<kw name="Execute Command On BMC" library="utils">
<doc>Execute given command on BMC and return output.</doc>
<arguments>
<arg>ls -lh ${targ_file_path}</arg>
</arguments>
<assign>
<var>${file_size}</var>
</assign>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${command}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170805 04:49:56.216" level="INFO">Executing command 'ls -lh /tmp/flashimg'.</msg>
<msg timestamp="20170805 04:49:56.331" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170805 04:49:56.332" level="INFO">${stdout} = -rw-r--r--    1 root     root       36.4M Aug  5 04:50 /tmp/flashimg</msg>
<msg timestamp="20170805 04:49:56.332" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170805 04:49:56.332" starttime="20170805 04:49:56.216"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20170805 04:49:56.333" level="INFO">Length is 0</msg>
<status status="PASS" endtime="20170805 04:49:56.333" starttime="20170805 04:49:56.332"></status>
</kw>
<msg timestamp="20170805 04:49:56.333" level="INFO">${file_size} = -rw-r--r--    1 root     root       36.4M Aug  5 04:50 /tmp/flashimg</msg>
<status status="PASS" endtime="20170805 04:49:56.333" starttime="20170805 04:49:56.215"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${file_size}</arg>
<arg>32.0M</arg>
<arg>msg=Incomplete file transfer.</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${file_size}</arg>
<arg>32.0M</arg>
<arg>msg=Incomplete file transfer.</arg>
</arguments>
<msg timestamp="20170805 04:49:56.334" level="FAIL">Incomplete file transfer.: '-rw-r--r--    1 root     root       36.4M Aug  5 04:50 /tmp/flashimg' does not contain '32.0M'</msg>
<status status="FAIL" endtime="20170805 04:49:56.334" starttime="20170805 04:49:56.334"></status>
</kw>
<msg timestamp="20170805 04:49:56.335" level="INFO">${status} = False</msg>
<status status="PASS" endtime="20170805 04:49:56.335" starttime="20170805 04:49:56.333"></status>
</kw>
<msg timestamp="20170805 04:49:56.335" level="INFO">${status} = False</msg>
<status status="PASS" endtime="20170805 04:49:56.335" starttime="20170805 04:49:31.706"></status>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${True}'</arg>
</arguments>
<status status="PASS" endtime="20170805 04:49:56.336" starttime="20170805 04:49:56.335"></status>
</kw>
<status status="PASS" endtime="20170805 04:49:56.336" starttime="20170805 04:49:31.706"></status>
</kw>
<status status="PASS" endtime="20170805 04:49:56.336" starttime="20170805 04:48:12.963"></status>
</kw>
<status status="PASS" endtime="20170805 04:49:56.336" starttime="20170805 04:48:12.963"></status>
</kw>
<status status="PASS" endtime="20170805 04:49:56.336" starttime="20170805 04:48:09.679"></status>
</kw>
<status status="PASS" endtime="20170805 04:49:56.336" starttime="20170805 04:48:09.671"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>Activate BMC Flash Image</arg>
</arguments>
<kw name="Activate BMC flash image" library="code_update_utils">
<doc>Activate and verify the update status</doc>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>/tmp/flashimg</arg>
</arguments>
<assign>
<var>@{img_path}</var>
</assign>
<msg timestamp="20170805 04:49:56.347" level="INFO">@{img_path} = [ /tmp/flashimg ]</msg>
<status status="PASS" endtime="20170805 04:49:56.347" starttime="20170805 04:49:56.347"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{img_path}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170805 04:49:56.348" level="INFO">${data} = {u'data': [u'/tmp/flashimg']}</msg>
<status status="PASS" endtime="20170805 04:49:56.348" starttime="20170805 04:49:56.347"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${BMC_UPD_METHOD}</arg>
<arg>data=${data}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170805 04:49:56.351" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170805 04:49:56.351" starttime="20170805 04:49:56.350"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170805 04:49:56.352" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170805 04:49:56.352" starttime="20170805 04:49:56.352"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170805 04:49:56.353" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170805 04:49:56.353" starttime="20170805 04:49:56.352"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170805 04:49:56.354" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170805 04:49:56.354" starttime="20170805 04:49:56.353"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170805 04:49:56.563" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170805 04:49:56.563" starttime="20170805 04:49:56.354"></status>
</kw>
<msg timestamp="20170805 04:49:56.563" level="INFO">${status} = PASS</msg>
<msg timestamp="20170805 04:49:56.563" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170805 04:49:56.564" starttime="20170805 04:49:56.354"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170805 04:49:56.564" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170805 04:49:56.564" starttime="20170805 04:49:56.564"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170805 04:49:56.565" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170805 04:49:56.565" starttime="20170805 04:49:56.565"></status>
</kw>
<status status="PASS" endtime="20170805 04:49:56.565" starttime="20170805 04:49:56.350"></status>
</kw>
<status status="PASS" endtime="20170805 04:49:56.565" starttime="20170805 04:49:56.349"></status>
</kw>
<status status="PASS" endtime="20170805 04:49:56.565" starttime="20170805 04:49:56.349"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170805 04:49:56.566" level="INFO">${base_uri} = /org/openbmc/control/flash/bmc/action/update</msg>
<status status="PASS" endtime="20170805 04:49:56.566" starttime="20170805 04:49:56.566"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170805 04:49:56.567" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170805 04:49:56.567" starttime="20170805 04:49:56.566"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" endtime="20170805 04:49:56.567" starttime="20170805 04:49:56.567"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170805 04:49:56.568" starttime="20170805 04:49:56.568"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170805 04:50:00.265" level="INFO">Post Request using : alias=openbmc, uri=/org/openbmc/control/flash/bmc/action/update, data={"data": ["/tmp/flashimg"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20170805 04:50:00.265" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170805 04:50:00.265" starttime="20170805 04:49:56.569"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170805 04:50:00.266" starttime="20170805 04:50:00.266"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170805 04:50:00.267" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170805 04:50:00.267" starttime="20170805 04:50:00.266"></status>
</kw>
<msg timestamp="20170805 04:50:00.267" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170805 04:50:00.267" starttime="20170805 04:49:56.348"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170805 04:50:00.268" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170805 04:50:00.268" starttime="20170805 04:50:00.267"></status>
</kw>
<kw name="Read Properties" library="rest_client">
<arguments>
<arg>${BMC_UPD_ATTR}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170805 04:50:00.271" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170805 04:50:00.271" starttime="20170805 04:50:00.271"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170805 04:50:00.272" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170805 04:50:00.272" starttime="20170805 04:50:00.272"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170805 04:50:00.273" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170805 04:50:00.273" starttime="20170805 04:50:00.272"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170805 04:50:00.274" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170805 04:50:00.274" starttime="20170805 04:50:00.273"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170805 04:50:00.521" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170805 04:50:00.521" starttime="20170805 04:50:00.274"></status>
</kw>
<msg timestamp="20170805 04:50:00.522" level="INFO">${status} = PASS</msg>
<msg timestamp="20170805 04:50:00.522" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170805 04:50:00.522" starttime="20170805 04:50:00.274"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170805 04:50:00.522" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170805 04:50:00.523" starttime="20170805 04:50:00.522"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170805 04:50:00.523" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170805 04:50:00.523" starttime="20170805 04:50:00.523"></status>
</kw>
<status status="PASS" endtime="20170805 04:50:00.524" starttime="20170805 04:50:00.270"></status>
</kw>
<status status="PASS" endtime="20170805 04:50:00.524" starttime="20170805 04:50:00.270"></status>
</kw>
<status status="PASS" endtime="20170805 04:50:00.524" starttime="20170805 04:50:00.269"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170805 04:50:00.525" level="INFO">${base_uri} = /org/openbmc/control/flash/bmc</msg>
<status status="PASS" endtime="20170805 04:50:00.525" starttime="20170805 04:50:00.524"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170805 04:50:00.526" starttime="20170805 04:50:00.525"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170805 04:50:00.657" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/control/flash/bmc, headers=None json=None</msg>
<msg timestamp="20170805 04:50:00.658" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170805 04:50:00.658" starttime="20170805 04:50:00.526"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170805 04:50:00.658" starttime="20170805 04:50:00.658"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170805 04:50:00.659" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170805 04:50:00.659" starttime="20170805 04:50:00.659"></status>
</kw>
<msg timestamp="20170805 04:50:00.659" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170805 04:50:00.659" starttime="20170805 04:50:00.268"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170805 04:50:00.660" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170805 04:50:00.660" starttime="20170805 04:50:00.660"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170805 04:50:00.661" level="INFO">To JSON using : content={
  "data": {
    "auto_apply": 0, 
    "clear_persistent_files": 0, 
    "filename": "/tmp/flashimg", 
    "preserve_network_settings": 1, 
    "restore_application_defaults": 0, 
    "status": "Verify error: update: --no-flash --ignore-mount --no-save-files --no-restore-files --no-clean-saved-files\nERROR: Image image-bmc too big for mtd0.\n", 
    "update_kernel_and_apps": 0
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170805 04:50:00.661" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170805 04:50:00.661" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': {u'status': u'Verify error: update: --no-flash --ignore-mount --no-save-files --no-restore-files --no-clean-saved-files\nERROR: Image image-bmc too b...</msg>
<status status="PASS" endtime="20170805 04:50:00.661" starttime="20170805 04:50:00.660"></status>
</kw>
<msg timestamp="20170805 04:50:00.661" level="INFO">${data} = {u'status': u'Verify error: update: --no-flash --ignore-mount --no-save-files --no-restore-files --no-clean-saved-files\nERROR: Image image-bmc too big for mtd0.\n', u'update_kernel_and_apps': 0, u'cl...</msg>
<status status="PASS" endtime="20170805 04:50:00.661" starttime="20170805 04:50:00.268"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${data["filename"]}</arg>
<arg>/tmp/flashimg</arg>
</arguments>
<status status="PASS" endtime="20170805 04:50:00.662" starttime="20170805 04:50:00.661"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${data['status']}</arg>
<arg>to apply</arg>
</arguments>
<msg timestamp="20170805 04:50:00.662" level="FAIL">'Verify error: update: --no-flash --ignore-mount --no-save-files --no-restore-files --no-clean-saved-files
ERROR: Image image-bmc too big for mtd0.
' does not contain 'to apply'</msg>
<status status="FAIL" endtime="20170805 04:50:00.663" starttime="20170805 04:50:00.662"></status>
</kw>
<status status="FAIL" endtime="20170805 04:50:00.663" starttime="20170805 04:49:56.346"></status>
</kw>
<msg timestamp="20170805 04:50:00.665" level="FAIL">'Verify error: update: --no-flash --ignore-mount --no-save-files --no-restore-files --no-clean-saved-files
ERROR: Image image-bmc too big for mtd0.
' does not contain 'to apply'</msg>
<status status="FAIL" endtime="20170805 04:50:00.665" starttime="20170805 04:49:56.336"></status>
</kw>
<kw type="teardown" name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>FFDC On Test Case Fail</arg>
</arguments>
<kw name="FFDC On Test Case Fail" library="openbmc_ffdc">
<doc>Generic FFDC entry point. Place holder to hook in</doc>
<kw name="Is Host Quiesced" library="state_manager">
<doc>Check if host state is quiesced.</doc>
<assign>
<var>${status}</var>
</assign>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170805 04:50:00.680" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170805 04:50:00.680" starttime="20170805 04:50:00.679"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170805 04:50:00.681" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170805 04:50:00.681" starttime="20170805 04:50:00.681"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170805 04:50:00.682" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170805 04:50:00.682" starttime="20170805 04:50:00.682"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170805 04:50:00.683" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170805 04:50:00.684" starttime="20170805 04:50:00.683"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170805 04:50:00.896" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170805 04:50:00.896" starttime="20170805 04:50:00.685"></status>
</kw>
<msg timestamp="20170805 04:50:00.896" level="INFO">${status} = PASS</msg>
<msg timestamp="20170805 04:50:00.896" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170805 04:50:00.896" starttime="20170805 04:50:00.684"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170805 04:50:00.897" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170805 04:50:00.897" starttime="20170805 04:50:00.896"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170805 04:50:00.897" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170805 04:50:00.898" starttime="20170805 04:50:00.897"></status>
</kw>
<status status="PASS" endtime="20170805 04:50:00.898" starttime="20170805 04:50:00.679"></status>
</kw>
<status status="PASS" endtime="20170805 04:50:00.898" starttime="20170805 04:50:00.678"></status>
</kw>
<status status="PASS" endtime="20170805 04:50:00.898" starttime="20170805 04:50:00.677"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170805 04:50:00.898" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" endtime="20170805 04:50:00.898" starttime="20170805 04:50:00.898"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170805 04:50:00.899" starttime="20170805 04:50:00.899"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170805 04:50:00.967" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170805 04:50:00.968" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170805 04:50:00.968" starttime="20170805 04:50:00.899"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170805 04:50:00.968" starttime="20170805 04:50:00.968"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170805 04:50:00.969" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170805 04:50:00.969" starttime="20170805 04:50:00.969"></status>
</kw>
<msg timestamp="20170805 04:50:00.969" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170805 04:50:00.969" starttime="20170805 04:50:00.676"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170805 04:50:00.970" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170805 04:50:00.970" starttime="20170805 04:50:00.969"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170805 04:50:00.970" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170805 04:50:00.970" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170805 04:50:00.970" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Off'}</msg>
<status status="PASS" endtime="20170805 04:50:00.970" starttime="20170805 04:50:00.970"></status>
</kw>
<msg timestamp="20170805 04:50:00.971" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Off</msg>
<status status="PASS" endtime="20170805 04:50:00.971" starttime="20170805 04:50:00.675"></status>
</kw>
<msg timestamp="20170805 04:50:00.971" level="INFO">${host_state} = Off</msg>
<status status="PASS" endtime="20170805 04:50:00.971" starttime="20170805 04:50:00.675"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal</arg>
<arg>${host_state}</arg>
<arg>Quiesced</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${host_state}</arg>
<arg>Quiesced</arg>
</arguments>
<msg timestamp="20170805 04:50:00.972" level="FAIL">Off != Quiesced</msg>
<status status="FAIL" endtime="20170805 04:50:00.972" starttime="20170805 04:50:00.972"></status>
</kw>
<msg timestamp="20170805 04:50:00.973" level="INFO">${status} = False</msg>
<status status="PASS" endtime="20170805 04:50:00.973" starttime="20170805 04:50:00.971"></status>
</kw>
<msg timestamp="20170805 04:50:00.973" level="INFO">${status} = False</msg>
<status status="PASS" endtime="20170805 04:50:00.973" starttime="20170805 04:50:00.674"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${TEST_STATUS}' == 'FAIL' or '${status}'=='True'</arg>
<arg>FFDC</arg>
</arguments>
<kw name="Ffdc" library="openbmc_ffdc">
<doc>Gather First Failure Data Capture (FFDC).</doc>
<kw name="Ping Host" library="utils">
<arguments>
<arg>9.3.86.161</arg>
</arguments>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${host}</arg>
<arg>msg=No host provided</arg>
</arguments>
<msg timestamp="20170805 04:50:00.989" level="INFO">Length is 10</msg>
<status status="PASS" endtime="20170805 04:50:00.989" starttime="20170805 04:50:00.989"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>ping -c 4 ${host}</arg>
</arguments>
<assign>
<var>${RC}</var>
<var>${output}</var>
</assign>
<msg timestamp="20170805 04:50:01.002" level="INFO">Running command 'ping -c 4 9.3.86.161 2&gt;&amp;1'.</msg>
<msg timestamp="20170805 04:50:04.020" level="INFO">${RC} = 0</msg>
<msg timestamp="20170805 04:50:04.020" level="INFO">${output} = PING 9.3.86.161 (9.3.86.161) 56(84) bytes of data.
64 bytes from 9.3.86.161: icmp_seq=1 ttl=62 time=11.8 ms
64 bytes from 9.3.86.161: icmp_seq=2 ttl=62 time=23.3 ms
64 bytes from 9.3.86.161: icmp_seq=...</msg>
<status status="PASS" endtime="20170805 04:50:04.020" starttime="20170805 04:50:00.990"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>RC: ${RC}\nOutput:\n${output}</arg>
</arguments>
<msg timestamp="20170805 04:50:04.040" level="INFO">RC: 0
Output:
PING 9.3.86.161 (9.3.86.161) 56(84) bytes of data.
64 bytes from 9.3.86.161: icmp_seq=1 ttl=62 time=11.8 ms
64 bytes from 9.3.86.161: icmp_seq=2 ttl=62 time=23.3 ms
64 bytes from 9.3.86.161: icmp_seq=3 ttl=62 time=0.615 ms
64 bytes from 9.3.86.161: icmp_seq=4 ttl=62 time=0.671 ms

--- 9.3.86.161 ping statistics ---
4 packets transmitted, 4 received, 0% packet loss, time 3002ms
rtt min/avg/max/mdev = 0.615/9.134/23.371/9.413 ms</msg>
<status status="PASS" endtime="20170805 04:50:04.041" starttime="20170805 04:50:04.037"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${RC}</arg>
<arg>${0}</arg>
</arguments>
<status status="PASS" endtime="20170805 04:50:04.043" starttime="20170805 04:50:04.041"></status>
</kw>
<status status="PASS" endtime="20170805 04:50:04.043" starttime="20170805 04:50:00.988"></status>
</kw>
<kw name="Get Current Time Stamp" library="openbmc_ffdc_utils">
<doc>Get the current time stamp data</doc>
<kw name="Get Current Date" library="DateTime">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20170805 04:50:04.109" level="INFO">${cur_time} = 2017-08-05 04:50:04:108982</msg>
<status status="PASS" endtime="20170805 04:50:04.109" starttime="20170805 04:50:04.109"></status>
</kw>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20170805 04:50:04.110" level="INFO">${cur_time} = 20170805045004108982</msg>
<status status="PASS" endtime="20170805 04:50:04.110" starttime="20170805 04:50:04.110"></status>
</kw>
<status status="PASS" endtime="20170805 04:50:04.110" starttime="20170805 04:50:04.108"></status>
</kw>
<msg timestamp="20170805 04:50:04.119" level="INFO">${FFDC_TIME} = 20170805045004108982</msg>
<kw name="Get Test Dir and Name" library="openbmc_ffdc_utils">
<doc>SUITE_NAME and TEST_NAME are automatic variables</doc>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${SUITE_NAME}</arg>
</arguments>
<assign>
<var>${suite_name}</var>
</assign>
<msg timestamp="20170805 04:50:04.121" level="INFO">${suite_name} = UpdateBmc</msg>
<status status="PASS" endtime="20170805 04:50:04.121" starttime="20170805 04:50:04.120"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${FFDC_TIME}_</arg>
<arg>${suite_name}</arg>
</arguments>
<assign>
<var>${suite_name}</var>
</assign>
<msg timestamp="20170805 04:50:04.122" level="INFO">${suite_name} = 20170805045004108982_UpdateBmc</msg>
<status status="PASS" endtime="20170805 04:50:04.122" starttime="20170805 04:50:04.121"></status>
</kw>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${TEST_NAME}</arg>
</arguments>
<assign>
<var>${test_name}</var>
</assign>
<msg timestamp="20170805 04:50:04.123" level="INFO">${test_name} = InitiateCodeUpdateBMC</msg>
<status status="PASS" endtime="20170805 04:50:04.123" starttime="20170805 04:50:04.122"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${FFDC_TIME}_</arg>
<arg>${test_name}</arg>
</arguments>
<assign>
<var>${test_name}</var>
</assign>
<msg timestamp="20170805 04:50:04.124" level="INFO">${test_name} = 20170805045004108982_InitiateCodeUpdateBMC</msg>
<status status="PASS" endtime="20170805 04:50:04.124" starttime="20170805 04:50:04.123"></status>
</kw>
<status status="PASS" endtime="20170805 04:50:04.125" starttime="20170805 04:50:04.120"></status>
</kw>
<msg timestamp="20170805 04:50:04.131" level="INFO">${FFDC_DIR_PATH} = /home/fspcibld/logs/20170805045004108982_UpdateBmc/20170805045004108982_InitiateCodeUpdateBMC/</msg>
<msg timestamp="20170805 04:50:04.136" level="INFO">${FFDC_PREFIX} = 20170805045004108982_</msg>
<msg timestamp="20170805 04:50:04.163" level="INFO">${LOG_PREFIX} = /home/fspcibld/logs/20170805045004108982_UpdateBmc/20170805045004108982_InitiateCodeUpdateBMC/20170805045004108982_</msg>
<kw name="Create Directory" library="OperatingSystem">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>/home/fspcibld/logs/20170805045004108982_UpdateBmc/20170805045004108982_InitiateCodeUpdateBMC/</arg>
</arguments>
<msg timestamp="20170805 04:50:04.165" html="yes" level="INFO">Created directory '&lt;a href="file:///home/fspcibld/logs/20170805045004108982_UpdateBmc/20170805045004108982_InitiateCodeUpdateBMC"&gt;/home/fspcibld/logs/20170805045004108982_UpdateBmc/20170805045004108982_InitiateCodeUpdateBMC&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170805 04:50:04.165" starttime="20170805 04:50:04.163"></status>
</kw>
<msg timestamp="20170805 04:50:04.173" level="INFO">${FFDC_FILE_PATH} = /home/fspcibld/logs/20170805045004108982_UpdateBmc/20170805045004108982_InitiateCodeUpdateBMC/20170805045004108982_BMC_general.txt</msg>
<kw name="Header Message" library="openbmc_ffdc_utils">
<doc>Write header message to the report document manifest.</doc>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${HEADER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170805 04:50:04.190" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170805045004108982_UpdateBmc/20170805045004108982_InitiateCodeUpdateBMC/20170805045004108982_BMC_general.txt"&gt;/home/fspcibld/logs/20170805045004108982_UpdateBmc/20170805045004108982_InitiateCodeUpdateBMC/20170805045004108982_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170805 04:50:04.190" starttime="20170805 04:50:04.189"></status>
</kw>
<status status="PASS" endtime="20170805 04:50:04.190" starttime="20170805 04:50:04.189"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170805 04:50:04.192" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170805045004108982_UpdateBmc/20170805045004108982_InitiateCodeUpdateBMC/20170805045004108982_BMC_general.txt"&gt;/home/fspcibld/logs/20170805045004108982_UpdateBmc/20170805045004108982_InitiateCodeUpdateBMC/20170805045004108982_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170805 04:50:04.192" starttime="20170805 04:50:04.191"></status>
</kw>
<status status="PASS" endtime="20170805 04:50:04.192" starttime="20170805 04:50:04.191"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Suite File\t\t: ${SUITE_NAME} ${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170805 04:50:04.193" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170805045004108982_UpdateBmc/20170805045004108982_InitiateCodeUpdateBMC/20170805045004108982_BMC_general.txt"&gt;/home/fspcibld/logs/20170805045004108982_UpdateBmc/20170805045004108982_InitiateCodeUpdateBMC/20170805045004108982_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170805 04:50:04.194" starttime="20170805 04:50:04.193"></status>
</kw>
<status status="PASS" endtime="20170805 04:50:04.194" starttime="20170805 04:50:04.192"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Case Name\t\t: ${TEST_NAME}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170805 04:50:04.196" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170805045004108982_UpdateBmc/20170805045004108982_InitiateCodeUpdateBMC/20170805045004108982_BMC_general.txt"&gt;/home/fspcibld/logs/20170805045004108982_UpdateBmc/20170805045004108982_InitiateCodeUpdateBMC/20170805045004108982_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170805 04:50:04.196" starttime="20170805 04:50:04.196"></status>
</kw>
<status status="PASS" endtime="20170805 04:50:04.196" starttime="20170805 04:50:04.194"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Source File\t: ${SUITE_SOURCE}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170805 04:50:04.198" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170805045004108982_UpdateBmc/20170805045004108982_InitiateCodeUpdateBMC/20170805045004108982_BMC_general.txt"&gt;/home/fspcibld/logs/20170805045004108982_UpdateBmc/20170805045004108982_InitiateCodeUpdateBMC/20170805045004108982_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170805 04:50:04.198" starttime="20170805 04:50:04.197"></status>
</kw>
<status status="PASS" endtime="20170805 04:50:04.198" starttime="20170805 04:50:04.197"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Failure Time Stamp\t: ${FFDC_TIME}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170805 04:50:04.200" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170805045004108982_UpdateBmc/20170805045004108982_InitiateCodeUpdateBMC/20170805045004108982_BMC_general.txt"&gt;/home/fspcibld/logs/20170805045004108982_UpdateBmc/20170805045004108982_InitiateCodeUpdateBMC/20170805045004108982_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170805 04:50:04.200" starttime="20170805 04:50:04.199"></status>
</kw>
<status status="PASS" endtime="20170805 04:50:04.200" starttime="20170805 04:50:04.198"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Error Message\t: ${TEST_MESSAGE}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170805 04:50:04.201" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170805045004108982_UpdateBmc/20170805045004108982_InitiateCodeUpdateBMC/20170805045004108982_BMC_general.txt"&gt;/home/fspcibld/logs/20170805045004108982_UpdateBmc/20170805045004108982_InitiateCodeUpdateBMC/20170805045004108982_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170805 04:50:04.201" starttime="20170805 04:50:04.201"></status>
</kw>
<status status="PASS" endtime="20170805 04:50:04.202" starttime="20170805 04:50:04.200"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Documentation\t:${\n}${TEST_DOCUMENTATION}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170805 04:50:04.203" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170805045004108982_UpdateBmc/20170805045004108982_InitiateCodeUpdateBMC/20170805045004108982_BMC_general.txt"&gt;/home/fspcibld/logs/20170805045004108982_UpdateBmc/20170805045004108982_InitiateCodeUpdateBMC/20170805045004108982_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170805 04:50:04.203" starttime="20170805 04:50:04.203"></status>
</kw>
<status status="PASS" endtime="20170805 04:50:04.204" starttime="20170805 04:50:04.202"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170805 04:50:04.205" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170805045004108982_UpdateBmc/20170805045004108982_InitiateCodeUpdateBMC/20170805045004108982_BMC_general.txt"&gt;/home/fspcibld/logs/20170805045004108982_UpdateBmc/20170805045004108982_InitiateCodeUpdateBMC/20170805045004108982_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170805 04:50:04.205" starttime="20170805 04:50:04.204"></status>
</kw>
<status status="PASS" endtime="20170805 04:50:04.205" starttime="20170805 04:50:04.204"></status>
</kw>
<kw name="Test Setup Info" library="openbmc_ffdc_utils">
<doc>BMC IP, Model and other information</doc>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}-----------------------${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170805 04:50:04.207" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170805045004108982_UpdateBmc/20170805045004108982_InitiateCodeUpdateBMC/20170805045004108982_BMC_general.txt"&gt;/home/fspcibld/logs/20170805045004108982_UpdateBmc/20170805045004108982_InitiateCodeUpdateBMC/20170805045004108982_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170805 04:50:04.207" starttime="20170805 04:50:04.206"></status>
</kw>
<status status="PASS" endtime="20170805 04:50:04.207" starttime="20170805 04:50:04.206"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Setup Information:</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170805 04:50:04.209" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170805045004108982_UpdateBmc/20170805045004108982_InitiateCodeUpdateBMC/20170805045004108982_BMC_general.txt"&gt;/home/fspcibld/logs/20170805045004108982_UpdateBmc/20170805045004108982_InitiateCodeUpdateBMC/20170805045004108982_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170805 04:50:04.209" starttime="20170805 04:50:04.208"></status>
</kw>
<status status="PASS" endtime="20170805 04:50:04.209" starttime="20170805 04:50:04.207"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}-----------------------${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170805 04:50:04.210" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170805045004108982_UpdateBmc/20170805045004108982_InitiateCodeUpdateBMC/20170805045004108982_BMC_general.txt"&gt;/home/fspcibld/logs/20170805045004108982_UpdateBmc/20170805045004108982_InitiateCodeUpdateBMC/20170805045004108982_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170805 04:50:04.210" starttime="20170805 04:50:04.210"></status>
</kw>
<status status="PASS" endtime="20170805 04:50:04.211" starttime="20170805 04:50:04.209"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>OPENBMC HOST \t: ${OPENBMC_HOST}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170805 04:50:04.212" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170805045004108982_UpdateBmc/20170805045004108982_InitiateCodeUpdateBMC/20170805045004108982_BMC_general.txt"&gt;/home/fspcibld/logs/20170805045004108982_UpdateBmc/20170805045004108982_InitiateCodeUpdateBMC/20170805045004108982_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170805 04:50:04.212" starttime="20170805 04:50:04.212"></status>
</kw>
<status status="PASS" endtime="20170805 04:50:04.212" starttime="20170805 04:50:04.211"></status>
</kw>
<kw name="Get BMC System Model" library="utils">
<doc>Get the BMC model from the device tree.</doc>
<assign>
<var>${model_name}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>cat ${devicetree_base} | cut -d " " -f 1</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${bmc_model}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20170805 04:50:04.241" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.86.161
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170805 04:50:04.241" level="INFO">Logging into '9.3.86.161:22' as 'root'.</msg>
<msg timestamp="20170805 04:50:04.999" level="INFO">Read output: root@witherspoon:~#</msg>
<msg timestamp="20170805 04:50:04.999" level="INFO">Executing command 'cat /sys/firmware/devicetree/base/model | cut -d " " -f 1'.</msg>
<msg timestamp="20170805 04:50:05.076" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170805 04:50:05.089" level="INFO">${bmc_model} = Witherspoon</msg>
<msg timestamp="20170805 04:50:05.089" level="INFO">${stderr} = </msg>
<msg timestamp="20170805 04:50:05.089" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20170805 04:50:05.090" starttime="20170805 04:50:04.213"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20170805 04:50:05.090" level="INFO">Length is 0</msg>
<status status="PASS" endtime="20170805 04:50:05.090" starttime="20170805 04:50:05.090"></status>
</kw>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${bmc_model}</arg>
</arguments>
<msg timestamp="20170805 04:50:05.091" level="INFO">Length is 11</msg>
<status status="PASS" endtime="20170805 04:50:05.091" starttime="20170805 04:50:05.091"></status>
</kw>
<msg timestamp="20170805 04:50:05.091" level="INFO">${model_name} = Witherspoon</msg>
<status status="PASS" endtime="20170805 04:50:05.091" starttime="20170805 04:50:04.212"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>SYSTEM TYPE \t: ${model_name}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170805 04:50:05.093" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170805045004108982_UpdateBmc/20170805045004108982_InitiateCodeUpdateBMC/20170805045004108982_BMC_general.txt"&gt;/home/fspcibld/logs/20170805045004108982_UpdateBmc/20170805045004108982_InitiateCodeUpdateBMC/20170805045004108982_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170805 04:50:05.093" starttime="20170805 04:50:05.092"></status>
</kw>
<status status="PASS" endtime="20170805 04:50:05.093" starttime="20170805 04:50:05.092"></status>
</kw>
<status status="PASS" endtime="20170805 04:50:05.093" starttime="20170805 04:50:04.205"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${MSG_INTRO}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170805 04:50:05.095" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170805045004108982_UpdateBmc/20170805045004108982_InitiateCodeUpdateBMC/20170805045004108982_BMC_general.txt"&gt;/home/fspcibld/logs/20170805045004108982_UpdateBmc/20170805045004108982_InitiateCodeUpdateBMC/20170805045004108982_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170805 04:50:05.095" starttime="20170805 04:50:05.094"></status>
</kw>
<status status="PASS" endtime="20170805 04:50:05.095" starttime="20170805 04:50:05.094"></status>
</kw>
<kw name="Get Ffdc Cmd Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg timestamp="20170805 04:50:05.096" level="INFO">@{entries} = [ APPLICATION DATA | DRIVER INFO | BMC DATA ]</msg>
<status status="PASS" endtime="20170805 04:50:05.096" starttime="20170805 04:50:05.095"></status>
</kw>
<kw type="for" name="${index} IN [ @{entries} ]">
<kw type="foritem" name="${index} = APPLICATION DATA">
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>* ${index.upper()}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170805 04:50:05.098" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170805045004108982_UpdateBmc/20170805045004108982_InitiateCodeUpdateBMC/20170805045004108982_BMC_general.txt"&gt;/home/fspcibld/logs/20170805045004108982_UpdateBmc/20170805045004108982_InitiateCodeUpdateBMC/20170805045004108982_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170805 04:50:05.098" starttime="20170805 04:50:05.097"></status>
</kw>
<status status="PASS" endtime="20170805 04:50:05.098" starttime="20170805 04:50:05.096"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170805 04:50:05.099" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170805045004108982_UpdateBmc/20170805045004108982_InitiateCodeUpdateBMC/20170805045004108982_BMC_general.txt"&gt;/home/fspcibld/logs/20170805045004108982_UpdateBmc/20170805045004108982_InitiateCodeUpdateBMC/20170805045004108982_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170805 04:50:05.099" starttime="20170805 04:50:05.099"></status>
</kw>
<status status="PASS" endtime="20170805 04:50:05.100" starttime="20170805 04:50:05.098"></status>
</kw>
<status status="PASS" endtime="20170805 04:50:05.100" starttime="20170805 04:50:05.096"></status>
</kw>
<kw type="foritem" name="${index} = DRIVER INFO">
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>* ${index.upper()}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170805 04:50:05.102" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170805045004108982_UpdateBmc/20170805045004108982_InitiateCodeUpdateBMC/20170805045004108982_BMC_general.txt"&gt;/home/fspcibld/logs/20170805045004108982_UpdateBmc/20170805045004108982_InitiateCodeUpdateBMC/20170805045004108982_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170805 04:50:05.102" starttime="20170805 04:50:05.101"></status>
</kw>
<status status="PASS" endtime="20170805 04:50:05.102" starttime="20170805 04:50:05.100"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170805 04:50:05.103" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170805045004108982_UpdateBmc/20170805045004108982_InitiateCodeUpdateBMC/20170805045004108982_BMC_general.txt"&gt;/home/fspcibld/logs/20170805045004108982_UpdateBmc/20170805045004108982_InitiateCodeUpdateBMC/20170805045004108982_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170805 04:50:05.103" starttime="20170805 04:50:05.103"></status>
</kw>
<status status="PASS" endtime="20170805 04:50:05.103" starttime="20170805 04:50:05.102"></status>
</kw>
<status status="PASS" endtime="20170805 04:50:05.104" starttime="20170805 04:50:05.100"></status>
</kw>
<kw type="foritem" name="${index} = BMC DATA">
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>* ${index.upper()}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170805 04:50:05.107" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170805045004108982_UpdateBmc/20170805045004108982_InitiateCodeUpdateBMC/20170805045004108982_BMC_general.txt"&gt;/home/fspcibld/logs/20170805045004108982_UpdateBmc/20170805045004108982_InitiateCodeUpdateBMC/20170805045004108982_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170805 04:50:05.107" starttime="20170805 04:50:05.106"></status>
</kw>
<status status="PASS" endtime="20170805 04:50:05.107" starttime="20170805 04:50:05.104"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170805 04:50:05.109" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170805045004108982_UpdateBmc/20170805045004108982_InitiateCodeUpdateBMC/20170805045004108982_BMC_general.txt"&gt;/home/fspcibld/logs/20170805045004108982_UpdateBmc/20170805045004108982_InitiateCodeUpdateBMC/20170805045004108982_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170805 04:50:05.109" starttime="20170805 04:50:05.108"></status>
</kw>
<status status="PASS" endtime="20170805 04:50:05.109" starttime="20170805 04:50:05.107"></status>
</kw>
<status status="PASS" endtime="20170805 04:50:05.109" starttime="20170805 04:50:05.104"></status>
</kw>
<status status="PASS" endtime="20170805 04:50:05.109" starttime="20170805 04:50:05.096"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${MSG_DETAIL}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170805 04:50:05.110" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170805045004108982_UpdateBmc/20170805045004108982_InitiateCodeUpdateBMC/20170805045004108982_BMC_general.txt"&gt;/home/fspcibld/logs/20170805045004108982_UpdateBmc/20170805045004108982_InitiateCodeUpdateBMC/20170805045004108982_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170805 04:50:05.110" starttime="20170805 04:50:05.110"></status>
</kw>
<status status="PASS" endtime="20170805 04:50:05.110" starttime="20170805 04:50:05.109"></status>
</kw>
<status status="PASS" endtime="20170805 04:50:05.111" starttime="20170805 04:50:04.188"></status>
</kw>
<kw name="Call FFDC Methods" library="openbmc_ffdc_methods">
<doc>Call into FFDC Keyword index list.</doc>
<arguments>
<arg>ffdc_function_list=</arg>
</arguments>
<kw name="Get Ffdc Method Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg timestamp="20170805 04:50:05.119" level="INFO">@{entries} = [ BMC LOGS ]</msg>
<status status="PASS" endtime="20170805 04:50:05.119" starttime="20170805 04:50:05.119"></status>
</kw>
<kw type="for" name="${index} IN [ @{entries} ]">
<kw type="foritem" name="${index} = BMC LOGS">
<kw name="Method Call Keyword List" library="openbmc_ffdc_methods">
<doc>Iterate the list through keyword index.</doc>
<arguments>
<arg>${index}</arg>
<arg>${ffdc_function_list}</arg>
</arguments>
<kw name="Get Ffdc Method Call" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<assign>
<var>@{method_list}</var>
</assign>
<msg timestamp="20170805 04:50:05.121" level="INFO">@{method_list} = [ ('FFDC Generic Report', 'BMC FFDC Manifest') | ('Get Request FFDC', 'BMC FFDC Get Requests') | ('Core Files', 'SCP Coredump Files') | ('BMC Specific Files', 'BMC FFDC Files') | ('SEL Log', 'Collect ...</msg>
<status status="PASS" endtime="20170805 04:50:05.121" starttime="20170805 04:50:05.120"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${ffdc_function_list}' == '${EMPTY}'</arg>
<arg>Get FFDC Method Desc</arg>
<arg>${index}</arg>
<arg>ELSE</arg>
<arg>Split String</arg>
<arg>${ffdc_function_list}</arg>
<arg>separator=:</arg>
</arguments>
<assign>
<var>@{ffdc_function_list}</var>
</assign>
<kw name="Get Ffdc Method Desc" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<status status="PASS" endtime="20170805 04:50:05.122" starttime="20170805 04:50:05.122"></status>
</kw>
<msg timestamp="20170805 04:50:05.122" level="INFO">@{ffdc_function_list} = [ FFDC Generic Report | Get Request FFDC | Core Files | BMC Specific Files | SEL Log | OS FFDC ]</msg>
<status status="PASS" endtime="20170805 04:50:05.122" starttime="20170805 04:50:05.121"></status>
</kw>
<kw type="for" name="${method} IN [ @{method_list} ]">
<kw type="foritem" name="${method} = ('FFDC Generic Report', 'BMC FFDC Manifest')">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status status="PASS" endtime="20170805 04:50:05.124" starttime="20170805 04:50:05.124"></status>
</kw>
<msg timestamp="20170805 04:50:05.125" level="INFO">${status} = PASS</msg>
<msg timestamp="20170805 04:50:05.125" level="INFO">${ret_values} = None</msg>
<status status="PASS" endtime="20170805 04:50:05.125" starttime="20170805 04:50:05.124"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status status="PASS" endtime="20170805 04:50:05.125" starttime="20170805 04:50:05.125"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="BMC FFDC Manifest" library="openbmc_ffdc_methods">
<doc>Get the commands index for the FFDC_BMC_CMD,</doc>
<kw name="Get Ffdc Cmd Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg timestamp="20170805 04:50:05.148" level="INFO">@{entries} = [ APPLICATION DATA | DRIVER INFO | BMC DATA ]</msg>
<status status="PASS" endtime="20170805 04:50:05.149" starttime="20170805 04:50:05.148"></status>
</kw>
<kw type="for" name="${index} IN [ @{entries} ]">
<kw type="foritem" name="${index} = APPLICATION DATA">
<kw name="Iterate BMC Command List Pairs" library="openbmc_ffdc_methods">
<doc>Feed in key pair list from dictionary to execute</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Bmc Cmd" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg timestamp="20170805 04:50:05.150" level="INFO">@{cmd_list} = [ ('BMC state', '/usr/sbin/obmcutil state') ]</msg>
<status status="PASS" endtime="20170805 04:50:05.150" starttime="20170805 04:50:05.150"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${ENTRY_INDEX}</arg>
<arg>${key_index}</arg>
</arguments>
<msg timestamp="20170805 04:50:05.158" level="INFO">${ENTRY_INDEX} = APPLICATION DATA</msg>
<status status="PASS" endtime="20170805 04:50:05.158" starttime="20170805 04:50:05.150"></status>
</kw>
<kw type="for" name="${cmd} IN [ @{cmd_list} ]">
<kw type="foritem" name="${cmd} = ('BMC state', '/usr/sbin/obmcutil state')">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170805 04:50:05.162" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170805045004108982_UpdateBmc/20170805045004108982_InitiateCodeUpdateBMC/20170805045004108982_BMC_general.txt"&gt;/home/fspcibld/logs/20170805045004108982_UpdateBmc/20170805045004108982_InitiateCodeUpdateBMC/20170805045004108982_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170805 04:50:05.162" starttime="20170805 04:50:05.161"></status>
</kw>
<status status="PASS" endtime="20170805 04:50:05.162" starttime="20170805 04:50:05.160"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170805 04:50:05.163" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170805045004108982_UpdateBmc/20170805045004108982_InitiateCodeUpdateBMC/20170805045004108982_BMC_general.txt"&gt;/home/fspcibld/logs/20170805045004108982_UpdateBmc/20170805045004108982_InitiateCodeUpdateBMC/20170805045004108982_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170805 04:50:05.163" starttime="20170805 04:50:05.163"></status>
</kw>
<status status="PASS" endtime="20170805 04:50:05.164" starttime="20170805 04:50:05.162"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170805 04:50:05.166" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170805045004108982_UpdateBmc/20170805045004108982_InitiateCodeUpdateBMC/20170805045004108982_BMC_general.txt"&gt;/home/fspcibld/logs/20170805045004108982_UpdateBmc/20170805045004108982_InitiateCodeUpdateBMC/20170805045004108982_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170805 04:50:05.166" starttime="20170805 04:50:05.166"></status>
</kw>
<status status="PASS" endtime="20170805 04:50:05.167" starttime="20170805 04:50:05.164"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170805 04:50:05.168" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170805045004108982_UpdateBmc/20170805045004108982_InitiateCodeUpdateBMC/20170805045004108982_BMC_general.txt"&gt;/home/fspcibld/logs/20170805045004108982_UpdateBmc/20170805045004108982_InitiateCodeUpdateBMC/20170805045004108982_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170805 04:50:05.168" starttime="20170805 04:50:05.167"></status>
</kw>
<status status="PASS" endtime="20170805 04:50:05.168" starttime="20170805 04:50:05.167"></status>
</kw>
<status status="PASS" endtime="20170805 04:50:05.168" starttime="20170805 04:50:05.160"></status>
</kw>
<status status="PASS" endtime="20170805 04:50:05.168" starttime="20170805 04:50:05.159"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170805 04:50:05.170" level="INFO">${cmd_buf} = BMC Execute Command  /usr/sbin/obmcutil state  ignore_err=1</msg>
<status status="PASS" endtime="20170805 04:50:05.170" starttime="20170805 04:50:05.169"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>/usr/sbin/obmcutil state</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170805 04:50:05.242" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.86.161
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170805 04:50:05.242" level="INFO">Executing command '/usr/sbin/obmcutil state'.</msg>
<msg timestamp="20170805 04:50:06.613" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20170805 04:50:06.613" starttime="20170805 04:50:05.203"></status>
</kw>
<msg timestamp="20170805 04:50:06.613" level="INFO">${status} = PASS</msg>
<msg timestamp="20170805 04:50:06.614" level="INFO">${ret_values} = (u'CurrentBMCState:    xyz.openbmc_project.State.BMC.BMCState.Ready\nCurrentPowerState:  xyz.openbmc_project.State.Chassis.PowerState.Off\nCurrentHostState:   xyz.openbmc_project.State.Host.HostState....</msg>
<status status="PASS" endtime="20170805 04:50:06.614" starttime="20170805 04:50:05.170"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170805 04:50:06.614" level="INFO">${stdout} = CurrentBMCState:    xyz.openbmc_project.State.BMC.BMCState.Ready
CurrentPowerState:  xyz.openbmc_project.State.Chassis.PowerState.Off
CurrentHostState:   xyz.openbmc_project.State.Host.HostState.Off</msg>
<status status="PASS" endtime="20170805 04:50:06.614" starttime="20170805 04:50:06.614"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170805 04:50:06.615" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170805 04:50:06.615" starttime="20170805 04:50:06.615"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170805 04:50:06.625" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170805045004108982_UpdateBmc/20170805045004108982_InitiateCodeUpdateBMC/20170805045004108982_BMC_general.txt"&gt;/home/fspcibld/logs/20170805045004108982_UpdateBmc/20170805045004108982_InitiateCodeUpdateBMC/20170805045004108982_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170805 04:50:06.625" starttime="20170805 04:50:06.624"></status>
</kw>
<status status="PASS" endtime="20170805 04:50:06.625" starttime="20170805 04:50:06.623"></status>
</kw>
<status status="PASS" endtime="20170805 04:50:06.625" starttime="20170805 04:50:06.615"></status>
</kw>
<status status="PASS" endtime="20170805 04:50:06.625" starttime="20170805 04:50:05.158"></status>
</kw>
<status status="PASS" endtime="20170805 04:50:06.625" starttime="20170805 04:50:05.158"></status>
</kw>
<status status="PASS" endtime="20170805 04:50:06.625" starttime="20170805 04:50:05.158"></status>
</kw>
<status status="PASS" endtime="20170805 04:50:06.625" starttime="20170805 04:50:05.149"></status>
</kw>
<status status="PASS" endtime="20170805 04:50:06.625" starttime="20170805 04:50:05.149"></status>
</kw>
<kw type="foritem" name="${index} = DRIVER INFO">
<kw name="Iterate BMC Command List Pairs" library="openbmc_ffdc_methods">
<doc>Feed in key pair list from dictionary to execute</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Bmc Cmd" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg timestamp="20170805 04:50:06.626" level="INFO">@{cmd_list} = [ ('FW Level', 'cat /etc/os-release') ]</msg>
<status status="PASS" endtime="20170805 04:50:06.626" starttime="20170805 04:50:06.626"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${ENTRY_INDEX}</arg>
<arg>${key_index}</arg>
</arguments>
<msg timestamp="20170805 04:50:06.627" level="INFO">${ENTRY_INDEX} = DRIVER INFO</msg>
<status status="PASS" endtime="20170805 04:50:06.627" starttime="20170805 04:50:06.627"></status>
</kw>
<kw type="for" name="${cmd} IN [ @{cmd_list} ]">
<kw type="foritem" name="${cmd} = ('FW Level', 'cat /etc/os-release')">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170805 04:50:06.630" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170805045004108982_UpdateBmc/20170805045004108982_InitiateCodeUpdateBMC/20170805045004108982_BMC_general.txt"&gt;/home/fspcibld/logs/20170805045004108982_UpdateBmc/20170805045004108982_InitiateCodeUpdateBMC/20170805045004108982_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170805 04:50:06.631" starttime="20170805 04:50:06.630"></status>
</kw>
<status status="PASS" endtime="20170805 04:50:06.631" starttime="20170805 04:50:06.630"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170805 04:50:06.632" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170805045004108982_UpdateBmc/20170805045004108982_InitiateCodeUpdateBMC/20170805045004108982_BMC_general.txt"&gt;/home/fspcibld/logs/20170805045004108982_UpdateBmc/20170805045004108982_InitiateCodeUpdateBMC/20170805045004108982_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170805 04:50:06.632" starttime="20170805 04:50:06.632"></status>
</kw>
<status status="PASS" endtime="20170805 04:50:06.632" starttime="20170805 04:50:06.631"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170805 04:50:06.633" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170805045004108982_UpdateBmc/20170805045004108982_InitiateCodeUpdateBMC/20170805045004108982_BMC_general.txt"&gt;/home/fspcibld/logs/20170805045004108982_UpdateBmc/20170805045004108982_InitiateCodeUpdateBMC/20170805045004108982_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170805 04:50:06.633" starttime="20170805 04:50:06.633"></status>
</kw>
<status status="PASS" endtime="20170805 04:50:06.634" starttime="20170805 04:50:06.632"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170805 04:50:06.635" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170805045004108982_UpdateBmc/20170805045004108982_InitiateCodeUpdateBMC/20170805045004108982_BMC_general.txt"&gt;/home/fspcibld/logs/20170805045004108982_UpdateBmc/20170805045004108982_InitiateCodeUpdateBMC/20170805045004108982_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170805 04:50:06.635" starttime="20170805 04:50:06.634"></status>
</kw>
<status status="PASS" endtime="20170805 04:50:06.635" starttime="20170805 04:50:06.634"></status>
</kw>
<status status="PASS" endtime="20170805 04:50:06.635" starttime="20170805 04:50:06.629"></status>
</kw>
<status status="PASS" endtime="20170805 04:50:06.635" starttime="20170805 04:50:06.629"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170805 04:50:06.636" level="INFO">${cmd_buf} = BMC Execute Command  cat /etc/os-release  ignore_err=1</msg>
<status status="PASS" endtime="20170805 04:50:06.636" starttime="20170805 04:50:06.635"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>cat /etc/os-release</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170805 04:50:06.699" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.86.161
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170805 04:50:06.700" level="INFO">Executing command 'cat /etc/os-release'.</msg>
<msg timestamp="20170805 04:50:06.747" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20170805 04:50:06.747" starttime="20170805 04:50:06.664"></status>
</kw>
<msg timestamp="20170805 04:50:06.747" level="INFO">${status} = PASS</msg>
<msg timestamp="20170805 04:50:06.747" level="INFO">${ret_values} = (u'ID="openbmc-phosphor"\nNAME="Phosphor OpenBMC (Phosphor OpenBMC Project Reference Distro)"\nVERSION="v1.99.8-139"\nVERSION_ID="v1.99.8-139-gb3dbb28"\nPRETTY_NAME="Phosphor OpenBMC (Phosphor OpenBMC...</msg>
<status status="PASS" endtime="20170805 04:50:06.747" starttime="20170805 04:50:06.636"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170805 04:50:06.748" level="INFO">${stdout} = ID="openbmc-phosphor"
NAME="Phosphor OpenBMC (Phosphor OpenBMC Project Reference Distro)"
VERSION="v1.99.8-139"
VERSION_ID="v1.99.8-139-gb3dbb28"
PRETTY_NAME="Phosphor OpenBMC (Phosphor OpenBMC Projec...</msg>
<status status="PASS" endtime="20170805 04:50:06.748" starttime="20170805 04:50:06.748"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170805 04:50:06.749" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170805 04:50:06.749" starttime="20170805 04:50:06.748"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170805 04:50:06.756" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170805045004108982_UpdateBmc/20170805045004108982_InitiateCodeUpdateBMC/20170805045004108982_BMC_general.txt"&gt;/home/fspcibld/logs/20170805045004108982_UpdateBmc/20170805045004108982_InitiateCodeUpdateBMC/20170805045004108982_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170805 04:50:06.756" starttime="20170805 04:50:06.756"></status>
</kw>
<status status="PASS" endtime="20170805 04:50:06.756" starttime="20170805 04:50:06.755"></status>
</kw>
<status status="PASS" endtime="20170805 04:50:06.756" starttime="20170805 04:50:06.749"></status>
</kw>
<status status="PASS" endtime="20170805 04:50:06.756" starttime="20170805 04:50:06.628"></status>
</kw>
<status status="PASS" endtime="20170805 04:50:06.756" starttime="20170805 04:50:06.627"></status>
</kw>
<status status="PASS" endtime="20170805 04:50:06.756" starttime="20170805 04:50:06.627"></status>
</kw>
<status status="PASS" endtime="20170805 04:50:06.757" starttime="20170805 04:50:06.625"></status>
</kw>
<status status="PASS" endtime="20170805 04:50:06.757" starttime="20170805 04:50:06.625"></status>
</kw>
<kw type="foritem" name="${index} = BMC DATA">
<kw name="Iterate BMC Command List Pairs" library="openbmc_ffdc_methods">
<doc>Feed in key pair list from dictionary to execute</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Bmc Cmd" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg timestamp="20170805 04:50:06.758" level="INFO">@{cmd_list} = [ ('BMC Uptime', 'uptime') | ('BMC File System Disk Space Usage', 'df -hT') | ('BMC OS', 'uname -a') ]</msg>
<status status="PASS" endtime="20170805 04:50:06.758" starttime="20170805 04:50:06.757"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${ENTRY_INDEX}</arg>
<arg>${key_index}</arg>
</arguments>
<msg timestamp="20170805 04:50:06.758" level="INFO">${ENTRY_INDEX} = BMC DATA</msg>
<status status="PASS" endtime="20170805 04:50:06.759" starttime="20170805 04:50:06.758"></status>
</kw>
<kw type="for" name="${cmd} IN [ @{cmd_list} ]">
<kw type="foritem" name="${cmd} = ('BMC Uptime', 'uptime')">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170805 04:50:06.762" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170805045004108982_UpdateBmc/20170805045004108982_InitiateCodeUpdateBMC/20170805045004108982_BMC_general.txt"&gt;/home/fspcibld/logs/20170805045004108982_UpdateBmc/20170805045004108982_InitiateCodeUpdateBMC/20170805045004108982_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170805 04:50:06.762" starttime="20170805 04:50:06.761"></status>
</kw>
<status status="PASS" endtime="20170805 04:50:06.762" starttime="20170805 04:50:06.761"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170805 04:50:06.763" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170805045004108982_UpdateBmc/20170805045004108982_InitiateCodeUpdateBMC/20170805045004108982_BMC_general.txt"&gt;/home/fspcibld/logs/20170805045004108982_UpdateBmc/20170805045004108982_InitiateCodeUpdateBMC/20170805045004108982_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170805 04:50:06.763" starttime="20170805 04:50:06.763"></status>
</kw>
<status status="PASS" endtime="20170805 04:50:06.763" starttime="20170805 04:50:06.762"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170805 04:50:06.765" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170805045004108982_UpdateBmc/20170805045004108982_InitiateCodeUpdateBMC/20170805045004108982_BMC_general.txt"&gt;/home/fspcibld/logs/20170805045004108982_UpdateBmc/20170805045004108982_InitiateCodeUpdateBMC/20170805045004108982_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170805 04:50:06.765" starttime="20170805 04:50:06.764"></status>
</kw>
<status status="PASS" endtime="20170805 04:50:06.765" starttime="20170805 04:50:06.764"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170805 04:50:06.766" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170805045004108982_UpdateBmc/20170805045004108982_InitiateCodeUpdateBMC/20170805045004108982_BMC_general.txt"&gt;/home/fspcibld/logs/20170805045004108982_UpdateBmc/20170805045004108982_InitiateCodeUpdateBMC/20170805045004108982_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170805 04:50:06.766" starttime="20170805 04:50:06.766"></status>
</kw>
<status status="PASS" endtime="20170805 04:50:06.766" starttime="20170805 04:50:06.765"></status>
</kw>
<status status="PASS" endtime="20170805 04:50:06.766" starttime="20170805 04:50:06.760"></status>
</kw>
<status status="PASS" endtime="20170805 04:50:06.766" starttime="20170805 04:50:06.760"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170805 04:50:06.767" level="INFO">${cmd_buf} = BMC Execute Command  uptime  ignore_err=1</msg>
<status status="PASS" endtime="20170805 04:50:06.767" starttime="20170805 04:50:06.766"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>uptime</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170805 04:50:06.837" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.86.161
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170805 04:50:06.838" level="INFO">Executing command 'uptime'.</msg>
<msg timestamp="20170805 04:50:06.894" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20170805 04:50:06.895" starttime="20170805 04:50:06.796"></status>
</kw>
<msg timestamp="20170805 04:50:06.895" level="INFO">${status} = PASS</msg>
<msg timestamp="20170805 04:50:06.895" level="INFO">${ret_values} = (u' 04:50:11 up 3 min,  load average: 1.27, 1.53, 0.72', u'', 0)</msg>
<status status="PASS" endtime="20170805 04:50:06.895" starttime="20170805 04:50:06.767"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170805 04:50:06.896" level="INFO">${stdout} =  04:50:11 up 3 min,  load average: 1.27, 1.53, 0.72</msg>
<status status="PASS" endtime="20170805 04:50:06.896" starttime="20170805 04:50:06.895"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170805 04:50:06.896" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170805 04:50:06.896" starttime="20170805 04:50:06.896"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170805 04:50:06.906" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170805045004108982_UpdateBmc/20170805045004108982_InitiateCodeUpdateBMC/20170805045004108982_BMC_general.txt"&gt;/home/fspcibld/logs/20170805045004108982_UpdateBmc/20170805045004108982_InitiateCodeUpdateBMC/20170805045004108982_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170805 04:50:06.906" starttime="20170805 04:50:06.906"></status>
</kw>
<status status="PASS" endtime="20170805 04:50:06.906" starttime="20170805 04:50:06.905"></status>
</kw>
<status status="PASS" endtime="20170805 04:50:06.907" starttime="20170805 04:50:06.897"></status>
</kw>
<status status="PASS" endtime="20170805 04:50:06.907" starttime="20170805 04:50:06.759"></status>
</kw>
<status status="PASS" endtime="20170805 04:50:06.907" starttime="20170805 04:50:06.759"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC File System Disk Space Usage', 'df -hT')">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170805 04:50:06.910" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170805045004108982_UpdateBmc/20170805045004108982_InitiateCodeUpdateBMC/20170805045004108982_BMC_general.txt"&gt;/home/fspcibld/logs/20170805045004108982_UpdateBmc/20170805045004108982_InitiateCodeUpdateBMC/20170805045004108982_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170805 04:50:06.910" starttime="20170805 04:50:06.910"></status>
</kw>
<status status="PASS" endtime="20170805 04:50:06.910" starttime="20170805 04:50:06.909"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170805 04:50:06.912" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170805045004108982_UpdateBmc/20170805045004108982_InitiateCodeUpdateBMC/20170805045004108982_BMC_general.txt"&gt;/home/fspcibld/logs/20170805045004108982_UpdateBmc/20170805045004108982_InitiateCodeUpdateBMC/20170805045004108982_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170805 04:50:06.912" starttime="20170805 04:50:06.911"></status>
</kw>
<status status="PASS" endtime="20170805 04:50:06.912" starttime="20170805 04:50:06.910"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170805 04:50:06.914" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170805045004108982_UpdateBmc/20170805045004108982_InitiateCodeUpdateBMC/20170805045004108982_BMC_general.txt"&gt;/home/fspcibld/logs/20170805045004108982_UpdateBmc/20170805045004108982_InitiateCodeUpdateBMC/20170805045004108982_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170805 04:50:06.914" starttime="20170805 04:50:06.913"></status>
</kw>
<status status="PASS" endtime="20170805 04:50:06.914" starttime="20170805 04:50:06.912"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170805 04:50:06.915" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170805045004108982_UpdateBmc/20170805045004108982_InitiateCodeUpdateBMC/20170805045004108982_BMC_general.txt"&gt;/home/fspcibld/logs/20170805045004108982_UpdateBmc/20170805045004108982_InitiateCodeUpdateBMC/20170805045004108982_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170805 04:50:06.915" starttime="20170805 04:50:06.915"></status>
</kw>
<status status="PASS" endtime="20170805 04:50:06.915" starttime="20170805 04:50:06.914"></status>
</kw>
<status status="PASS" endtime="20170805 04:50:06.916" starttime="20170805 04:50:06.908"></status>
</kw>
<status status="PASS" endtime="20170805 04:50:06.916" starttime="20170805 04:50:06.908"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170805 04:50:06.916" level="INFO">${cmd_buf} = BMC Execute Command  df -hT  ignore_err=1</msg>
<status status="PASS" endtime="20170805 04:50:06.917" starttime="20170805 04:50:06.916"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>df -hT</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170805 04:50:06.988" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.86.161
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170805 04:50:06.989" level="INFO">Executing command 'df -hT'.</msg>
<msg timestamp="20170805 04:50:07.066" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20170805 04:50:07.067" starttime="20170805 04:50:06.945"></status>
</kw>
<msg timestamp="20170805 04:50:07.067" level="INFO">${status} = PASS</msg>
<msg timestamp="20170805 04:50:07.067" level="INFO">${ret_values} = (u'Filesystem           Type            Size      Used Available Use% Mounted on\ndev                  devtmpfs      210.2M         0    210.2M   0% /dev\ntmpfs                tmpfs         211.1M    ...</msg>
<status status="PASS" endtime="20170805 04:50:07.067" starttime="20170805 04:50:06.917"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170805 04:50:07.068" level="INFO">${stdout} = Filesystem           Type            Size      Used Available Use% Mounted on
dev                  devtmpfs      210.2M         0    210.2M   0% /dev
tmpfs                tmpfs         211.1M     74.0...</msg>
<status status="PASS" endtime="20170805 04:50:07.068" starttime="20170805 04:50:07.067"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170805 04:50:07.068" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170805 04:50:07.068" starttime="20170805 04:50:07.068"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170805 04:50:07.075" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170805045004108982_UpdateBmc/20170805045004108982_InitiateCodeUpdateBMC/20170805045004108982_BMC_general.txt"&gt;/home/fspcibld/logs/20170805045004108982_UpdateBmc/20170805045004108982_InitiateCodeUpdateBMC/20170805045004108982_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170805 04:50:07.076" starttime="20170805 04:50:07.075"></status>
</kw>
<status status="PASS" endtime="20170805 04:50:07.076" starttime="20170805 04:50:07.074"></status>
</kw>
<status status="PASS" endtime="20170805 04:50:07.076" starttime="20170805 04:50:07.069"></status>
</kw>
<status status="PASS" endtime="20170805 04:50:07.076" starttime="20170805 04:50:06.907"></status>
</kw>
<status status="PASS" endtime="20170805 04:50:07.076" starttime="20170805 04:50:06.907"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC OS', 'uname -a')">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170805 04:50:07.080" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170805045004108982_UpdateBmc/20170805045004108982_InitiateCodeUpdateBMC/20170805045004108982_BMC_general.txt"&gt;/home/fspcibld/logs/20170805045004108982_UpdateBmc/20170805045004108982_InitiateCodeUpdateBMC/20170805045004108982_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170805 04:50:07.080" starttime="20170805 04:50:07.079"></status>
</kw>
<status status="PASS" endtime="20170805 04:50:07.080" starttime="20170805 04:50:07.078"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170805 04:50:07.082" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170805045004108982_UpdateBmc/20170805045004108982_InitiateCodeUpdateBMC/20170805045004108982_BMC_general.txt"&gt;/home/fspcibld/logs/20170805045004108982_UpdateBmc/20170805045004108982_InitiateCodeUpdateBMC/20170805045004108982_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170805 04:50:07.082" starttime="20170805 04:50:07.081"></status>
</kw>
<status status="PASS" endtime="20170805 04:50:07.082" starttime="20170805 04:50:07.080"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170805 04:50:07.083" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170805045004108982_UpdateBmc/20170805045004108982_InitiateCodeUpdateBMC/20170805045004108982_BMC_general.txt"&gt;/home/fspcibld/logs/20170805045004108982_UpdateBmc/20170805045004108982_InitiateCodeUpdateBMC/20170805045004108982_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170805 04:50:07.083" starttime="20170805 04:50:07.083"></status>
</kw>
<status status="PASS" endtime="20170805 04:50:07.083" starttime="20170805 04:50:07.082"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170805 04:50:07.084" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170805045004108982_UpdateBmc/20170805045004108982_InitiateCodeUpdateBMC/20170805045004108982_BMC_general.txt"&gt;/home/fspcibld/logs/20170805045004108982_UpdateBmc/20170805045004108982_InitiateCodeUpdateBMC/20170805045004108982_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170805 04:50:07.085" starttime="20170805 04:50:07.084"></status>
</kw>
<status status="PASS" endtime="20170805 04:50:07.085" starttime="20170805 04:50:07.083"></status>
</kw>
<status status="PASS" endtime="20170805 04:50:07.085" starttime="20170805 04:50:07.077"></status>
</kw>
<status status="PASS" endtime="20170805 04:50:07.085" starttime="20170805 04:50:07.077"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170805 04:50:07.086" level="INFO">${cmd_buf} = BMC Execute Command  uname -a  ignore_err=1</msg>
<status status="PASS" endtime="20170805 04:50:07.086" starttime="20170805 04:50:07.085"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>uname -a</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170805 04:50:07.155" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.86.161
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170805 04:50:07.155" level="INFO">Executing command 'uname -a'.</msg>
<msg timestamp="20170805 04:50:07.212" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20170805 04:50:07.212" starttime="20170805 04:50:07.116"></status>
</kw>
<msg timestamp="20170805 04:50:07.213" level="INFO">${status} = PASS</msg>
<msg timestamp="20170805 04:50:07.213" level="INFO">${ret_values} = (u'Linux witherspoon 4.10.17-03afe5775baf06c3037d62cc2a15628079af38c9 #1 Tue Aug 1 17:31:09 UTC 2017 armv6l GNU/Linux', u'', 0)</msg>
<status status="PASS" endtime="20170805 04:50:07.213" starttime="20170805 04:50:07.086"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170805 04:50:07.213" level="INFO">${stdout} = Linux witherspoon 4.10.17-03afe5775baf06c3037d62cc2a15628079af38c9 #1 Tue Aug 1 17:31:09 UTC 2017 armv6l GNU/Linux</msg>
<status status="PASS" endtime="20170805 04:50:07.214" starttime="20170805 04:50:07.213"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170805 04:50:07.214" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170805 04:50:07.214" starttime="20170805 04:50:07.214"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170805 04:50:07.222" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170805045004108982_UpdateBmc/20170805045004108982_InitiateCodeUpdateBMC/20170805045004108982_BMC_general.txt"&gt;/home/fspcibld/logs/20170805045004108982_UpdateBmc/20170805045004108982_InitiateCodeUpdateBMC/20170805045004108982_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170805 04:50:07.222" starttime="20170805 04:50:07.222"></status>
</kw>
<status status="PASS" endtime="20170805 04:50:07.223" starttime="20170805 04:50:07.221"></status>
</kw>
<status status="PASS" endtime="20170805 04:50:07.223" starttime="20170805 04:50:07.215"></status>
</kw>
<status status="PASS" endtime="20170805 04:50:07.223" starttime="20170805 04:50:07.076"></status>
</kw>
<status status="PASS" endtime="20170805 04:50:07.223" starttime="20170805 04:50:07.076"></status>
</kw>
<status status="PASS" endtime="20170805 04:50:07.223" starttime="20170805 04:50:06.759"></status>
</kw>
<status status="PASS" endtime="20170805 04:50:07.223" starttime="20170805 04:50:06.757"></status>
</kw>
<status status="PASS" endtime="20170805 04:50:07.223" starttime="20170805 04:50:06.757"></status>
</kw>
<status status="PASS" endtime="20170805 04:50:07.223" starttime="20170805 04:50:05.149"></status>
</kw>
<status status="PASS" endtime="20170805 04:50:07.223" starttime="20170805 04:50:05.147"></status>
</kw>
<status status="PASS" endtime="20170805 04:50:07.223" starttime="20170805 04:50:05.126"></status>
</kw>
<status status="PASS" endtime="20170805 04:50:07.223" starttime="20170805 04:50:05.123"></status>
</kw>
<status status="PASS" endtime="20170805 04:50:07.223" starttime="20170805 04:50:05.122"></status>
</kw>
<kw type="foritem" name="${method} = ('Get Request FFDC', 'BMC FFDC Get Requests')">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status status="PASS" endtime="20170805 04:50:07.226" starttime="20170805 04:50:07.225"></status>
</kw>
<msg timestamp="20170805 04:50:07.226" level="INFO">${status} = PASS</msg>
<msg timestamp="20170805 04:50:07.226" level="INFO">${ret_values} = None</msg>
<status status="PASS" endtime="20170805 04:50:07.226" starttime="20170805 04:50:07.225"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status status="PASS" endtime="20170805 04:50:07.226" starttime="20170805 04:50:07.226"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="BMC FFDC Get Requests" library="openbmc_ffdc_methods">
<doc>Get the command list and iterate</doc>
<kw name="Get Ffdc Get Request Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg timestamp="20170805 04:50:07.248" level="INFO">@{entries} = [ GET REQUESTS ]</msg>
<status status="PASS" endtime="20170805 04:50:07.248" starttime="20170805 04:50:07.248"></status>
</kw>
<kw type="for" name="${index} IN [ @{entries} ]">
<kw type="foritem" name="${index} = GET REQUESTS">
<kw name="Log FFDC Get Requests" library="openbmc_ffdc_methods">
<doc>Create file in current FFDC log directory.</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Get Request" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg timestamp="20170805 04:50:07.250" level="INFO">@{cmd_list} = [ ('BMC_elog', '/xyz/openbmc_project/logging/entry/enumerate') | ('BMC_sensor_list', '/org/openbmc/sensors/enumerate') | ('BMC_inventory', '/xyz/openbmc_project/inventory/enumerate') | ('BMC_led', '/o...</msg>
<status status="PASS" endtime="20170805 04:50:07.251" starttime="20170805 04:50:07.250"></status>
</kw>
<kw type="for" name="${cmd} IN [ @{cmd_list} ]">
<kw type="foritem" name="${cmd} = ('BMC_elog', '/xyz/openbmc_project/logging/entry/enumerate')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170805 04:50:07.253" level="INFO">${logpath} = /home/fspcibld/logs/20170805045004108982_UpdateBmc/20170805045004108982_InitiateCodeUpdateBMC/20170805045004108982_BMC_elog.txt</msg>
<status status="PASS" endtime="20170805 04:50:07.253" starttime="20170805 04:50:07.252"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170805 04:50:07.258" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170805 04:50:07.259" starttime="20170805 04:50:07.258"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170805 04:50:07.260" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170805 04:50:07.260" starttime="20170805 04:50:07.259"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170805 04:50:07.261" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170805 04:50:07.261" starttime="20170805 04:50:07.260"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170805 04:50:07.262" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170805 04:50:07.262" starttime="20170805 04:50:07.261"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170805 04:50:07.485" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170805 04:50:07.485" starttime="20170805 04:50:07.262"></status>
</kw>
<msg timestamp="20170805 04:50:07.485" level="INFO">${status} = PASS</msg>
<msg timestamp="20170805 04:50:07.485" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170805 04:50:07.485" starttime="20170805 04:50:07.262"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170805 04:50:07.486" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170805 04:50:07.486" starttime="20170805 04:50:07.485"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170805 04:50:07.486" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170805 04:50:07.487" starttime="20170805 04:50:07.486"></status>
</kw>
<status status="PASS" endtime="20170805 04:50:07.487" starttime="20170805 04:50:07.256"></status>
</kw>
<status status="PASS" endtime="20170805 04:50:07.487" starttime="20170805 04:50:07.255"></status>
</kw>
<status status="PASS" endtime="20170805 04:50:07.487" starttime="20170805 04:50:07.254"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170805 04:50:07.487" level="INFO">${base_uri} = /xyz/openbmc_project/logging/entry/enumerate</msg>
<status status="PASS" endtime="20170805 04:50:07.488" starttime="20170805 04:50:07.487"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170805 04:50:07.488" starttime="20170805 04:50:07.488"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170805 04:50:07.614" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry/enumerate, headers=None json=None</msg>
<msg timestamp="20170805 04:50:07.614" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170805 04:50:07.614" starttime="20170805 04:50:07.488"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170805 04:50:07.615" starttime="20170805 04:50:07.615"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170805 04:50:07.616" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170805 04:50:07.616" starttime="20170805 04:50:07.615"></status>
</kw>
<msg timestamp="20170805 04:50:07.616" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170805 04:50:07.616" starttime="20170805 04:50:07.253"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170805 04:50:07.617" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170805 04:50:07.617" starttime="20170805 04:50:07.617"></status>
</kw>
<msg timestamp="20170805 04:50:07.617" level="INFO">${status} = True</msg>
<status status="PASS" endtime="20170805 04:50:07.617" starttime="20170805 04:50:07.616"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status status="PASS" endtime="20170805 04:50:07.618" starttime="20170805 04:50:07.618"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg timestamp="20170805 04:50:07.619" level="INFO">To JSON using : content={
  "data": {
    "/xyz/openbmc_project/logging/entry/1": {
      "AdditionalData": [], 
      "Id": 1, 
      "Message": "xyz.openbmc_project.Common.Error.InternalFailure", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Error", 
      "Timestamp": 1501908452360, 
      "associations": []
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170805 04:50:07.619" level="INFO">To JSON using : pretty_print=True </msg>
<msg timestamp="20170805 04:50:07.619" level="INFO">${jsondata} = {
    "data": {
        "/xyz/openbmc_project/logging/entry/1": {
            "AdditionalData": [],
            "Id": 1,
            "Message": "xyz.openbmc_project.Common.Error.InternalFailure",
    ...</msg>
<status status="PASS" endtime="20170805 04:50:07.619" starttime="20170805 04:50:07.618"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170805 04:50:07.621" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170805045004108982_UpdateBmc/20170805045004108982_InitiateCodeUpdateBMC/20170805045004108982_BMC_elog.txt"&gt;/home/fspcibld/logs/20170805045004108982_UpdateBmc/20170805045004108982_InitiateCodeUpdateBMC/20170805045004108982_BMC_elog.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170805 04:50:07.621" starttime="20170805 04:50:07.620"></status>
</kw>
<status status="PASS" endtime="20170805 04:50:07.621" starttime="20170805 04:50:07.620"></status>
</kw>
<status status="PASS" endtime="20170805 04:50:07.621" starttime="20170805 04:50:07.251"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_sensor_list', '/org/openbmc/sensors/enumerate')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170805 04:50:07.622" level="INFO">${logpath} = /home/fspcibld/logs/20170805045004108982_UpdateBmc/20170805045004108982_InitiateCodeUpdateBMC/20170805045004108982_BMC_sensor_list.txt</msg>
<status status="PASS" endtime="20170805 04:50:07.622" starttime="20170805 04:50:07.622"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170805 04:50:07.625" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170805 04:50:07.626" starttime="20170805 04:50:07.625"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170805 04:50:07.626" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170805 04:50:07.626" starttime="20170805 04:50:07.626"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170805 04:50:07.627" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170805 04:50:07.627" starttime="20170805 04:50:07.627"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170805 04:50:07.628" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170805 04:50:07.628" starttime="20170805 04:50:07.627"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170805 04:50:07.825" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170805 04:50:07.825" starttime="20170805 04:50:07.628"></status>
</kw>
<msg timestamp="20170805 04:50:07.825" level="INFO">${status} = PASS</msg>
<msg timestamp="20170805 04:50:07.825" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170805 04:50:07.825" starttime="20170805 04:50:07.628"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170805 04:50:07.826" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170805 04:50:07.826" starttime="20170805 04:50:07.826"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170805 04:50:07.827" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170805 04:50:07.827" starttime="20170805 04:50:07.827"></status>
</kw>
<status status="PASS" endtime="20170805 04:50:07.827" starttime="20170805 04:50:07.624"></status>
</kw>
<status status="PASS" endtime="20170805 04:50:07.827" starttime="20170805 04:50:07.624"></status>
</kw>
<status status="PASS" endtime="20170805 04:50:07.827" starttime="20170805 04:50:07.623"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170805 04:50:07.828" level="INFO">${base_uri} = /org/openbmc/sensors/enumerate</msg>
<status status="PASS" endtime="20170805 04:50:07.828" starttime="20170805 04:50:07.828"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170805 04:50:07.829" starttime="20170805 04:50:07.828"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170805 04:50:08.001" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/enumerate, headers=None json=None</msg>
<msg timestamp="20170805 04:50:08.001" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170805 04:50:08.001" starttime="20170805 04:50:07.829"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170805 04:50:08.002" starttime="20170805 04:50:08.002"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170805 04:50:08.003" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170805 04:50:08.003" starttime="20170805 04:50:08.003"></status>
</kw>
<msg timestamp="20170805 04:50:08.003" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170805 04:50:08.003" starttime="20170805 04:50:07.623"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170805 04:50:08.004" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170805 04:50:08.005" starttime="20170805 04:50:08.004"></status>
</kw>
<msg timestamp="20170805 04:50:08.005" level="INFO">${status} = True</msg>
<status status="PASS" endtime="20170805 04:50:08.005" starttime="20170805 04:50:08.004"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status status="PASS" endtime="20170805 04:50:08.005" starttime="20170805 04:50:08.005"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg timestamp="20170805 04:50:08.006" level="INFO">To JSON using : content={
  "data": {
    "/org/openbmc/sensors/host/BootCount": {
      "error": 0, 
      "units": "", 
      "value": 3
    }, 
    "/org/openbmc/sensors/host/BootProgress": {
      "error": 0, 
      "units": "", 
      "value": "Off"
    }, 
    "/org/openbmc/sensors/host/OperatingSystemStatus": {
      "error": 0, 
      "units": "", 
      "value": "Off"
    }, 
    "/org/openbmc/sensors/host/PowerSupplyDerating": {
      "error": 0, 
      "units": "", 
      "value": 10
    }, 
    "/org/openbmc/sensors/host/PowerSupplyRedundancy": {
      "error": 0, 
      "units": "", 
      "value": "Disabled"
    }, 
    "/org/openbmc/sensors/host/TurboAllowed": {
      "error": 0, 
      "units": "", 
      "value": 0
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170805 04:50:08.006" level="INFO">To JSON using : pretty_print=True </msg>
<msg timestamp="20170805 04:50:08.006" level="INFO">${jsondata} = {
    "data": {
        "/org/openbmc/sensors/host/BootCount": {
            "error": 0,
            "units": "",
            "value": 3
        },
        "/org/openbmc/sensors/host/BootProgress": {
...</msg>
<status status="PASS" endtime="20170805 04:50:08.006" starttime="20170805 04:50:08.006"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170805 04:50:08.008" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170805045004108982_UpdateBmc/20170805045004108982_InitiateCodeUpdateBMC/20170805045004108982_BMC_sensor_list.txt"&gt;/home/fspcibld/logs/20170805045004108982_UpdateBmc/20170805045004108982_InitiateCodeUpdateBMC/20170805045004108982_BMC_sensor_list.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170805 04:50:08.008" starttime="20170805 04:50:08.007"></status>
</kw>
<status status="PASS" endtime="20170805 04:50:08.008" starttime="20170805 04:50:08.006"></status>
</kw>
<status status="PASS" endtime="20170805 04:50:08.008" starttime="20170805 04:50:07.622"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_inventory', '/xyz/openbmc_project/inventory/enumerate')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170805 04:50:08.009" level="INFO">${logpath} = /home/fspcibld/logs/20170805045004108982_UpdateBmc/20170805045004108982_InitiateCodeUpdateBMC/20170805045004108982_BMC_inventory.txt</msg>
<status status="PASS" endtime="20170805 04:50:08.009" starttime="20170805 04:50:08.008"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170805 04:50:08.012" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170805 04:50:08.012" starttime="20170805 04:50:08.011"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170805 04:50:08.013" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170805 04:50:08.013" starttime="20170805 04:50:08.012"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170805 04:50:08.014" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170805 04:50:08.014" starttime="20170805 04:50:08.013"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170805 04:50:08.015" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170805 04:50:08.015" starttime="20170805 04:50:08.014"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170805 04:50:08.205" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170805 04:50:08.205" starttime="20170805 04:50:08.016"></status>
</kw>
<msg timestamp="20170805 04:50:08.205" level="INFO">${status} = PASS</msg>
<msg timestamp="20170805 04:50:08.205" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170805 04:50:08.205" starttime="20170805 04:50:08.015"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170805 04:50:08.206" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170805 04:50:08.206" starttime="20170805 04:50:08.205"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170805 04:50:08.207" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170805 04:50:08.207" starttime="20170805 04:50:08.206"></status>
</kw>
<status status="PASS" endtime="20170805 04:50:08.207" starttime="20170805 04:50:08.011"></status>
</kw>
<status status="PASS" endtime="20170805 04:50:08.207" starttime="20170805 04:50:08.010"></status>
</kw>
<status status="PASS" endtime="20170805 04:50:08.207" starttime="20170805 04:50:08.010"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170805 04:50:08.208" level="INFO">${base_uri} = /xyz/openbmc_project/inventory/enumerate</msg>
<status status="PASS" endtime="20170805 04:50:08.208" starttime="20170805 04:50:08.207"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170805 04:50:08.209" starttime="20170805 04:50:08.208"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170805 04:50:08.448" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/inventory/enumerate, headers=None json=None</msg>
<msg timestamp="20170805 04:50:08.448" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170805 04:50:08.448" starttime="20170805 04:50:08.209"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170805 04:50:08.449" starttime="20170805 04:50:08.449"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170805 04:50:08.449" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170805 04:50:08.450" starttime="20170805 04:50:08.449"></status>
</kw>
<msg timestamp="20170805 04:50:08.450" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170805 04:50:08.450" starttime="20170805 04:50:08.009"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170805 04:50:08.451" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170805 04:50:08.451" starttime="20170805 04:50:08.451"></status>
</kw>
<msg timestamp="20170805 04:50:08.451" level="INFO">${status} = True</msg>
<status status="PASS" endtime="20170805 04:50:08.451" starttime="20170805 04:50:08.450"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status status="PASS" endtime="20170805 04:50:08.452" starttime="20170805 04:50:08.451"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg timestamp="20170805 04:50:08.453" level="INFO">To JSON using : content={
  "data": {
    "/xyz/openbmc_project/inventory/system/chassis": {
      "AirCooled": 1, 
      "WaterCooled": 1
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc": {
      "BuildDate": "", 
      "FieldReplaceable": 0, 
      "Manufacturer": "IBM", 
      "Model": "", 
      "PartNumber": "01DH051", 
      "Present": 1, 
      "PrettyName": "BMC PLANAR  ", 
      "SerialNumber": "000000000000"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc/ethernet": {
      "FieldReplaceable": 0, 
      "MACAddress": "00:00:00:00:00:00", 
      "Present": 1, 
      "PrettyName": ""
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/power_supply0": {
      "Present": 1, 
      "PrettyName": "power_supply0"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/power_supply1": {
      "Present": 1, 
      "PrettyName": "power_supply1"
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170805 04:50:08.453" level="INFO">To JSON using : pretty_print=True </msg>
<msg timestamp="20170805 04:50:08.453" level="INFO">${jsondata} = {
    "data": {
        "/xyz/openbmc_project/inventory/system/chassis": {
            "AirCooled": 1,
            "WaterCooled": 1
        },
        "/xyz/openbmc_project/inventory/system/chassis/mo...</msg>
<status status="PASS" endtime="20170805 04:50:08.453" starttime="20170805 04:50:08.452"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170805 04:50:08.455" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170805045004108982_UpdateBmc/20170805045004108982_InitiateCodeUpdateBMC/20170805045004108982_BMC_inventory.txt"&gt;/home/fspcibld/logs/20170805045004108982_UpdateBmc/20170805045004108982_InitiateCodeUpdateBMC/20170805045004108982_BMC_inventory.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170805 04:50:08.455" starttime="20170805 04:50:08.454"></status>
</kw>
<status status="PASS" endtime="20170805 04:50:08.455" starttime="20170805 04:50:08.453"></status>
</kw>
<status status="PASS" endtime="20170805 04:50:08.455" starttime="20170805 04:50:08.008"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_led', '/org/openbmc/records/events/enumerate')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170805 04:50:08.456" level="INFO">${logpath} = /home/fspcibld/logs/20170805045004108982_UpdateBmc/20170805045004108982_InitiateCodeUpdateBMC/20170805045004108982_BMC_led.txt</msg>
<status status="PASS" endtime="20170805 04:50:08.456" starttime="20170805 04:50:08.455"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170805 04:50:08.459" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170805 04:50:08.459" starttime="20170805 04:50:08.458"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170805 04:50:08.460" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170805 04:50:08.460" starttime="20170805 04:50:08.459"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170805 04:50:08.460" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170805 04:50:08.460" starttime="20170805 04:50:08.460"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170805 04:50:08.461" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170805 04:50:08.461" starttime="20170805 04:50:08.461"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170805 04:50:08.652" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170805 04:50:08.653" starttime="20170805 04:50:08.462"></status>
</kw>
<msg timestamp="20170805 04:50:08.653" level="INFO">${status} = PASS</msg>
<msg timestamp="20170805 04:50:08.653" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170805 04:50:08.653" starttime="20170805 04:50:08.461"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170805 04:50:08.653" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170805 04:50:08.654" starttime="20170805 04:50:08.653"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170805 04:50:08.654" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170805 04:50:08.654" starttime="20170805 04:50:08.654"></status>
</kw>
<status status="PASS" endtime="20170805 04:50:08.654" starttime="20170805 04:50:08.458"></status>
</kw>
<status status="PASS" endtime="20170805 04:50:08.655" starttime="20170805 04:50:08.457"></status>
</kw>
<status status="PASS" endtime="20170805 04:50:08.655" starttime="20170805 04:50:08.457"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170805 04:50:08.655" level="INFO">${base_uri} = /org/openbmc/records/events/enumerate</msg>
<status status="PASS" endtime="20170805 04:50:08.655" starttime="20170805 04:50:08.655"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170805 04:50:08.656" starttime="20170805 04:50:08.656"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170805 04:50:08.709" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/records/events/enumerate, headers=None json=None</msg>
<msg timestamp="20170805 04:50:08.709" level="INFO">${ret} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20170805 04:50:08.709" starttime="20170805 04:50:08.656"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170805 04:50:08.710" starttime="20170805 04:50:08.709"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170805 04:50:08.710" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170805 04:50:08.710" starttime="20170805 04:50:08.710"></status>
</kw>
<msg timestamp="20170805 04:50:08.710" level="INFO">${resp} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20170805 04:50:08.710" starttime="20170805 04:50:08.456"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170805 04:50:08.712" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20170805 04:50:08.712" level="FAIL">404 != 200</msg>
<status status="FAIL" endtime="20170805 04:50:08.712" starttime="20170805 04:50:08.711"></status>
</kw>
<msg timestamp="20170805 04:50:08.712" level="INFO">${status} = False</msg>
<status status="PASS" endtime="20170805 04:50:08.712" starttime="20170805 04:50:08.711"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<kw name="Continue For Loop" library="BuiltIn">
<doc>Skips the current for loop iteration and continues from the next.</doc>
<msg timestamp="20170805 04:50:08.713" level="INFO">Continuing for loop from the next iteration.</msg>
<status status="PASS" endtime="20170805 04:50:08.713" starttime="20170805 04:50:08.713"></status>
</kw>
<status status="PASS" endtime="20170805 04:50:08.714" starttime="20170805 04:50:08.713"></status>
</kw>
<status status="PASS" endtime="20170805 04:50:08.714" starttime="20170805 04:50:08.455"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_record_log', '/org/openbmc/control/led/enumerate')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170805 04:50:08.714" level="INFO">${logpath} = /home/fspcibld/logs/20170805045004108982_UpdateBmc/20170805045004108982_InitiateCodeUpdateBMC/20170805045004108982_BMC_record_log.txt</msg>
<status status="PASS" endtime="20170805 04:50:08.714" starttime="20170805 04:50:08.714"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170805 04:50:08.717" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170805 04:50:08.718" starttime="20170805 04:50:08.717"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170805 04:50:08.719" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170805 04:50:08.719" starttime="20170805 04:50:08.718"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170805 04:50:08.720" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170805 04:50:08.720" starttime="20170805 04:50:08.719"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170805 04:50:08.721" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170805 04:50:08.721" starttime="20170805 04:50:08.720"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170805 04:50:08.923" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170805 04:50:08.924" starttime="20170805 04:50:08.722"></status>
</kw>
<msg timestamp="20170805 04:50:08.924" level="INFO">${status} = PASS</msg>
<msg timestamp="20170805 04:50:08.924" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170805 04:50:08.924" starttime="20170805 04:50:08.721"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170805 04:50:08.925" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170805 04:50:08.925" starttime="20170805 04:50:08.924"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170805 04:50:08.926" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170805 04:50:08.926" starttime="20170805 04:50:08.925"></status>
</kw>
<status status="PASS" endtime="20170805 04:50:08.926" starttime="20170805 04:50:08.716"></status>
</kw>
<status status="PASS" endtime="20170805 04:50:08.926" starttime="20170805 04:50:08.716"></status>
</kw>
<status status="PASS" endtime="20170805 04:50:08.927" starttime="20170805 04:50:08.715"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170805 04:50:08.927" level="INFO">${base_uri} = /org/openbmc/control/led/enumerate</msg>
<status status="PASS" endtime="20170805 04:50:08.928" starttime="20170805 04:50:08.927"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170805 04:50:08.928" starttime="20170805 04:50:08.928"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170805 04:50:08.989" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/control/led/enumerate, headers=None json=None</msg>
<msg timestamp="20170805 04:50:08.989" level="INFO">${ret} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20170805 04:50:08.989" starttime="20170805 04:50:08.929"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170805 04:50:08.990" starttime="20170805 04:50:08.990"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170805 04:50:08.990" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170805 04:50:08.990" starttime="20170805 04:50:08.990"></status>
</kw>
<msg timestamp="20170805 04:50:08.991" level="INFO">${resp} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20170805 04:50:08.991" starttime="20170805 04:50:08.715"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170805 04:50:08.992" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20170805 04:50:08.992" level="FAIL">404 != 200</msg>
<status status="FAIL" endtime="20170805 04:50:08.992" starttime="20170805 04:50:08.991"></status>
</kw>
<msg timestamp="20170805 04:50:08.992" level="INFO">${status} = False</msg>
<status status="PASS" endtime="20170805 04:50:08.992" starttime="20170805 04:50:08.991"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<kw name="Continue For Loop" library="BuiltIn">
<doc>Skips the current for loop iteration and continues from the next.</doc>
<msg timestamp="20170805 04:50:08.993" level="INFO">Continuing for loop from the next iteration.</msg>
<status status="PASS" endtime="20170805 04:50:08.993" starttime="20170805 04:50:08.993"></status>
</kw>
<status status="PASS" endtime="20170805 04:50:08.994" starttime="20170805 04:50:08.993"></status>
</kw>
<status status="PASS" endtime="20170805 04:50:08.994" starttime="20170805 04:50:08.714"></status>
</kw>
<status status="PASS" endtime="20170805 04:50:08.994" starttime="20170805 04:50:07.251"></status>
</kw>
<status status="PASS" endtime="20170805 04:50:08.994" starttime="20170805 04:50:07.249"></status>
</kw>
<status status="PASS" endtime="20170805 04:50:08.994" starttime="20170805 04:50:07.249"></status>
</kw>
<status status="PASS" endtime="20170805 04:50:08.994" starttime="20170805 04:50:07.249"></status>
</kw>
<status status="PASS" endtime="20170805 04:50:08.994" starttime="20170805 04:50:07.247"></status>
</kw>
<status status="PASS" endtime="20170805 04:50:08.994" starttime="20170805 04:50:07.227"></status>
</kw>
<status status="PASS" endtime="20170805 04:50:08.994" starttime="20170805 04:50:07.224"></status>
</kw>
<status status="PASS" endtime="20170805 04:50:08.994" starttime="20170805 04:50:07.223"></status>
</kw>
<kw type="foritem" name="${method} = ('Core Files', 'SCP Coredump Files')">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status status="PASS" endtime="20170805 04:50:08.996" starttime="20170805 04:50:08.996"></status>
</kw>
<msg timestamp="20170805 04:50:08.996" level="INFO">${status} = PASS</msg>
<msg timestamp="20170805 04:50:08.996" level="INFO">${ret_values} = None</msg>
<status status="PASS" endtime="20170805 04:50:08.996" starttime="20170805 04:50:08.995"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status status="PASS" endtime="20170805 04:50:08.997" starttime="20170805 04:50:08.997"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="SCP Coredump Files" library="openbmc_ffdc_methods">
<doc>Copy core dump file from BMC to local system.</doc>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>ls /tmp/core_*</arg>
</arguments>
<assign>
<var>${core_files}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20170805 04:50:09.051" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.86.161
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170805 04:50:09.052" level="INFO">Executing command 'ls /tmp/core_*'.</msg>
<msg timestamp="20170805 04:50:09.121" level="INFO">Command exited with return code 1.</msg>
<msg timestamp="20170805 04:50:09.135" level="INFO">${core_files} = None</msg>
<msg timestamp="20170805 04:50:09.135" level="INFO">${stderr} = None</msg>
<msg timestamp="20170805 04:50:09.135" level="INFO">${rc} = None</msg>
<msg timestamp="20170805 04:50:09.135" level="FAIL">#(UTC) 2017/08/05 04:50:09.133249 -    4.044375 - **ERROR** The prior SSH command returned a non-zero return code:
rc:                                               0x00000001
ls: /tmp/core_*: No such file or directory
: 1 != 0</msg>
<status status="FAIL" endtime="20170805 04:50:09.135" starttime="20170805 04:50:09.020"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${core_files}</arg>
</arguments>
<assign>
<var>@{core_list}</var>
</assign>
<msg timestamp="20170805 04:50:09.136" level="INFO">@{core_list} = [ ]</msg>
<msg timestamp="20170805 04:50:09.136" level="FAIL">AttributeError: 'NoneType' object has no attribute 'split'</msg>
<status status="FAIL" endtime="20170805 04:50:09.136" starttime="20170805 04:50:09.135"></status>
</kw>
<kw name="Run Key U" library="gen_robot_keyword">
<doc>Run keyword unconditionally (i.e. without regard to global test_mode</doc>
<arguments>
<arg>Open Connection for SCP</arg>
</arguments>
<kw name="Open Connection for SCP" library="connection_client">
<kw name="Import Library" library="BuiltIn">
<doc>Imports a library with the given name and optional arguments.</doc>
<arguments>
<arg>SCPLibrary</arg>
<arg>WITH NAME</arg>
<arg>scp</arg>
</arguments>
<status status="PASS" endtime="20170805 04:50:09.151" starttime="20170805 04:50:09.148"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' == '${EMPTY}'</arg>
<arg>scp.Open connection</arg>
<arg>${OPENBMC_HOST}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>scp.Open connection</arg>
<arg>${OPENBMC_HOST}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
</arguments>
<kw name="Open Connection" library="scp">
<doc>Opens a new SCP connection to the given host.</doc>
<arguments>
<arg>${OPENBMC_HOST}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
</arguments>
<status status="PASS" endtime="20170805 04:50:09.836" starttime="20170805 04:50:09.153"></status>
</kw>
<status status="PASS" endtime="20170805 04:50:09.836" starttime="20170805 04:50:09.152"></status>
</kw>
<status status="PASS" endtime="20170805 04:50:09.836" starttime="20170805 04:50:09.147"></status>
</kw>
<status status="PASS" endtime="20170805 04:50:09.837" starttime="20170805 04:50:09.137"></status>
</kw>
<kw type="for" name="${index} IN [ @{core_list} ]">
<status status="PASS" endtime="20170805 04:50:09.837" starttime="20170805 04:50:09.837"></status>
</kw>
<status status="FAIL" endtime="20170805 04:50:09.837" starttime="20170805 04:50:09.019"></status>
</kw>
<status status="PASS" endtime="20170805 04:50:09.837" starttime="20170805 04:50:08.997"></status>
</kw>
<status status="PASS" endtime="20170805 04:50:09.837" starttime="20170805 04:50:08.994"></status>
</kw>
<status status="PASS" endtime="20170805 04:50:09.838" starttime="20170805 04:50:08.994"></status>
</kw>
<kw type="foritem" name="${method} = ('BMC Specific Files', 'BMC FFDC Files')">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status status="PASS" endtime="20170805 04:50:09.840" starttime="20170805 04:50:09.840"></status>
</kw>
<msg timestamp="20170805 04:50:09.840" level="INFO">${status} = PASS</msg>
<msg timestamp="20170805 04:50:09.840" level="INFO">${ret_values} = None</msg>
<status status="PASS" endtime="20170805 04:50:09.840" starttime="20170805 04:50:09.839"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status status="PASS" endtime="20170805 04:50:09.841" starttime="20170805 04:50:09.840"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="BMC FFDC Files" library="openbmc_ffdc_methods">
<doc>Get the command list and iterate</doc>
<kw name="Get Ffdc File Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg timestamp="20170805 04:50:09.860" level="INFO">@{entries} = [ BMC FILES ]</msg>
<status status="PASS" endtime="20170805 04:50:09.860" starttime="20170805 04:50:09.860"></status>
</kw>
<kw type="for" name="${index} IN [ @{entries} ]">
<kw type="foritem" name="${index} = BMC FILES">
<kw name="Create File and Write Data" library="openbmc_ffdc_methods">
<doc>Create files to current FFDC log directory,</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Bmc File" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg timestamp="20170805 04:50:09.861" level="INFO">@{cmd_list} = [ ('BMC_proc_fd_active_list', 'ls -Al /proc/*/fd/') | ('BMC_procinfo', 'cat /proc/cpuinfo') | ('BMC_meminfo', 'cat /proc/meminfo') | ('BMC_proc_list', 'top -n 1 -b') | ('BMC_dmesg', 'dmesg') | ('BMC_j...</msg>
<status status="PASS" endtime="20170805 04:50:09.861" starttime="20170805 04:50:09.861"></status>
</kw>
<kw type="for" name="${cmd} IN [ @{cmd_list} ]">
<kw type="foritem" name="${cmd} = ('BMC_proc_fd_active_list', 'ls -Al /proc/*/fd/')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170805 04:50:09.862" level="INFO">${logpath} = /home/fspcibld/logs/20170805045004108982_UpdateBmc/20170805045004108982_InitiateCodeUpdateBMC/20170805045004108982_BMC_proc_fd_active_list.txt</msg>
<status status="PASS" endtime="20170805 04:50:09.862" starttime="20170805 04:50:09.862"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status status="PASS" endtime="20170805 04:50:09.864" starttime="20170805 04:50:09.863"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170805 04:50:09.865" level="INFO">${cmd_buf} = BMC Execute Command  ls -Al /proc/*/fd/  ignore_err=1</msg>
<status status="PASS" endtime="20170805 04:50:09.865" starttime="20170805 04:50:09.864"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>ls -Al /proc/*/fd/</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170805 04:50:09.928" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.86.161
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170805 04:50:09.929" level="INFO">Executing command 'ls -Al /proc/*/fd/'.</msg>
<msg timestamp="20170805 04:50:10.421" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20170805 04:50:10.421" starttime="20170805 04:50:09.894"></status>
</kw>
<msg timestamp="20170805 04:50:10.422" level="INFO">${status} = PASS</msg>
<msg timestamp="20170805 04:50:10.423" level="INFO">${ret_values} = (u'/proc/1/fd/:\ntotal 0\nlrwx------    1 root     root            64 Aug  5 04:50 0 -&gt; /dev/null\nlrwx------    1 root     root            64 Aug  5 04:50 1 -&gt; /dev/null\nlr-x------    1 root     roo...</msg>
<status status="PASS" endtime="20170805 04:50:10.423" starttime="20170805 04:50:09.865"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170805 04:50:10.424" level="INFO">${stdout} = /proc/1/fd/:
total 0
lrwx------    1 root     root            64 Aug  5 04:50 0 -&gt; /dev/null
lrwx------    1 root     root            64 Aug  5 04:50 1 -&gt; /dev/null
lr-x------    1 root     root      ...</msg>
<status status="PASS" endtime="20170805 04:50:10.424" starttime="20170805 04:50:10.423"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170805 04:50:10.425" level="INFO">${stderr} = ls: /proc/1240/fd/3: cannot read link: No such file or directory
ls: /proc/self/fd/3: cannot read link: No such file or directory
ls: /proc/thread-self/fd/3: cannot read link: No such file or director...</msg>
<status status="PASS" endtime="20170805 04:50:10.425" starttime="20170805 04:50:10.425"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170805 04:50:10.437" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170805045004108982_UpdateBmc/20170805045004108982_InitiateCodeUpdateBMC/20170805045004108982_BMC_proc_fd_active_list.txt"&gt;/home/fspcibld/logs/20170805045004108982_UpdateBmc/20170805045004108982_InitiateCodeUpdateBMC/20170805045004108982_BMC_proc_fd_active_list.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170805 04:50:10.437" starttime="20170805 04:50:10.436"></status>
</kw>
<status status="PASS" endtime="20170805 04:50:10.438" starttime="20170805 04:50:10.434"></status>
</kw>
<status status="PASS" endtime="20170805 04:50:10.438" starttime="20170805 04:50:10.426"></status>
</kw>
<status status="PASS" endtime="20170805 04:50:10.438" starttime="20170805 04:50:09.863"></status>
</kw>
<status status="PASS" endtime="20170805 04:50:10.438" starttime="20170805 04:50:09.862"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_procinfo', 'cat /proc/cpuinfo')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170805 04:50:10.439" level="INFO">${logpath} = /home/fspcibld/logs/20170805045004108982_UpdateBmc/20170805045004108982_InitiateCodeUpdateBMC/20170805045004108982_BMC_procinfo.txt</msg>
<status status="PASS" endtime="20170805 04:50:10.439" starttime="20170805 04:50:10.438"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status status="PASS" endtime="20170805 04:50:10.440" starttime="20170805 04:50:10.440"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170805 04:50:10.441" level="INFO">${cmd_buf} = BMC Execute Command  cat /proc/cpuinfo  ignore_err=1</msg>
<status status="PASS" endtime="20170805 04:50:10.441" starttime="20170805 04:50:10.441"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>cat /proc/cpuinfo</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170805 04:50:10.503" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.86.161
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170805 04:50:10.503" level="INFO">Executing command 'cat /proc/cpuinfo'.</msg>
<msg timestamp="20170805 04:50:10.584" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20170805 04:50:10.584" starttime="20170805 04:50:10.468"></status>
</kw>
<msg timestamp="20170805 04:50:10.584" level="INFO">${status} = PASS</msg>
<msg timestamp="20170805 04:50:10.584" level="INFO">${ret_values} = (u'processor\t: 0\nmodel name\t: ARMv6-compatible processor rev 7 (v6l)\nBogoMIPS\t: 789.70\nFeatures\t: half thumb fastmult edsp java tls \nCPU implementer\t: 0x41\nCPU architecture: 7\nCPU variant\t...</msg>
<status status="PASS" endtime="20170805 04:50:10.584" starttime="20170805 04:50:10.441"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170805 04:50:10.585" level="INFO">${stdout} = processor	: 0
model name	: ARMv6-compatible processor rev 7 (v6l)
BogoMIPS	: 789.70
Features	: half thumb fastmult edsp java tls 
CPU implementer	: 0x41
CPU architecture: 7
CPU variant	: 0x0
CPU part	...</msg>
<status status="PASS" endtime="20170805 04:50:10.585" starttime="20170805 04:50:10.585"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170805 04:50:10.586" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170805 04:50:10.586" starttime="20170805 04:50:10.585"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170805 04:50:10.593" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170805045004108982_UpdateBmc/20170805045004108982_InitiateCodeUpdateBMC/20170805045004108982_BMC_procinfo.txt"&gt;/home/fspcibld/logs/20170805045004108982_UpdateBmc/20170805045004108982_InitiateCodeUpdateBMC/20170805045004108982_BMC_procinfo.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170805 04:50:10.593" starttime="20170805 04:50:10.592"></status>
</kw>
<status status="PASS" endtime="20170805 04:50:10.593" starttime="20170805 04:50:10.591"></status>
</kw>
<status status="PASS" endtime="20170805 04:50:10.593" starttime="20170805 04:50:10.586"></status>
</kw>
<status status="PASS" endtime="20170805 04:50:10.593" starttime="20170805 04:50:10.439"></status>
</kw>
<status status="PASS" endtime="20170805 04:50:10.593" starttime="20170805 04:50:10.438"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_meminfo', 'cat /proc/meminfo')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170805 04:50:10.594" level="INFO">${logpath} = /home/fspcibld/logs/20170805045004108982_UpdateBmc/20170805045004108982_InitiateCodeUpdateBMC/20170805045004108982_BMC_meminfo.txt</msg>
<status status="PASS" endtime="20170805 04:50:10.594" starttime="20170805 04:50:10.594"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status status="PASS" endtime="20170805 04:50:10.596" starttime="20170805 04:50:10.595"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170805 04:50:10.596" level="INFO">${cmd_buf} = BMC Execute Command  cat /proc/meminfo  ignore_err=1</msg>
<status status="PASS" endtime="20170805 04:50:10.597" starttime="20170805 04:50:10.596"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>cat /proc/meminfo</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170805 04:50:10.662" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.86.161
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170805 04:50:10.663" level="INFO">Executing command 'cat /proc/meminfo'.</msg>
<msg timestamp="20170805 04:50:10.740" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20170805 04:50:10.740" starttime="20170805 04:50:10.622"></status>
</kw>
<msg timestamp="20170805 04:50:10.740" level="INFO">${status} = PASS</msg>
<msg timestamp="20170805 04:50:10.740" level="INFO">${ret_values} = (u'MemTotal:         432268 kB\nMemFree:          181328 kB\nMemAvailable:     227272 kB\nBuffers:           11264 kB\nCached:           150264 kB\nSwapCached:            0 kB\nActive:           14591...</msg>
<status status="PASS" endtime="20170805 04:50:10.740" starttime="20170805 04:50:10.597"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170805 04:50:10.741" level="INFO">${stdout} = MemTotal:         432268 kB
MemFree:          181328 kB
MemAvailable:     227272 kB
Buffers:           11264 kB
Cached:           150264 kB
SwapCached:            0 kB
Active:           145912 kB
Inac...</msg>
<status status="PASS" endtime="20170805 04:50:10.741" starttime="20170805 04:50:10.741"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170805 04:50:10.742" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170805 04:50:10.742" starttime="20170805 04:50:10.741"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170805 04:50:10.749" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170805045004108982_UpdateBmc/20170805045004108982_InitiateCodeUpdateBMC/20170805045004108982_BMC_meminfo.txt"&gt;/home/fspcibld/logs/20170805045004108982_UpdateBmc/20170805045004108982_InitiateCodeUpdateBMC/20170805045004108982_BMC_meminfo.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170805 04:50:10.749" starttime="20170805 04:50:10.749"></status>
</kw>
<status status="PASS" endtime="20170805 04:50:10.749" starttime="20170805 04:50:10.748"></status>
</kw>
<status status="PASS" endtime="20170805 04:50:10.750" starttime="20170805 04:50:10.742"></status>
</kw>
<status status="PASS" endtime="20170805 04:50:10.750" starttime="20170805 04:50:10.594"></status>
</kw>
<status status="PASS" endtime="20170805 04:50:10.750" starttime="20170805 04:50:10.593"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_proc_list', 'top -n 1 -b')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170805 04:50:10.750" level="INFO">${logpath} = /home/fspcibld/logs/20170805045004108982_UpdateBmc/20170805045004108982_InitiateCodeUpdateBMC/20170805045004108982_BMC_proc_list.txt</msg>
<status status="PASS" endtime="20170805 04:50:10.750" starttime="20170805 04:50:10.750"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status status="PASS" endtime="20170805 04:50:10.752" starttime="20170805 04:50:10.751"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170805 04:50:10.753" level="INFO">${cmd_buf} = BMC Execute Command  top -n 1 -b  ignore_err=1</msg>
<status status="PASS" endtime="20170805 04:50:10.753" starttime="20170805 04:50:10.752"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>top -n 1 -b</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170805 04:50:10.813" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.86.161
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170805 04:50:10.814" level="INFO">Executing command 'top -n 1 -b'.</msg>
<msg timestamp="20170805 04:50:11.132" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20170805 04:50:11.132" starttime="20170805 04:50:10.778"></status>
</kw>
<msg timestamp="20170805 04:50:11.133" level="INFO">${status} = PASS</msg>
<msg timestamp="20170805 04:50:11.133" level="INFO">${ret_values} = (u'Mem: 250940K used, 181328K free, 113128K shrd, 11264K buff, 150268K cached\nCPU:   8% usr   8% sys   0% nic  83% idle   0% io   0% irq   0% sirq\nLoad average: 1.26 1.53 0.72 1/152 1243\n  PID  PPI...</msg>
<status status="PASS" endtime="20170805 04:50:11.133" starttime="20170805 04:50:10.753"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170805 04:50:11.134" level="INFO">${stdout} = Mem: 250940K used, 181328K free, 113128K shrd, 11264K buff, 150268K cached
CPU:   8% usr   8% sys   0% nic  83% idle   0% io   0% irq   0% sirq
Load average: 1.26 1.53 0.72 1/152 1243
  PID  PPID USER...</msg>
<status status="PASS" endtime="20170805 04:50:11.134" starttime="20170805 04:50:11.133"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170805 04:50:11.134" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170805 04:50:11.134" starttime="20170805 04:50:11.134"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170805 04:50:11.141" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170805045004108982_UpdateBmc/20170805045004108982_InitiateCodeUpdateBMC/20170805045004108982_BMC_proc_list.txt"&gt;/home/fspcibld/logs/20170805045004108982_UpdateBmc/20170805045004108982_InitiateCodeUpdateBMC/20170805045004108982_BMC_proc_list.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170805 04:50:11.142" starttime="20170805 04:50:11.141"></status>
</kw>
<status status="PASS" endtime="20170805 04:50:11.142" starttime="20170805 04:50:11.140"></status>
</kw>
<status status="PASS" endtime="20170805 04:50:11.142" starttime="20170805 04:50:11.135"></status>
</kw>
<status status="PASS" endtime="20170805 04:50:11.142" starttime="20170805 04:50:10.751"></status>
</kw>
<status status="PASS" endtime="20170805 04:50:11.142" starttime="20170805 04:50:10.750"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_dmesg', 'dmesg')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170805 04:50:11.143" level="INFO">${logpath} = /home/fspcibld/logs/20170805045004108982_UpdateBmc/20170805045004108982_InitiateCodeUpdateBMC/20170805045004108982_BMC_dmesg.txt</msg>
<status status="PASS" endtime="20170805 04:50:11.143" starttime="20170805 04:50:11.142"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status status="PASS" endtime="20170805 04:50:11.144" starttime="20170805 04:50:11.144"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170805 04:50:11.145" level="INFO">${cmd_buf} = BMC Execute Command  dmesg  ignore_err=1</msg>
<status status="PASS" endtime="20170805 04:50:11.145" starttime="20170805 04:50:11.144"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>dmesg</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170805 04:50:11.206" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.86.161
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170805 04:50:11.207" level="INFO">Executing command 'dmesg'.</msg>
<msg timestamp="20170805 04:50:11.274" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20170805 04:50:11.274" starttime="20170805 04:50:11.170"></status>
</kw>
<msg timestamp="20170805 04:50:11.274" level="INFO">${status} = PASS</msg>
<msg timestamp="20170805 04:50:11.274" level="INFO">${ret_values} = (u'[    0.000000] Booting Linux on physical CPU 0x0\n[    0.000000] Linux version 4.10.17-03afe5775baf06c3037d62cc2a15628079af38c9 (jenkins@hudson) (gcc version 6.2.0 (GCC) ) #1 Tue Aug 1 17:31:09 UTC...</msg>
<status status="PASS" endtime="20170805 04:50:11.274" starttime="20170805 04:50:11.145"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170805 04:50:11.275" level="INFO">${stdout} = [    0.000000] Booting Linux on physical CPU 0x0
[    0.000000] Linux version 4.10.17-03afe5775baf06c3037d62cc2a15628079af38c9 (jenkins@hudson) (gcc version 6.2.0 (GCC) ) #1 Tue Aug 1 17:31:09 UTC 201...</msg>
<status status="PASS" endtime="20170805 04:50:11.275" starttime="20170805 04:50:11.275"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170805 04:50:11.276" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170805 04:50:11.276" starttime="20170805 04:50:11.275"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170805 04:50:11.283" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170805045004108982_UpdateBmc/20170805045004108982_InitiateCodeUpdateBMC/20170805045004108982_BMC_dmesg.txt"&gt;/home/fspcibld/logs/20170805045004108982_UpdateBmc/20170805045004108982_InitiateCodeUpdateBMC/20170805045004108982_BMC_dmesg.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170805 04:50:11.283" starttime="20170805 04:50:11.282"></status>
</kw>
<status status="PASS" endtime="20170805 04:50:11.283" starttime="20170805 04:50:11.281"></status>
</kw>
<status status="PASS" endtime="20170805 04:50:11.283" starttime="20170805 04:50:11.276"></status>
</kw>
<status status="PASS" endtime="20170805 04:50:11.283" starttime="20170805 04:50:11.143"></status>
</kw>
<status status="PASS" endtime="20170805 04:50:11.283" starttime="20170805 04:50:11.142"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_journalctl', 'journalctl --no-pager')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170805 04:50:11.284" level="INFO">${logpath} = /home/fspcibld/logs/20170805045004108982_UpdateBmc/20170805045004108982_InitiateCodeUpdateBMC/20170805045004108982_BMC_journalctl.txt</msg>
<status status="PASS" endtime="20170805 04:50:11.284" starttime="20170805 04:50:11.284"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status status="PASS" endtime="20170805 04:50:11.286" starttime="20170805 04:50:11.285"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170805 04:50:11.287" level="INFO">${cmd_buf} = BMC Execute Command  journalctl --no-pager  ignore_err=1</msg>
<status status="PASS" endtime="20170805 04:50:11.287" starttime="20170805 04:50:11.286"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>journalctl --no-pager</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170805 04:50:11.346" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.86.161
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170805 04:50:11.347" level="INFO">Executing command 'journalctl --no-pager'.</msg>
<msg timestamp="20170805 04:50:12.190" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20170805 04:50:12.190" starttime="20170805 04:50:11.312"></status>
</kw>
<msg timestamp="20170805 04:50:12.190" level="INFO">${status} = PASS</msg>
<msg timestamp="20170805 04:50:12.191" level="INFO">${ret_values} = (u'-- Logs begin at Sat 2017-08-05 04:46:30 UTC, end at Sat 2017-08-05 04:50:14 UTC. --\nAug 05 04:46:30 witherspoon kernel: Booting Linux on physical CPU 0x0\nAug 05 04:46:30 witherspoon kernel: Linu...</msg>
<status status="PASS" endtime="20170805 04:50:12.191" starttime="20170805 04:50:11.287"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170805 04:50:12.193" level="INFO">${stdout} = -- Logs begin at Sat 2017-08-05 04:46:30 UTC, end at Sat 2017-08-05 04:50:14 UTC. --
Aug 05 04:46:30 witherspoon kernel: Booting Linux on physical CPU 0x0
Aug 05 04:46:30 witherspoon kernel: Linux ver...</msg>
<status status="PASS" endtime="20170805 04:50:12.193" starttime="20170805 04:50:12.192"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170805 04:50:12.193" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170805 04:50:12.193" starttime="20170805 04:50:12.193"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170805 04:50:12.201" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170805045004108982_UpdateBmc/20170805045004108982_InitiateCodeUpdateBMC/20170805045004108982_BMC_journalctl.txt"&gt;/home/fspcibld/logs/20170805045004108982_UpdateBmc/20170805045004108982_InitiateCodeUpdateBMC/20170805045004108982_BMC_journalctl.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170805 04:50:12.201" starttime="20170805 04:50:12.200"></status>
</kw>
<status status="PASS" endtime="20170805 04:50:12.201" starttime="20170805 04:50:12.199"></status>
</kw>
<status status="PASS" endtime="20170805 04:50:12.202" starttime="20170805 04:50:12.194"></status>
</kw>
<status status="PASS" endtime="20170805 04:50:12.202" starttime="20170805 04:50:11.284"></status>
</kw>
<status status="PASS" endtime="20170805 04:50:12.202" starttime="20170805 04:50:11.283"></status>
</kw>
<status status="PASS" endtime="20170805 04:50:12.202" starttime="20170805 04:50:09.861"></status>
</kw>
<status status="PASS" endtime="20170805 04:50:12.202" starttime="20170805 04:50:09.860"></status>
</kw>
<status status="PASS" endtime="20170805 04:50:12.202" starttime="20170805 04:50:09.860"></status>
</kw>
<status status="PASS" endtime="20170805 04:50:12.202" starttime="20170805 04:50:09.860"></status>
</kw>
<status status="PASS" endtime="20170805 04:50:12.202" starttime="20170805 04:50:09.859"></status>
</kw>
<status status="PASS" endtime="20170805 04:50:12.202" starttime="20170805 04:50:09.841"></status>
</kw>
<status status="PASS" endtime="20170805 04:50:12.202" starttime="20170805 04:50:09.838"></status>
</kw>
<status status="PASS" endtime="20170805 04:50:12.202" starttime="20170805 04:50:09.838"></status>
</kw>
<kw type="foritem" name="${method} = ('SEL Log', 'Collect eSEL Log')">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status status="PASS" endtime="20170805 04:50:12.204" starttime="20170805 04:50:12.204"></status>
</kw>
<msg timestamp="20170805 04:50:12.204" level="INFO">${status} = PASS</msg>
<msg timestamp="20170805 04:50:12.204" level="INFO">${ret_values} = None</msg>
<status status="PASS" endtime="20170805 04:50:12.204" starttime="20170805 04:50:12.203"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status status="PASS" endtime="20170805 04:50:12.205" starttime="20170805 04:50:12.205"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="Collect eSEL Log" library="openbmc_ffdc_methods">
<doc>Collect eSEL log from logging entry and convert eSEL data</doc>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${BMC_LOGGING_ENTRY}/enumerate</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170805 04:50:12.228" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170805 04:50:12.230" starttime="20170805 04:50:12.227"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170805 04:50:12.231" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170805 04:50:12.231" starttime="20170805 04:50:12.230"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170805 04:50:12.232" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170805 04:50:12.232" starttime="20170805 04:50:12.231"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170805 04:50:12.233" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170805 04:50:12.233" starttime="20170805 04:50:12.232"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170805 04:50:12.456" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170805 04:50:12.456" starttime="20170805 04:50:12.234"></status>
</kw>
<msg timestamp="20170805 04:50:12.456" level="INFO">${status} = PASS</msg>
<msg timestamp="20170805 04:50:12.456" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170805 04:50:12.456" starttime="20170805 04:50:12.234"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170805 04:50:12.457" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170805 04:50:12.457" starttime="20170805 04:50:12.457"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170805 04:50:12.458" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170805 04:50:12.458" starttime="20170805 04:50:12.458"></status>
</kw>
<status status="PASS" endtime="20170805 04:50:12.458" starttime="20170805 04:50:12.226"></status>
</kw>
<status status="PASS" endtime="20170805 04:50:12.458" starttime="20170805 04:50:12.225"></status>
</kw>
<status status="PASS" endtime="20170805 04:50:12.459" starttime="20170805 04:50:12.224"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170805 04:50:12.459" level="INFO">${base_uri} = /xyz/openbmc_project/logging/entry//enumerate</msg>
<status status="PASS" endtime="20170805 04:50:12.459" starttime="20170805 04:50:12.459"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170805 04:50:12.460" starttime="20170805 04:50:12.459"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170805 04:50:12.581" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry//enumerate, headers=None json=None</msg>
<msg timestamp="20170805 04:50:12.582" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170805 04:50:12.582" starttime="20170805 04:50:12.460"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170805 04:50:12.582" starttime="20170805 04:50:12.582"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170805 04:50:12.583" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170805 04:50:12.583" starttime="20170805 04:50:12.583"></status>
</kw>
<msg timestamp="20170805 04:50:12.583" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170805 04:50:12.583" starttime="20170805 04:50:12.224"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170805 04:50:12.584" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170805 04:50:12.584" starttime="20170805 04:50:12.584"></status>
</kw>
<msg timestamp="20170805 04:50:12.585" level="INFO">${status} = True</msg>
<status status="PASS" endtime="20170805 04:50:12.585" starttime="20170805 04:50:12.584"></status>
</kw>
<kw name="Return From Keyword If" library="BuiltIn">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
</arguments>
<status status="PASS" endtime="20170805 04:50:12.585" starttime="20170805 04:50:12.585"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170805 04:50:12.586" level="INFO">To JSON using : content={
  "data": {
    "/xyz/openbmc_project/logging/entry/1": {
      "AdditionalData": [], 
      "Id": 1, 
      "Message": "xyz.openbmc_project.Common.Error.InternalFailure", 
      "Resolved": 0, 
      "Severity": "xyz.openbmc_project.Logging.Entry.Level.Error", 
      "Timestamp": 1501908452360, 
      "associations": []
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170805 04:50:12.586" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170805 04:50:12.586" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': {u'/xyz/openbmc_project/logging/entry/1': {u'Resolved': 0, u'AdditionalData': [], u'Severity': u'xyz.openbmc_project.Logging.Entry.Level.Error', u'Ti...</msg>
<status status="PASS" endtime="20170805 04:50:12.586" starttime="20170805 04:50:12.586"></status>
</kw>
<kw name="Get Dictionary Keys" library="Collections">
<doc>Returns keys of the given ``dictionary``.</doc>
<arguments>
<arg>${content['data']}</arg>
</arguments>
<assign>
<var>${esel_list}</var>
</assign>
<msg timestamp="20170805 04:50:12.587" level="INFO">${esel_list} = [u'/xyz/openbmc_project/logging/entry/1']</msg>
<status status="PASS" endtime="20170805 04:50:12.587" starttime="20170805 04:50:12.587"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>esel</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170805 04:50:12.588" level="INFO">${logpath} = /home/fspcibld/logs/20170805045004108982_UpdateBmc/20170805045004108982_InitiateCodeUpdateBMC/20170805045004108982_esel</msg>
<status status="PASS" endtime="20170805 04:50:12.588" starttime="20170805 04:50:12.588"></status>
</kw>
<kw name="Create File" library="OperatingSystem">
<doc>Creates a file with the given content and encoding.</doc>
<arguments>
<arg>${logpath}</arg>
</arguments>
<msg timestamp="20170805 04:50:12.589" html="yes" level="INFO">Created file '&lt;a href="file:///home/fspcibld/logs/20170805045004108982_UpdateBmc/20170805045004108982_InitiateCodeUpdateBMC/20170805045004108982_esel"&gt;/home/fspcibld/logs/20170805045004108982_UpdateBmc/20170805045004108982_InitiateCodeUpdateBMC/20170805045004108982_esel&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170805 04:50:12.589" starttime="20170805 04:50:12.589"></status>
</kw>
<kw type="for" name="${entry_path} IN [ @{esel_list} ]">
<kw type="foritem" name="${entry_path} = /xyz/openbmc_project/logging/entry/1">
<kw name="Continue For Loop If" library="BuiltIn">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>'${entry_path.rsplit('/', 1)[1]}' == 'callout'</arg>
</arguments>
<status status="PASS" endtime="20170805 04:50:12.591" starttime="20170805 04:50:12.590"></status>
</kw>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${entry_path}</arg>
<arg>AdditionalData</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${esel_data}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170805 04:50:12.597" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170805 04:50:12.597" starttime="20170805 04:50:12.596"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170805 04:50:12.598" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170805 04:50:12.598" starttime="20170805 04:50:12.597"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170805 04:50:12.599" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170805 04:50:12.599" starttime="20170805 04:50:12.598"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170805 04:50:12.600" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170805 04:50:12.600" starttime="20170805 04:50:12.599"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170805 04:50:12.818" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170805 04:50:12.818" starttime="20170805 04:50:12.601"></status>
</kw>
<msg timestamp="20170805 04:50:12.818" level="INFO">${status} = PASS</msg>
<msg timestamp="20170805 04:50:12.818" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170805 04:50:12.819" starttime="20170805 04:50:12.601"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170805 04:50:12.819" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170805 04:50:12.819" starttime="20170805 04:50:12.819"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170805 04:50:12.820" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170805 04:50:12.820" starttime="20170805 04:50:12.820"></status>
</kw>
<status status="PASS" endtime="20170805 04:50:12.820" starttime="20170805 04:50:12.595"></status>
</kw>
<status status="PASS" endtime="20170805 04:50:12.820" starttime="20170805 04:50:12.595"></status>
</kw>
<status status="PASS" endtime="20170805 04:50:12.820" starttime="20170805 04:50:12.593"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170805 04:50:12.821" level="INFO">${base_uri} = /xyz/openbmc_project/logging/entry/1/attr/AdditionalData</msg>
<status status="PASS" endtime="20170805 04:50:12.821" starttime="20170805 04:50:12.821"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170805 04:50:12.822" starttime="20170805 04:50:12.821"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170805 04:50:12.918" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry/1/attr/AdditionalData, headers=None json=None</msg>
<msg timestamp="20170805 04:50:12.918" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170805 04:50:12.918" starttime="20170805 04:50:12.822"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170805 04:50:12.919" starttime="20170805 04:50:12.918"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170805 04:50:12.919" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170805 04:50:12.919" starttime="20170805 04:50:12.919"></status>
</kw>
<msg timestamp="20170805 04:50:12.920" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170805 04:50:12.920" starttime="20170805 04:50:12.592"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170805 04:50:12.920" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170805 04:50:12.920" starttime="20170805 04:50:12.920"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170805 04:50:12.921" level="INFO">To JSON using : content={
  "data": [], 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170805 04:50:12.921" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170805 04:50:12.921" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': []}</msg>
<status status="PASS" endtime="20170805 04:50:12.921" starttime="20170805 04:50:12.921"></status>
</kw>
<msg timestamp="20170805 04:50:12.921" level="INFO">${esel_data} = []</msg>
<status status="PASS" endtime="20170805 04:50:12.921" starttime="20170805 04:50:12.591"></status>
</kw>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${esel_data}</arg>
</arguments>
<assign>
<var>${length}</var>
</assign>
<msg timestamp="20170805 04:50:12.922" level="INFO">Length is 0</msg>
<msg timestamp="20170805 04:50:12.922" level="INFO">${length} = 0</msg>
<status status="PASS" endtime="20170805 04:50:12.922" starttime="20170805 04:50:12.922"></status>
</kw>
<kw name="Continue For Loop If" library="BuiltIn">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>${length} == ${0}</arg>
</arguments>
<msg timestamp="20170805 04:50:12.923" level="INFO">Continuing for loop from the next iteration.</msg>
<status status="PASS" endtime="20170805 04:50:12.923" starttime="20170805 04:50:12.922"></status>
</kw>
<status status="PASS" endtime="20170805 04:50:12.923" starttime="20170805 04:50:12.590"></status>
</kw>
<status status="PASS" endtime="20170805 04:50:12.923" starttime="20170805 04:50:12.590"></status>
</kw>
<kw name="Run" library="OperatingSystem">
<doc>Runs the given command in the system and returns the output.</doc>
<arguments>
<arg>which eSEL.pl</arg>
</arguments>
<assign>
<var>${out}</var>
</assign>
<msg timestamp="20170805 04:50:12.927" level="INFO">Running command 'which eSEL.pl 2&gt;&amp;1'.</msg>
<msg timestamp="20170805 04:50:12.931" level="INFO">${out} = </msg>
<status status="PASS" endtime="20170805 04:50:12.931" starttime="20170805 04:50:12.923"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${out}</arg>
<arg>eSEL.pl</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${out}</arg>
<arg>eSEL.pl</arg>
</arguments>
<msg timestamp="20170805 04:50:12.938" level="FAIL">'' does not contain 'eSEL.pl'</msg>
<status status="FAIL" endtime="20170805 04:50:12.938" starttime="20170805 04:50:12.936"></status>
</kw>
<msg timestamp="20170805 04:50:12.938" level="INFO">${status} = False</msg>
<status status="PASS" endtime="20170805 04:50:12.938" starttime="20170805 04:50:12.935"></status>
</kw>
<kw name="Return From Keyword If" library="BuiltIn">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
</arguments>
<msg timestamp="20170805 04:50:12.940" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" endtime="20170805 04:50:12.941" starttime="20170805 04:50:12.940"></status>
</kw>
<status status="PASS" endtime="20170805 04:50:12.941" starttime="20170805 04:50:12.223"></status>
</kw>
<status status="PASS" endtime="20170805 04:50:12.942" starttime="20170805 04:50:12.205"></status>
</kw>
<status status="PASS" endtime="20170805 04:50:12.942" starttime="20170805 04:50:12.203"></status>
</kw>
<status status="PASS" endtime="20170805 04:50:12.943" starttime="20170805 04:50:12.202"></status>
</kw>
<kw type="foritem" name="${method} = ('OS FFDC', 'OS FFDC Files')">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status status="PASS" endtime="20170805 04:50:12.948" starttime="20170805 04:50:12.947"></status>
</kw>
<msg timestamp="20170805 04:50:12.948" level="INFO">${status} = PASS</msg>
<msg timestamp="20170805 04:50:12.948" level="INFO">${ret_values} = None</msg>
<status status="PASS" endtime="20170805 04:50:12.948" starttime="20170805 04:50:12.946"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status status="PASS" endtime="20170805 04:50:12.949" starttime="20170805 04:50:12.949"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="OS FFDC Files" library="openbmc_ffdc_methods">
<doc>Get the command list and iterate</doc>
<kw name="Return From Keyword If" library="BuiltIn">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${OS_HOST}' == '${EMPTY}'</arg>
<arg>No OS Host Provided</arg>
</arguments>
<msg timestamp="20170805 04:50:12.981" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" endtime="20170805 04:50:12.981" starttime="20170805 04:50:12.980"></status>
</kw>
<status status="PASS" endtime="20170805 04:50:12.981" starttime="20170805 04:50:12.979"></status>
</kw>
<status status="PASS" endtime="20170805 04:50:12.981" starttime="20170805 04:50:12.950"></status>
</kw>
<status status="PASS" endtime="20170805 04:50:12.981" starttime="20170805 04:50:12.945"></status>
</kw>
<status status="PASS" endtime="20170805 04:50:12.981" starttime="20170805 04:50:12.943"></status>
</kw>
<status status="PASS" endtime="20170805 04:50:12.981" starttime="20170805 04:50:05.122"></status>
</kw>
<status status="PASS" endtime="20170805 04:50:12.981" starttime="20170805 04:50:05.119"></status>
</kw>
<status status="PASS" endtime="20170805 04:50:12.981" starttime="20170805 04:50:05.119"></status>
</kw>
<status status="PASS" endtime="20170805 04:50:12.981" starttime="20170805 04:50:05.119"></status>
</kw>
<kw name="Run Key U" library="gen_robot_keyword">
<doc>Run keyword unconditionally (i.e. without regard to global test_mode</doc>
<arguments>
<arg>SSHLibrary.Close All Connections</arg>
</arguments>
<kw name="Close All Connections" library="SSHLibrary">
<doc>Closes all open connections.</doc>
<status status="PASS" endtime="20170805 04:50:13.069" starttime="20170805 04:50:12.990"></status>
</kw>
<status status="PASS" endtime="20170805 04:50:13.069" starttime="20170805 04:50:12.982"></status>
</kw>
<status status="PASS" endtime="20170805 04:50:13.069" starttime="20170805 04:50:05.118"></status>
</kw>
<status status="PASS" endtime="20170805 04:50:13.070" starttime="20170805 04:50:00.974"></status>
</kw>
<status status="PASS" endtime="20170805 04:50:13.070" starttime="20170805 04:50:00.973"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}'=='True'</arg>
<arg>Recover Quiesced Host</arg>
</arguments>
<status status="PASS" endtime="20170805 04:50:13.071" starttime="20170805 04:50:13.071"></status>
</kw>
<kw name="Log Test Case Status" library="openbmc_ffdc_methods">
<doc>Test case execution result history.</doc>
<kw name="Get Variable Value" library="BuiltIn">
<doc>Returns variable value or ``default`` if the variable does not exist.</doc>
<arguments>
<arg>${FFDC_DIR_PATH_STYLE}</arg>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${FFDC_DIR_PATH_STYLE}</var>
</assign>
<msg timestamp="20170805 04:50:13.072" level="INFO">${FFDC_DIR_PATH_STYLE} = </msg>
<status status="PASS" endtime="20170805 04:50:13.072" starttime="20170805 04:50:13.072"></status>
</kw>
<kw name="Get Variable Value" library="BuiltIn">
<doc>Returns variable value or ``default`` if the variable does not exist.</doc>
<arguments>
<arg>${FFDC_DIR_PATH}</arg>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${FFDC_DIR_PATH}</var>
</assign>
<msg timestamp="20170805 04:50:13.073" level="INFO">${FFDC_DIR_PATH} = /home/fspcibld/logs/20170805045004108982_UpdateBmc/20170805045004108982_InitiateCodeUpdateBMC/</msg>
<status status="PASS" endtime="20170805 04:50:13.073" starttime="20170805 04:50:13.073"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${FFDC_DIR_PATH}' == '${EMPTY}'</arg>
<arg>Set FFDC Defaults</arg>
</arguments>
<status status="PASS" endtime="20170805 04:50:13.074" starttime="20170805 04:50:13.074"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${FFDC_DIR_PATH_STYLE}' == '${1}'</arg>
<arg>Run Keywords</arg>
<arg>Set Global Variable</arg>
<arg>${FFDC_LOG_PATH}</arg>
<arg>${FFDC_DIR_PATH}</arg>
<arg>AND</arg>
<arg>Set Global Variable</arg>
<arg>${TEST_HISTORY}</arg>
<arg>${FFDC_DIR_PATH}test_history.txt</arg>
</arguments>
<status status="PASS" endtime="20170805 04:50:13.075" starttime="20170805 04:50:13.075"></status>
</kw>
<kw name="Create Directory" library="OperatingSystem">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>${FFDC_LOG_PATH}</arg>
</arguments>
<msg timestamp="20170805 04:50:13.077" html="yes" level="INFO">Directory '&lt;a href="file:///home/fspcibld/logs"&gt;/home/fspcibld/logs&lt;/a&gt;' already exists.</msg>
<status status="PASS" endtime="20170805 04:50:13.077" starttime="20170805 04:50:13.076"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>OperatingSystem.File Should Exist</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<assign>
<var>${exist}</var>
</assign>
<kw name="File Should Exist" library="OperatingSystem">
<doc>Fails unless the given ``path`` points to an existing file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
</arguments>
<msg timestamp="20170805 04:50:13.078" html="yes" level="INFO">File '&lt;a href="file:///home/fspcibld/logs/test_history.txt"&gt;/home/fspcibld/logs/test_history.txt&lt;/a&gt;' exists.</msg>
<status status="PASS" endtime="20170805 04:50:13.078" starttime="20170805 04:50:13.078"></status>
</kw>
<msg timestamp="20170805 04:50:13.078" level="INFO">${exist} = True</msg>
<status status="PASS" endtime="20170805 04:50:13.078" starttime="20170805 04:50:13.077"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${exist}' == '${False}'</arg>
<arg>Create File</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<status status="PASS" endtime="20170805 04:50:13.079" starttime="20170805 04:50:13.078"></status>
</kw>
<kw name="Rpvars" library="gen_robot_print">
<arguments>
<arg>TEST_HISTORY</arg>
</arguments>
<status status="PASS" endtime="20170805 04:50:13.079" starttime="20170805 04:50:13.079"></status>
</kw>
<kw name="Get Current Time Stamp" library="openbmc_ffdc_utils">
<doc>Get the current time stamp data</doc>
<assign>
<var>${cur_time}</var>
</assign>
<kw name="Get Current Date" library="DateTime">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20170805 04:50:13.081" level="INFO">${cur_time} = 2017-08-05 04:50:13:080589</msg>
<status status="PASS" endtime="20170805 04:50:13.081" starttime="20170805 04:50:13.080"></status>
</kw>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20170805 04:50:13.082" level="INFO">${cur_time} = 20170805045013080589</msg>
<status status="PASS" endtime="20170805 04:50:13.082" starttime="20170805 04:50:13.081"></status>
</kw>
<msg timestamp="20170805 04:50:13.082" level="INFO">${cur_time} = 20170805045013080589</msg>
<status status="PASS" endtime="20170805 04:50:13.082" starttime="20170805 04:50:13.080"></status>
</kw>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
<arg>${cur_time}:${SUITE_NAME}:${TEST_NAME}:${TEST_STATUS}${\n}</arg>
</arguments>
<msg timestamp="20170805 04:50:13.083" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/test_history.txt"&gt;/home/fspcibld/logs/test_history.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170805 04:50:13.083" starttime="20170805 04:50:13.082"></status>
</kw>
<status status="PASS" endtime="20170805 04:50:13.083" starttime="20170805 04:50:13.071"></status>
</kw>
<status status="PASS" endtime="20170805 04:50:13.083" starttime="20170805 04:50:00.674"></status>
</kw>
<status status="PASS" endtime="20170805 04:50:13.084" starttime="20170805 04:50:00.666"></status>
</kw>
<doc>Initiate a code update on the BMC.</doc>
<tags>
<tag>Initiate_Code_Update_BMC</tag>
</tags>
<status status="FAIL" endtime="20170805 04:50:13.085" critical="yes" starttime="20170805 04:45:18.334">'Verify error: update: --no-flash --ignore-mount --no-save-files --no-restore-files --no-clean-saved-files
ERROR: Image image-bmc too big for mtd0.
' does not contain 'to apply'</status>
</test>
<doc>Trigger code update to a target BMC.
Execution Method :
python -m robot -v OPENBMC_HOST:&lt;hostname&gt;
-v FILE_PATH:&lt;path/*all.tar&gt; update_bmc.robot

Code update method BMC using REST
Update work flow sequence:
- User input BMC File existence check
- Ping Test and REST authentication
- Set Host Power host setting Policy to RESTORE_LAST_STATE
On reboot this policy would ensure the BMC comes
online and stays at HOST_POWERED_OFF state.
- Issue poweroff
- Prune archived journal logs
- Prepare for Update
- Wait for BMC to come online clean
- Wait for BMC_READY state
- Apply preserve BMC Network setting
- SCP image to BMC
- Activate the flash image
- Warm Reset BMC to activate code
- Wait for BMC to come online time out 30 minutes
- Version check post update
- Identify REST url post update</doc>
<status status="FAIL" endtime="20170805 04:50:13.086" starttime="20170805 04:45:17.281"></status>
</suite>
<statistics>
<total>
<stat fail="1" pass="0">Critical Tests</stat>
<stat fail="1" pass="0">All Tests</stat>
</total>
<tag>
<stat fail="1" pass="0">Initiate_Code_Update_BMC</stat>
</tag>
<suite>
<stat fail="1" id="s1" name="Update Bmc" pass="0">Update Bmc</stat>
</suite>
</statistics>
<errors>
<msg timestamp="20170805 04:46:23.678" level="WARN">Retrying (Retry(total=2, connect=None, read=None, redirect=None, status=None)) after connection broken by 'ConnectTimeoutError(&lt;urllib3.connection.VerifiedHTTPSConnection object at 0x3fffa8630910&gt;, 'Connection to 9.3.86.161 timed out. (connect timeout=20.0)')': /login</msg>
<msg timestamp="20170805 04:46:43.899" level="WARN">Retrying (Retry(total=1, connect=None, read=None, redirect=None, status=None)) after connection broken by 'ConnectTimeoutError(&lt;urllib3.connection.VerifiedHTTPSConnection object at 0x3fffa8630390&gt;, 'Connection to 9.3.86.161 timed out. (connect timeout=20.0)')': /login</msg>
</errors>
</robot>
