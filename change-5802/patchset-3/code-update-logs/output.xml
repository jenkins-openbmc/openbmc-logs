<?xml version="1.0" encoding="UTF-8"?>
<robot generated="20170805 17:00:49.603" generator="Robot 3.0.2 (Python 2.7.12 on linux2)">
<suite source="/home/fspcibld/openbmc-test-automation/extended/code_update/update_bmc.robot" id="s1" name="Update Bmc">
<test id="s1-t1" name="Initiate Code Update BMC">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${LAST_KNOWN_GOOD_VERSION}' != '${EMPTY}'</arg>
<arg>Run Keyword And Return Status</arg>
<arg>Validate BMC Version</arg>
<arg>${LAST_KNOWN_GOOD_VERSION}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<msg timestamp="20170805 17:00:50.512" level="INFO">${status} = None</msg>
<status status="PASS" endtime="20170805 17:00:50.512" starttime="20170805 17:00:50.511"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${True}'</arg>
<arg>Pass Execution</arg>
<arg>The BMC already has the requested build loaded so no further action will be taken.</arg>
</arguments>
<status status="PASS" endtime="20170805 17:00:50.513" starttime="20170805 17:00:50.513"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${FORCE_UPDATE} == ${0}</arg>
<arg>Prepare BMC For Update</arg>
</arguments>
<kw name="Prepare BMC For Update">
<doc>Prerequisite operation before code update.</doc>
<kw name="Check Boot Count And Time">
<doc>Check for unexpected reboots.</doc>
<kw name="Set BMC Reset Reference Time" library="utils">
<doc>Set current boot time as a reference and increment</doc>
<kw name="Get BMC Boot Time" library="utils">
<doc>Get boot time from /proc/stat.</doc>
<assign>
<var>${cur_btime}</var>
</assign>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg timestamp="20170805 17:00:50.517" level="FAIL">Dictionary does not contain key 'host'.</msg>
<status status="FAIL" endtime="20170805 17:00:50.517" starttime="20170805 17:00:50.516"></status>
</kw>
<msg timestamp="20170805 17:00:50.517" level="INFO">${has_host} = False</msg>
<status status="PASS" endtime="20170805 17:00:50.517" starttime="20170805 17:00:50.516"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status status="PASS" endtime="20170805 17:00:50.518" starttime="20170805 17:00:50.518"></status>
</kw>
<status status="PASS" endtime="20170805 17:00:50.518" starttime="20170805 17:00:50.517"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<status status="PASS" endtime="20170805 17:00:50.519" starttime="20170805 17:00:50.519"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg timestamp="20170805 17:00:50.520" level="FAIL">Dictionary does not contain key 'port'.</msg>
<status status="FAIL" endtime="20170805 17:00:50.520" starttime="20170805 17:00:50.520"></status>
</kw>
<msg timestamp="20170805 17:00:50.520" level="INFO">${has_port} = False</msg>
<status status="PASS" endtime="20170805 17:00:50.520" starttime="20170805 17:00:50.519"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status status="PASS" endtime="20170805 17:00:50.522" starttime="20170805 17:00:50.522"></status>
</kw>
<status status="PASS" endtime="20170805 17:00:50.522" starttime="20170805 17:00:50.521"></status>
</kw>
<status status="PASS" endtime="20170805 17:00:50.522" starttime="20170805 17:00:50.521"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg timestamp="20170805 17:00:50.523" level="INFO">Logging into '9.3.86.161:22' as 'root'.</msg>
<msg timestamp="20170805 17:00:52.365" level="INFO">Read output: root@witherspoon:~#</msg>
<status status="PASS" endtime="20170805 17:00:52.366" starttime="20170805 17:00:50.523"></status>
</kw>
<status status="PASS" endtime="20170805 17:00:52.366" starttime="20170805 17:00:50.515"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>egrep '^btime ' /proc/stat | cut -f 2 -d ' '</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${output}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170805 17:00:52.367" level="INFO">Executing command 'egrep '^btime ' /proc/stat | cut -f 2 -d ' ''.</msg>
<msg timestamp="20170805 17:00:52.433" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170805 17:00:52.433" level="INFO">${output} = 1501947954</msg>
<msg timestamp="20170805 17:00:52.433" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170805 17:00:52.433" starttime="20170805 17:00:52.366"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20170805 17:00:52.434" level="INFO">Length is 0</msg>
<status status="PASS" endtime="20170805 17:00:52.434" starttime="20170805 17:00:52.434"></status>
</kw>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<assign>
<var>${btime}</var>
</assign>
<msg timestamp="20170805 17:00:52.435" level="INFO">${btime} = 1501947954</msg>
<status status="PASS" endtime="20170805 17:00:52.435" starttime="20170805 17:00:52.434"></status>
</kw>
<msg timestamp="20170805 17:00:52.435" level="INFO">${cur_btime} = 1501947954</msg>
<status status="PASS" endtime="20170805 17:00:52.435" starttime="20170805 17:00:50.515"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${BOOT_TIME} == ${0} and ${BOOT_COUNT} == ${0}</arg>
<arg>Set Global Variable</arg>
<arg>${BOOT_TIME}</arg>
<arg>${cur_btime}</arg>
<arg>ELSE IF</arg>
<arg>${cur_btime} &gt; ${BOOT_TIME}</arg>
<arg>Run Keywords</arg>
<arg>Set Global Variable</arg>
<arg>${BOOT_TIME}</arg>
<arg>${cur_btime}</arg>
<arg>AND</arg>
<arg>Set Global Variable</arg>
<arg>${BOOT_COUNT}</arg>
<arg>${BOOT_COUNT + 1}</arg>
</arguments>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${BOOT_TIME}</arg>
<arg>${cur_btime}</arg>
</arguments>
<msg timestamp="20170805 17:00:52.437" level="INFO">${BOOT_TIME} = 1501947954</msg>
<status status="PASS" endtime="20170805 17:00:52.437" starttime="20170805 17:00:52.436"></status>
</kw>
<status status="PASS" endtime="20170805 17:00:52.437" starttime="20170805 17:00:52.435"></status>
</kw>
<status status="PASS" endtime="20170805 17:00:52.437" starttime="20170805 17:00:50.514"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>\n Boot Count: ${BOOT_COUNT}</arg>
</arguments>
<status status="PASS" endtime="20170805 17:00:52.438" starttime="20170805 17:00:52.437"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>\n Boot Time: ${BOOT_TIME}</arg>
</arguments>
<status status="PASS" endtime="20170805 17:00:52.438" starttime="20170805 17:00:52.438"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${BOOT_COUNT} &gt; ${MAX_BOOT_COUNT}</arg>
<arg>Log</arg>
<arg>Phantom Reboot!!! Unexpected reboot detected</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20170805 17:00:52.439" starttime="20170805 17:00:52.439"></status>
</kw>
<status status="PASS" endtime="20170805 17:00:52.439" starttime="20170805 17:00:50.514"></status>
</kw>
<kw name="Prune Journal Log" library="utils">
<doc>Prune archived journal logs.</doc>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg timestamp="20170805 17:00:52.442" level="FAIL">Dictionary does not contain key 'host'.</msg>
<status status="FAIL" endtime="20170805 17:00:52.442" starttime="20170805 17:00:52.442"></status>
</kw>
<msg timestamp="20170805 17:00:52.443" level="INFO">${has_host} = False</msg>
<status status="PASS" endtime="20170805 17:00:52.443" starttime="20170805 17:00:52.442"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status status="PASS" endtime="20170805 17:00:52.444" starttime="20170805 17:00:52.443"></status>
</kw>
<status status="PASS" endtime="20170805 17:00:52.444" starttime="20170805 17:00:52.443"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<status status="PASS" endtime="20170805 17:00:52.444" starttime="20170805 17:00:52.444"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg timestamp="20170805 17:00:52.446" level="FAIL">Dictionary does not contain key 'port'.</msg>
<status status="FAIL" endtime="20170805 17:00:52.446" starttime="20170805 17:00:52.445"></status>
</kw>
<msg timestamp="20170805 17:00:52.446" level="INFO">${has_port} = False</msg>
<status status="PASS" endtime="20170805 17:00:52.446" starttime="20170805 17:00:52.445"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status status="PASS" endtime="20170805 17:00:52.448" starttime="20170805 17:00:52.447"></status>
</kw>
<status status="PASS" endtime="20170805 17:00:52.448" starttime="20170805 17:00:52.447"></status>
</kw>
<status status="PASS" endtime="20170805 17:00:52.448" starttime="20170805 17:00:52.446"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg timestamp="20170805 17:00:52.448" level="INFO">Logging into '9.3.86.161:22' as 'root'.</msg>
<msg timestamp="20170805 17:00:54.128" level="INFO">Read output: root@witherspoon:~#</msg>
<status status="PASS" endtime="20170805 17:00:54.128" starttime="20170805 17:00:52.448"></status>
</kw>
<status status="PASS" endtime="20170805 17:00:54.128" starttime="20170805 17:00:52.440"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>journalctl --vacuum-size=${vacuum_size}</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
</arguments>
<assign>
<var>${output}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20170805 17:00:54.129" level="INFO">Executing command 'journalctl --vacuum-size=1M'.</msg>
<msg timestamp="20170805 17:00:54.195" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170805 17:00:54.195" level="INFO">${output} = </msg>
<msg timestamp="20170805 17:00:54.196" level="INFO">${stderr} = Vacuuming done, freed 0B of archived journals from /run/log/journal/cc6e1404d87444e8a089dfdb00a18f7d.</msg>
<msg timestamp="20170805 17:00:54.196" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20170805 17:00:54.196" starttime="20170805 17:00:54.129"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${rc}</arg>
<arg>${0}</arg>
<arg>msg=${stderr}</arg>
</arguments>
<status status="PASS" endtime="20170805 17:00:54.196" starttime="20170805 17:00:54.196"></status>
</kw>
<status status="PASS" endtime="20170805 17:00:54.197" starttime="20170805 17:00:52.439"></status>
</kw>
<kw name="Power Off Request" library="state_manager">
<doc>Select appropriate poweroff keyword.</doc>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${OBMC_STATES_VERSION}' == '${0}'</arg>
<arg>Initiate Power Off</arg>
<arg>ELSE</arg>
<arg>Initiate Host PowerOff</arg>
</arguments>
<kw name="Initiate Host PowerOff" library="state_manager">
<doc>Initiate host power off.</doc>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=${HOST_POWEROFF_TRANS}</arg>
</arguments>
<assign>
<var>${args}</var>
</assign>
<msg timestamp="20170805 17:00:54.199" level="INFO">${args} = {u'data': 'xyz.openbmc_project.State.Host.Transition.Off'}</msg>
<status status="PASS" endtime="20170805 17:00:54.199" starttime="20170805 17:00:54.198"></status>
</kw>
<kw name="Write Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>RequestedHostTransition</arg>
<arg>data=${args}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170805 17:00:54.200" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0/</msg>
<status status="PASS" endtime="20170805 17:00:54.200" starttime="20170805 17:00:54.200"></status>
</kw>
<kw name="OpenBMC Put Request" library="rest_client">
<arguments>
<arg>${base_uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170805 17:00:54.203" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170805 17:00:54.204" starttime="20170805 17:00:54.203"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170805 17:00:54.204" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170805 17:00:54.205" starttime="20170805 17:00:54.204"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170805 17:00:54.205" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170805 17:00:54.205" starttime="20170805 17:00:54.205"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170805 17:00:54.206" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170805 17:00:54.206" starttime="20170805 17:00:54.206"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170805 17:00:54.511" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170805 17:00:54.511" starttime="20170805 17:00:54.207"></status>
</kw>
<msg timestamp="20170805 17:00:54.511" level="INFO">${status} = PASS</msg>
<msg timestamp="20170805 17:00:54.511" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170805 17:00:54.511" starttime="20170805 17:00:54.206"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170805 17:00:54.512" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170805 17:00:54.512" starttime="20170805 17:00:54.512"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170805 17:00:54.513" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170805 17:00:54.513" starttime="20170805 17:00:54.512"></status>
</kw>
<status status="PASS" endtime="20170805 17:00:54.513" starttime="20170805 17:00:54.202"></status>
</kw>
<status status="PASS" endtime="20170805 17:00:54.513" starttime="20170805 17:00:54.202"></status>
</kw>
<status status="PASS" endtime="20170805 17:00:54.513" starttime="20170805 17:00:54.201"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170805 17:00:54.514" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/RequestedHostTransition</msg>
<status status="PASS" endtime="20170805 17:00:54.514" starttime="20170805 17:00:54.513"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170805 17:00:54.514" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170805 17:00:54.514" starttime="20170805 17:00:54.514"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" endtime="20170805 17:00:54.515" starttime="20170805 17:00:54.515"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Put</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170805 17:00:54.517" level="INFO">${msg} = URI:https://9.3.86.161/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, method:Put, args:{u'data': {u'data': 'xyz.openbmc_project.State.Host.Transition.Off'}, u'headers': {u'Content-Type...</msg>
<status status="PASS" endtime="20170805 17:00:54.517" starttime="20170805 17:00:54.516"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170805 17:00:54.518" level="INFO">URI:https://9.3.86.161/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, method:Put, args:{u'data': {u'data': 'xyz.openbmc_project.State.Host.Transition.Off'}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20170805 17:00:54.518" starttime="20170805 17:00:54.518"></status>
</kw>
<status status="PASS" endtime="20170805 17:00:54.518" starttime="20170805 17:00:54.517"></status>
</kw>
<status status="PASS" endtime="20170805 17:00:54.518" starttime="20170805 17:00:54.515"></status>
</kw>
<kw name="Put Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a PUT request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170805 17:00:54.723" level="INFO">Put Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/RequestedHostTransition, data={"data": "xyz.openbmc_project.State.Host.Transition.Off"},                     headers={u'Content-Type': u'application/json'}, allow_redirects=True </msg>
<msg timestamp="20170805 17:00:54.723" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170805 17:00:54.723" starttime="20170805 17:00:54.518"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170805 17:00:54.724" level="INFO">${msg} = Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170805 17:00:54.724" starttime="20170805 17:00:54.724"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170805 17:00:54.725" level="INFO">Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170805 17:00:54.726" starttime="20170805 17:00:54.725"></status>
</kw>
<status status="PASS" endtime="20170805 17:00:54.726" starttime="20170805 17:00:54.725"></status>
</kw>
<status status="PASS" endtime="20170805 17:00:54.726" starttime="20170805 17:00:54.723"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170805 17:00:54.726" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170805 17:00:54.726" starttime="20170805 17:00:54.726"></status>
</kw>
<msg timestamp="20170805 17:00:54.727" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170805 17:00:54.727" starttime="20170805 17:00:54.200"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170805 17:00:54.727" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170805 17:00:54.727" starttime="20170805 17:00:54.727"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${json}</var>
</assign>
<msg timestamp="20170805 17:00:54.728" level="INFO">To JSON using : content={
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170805 17:00:54.728" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170805 17:00:54.728" level="INFO">${json} = {u'status': u'ok', u'message': u'200 OK', u'data': None}</msg>
<status status="PASS" endtime="20170805 17:00:54.728" starttime="20170805 17:00:54.728"></status>
</kw>
<status status="PASS" endtime="20170805 17:00:54.728" starttime="20170805 17:00:54.199"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${wait}' == '${0}'</arg>
<arg>Return From Keyword</arg>
</arguments>
<status status="PASS" endtime="20170805 17:00:54.729" starttime="20170805 17:00:54.729"></status>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>6 min</arg>
<arg>10 sec</arg>
<arg>Is Host Off</arg>
</arguments>
<kw name="Is Host Off" library="state_manager">
<doc>Check if host state is "Off".</doc>
<kw name="Is Chassis Off" library="state_manager">
<doc>Check if chassis state is "Off".</doc>
<kw name="Get Chassis Power State" library="state_manager">
<doc>Return the power state of the Chassis</doc>
<assign>
<var>${power_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${CHASSIS_STATE_URI}</arg>
<arg>CurrentPowerState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170805 17:00:54.735" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170805 17:00:54.735" starttime="20170805 17:00:54.734"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170805 17:00:54.736" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170805 17:00:54.736" starttime="20170805 17:00:54.736"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170805 17:00:54.737" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170805 17:00:54.737" starttime="20170805 17:00:54.737"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170805 17:00:54.738" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170805 17:00:54.738" starttime="20170805 17:00:54.737"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170805 17:00:55.261" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170805 17:00:55.261" starttime="20170805 17:00:54.738"></status>
</kw>
<msg timestamp="20170805 17:00:55.261" level="INFO">${status} = PASS</msg>
<msg timestamp="20170805 17:00:55.261" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170805 17:00:55.261" starttime="20170805 17:00:54.738"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170805 17:00:55.262" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170805 17:00:55.262" starttime="20170805 17:00:55.262"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170805 17:00:55.263" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170805 17:00:55.263" starttime="20170805 17:00:55.262"></status>
</kw>
<status status="PASS" endtime="20170805 17:00:55.263" starttime="20170805 17:00:54.733"></status>
</kw>
<status status="PASS" endtime="20170805 17:00:55.263" starttime="20170805 17:00:54.733"></status>
</kw>
<status status="PASS" endtime="20170805 17:00:55.263" starttime="20170805 17:00:54.732"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170805 17:00:55.264" level="INFO">${base_uri} = /xyz/openbmc_project/state/chassis0//attr/CurrentPowerState</msg>
<status status="PASS" endtime="20170805 17:00:55.264" starttime="20170805 17:00:55.263"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170805 17:00:55.264" starttime="20170805 17:00:55.264"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170805 17:00:55.448" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/chassis0//attr/CurrentPowerState, headers=None json=None</msg>
<msg timestamp="20170805 17:00:55.449" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170805 17:00:55.449" starttime="20170805 17:00:55.265"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170805 17:00:55.449" starttime="20170805 17:00:55.449"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170805 17:00:55.450" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170805 17:00:55.450" starttime="20170805 17:00:55.450"></status>
</kw>
<msg timestamp="20170805 17:00:55.450" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170805 17:00:55.450" starttime="20170805 17:00:54.732"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170805 17:00:55.451" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170805 17:00:55.451" starttime="20170805 17:00:55.450"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170805 17:00:55.451" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Chassis.PowerState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170805 17:00:55.451" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170805 17:00:55.452" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Chassis.PowerState.Off'}</msg>
<status status="PASS" endtime="20170805 17:00:55.452" starttime="20170805 17:00:55.451"></status>
</kw>
<msg timestamp="20170805 17:00:55.452" level="INFO">${state} = xyz.openbmc_project.State.Chassis.PowerState.Off</msg>
<status status="PASS" endtime="20170805 17:00:55.452" starttime="20170805 17:00:54.731"></status>
</kw>
<msg timestamp="20170805 17:00:55.452" level="INFO">${power_state} = Off</msg>
<status status="PASS" endtime="20170805 17:00:55.452" starttime="20170805 17:00:54.731"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${power_state}</arg>
</arguments>
<status status="PASS" endtime="20170805 17:00:55.453" starttime="20170805 17:00:55.452"></status>
</kw>
<status status="PASS" endtime="20170805 17:00:55.453" starttime="20170805 17:00:54.730"></status>
</kw>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170805 17:00:55.457" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170805 17:00:55.457" starttime="20170805 17:00:55.456"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170805 17:00:55.458" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170805 17:00:55.458" starttime="20170805 17:00:55.458"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170805 17:00:55.459" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170805 17:00:55.459" starttime="20170805 17:00:55.458"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170805 17:00:55.459" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170805 17:00:55.459" starttime="20170805 17:00:55.459"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170805 17:00:55.837" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170805 17:00:55.837" starttime="20170805 17:00:55.460"></status>
</kw>
<msg timestamp="20170805 17:00:55.837" level="INFO">${status} = PASS</msg>
<msg timestamp="20170805 17:00:55.837" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170805 17:00:55.837" starttime="20170805 17:00:55.460"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170805 17:00:55.838" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170805 17:00:55.838" starttime="20170805 17:00:55.838"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170805 17:00:55.839" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170805 17:00:55.839" starttime="20170805 17:00:55.839"></status>
</kw>
<status status="PASS" endtime="20170805 17:00:55.839" starttime="20170805 17:00:55.456"></status>
</kw>
<status status="PASS" endtime="20170805 17:00:55.839" starttime="20170805 17:00:55.455"></status>
</kw>
<status status="PASS" endtime="20170805 17:00:55.840" starttime="20170805 17:00:55.455"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170805 17:00:55.841" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" endtime="20170805 17:00:55.841" starttime="20170805 17:00:55.840"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170805 17:00:55.842" starttime="20170805 17:00:55.841"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170805 17:00:56.028" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170805 17:00:56.028" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170805 17:00:56.028" starttime="20170805 17:00:55.842"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170805 17:00:56.029" starttime="20170805 17:00:56.028"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170805 17:00:56.029" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170805 17:00:56.029" starttime="20170805 17:00:56.029"></status>
</kw>
<msg timestamp="20170805 17:00:56.030" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170805 17:00:56.030" starttime="20170805 17:00:55.454"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170805 17:00:56.030" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170805 17:00:56.030" starttime="20170805 17:00:56.030"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170805 17:00:56.031" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170805 17:00:56.031" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170805 17:00:56.031" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Off'}</msg>
<status status="PASS" endtime="20170805 17:00:56.031" starttime="20170805 17:00:56.031"></status>
</kw>
<msg timestamp="20170805 17:00:56.031" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Off</msg>
<status status="PASS" endtime="20170805 17:00:56.031" starttime="20170805 17:00:55.454"></status>
</kw>
<msg timestamp="20170805 17:00:56.032" level="INFO">${host_state} = Off</msg>
<status status="PASS" endtime="20170805 17:00:56.032" starttime="20170805 17:00:55.453"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>Off</arg>
<arg>${host_state}</arg>
</arguments>
<status status="PASS" endtime="20170805 17:00:56.032" starttime="20170805 17:00:56.032"></status>
</kw>
<status status="PASS" endtime="20170805 17:00:56.032" starttime="20170805 17:00:54.730"></status>
</kw>
<status status="PASS" endtime="20170805 17:00:56.033" starttime="20170805 17:00:54.729"></status>
</kw>
<status status="PASS" endtime="20170805 17:00:56.033" starttime="20170805 17:00:54.198"></status>
</kw>
<status status="PASS" endtime="20170805 17:00:56.033" starttime="20170805 17:00:54.197"></status>
</kw>
<status status="PASS" endtime="20170805 17:00:56.033" starttime="20170805 17:00:54.197"></status>
</kw>
<kw name="Set Policy Setting" library="code_update_utils">
<doc>Set the given test policy</doc>
<arguments>
<arg>RESTORE_LAST_STATE</arg>
</arguments>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=${policy}</arg>
</arguments>
<assign>
<var>${valueDict}</var>
</assign>
<msg timestamp="20170805 17:00:56.034" level="INFO">${valueDict} = {u'data': u'RESTORE_LAST_STATE'}</msg>
<status status="PASS" endtime="20170805 17:00:56.034" starttime="20170805 17:00:56.034"></status>
</kw>
<kw name="Write Attribute" library="rest_client">
<arguments>
<arg>${HOST_SETTING}</arg>
<arg>power_policy</arg>
<arg>data=${valueDict}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170805 17:00:56.035" level="INFO">${base_uri} = /org/openbmc/settings/host0</msg>
<status status="PASS" endtime="20170805 17:00:56.035" starttime="20170805 17:00:56.035"></status>
</kw>
<kw name="OpenBMC Put Request" library="rest_client">
<arguments>
<arg>${base_uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170805 17:00:56.038" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170805 17:00:56.039" starttime="20170805 17:00:56.038"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170805 17:00:56.039" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170805 17:00:56.039" starttime="20170805 17:00:56.039"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170805 17:00:56.040" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170805 17:00:56.040" starttime="20170805 17:00:56.040"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170805 17:00:56.041" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170805 17:00:56.041" starttime="20170805 17:00:56.040"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170805 17:00:56.250" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170805 17:00:56.250" starttime="20170805 17:00:56.041"></status>
</kw>
<msg timestamp="20170805 17:00:56.250" level="INFO">${status} = PASS</msg>
<msg timestamp="20170805 17:00:56.250" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170805 17:00:56.250" starttime="20170805 17:00:56.041"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170805 17:00:56.251" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170805 17:00:56.251" starttime="20170805 17:00:56.251"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170805 17:00:56.252" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170805 17:00:56.252" starttime="20170805 17:00:56.252"></status>
</kw>
<status status="PASS" endtime="20170805 17:00:56.252" starttime="20170805 17:00:56.037"></status>
</kw>
<status status="PASS" endtime="20170805 17:00:56.252" starttime="20170805 17:00:56.037"></status>
</kw>
<status status="PASS" endtime="20170805 17:00:56.252" starttime="20170805 17:00:56.036"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170805 17:00:56.253" level="INFO">${base_uri} = /org/openbmc/settings/host0/attr/power_policy</msg>
<status status="PASS" endtime="20170805 17:00:56.253" starttime="20170805 17:00:56.253"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170805 17:00:56.254" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170805 17:00:56.254" starttime="20170805 17:00:56.253"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" endtime="20170805 17:00:56.254" starttime="20170805 17:00:56.254"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Put</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170805 17:00:56.256" level="INFO">${msg} = URI:https://9.3.86.161/org/openbmc/settings/host0/attr/power_policy, method:Put, args:{u'data': {u'data': u'RESTORE_LAST_STATE'}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20170805 17:00:56.256" starttime="20170805 17:00:56.255"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170805 17:00:56.257" level="INFO">URI:https://9.3.86.161/org/openbmc/settings/host0/attr/power_policy, method:Put, args:{u'data': {u'data': u'RESTORE_LAST_STATE'}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20170805 17:00:56.257" starttime="20170805 17:00:56.257"></status>
</kw>
<status status="PASS" endtime="20170805 17:00:56.257" starttime="20170805 17:00:56.256"></status>
</kw>
<status status="PASS" endtime="20170805 17:00:56.257" starttime="20170805 17:00:56.254"></status>
</kw>
<kw name="Put Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a PUT request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170805 17:00:56.539" level="INFO">Put Request using : alias=openbmc, uri=/org/openbmc/settings/host0/attr/power_policy, data={"data": "RESTORE_LAST_STATE"},                     headers={u'Content-Type': u'application/json'}, allow_redirects=True </msg>
<msg timestamp="20170805 17:00:56.539" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170805 17:00:56.539" starttime="20170805 17:00:56.257"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170805 17:00:56.540" level="INFO">${msg} = Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170805 17:00:56.540" starttime="20170805 17:00:56.540"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170805 17:00:56.541" level="INFO">Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170805 17:00:56.542" starttime="20170805 17:00:56.541"></status>
</kw>
<status status="PASS" endtime="20170805 17:00:56.542" starttime="20170805 17:00:56.541"></status>
</kw>
<status status="PASS" endtime="20170805 17:00:56.542" starttime="20170805 17:00:56.539"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170805 17:00:56.542" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170805 17:00:56.542" starttime="20170805 17:00:56.542"></status>
</kw>
<msg timestamp="20170805 17:00:56.543" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170805 17:00:56.543" starttime="20170805 17:00:56.035"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170805 17:00:56.544" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170805 17:00:56.544" starttime="20170805 17:00:56.543"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${json}</var>
</assign>
<msg timestamp="20170805 17:00:56.545" level="INFO">To JSON using : content={
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170805 17:00:56.545" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170805 17:00:56.545" level="INFO">${json} = {u'status': u'ok', u'message': u'200 OK', u'data': None}</msg>
<status status="PASS" endtime="20170805 17:00:56.545" starttime="20170805 17:00:56.544"></status>
</kw>
<status status="PASS" endtime="20170805 17:00:56.545" starttime="20170805 17:00:56.034"></status>
</kw>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_SETTING}</arg>
<arg>power_policy</arg>
</arguments>
<assign>
<var>${currentPolicy}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170805 17:00:56.554" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170805 17:00:56.555" starttime="20170805 17:00:56.554"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170805 17:00:56.555" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170805 17:00:56.555" starttime="20170805 17:00:56.555"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170805 17:00:56.556" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170805 17:00:56.557" starttime="20170805 17:00:56.556"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170805 17:00:56.557" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170805 17:00:56.557" starttime="20170805 17:00:56.557"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170805 17:00:56.870" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170805 17:00:56.870" starttime="20170805 17:00:56.558"></status>
</kw>
<msg timestamp="20170805 17:00:56.871" level="INFO">${status} = PASS</msg>
<msg timestamp="20170805 17:00:56.871" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170805 17:00:56.871" starttime="20170805 17:00:56.558"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170805 17:00:56.871" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170805 17:00:56.872" starttime="20170805 17:00:56.871"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170805 17:00:56.872" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170805 17:00:56.872" starttime="20170805 17:00:56.872"></status>
</kw>
<status status="PASS" endtime="20170805 17:00:56.872" starttime="20170805 17:00:56.552"></status>
</kw>
<status status="PASS" endtime="20170805 17:00:56.872" starttime="20170805 17:00:56.552"></status>
</kw>
<status status="PASS" endtime="20170805 17:00:56.873" starttime="20170805 17:00:56.547"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170805 17:00:56.873" level="INFO">${base_uri} = /org/openbmc/settings/host0/attr/power_policy</msg>
<status status="PASS" endtime="20170805 17:00:56.873" starttime="20170805 17:00:56.873"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170805 17:00:56.874" starttime="20170805 17:00:56.874"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170805 17:00:56.981" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/settings/host0/attr/power_policy, headers=None json=None</msg>
<msg timestamp="20170805 17:00:56.982" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170805 17:00:56.982" starttime="20170805 17:00:56.874"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170805 17:00:56.982" starttime="20170805 17:00:56.982"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170805 17:00:56.983" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170805 17:00:56.983" starttime="20170805 17:00:56.983"></status>
</kw>
<msg timestamp="20170805 17:00:56.983" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170805 17:00:56.983" starttime="20170805 17:00:56.546"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170805 17:00:56.984" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170805 17:00:56.984" starttime="20170805 17:00:56.983"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170805 17:00:56.984" level="INFO">To JSON using : content={
  "data": "RESTORE_LAST_STATE", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170805 17:00:56.984" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170805 17:00:56.984" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'RESTORE_LAST_STATE'}</msg>
<status status="PASS" endtime="20170805 17:00:56.984" starttime="20170805 17:00:56.984"></status>
</kw>
<msg timestamp="20170805 17:00:56.985" level="INFO">${currentPolicy} = RESTORE_LAST_STATE</msg>
<status status="PASS" endtime="20170805 17:00:56.985" starttime="20170805 17:00:56.545"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${currentPolicy}</arg>
<arg>${policy}</arg>
</arguments>
<status status="PASS" endtime="20170805 17:00:56.985" starttime="20170805 17:00:56.985"></status>
</kw>
<status status="PASS" endtime="20170805 17:00:56.985" starttime="20170805 17:00:56.033"></status>
</kw>
<kw name="Prepare For Update" library="code_update_utils">
<doc>Switch to update mode in progress. This method calls</doc>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{EMPTY}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170805 17:00:56.987" level="INFO">${data} = {u'data': []}</msg>
<status status="PASS" endtime="20170805 17:00:56.987" starttime="20170805 17:00:56.986"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${BMC_PREP_METHOD}</arg>
<arg>data=${data}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170805 17:00:56.990" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170805 17:00:56.990" starttime="20170805 17:00:56.989"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170805 17:00:56.991" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170805 17:00:56.991" starttime="20170805 17:00:56.990"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170805 17:00:56.991" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170805 17:00:56.991" starttime="20170805 17:00:56.991"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170805 17:00:56.992" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170805 17:00:56.992" starttime="20170805 17:00:56.992"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170805 17:00:57.180" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170805 17:00:57.180" starttime="20170805 17:00:56.993"></status>
</kw>
<msg timestamp="20170805 17:00:57.180" level="INFO">${status} = PASS</msg>
<msg timestamp="20170805 17:00:57.180" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170805 17:00:57.180" starttime="20170805 17:00:56.992"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170805 17:00:57.181" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170805 17:00:57.181" starttime="20170805 17:00:57.180"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170805 17:00:57.181" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170805 17:00:57.182" starttime="20170805 17:00:57.181"></status>
</kw>
<status status="PASS" endtime="20170805 17:00:57.182" starttime="20170805 17:00:56.988"></status>
</kw>
<status status="PASS" endtime="20170805 17:00:57.182" starttime="20170805 17:00:56.988"></status>
</kw>
<status status="PASS" endtime="20170805 17:00:57.182" starttime="20170805 17:00:56.987"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170805 17:00:57.182" level="INFO">${base_uri} = /org/openbmc/control/flash/bmc/action/PrepareForUpdate</msg>
<status status="PASS" endtime="20170805 17:00:57.182" starttime="20170805 17:00:57.182"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170805 17:00:57.183" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170805 17:00:57.183" starttime="20170805 17:00:57.183"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" endtime="20170805 17:00:57.184" starttime="20170805 17:00:57.183"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170805 17:00:57.184" starttime="20170805 17:00:57.184"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170805 17:00:57.548" level="INFO">Post Request using : alias=openbmc, uri=/org/openbmc/control/flash/bmc/action/PrepareForUpdate, data={"data": []}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20170805 17:00:57.548" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170805 17:00:57.548" starttime="20170805 17:00:57.185"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170805 17:00:57.549" starttime="20170805 17:00:57.548"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170805 17:00:57.549" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170805 17:00:57.549" starttime="20170805 17:00:57.549"></status>
</kw>
<msg timestamp="20170805 17:00:57.549" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170805 17:00:57.549" starttime="20170805 17:00:56.987"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170805 17:00:57.550" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170805 17:00:57.550" starttime="20170805 17:00:57.550"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>10s</arg>
</arguments>
<msg timestamp="20170805 17:01:07.551" level="INFO">Slept 10 seconds</msg>
<status status="PASS" endtime="20170805 17:01:07.551" starttime="20170805 17:00:57.550"></status>
</kw>
<status status="PASS" endtime="20170805 17:01:07.551" starttime="20170805 17:00:56.986"></status>
</kw>
<kw name="Check If BMC is Up" library="utils">
<doc>Wait for Host to be online. Checks every X seconds</doc>
<arguments>
<arg>20 min</arg>
<arg>10 sec</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>${max_timeout}</arg>
<arg>${interval}</arg>
<arg>Verify Ping and REST Authentication</arg>
</arguments>
<kw name="Verify Ping and REST Authentication" library="utils">
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Ping Host</arg>
<arg>${OPENBMC_HOST}</arg>
</arguments>
<assign>
<var>${l_ping}</var>
</assign>
<kw name="Ping Host" library="utils">
<arguments>
<arg>${OPENBMC_HOST}</arg>
</arguments>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${host}</arg>
<arg>msg=No host provided</arg>
</arguments>
<msg timestamp="20170805 17:01:07.555" level="INFO">Length is 10</msg>
<status status="PASS" endtime="20170805 17:01:07.555" starttime="20170805 17:01:07.555"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>ping -c 4 ${host}</arg>
</arguments>
<assign>
<var>${RC}</var>
<var>${output}</var>
</assign>
<msg timestamp="20170805 17:01:07.572" level="INFO">Running command 'ping -c 4 9.3.86.161 2&gt;&amp;1'.</msg>
<msg timestamp="20170805 17:01:10.570" level="INFO">${RC} = 0</msg>
<msg timestamp="20170805 17:01:10.570" level="INFO">${output} = PING 9.3.86.161 (9.3.86.161) 56(84) bytes of data.
64 bytes from 9.3.86.161: icmp_seq=1 ttl=62 time=1.28 ms
64 bytes from 9.3.86.161: icmp_seq=2 ttl=62 time=0.659 ms
64 bytes from 9.3.86.161: icmp_seq...</msg>
<status status="PASS" endtime="20170805 17:01:10.570" starttime="20170805 17:01:07.555"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>RC: ${RC}\nOutput:\n${output}</arg>
</arguments>
<msg timestamp="20170805 17:01:10.583" level="INFO">RC: 0
Output:
PING 9.3.86.161 (9.3.86.161) 56(84) bytes of data.
64 bytes from 9.3.86.161: icmp_seq=1 ttl=62 time=1.28 ms
64 bytes from 9.3.86.161: icmp_seq=2 ttl=62 time=0.659 ms
64 bytes from 9.3.86.161: icmp_seq=3 ttl=62 time=0.578 ms
64 bytes from 9.3.86.161: icmp_seq=4 ttl=62 time=0.653 ms

--- 9.3.86.161 ping statistics ---
4 packets transmitted, 4 received, 0% packet loss, time 2999ms
rtt min/avg/max/mdev = 0.578/0.794/1.286/0.285 ms</msg>
<status status="PASS" endtime="20170805 17:01:10.583" starttime="20170805 17:01:10.581"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${RC}</arg>
<arg>${0}</arg>
</arguments>
<status status="PASS" endtime="20170805 17:01:10.584" starttime="20170805 17:01:10.584"></status>
</kw>
<status status="PASS" endtime="20170805 17:01:10.585" starttime="20170805 17:01:07.554"></status>
</kw>
<msg timestamp="20170805 17:01:10.586" level="INFO">${l_ping} = True</msg>
<status status="PASS" endtime="20170805 17:01:10.586" starttime="20170805 17:01:07.554"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${l_ping}' == '${False}'</arg>
<arg>Fail</arg>
<arg>msg=Ping Failed</arg>
</arguments>
<status status="PASS" endtime="20170805 17:01:10.587" starttime="20170805 17:01:10.586"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Initialize OpenBMC</arg>
</arguments>
<assign>
<var>${l_rest}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170805 17:01:10.590" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=20, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170805 17:01:10.591" starttime="20170805 17:01:10.590"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170805 17:01:10.592" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170805 17:01:10.592" starttime="20170805 17:01:10.591"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170805 17:01:10.592" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170805 17:01:10.592" starttime="20170805 17:01:10.592"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170805 17:01:10.593" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170805 17:01:10.593" starttime="20170805 17:01:10.593"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170805 17:01:11.716" level="FAIL">ConnectionError: ('Connection aborted.', error(104, 'Connection reset by peer'))</msg>
<status status="FAIL" endtime="20170805 17:01:11.716" starttime="20170805 17:01:10.594"></status>
</kw>
<msg timestamp="20170805 17:01:11.716" level="INFO">${status} = FAIL</msg>
<msg timestamp="20170805 17:01:11.716" level="INFO">${resp} = ConnectionError: ('Connection aborted.', error(104, 'Connection reset by peer'))</msg>
<status status="PASS" endtime="20170805 17:01:11.716" starttime="20170805 17:01:10.593"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170805 17:01:11.717" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20170805 17:01:11.717" level="FAIL">ConnectionError: ('Connection aborted.', error(104, 'Connection reset by peer')): FAIL != PASS</msg>
<status status="FAIL" endtime="20170805 17:01:11.717" starttime="20170805 17:01:11.716"></status>
</kw>
<status status="FAIL" endtime="20170805 17:01:11.717" starttime="20170805 17:01:10.589"></status>
</kw>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170805 17:01:31.719" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=20, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170805 17:01:31.720" starttime="20170805 17:01:31.719"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170805 17:01:31.721" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170805 17:01:31.721" starttime="20170805 17:01:31.720"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170805 17:01:31.721" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170805 17:01:31.721" starttime="20170805 17:01:31.721"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170805 17:01:31.722" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170805 17:01:31.722" starttime="20170805 17:01:31.722"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170805 17:01:51.745" level="WARN">Retrying (Retry(total=2, connect=None, read=None, redirect=None, status=None)) after connection broken by 'ConnectTimeoutError(&lt;urllib3.connection.VerifiedHTTPSConnection object at 0x3fff82a3e910&gt;, 'Connection to 9.3.86.161 timed out. (connect timeout=20.0)')': /login</msg>
<msg timestamp="20170805 17:02:11.967" level="WARN">Retrying (Retry(total=1, connect=None, read=None, redirect=None, status=None)) after connection broken by 'ConnectTimeoutError(&lt;urllib3.connection.VerifiedHTTPSConnection object at 0x3fff82a3e390&gt;, 'Connection to 9.3.86.161 timed out. (connect timeout=20.0)')': /login</msg>
<msg timestamp="20170805 17:02:47.027" level="FAIL">ReadTimeout: HTTPSConnectionPool(host='9.3.86.161', port=443): Read timed out. (read timeout=20.0)</msg>
<status status="FAIL" endtime="20170805 17:02:47.028" starttime="20170805 17:01:31.723"></status>
</kw>
<msg timestamp="20170805 17:02:47.028" level="INFO">${status} = FAIL</msg>
<msg timestamp="20170805 17:02:47.028" level="INFO">${resp} = ReadTimeout: HTTPSConnectionPool(host='9.3.86.161', port=443): Read timed out. (read timeout=20.0)</msg>
<status status="PASS" endtime="20170805 17:02:47.028" starttime="20170805 17:01:31.722"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170805 17:02:47.029" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20170805 17:02:47.029" level="FAIL">ReadTimeout: HTTPSConnectionPool(host='9.3.86.161', port=443): Read timed out. (read timeout=20.0): FAIL != PASS</msg>
<status status="FAIL" endtime="20170805 17:02:47.029" starttime="20170805 17:02:47.029"></status>
</kw>
<status status="FAIL" endtime="20170805 17:02:47.029" starttime="20170805 17:01:31.718"></status>
</kw>
<msg timestamp="20170805 17:02:47.030" level="FAIL">Keyword 'Post Login Request' failed after retrying for 40 seconds. The last error was: ReadTimeout: HTTPSConnectionPool(host='9.3.86.161', port=443): Read timed out. (read timeout=20.0): FAIL != PASS</msg>
<status status="FAIL" endtime="20170805 17:02:47.030" starttime="20170805 17:01:10.588"></status>
</kw>
<status status="FAIL" endtime="20170805 17:02:47.030" starttime="20170805 17:01:10.588"></status>
</kw>
<msg timestamp="20170805 17:02:47.030" level="INFO">${l_rest} = False</msg>
<status status="PASS" endtime="20170805 17:02:47.030" starttime="20170805 17:01:10.587"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${l_rest}' == '${False}'</arg>
<arg>Fail</arg>
<arg>msg=REST Authentication Failed</arg>
</arguments>
<kw name="Fail" library="BuiltIn">
<doc>Fails the test with the given message and optionally alters its tags.</doc>
<arguments>
<arg>msg=REST Authentication Failed</arg>
</arguments>
<msg timestamp="20170805 17:02:47.031" level="FAIL">REST Authentication Failed</msg>
<status status="FAIL" endtime="20170805 17:02:47.031" starttime="20170805 17:02:47.031"></status>
</kw>
<status status="FAIL" endtime="20170805 17:02:47.031" starttime="20170805 17:02:47.030"></status>
</kw>
<status status="FAIL" endtime="20170805 17:02:47.031" starttime="20170805 17:01:07.554"></status>
</kw>
<kw name="Verify Ping and REST Authentication" library="utils">
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Ping Host</arg>
<arg>${OPENBMC_HOST}</arg>
</arguments>
<assign>
<var>${l_ping}</var>
</assign>
<kw name="Ping Host" library="utils">
<arguments>
<arg>${OPENBMC_HOST}</arg>
</arguments>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${host}</arg>
<arg>msg=No host provided</arg>
</arguments>
<msg timestamp="20170805 17:02:57.034" level="INFO">Length is 10</msg>
<status status="PASS" endtime="20170805 17:02:57.034" starttime="20170805 17:02:57.034"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>ping -c 4 ${host}</arg>
</arguments>
<assign>
<var>${RC}</var>
<var>${output}</var>
</assign>
<msg timestamp="20170805 17:02:57.038" level="INFO">Running command 'ping -c 4 9.3.86.161 2&gt;&amp;1'.</msg>
<msg timestamp="20170805 17:03:00.043" level="INFO">${RC} = 0</msg>
<msg timestamp="20170805 17:03:00.043" level="INFO">${output} = PING 9.3.86.161 (9.3.86.161) 56(84) bytes of data.
64 bytes from 9.3.86.161: icmp_seq=1 ttl=62 time=1.40 ms
64 bytes from 9.3.86.161: icmp_seq=2 ttl=62 time=0.629 ms
64 bytes from 9.3.86.161: icmp_seq...</msg>
<status status="PASS" endtime="20170805 17:03:00.043" starttime="20170805 17:02:57.034"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>RC: ${RC}\nOutput:\n${output}</arg>
</arguments>
<msg timestamp="20170805 17:03:00.047" level="INFO">RC: 0
Output:
PING 9.3.86.161 (9.3.86.161) 56(84) bytes of data.
64 bytes from 9.3.86.161: icmp_seq=1 ttl=62 time=1.40 ms
64 bytes from 9.3.86.161: icmp_seq=2 ttl=62 time=0.629 ms
64 bytes from 9.3.86.161: icmp_seq=3 ttl=62 time=0.608 ms
64 bytes from 9.3.86.161: icmp_seq=4 ttl=62 time=0.657 ms

--- 9.3.86.161 ping statistics ---
4 packets transmitted, 4 received, 0% packet loss, time 3001ms
rtt min/avg/max/mdev = 0.608/0.824/1.404/0.336 ms</msg>
<status status="PASS" endtime="20170805 17:03:00.047" starttime="20170805 17:03:00.046"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${RC}</arg>
<arg>${0}</arg>
</arguments>
<status status="PASS" endtime="20170805 17:03:00.048" starttime="20170805 17:03:00.048"></status>
</kw>
<status status="PASS" endtime="20170805 17:03:00.048" starttime="20170805 17:02:57.033"></status>
</kw>
<msg timestamp="20170805 17:03:00.049" level="INFO">${l_ping} = True</msg>
<status status="PASS" endtime="20170805 17:03:00.049" starttime="20170805 17:02:57.033"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${l_ping}' == '${False}'</arg>
<arg>Fail</arg>
<arg>msg=Ping Failed</arg>
</arguments>
<status status="PASS" endtime="20170805 17:03:00.050" starttime="20170805 17:03:00.049"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Initialize OpenBMC</arg>
</arguments>
<assign>
<var>${l_rest}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170805 17:03:00.052" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=20, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170805 17:03:00.054" starttime="20170805 17:03:00.052"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170805 17:03:00.054" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170805 17:03:00.054" starttime="20170805 17:03:00.054"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170805 17:03:00.055" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170805 17:03:00.055" starttime="20170805 17:03:00.055"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170805 17:03:00.056" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170805 17:03:00.056" starttime="20170805 17:03:00.055"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170805 17:03:20.081" level="FAIL">ReadTimeout: HTTPSConnectionPool(host='9.3.86.161', port=443): Read timed out. (read timeout=20.0)</msg>
<status status="FAIL" endtime="20170805 17:03:20.082" starttime="20170805 17:03:00.057"></status>
</kw>
<msg timestamp="20170805 17:03:20.082" level="INFO">${status} = FAIL</msg>
<msg timestamp="20170805 17:03:20.082" level="INFO">${resp} = ReadTimeout: HTTPSConnectionPool(host='9.3.86.161', port=443): Read timed out. (read timeout=20.0)</msg>
<status status="PASS" endtime="20170805 17:03:20.082" starttime="20170805 17:03:00.056"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170805 17:03:20.083" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20170805 17:03:20.083" level="FAIL">ReadTimeout: HTTPSConnectionPool(host='9.3.86.161', port=443): Read timed out. (read timeout=20.0): FAIL != PASS</msg>
<status status="FAIL" endtime="20170805 17:03:20.083" starttime="20170805 17:03:20.082"></status>
</kw>
<status status="FAIL" endtime="20170805 17:03:20.083" starttime="20170805 17:03:00.051"></status>
</kw>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170805 17:03:40.086" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=20, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170805 17:03:40.086" starttime="20170805 17:03:40.085"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170805 17:03:40.087" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170805 17:03:40.087" starttime="20170805 17:03:40.086"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170805 17:03:40.087" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170805 17:03:40.088" starttime="20170805 17:03:40.087"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170805 17:03:40.088" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170805 17:03:40.088" starttime="20170805 17:03:40.088"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170805 17:03:40.291" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170805 17:03:40.291" starttime="20170805 17:03:40.089"></status>
</kw>
<msg timestamp="20170805 17:03:40.291" level="INFO">${status} = PASS</msg>
<msg timestamp="20170805 17:03:40.291" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170805 17:03:40.291" starttime="20170805 17:03:40.089"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170805 17:03:40.292" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170805 17:03:40.292" starttime="20170805 17:03:40.291"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170805 17:03:40.293" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170805 17:03:40.293" starttime="20170805 17:03:40.292"></status>
</kw>
<status status="PASS" endtime="20170805 17:03:40.293" starttime="20170805 17:03:40.084"></status>
</kw>
<status status="PASS" endtime="20170805 17:03:40.293" starttime="20170805 17:03:00.051"></status>
</kw>
<status status="PASS" endtime="20170805 17:03:40.293" starttime="20170805 17:03:00.050"></status>
</kw>
<msg timestamp="20170805 17:03:40.293" level="INFO">${l_rest} = True</msg>
<status status="PASS" endtime="20170805 17:03:40.293" starttime="20170805 17:03:00.050"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${l_rest}' == '${False}'</arg>
<arg>Fail</arg>
<arg>msg=REST Authentication Failed</arg>
</arguments>
<status status="PASS" endtime="20170805 17:03:40.294" starttime="20170805 17:03:40.293"></status>
</kw>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg timestamp="20170805 17:03:40.295" level="FAIL">Dictionary does not contain key 'host'.</msg>
<status status="FAIL" endtime="20170805 17:03:40.295" starttime="20170805 17:03:40.295"></status>
</kw>
<msg timestamp="20170805 17:03:40.296" level="INFO">${has_host} = False</msg>
<status status="PASS" endtime="20170805 17:03:40.296" starttime="20170805 17:03:40.295"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status status="PASS" endtime="20170805 17:03:40.297" starttime="20170805 17:03:40.297"></status>
</kw>
<status status="PASS" endtime="20170805 17:03:40.297" starttime="20170805 17:03:40.296"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<status status="PASS" endtime="20170805 17:03:40.300" starttime="20170805 17:03:40.300"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg timestamp="20170805 17:03:40.301" level="FAIL">Dictionary does not contain key 'port'.</msg>
<status status="FAIL" endtime="20170805 17:03:40.301" starttime="20170805 17:03:40.301"></status>
</kw>
<msg timestamp="20170805 17:03:40.302" level="INFO">${has_port} = False</msg>
<status status="PASS" endtime="20170805 17:03:40.302" starttime="20170805 17:03:40.301"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status status="PASS" endtime="20170805 17:03:40.304" starttime="20170805 17:03:40.303"></status>
</kw>
<status status="PASS" endtime="20170805 17:03:40.304" starttime="20170805 17:03:40.303"></status>
</kw>
<status status="PASS" endtime="20170805 17:03:40.304" starttime="20170805 17:03:40.302"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg timestamp="20170805 17:03:40.304" level="INFO">Logging into '9.3.86.161:22' as 'root'.</msg>
<msg timestamp="20170805 17:03:42.245" level="INFO">Read output: root@witherspoon:~#</msg>
<status status="PASS" endtime="20170805 17:03:42.245" starttime="20170805 17:03:40.304"></status>
</kw>
<status status="PASS" endtime="20170805 17:03:42.245" starttime="20170805 17:03:40.294"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>hostname</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${system}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170805 17:03:42.246" level="INFO">Executing command 'hostname'.</msg>
<msg timestamp="20170805 17:03:42.303" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170805 17:03:42.303" level="INFO">${system} = witherspoon</msg>
<msg timestamp="20170805 17:03:42.303" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170805 17:03:42.303" starttime="20170805 17:03:42.245"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20170805 17:03:42.304" level="INFO">Length is 0</msg>
<status status="PASS" endtime="20170805 17:03:42.304" starttime="20170805 17:03:42.304"></status>
</kw>
<status status="PASS" endtime="20170805 17:03:42.304" starttime="20170805 17:02:57.032"></status>
</kw>
<status status="PASS" endtime="20170805 17:03:42.304" starttime="20170805 17:01:07.553"></status>
</kw>
<status status="PASS" endtime="20170805 17:03:42.304" starttime="20170805 17:01:07.552"></status>
</kw>
<kw name="Check Boot Count And Time">
<doc>Check for unexpected reboots.</doc>
<kw name="Set BMC Reset Reference Time" library="utils">
<doc>Set current boot time as a reference and increment</doc>
<kw name="Get BMC Boot Time" library="utils">
<doc>Get boot time from /proc/stat.</doc>
<assign>
<var>${cur_btime}</var>
</assign>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg timestamp="20170805 17:03:42.307" level="FAIL">Dictionary does not contain key 'host'.</msg>
<status status="FAIL" endtime="20170805 17:03:42.307" starttime="20170805 17:03:42.307"></status>
</kw>
<msg timestamp="20170805 17:03:42.308" level="INFO">${has_host} = False</msg>
<status status="PASS" endtime="20170805 17:03:42.308" starttime="20170805 17:03:42.307"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status status="PASS" endtime="20170805 17:03:42.309" starttime="20170805 17:03:42.308"></status>
</kw>
<status status="PASS" endtime="20170805 17:03:42.309" starttime="20170805 17:03:42.308"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<status status="PASS" endtime="20170805 17:03:42.310" starttime="20170805 17:03:42.309"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg timestamp="20170805 17:03:42.311" level="FAIL">Dictionary does not contain key 'port'.</msg>
<status status="FAIL" endtime="20170805 17:03:42.311" starttime="20170805 17:03:42.310"></status>
</kw>
<msg timestamp="20170805 17:03:42.311" level="INFO">${has_port} = False</msg>
<status status="PASS" endtime="20170805 17:03:42.311" starttime="20170805 17:03:42.310"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status status="PASS" endtime="20170805 17:03:42.313" starttime="20170805 17:03:42.312"></status>
</kw>
<status status="PASS" endtime="20170805 17:03:42.313" starttime="20170805 17:03:42.312"></status>
</kw>
<status status="PASS" endtime="20170805 17:03:42.313" starttime="20170805 17:03:42.311"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg timestamp="20170805 17:03:42.313" level="INFO">Logging into '9.3.86.161:22' as 'root'.</msg>
<msg timestamp="20170805 17:03:43.995" level="INFO">Read output: root@witherspoon:~#</msg>
<status status="PASS" endtime="20170805 17:03:43.995" starttime="20170805 17:03:42.313"></status>
</kw>
<status status="PASS" endtime="20170805 17:03:43.996" starttime="20170805 17:03:42.306"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>egrep '^btime ' /proc/stat | cut -f 2 -d ' '</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${output}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170805 17:03:43.996" level="INFO">Executing command 'egrep '^btime ' /proc/stat | cut -f 2 -d ' ''.</msg>
<msg timestamp="20170805 17:03:44.063" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170805 17:03:44.063" level="INFO">${output} = 1501952502</msg>
<msg timestamp="20170805 17:03:44.063" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170805 17:03:44.063" starttime="20170805 17:03:43.996"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20170805 17:03:44.064" level="INFO">Length is 0</msg>
<status status="PASS" endtime="20170805 17:03:44.064" starttime="20170805 17:03:44.064"></status>
</kw>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<assign>
<var>${btime}</var>
</assign>
<msg timestamp="20170805 17:03:44.065" level="INFO">${btime} = 1501952502</msg>
<status status="PASS" endtime="20170805 17:03:44.065" starttime="20170805 17:03:44.064"></status>
</kw>
<msg timestamp="20170805 17:03:44.065" level="INFO">${cur_btime} = 1501952502</msg>
<status status="PASS" endtime="20170805 17:03:44.065" starttime="20170805 17:03:42.305"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${BOOT_TIME} == ${0} and ${BOOT_COUNT} == ${0}</arg>
<arg>Set Global Variable</arg>
<arg>${BOOT_TIME}</arg>
<arg>${cur_btime}</arg>
<arg>ELSE IF</arg>
<arg>${cur_btime} &gt; ${BOOT_TIME}</arg>
<arg>Run Keywords</arg>
<arg>Set Global Variable</arg>
<arg>${BOOT_TIME}</arg>
<arg>${cur_btime}</arg>
<arg>AND</arg>
<arg>Set Global Variable</arg>
<arg>${BOOT_COUNT}</arg>
<arg>${BOOT_COUNT + 1}</arg>
</arguments>
<kw name="Run Keywords" library="BuiltIn">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Set Global Variable</arg>
<arg>${BOOT_TIME}</arg>
<arg>${cur_btime}</arg>
<arg>AND</arg>
<arg>Set Global Variable</arg>
<arg>${BOOT_COUNT}</arg>
<arg>${BOOT_COUNT + 1}</arg>
</arguments>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${BOOT_TIME}</arg>
<arg>${cur_btime}</arg>
</arguments>
<msg timestamp="20170805 17:03:44.068" level="INFO">${BOOT_TIME} = 1501952502</msg>
<status status="PASS" endtime="20170805 17:03:44.068" starttime="20170805 17:03:44.067"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${BOOT_COUNT}</arg>
<arg>${BOOT_COUNT + 1}</arg>
</arguments>
<msg timestamp="20170805 17:03:44.068" level="INFO">${BOOT_COUNT} = 1</msg>
<status status="PASS" endtime="20170805 17:03:44.069" starttime="20170805 17:03:44.068"></status>
</kw>
<status status="PASS" endtime="20170805 17:03:44.069" starttime="20170805 17:03:44.067"></status>
</kw>
<status status="PASS" endtime="20170805 17:03:44.069" starttime="20170805 17:03:44.066"></status>
</kw>
<status status="PASS" endtime="20170805 17:03:44.069" starttime="20170805 17:03:42.305"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>\n Boot Count: ${BOOT_COUNT}</arg>
</arguments>
<status status="PASS" endtime="20170805 17:03:44.069" starttime="20170805 17:03:44.069"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>\n Boot Time: ${BOOT_TIME}</arg>
</arguments>
<status status="PASS" endtime="20170805 17:03:44.070" starttime="20170805 17:03:44.070"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${BOOT_COUNT} &gt; ${MAX_BOOT_COUNT}</arg>
<arg>Log</arg>
<arg>Phantom Reboot!!! Unexpected reboot detected</arg>
<arg>level=WARN</arg>
</arguments>
<status status="PASS" endtime="20170805 17:03:44.071" starttime="20170805 17:03:44.070"></status>
</kw>
<status status="PASS" endtime="20170805 17:03:44.071" starttime="20170805 17:03:42.305"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Temp BMC URI Check</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Temp BMC URI Check">
<doc>Check for transient "BMC0" interface.</doc>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>/xyz/openbmc_project/state/BMC0/</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170805 17:03:44.074" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170805 17:03:44.074" starttime="20170805 17:03:44.074"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170805 17:03:44.075" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170805 17:03:44.075" starttime="20170805 17:03:44.075"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170805 17:03:44.076" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170805 17:03:44.076" starttime="20170805 17:03:44.075"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170805 17:03:44.076" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170805 17:03:44.076" starttime="20170805 17:03:44.076"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170805 17:03:44.334" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170805 17:03:44.334" starttime="20170805 17:03:44.077"></status>
</kw>
<msg timestamp="20170805 17:03:44.334" level="INFO">${status} = PASS</msg>
<msg timestamp="20170805 17:03:44.334" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170805 17:03:44.335" starttime="20170805 17:03:44.077"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170805 17:03:44.335" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170805 17:03:44.335" starttime="20170805 17:03:44.335"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170805 17:03:44.336" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170805 17:03:44.336" starttime="20170805 17:03:44.336"></status>
</kw>
<status status="PASS" endtime="20170805 17:03:44.337" starttime="20170805 17:03:44.073"></status>
</kw>
<status status="PASS" endtime="20170805 17:03:44.337" starttime="20170805 17:03:44.073"></status>
</kw>
<status status="PASS" endtime="20170805 17:03:44.337" starttime="20170805 17:03:44.072"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170805 17:03:44.337" level="INFO">${base_uri} = /xyz/openbmc_project/state/BMC0/</msg>
<status status="PASS" endtime="20170805 17:03:44.337" starttime="20170805 17:03:44.337"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170805 17:03:44.338" starttime="20170805 17:03:44.338"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170805 17:03:44.403" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/BMC0/, headers=None json=None</msg>
<msg timestamp="20170805 17:03:44.403" level="INFO">${ret} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20170805 17:03:44.403" starttime="20170805 17:03:44.338"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170805 17:03:44.404" starttime="20170805 17:03:44.403"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170805 17:03:44.404" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170805 17:03:44.404" starttime="20170805 17:03:44.404"></status>
</kw>
<msg timestamp="20170805 17:03:44.405" level="INFO">${resp} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20170805 17:03:44.405" starttime="20170805 17:03:44.072"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170805 17:03:44.405" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20170805 17:03:44.406" level="FAIL">404 != 200</msg>
<status status="FAIL" endtime="20170805 17:03:44.406" starttime="20170805 17:03:44.405"></status>
</kw>
<status status="FAIL" endtime="20170805 17:03:44.406" starttime="20170805 17:03:44.071"></status>
</kw>
<msg timestamp="20170805 17:03:44.406" level="INFO">${status} = False</msg>
<status status="PASS" endtime="20170805 17:03:44.406" starttime="20170805 17:03:44.071"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Wait For BMC Ready</arg>
<arg>ELSE</arg>
<arg>Wait For Temp BMC Ready</arg>
</arguments>
<kw name="Wait For BMC Ready" library="state_manager">
<doc>Check BMC state and wait for BMC Ready.</doc>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>BMC_READY</arg>
<arg>HOST_POWERED_OFF</arg>
</arguments>
<assign>
<var>@{states}</var>
</assign>
<msg timestamp="20170805 17:03:44.408" level="INFO">@{states} = [ BMC_READY | HOST_POWERED_OFF ]</msg>
<status status="PASS" endtime="20170805 17:03:44.408" starttime="20170805 17:03:44.407"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${OBMC_STATES_VERSION}' == '${0}'</arg>
<arg>Wait Until Keyword Succeeds</arg>
<arg>10 min</arg>
<arg>10 sec</arg>
<arg>Verify BMC State</arg>
<arg>${states}</arg>
<arg>ELSE</arg>
<arg>Wait Until Keyword Succeeds</arg>
<arg>10 min</arg>
<arg>10 sec</arg>
<arg>Is BMC Ready</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>10 min</arg>
<arg>10 sec</arg>
<arg>Is BMC Ready</arg>
</arguments>
<kw name="Is BMC Ready" library="state_manager">
<doc>Check if BMC state is Ready.</doc>
<kw name="Get BMC State" library="state_manager">
<doc>Return the state of the BMC.</doc>
<assign>
<var>${bmc_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${BMC_STATE_URI}</arg>
<arg>CurrentBMCState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170805 17:03:44.413" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170805 17:03:44.413" starttime="20170805 17:03:44.413"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170805 17:03:44.414" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170805 17:03:44.414" starttime="20170805 17:03:44.414"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170805 17:03:44.414" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170805 17:03:44.415" starttime="20170805 17:03:44.414"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170805 17:03:44.415" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170805 17:03:44.416" starttime="20170805 17:03:44.415"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170805 17:03:44.604" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170805 17:03:44.604" starttime="20170805 17:03:44.416"></status>
</kw>
<msg timestamp="20170805 17:03:44.604" level="INFO">${status} = PASS</msg>
<msg timestamp="20170805 17:03:44.604" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170805 17:03:44.604" starttime="20170805 17:03:44.416"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170805 17:03:44.605" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170805 17:03:44.605" starttime="20170805 17:03:44.604"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170805 17:03:44.606" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170805 17:03:44.606" starttime="20170805 17:03:44.605"></status>
</kw>
<status status="PASS" endtime="20170805 17:03:44.606" starttime="20170805 17:03:44.412"></status>
</kw>
<status status="PASS" endtime="20170805 17:03:44.606" starttime="20170805 17:03:44.412"></status>
</kw>
<status status="PASS" endtime="20170805 17:03:44.606" starttime="20170805 17:03:44.411"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170805 17:03:44.607" level="INFO">${base_uri} = /xyz/openbmc_project/state/bmc0//attr/CurrentBMCState</msg>
<status status="PASS" endtime="20170805 17:03:44.607" starttime="20170805 17:03:44.606"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170805 17:03:44.607" starttime="20170805 17:03:44.607"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170805 17:03:44.688" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/bmc0//attr/CurrentBMCState, headers=None json=None</msg>
<msg timestamp="20170805 17:03:44.688" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170805 17:03:44.688" starttime="20170805 17:03:44.608"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170805 17:03:44.689" starttime="20170805 17:03:44.689"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170805 17:03:44.689" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170805 17:03:44.690" starttime="20170805 17:03:44.689"></status>
</kw>
<msg timestamp="20170805 17:03:44.690" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170805 17:03:44.690" starttime="20170805 17:03:44.410"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170805 17:03:44.690" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170805 17:03:44.690" starttime="20170805 17:03:44.690"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170805 17:03:44.691" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.BMC.BMCState.Ready", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170805 17:03:44.691" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170805 17:03:44.691" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.BMC.BMCState.Ready'}</msg>
<status status="PASS" endtime="20170805 17:03:44.691" starttime="20170805 17:03:44.691"></status>
</kw>
<msg timestamp="20170805 17:03:44.691" level="INFO">${state} = xyz.openbmc_project.State.BMC.BMCState.Ready</msg>
<status status="PASS" endtime="20170805 17:03:44.692" starttime="20170805 17:03:44.410"></status>
</kw>
<msg timestamp="20170805 17:03:44.692" level="INFO">${bmc_state} = Ready</msg>
<status status="PASS" endtime="20170805 17:03:44.692" starttime="20170805 17:03:44.409"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${BMC_READY_STATE}</arg>
<arg>${bmc_state}</arg>
</arguments>
<status status="PASS" endtime="20170805 17:03:44.692" starttime="20170805 17:03:44.692"></status>
</kw>
<status status="PASS" endtime="20170805 17:03:44.693" starttime="20170805 17:03:44.409"></status>
</kw>
<status status="PASS" endtime="20170805 17:03:44.693" starttime="20170805 17:03:44.409"></status>
</kw>
<status status="PASS" endtime="20170805 17:03:44.693" starttime="20170805 17:03:44.408"></status>
</kw>
<status status="PASS" endtime="20170805 17:03:44.693" starttime="20170805 17:03:44.407"></status>
</kw>
<status status="PASS" endtime="20170805 17:03:44.693" starttime="20170805 17:03:44.406"></status>
</kw>
<status status="PASS" endtime="20170805 17:03:44.693" starttime="20170805 17:00:50.514"></status>
</kw>
<status status="PASS" endtime="20170805 17:03:44.693" starttime="20170805 17:00:50.513"></status>
</kw>
<kw name="Run Key U" library="gen_robot_keyword">
<doc>Run keyword unconditionally (i.e. without regard to global test_mode</doc>
<arguments>
<arg>Preserve BMC Network Setting</arg>
</arguments>
<kw name="Preserve BMC Network Setting" library="code_update_utils">
<doc>Preserve Network setting</doc>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${1}</arg>
</arguments>
<assign>
<var>${policy}</var>
</assign>
<msg timestamp="20170805 17:03:44.701" level="INFO">${policy} = 1</msg>
<status status="PASS" endtime="20170805 17:03:44.701" starttime="20170805 17:03:44.701"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=${policy}</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg timestamp="20170805 17:03:44.702" level="INFO">${value} = {u'data': 1}</msg>
<status status="PASS" endtime="20170805 17:03:44.702" starttime="20170805 17:03:44.702"></status>
</kw>
<kw name="Write Attribute" library="rest_client">
<arguments>
<arg>${BMC_UPD_ATTR}</arg>
<arg>preserve_network_settings</arg>
<arg>data=${value}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170805 17:03:44.703" level="INFO">${base_uri} = /org/openbmc/control/flash/bmc</msg>
<status status="PASS" endtime="20170805 17:03:44.703" starttime="20170805 17:03:44.703"></status>
</kw>
<kw name="OpenBMC Put Request" library="rest_client">
<arguments>
<arg>${base_uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>&amp;{kwargs}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170805 17:03:44.706" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170805 17:03:44.706" starttime="20170805 17:03:44.706"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170805 17:03:44.707" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170805 17:03:44.707" starttime="20170805 17:03:44.707"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170805 17:03:44.708" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170805 17:03:44.708" starttime="20170805 17:03:44.707"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170805 17:03:44.709" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170805 17:03:44.709" starttime="20170805 17:03:44.708"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170805 17:03:44.893" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170805 17:03:44.893" starttime="20170805 17:03:44.710"></status>
</kw>
<msg timestamp="20170805 17:03:44.893" level="INFO">${status} = PASS</msg>
<msg timestamp="20170805 17:03:44.893" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170805 17:03:44.893" starttime="20170805 17:03:44.709"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170805 17:03:44.894" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170805 17:03:44.894" starttime="20170805 17:03:44.894"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170805 17:03:44.895" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170805 17:03:44.895" starttime="20170805 17:03:44.894"></status>
</kw>
<status status="PASS" endtime="20170805 17:03:44.895" starttime="20170805 17:03:44.705"></status>
</kw>
<status status="PASS" endtime="20170805 17:03:44.895" starttime="20170805 17:03:44.705"></status>
</kw>
<status status="PASS" endtime="20170805 17:03:44.895" starttime="20170805 17:03:44.704"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170805 17:03:44.896" level="INFO">${base_uri} = /org/openbmc/control/flash/bmc/attr/preserve_network_settings</msg>
<status status="PASS" endtime="20170805 17:03:44.896" starttime="20170805 17:03:44.895"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170805 17:03:44.896" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170805 17:03:44.897" starttime="20170805 17:03:44.896"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" endtime="20170805 17:03:44.897" starttime="20170805 17:03:44.897"></status>
</kw>
<kw name="Log Request" library="rest_client">
<arguments>
<arg>method=Put</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>URI:</arg>
<arg>${AUTH_URI}</arg>
<arg>${kwargs["base_uri"]}</arg>
<arg>, method:</arg>
<arg>${kwargs["method"]}</arg>
<arg>, args:</arg>
<arg>${kwargs["args"]}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170805 17:03:44.899" level="INFO">${msg} = URI:https://9.3.86.161/org/openbmc/control/flash/bmc/attr/preserve_network_settings, method:Put, args:{u'data': {u'data': 1}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20170805 17:03:44.899" starttime="20170805 17:03:44.898"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170805 17:03:44.900" level="INFO">URI:https://9.3.86.161/org/openbmc/control/flash/bmc/attr/preserve_network_settings, method:Put, args:{u'data': {u'data': 1}, u'headers': {u'Content-Type': u'application/json'}}</msg>
<status status="PASS" endtime="20170805 17:03:44.900" starttime="20170805 17:03:44.900"></status>
</kw>
<status status="PASS" endtime="20170805 17:03:44.900" starttime="20170805 17:03:44.899"></status>
</kw>
<status status="PASS" endtime="20170805 17:03:44.901" starttime="20170805 17:03:44.897"></status>
</kw>
<kw name="Put Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a PUT request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170805 17:03:45.152" level="INFO">Put Request using : alias=openbmc, uri=/org/openbmc/control/flash/bmc/attr/preserve_network_settings, data={"data": 1},                     headers={u'Content-Type': u'application/json'}, allow_redirects=True </msg>
<msg timestamp="20170805 17:03:45.152" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170805 17:03:45.152" starttime="20170805 17:03:44.901"></status>
</kw>
<kw name="Log Response" library="rest_client">
<arguments>
<arg>${ret}</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>Response code:</arg>
<arg>${resp.status_code}</arg>
<arg>, Content:</arg>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${msg}</var>
</assign>
<msg timestamp="20170805 17:03:45.153" level="INFO">${msg} = Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170805 17:03:45.153" starttime="20170805 17:03:45.153"></status>
</kw>
<kw name="Logging" library="rest_client">
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${msg}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20170805 17:03:45.154" level="INFO">Response code:200, Content:{
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
}</msg>
<status status="PASS" endtime="20170805 17:03:45.155" starttime="20170805 17:03:45.154"></status>
</kw>
<status status="PASS" endtime="20170805 17:03:45.155" starttime="20170805 17:03:45.154"></status>
</kw>
<status status="PASS" endtime="20170805 17:03:45.155" starttime="20170805 17:03:45.152"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170805 17:03:45.155" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170805 17:03:45.155" starttime="20170805 17:03:45.155"></status>
</kw>
<msg timestamp="20170805 17:03:45.156" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170805 17:03:45.156" starttime="20170805 17:03:44.703"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170805 17:03:45.156" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170805 17:03:45.156" starttime="20170805 17:03:45.156"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${json}</var>
</assign>
<msg timestamp="20170805 17:03:45.157" level="INFO">To JSON using : content={
  "data": null, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170805 17:03:45.157" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170805 17:03:45.157" level="INFO">${json} = {u'status': u'ok', u'message': u'200 OK', u'data': None}</msg>
<status status="PASS" endtime="20170805 17:03:45.157" starttime="20170805 17:03:45.157"></status>
</kw>
<status status="PASS" endtime="20170805 17:03:45.157" starttime="20170805 17:03:44.702"></status>
</kw>
<kw name="Read Properties" library="rest_client">
<arguments>
<arg>${BMC_UPD_ATTR}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170805 17:03:45.161" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170805 17:03:45.161" starttime="20170805 17:03:45.161"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170805 17:03:45.162" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170805 17:03:45.162" starttime="20170805 17:03:45.162"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170805 17:03:45.163" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170805 17:03:45.163" starttime="20170805 17:03:45.163"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170805 17:03:45.164" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170805 17:03:45.164" starttime="20170805 17:03:45.164"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170805 17:03:45.371" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170805 17:03:45.371" starttime="20170805 17:03:45.165"></status>
</kw>
<msg timestamp="20170805 17:03:45.371" level="INFO">${status} = PASS</msg>
<msg timestamp="20170805 17:03:45.371" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170805 17:03:45.371" starttime="20170805 17:03:45.165"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170805 17:03:45.372" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170805 17:03:45.372" starttime="20170805 17:03:45.372"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170805 17:03:45.373" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170805 17:03:45.373" starttime="20170805 17:03:45.373"></status>
</kw>
<status status="PASS" endtime="20170805 17:03:45.373" starttime="20170805 17:03:45.160"></status>
</kw>
<status status="PASS" endtime="20170805 17:03:45.373" starttime="20170805 17:03:45.159"></status>
</kw>
<status status="PASS" endtime="20170805 17:03:45.373" starttime="20170805 17:03:45.159"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170805 17:03:45.374" level="INFO">${base_uri} = /org/openbmc/control/flash/bmc</msg>
<status status="PASS" endtime="20170805 17:03:45.374" starttime="20170805 17:03:45.374"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170805 17:03:45.375" starttime="20170805 17:03:45.374"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170805 17:03:45.579" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/control/flash/bmc, headers=None json=None</msg>
<msg timestamp="20170805 17:03:45.580" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170805 17:03:45.580" starttime="20170805 17:03:45.375"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170805 17:03:45.580" starttime="20170805 17:03:45.580"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170805 17:03:45.581" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170805 17:03:45.581" starttime="20170805 17:03:45.581"></status>
</kw>
<msg timestamp="20170805 17:03:45.581" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170805 17:03:45.581" starttime="20170805 17:03:45.158"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170805 17:03:45.582" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170805 17:03:45.582" starttime="20170805 17:03:45.581"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170805 17:03:45.582" level="INFO">To JSON using : content={
  "data": {
    "auto_apply": 0, 
    "clear_persistent_files": 0, 
    "filename": "", 
    "preserve_network_settings": 1, 
    "restore_application_defaults": 0, 
    "status": "Idle", 
    "update_kernel_and_apps": 0
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170805 17:03:45.582" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170805 17:03:45.583" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': {u'status': u'Idle', u'update_kernel_and_apps': 0, u'clear_persistent_files': 0, u'auto_apply': 0, u'filename': u'', u'preserve_network_settings': 1,...</msg>
<status status="PASS" endtime="20170805 17:03:45.583" starttime="20170805 17:03:45.582"></status>
</kw>
<msg timestamp="20170805 17:03:45.583" level="INFO">${data} = {u'status': u'Idle', u'update_kernel_and_apps': 0, u'clear_persistent_files': 0, u'auto_apply': 0, u'filename': u'', u'preserve_network_settings': 1, u'restore_application_defaults': 0}</msg>
<status status="PASS" endtime="20170805 17:03:45.583" starttime="20170805 17:03:45.158"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${data['preserve_network_settings']}</arg>
<arg>${1}</arg>
<arg>msg=0 indicates network is not preserved</arg>
</arguments>
<status status="PASS" endtime="20170805 17:03:45.584" starttime="20170805 17:03:45.583"></status>
</kw>
<status status="PASS" endtime="20170805 17:03:45.584" starttime="20170805 17:03:44.700"></status>
</kw>
<status status="PASS" endtime="20170805 17:03:45.584" starttime="20170805 17:03:44.693"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>SCP Tar Image File To BMC \ ${FILE_PATH}</arg>
</arguments>
<kw name="SCP Tar Image File to BMC" library="code_update_utils">
<doc>Copy BMC tar image to BMC.</doc>
<arguments>
<arg>/home/fspcibld/witherspoon-20170805054911.all.tar</arg>
</arguments>
<kw name="Open Connection for SCP" library="connection_client">
<kw name="Import Library" library="BuiltIn">
<doc>Imports a library with the given name and optional arguments.</doc>
<arguments>
<arg>SCPLibrary</arg>
<arg>WITH NAME</arg>
<arg>scp</arg>
</arguments>
<status status="PASS" endtime="20170805 17:03:45.598" starttime="20170805 17:03:45.592"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' == '${EMPTY}'</arg>
<arg>scp.Open connection</arg>
<arg>${OPENBMC_HOST}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>scp.Open connection</arg>
<arg>${OPENBMC_HOST}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
</arguments>
<kw name="Open Connection" library="scp">
<doc>Opens a new SCP connection to the given host.</doc>
<arguments>
<arg>${OPENBMC_HOST}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
</arguments>
<status status="PASS" endtime="20170805 17:03:46.234" starttime="20170805 17:03:45.599"></status>
</kw>
<status status="PASS" endtime="20170805 17:03:46.234" starttime="20170805 17:03:45.599"></status>
</kw>
<status status="PASS" endtime="20170805 17:03:46.234" starttime="20170805 17:03:45.591"></status>
</kw>
<kw name="Open Connection And Log In" library="connection_client">
<doc>Opens a connection with the given arguments, and logs in.</doc>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<assign>
<var>${has_host}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host</arg>
</arguments>
<msg timestamp="20170805 17:03:46.236" level="FAIL">Dictionary does not contain key 'host'.</msg>
<status status="FAIL" endtime="20170805 17:03:46.236" starttime="20170805 17:03:46.235"></status>
</kw>
<msg timestamp="20170805 17:03:46.236" level="INFO">${has_host} = False</msg>
<status status="PASS" endtime="20170805 17:03:46.236" starttime="20170805 17:03:46.235"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${has_host} == ${FALSE}</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>host=${OPENBMC_HOST}</arg>
</arguments>
<status status="PASS" endtime="20170805 17:03:46.237" starttime="20170805 17:03:46.237"></status>
</kw>
<status status="PASS" endtime="20170805 17:03:46.237" starttime="20170805 17:03:46.236"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and '${HTTPS_PORT}' != '${EMPTY}'</arg>
<arg>User input SSH and HTTPs Ports</arg>
</arguments>
<status status="PASS" endtime="20170805 17:03:46.238" starttime="20170805 17:03:46.237"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<assign>
<var>${has_port}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${connection_args}</arg>
<arg>port</arg>
</arguments>
<msg timestamp="20170805 17:03:46.239" level="FAIL">Dictionary does not contain key 'port'.</msg>
<status status="FAIL" endtime="20170805 17:03:46.239" starttime="20170805 17:03:46.239"></status>
</kw>
<msg timestamp="20170805 17:03:46.239" level="INFO">${has_port} = False</msg>
<status status="PASS" endtime="20170805 17:03:46.239" starttime="20170805 17:03:46.238"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' != '${EMPTY}' and ${has_port} == ${FALSE}</arg>
<arg>Run Keywords</arg>
<arg>Set To Dictionary</arg>
<arg>${connection_args}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>AND</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>SSHLibrary.Open connection</arg>
<arg>&amp;{connection_args}</arg>
</arguments>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given `host` and `port`.</doc>
<arguments>
<arg>&amp;{connection_args}</arg>
</arguments>
<status status="PASS" endtime="20170805 17:03:46.241" starttime="20170805 17:03:46.241"></status>
</kw>
<status status="PASS" endtime="20170805 17:03:46.241" starttime="20170805 17:03:46.240"></status>
</kw>
<status status="PASS" endtime="20170805 17:03:46.241" starttime="20170805 17:03:46.240"></status>
</kw>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given `username` and `password`.</doc>
<arguments>
<arg>${username}</arg>
<arg>${password}</arg>
</arguments>
<msg timestamp="20170805 17:03:46.242" level="INFO">Logging into '9.3.86.161:22' as 'root'.</msg>
<msg timestamp="20170805 17:03:48.022" level="INFO">Read output: root@witherspoon:~#</msg>
<status status="PASS" endtime="20170805 17:03:48.022" starttime="20170805 17:03:46.241"></status>
</kw>
<status status="PASS" endtime="20170805 17:03:48.022" starttime="20170805 17:03:46.234"></status>
</kw>
<kw name="Loop SCP Retry" library="code_update_utils">
<doc>Try transferring the file 4 times.</doc>
<arguments>
<arg>${image_file_path}</arg>
</arguments>
<kw type="for" name="${index} IN RANGE [ 0 | 4 ]">
<kw type="foritem" name="${index} = 0">
<kw name="Retry SCP" library="code_update_utils">
<doc>Delete the incomplete file and scp file.</doc>
<arguments>
<arg>${image_file_path}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/tmp/flashimg</arg>
</arguments>
<assign>
<var>${targ_file_path}</var>
</assign>
<msg timestamp="20170805 17:03:48.024" level="INFO">${targ_file_path} = /tmp/flashimg</msg>
<status status="PASS" endtime="20170805 17:03:48.024" starttime="20170805 17:03:48.024"></status>
</kw>
<kw name="Execute Command On BMC" library="utils">
<doc>Execute given command on BMC and return output.</doc>
<arguments>
<arg>rm -f /tmp/flashimg</arg>
</arguments>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${command}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170805 17:03:48.025" level="INFO">Executing command 'rm -f /tmp/flashimg'.</msg>
<msg timestamp="20170805 17:03:48.071" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170805 17:03:48.071" level="INFO">${stdout} = </msg>
<msg timestamp="20170805 17:03:48.071" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170805 17:03:48.071" starttime="20170805 17:03:48.024"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20170805 17:03:48.072" level="INFO">Length is 0</msg>
<status status="PASS" endtime="20170805 17:03:48.072" starttime="20170805 17:03:48.072"></status>
</kw>
<status status="PASS" endtime="20170805 17:03:48.072" starttime="20170805 17:03:48.024"></status>
</kw>
<kw name="Put File" library="scp">
<doc>Uploads a file to the remote machine from the local machine.</doc>
<arguments>
<arg>${image_file_path}</arg>
<arg>${targ_file_path}</arg>
</arguments>
<status status="PASS" endtime="20170805 17:04:05.276" starttime="20170805 17:03:48.072"></status>
</kw>
<kw name="Execute Command On BMC" library="utils">
<doc>Execute given command on BMC and return output.</doc>
<arguments>
<arg>ls -lh ${targ_file_path}</arg>
</arguments>
<assign>
<var>${file_size}</var>
</assign>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${command}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170805 17:04:05.277" level="INFO">Executing command 'ls -lh /tmp/flashimg'.</msg>
<msg timestamp="20170805 17:04:05.334" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170805 17:04:05.334" level="INFO">${stdout} = -rw-r--r--    1 root     root       36.4M Aug  5 17:04 /tmp/flashimg</msg>
<msg timestamp="20170805 17:04:05.334" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170805 17:04:05.334" starttime="20170805 17:04:05.277"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20170805 17:04:05.335" level="INFO">Length is 0</msg>
<status status="PASS" endtime="20170805 17:04:05.335" starttime="20170805 17:04:05.334"></status>
</kw>
<msg timestamp="20170805 17:04:05.335" level="INFO">${file_size} = -rw-r--r--    1 root     root       36.4M Aug  5 17:04 /tmp/flashimg</msg>
<status status="PASS" endtime="20170805 17:04:05.335" starttime="20170805 17:04:05.276"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${file_size}</arg>
<arg>32.0M</arg>
<arg>msg=Incomplete file transfer.</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${file_size}</arg>
<arg>32.0M</arg>
<arg>msg=Incomplete file transfer.</arg>
</arguments>
<msg timestamp="20170805 17:04:05.336" level="FAIL">Incomplete file transfer.: '-rw-r--r--    1 root     root       36.4M Aug  5 17:04 /tmp/flashimg' does not contain '32.0M'</msg>
<status status="FAIL" endtime="20170805 17:04:05.336" starttime="20170805 17:04:05.336"></status>
</kw>
<msg timestamp="20170805 17:04:05.336" level="INFO">${status} = False</msg>
<status status="PASS" endtime="20170805 17:04:05.336" starttime="20170805 17:04:05.335"></status>
</kw>
<msg timestamp="20170805 17:04:05.336" level="INFO">${status} = False</msg>
<status status="PASS" endtime="20170805 17:04:05.336" starttime="20170805 17:03:48.023"></status>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${True}'</arg>
</arguments>
<status status="PASS" endtime="20170805 17:04:05.337" starttime="20170805 17:04:05.337"></status>
</kw>
<status status="PASS" endtime="20170805 17:04:05.337" starttime="20170805 17:03:48.023"></status>
</kw>
<kw type="foritem" name="${index} = 1">
<kw name="Retry SCP" library="code_update_utils">
<doc>Delete the incomplete file and scp file.</doc>
<arguments>
<arg>${image_file_path}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/tmp/flashimg</arg>
</arguments>
<assign>
<var>${targ_file_path}</var>
</assign>
<msg timestamp="20170805 17:04:05.338" level="INFO">${targ_file_path} = /tmp/flashimg</msg>
<status status="PASS" endtime="20170805 17:04:05.338" starttime="20170805 17:04:05.338"></status>
</kw>
<kw name="Execute Command On BMC" library="utils">
<doc>Execute given command on BMC and return output.</doc>
<arguments>
<arg>rm -f /tmp/flashimg</arg>
</arguments>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${command}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170805 17:04:05.339" level="INFO">Executing command 'rm -f /tmp/flashimg'.</msg>
<msg timestamp="20170805 17:04:05.434" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170805 17:04:05.434" level="INFO">${stdout} = </msg>
<msg timestamp="20170805 17:04:05.434" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170805 17:04:05.434" starttime="20170805 17:04:05.339"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20170805 17:04:05.435" level="INFO">Length is 0</msg>
<status status="PASS" endtime="20170805 17:04:05.435" starttime="20170805 17:04:05.435"></status>
</kw>
<status status="PASS" endtime="20170805 17:04:05.435" starttime="20170805 17:04:05.339"></status>
</kw>
<kw name="Put File" library="scp">
<doc>Uploads a file to the remote machine from the local machine.</doc>
<arguments>
<arg>${image_file_path}</arg>
<arg>${targ_file_path}</arg>
</arguments>
<status status="PASS" endtime="20170805 17:04:22.944" starttime="20170805 17:04:05.435"></status>
</kw>
<kw name="Execute Command On BMC" library="utils">
<doc>Execute given command on BMC and return output.</doc>
<arguments>
<arg>ls -lh ${targ_file_path}</arg>
</arguments>
<assign>
<var>${file_size}</var>
</assign>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${command}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170805 17:04:22.946" level="INFO">Executing command 'ls -lh /tmp/flashimg'.</msg>
<msg timestamp="20170805 17:04:23.002" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170805 17:04:23.002" level="INFO">${stdout} = -rw-r--r--    1 root     root       36.4M Aug  5 17:04 /tmp/flashimg</msg>
<msg timestamp="20170805 17:04:23.003" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170805 17:04:23.003" starttime="20170805 17:04:22.945"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20170805 17:04:23.003" level="INFO">Length is 0</msg>
<status status="PASS" endtime="20170805 17:04:23.003" starttime="20170805 17:04:23.003"></status>
</kw>
<msg timestamp="20170805 17:04:23.003" level="INFO">${file_size} = -rw-r--r--    1 root     root       36.4M Aug  5 17:04 /tmp/flashimg</msg>
<status status="PASS" endtime="20170805 17:04:23.003" starttime="20170805 17:04:22.945"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${file_size}</arg>
<arg>32.0M</arg>
<arg>msg=Incomplete file transfer.</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${file_size}</arg>
<arg>32.0M</arg>
<arg>msg=Incomplete file transfer.</arg>
</arguments>
<msg timestamp="20170805 17:04:23.005" level="FAIL">Incomplete file transfer.: '-rw-r--r--    1 root     root       36.4M Aug  5 17:04 /tmp/flashimg' does not contain '32.0M'</msg>
<status status="FAIL" endtime="20170805 17:04:23.005" starttime="20170805 17:04:23.004"></status>
</kw>
<msg timestamp="20170805 17:04:23.005" level="INFO">${status} = False</msg>
<status status="PASS" endtime="20170805 17:04:23.005" starttime="20170805 17:04:23.004"></status>
</kw>
<msg timestamp="20170805 17:04:23.005" level="INFO">${status} = False</msg>
<status status="PASS" endtime="20170805 17:04:23.005" starttime="20170805 17:04:05.337"></status>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${True}'</arg>
</arguments>
<status status="PASS" endtime="20170805 17:04:23.006" starttime="20170805 17:04:23.005"></status>
</kw>
<status status="PASS" endtime="20170805 17:04:23.006" starttime="20170805 17:04:05.337"></status>
</kw>
<kw type="foritem" name="${index} = 2">
<kw name="Retry SCP" library="code_update_utils">
<doc>Delete the incomplete file and scp file.</doc>
<arguments>
<arg>${image_file_path}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/tmp/flashimg</arg>
</arguments>
<assign>
<var>${targ_file_path}</var>
</assign>
<msg timestamp="20170805 17:04:23.007" level="INFO">${targ_file_path} = /tmp/flashimg</msg>
<status status="PASS" endtime="20170805 17:04:23.007" starttime="20170805 17:04:23.007"></status>
</kw>
<kw name="Execute Command On BMC" library="utils">
<doc>Execute given command on BMC and return output.</doc>
<arguments>
<arg>rm -f /tmp/flashimg</arg>
</arguments>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${command}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170805 17:04:23.008" level="INFO">Executing command 'rm -f /tmp/flashimg'.</msg>
<msg timestamp="20170805 17:04:23.103" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170805 17:04:23.103" level="INFO">${stdout} = </msg>
<msg timestamp="20170805 17:04:23.103" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170805 17:04:23.103" starttime="20170805 17:04:23.008"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20170805 17:04:23.103" level="INFO">Length is 0</msg>
<status status="PASS" endtime="20170805 17:04:23.103" starttime="20170805 17:04:23.103"></status>
</kw>
<status status="PASS" endtime="20170805 17:04:23.104" starttime="20170805 17:04:23.007"></status>
</kw>
<kw name="Put File" library="scp">
<doc>Uploads a file to the remote machine from the local machine.</doc>
<arguments>
<arg>${image_file_path}</arg>
<arg>${targ_file_path}</arg>
</arguments>
<status status="PASS" endtime="20170805 17:04:40.735" starttime="20170805 17:04:23.104"></status>
</kw>
<kw name="Execute Command On BMC" library="utils">
<doc>Execute given command on BMC and return output.</doc>
<arguments>
<arg>ls -lh ${targ_file_path}</arg>
</arguments>
<assign>
<var>${file_size}</var>
</assign>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${command}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170805 17:04:40.737" level="INFO">Executing command 'ls -lh /tmp/flashimg'.</msg>
<msg timestamp="20170805 17:04:40.804" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170805 17:04:40.804" level="INFO">${stdout} = -rw-r--r--    1 root     root       36.4M Aug  5 17:04 /tmp/flashimg</msg>
<msg timestamp="20170805 17:04:40.804" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170805 17:04:40.804" starttime="20170805 17:04:40.737"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20170805 17:04:40.805" level="INFO">Length is 0</msg>
<status status="PASS" endtime="20170805 17:04:40.805" starttime="20170805 17:04:40.804"></status>
</kw>
<msg timestamp="20170805 17:04:40.805" level="INFO">${file_size} = -rw-r--r--    1 root     root       36.4M Aug  5 17:04 /tmp/flashimg</msg>
<status status="PASS" endtime="20170805 17:04:40.805" starttime="20170805 17:04:40.736"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${file_size}</arg>
<arg>32.0M</arg>
<arg>msg=Incomplete file transfer.</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${file_size}</arg>
<arg>32.0M</arg>
<arg>msg=Incomplete file transfer.</arg>
</arguments>
<msg timestamp="20170805 17:04:40.806" level="FAIL">Incomplete file transfer.: '-rw-r--r--    1 root     root       36.4M Aug  5 17:04 /tmp/flashimg' does not contain '32.0M'</msg>
<status status="FAIL" endtime="20170805 17:04:40.806" starttime="20170805 17:04:40.806"></status>
</kw>
<msg timestamp="20170805 17:04:40.806" level="INFO">${status} = False</msg>
<status status="PASS" endtime="20170805 17:04:40.806" starttime="20170805 17:04:40.805"></status>
</kw>
<msg timestamp="20170805 17:04:40.807" level="INFO">${status} = False</msg>
<status status="PASS" endtime="20170805 17:04:40.807" starttime="20170805 17:04:23.006"></status>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${True}'</arg>
</arguments>
<status status="PASS" endtime="20170805 17:04:40.807" starttime="20170805 17:04:40.807"></status>
</kw>
<status status="PASS" endtime="20170805 17:04:40.807" starttime="20170805 17:04:23.006"></status>
</kw>
<kw type="foritem" name="${index} = 3">
<kw name="Retry SCP" library="code_update_utils">
<doc>Delete the incomplete file and scp file.</doc>
<arguments>
<arg>${image_file_path}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>/tmp/flashimg</arg>
</arguments>
<assign>
<var>${targ_file_path}</var>
</assign>
<msg timestamp="20170805 17:04:40.808" level="INFO">${targ_file_path} = /tmp/flashimg</msg>
<status status="PASS" endtime="20170805 17:04:40.808" starttime="20170805 17:04:40.808"></status>
</kw>
<kw name="Execute Command On BMC" library="utils">
<doc>Execute given command on BMC and return output.</doc>
<arguments>
<arg>rm -f /tmp/flashimg</arg>
</arguments>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${command}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170805 17:04:40.809" level="INFO">Executing command 'rm -f /tmp/flashimg'.</msg>
<msg timestamp="20170805 17:04:40.904" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170805 17:04:40.904" level="INFO">${stdout} = </msg>
<msg timestamp="20170805 17:04:40.904" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170805 17:04:40.904" starttime="20170805 17:04:40.809"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20170805 17:04:40.905" level="INFO">Length is 0</msg>
<status status="PASS" endtime="20170805 17:04:40.905" starttime="20170805 17:04:40.905"></status>
</kw>
<status status="PASS" endtime="20170805 17:04:40.905" starttime="20170805 17:04:40.809"></status>
</kw>
<kw name="Put File" library="scp">
<doc>Uploads a file to the remote machine from the local machine.</doc>
<arguments>
<arg>${image_file_path}</arg>
<arg>${targ_file_path}</arg>
</arguments>
<status status="PASS" endtime="20170805 17:04:58.779" starttime="20170805 17:04:40.905"></status>
</kw>
<kw name="Execute Command On BMC" library="utils">
<doc>Execute given command on BMC and return output.</doc>
<arguments>
<arg>ls -lh ${targ_file_path}</arg>
</arguments>
<assign>
<var>${file_size}</var>
</assign>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes `command` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${command}</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
</assign>
<msg timestamp="20170805 17:04:58.781" level="INFO">Executing command 'ls -lh /tmp/flashimg'.</msg>
<msg timestamp="20170805 17:04:58.839" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170805 17:04:58.840" level="INFO">${stdout} = -rw-r--r--    1 root     root       36.4M Aug  5 17:05 /tmp/flashimg</msg>
<msg timestamp="20170805 17:04:58.840" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170805 17:04:58.840" starttime="20170805 17:04:58.780"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20170805 17:04:58.841" level="INFO">Length is 0</msg>
<status status="PASS" endtime="20170805 17:04:58.841" starttime="20170805 17:04:58.840"></status>
</kw>
<msg timestamp="20170805 17:04:58.841" level="INFO">${file_size} = -rw-r--r--    1 root     root       36.4M Aug  5 17:05 /tmp/flashimg</msg>
<status status="PASS" endtime="20170805 17:04:58.841" starttime="20170805 17:04:58.779"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${file_size}</arg>
<arg>32.0M</arg>
<arg>msg=Incomplete file transfer.</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${file_size}</arg>
<arg>32.0M</arg>
<arg>msg=Incomplete file transfer.</arg>
</arguments>
<msg timestamp="20170805 17:04:58.842" level="FAIL">Incomplete file transfer.: '-rw-r--r--    1 root     root       36.4M Aug  5 17:05 /tmp/flashimg' does not contain '32.0M'</msg>
<status status="FAIL" endtime="20170805 17:04:58.842" starttime="20170805 17:04:58.842"></status>
</kw>
<msg timestamp="20170805 17:04:58.842" level="INFO">${status} = False</msg>
<status status="PASS" endtime="20170805 17:04:58.842" starttime="20170805 17:04:58.841"></status>
</kw>
<msg timestamp="20170805 17:04:58.842" level="INFO">${status} = False</msg>
<status status="PASS" endtime="20170805 17:04:58.842" starttime="20170805 17:04:40.808"></status>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${True}'</arg>
</arguments>
<status status="PASS" endtime="20170805 17:04:58.843" starttime="20170805 17:04:58.843"></status>
</kw>
<status status="PASS" endtime="20170805 17:04:58.843" starttime="20170805 17:04:40.807"></status>
</kw>
<status status="PASS" endtime="20170805 17:04:58.843" starttime="20170805 17:03:48.023"></status>
</kw>
<status status="PASS" endtime="20170805 17:04:58.843" starttime="20170805 17:03:48.022"></status>
</kw>
<status status="PASS" endtime="20170805 17:04:58.843" starttime="20170805 17:03:45.591"></status>
</kw>
<status status="PASS" endtime="20170805 17:04:58.844" starttime="20170805 17:03:45.584"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>Activate BMC Flash Image</arg>
</arguments>
<kw name="Activate BMC flash image" library="code_update_utils">
<doc>Activate and verify the update status</doc>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>/tmp/flashimg</arg>
</arguments>
<assign>
<var>@{img_path}</var>
</assign>
<msg timestamp="20170805 17:04:58.859" level="INFO">@{img_path} = [ /tmp/flashimg ]</msg>
<status status="PASS" endtime="20170805 17:04:58.859" starttime="20170805 17:04:58.859"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{img_path}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170805 17:04:58.860" level="INFO">${data} = {u'data': [u'/tmp/flashimg']}</msg>
<status status="PASS" endtime="20170805 17:04:58.860" starttime="20170805 17:04:58.859"></status>
</kw>
<kw name="OpenBMC Post Request" library="rest_client">
<arguments>
<arg>${BMC_UPD_METHOD}</arg>
<arg>data=${data}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170805 17:04:58.863" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170805 17:04:58.864" starttime="20170805 17:04:58.862"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170805 17:04:58.864" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170805 17:04:58.864" starttime="20170805 17:04:58.864"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170805 17:04:58.865" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170805 17:04:58.865" starttime="20170805 17:04:58.865"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170805 17:04:58.866" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170805 17:04:58.866" starttime="20170805 17:04:58.865"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170805 17:04:59.072" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170805 17:04:59.072" starttime="20170805 17:04:58.867"></status>
</kw>
<msg timestamp="20170805 17:04:59.072" level="INFO">${status} = PASS</msg>
<msg timestamp="20170805 17:04:59.072" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170805 17:04:59.072" starttime="20170805 17:04:58.866"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170805 17:04:59.073" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170805 17:04:59.074" starttime="20170805 17:04:59.073"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170805 17:04:59.075" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170805 17:04:59.075" starttime="20170805 17:04:59.074"></status>
</kw>
<status status="PASS" endtime="20170805 17:04:59.075" starttime="20170805 17:04:58.862"></status>
</kw>
<status status="PASS" endtime="20170805 17:04:59.075" starttime="20170805 17:04:58.861"></status>
</kw>
<status status="PASS" endtime="20170805 17:04:59.075" starttime="20170805 17:04:58.861"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170805 17:04:59.076" level="INFO">${base_uri} = /org/openbmc/control/flash/bmc/action/update</msg>
<status status="PASS" endtime="20170805 17:04:59.076" starttime="20170805 17:04:59.076"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170805 17:04:59.077" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170805 17:04:59.077" starttime="20170805 17:04:59.077"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${kwargs}</arg>
<arg>headers</arg>
<arg>${headers}</arg>
</arguments>
<status status="PASS" endtime="20170805 17:04:59.078" starttime="20170805 17:04:59.078"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Post</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170805 17:04:59.079" starttime="20170805 17:04:59.079"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170805 17:05:02.894" level="INFO">Post Request using : alias=openbmc, uri=/org/openbmc/control/flash/bmc/action/update, data={"data": ["/tmp/flashimg"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<msg timestamp="20170805 17:05:02.894" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170805 17:05:02.895" starttime="20170805 17:04:59.080"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170805 17:05:02.895" starttime="20170805 17:05:02.895"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170805 17:05:02.896" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170805 17:05:02.896" starttime="20170805 17:05:02.896"></status>
</kw>
<msg timestamp="20170805 17:05:02.896" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170805 17:05:02.896" starttime="20170805 17:04:58.860"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170805 17:05:02.897" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170805 17:05:02.897" starttime="20170805 17:05:02.897"></status>
</kw>
<kw name="Read Properties" library="rest_client">
<arguments>
<arg>${BMC_UPD_ATTR}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170805 17:05:02.900" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170805 17:05:02.901" starttime="20170805 17:05:02.900"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170805 17:05:02.901" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170805 17:05:02.901" starttime="20170805 17:05:02.901"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170805 17:05:02.902" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170805 17:05:02.902" starttime="20170805 17:05:02.902"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170805 17:05:02.903" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170805 17:05:02.903" starttime="20170805 17:05:02.902"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170805 17:05:03.185" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170805 17:05:03.185" starttime="20170805 17:05:02.903"></status>
</kw>
<msg timestamp="20170805 17:05:03.185" level="INFO">${status} = PASS</msg>
<msg timestamp="20170805 17:05:03.185" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170805 17:05:03.185" starttime="20170805 17:05:02.903"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170805 17:05:03.186" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170805 17:05:03.186" starttime="20170805 17:05:03.186"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170805 17:05:03.187" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170805 17:05:03.187" starttime="20170805 17:05:03.186"></status>
</kw>
<status status="PASS" endtime="20170805 17:05:03.187" starttime="20170805 17:05:02.899"></status>
</kw>
<status status="PASS" endtime="20170805 17:05:03.187" starttime="20170805 17:05:02.899"></status>
</kw>
<status status="PASS" endtime="20170805 17:05:03.187" starttime="20170805 17:05:02.898"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170805 17:05:03.188" level="INFO">${base_uri} = /org/openbmc/control/flash/bmc</msg>
<status status="PASS" endtime="20170805 17:05:03.188" starttime="20170805 17:05:03.187"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170805 17:05:03.188" starttime="20170805 17:05:03.188"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170805 17:05:03.283" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/control/flash/bmc, headers=None json=None</msg>
<msg timestamp="20170805 17:05:03.283" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170805 17:05:03.284" starttime="20170805 17:05:03.189"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170805 17:05:03.284" starttime="20170805 17:05:03.284"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170805 17:05:03.285" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170805 17:05:03.285" starttime="20170805 17:05:03.285"></status>
</kw>
<msg timestamp="20170805 17:05:03.285" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170805 17:05:03.285" starttime="20170805 17:05:02.898"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170805 17:05:03.286" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170805 17:05:03.286" starttime="20170805 17:05:03.285"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170805 17:05:03.287" level="INFO">To JSON using : content={
  "data": {
    "auto_apply": 0, 
    "clear_persistent_files": 0, 
    "filename": "/tmp/flashimg", 
    "preserve_network_settings": 1, 
    "restore_application_defaults": 0, 
    "status": "Verify error: update: --no-flash --ignore-mount --no-save-files --no-restore-files --no-clean-saved-files\nERROR: Image image-bmc too big for mtd0.\n", 
    "update_kernel_and_apps": 0
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170805 17:05:03.287" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170805 17:05:03.287" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': {u'status': u'Verify error: update: --no-flash --ignore-mount --no-save-files --no-restore-files --no-clean-saved-files\nERROR: Image image-bmc too b...</msg>
<status status="PASS" endtime="20170805 17:05:03.287" starttime="20170805 17:05:03.286"></status>
</kw>
<msg timestamp="20170805 17:05:03.288" level="INFO">${data} = {u'status': u'Verify error: update: --no-flash --ignore-mount --no-save-files --no-restore-files --no-clean-saved-files\nERROR: Image image-bmc too big for mtd0.\n', u'update_kernel_and_apps': 0, u'cl...</msg>
<status status="PASS" endtime="20170805 17:05:03.288" starttime="20170805 17:05:02.897"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${data["filename"]}</arg>
<arg>/tmp/flashimg</arg>
</arguments>
<status status="PASS" endtime="20170805 17:05:03.289" starttime="20170805 17:05:03.288"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${data['status']}</arg>
<arg>to apply</arg>
</arguments>
<msg timestamp="20170805 17:05:03.290" level="FAIL">'Verify error: update: --no-flash --ignore-mount --no-save-files --no-restore-files --no-clean-saved-files
ERROR: Image image-bmc too big for mtd0.
' does not contain 'to apply'</msg>
<status status="FAIL" endtime="20170805 17:05:03.290" starttime="20170805 17:05:03.289"></status>
</kw>
<status status="FAIL" endtime="20170805 17:05:03.290" starttime="20170805 17:04:58.858"></status>
</kw>
<msg timestamp="20170805 17:05:03.291" level="FAIL">'Verify error: update: --no-flash --ignore-mount --no-save-files --no-restore-files --no-clean-saved-files
ERROR: Image image-bmc too big for mtd0.
' does not contain 'to apply'</msg>
<status status="FAIL" endtime="20170805 17:05:03.292" starttime="20170805 17:04:58.844"></status>
</kw>
<kw type="teardown" name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>FFDC On Test Case Fail</arg>
</arguments>
<kw name="FFDC On Test Case Fail" library="openbmc_ffdc">
<doc>Generic FFDC entry point. Place holder to hook in</doc>
<kw name="Is Host Quiesced" library="state_manager">
<doc>Check if host state is quiesced.</doc>
<assign>
<var>${status}</var>
</assign>
<kw name="Get Host State" library="state_manager">
<doc>Return the state of the host as a string.</doc>
<assign>
<var>${host_state}</var>
</assign>
<kw name="Read Attribute" library="rest_client">
<arguments>
<arg>${HOST_STATE_URI}</arg>
<arg>CurrentHostState</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${state}</var>
</assign>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${uri}/attr/${attr}</arg>
<arg>timeout=${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170805 17:05:03.303" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170805 17:05:03.303" starttime="20170805 17:05:03.303"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170805 17:05:03.304" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170805 17:05:03.304" starttime="20170805 17:05:03.304"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170805 17:05:03.305" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170805 17:05:03.305" starttime="20170805 17:05:03.304"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170805 17:05:03.306" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170805 17:05:03.306" starttime="20170805 17:05:03.305"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170805 17:05:03.485" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170805 17:05:03.485" starttime="20170805 17:05:03.306"></status>
</kw>
<msg timestamp="20170805 17:05:03.485" level="INFO">${status} = PASS</msg>
<msg timestamp="20170805 17:05:03.485" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170805 17:05:03.485" starttime="20170805 17:05:03.306"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170805 17:05:03.486" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170805 17:05:03.486" starttime="20170805 17:05:03.486"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170805 17:05:03.487" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170805 17:05:03.487" starttime="20170805 17:05:03.487"></status>
</kw>
<status status="PASS" endtime="20170805 17:05:03.487" starttime="20170805 17:05:03.302"></status>
</kw>
<status status="PASS" endtime="20170805 17:05:03.487" starttime="20170805 17:05:03.302"></status>
</kw>
<status status="PASS" endtime="20170805 17:05:03.487" starttime="20170805 17:05:03.301"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170805 17:05:03.488" level="INFO">${base_uri} = /xyz/openbmc_project/state/host0//attr/CurrentHostState</msg>
<status status="PASS" endtime="20170805 17:05:03.488" starttime="20170805 17:05:03.488"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170805 17:05:03.489" starttime="20170805 17:05:03.488"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170805 17:05:03.552" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/state/host0//attr/CurrentHostState, headers=None json=None</msg>
<msg timestamp="20170805 17:05:03.552" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170805 17:05:03.552" starttime="20170805 17:05:03.489"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170805 17:05:03.553" starttime="20170805 17:05:03.553"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170805 17:05:03.554" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170805 17:05:03.554" starttime="20170805 17:05:03.553"></status>
</kw>
<msg timestamp="20170805 17:05:03.554" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170805 17:05:03.554" starttime="20170805 17:05:03.300"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170805 17:05:03.555" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170805 17:05:03.555" starttime="20170805 17:05:03.554"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
</arguments>
<assign>
<var>${content}</var>
</assign>
<msg timestamp="20170805 17:05:03.555" level="INFO">To JSON using : content={
  "data": "xyz.openbmc_project.State.Host.HostState.Off", 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170805 17:05:03.555" level="INFO">To JSON using : pretty_print=False </msg>
<msg timestamp="20170805 17:05:03.555" level="INFO">${content} = {u'status': u'ok', u'message': u'200 OK', u'data': u'xyz.openbmc_project.State.Host.HostState.Off'}</msg>
<status status="PASS" endtime="20170805 17:05:03.555" starttime="20170805 17:05:03.555"></status>
</kw>
<msg timestamp="20170805 17:05:03.556" level="INFO">${state} = xyz.openbmc_project.State.Host.HostState.Off</msg>
<status status="PASS" endtime="20170805 17:05:03.556" starttime="20170805 17:05:03.300"></status>
</kw>
<msg timestamp="20170805 17:05:03.556" level="INFO">${host_state} = Off</msg>
<status status="PASS" endtime="20170805 17:05:03.556" starttime="20170805 17:05:03.299"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal</arg>
<arg>${host_state}</arg>
<arg>Quiesced</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${host_state}</arg>
<arg>Quiesced</arg>
</arguments>
<msg timestamp="20170805 17:05:03.557" level="FAIL">Off != Quiesced</msg>
<status status="FAIL" endtime="20170805 17:05:03.557" starttime="20170805 17:05:03.557"></status>
</kw>
<msg timestamp="20170805 17:05:03.557" level="INFO">${status} = False</msg>
<status status="PASS" endtime="20170805 17:05:03.557" starttime="20170805 17:05:03.556"></status>
</kw>
<msg timestamp="20170805 17:05:03.558" level="INFO">${status} = False</msg>
<status status="PASS" endtime="20170805 17:05:03.558" starttime="20170805 17:05:03.299"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${TEST_STATUS}' == 'FAIL' or '${status}'=='True'</arg>
<arg>FFDC</arg>
</arguments>
<kw name="Ffdc" library="openbmc_ffdc">
<doc>Gather First Failure Data Capture (FFDC).</doc>
<kw name="Ping Host" library="utils">
<arguments>
<arg>9.3.86.161</arg>
</arguments>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${host}</arg>
<arg>msg=No host provided</arg>
</arguments>
<msg timestamp="20170805 17:05:03.569" level="INFO">Length is 10</msg>
<status status="PASS" endtime="20170805 17:05:03.569" starttime="20170805 17:05:03.569"></status>
</kw>
<kw name="Run And Return Rc And Output" library="OperatingSystem">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>ping -c 4 ${host}</arg>
</arguments>
<assign>
<var>${RC}</var>
<var>${output}</var>
</assign>
<msg timestamp="20170805 17:05:03.573" level="INFO">Running command 'ping -c 4 9.3.86.161 2&gt;&amp;1'.</msg>
<msg timestamp="20170805 17:05:06.574" level="INFO">${RC} = 0</msg>
<msg timestamp="20170805 17:05:06.575" level="INFO">${output} = PING 9.3.86.161 (9.3.86.161) 56(84) bytes of data.
64 bytes from 9.3.86.161: icmp_seq=1 ttl=62 time=0.692 ms
64 bytes from 9.3.86.161: icmp_seq=2 ttl=62 time=0.625 ms
64 bytes from 9.3.86.161: icmp_se...</msg>
<status status="PASS" endtime="20170805 17:05:06.575" starttime="20170805 17:05:03.569"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>RC: ${RC}\nOutput:\n${output}</arg>
</arguments>
<msg timestamp="20170805 17:05:06.579" level="INFO">RC: 0
Output:
PING 9.3.86.161 (9.3.86.161) 56(84) bytes of data.
64 bytes from 9.3.86.161: icmp_seq=1 ttl=62 time=0.692 ms
64 bytes from 9.3.86.161: icmp_seq=2 ttl=62 time=0.625 ms
64 bytes from 9.3.86.161: icmp_seq=3 ttl=62 time=0.575 ms
64 bytes from 9.3.86.161: icmp_seq=4 ttl=62 time=0.552 ms

--- 9.3.86.161 ping statistics ---
4 packets transmitted, 4 received, 0% packet loss, time 2997ms
rtt min/avg/max/mdev = 0.552/0.611/0.692/0.053 ms</msg>
<status status="PASS" endtime="20170805 17:05:06.579" starttime="20170805 17:05:06.578"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${RC}</arg>
<arg>${0}</arg>
</arguments>
<status status="PASS" endtime="20170805 17:05:06.579" starttime="20170805 17:05:06.579"></status>
</kw>
<status status="PASS" endtime="20170805 17:05:06.580" starttime="20170805 17:05:03.568"></status>
</kw>
<kw name="Get Current Time Stamp" library="openbmc_ffdc_utils">
<doc>Get the current time stamp data</doc>
<kw name="Get Current Date" library="DateTime">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20170805 17:05:06.600" level="INFO">${cur_time} = 2017-08-05 17:05:06:599770</msg>
<status status="PASS" endtime="20170805 17:05:06.600" starttime="20170805 17:05:06.600"></status>
</kw>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20170805 17:05:06.601" level="INFO">${cur_time} = 20170805170506599770</msg>
<status status="PASS" endtime="20170805 17:05:06.601" starttime="20170805 17:05:06.601"></status>
</kw>
<status status="PASS" endtime="20170805 17:05:06.601" starttime="20170805 17:05:06.599"></status>
</kw>
<msg timestamp="20170805 17:05:06.607" level="INFO">${FFDC_TIME} = 20170805170506599770</msg>
<kw name="Get Test Dir and Name" library="openbmc_ffdc_utils">
<doc>SUITE_NAME and TEST_NAME are automatic variables</doc>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${SUITE_NAME}</arg>
</arguments>
<assign>
<var>${suite_name}</var>
</assign>
<msg timestamp="20170805 17:05:06.608" level="INFO">${suite_name} = UpdateBmc</msg>
<status status="PASS" endtime="20170805 17:05:06.608" starttime="20170805 17:05:06.608"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${FFDC_TIME}_</arg>
<arg>${suite_name}</arg>
</arguments>
<assign>
<var>${suite_name}</var>
</assign>
<msg timestamp="20170805 17:05:06.609" level="INFO">${suite_name} = 20170805170506599770_UpdateBmc</msg>
<status status="PASS" endtime="20170805 17:05:06.609" starttime="20170805 17:05:06.609"></status>
</kw>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${TEST_NAME}</arg>
</arguments>
<assign>
<var>${test_name}</var>
</assign>
<msg timestamp="20170805 17:05:06.610" level="INFO">${test_name} = InitiateCodeUpdateBMC</msg>
<status status="PASS" endtime="20170805 17:05:06.610" starttime="20170805 17:05:06.609"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${FFDC_TIME}_</arg>
<arg>${test_name}</arg>
</arguments>
<assign>
<var>${test_name}</var>
</assign>
<msg timestamp="20170805 17:05:06.610" level="INFO">${test_name} = 20170805170506599770_InitiateCodeUpdateBMC</msg>
<status status="PASS" endtime="20170805 17:05:06.610" starttime="20170805 17:05:06.610"></status>
</kw>
<status status="PASS" endtime="20170805 17:05:06.610" starttime="20170805 17:05:06.607"></status>
</kw>
<msg timestamp="20170805 17:05:06.619" level="INFO">${FFDC_DIR_PATH} = /home/fspcibld/logs/20170805170506599770_UpdateBmc/20170805170506599770_InitiateCodeUpdateBMC/</msg>
<msg timestamp="20170805 17:05:06.626" level="INFO">${FFDC_PREFIX} = 20170805170506599770_</msg>
<msg timestamp="20170805 17:05:06.646" level="INFO">${LOG_PREFIX} = /home/fspcibld/logs/20170805170506599770_UpdateBmc/20170805170506599770_InitiateCodeUpdateBMC/20170805170506599770_</msg>
<kw name="Create Directory" library="OperatingSystem">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>/home/fspcibld/logs/20170805170506599770_UpdateBmc/20170805170506599770_InitiateCodeUpdateBMC/</arg>
</arguments>
<msg timestamp="20170805 17:05:06.647" html="yes" level="INFO">Created directory '&lt;a href="file:///home/fspcibld/logs/20170805170506599770_UpdateBmc/20170805170506599770_InitiateCodeUpdateBMC"&gt;/home/fspcibld/logs/20170805170506599770_UpdateBmc/20170805170506599770_InitiateCodeUpdateBMC&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170805 17:05:06.647" starttime="20170805 17:05:06.647"></status>
</kw>
<msg timestamp="20170805 17:05:06.654" level="INFO">${FFDC_FILE_PATH} = /home/fspcibld/logs/20170805170506599770_UpdateBmc/20170805170506599770_InitiateCodeUpdateBMC/20170805170506599770_BMC_general.txt</msg>
<kw name="Header Message" library="openbmc_ffdc_utils">
<doc>Write header message to the report document manifest.</doc>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${HEADER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170805 17:05:06.664" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170805170506599770_UpdateBmc/20170805170506599770_InitiateCodeUpdateBMC/20170805170506599770_BMC_general.txt"&gt;/home/fspcibld/logs/20170805170506599770_UpdateBmc/20170805170506599770_InitiateCodeUpdateBMC/20170805170506599770_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170805 17:05:06.664" starttime="20170805 17:05:06.664"></status>
</kw>
<status status="PASS" endtime="20170805 17:05:06.665" starttime="20170805 17:05:06.663"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170805 17:05:06.666" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170805170506599770_UpdateBmc/20170805170506599770_InitiateCodeUpdateBMC/20170805170506599770_BMC_general.txt"&gt;/home/fspcibld/logs/20170805170506599770_UpdateBmc/20170805170506599770_InitiateCodeUpdateBMC/20170805170506599770_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170805 17:05:06.666" starttime="20170805 17:05:06.665"></status>
</kw>
<status status="PASS" endtime="20170805 17:05:06.666" starttime="20170805 17:05:06.665"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Suite File\t\t: ${SUITE_NAME} ${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170805 17:05:06.667" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170805170506599770_UpdateBmc/20170805170506599770_InitiateCodeUpdateBMC/20170805170506599770_BMC_general.txt"&gt;/home/fspcibld/logs/20170805170506599770_UpdateBmc/20170805170506599770_InitiateCodeUpdateBMC/20170805170506599770_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170805 17:05:06.667" starttime="20170805 17:05:06.667"></status>
</kw>
<status status="PASS" endtime="20170805 17:05:06.667" starttime="20170805 17:05:06.666"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Case Name\t\t: ${TEST_NAME}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170805 17:05:06.668" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170805170506599770_UpdateBmc/20170805170506599770_InitiateCodeUpdateBMC/20170805170506599770_BMC_general.txt"&gt;/home/fspcibld/logs/20170805170506599770_UpdateBmc/20170805170506599770_InitiateCodeUpdateBMC/20170805170506599770_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170805 17:05:06.669" starttime="20170805 17:05:06.668"></status>
</kw>
<status status="PASS" endtime="20170805 17:05:06.669" starttime="20170805 17:05:06.667"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Source File\t: ${SUITE_SOURCE}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170805 17:05:06.670" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170805170506599770_UpdateBmc/20170805170506599770_InitiateCodeUpdateBMC/20170805170506599770_BMC_general.txt"&gt;/home/fspcibld/logs/20170805170506599770_UpdateBmc/20170805170506599770_InitiateCodeUpdateBMC/20170805170506599770_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170805 17:05:06.670" starttime="20170805 17:05:06.670"></status>
</kw>
<status status="PASS" endtime="20170805 17:05:06.670" starttime="20170805 17:05:06.669"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Failure Time Stamp\t: ${FFDC_TIME}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170805 17:05:06.671" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170805170506599770_UpdateBmc/20170805170506599770_InitiateCodeUpdateBMC/20170805170506599770_BMC_general.txt"&gt;/home/fspcibld/logs/20170805170506599770_UpdateBmc/20170805170506599770_InitiateCodeUpdateBMC/20170805170506599770_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170805 17:05:06.672" starttime="20170805 17:05:06.671"></status>
</kw>
<status status="PASS" endtime="20170805 17:05:06.672" starttime="20170805 17:05:06.670"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Error Message\t: ${TEST_MESSAGE}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170805 17:05:06.673" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170805170506599770_UpdateBmc/20170805170506599770_InitiateCodeUpdateBMC/20170805170506599770_BMC_general.txt"&gt;/home/fspcibld/logs/20170805170506599770_UpdateBmc/20170805170506599770_InitiateCodeUpdateBMC/20170805170506599770_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170805 17:05:06.673" starttime="20170805 17:05:06.673"></status>
</kw>
<status status="PASS" endtime="20170805 17:05:06.673" starttime="20170805 17:05:06.672"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Documentation\t:${\n}${TEST_DOCUMENTATION}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170805 17:05:06.674" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170805170506599770_UpdateBmc/20170805170506599770_InitiateCodeUpdateBMC/20170805170506599770_BMC_general.txt"&gt;/home/fspcibld/logs/20170805170506599770_UpdateBmc/20170805170506599770_InitiateCodeUpdateBMC/20170805170506599770_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170805 17:05:06.674" starttime="20170805 17:05:06.674"></status>
</kw>
<status status="PASS" endtime="20170805 17:05:06.675" starttime="20170805 17:05:06.673"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170805 17:05:06.676" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170805170506599770_UpdateBmc/20170805170506599770_InitiateCodeUpdateBMC/20170805170506599770_BMC_general.txt"&gt;/home/fspcibld/logs/20170805170506599770_UpdateBmc/20170805170506599770_InitiateCodeUpdateBMC/20170805170506599770_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170805 17:05:06.676" starttime="20170805 17:05:06.675"></status>
</kw>
<status status="PASS" endtime="20170805 17:05:06.676" starttime="20170805 17:05:06.675"></status>
</kw>
<kw name="Test Setup Info" library="openbmc_ffdc_utils">
<doc>BMC IP, Model and other information</doc>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}-----------------------${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170805 17:05:06.677" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170805170506599770_UpdateBmc/20170805170506599770_InitiateCodeUpdateBMC/20170805170506599770_BMC_general.txt"&gt;/home/fspcibld/logs/20170805170506599770_UpdateBmc/20170805170506599770_InitiateCodeUpdateBMC/20170805170506599770_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170805 17:05:06.678" starttime="20170805 17:05:06.677"></status>
</kw>
<status status="PASS" endtime="20170805 17:05:06.678" starttime="20170805 17:05:06.676"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Test Setup Information:</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170805 17:05:06.679" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170805170506599770_UpdateBmc/20170805170506599770_InitiateCodeUpdateBMC/20170805170506599770_BMC_general.txt"&gt;/home/fspcibld/logs/20170805170506599770_UpdateBmc/20170805170506599770_InitiateCodeUpdateBMC/20170805170506599770_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170805 17:05:06.679" starttime="20170805 17:05:06.678"></status>
</kw>
<status status="PASS" endtime="20170805 17:05:06.679" starttime="20170805 17:05:06.678"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}-----------------------${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170805 17:05:06.680" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170805170506599770_UpdateBmc/20170805170506599770_InitiateCodeUpdateBMC/20170805170506599770_BMC_general.txt"&gt;/home/fspcibld/logs/20170805170506599770_UpdateBmc/20170805170506599770_InitiateCodeUpdateBMC/20170805170506599770_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170805 17:05:06.680" starttime="20170805 17:05:06.680"></status>
</kw>
<status status="PASS" endtime="20170805 17:05:06.680" starttime="20170805 17:05:06.679"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>OPENBMC HOST \t: ${OPENBMC_HOST}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170805 17:05:06.681" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170805170506599770_UpdateBmc/20170805170506599770_InitiateCodeUpdateBMC/20170805170506599770_BMC_general.txt"&gt;/home/fspcibld/logs/20170805170506599770_UpdateBmc/20170805170506599770_InitiateCodeUpdateBMC/20170805170506599770_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170805 17:05:06.682" starttime="20170805 17:05:06.681"></status>
</kw>
<status status="PASS" endtime="20170805 17:05:06.682" starttime="20170805 17:05:06.680"></status>
</kw>
<kw name="Get BMC System Model" library="utils">
<doc>Get the BMC model from the device tree.</doc>
<assign>
<var>${model_name}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>cat ${devicetree_base} | cut -d " " -f 1</arg>
<arg>return_stderr=True</arg>
</arguments>
<assign>
<var>${bmc_model}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20170805 17:05:06.699" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.86.161
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170805 17:05:06.699" level="INFO">Logging into '9.3.86.161:22' as 'root'.</msg>
<msg timestamp="20170805 17:05:07.418" level="INFO">Read output: root@witherspoon:~#</msg>
<msg timestamp="20170805 17:05:07.419" level="INFO">Executing command 'cat /sys/firmware/devicetree/base/model | cut -d " " -f 1'.</msg>
<msg timestamp="20170805 17:05:07.495" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20170805 17:05:07.504" level="INFO">${bmc_model} = Witherspoon</msg>
<msg timestamp="20170805 17:05:07.504" level="INFO">${stderr} = </msg>
<msg timestamp="20170805 17:05:07.504" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20170805 17:05:07.504" starttime="20170805 17:05:06.682"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20170805 17:05:07.505" level="INFO">Length is 0</msg>
<status status="PASS" endtime="20170805 17:05:07.505" starttime="20170805 17:05:07.505"></status>
</kw>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${bmc_model}</arg>
</arguments>
<msg timestamp="20170805 17:05:07.506" level="INFO">Length is 11</msg>
<status status="PASS" endtime="20170805 17:05:07.506" starttime="20170805 17:05:07.505"></status>
</kw>
<msg timestamp="20170805 17:05:07.506" level="INFO">${model_name} = Witherspoon</msg>
<status status="PASS" endtime="20170805 17:05:07.506" starttime="20170805 17:05:06.682"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>SYSTEM TYPE \t: ${model_name}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170805 17:05:07.507" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170805170506599770_UpdateBmc/20170805170506599770_InitiateCodeUpdateBMC/20170805170506599770_BMC_general.txt"&gt;/home/fspcibld/logs/20170805170506599770_UpdateBmc/20170805170506599770_InitiateCodeUpdateBMC/20170805170506599770_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170805 17:05:07.507" starttime="20170805 17:05:07.507"></status>
</kw>
<status status="PASS" endtime="20170805 17:05:07.507" starttime="20170805 17:05:07.506"></status>
</kw>
<status status="PASS" endtime="20170805 17:05:07.508" starttime="20170805 17:05:06.676"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${MSG_INTRO}${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170805 17:05:07.509" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170805170506599770_UpdateBmc/20170805170506599770_InitiateCodeUpdateBMC/20170805170506599770_BMC_general.txt"&gt;/home/fspcibld/logs/20170805170506599770_UpdateBmc/20170805170506599770_InitiateCodeUpdateBMC/20170805170506599770_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170805 17:05:07.509" starttime="20170805 17:05:07.508"></status>
</kw>
<status status="PASS" endtime="20170805 17:05:07.509" starttime="20170805 17:05:07.508"></status>
</kw>
<kw name="Get Ffdc Cmd Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg timestamp="20170805 17:05:07.509" level="INFO">@{entries} = [ APPLICATION DATA | DRIVER INFO | BMC DATA ]</msg>
<status status="PASS" endtime="20170805 17:05:07.510" starttime="20170805 17:05:07.509"></status>
</kw>
<kw type="for" name="${index} IN [ @{entries} ]">
<kw type="foritem" name="${index} = APPLICATION DATA">
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>* ${index.upper()}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170805 17:05:07.511" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170805170506599770_UpdateBmc/20170805170506599770_InitiateCodeUpdateBMC/20170805170506599770_BMC_general.txt"&gt;/home/fspcibld/logs/20170805170506599770_UpdateBmc/20170805170506599770_InitiateCodeUpdateBMC/20170805170506599770_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170805 17:05:07.511" starttime="20170805 17:05:07.511"></status>
</kw>
<status status="PASS" endtime="20170805 17:05:07.511" starttime="20170805 17:05:07.510"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170805 17:05:07.513" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170805170506599770_UpdateBmc/20170805170506599770_InitiateCodeUpdateBMC/20170805170506599770_BMC_general.txt"&gt;/home/fspcibld/logs/20170805170506599770_UpdateBmc/20170805170506599770_InitiateCodeUpdateBMC/20170805170506599770_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170805 17:05:07.513" starttime="20170805 17:05:07.512"></status>
</kw>
<status status="PASS" endtime="20170805 17:05:07.513" starttime="20170805 17:05:07.512"></status>
</kw>
<status status="PASS" endtime="20170805 17:05:07.513" starttime="20170805 17:05:07.510"></status>
</kw>
<kw type="foritem" name="${index} = DRIVER INFO">
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>* ${index.upper()}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170805 17:05:07.514" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170805170506599770_UpdateBmc/20170805170506599770_InitiateCodeUpdateBMC/20170805170506599770_BMC_general.txt"&gt;/home/fspcibld/logs/20170805170506599770_UpdateBmc/20170805170506599770_InitiateCodeUpdateBMC/20170805170506599770_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170805 17:05:07.514" starttime="20170805 17:05:07.514"></status>
</kw>
<status status="PASS" endtime="20170805 17:05:07.514" starttime="20170805 17:05:07.513"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170805 17:05:07.516" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170805170506599770_UpdateBmc/20170805170506599770_InitiateCodeUpdateBMC/20170805170506599770_BMC_general.txt"&gt;/home/fspcibld/logs/20170805170506599770_UpdateBmc/20170805170506599770_InitiateCodeUpdateBMC/20170805170506599770_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170805 17:05:07.516" starttime="20170805 17:05:07.515"></status>
</kw>
<status status="PASS" endtime="20170805 17:05:07.516" starttime="20170805 17:05:07.515"></status>
</kw>
<status status="PASS" endtime="20170805 17:05:07.516" starttime="20170805 17:05:07.513"></status>
</kw>
<kw type="foritem" name="${index} = BMC DATA">
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>* ${index.upper()}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170805 17:05:07.517" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170805170506599770_UpdateBmc/20170805170506599770_InitiateCodeUpdateBMC/20170805170506599770_BMC_general.txt"&gt;/home/fspcibld/logs/20170805170506599770_UpdateBmc/20170805170506599770_InitiateCodeUpdateBMC/20170805170506599770_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170805 17:05:07.517" starttime="20170805 17:05:07.517"></status>
</kw>
<status status="PASS" endtime="20170805 17:05:07.518" starttime="20170805 17:05:07.516"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170805 17:05:07.519" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170805170506599770_UpdateBmc/20170805170506599770_InitiateCodeUpdateBMC/20170805170506599770_BMC_general.txt"&gt;/home/fspcibld/logs/20170805170506599770_UpdateBmc/20170805170506599770_InitiateCodeUpdateBMC/20170805170506599770_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170805 17:05:07.519" starttime="20170805 17:05:07.519"></status>
</kw>
<status status="PASS" endtime="20170805 17:05:07.519" starttime="20170805 17:05:07.518"></status>
</kw>
<status status="PASS" endtime="20170805 17:05:07.519" starttime="20170805 17:05:07.516"></status>
</kw>
<status status="PASS" endtime="20170805 17:05:07.519" starttime="20170805 17:05:07.510"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${MSG_DETAIL}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170805 17:05:07.520" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170805170506599770_UpdateBmc/20170805170506599770_InitiateCodeUpdateBMC/20170805170506599770_BMC_general.txt"&gt;/home/fspcibld/logs/20170805170506599770_UpdateBmc/20170805170506599770_InitiateCodeUpdateBMC/20170805170506599770_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170805 17:05:07.520" starttime="20170805 17:05:07.520"></status>
</kw>
<status status="PASS" endtime="20170805 17:05:07.521" starttime="20170805 17:05:07.519"></status>
</kw>
<status status="PASS" endtime="20170805 17:05:07.521" starttime="20170805 17:05:06.663"></status>
</kw>
<kw name="Call FFDC Methods" library="openbmc_ffdc_methods">
<doc>Call into FFDC Keyword index list.</doc>
<arguments>
<arg>ffdc_function_list=</arg>
</arguments>
<kw name="Get Ffdc Method Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg timestamp="20170805 17:05:07.527" level="INFO">@{entries} = [ BMC LOGS ]</msg>
<status status="PASS" endtime="20170805 17:05:07.527" starttime="20170805 17:05:07.526"></status>
</kw>
<kw type="for" name="${index} IN [ @{entries} ]">
<kw type="foritem" name="${index} = BMC LOGS">
<kw name="Method Call Keyword List" library="openbmc_ffdc_methods">
<doc>Iterate the list through keyword index.</doc>
<arguments>
<arg>${index}</arg>
<arg>${ffdc_function_list}</arg>
</arguments>
<kw name="Get Ffdc Method Call" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<assign>
<var>@{method_list}</var>
</assign>
<msg timestamp="20170805 17:05:07.529" level="INFO">@{method_list} = [ ('FFDC Generic Report', 'BMC FFDC Manifest') | ('Get Request FFDC', 'BMC FFDC Get Requests') | ('Core Files', 'SCP Coredump Files') | ('BMC Specific Files', 'BMC FFDC Files') | ('SEL Log', 'Collect ...</msg>
<status status="PASS" endtime="20170805 17:05:07.529" starttime="20170805 17:05:07.528"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${ffdc_function_list}' == '${EMPTY}'</arg>
<arg>Get FFDC Method Desc</arg>
<arg>${index}</arg>
<arg>ELSE</arg>
<arg>Split String</arg>
<arg>${ffdc_function_list}</arg>
<arg>separator=:</arg>
</arguments>
<assign>
<var>@{ffdc_function_list}</var>
</assign>
<kw name="Get Ffdc Method Desc" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<status status="PASS" endtime="20170805 17:05:07.530" starttime="20170805 17:05:07.530"></status>
</kw>
<msg timestamp="20170805 17:05:07.531" level="INFO">@{ffdc_function_list} = [ FFDC Generic Report | Get Request FFDC | Core Files | BMC Specific Files | SEL Log | OS FFDC ]</msg>
<status status="PASS" endtime="20170805 17:05:07.531" starttime="20170805 17:05:07.529"></status>
</kw>
<kw type="for" name="${method} IN [ @{method_list} ]">
<kw type="foritem" name="${method} = ('FFDC Generic Report', 'BMC FFDC Manifest')">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status status="PASS" endtime="20170805 17:05:07.534" starttime="20170805 17:05:07.533"></status>
</kw>
<msg timestamp="20170805 17:05:07.534" level="INFO">${status} = PASS</msg>
<msg timestamp="20170805 17:05:07.534" level="INFO">${ret_values} = None</msg>
<status status="PASS" endtime="20170805 17:05:07.534" starttime="20170805 17:05:07.533"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status status="PASS" endtime="20170805 17:05:07.535" starttime="20170805 17:05:07.534"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="BMC FFDC Manifest" library="openbmc_ffdc_methods">
<doc>Get the commands index for the FFDC_BMC_CMD,</doc>
<kw name="Get Ffdc Cmd Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg timestamp="20170805 17:05:07.549" level="INFO">@{entries} = [ APPLICATION DATA | DRIVER INFO | BMC DATA ]</msg>
<status status="PASS" endtime="20170805 17:05:07.549" starttime="20170805 17:05:07.549"></status>
</kw>
<kw type="for" name="${index} IN [ @{entries} ]">
<kw type="foritem" name="${index} = APPLICATION DATA">
<kw name="Iterate BMC Command List Pairs" library="openbmc_ffdc_methods">
<doc>Feed in key pair list from dictionary to execute</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Bmc Cmd" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg timestamp="20170805 17:05:07.550" level="INFO">@{cmd_list} = [ ('BMC state', '/usr/sbin/obmcutil state') ]</msg>
<status status="PASS" endtime="20170805 17:05:07.550" starttime="20170805 17:05:07.550"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${ENTRY_INDEX}</arg>
<arg>${key_index}</arg>
</arguments>
<msg timestamp="20170805 17:05:07.557" level="INFO">${ENTRY_INDEX} = APPLICATION DATA</msg>
<status status="PASS" endtime="20170805 17:05:07.557" starttime="20170805 17:05:07.551"></status>
</kw>
<kw type="for" name="${cmd} IN [ @{cmd_list} ]">
<kw type="foritem" name="${cmd} = ('BMC state', '/usr/sbin/obmcutil state')">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170805 17:05:07.562" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170805170506599770_UpdateBmc/20170805170506599770_InitiateCodeUpdateBMC/20170805170506599770_BMC_general.txt"&gt;/home/fspcibld/logs/20170805170506599770_UpdateBmc/20170805170506599770_InitiateCodeUpdateBMC/20170805170506599770_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170805 17:05:07.562" starttime="20170805 17:05:07.561"></status>
</kw>
<status status="PASS" endtime="20170805 17:05:07.562" starttime="20170805 17:05:07.560"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170805 17:05:07.563" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170805170506599770_UpdateBmc/20170805170506599770_InitiateCodeUpdateBMC/20170805170506599770_BMC_general.txt"&gt;/home/fspcibld/logs/20170805170506599770_UpdateBmc/20170805170506599770_InitiateCodeUpdateBMC/20170805170506599770_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170805 17:05:07.563" starttime="20170805 17:05:07.563"></status>
</kw>
<status status="PASS" endtime="20170805 17:05:07.564" starttime="20170805 17:05:07.562"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170805 17:05:07.565" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170805170506599770_UpdateBmc/20170805170506599770_InitiateCodeUpdateBMC/20170805170506599770_BMC_general.txt"&gt;/home/fspcibld/logs/20170805170506599770_UpdateBmc/20170805170506599770_InitiateCodeUpdateBMC/20170805170506599770_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170805 17:05:07.565" starttime="20170805 17:05:07.564"></status>
</kw>
<status status="PASS" endtime="20170805 17:05:07.565" starttime="20170805 17:05:07.564"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170805 17:05:07.566" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170805170506599770_UpdateBmc/20170805170506599770_InitiateCodeUpdateBMC/20170805170506599770_BMC_general.txt"&gt;/home/fspcibld/logs/20170805170506599770_UpdateBmc/20170805170506599770_InitiateCodeUpdateBMC/20170805170506599770_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170805 17:05:07.566" starttime="20170805 17:05:07.566"></status>
</kw>
<status status="PASS" endtime="20170805 17:05:07.566" starttime="20170805 17:05:07.565"></status>
</kw>
<status status="PASS" endtime="20170805 17:05:07.566" starttime="20170805 17:05:07.559"></status>
</kw>
<status status="PASS" endtime="20170805 17:05:07.566" starttime="20170805 17:05:07.559"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170805 17:05:07.567" level="INFO">${cmd_buf} = BMC Execute Command  /usr/sbin/obmcutil state  ignore_err=1</msg>
<status status="PASS" endtime="20170805 17:05:07.567" starttime="20170805 17:05:07.567"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>/usr/sbin/obmcutil state</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170805 17:05:07.609" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.86.161
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170805 17:05:07.610" level="INFO">Executing command '/usr/sbin/obmcutil state'.</msg>
<msg timestamp="20170805 17:05:09.036" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20170805 17:05:09.036" starttime="20170805 17:05:07.585"></status>
</kw>
<msg timestamp="20170805 17:05:09.037" level="INFO">${status} = PASS</msg>
<msg timestamp="20170805 17:05:09.037" level="INFO">${ret_values} = (u'CurrentBMCState:    xyz.openbmc_project.State.BMC.BMCState.Ready\nCurrentPowerState:  xyz.openbmc_project.State.Chassis.PowerState.Off\nCurrentHostState:   xyz.openbmc_project.State.Host.HostState....</msg>
<status status="PASS" endtime="20170805 17:05:09.037" starttime="20170805 17:05:07.567"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170805 17:05:09.037" level="INFO">${stdout} = CurrentBMCState:    xyz.openbmc_project.State.BMC.BMCState.Ready
CurrentPowerState:  xyz.openbmc_project.State.Chassis.PowerState.Off
CurrentHostState:   xyz.openbmc_project.State.Host.HostState.Off</msg>
<status status="PASS" endtime="20170805 17:05:09.037" starttime="20170805 17:05:09.037"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170805 17:05:09.038" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170805 17:05:09.038" starttime="20170805 17:05:09.038"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170805 17:05:09.048" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170805170506599770_UpdateBmc/20170805170506599770_InitiateCodeUpdateBMC/20170805170506599770_BMC_general.txt"&gt;/home/fspcibld/logs/20170805170506599770_UpdateBmc/20170805170506599770_InitiateCodeUpdateBMC/20170805170506599770_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170805 17:05:09.048" starttime="20170805 17:05:09.047"></status>
</kw>
<status status="PASS" endtime="20170805 17:05:09.048" starttime="20170805 17:05:09.046"></status>
</kw>
<status status="PASS" endtime="20170805 17:05:09.048" starttime="20170805 17:05:09.038"></status>
</kw>
<status status="PASS" endtime="20170805 17:05:09.048" starttime="20170805 17:05:07.558"></status>
</kw>
<status status="PASS" endtime="20170805 17:05:09.048" starttime="20170805 17:05:07.557"></status>
</kw>
<status status="PASS" endtime="20170805 17:05:09.048" starttime="20170805 17:05:07.557"></status>
</kw>
<status status="PASS" endtime="20170805 17:05:09.048" starttime="20170805 17:05:07.549"></status>
</kw>
<status status="PASS" endtime="20170805 17:05:09.048" starttime="20170805 17:05:07.549"></status>
</kw>
<kw type="foritem" name="${index} = DRIVER INFO">
<kw name="Iterate BMC Command List Pairs" library="openbmc_ffdc_methods">
<doc>Feed in key pair list from dictionary to execute</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Bmc Cmd" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg timestamp="20170805 17:05:09.049" level="INFO">@{cmd_list} = [ ('FW Level', 'cat /etc/os-release') ]</msg>
<status status="PASS" endtime="20170805 17:05:09.049" starttime="20170805 17:05:09.049"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${ENTRY_INDEX}</arg>
<arg>${key_index}</arg>
</arguments>
<msg timestamp="20170805 17:05:09.050" level="INFO">${ENTRY_INDEX} = DRIVER INFO</msg>
<status status="PASS" endtime="20170805 17:05:09.050" starttime="20170805 17:05:09.050"></status>
</kw>
<kw type="for" name="${cmd} IN [ @{cmd_list} ]">
<kw type="foritem" name="${cmd} = ('FW Level', 'cat /etc/os-release')">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170805 17:05:09.053" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170805170506599770_UpdateBmc/20170805170506599770_InitiateCodeUpdateBMC/20170805170506599770_BMC_general.txt"&gt;/home/fspcibld/logs/20170805170506599770_UpdateBmc/20170805170506599770_InitiateCodeUpdateBMC/20170805170506599770_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170805 17:05:09.054" starttime="20170805 17:05:09.053"></status>
</kw>
<status status="PASS" endtime="20170805 17:05:09.054" starttime="20170805 17:05:09.052"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170805 17:05:09.055" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170805170506599770_UpdateBmc/20170805170506599770_InitiateCodeUpdateBMC/20170805170506599770_BMC_general.txt"&gt;/home/fspcibld/logs/20170805170506599770_UpdateBmc/20170805170506599770_InitiateCodeUpdateBMC/20170805170506599770_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170805 17:05:09.055" starttime="20170805 17:05:09.055"></status>
</kw>
<status status="PASS" endtime="20170805 17:05:09.055" starttime="20170805 17:05:09.054"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170805 17:05:09.056" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170805170506599770_UpdateBmc/20170805170506599770_InitiateCodeUpdateBMC/20170805170506599770_BMC_general.txt"&gt;/home/fspcibld/logs/20170805170506599770_UpdateBmc/20170805170506599770_InitiateCodeUpdateBMC/20170805170506599770_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170805 17:05:09.056" starttime="20170805 17:05:09.056"></status>
</kw>
<status status="PASS" endtime="20170805 17:05:09.056" starttime="20170805 17:05:09.055"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170805 17:05:09.058" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170805170506599770_UpdateBmc/20170805170506599770_InitiateCodeUpdateBMC/20170805170506599770_BMC_general.txt"&gt;/home/fspcibld/logs/20170805170506599770_UpdateBmc/20170805170506599770_InitiateCodeUpdateBMC/20170805170506599770_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170805 17:05:09.058" starttime="20170805 17:05:09.057"></status>
</kw>
<status status="PASS" endtime="20170805 17:05:09.058" starttime="20170805 17:05:09.057"></status>
</kw>
<status status="PASS" endtime="20170805 17:05:09.058" starttime="20170805 17:05:09.052"></status>
</kw>
<status status="PASS" endtime="20170805 17:05:09.058" starttime="20170805 17:05:09.052"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170805 17:05:09.059" level="INFO">${cmd_buf} = BMC Execute Command  cat /etc/os-release  ignore_err=1</msg>
<status status="PASS" endtime="20170805 17:05:09.059" starttime="20170805 17:05:09.058"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>cat /etc/os-release</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170805 17:05:09.100" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.86.161
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170805 17:05:09.101" level="INFO">Executing command 'cat /etc/os-release'.</msg>
<msg timestamp="20170805 17:05:09.147" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20170805 17:05:09.148" starttime="20170805 17:05:09.077"></status>
</kw>
<msg timestamp="20170805 17:05:09.148" level="INFO">${status} = PASS</msg>
<msg timestamp="20170805 17:05:09.148" level="INFO">${ret_values} = (u'ID="openbmc-phosphor"\nNAME="Phosphor OpenBMC (Phosphor OpenBMC Project Reference Distro)"\nVERSION="ibm-v1.99.8"\nVERSION_ID="ibm-v1.99.8-0-r2-0-g57c3f08"\nPRETTY_NAME="Phosphor OpenBMC (Phosphor ...</msg>
<status status="PASS" endtime="20170805 17:05:09.148" starttime="20170805 17:05:09.059"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170805 17:05:09.149" level="INFO">${stdout} = ID="openbmc-phosphor"
NAME="Phosphor OpenBMC (Phosphor OpenBMC Project Reference Distro)"
VERSION="ibm-v1.99.8"
VERSION_ID="ibm-v1.99.8-0-r2-0-g57c3f08"
PRETTY_NAME="Phosphor OpenBMC (Phosphor OpenBMC...</msg>
<status status="PASS" endtime="20170805 17:05:09.149" starttime="20170805 17:05:09.148"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170805 17:05:09.149" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170805 17:05:09.149" starttime="20170805 17:05:09.149"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170805 17:05:09.156" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170805170506599770_UpdateBmc/20170805170506599770_InitiateCodeUpdateBMC/20170805170506599770_BMC_general.txt"&gt;/home/fspcibld/logs/20170805170506599770_UpdateBmc/20170805170506599770_InitiateCodeUpdateBMC/20170805170506599770_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170805 17:05:09.156" starttime="20170805 17:05:09.156"></status>
</kw>
<status status="PASS" endtime="20170805 17:05:09.157" starttime="20170805 17:05:09.155"></status>
</kw>
<status status="PASS" endtime="20170805 17:05:09.157" starttime="20170805 17:05:09.149"></status>
</kw>
<status status="PASS" endtime="20170805 17:05:09.157" starttime="20170805 17:05:09.051"></status>
</kw>
<status status="PASS" endtime="20170805 17:05:09.157" starttime="20170805 17:05:09.050"></status>
</kw>
<status status="PASS" endtime="20170805 17:05:09.157" starttime="20170805 17:05:09.050"></status>
</kw>
<status status="PASS" endtime="20170805 17:05:09.157" starttime="20170805 17:05:09.048"></status>
</kw>
<status status="PASS" endtime="20170805 17:05:09.157" starttime="20170805 17:05:09.048"></status>
</kw>
<kw type="foritem" name="${index} = BMC DATA">
<kw name="Iterate BMC Command List Pairs" library="openbmc_ffdc_methods">
<doc>Feed in key pair list from dictionary to execute</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Bmc Cmd" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg timestamp="20170805 17:05:09.158" level="INFO">@{cmd_list} = [ ('BMC Uptime', 'uptime') | ('BMC File System Disk Space Usage', 'df -hT') | ('BMC OS', 'uname -a') ]</msg>
<status status="PASS" endtime="20170805 17:05:09.158" starttime="20170805 17:05:09.158"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${ENTRY_INDEX}</arg>
<arg>${key_index}</arg>
</arguments>
<msg timestamp="20170805 17:05:09.159" level="INFO">${ENTRY_INDEX} = BMC DATA</msg>
<status status="PASS" endtime="20170805 17:05:09.159" starttime="20170805 17:05:09.158"></status>
</kw>
<kw type="for" name="${cmd} IN [ @{cmd_list} ]">
<kw type="foritem" name="${cmd} = ('BMC Uptime', 'uptime')">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170805 17:05:09.162" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170805170506599770_UpdateBmc/20170805170506599770_InitiateCodeUpdateBMC/20170805170506599770_BMC_general.txt"&gt;/home/fspcibld/logs/20170805170506599770_UpdateBmc/20170805170506599770_InitiateCodeUpdateBMC/20170805170506599770_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170805 17:05:09.162" starttime="20170805 17:05:09.162"></status>
</kw>
<status status="PASS" endtime="20170805 17:05:09.162" starttime="20170805 17:05:09.161"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170805 17:05:09.164" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170805170506599770_UpdateBmc/20170805170506599770_InitiateCodeUpdateBMC/20170805170506599770_BMC_general.txt"&gt;/home/fspcibld/logs/20170805170506599770_UpdateBmc/20170805170506599770_InitiateCodeUpdateBMC/20170805170506599770_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170805 17:05:09.164" starttime="20170805 17:05:09.163"></status>
</kw>
<status status="PASS" endtime="20170805 17:05:09.164" starttime="20170805 17:05:09.162"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170805 17:05:09.166" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170805170506599770_UpdateBmc/20170805170506599770_InitiateCodeUpdateBMC/20170805170506599770_BMC_general.txt"&gt;/home/fspcibld/logs/20170805170506599770_UpdateBmc/20170805170506599770_InitiateCodeUpdateBMC/20170805170506599770_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170805 17:05:09.166" starttime="20170805 17:05:09.165"></status>
</kw>
<status status="PASS" endtime="20170805 17:05:09.166" starttime="20170805 17:05:09.164"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170805 17:05:09.167" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170805170506599770_UpdateBmc/20170805170506599770_InitiateCodeUpdateBMC/20170805170506599770_BMC_general.txt"&gt;/home/fspcibld/logs/20170805170506599770_UpdateBmc/20170805170506599770_InitiateCodeUpdateBMC/20170805170506599770_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170805 17:05:09.167" starttime="20170805 17:05:09.167"></status>
</kw>
<status status="PASS" endtime="20170805 17:05:09.167" starttime="20170805 17:05:09.166"></status>
</kw>
<status status="PASS" endtime="20170805 17:05:09.167" starttime="20170805 17:05:09.161"></status>
</kw>
<status status="PASS" endtime="20170805 17:05:09.167" starttime="20170805 17:05:09.160"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170805 17:05:09.168" level="INFO">${cmd_buf} = BMC Execute Command  uptime  ignore_err=1</msg>
<status status="PASS" endtime="20170805 17:05:09.168" starttime="20170805 17:05:09.168"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>uptime</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170805 17:05:09.210" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.86.161
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170805 17:05:09.210" level="INFO">Executing command 'uptime'.</msg>
<msg timestamp="20170805 17:05:09.277" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20170805 17:05:09.277" starttime="20170805 17:05:09.186"></status>
</kw>
<msg timestamp="20170805 17:05:09.277" level="INFO">${status} = PASS</msg>
<msg timestamp="20170805 17:05:09.277" level="INFO">${ret_values} = (u' 17:05:14 up 3 min,  load average: 2.05, 1.69, 0.73', u'', 0)</msg>
<status status="PASS" endtime="20170805 17:05:09.277" starttime="20170805 17:05:09.169"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170805 17:05:09.278" level="INFO">${stdout} =  17:05:14 up 3 min,  load average: 2.05, 1.69, 0.73</msg>
<status status="PASS" endtime="20170805 17:05:09.278" starttime="20170805 17:05:09.277"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170805 17:05:09.278" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170805 17:05:09.278" starttime="20170805 17:05:09.278"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170805 17:05:09.286" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170805170506599770_UpdateBmc/20170805170506599770_InitiateCodeUpdateBMC/20170805170506599770_BMC_general.txt"&gt;/home/fspcibld/logs/20170805170506599770_UpdateBmc/20170805170506599770_InitiateCodeUpdateBMC/20170805170506599770_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170805 17:05:09.286" starttime="20170805 17:05:09.285"></status>
</kw>
<status status="PASS" endtime="20170805 17:05:09.286" starttime="20170805 17:05:09.284"></status>
</kw>
<status status="PASS" endtime="20170805 17:05:09.286" starttime="20170805 17:05:09.279"></status>
</kw>
<status status="PASS" endtime="20170805 17:05:09.286" starttime="20170805 17:05:09.159"></status>
</kw>
<status status="PASS" endtime="20170805 17:05:09.286" starttime="20170805 17:05:09.159"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC File System Disk Space Usage', 'df -hT')">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170805 17:05:09.289" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170805170506599770_UpdateBmc/20170805170506599770_InitiateCodeUpdateBMC/20170805170506599770_BMC_general.txt"&gt;/home/fspcibld/logs/20170805170506599770_UpdateBmc/20170805170506599770_InitiateCodeUpdateBMC/20170805170506599770_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170805 17:05:09.289" starttime="20170805 17:05:09.289"></status>
</kw>
<status status="PASS" endtime="20170805 17:05:09.289" starttime="20170805 17:05:09.288"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170805 17:05:09.290" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170805170506599770_UpdateBmc/20170805170506599770_InitiateCodeUpdateBMC/20170805170506599770_BMC_general.txt"&gt;/home/fspcibld/logs/20170805170506599770_UpdateBmc/20170805170506599770_InitiateCodeUpdateBMC/20170805170506599770_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170805 17:05:09.291" starttime="20170805 17:05:09.290"></status>
</kw>
<status status="PASS" endtime="20170805 17:05:09.291" starttime="20170805 17:05:09.289"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170805 17:05:09.292" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170805170506599770_UpdateBmc/20170805170506599770_InitiateCodeUpdateBMC/20170805170506599770_BMC_general.txt"&gt;/home/fspcibld/logs/20170805170506599770_UpdateBmc/20170805170506599770_InitiateCodeUpdateBMC/20170805170506599770_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170805 17:05:09.292" starttime="20170805 17:05:09.291"></status>
</kw>
<status status="PASS" endtime="20170805 17:05:09.292" starttime="20170805 17:05:09.291"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170805 17:05:09.293" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170805170506599770_UpdateBmc/20170805170506599770_InitiateCodeUpdateBMC/20170805170506599770_BMC_general.txt"&gt;/home/fspcibld/logs/20170805170506599770_UpdateBmc/20170805170506599770_InitiateCodeUpdateBMC/20170805170506599770_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170805 17:05:09.293" starttime="20170805 17:05:09.293"></status>
</kw>
<status status="PASS" endtime="20170805 17:05:09.293" starttime="20170805 17:05:09.292"></status>
</kw>
<status status="PASS" endtime="20170805 17:05:09.293" starttime="20170805 17:05:09.288"></status>
</kw>
<status status="PASS" endtime="20170805 17:05:09.293" starttime="20170805 17:05:09.287"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170805 17:05:09.294" level="INFO">${cmd_buf} = BMC Execute Command  df -hT  ignore_err=1</msg>
<status status="PASS" endtime="20170805 17:05:09.294" starttime="20170805 17:05:09.294"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>df -hT</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170805 17:05:09.336" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.86.161
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170805 17:05:09.337" level="INFO">Executing command 'df -hT'.</msg>
<msg timestamp="20170805 17:05:09.393" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20170805 17:05:09.393" starttime="20170805 17:05:09.312"></status>
</kw>
<msg timestamp="20170805 17:05:09.393" level="INFO">${status} = PASS</msg>
<msg timestamp="20170805 17:05:09.393" level="INFO">${ret_values} = (u'Filesystem           Type            Size      Used Available Use% Mounted on\ndev                  devtmpfs      210.2M         0    210.2M   0% /dev\ntmpfs                tmpfs         211.1M    ...</msg>
<status status="PASS" endtime="20170805 17:05:09.393" starttime="20170805 17:05:09.295"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170805 17:05:09.394" level="INFO">${stdout} = Filesystem           Type            Size      Used Available Use% Mounted on
dev                  devtmpfs      210.2M         0    210.2M   0% /dev
tmpfs                tmpfs         211.1M     74.0...</msg>
<status status="PASS" endtime="20170805 17:05:09.394" starttime="20170805 17:05:09.394"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170805 17:05:09.395" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170805 17:05:09.395" starttime="20170805 17:05:09.395"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170805 17:05:09.402" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170805170506599770_UpdateBmc/20170805170506599770_InitiateCodeUpdateBMC/20170805170506599770_BMC_general.txt"&gt;/home/fspcibld/logs/20170805170506599770_UpdateBmc/20170805170506599770_InitiateCodeUpdateBMC/20170805170506599770_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170805 17:05:09.402" starttime="20170805 17:05:09.401"></status>
</kw>
<status status="PASS" endtime="20170805 17:05:09.402" starttime="20170805 17:05:09.401"></status>
</kw>
<status status="PASS" endtime="20170805 17:05:09.402" starttime="20170805 17:05:09.395"></status>
</kw>
<status status="PASS" endtime="20170805 17:05:09.402" starttime="20170805 17:05:09.286"></status>
</kw>
<status status="PASS" endtime="20170805 17:05:09.402" starttime="20170805 17:05:09.286"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC OS', 'uname -a')">
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Cmd Output to FFDC File" library="openbmc_ffdc_utils">
<doc>Write cmd output data to the report document</doc>
<arguments>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170805 17:05:09.407" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170805170506599770_UpdateBmc/20170805170506599770_InitiateCodeUpdateBMC/20170805170506599770_BMC_general.txt"&gt;/home/fspcibld/logs/20170805170506599770_UpdateBmc/20170805170506599770_InitiateCodeUpdateBMC/20170805170506599770_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170805 17:05:09.407" starttime="20170805 17:05:09.407"></status>
</kw>
<status status="PASS" endtime="20170805 17:05:09.407" starttime="20170805 17:05:09.406"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${ENTRY_INDEX.upper()} : ${name_str}\t</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170805 17:05:09.409" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170805170506599770_UpdateBmc/20170805170506599770_InitiateCodeUpdateBMC/20170805170506599770_BMC_general.txt"&gt;/home/fspcibld/logs/20170805170506599770_UpdateBmc/20170805170506599770_InitiateCodeUpdateBMC/20170805170506599770_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170805 17:05:09.409" starttime="20170805 17:05:09.408"></status>
</kw>
<status status="PASS" endtime="20170805 17:05:09.409" starttime="20170805 17:05:09.408"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>Executed : ${cmd}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170805 17:05:09.410" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170805170506599770_UpdateBmc/20170805170506599770_InitiateCodeUpdateBMC/20170805170506599770_BMC_general.txt"&gt;/home/fspcibld/logs/20170805170506599770_UpdateBmc/20170805170506599770_InitiateCodeUpdateBMC/20170805170506599770_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170805 17:05:09.410" starttime="20170805 17:05:09.410"></status>
</kw>
<status status="PASS" endtime="20170805 17:05:09.410" starttime="20170805 17:05:09.409"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${FOOTER_MSG}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170805 17:05:09.411" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170805170506599770_UpdateBmc/20170805170506599770_InitiateCodeUpdateBMC/20170805170506599770_BMC_general.txt"&gt;/home/fspcibld/logs/20170805170506599770_UpdateBmc/20170805170506599770_InitiateCodeUpdateBMC/20170805170506599770_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170805 17:05:09.411" starttime="20170805 17:05:09.411"></status>
</kw>
<status status="PASS" endtime="20170805 17:05:09.411" starttime="20170805 17:05:09.410"></status>
</kw>
<status status="PASS" endtime="20170805 17:05:09.412" starttime="20170805 17:05:09.405"></status>
</kw>
<status status="PASS" endtime="20170805 17:05:09.412" starttime="20170805 17:05:09.404"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170805 17:05:09.412" level="INFO">${cmd_buf} = BMC Execute Command  uname -a  ignore_err=1</msg>
<status status="PASS" endtime="20170805 17:05:09.412" starttime="20170805 17:05:09.412"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>uname -a</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170805 17:05:09.454" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.86.161
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170805 17:05:09.454" level="INFO">Executing command 'uname -a'.</msg>
<msg timestamp="20170805 17:05:09.511" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20170805 17:05:09.511" starttime="20170805 17:05:09.431"></status>
</kw>
<msg timestamp="20170805 17:05:09.511" level="INFO">${status} = PASS</msg>
<msg timestamp="20170805 17:05:09.511" level="INFO">${ret_values} = (u'Linux witherspoon 4.10.17-b2cd8101eec3c200940405f12582473617a520f7 #1 Tue Jul 18 16:57:12 CDT 2017 armv6l GNU/Linux', u'', 0)</msg>
<status status="PASS" endtime="20170805 17:05:09.511" starttime="20170805 17:05:09.413"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170805 17:05:09.512" level="INFO">${stdout} = Linux witherspoon 4.10.17-b2cd8101eec3c200940405f12582473617a520f7 #1 Tue Jul 18 16:57:12 CDT 2017 armv6l GNU/Linux</msg>
<status status="PASS" endtime="20170805 17:05:09.512" starttime="20170805 17:05:09.511"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170805 17:05:09.512" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170805 17:05:09.512" starttime="20170805 17:05:09.512"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170805 17:05:09.520" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170805170506599770_UpdateBmc/20170805170506599770_InitiateCodeUpdateBMC/20170805170506599770_BMC_general.txt"&gt;/home/fspcibld/logs/20170805170506599770_UpdateBmc/20170805170506599770_InitiateCodeUpdateBMC/20170805170506599770_BMC_general.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170805 17:05:09.520" starttime="20170805 17:05:09.519"></status>
</kw>
<status status="PASS" endtime="20170805 17:05:09.520" starttime="20170805 17:05:09.518"></status>
</kw>
<status status="PASS" endtime="20170805 17:05:09.520" starttime="20170805 17:05:09.513"></status>
</kw>
<status status="PASS" endtime="20170805 17:05:09.520" starttime="20170805 17:05:09.403"></status>
</kw>
<status status="PASS" endtime="20170805 17:05:09.520" starttime="20170805 17:05:09.403"></status>
</kw>
<status status="PASS" endtime="20170805 17:05:09.520" starttime="20170805 17:05:09.159"></status>
</kw>
<status status="PASS" endtime="20170805 17:05:09.520" starttime="20170805 17:05:09.157"></status>
</kw>
<status status="PASS" endtime="20170805 17:05:09.520" starttime="20170805 17:05:09.157"></status>
</kw>
<status status="PASS" endtime="20170805 17:05:09.520" starttime="20170805 17:05:07.549"></status>
</kw>
<status status="PASS" endtime="20170805 17:05:09.520" starttime="20170805 17:05:07.548"></status>
</kw>
<status status="PASS" endtime="20170805 17:05:09.520" starttime="20170805 17:05:07.535"></status>
</kw>
<status status="PASS" endtime="20170805 17:05:09.521" starttime="20170805 17:05:07.531"></status>
</kw>
<status status="PASS" endtime="20170805 17:05:09.521" starttime="20170805 17:05:07.531"></status>
</kw>
<kw type="foritem" name="${method} = ('Get Request FFDC', 'BMC FFDC Get Requests')">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status status="PASS" endtime="20170805 17:05:09.522" starttime="20170805 17:05:09.522"></status>
</kw>
<msg timestamp="20170805 17:05:09.523" level="INFO">${status} = PASS</msg>
<msg timestamp="20170805 17:05:09.523" level="INFO">${ret_values} = None</msg>
<status status="PASS" endtime="20170805 17:05:09.523" starttime="20170805 17:05:09.522"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status status="PASS" endtime="20170805 17:05:09.523" starttime="20170805 17:05:09.523"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="BMC FFDC Get Requests" library="openbmc_ffdc_methods">
<doc>Get the command list and iterate</doc>
<kw name="Get Ffdc Get Request Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg timestamp="20170805 17:05:09.538" level="INFO">@{entries} = [ GET REQUESTS ]</msg>
<status status="PASS" endtime="20170805 17:05:09.538" starttime="20170805 17:05:09.538"></status>
</kw>
<kw type="for" name="${index} IN [ @{entries} ]">
<kw type="foritem" name="${index} = GET REQUESTS">
<kw name="Log FFDC Get Requests" library="openbmc_ffdc_methods">
<doc>Create file in current FFDC log directory.</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Get Request" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg timestamp="20170805 17:05:09.540" level="INFO">@{cmd_list} = [ ('BMC_elog', '/xyz/openbmc_project/logging/entry/enumerate') | ('BMC_sensor_list', '/org/openbmc/sensors/enumerate') | ('BMC_inventory', '/xyz/openbmc_project/inventory/enumerate') | ('BMC_led', '/o...</msg>
<status status="PASS" endtime="20170805 17:05:09.540" starttime="20170805 17:05:09.540"></status>
</kw>
<kw type="for" name="${cmd} IN [ @{cmd_list} ]">
<kw type="foritem" name="${cmd} = ('BMC_elog', '/xyz/openbmc_project/logging/entry/enumerate')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170805 17:05:09.542" level="INFO">${logpath} = /home/fspcibld/logs/20170805170506599770_UpdateBmc/20170805170506599770_InitiateCodeUpdateBMC/20170805170506599770_BMC_elog.txt</msg>
<status status="PASS" endtime="20170805 17:05:09.542" starttime="20170805 17:05:09.541"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170805 17:05:09.546" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170805 17:05:09.547" starttime="20170805 17:05:09.546"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170805 17:05:09.548" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170805 17:05:09.548" starttime="20170805 17:05:09.547"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170805 17:05:09.549" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170805 17:05:09.549" starttime="20170805 17:05:09.548"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170805 17:05:09.549" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170805 17:05:09.549" starttime="20170805 17:05:09.549"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170805 17:05:09.733" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170805 17:05:09.733" starttime="20170805 17:05:09.550"></status>
</kw>
<msg timestamp="20170805 17:05:09.733" level="INFO">${status} = PASS</msg>
<msg timestamp="20170805 17:05:09.733" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170805 17:05:09.733" starttime="20170805 17:05:09.550"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170805 17:05:09.734" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170805 17:05:09.734" starttime="20170805 17:05:09.734"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170805 17:05:09.735" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170805 17:05:09.735" starttime="20170805 17:05:09.735"></status>
</kw>
<status status="PASS" endtime="20170805 17:05:09.735" starttime="20170805 17:05:09.545"></status>
</kw>
<status status="PASS" endtime="20170805 17:05:09.735" starttime="20170805 17:05:09.544"></status>
</kw>
<status status="PASS" endtime="20170805 17:05:09.735" starttime="20170805 17:05:09.543"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170805 17:05:09.736" level="INFO">${base_uri} = /xyz/openbmc_project/logging/entry/enumerate</msg>
<status status="PASS" endtime="20170805 17:05:09.736" starttime="20170805 17:05:09.736"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170805 17:05:09.737" starttime="20170805 17:05:09.736"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170805 17:05:09.779" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry/enumerate, headers=None json=None</msg>
<msg timestamp="20170805 17:05:09.779" level="INFO">${ret} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20170805 17:05:09.779" starttime="20170805 17:05:09.737"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170805 17:05:09.780" starttime="20170805 17:05:09.779"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170805 17:05:09.780" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170805 17:05:09.780" starttime="20170805 17:05:09.780"></status>
</kw>
<msg timestamp="20170805 17:05:09.780" level="INFO">${resp} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20170805 17:05:09.780" starttime="20170805 17:05:09.542"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170805 17:05:09.781" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20170805 17:05:09.782" level="FAIL">404 != 200</msg>
<status status="FAIL" endtime="20170805 17:05:09.782" starttime="20170805 17:05:09.781"></status>
</kw>
<msg timestamp="20170805 17:05:09.782" level="INFO">${status} = False</msg>
<status status="PASS" endtime="20170805 17:05:09.782" starttime="20170805 17:05:09.781"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<kw name="Continue For Loop" library="BuiltIn">
<doc>Skips the current for loop iteration and continues from the next.</doc>
<msg timestamp="20170805 17:05:09.783" level="INFO">Continuing for loop from the next iteration.</msg>
<status status="PASS" endtime="20170805 17:05:09.783" starttime="20170805 17:05:09.783"></status>
</kw>
<status status="PASS" endtime="20170805 17:05:09.783" starttime="20170805 17:05:09.782"></status>
</kw>
<status status="PASS" endtime="20170805 17:05:09.783" starttime="20170805 17:05:09.540"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_sensor_list', '/org/openbmc/sensors/enumerate')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170805 17:05:09.784" level="INFO">${logpath} = /home/fspcibld/logs/20170805170506599770_UpdateBmc/20170805170506599770_InitiateCodeUpdateBMC/20170805170506599770_BMC_sensor_list.txt</msg>
<status status="PASS" endtime="20170805 17:05:09.784" starttime="20170805 17:05:09.784"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170805 17:05:09.787" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170805 17:05:09.788" starttime="20170805 17:05:09.787"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170805 17:05:09.788" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170805 17:05:09.788" starttime="20170805 17:05:09.788"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170805 17:05:09.789" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170805 17:05:09.789" starttime="20170805 17:05:09.789"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170805 17:05:09.790" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170805 17:05:09.790" starttime="20170805 17:05:09.789"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170805 17:05:10.050" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170805 17:05:10.050" starttime="20170805 17:05:09.790"></status>
</kw>
<msg timestamp="20170805 17:05:10.051" level="INFO">${status} = PASS</msg>
<msg timestamp="20170805 17:05:10.051" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170805 17:05:10.051" starttime="20170805 17:05:09.790"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170805 17:05:10.051" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170805 17:05:10.051" starttime="20170805 17:05:10.051"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170805 17:05:10.052" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170805 17:05:10.052" starttime="20170805 17:05:10.052"></status>
</kw>
<status status="PASS" endtime="20170805 17:05:10.052" starttime="20170805 17:05:09.786"></status>
</kw>
<status status="PASS" endtime="20170805 17:05:10.052" starttime="20170805 17:05:09.786"></status>
</kw>
<status status="PASS" endtime="20170805 17:05:10.052" starttime="20170805 17:05:09.785"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170805 17:05:10.053" level="INFO">${base_uri} = /org/openbmc/sensors/enumerate</msg>
<status status="PASS" endtime="20170805 17:05:10.053" starttime="20170805 17:05:10.053"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170805 17:05:10.054" starttime="20170805 17:05:10.053"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170805 17:05:10.294" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/sensors/enumerate, headers=None json=None</msg>
<msg timestamp="20170805 17:05:10.294" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170805 17:05:10.294" starttime="20170805 17:05:10.054"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170805 17:05:10.295" starttime="20170805 17:05:10.294"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170805 17:05:10.295" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170805 17:05:10.295" starttime="20170805 17:05:10.295"></status>
</kw>
<msg timestamp="20170805 17:05:10.295" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170805 17:05:10.295" starttime="20170805 17:05:09.785"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170805 17:05:10.297" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170805 17:05:10.297" starttime="20170805 17:05:10.296"></status>
</kw>
<msg timestamp="20170805 17:05:10.297" level="INFO">${status} = True</msg>
<status status="PASS" endtime="20170805 17:05:10.297" starttime="20170805 17:05:10.296"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status status="PASS" endtime="20170805 17:05:10.297" starttime="20170805 17:05:10.297"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg timestamp="20170805 17:05:10.298" level="INFO">To JSON using : content={
  "data": {
    "/org/openbmc/sensors/host/BootCount": {
      "error": 0, 
      "units": "", 
      "value": 3
    }, 
    "/org/openbmc/sensors/host/BootProgress": {
      "error": 0, 
      "units": "", 
      "value": "Off"
    }, 
    "/org/openbmc/sensors/host/OperatingSystemStatus": {
      "error": 0, 
      "units": "", 
      "value": "Off"
    }, 
    "/org/openbmc/sensors/host/PowerSupplyDerating": {
      "error": 0, 
      "units": "", 
      "value": 10
    }, 
    "/org/openbmc/sensors/host/PowerSupplyRedundancy": {
      "error": 0, 
      "units": "", 
      "value": "Disabled"
    }, 
    "/org/openbmc/sensors/host/TurboAllowed": {
      "error": 0, 
      "units": "", 
      "value": 0
    }, 
    "/org/openbmc/sensors/host/cpu0/OccStatus": {
      "error": 0, 
      "units": "", 
      "value": "Disabled"
    }, 
    "/org/openbmc/sensors/host/cpu1/OccStatus": {
      "error": 0, 
      "units": "", 
      "value": "Disabled"
    }, 
    "/org/openbmc/sensors/host/powercap": {
      "error": 0, 
      "units": "", 
      "value": 0
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170805 17:05:10.298" level="INFO">To JSON using : pretty_print=True </msg>
<msg timestamp="20170805 17:05:10.299" level="INFO">${jsondata} = {
    "data": {
        "/org/openbmc/sensors/host/BootCount": {
            "error": 0,
            "units": "",
            "value": 3
        },
        "/org/openbmc/sensors/host/BootProgress": {
...</msg>
<status status="PASS" endtime="20170805 17:05:10.299" starttime="20170805 17:05:10.298"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170805 17:05:10.300" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170805170506599770_UpdateBmc/20170805170506599770_InitiateCodeUpdateBMC/20170805170506599770_BMC_sensor_list.txt"&gt;/home/fspcibld/logs/20170805170506599770_UpdateBmc/20170805170506599770_InitiateCodeUpdateBMC/20170805170506599770_BMC_sensor_list.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170805 17:05:10.300" starttime="20170805 17:05:10.299"></status>
</kw>
<status status="PASS" endtime="20170805 17:05:10.300" starttime="20170805 17:05:10.299"></status>
</kw>
<status status="PASS" endtime="20170805 17:05:10.301" starttime="20170805 17:05:09.784"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_inventory', '/xyz/openbmc_project/inventory/enumerate')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170805 17:05:10.301" level="INFO">${logpath} = /home/fspcibld/logs/20170805170506599770_UpdateBmc/20170805170506599770_InitiateCodeUpdateBMC/20170805170506599770_BMC_inventory.txt</msg>
<status status="PASS" endtime="20170805 17:05:10.301" starttime="20170805 17:05:10.301"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170805 17:05:10.305" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170805 17:05:10.306" starttime="20170805 17:05:10.305"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170805 17:05:10.306" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170805 17:05:10.307" starttime="20170805 17:05:10.306"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170805 17:05:10.308" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170805 17:05:10.308" starttime="20170805 17:05:10.307"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170805 17:05:10.309" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170805 17:05:10.309" starttime="20170805 17:05:10.308"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170805 17:05:10.499" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170805 17:05:10.499" starttime="20170805 17:05:10.310"></status>
</kw>
<msg timestamp="20170805 17:05:10.499" level="INFO">${status} = PASS</msg>
<msg timestamp="20170805 17:05:10.500" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170805 17:05:10.500" starttime="20170805 17:05:10.309"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170805 17:05:10.500" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170805 17:05:10.500" starttime="20170805 17:05:10.500"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170805 17:05:10.501" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170805 17:05:10.501" starttime="20170805 17:05:10.501"></status>
</kw>
<status status="PASS" endtime="20170805 17:05:10.501" starttime="20170805 17:05:10.304"></status>
</kw>
<status status="PASS" endtime="20170805 17:05:10.501" starttime="20170805 17:05:10.303"></status>
</kw>
<status status="PASS" endtime="20170805 17:05:10.501" starttime="20170805 17:05:10.302"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170805 17:05:10.502" level="INFO">${base_uri} = /xyz/openbmc_project/inventory/enumerate</msg>
<status status="PASS" endtime="20170805 17:05:10.502" starttime="20170805 17:05:10.502"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170805 17:05:10.503" starttime="20170805 17:05:10.502"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170805 17:05:10.666" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/inventory/enumerate, headers=None json=None</msg>
<msg timestamp="20170805 17:05:10.667" level="INFO">${ret} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170805 17:05:10.667" starttime="20170805 17:05:10.503"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170805 17:05:10.667" starttime="20170805 17:05:10.667"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170805 17:05:10.668" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170805 17:05:10.668" starttime="20170805 17:05:10.668"></status>
</kw>
<msg timestamp="20170805 17:05:10.668" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170805 17:05:10.668" starttime="20170805 17:05:10.302"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170805 17:05:10.669" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170805 17:05:10.669" starttime="20170805 17:05:10.669"></status>
</kw>
<msg timestamp="20170805 17:05:10.670" level="INFO">${status} = True</msg>
<status status="PASS" endtime="20170805 17:05:10.670" starttime="20170805 17:05:10.669"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<status status="PASS" endtime="20170805 17:05:10.670" starttime="20170805 17:05:10.670"></status>
</kw>
<kw name="To Json" library="RequestsLibrary.RequestsKeywords">
<doc>Convert a string to a JSON object</doc>
<arguments>
<arg>${resp.content}</arg>
<arg>pretty_print=True</arg>
</arguments>
<assign>
<var>${jsondata}</var>
</assign>
<msg timestamp="20170805 17:05:10.671" level="INFO">To JSON using : content={
  "data": {
    "/xyz/openbmc_project/inventory/system/chassis": {
      "AirCooled": 1, 
      "WaterCooled": 1
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc": {
      "BuildDate": "", 
      "FieldReplaceable": 0, 
      "Manufacturer": "IBM", 
      "Model": "", 
      "PartNumber": "01DH051", 
      "Present": 1, 
      "PrettyName": "BMC PLANAR  ", 
      "SerialNumber": "000000000000"
    }, 
    "/xyz/openbmc_project/inventory/system/chassis/motherboard/boxelder/bmc/ethernet": {
      "FieldReplaceable": 0, 
      "MACAddress": "00:00:00:00:00:00", 
      "Present": 1, 
      "PrettyName": ""
    }
  }, 
  "message": "200 OK", 
  "status": "ok"
} </msg>
<msg timestamp="20170805 17:05:10.671" level="INFO">To JSON using : pretty_print=True </msg>
<msg timestamp="20170805 17:05:10.671" level="INFO">${jsondata} = {
    "data": {
        "/xyz/openbmc_project/inventory/system/chassis": {
            "AirCooled": 1,
            "WaterCooled": 1
        },
        "/xyz/openbmc_project/inventory/system/chassis/mo...</msg>
<status status="PASS" endtime="20170805 17:05:10.671" starttime="20170805 17:05:10.670"></status>
</kw>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${\n}${jsondata}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170805 17:05:10.673" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170805170506599770_UpdateBmc/20170805170506599770_InitiateCodeUpdateBMC/20170805170506599770_BMC_inventory.txt"&gt;/home/fspcibld/logs/20170805170506599770_UpdateBmc/20170805170506599770_InitiateCodeUpdateBMC/20170805170506599770_BMC_inventory.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170805 17:05:10.673" starttime="20170805 17:05:10.672"></status>
</kw>
<status status="PASS" endtime="20170805 17:05:10.673" starttime="20170805 17:05:10.671"></status>
</kw>
<status status="PASS" endtime="20170805 17:05:10.674" starttime="20170805 17:05:10.301"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_led', '/org/openbmc/records/events/enumerate')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170805 17:05:10.674" level="INFO">${logpath} = /home/fspcibld/logs/20170805170506599770_UpdateBmc/20170805170506599770_InitiateCodeUpdateBMC/20170805170506599770_BMC_led.txt</msg>
<status status="PASS" endtime="20170805 17:05:10.674" starttime="20170805 17:05:10.674"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170805 17:05:10.677" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170805 17:05:10.678" starttime="20170805 17:05:10.677"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170805 17:05:10.678" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170805 17:05:10.678" starttime="20170805 17:05:10.678"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170805 17:05:10.679" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170805 17:05:10.679" starttime="20170805 17:05:10.679"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170805 17:05:10.680" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170805 17:05:10.680" starttime="20170805 17:05:10.679"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170805 17:05:10.862" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170805 17:05:10.862" starttime="20170805 17:05:10.681"></status>
</kw>
<msg timestamp="20170805 17:05:10.862" level="INFO">${status} = PASS</msg>
<msg timestamp="20170805 17:05:10.862" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170805 17:05:10.862" starttime="20170805 17:05:10.680"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170805 17:05:10.863" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170805 17:05:10.863" starttime="20170805 17:05:10.862"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170805 17:05:10.863" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170805 17:05:10.864" starttime="20170805 17:05:10.863"></status>
</kw>
<status status="PASS" endtime="20170805 17:05:10.864" starttime="20170805 17:05:10.676"></status>
</kw>
<status status="PASS" endtime="20170805 17:05:10.864" starttime="20170805 17:05:10.676"></status>
</kw>
<status status="PASS" endtime="20170805 17:05:10.864" starttime="20170805 17:05:10.675"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170805 17:05:10.864" level="INFO">${base_uri} = /org/openbmc/records/events/enumerate</msg>
<status status="PASS" endtime="20170805 17:05:10.864" starttime="20170805 17:05:10.864"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170805 17:05:10.865" starttime="20170805 17:05:10.865"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170805 17:05:10.921" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/records/events/enumerate, headers=None json=None</msg>
<msg timestamp="20170805 17:05:10.921" level="INFO">${ret} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20170805 17:05:10.921" starttime="20170805 17:05:10.866"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170805 17:05:10.922" starttime="20170805 17:05:10.922"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170805 17:05:10.922" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170805 17:05:10.922" starttime="20170805 17:05:10.922"></status>
</kw>
<msg timestamp="20170805 17:05:10.923" level="INFO">${resp} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20170805 17:05:10.923" starttime="20170805 17:05:10.675"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170805 17:05:10.924" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20170805 17:05:10.924" level="FAIL">404 != 200</msg>
<status status="FAIL" endtime="20170805 17:05:10.924" starttime="20170805 17:05:10.924"></status>
</kw>
<msg timestamp="20170805 17:05:10.924" level="INFO">${status} = False</msg>
<status status="PASS" endtime="20170805 17:05:10.924" starttime="20170805 17:05:10.923"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<kw name="Continue For Loop" library="BuiltIn">
<doc>Skips the current for loop iteration and continues from the next.</doc>
<msg timestamp="20170805 17:05:10.925" level="INFO">Continuing for loop from the next iteration.</msg>
<status status="PASS" endtime="20170805 17:05:10.926" starttime="20170805 17:05:10.925"></status>
</kw>
<status status="PASS" endtime="20170805 17:05:10.926" starttime="20170805 17:05:10.925"></status>
</kw>
<status status="PASS" endtime="20170805 17:05:10.926" starttime="20170805 17:05:10.674"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_record_log', '/org/openbmc/control/led/enumerate')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170805 17:05:10.926" level="INFO">${logpath} = /home/fspcibld/logs/20170805170506599770_UpdateBmc/20170805170506599770_InitiateCodeUpdateBMC/20170805170506599770_BMC_record_log.txt</msg>
<status status="PASS" endtime="20170805 17:05:10.927" starttime="20170805 17:05:10.926"></status>
</kw>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${cmd[1]}</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170805 17:05:10.930" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170805 17:05:10.930" starttime="20170805 17:05:10.929"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170805 17:05:10.931" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170805 17:05:10.931" starttime="20170805 17:05:10.930"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170805 17:05:10.932" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170805 17:05:10.932" starttime="20170805 17:05:10.931"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170805 17:05:10.932" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170805 17:05:10.932" starttime="20170805 17:05:10.932"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170805 17:05:11.243" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170805 17:05:11.243" starttime="20170805 17:05:10.933"></status>
</kw>
<msg timestamp="20170805 17:05:11.243" level="INFO">${status} = PASS</msg>
<msg timestamp="20170805 17:05:11.243" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170805 17:05:11.243" starttime="20170805 17:05:10.933"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170805 17:05:11.244" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170805 17:05:11.244" starttime="20170805 17:05:11.243"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170805 17:05:11.244" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170805 17:05:11.244" starttime="20170805 17:05:11.244"></status>
</kw>
<status status="PASS" endtime="20170805 17:05:11.245" starttime="20170805 17:05:10.929"></status>
</kw>
<status status="PASS" endtime="20170805 17:05:11.245" starttime="20170805 17:05:10.928"></status>
</kw>
<status status="PASS" endtime="20170805 17:05:11.245" starttime="20170805 17:05:10.927"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170805 17:05:11.245" level="INFO">${base_uri} = /org/openbmc/control/led/enumerate</msg>
<status status="PASS" endtime="20170805 17:05:11.245" starttime="20170805 17:05:11.245"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170805 17:05:11.246" starttime="20170805 17:05:11.246"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170805 17:05:11.289" level="INFO">Get Request using : alias=openbmc, uri=/org/openbmc/control/led/enumerate, headers=None json=None</msg>
<msg timestamp="20170805 17:05:11.289" level="INFO">${ret} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20170805 17:05:11.289" starttime="20170805 17:05:11.246"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170805 17:05:11.290" starttime="20170805 17:05:11.289"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170805 17:05:11.290" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170805 17:05:11.290" starttime="20170805 17:05:11.290"></status>
</kw>
<msg timestamp="20170805 17:05:11.291" level="INFO">${resp} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20170805 17:05:11.291" starttime="20170805 17:05:10.927"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170805 17:05:11.292" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20170805 17:05:11.292" level="FAIL">404 != 200</msg>
<status status="FAIL" endtime="20170805 17:05:11.292" starttime="20170805 17:05:11.291"></status>
</kw>
<msg timestamp="20170805 17:05:11.292" level="INFO">${status} = False</msg>
<status status="PASS" endtime="20170805 17:05:11.292" starttime="20170805 17:05:11.291"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
<arg>Continue For Loop</arg>
</arguments>
<kw name="Continue For Loop" library="BuiltIn">
<doc>Skips the current for loop iteration and continues from the next.</doc>
<msg timestamp="20170805 17:05:11.293" level="INFO">Continuing for loop from the next iteration.</msg>
<status status="PASS" endtime="20170805 17:05:11.293" starttime="20170805 17:05:11.293"></status>
</kw>
<status status="PASS" endtime="20170805 17:05:11.293" starttime="20170805 17:05:11.293"></status>
</kw>
<status status="PASS" endtime="20170805 17:05:11.293" starttime="20170805 17:05:10.926"></status>
</kw>
<status status="PASS" endtime="20170805 17:05:11.294" starttime="20170805 17:05:09.540"></status>
</kw>
<status status="PASS" endtime="20170805 17:05:11.294" starttime="20170805 17:05:09.539"></status>
</kw>
<status status="PASS" endtime="20170805 17:05:11.294" starttime="20170805 17:05:09.538"></status>
</kw>
<status status="PASS" endtime="20170805 17:05:11.294" starttime="20170805 17:05:09.538"></status>
</kw>
<status status="PASS" endtime="20170805 17:05:11.294" starttime="20170805 17:05:09.537"></status>
</kw>
<status status="PASS" endtime="20170805 17:05:11.294" starttime="20170805 17:05:09.524"></status>
</kw>
<status status="PASS" endtime="20170805 17:05:11.294" starttime="20170805 17:05:09.521"></status>
</kw>
<status status="PASS" endtime="20170805 17:05:11.294" starttime="20170805 17:05:09.521"></status>
</kw>
<kw type="foritem" name="${method} = ('Core Files', 'SCP Coredump Files')">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status status="PASS" endtime="20170805 17:05:11.296" starttime="20170805 17:05:11.296"></status>
</kw>
<msg timestamp="20170805 17:05:11.296" level="INFO">${status} = PASS</msg>
<msg timestamp="20170805 17:05:11.296" level="INFO">${ret_values} = None</msg>
<status status="PASS" endtime="20170805 17:05:11.296" starttime="20170805 17:05:11.295"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status status="PASS" endtime="20170805 17:05:11.297" starttime="20170805 17:05:11.297"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="SCP Coredump Files" library="openbmc_ffdc_methods">
<doc>Copy core dump file from BMC to local system.</doc>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>ls /tmp/core_*</arg>
</arguments>
<assign>
<var>${core_files}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20170805 17:05:11.331" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.86.161
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170805 17:05:11.331" level="INFO">Executing command 'ls /tmp/core_*'.</msg>
<msg timestamp="20170805 17:05:11.389" level="INFO">Command exited with return code 1.</msg>
<msg timestamp="20170805 17:05:11.400" level="INFO">${core_files} = None</msg>
<msg timestamp="20170805 17:05:11.400" level="INFO">${stderr} = None</msg>
<msg timestamp="20170805 17:05:11.400" level="INFO">${rc} = None</msg>
<msg timestamp="20170805 17:05:11.400" level="FAIL">#(UTC) 2017/08/05 17:05:11.398778 -    3.894789 - **ERROR** The prior SSH command returned a non-zero return code:
rc:                                               0x00000001
ls: /tmp/core_*: No such file or directory
: 1 != 0</msg>
<status status="FAIL" endtime="20170805 17:05:11.400" starttime="20170805 17:05:11.311"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${core_files}</arg>
</arguments>
<assign>
<var>@{core_list}</var>
</assign>
<msg timestamp="20170805 17:05:11.401" level="INFO">@{core_list} = [ ]</msg>
<msg timestamp="20170805 17:05:11.401" level="FAIL">AttributeError: 'NoneType' object has no attribute 'split'</msg>
<status status="FAIL" endtime="20170805 17:05:11.401" starttime="20170805 17:05:11.400"></status>
</kw>
<kw name="Run Key U" library="gen_robot_keyword">
<doc>Run keyword unconditionally (i.e. without regard to global test_mode</doc>
<arguments>
<arg>Open Connection for SCP</arg>
</arguments>
<kw name="Open Connection for SCP" library="connection_client">
<kw name="Import Library" library="BuiltIn">
<doc>Imports a library with the given name and optional arguments.</doc>
<arguments>
<arg>SCPLibrary</arg>
<arg>WITH NAME</arg>
<arg>scp</arg>
</arguments>
<status status="PASS" endtime="20170805 17:05:11.411" starttime="20170805 17:05:11.410"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${SSH_PORT}' == '${EMPTY}'</arg>
<arg>scp.Open connection</arg>
<arg>${OPENBMC_HOST}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
<arg>ELSE</arg>
<arg>Run Keyword</arg>
<arg>scp.Open connection</arg>
<arg>${OPENBMC_HOST}</arg>
<arg>port=${SSH_PORT}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
</arguments>
<kw name="Open Connection" library="scp">
<doc>Opens a new SCP connection to the given host.</doc>
<arguments>
<arg>${OPENBMC_HOST}</arg>
<arg>username=${OPENBMC_USERNAME}</arg>
<arg>password=${OPENBMC_PASSWORD}</arg>
</arguments>
<status status="PASS" endtime="20170805 17:05:12.047" starttime="20170805 17:05:11.412"></status>
</kw>
<status status="PASS" endtime="20170805 17:05:12.047" starttime="20170805 17:05:11.411"></status>
</kw>
<status status="PASS" endtime="20170805 17:05:12.047" starttime="20170805 17:05:11.410"></status>
</kw>
<status status="PASS" endtime="20170805 17:05:12.047" starttime="20170805 17:05:11.402"></status>
</kw>
<kw type="for" name="${index} IN [ @{core_list} ]">
<status status="PASS" endtime="20170805 17:05:12.047" starttime="20170805 17:05:12.047"></status>
</kw>
<status status="FAIL" endtime="20170805 17:05:12.047" starttime="20170805 17:05:11.311"></status>
</kw>
<status status="PASS" endtime="20170805 17:05:12.047" starttime="20170805 17:05:11.297"></status>
</kw>
<status status="PASS" endtime="20170805 17:05:12.048" starttime="20170805 17:05:11.294"></status>
</kw>
<status status="PASS" endtime="20170805 17:05:12.048" starttime="20170805 17:05:11.294"></status>
</kw>
<kw type="foritem" name="${method} = ('BMC Specific Files', 'BMC FFDC Files')">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status status="PASS" endtime="20170805 17:05:12.050" starttime="20170805 17:05:12.050"></status>
</kw>
<msg timestamp="20170805 17:05:12.050" level="INFO">${status} = PASS</msg>
<msg timestamp="20170805 17:05:12.050" level="INFO">${ret_values} = None</msg>
<status status="PASS" endtime="20170805 17:05:12.050" starttime="20170805 17:05:12.049"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status status="PASS" endtime="20170805 17:05:12.051" starttime="20170805 17:05:12.050"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="BMC FFDC Files" library="openbmc_ffdc_methods">
<doc>Get the command list and iterate</doc>
<kw name="Get Ffdc File Index" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<assign>
<var>@{entries}</var>
</assign>
<msg timestamp="20170805 17:05:12.065" level="INFO">@{entries} = [ BMC FILES ]</msg>
<status status="PASS" endtime="20170805 17:05:12.065" starttime="20170805 17:05:12.065"></status>
</kw>
<kw type="for" name="${index} IN [ @{entries} ]">
<kw type="foritem" name="${index} = BMC FILES">
<kw name="Create File and Write Data" library="openbmc_ffdc_methods">
<doc>Create files to current FFDC log directory,</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<kw name="Get Ffdc Bmc File" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${key_index}</arg>
</arguments>
<assign>
<var>@{cmd_list}</var>
</assign>
<msg timestamp="20170805 17:05:12.067" level="INFO">@{cmd_list} = [ ('BMC_proc_fd_active_list', 'ls -Al /proc/*/fd/') | ('BMC_procinfo', 'cat /proc/cpuinfo') | ('BMC_meminfo', 'cat /proc/meminfo') | ('BMC_proc_list', 'top -n 1 -b') | ('BMC_dmesg', 'dmesg') | ('BMC_j...</msg>
<status status="PASS" endtime="20170805 17:05:12.067" starttime="20170805 17:05:12.066"></status>
</kw>
<kw type="for" name="${cmd} IN [ @{cmd_list} ]">
<kw type="foritem" name="${cmd} = ('BMC_proc_fd_active_list', 'ls -Al /proc/*/fd/')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170805 17:05:12.067" level="INFO">${logpath} = /home/fspcibld/logs/20170805170506599770_UpdateBmc/20170805170506599770_InitiateCodeUpdateBMC/20170805170506599770_BMC_proc_fd_active_list.txt</msg>
<status status="PASS" endtime="20170805 17:05:12.068" starttime="20170805 17:05:12.067"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status status="PASS" endtime="20170805 17:05:12.069" starttime="20170805 17:05:12.069"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170805 17:05:12.070" level="INFO">${cmd_buf} = BMC Execute Command  ls -Al /proc/*/fd/  ignore_err=1</msg>
<status status="PASS" endtime="20170805 17:05:12.070" starttime="20170805 17:05:12.069"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>ls -Al /proc/*/fd/</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170805 17:05:12.111" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.86.161
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170805 17:05:12.112" level="INFO">Executing command 'ls -Al /proc/*/fd/'.</msg>
<msg timestamp="20170805 17:05:12.704" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20170805 17:05:12.704" starttime="20170805 17:05:12.088"></status>
</kw>
<msg timestamp="20170805 17:05:12.704" level="INFO">${status} = PASS</msg>
<msg timestamp="20170805 17:05:12.705" level="INFO">${ret_values} = (u'/proc/1/fd/:\ntotal 0\nlrwx------    1 root     root            64 Aug  5 17:05 0 -&gt; /dev/null\nlrwx------    1 root     root            64 Aug  5 17:05 1 -&gt; /dev/null\nlr-x------    1 root     roo...</msg>
<status status="PASS" endtime="20170805 17:05:12.705" starttime="20170805 17:05:12.070"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170805 17:05:12.706" level="INFO">${stdout} = /proc/1/fd/:
total 0
lrwx------    1 root     root            64 Aug  5 17:05 0 -&gt; /dev/null
lrwx------    1 root     root            64 Aug  5 17:05 1 -&gt; /dev/null
lr-x------    1 root     root      ...</msg>
<status status="PASS" endtime="20170805 17:05:12.706" starttime="20170805 17:05:12.706"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170805 17:05:12.707" level="INFO">${stderr} = ls: /proc/1215/fd/3: cannot read link: No such file or directory
ls: /proc/self/fd/3: cannot read link: No such file or directory
ls: /proc/thread-self/fd/3: cannot read link: No such file or director...</msg>
<status status="PASS" endtime="20170805 17:05:12.707" starttime="20170805 17:05:12.706"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170805 17:05:12.715" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170805170506599770_UpdateBmc/20170805170506599770_InitiateCodeUpdateBMC/20170805170506599770_BMC_proc_fd_active_list.txt"&gt;/home/fspcibld/logs/20170805170506599770_UpdateBmc/20170805170506599770_InitiateCodeUpdateBMC/20170805170506599770_BMC_proc_fd_active_list.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170805 17:05:12.715" starttime="20170805 17:05:12.714"></status>
</kw>
<status status="PASS" endtime="20170805 17:05:12.715" starttime="20170805 17:05:12.713"></status>
</kw>
<status status="PASS" endtime="20170805 17:05:12.715" starttime="20170805 17:05:12.707"></status>
</kw>
<status status="PASS" endtime="20170805 17:05:12.715" starttime="20170805 17:05:12.068"></status>
</kw>
<status status="PASS" endtime="20170805 17:05:12.715" starttime="20170805 17:05:12.067"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_procinfo', 'cat /proc/cpuinfo')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170805 17:05:12.716" level="INFO">${logpath} = /home/fspcibld/logs/20170805170506599770_UpdateBmc/20170805170506599770_InitiateCodeUpdateBMC/20170805170506599770_BMC_procinfo.txt</msg>
<status status="PASS" endtime="20170805 17:05:12.716" starttime="20170805 17:05:12.715"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status status="PASS" endtime="20170805 17:05:12.717" starttime="20170805 17:05:12.717"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170805 17:05:12.718" level="INFO">${cmd_buf} = BMC Execute Command  cat /proc/cpuinfo  ignore_err=1</msg>
<status status="PASS" endtime="20170805 17:05:12.718" starttime="20170805 17:05:12.718"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>cat /proc/cpuinfo</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170805 17:05:12.760" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.86.161
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170805 17:05:12.760" level="INFO">Executing command 'cat /proc/cpuinfo'.</msg>
<msg timestamp="20170805 17:05:12.807" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20170805 17:05:12.807" starttime="20170805 17:05:12.737"></status>
</kw>
<msg timestamp="20170805 17:05:12.807" level="INFO">${status} = PASS</msg>
<msg timestamp="20170805 17:05:12.807" level="INFO">${ret_values} = (u'processor\t: 0\nmodel name\t: ARMv6-compatible processor rev 7 (v6l)\nBogoMIPS\t: 789.70\nFeatures\t: half thumb fastmult edsp java tls \nCPU implementer\t: 0x41\nCPU architecture: 7\nCPU variant\t...</msg>
<status status="PASS" endtime="20170805 17:05:12.807" starttime="20170805 17:05:12.719"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170805 17:05:12.808" level="INFO">${stdout} = processor	: 0
model name	: ARMv6-compatible processor rev 7 (v6l)
BogoMIPS	: 789.70
Features	: half thumb fastmult edsp java tls 
CPU implementer	: 0x41
CPU architecture: 7
CPU variant	: 0x0
CPU part	...</msg>
<status status="PASS" endtime="20170805 17:05:12.808" starttime="20170805 17:05:12.807"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170805 17:05:12.808" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170805 17:05:12.808" starttime="20170805 17:05:12.808"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170805 17:05:12.816" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170805170506599770_UpdateBmc/20170805170506599770_InitiateCodeUpdateBMC/20170805170506599770_BMC_procinfo.txt"&gt;/home/fspcibld/logs/20170805170506599770_UpdateBmc/20170805170506599770_InitiateCodeUpdateBMC/20170805170506599770_BMC_procinfo.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170805 17:05:12.816" starttime="20170805 17:05:12.815"></status>
</kw>
<status status="PASS" endtime="20170805 17:05:12.816" starttime="20170805 17:05:12.814"></status>
</kw>
<status status="PASS" endtime="20170805 17:05:12.816" starttime="20170805 17:05:12.809"></status>
</kw>
<status status="PASS" endtime="20170805 17:05:12.816" starttime="20170805 17:05:12.716"></status>
</kw>
<status status="PASS" endtime="20170805 17:05:12.816" starttime="20170805 17:05:12.715"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_meminfo', 'cat /proc/meminfo')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170805 17:05:12.817" level="INFO">${logpath} = /home/fspcibld/logs/20170805170506599770_UpdateBmc/20170805170506599770_InitiateCodeUpdateBMC/20170805170506599770_BMC_meminfo.txt</msg>
<status status="PASS" endtime="20170805 17:05:12.817" starttime="20170805 17:05:12.817"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status status="PASS" endtime="20170805 17:05:12.818" starttime="20170805 17:05:12.818"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170805 17:05:12.819" level="INFO">${cmd_buf} = BMC Execute Command  cat /proc/meminfo  ignore_err=1</msg>
<status status="PASS" endtime="20170805 17:05:12.819" starttime="20170805 17:05:12.819"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>cat /proc/meminfo</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170805 17:05:12.861" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.86.161
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170805 17:05:12.861" level="INFO">Executing command 'cat /proc/meminfo'.</msg>
<msg timestamp="20170805 17:05:12.907" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20170805 17:05:12.908" starttime="20170805 17:05:12.838"></status>
</kw>
<msg timestamp="20170805 17:05:12.908" level="INFO">${status} = PASS</msg>
<msg timestamp="20170805 17:05:12.908" level="INFO">${ret_values} = (u'MemTotal:         432240 kB\nMemFree:          181820 kB\nMemAvailable:     226064 kB\nBuffers:           10852 kB\nCached:           149280 kB\nSwapCached:            0 kB\nActive:           14570...</msg>
<status status="PASS" endtime="20170805 17:05:12.908" starttime="20170805 17:05:12.820"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170805 17:05:12.909" level="INFO">${stdout} = MemTotal:         432240 kB
MemFree:          181820 kB
MemAvailable:     226064 kB
Buffers:           10852 kB
Cached:           149280 kB
SwapCached:            0 kB
Active:           145700 kB
Inac...</msg>
<status status="PASS" endtime="20170805 17:05:12.909" starttime="20170805 17:05:12.908"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170805 17:05:12.909" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170805 17:05:12.909" starttime="20170805 17:05:12.909"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170805 17:05:12.917" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170805170506599770_UpdateBmc/20170805170506599770_InitiateCodeUpdateBMC/20170805170506599770_BMC_meminfo.txt"&gt;/home/fspcibld/logs/20170805170506599770_UpdateBmc/20170805170506599770_InitiateCodeUpdateBMC/20170805170506599770_BMC_meminfo.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170805 17:05:12.917" starttime="20170805 17:05:12.916"></status>
</kw>
<status status="PASS" endtime="20170805 17:05:12.917" starttime="20170805 17:05:12.915"></status>
</kw>
<status status="PASS" endtime="20170805 17:05:12.917" starttime="20170805 17:05:12.910"></status>
</kw>
<status status="PASS" endtime="20170805 17:05:12.917" starttime="20170805 17:05:12.817"></status>
</kw>
<status status="PASS" endtime="20170805 17:05:12.917" starttime="20170805 17:05:12.816"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_proc_list', 'top -n 1 -b')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170805 17:05:12.918" level="INFO">${logpath} = /home/fspcibld/logs/20170805170506599770_UpdateBmc/20170805170506599770_InitiateCodeUpdateBMC/20170805170506599770_BMC_proc_list.txt</msg>
<status status="PASS" endtime="20170805 17:05:12.918" starttime="20170805 17:05:12.918"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status status="PASS" endtime="20170805 17:05:12.920" starttime="20170805 17:05:12.919"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170805 17:05:12.920" level="INFO">${cmd_buf} = BMC Execute Command  top -n 1 -b  ignore_err=1</msg>
<status status="PASS" endtime="20170805 17:05:12.920" starttime="20170805 17:05:12.920"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>top -n 1 -b</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170805 17:05:12.961" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.86.161
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170805 17:05:12.962" level="INFO">Executing command 'top -n 1 -b'.</msg>
<msg timestamp="20170805 17:05:13.260" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20170805 17:05:13.260" starttime="20170805 17:05:12.938"></status>
</kw>
<msg timestamp="20170805 17:05:13.260" level="INFO">${status} = PASS</msg>
<msg timestamp="20170805 17:05:13.261" level="INFO">${ret_values} = (u'Mem: 250420K used, 181820K free, 113132K shrd, 10852K buff, 149284K cached\nCPU:   0% usr  16% sys   0% nic  83% idle   0% io   0% irq   0% sirq\nLoad average: 2.05 1.70 0.74 1/152 1218\n  PID  PPI...</msg>
<status status="PASS" endtime="20170805 17:05:13.261" starttime="20170805 17:05:12.921"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170805 17:05:13.262" level="INFO">${stdout} = Mem: 250420K used, 181820K free, 113132K shrd, 10852K buff, 149284K cached
CPU:   0% usr  16% sys   0% nic  83% idle   0% io   0% irq   0% sirq
Load average: 2.05 1.70 0.74 1/152 1218
  PID  PPID USER...</msg>
<status status="PASS" endtime="20170805 17:05:13.262" starttime="20170805 17:05:13.261"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170805 17:05:13.262" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170805 17:05:13.262" starttime="20170805 17:05:13.262"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170805 17:05:13.269" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170805170506599770_UpdateBmc/20170805170506599770_InitiateCodeUpdateBMC/20170805170506599770_BMC_proc_list.txt"&gt;/home/fspcibld/logs/20170805170506599770_UpdateBmc/20170805170506599770_InitiateCodeUpdateBMC/20170805170506599770_BMC_proc_list.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170805 17:05:13.269" starttime="20170805 17:05:13.269"></status>
</kw>
<status status="PASS" endtime="20170805 17:05:13.270" starttime="20170805 17:05:13.268"></status>
</kw>
<status status="PASS" endtime="20170805 17:05:13.270" starttime="20170805 17:05:13.262"></status>
</kw>
<status status="PASS" endtime="20170805 17:05:13.270" starttime="20170805 17:05:12.918"></status>
</kw>
<status status="PASS" endtime="20170805 17:05:13.270" starttime="20170805 17:05:12.917"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_dmesg', 'dmesg')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170805 17:05:13.271" level="INFO">${logpath} = /home/fspcibld/logs/20170805170506599770_UpdateBmc/20170805170506599770_InitiateCodeUpdateBMC/20170805170506599770_BMC_dmesg.txt</msg>
<status status="PASS" endtime="20170805 17:05:13.271" starttime="20170805 17:05:13.270"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status status="PASS" endtime="20170805 17:05:13.272" starttime="20170805 17:05:13.272"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170805 17:05:13.273" level="INFO">${cmd_buf} = BMC Execute Command  dmesg  ignore_err=1</msg>
<status status="PASS" endtime="20170805 17:05:13.273" starttime="20170805 17:05:13.272"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>dmesg</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170805 17:05:13.316" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.86.161
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170805 17:05:13.317" level="INFO">Executing command 'dmesg'.</msg>
<msg timestamp="20170805 17:05:13.384" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20170805 17:05:13.384" starttime="20170805 17:05:13.293"></status>
</kw>
<msg timestamp="20170805 17:05:13.384" level="INFO">${status} = PASS</msg>
<msg timestamp="20170805 17:05:13.385" level="INFO">${ret_values} = (u'[    0.000000] Booting Linux on physical CPU 0x0\n[    0.000000] Linux version 4.10.17-b2cd8101eec3c200940405f12582473617a520f7 (bmcbuild@hmcci186.aus.stglabs.ibm.com) (gcc version 6.2.0 (GCC) ) #1...</msg>
<status status="PASS" endtime="20170805 17:05:13.385" starttime="20170805 17:05:13.274"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170805 17:05:13.385" level="INFO">${stdout} = [    0.000000] Booting Linux on physical CPU 0x0
[    0.000000] Linux version 4.10.17-b2cd8101eec3c200940405f12582473617a520f7 (bmcbuild@hmcci186.aus.stglabs.ibm.com) (gcc version 6.2.0 (GCC) ) #1 Tue...</msg>
<status status="PASS" endtime="20170805 17:05:13.385" starttime="20170805 17:05:13.385"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170805 17:05:13.386" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170805 17:05:13.386" starttime="20170805 17:05:13.386"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170805 17:05:13.393" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170805170506599770_UpdateBmc/20170805170506599770_InitiateCodeUpdateBMC/20170805170506599770_BMC_dmesg.txt"&gt;/home/fspcibld/logs/20170805170506599770_UpdateBmc/20170805170506599770_InitiateCodeUpdateBMC/20170805170506599770_BMC_dmesg.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170805 17:05:13.393" starttime="20170805 17:05:13.392"></status>
</kw>
<status status="PASS" endtime="20170805 17:05:13.393" starttime="20170805 17:05:13.392"></status>
</kw>
<status status="PASS" endtime="20170805 17:05:13.393" starttime="20170805 17:05:13.386"></status>
</kw>
<status status="PASS" endtime="20170805 17:05:13.393" starttime="20170805 17:05:13.271"></status>
</kw>
<status status="PASS" endtime="20170805 17:05:13.394" starttime="20170805 17:05:13.270"></status>
</kw>
<kw type="foritem" name="${cmd} = ('BMC_journalctl', 'journalctl --no-pager')">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${LOG_PREFIX}</arg>
<arg>${cmd[0]}.txt</arg>
</arguments>
<assign>
<var>${logpath}</var>
</assign>
<msg timestamp="20170805 17:05:13.394" level="INFO">${logpath} = /home/fspcibld/logs/20170805170506599770_UpdateBmc/20170805170506599770_InitiateCodeUpdateBMC/20170805170506599770_BMC_journalctl.txt</msg>
<status status="PASS" endtime="20170805 17:05:13.394" starttime="20170805 17:05:13.394"></status>
</kw>
<kw name="Execute Command and Write FFDC" library="openbmc_ffdc_methods">
<doc>Execute command on BMC or OS and write to ffdc</doc>
<arguments>
<arg>${cmd[0]}</arg>
<arg>${cmd[1]}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${logpath}' == '${FFDC_FILE_PATH}'</arg>
<arg>Write Cmd Output to FFDC File</arg>
<arg>${key_index}</arg>
<arg>${cmd}</arg>
</arguments>
<status status="PASS" endtime="20170805 17:05:13.396" starttime="20170805 17:05:13.395"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${target} Execute Command \ ${cmd} \ ignore_err=${1}</arg>
</arguments>
<assign>
<var>${cmd_buf}</var>
</assign>
<msg timestamp="20170805 17:05:13.396" level="INFO">${cmd_buf} = BMC Execute Command  journalctl --no-pager  ignore_err=1</msg>
<status status="PASS" endtime="20170805 17:05:13.397" starttime="20170805 17:05:13.396"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${cmd_buf}</arg>
<arg>ignore=${1}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="Bmc Execute Command" library="bmc_ssh_utils">
<doc>Run the given command in an BMC SSH session and return the stdout, stderr</doc>
<arguments>
<arg>journalctl --no-pager</arg>
<arg>ignore_err=1</arg>
</arguments>
<msg timestamp="20170805 17:05:13.438" level="INFO">index=1
path_separator=/
prompt=# 
width=80
newline=

height=24
encoding=UTF-8
alias=bmc_connection
host=9.3.86.161
timeout=25 seconds
term_type=vt100
port=22</msg>
<msg timestamp="20170805 17:05:13.438" level="INFO">Executing command 'journalctl --no-pager'.</msg>
<msg timestamp="20170805 17:05:14.375" level="INFO">Command exited with return code 0.</msg>
<status status="PASS" endtime="20170805 17:05:14.376" starttime="20170805 17:05:13.414"></status>
</kw>
<msg timestamp="20170805 17:05:14.376" level="INFO">${status} = PASS</msg>
<msg timestamp="20170805 17:05:14.377" level="INFO">${ret_values} = (u'-- Logs begin at Sat 2017-08-05 17:01:59 UTC, end at Sat 2017-08-05 17:05:16 UTC. --\nAug 05 17:01:59 witherspoon kernel: Booting Linux on physical CPU 0x0\nAug 05 17:01:59 witherspoon kernel: Linu...</msg>
<status status="PASS" endtime="20170805 17:05:14.377" starttime="20170805 17:05:13.397"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[0]</arg>
</arguments>
<assign>
<var>${stdout}</var>
</assign>
<msg timestamp="20170805 17:05:14.378" level="INFO">${stdout} = -- Logs begin at Sat 2017-08-05 17:01:59 UTC, end at Sat 2017-08-05 17:05:16 UTC. --
Aug 05 17:01:59 witherspoon kernel: Booting Linux on physical CPU 0x0
Aug 05 17:01:59 witherspoon kernel: Linux ver...</msg>
<status status="PASS" endtime="20170805 17:05:14.378" starttime="20170805 17:05:14.378"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>@{ret_values}[1]</arg>
</arguments>
<assign>
<var>${stderr}</var>
</assign>
<msg timestamp="20170805 17:05:14.379" level="INFO">${stderr} = </msg>
<status status="PASS" endtime="20170805 17:05:14.379" starttime="20170805 17:05:14.379"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$stderr == '${EMPTY}'</arg>
<arg>Write Data To File</arg>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
<arg>ELSE</arg>
<arg>Write Data To File</arg>
<arg>ERROR output:${\n}${stderr}${\n}Output:${\n}${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Write Data To File" library="openbmc_ffdc_utils">
<doc>Write data to the ffdc report document</doc>
<arguments>
<arg>${stdout}${\n}</arg>
<arg>${logpath}</arg>
</arguments>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${filepath}</arg>
<arg>${data}</arg>
</arguments>
<msg timestamp="20170805 17:05:14.390" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/20170805170506599770_UpdateBmc/20170805170506599770_InitiateCodeUpdateBMC/20170805170506599770_BMC_journalctl.txt"&gt;/home/fspcibld/logs/20170805170506599770_UpdateBmc/20170805170506599770_InitiateCodeUpdateBMC/20170805170506599770_BMC_journalctl.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170805 17:05:14.390" starttime="20170805 17:05:14.390"></status>
</kw>
<status status="PASS" endtime="20170805 17:05:14.391" starttime="20170805 17:05:14.388"></status>
</kw>
<status status="PASS" endtime="20170805 17:05:14.391" starttime="20170805 17:05:14.380"></status>
</kw>
<status status="PASS" endtime="20170805 17:05:14.391" starttime="20170805 17:05:13.395"></status>
</kw>
<status status="PASS" endtime="20170805 17:05:14.391" starttime="20170805 17:05:13.394"></status>
</kw>
<status status="PASS" endtime="20170805 17:05:14.391" starttime="20170805 17:05:12.067"></status>
</kw>
<status status="PASS" endtime="20170805 17:05:14.391" starttime="20170805 17:05:12.066"></status>
</kw>
<status status="PASS" endtime="20170805 17:05:14.391" starttime="20170805 17:05:12.065"></status>
</kw>
<status status="PASS" endtime="20170805 17:05:14.391" starttime="20170805 17:05:12.065"></status>
</kw>
<status status="PASS" endtime="20170805 17:05:14.391" starttime="20170805 17:05:12.064"></status>
</kw>
<status status="PASS" endtime="20170805 17:05:14.391" starttime="20170805 17:05:12.051"></status>
</kw>
<status status="PASS" endtime="20170805 17:05:14.391" starttime="20170805 17:05:12.048"></status>
</kw>
<status status="PASS" endtime="20170805 17:05:14.391" starttime="20170805 17:05:12.048"></status>
</kw>
<kw type="foritem" name="${method} = ('SEL Log', 'Collect eSEL Log')">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status status="PASS" endtime="20170805 17:05:14.393" starttime="20170805 17:05:14.393"></status>
</kw>
<msg timestamp="20170805 17:05:14.393" level="INFO">${status} = PASS</msg>
<msg timestamp="20170805 17:05:14.394" level="INFO">${ret_values} = None</msg>
<status status="PASS" endtime="20170805 17:05:14.394" starttime="20170805 17:05:14.393"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status status="PASS" endtime="20170805 17:05:14.394" starttime="20170805 17:05:14.394"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="Collect eSEL Log" library="openbmc_ffdc_methods">
<doc>Collect eSEL log from logging entry and convert eSEL data</doc>
<kw name="OpenBMC Get Request" library="rest_client">
<arguments>
<arg>${BMC_LOGGING_ENTRY}/enumerate</arg>
<arg>quiet=${1}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Initialize OpenBMC" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>quiet=${quiet}</arg>
</arguments>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>40 sec</arg>
<arg>20 sec</arg>
<arg>Post Login Request</arg>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Post Login Request" library="rest_client">
<arguments>
<arg>${timeout}</arg>
<arg>${quiet}</arg>
</arguments>
<kw name="Create Session" library="RequestsLibrary.RequestsKeywords">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>openbmc</arg>
<arg>${AUTH_URI}</arg>
<arg>timeout=${timeout}</arg>
<arg>max_retries=3</arg>
</arguments>
<msg timestamp="20170805 17:05:14.412" level="INFO">Creating Session using : alias=openbmc, url=https://9.3.86.161, headers={},                     cookies=None, auth=None, timeout=10, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20170805 17:05:14.412" starttime="20170805 17:05:14.411"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${headers}</var>
</assign>
<msg timestamp="20170805 17:05:14.413" level="INFO">${headers} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20170805 17:05:14.413" starttime="20170805 17:05:14.412"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>${OPENBMC_USERNAME}</arg>
<arg>${OPENBMC_PASSWORD}</arg>
</arguments>
<assign>
<var>@{credentials}</var>
</assign>
<msg timestamp="20170805 17:05:14.413" level="INFO">@{credentials} = [ root | 0penBmc ]</msg>
<status status="PASS" endtime="20170805 17:05:14.413" starttime="20170805 17:05:14.413"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>data=@{credentials}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20170805 17:05:14.414" level="INFO">${data} = {u'data': [u'root', u'0penBmc']}</msg>
<status status="PASS" endtime="20170805 17:05:14.414" starttime="20170805 17:05:14.414"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Post Request</arg>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${resp}</var>
</assign>
<kw name="Post Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a POST request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>/login</arg>
<arg>data=${data}</arg>
<arg>headers=${headers}</arg>
</arguments>
<msg timestamp="20170805 17:05:14.640" level="INFO">Post Request using : alias=openbmc, uri=/login, data={"data": ["root", "0penBmc"]}, headers={u'Content-Type': u'application/json'}, files=None, allow_redirects=True </msg>
<status status="PASS" endtime="20170805 17:05:14.640" starttime="20170805 17:05:14.415"></status>
</kw>
<msg timestamp="20170805 17:05:14.640" level="INFO">${status} = PASS</msg>
<msg timestamp="20170805 17:05:14.640" level="INFO">${resp} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20170805 17:05:14.640" starttime="20170805 17:05:14.414"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${status}</arg>
<arg>PASS</arg>
<arg>msg=${resp}</arg>
</arguments>
<msg timestamp="20170805 17:05:14.641" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170805 17:05:14.641" starttime="20170805 17:05:14.640"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170805 17:05:14.641" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20170805 17:05:14.642" starttime="20170805 17:05:14.641"></status>
</kw>
<status status="PASS" endtime="20170805 17:05:14.642" starttime="20170805 17:05:14.411"></status>
</kw>
<status status="PASS" endtime="20170805 17:05:14.642" starttime="20170805 17:05:14.410"></status>
</kw>
<status status="PASS" endtime="20170805 17:05:14.642" starttime="20170805 17:05:14.409"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=</arg>
<arg>${DBUS_PREFIX}</arg>
<arg>${uri}</arg>
</arguments>
<assign>
<var>${base_uri}</var>
</assign>
<msg timestamp="20170805 17:05:14.642" level="INFO">${base_uri} = /xyz/openbmc_project/logging/entry//enumerate</msg>
<status status="PASS" endtime="20170805 17:05:14.642" starttime="20170805 17:05:14.642"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Request</arg>
<arg>method=Get</arg>
<arg>base_uri=${base_uri}</arg>
<arg>args=&amp;{kwargs}</arg>
</arguments>
<status status="PASS" endtime="20170805 17:05:14.643" starttime="20170805 17:05:14.643"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary.RequestsKeywords">
<doc>Send a GET request on the session object found using the</doc>
<arguments>
<arg>openbmc</arg>
<arg>${base_uri}</arg>
<arg>&amp;{kwargs}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170805 17:05:14.785" level="INFO">Get Request using : alias=openbmc, uri=/xyz/openbmc_project/logging/entry//enumerate, headers=None json=None</msg>
<msg timestamp="20170805 17:05:14.786" level="INFO">${ret} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20170805 17:05:14.786" starttime="20170805 17:05:14.643"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${quiet}' == '${0}'</arg>
<arg>Log Response</arg>
<arg>${ret}</arg>
</arguments>
<status status="PASS" endtime="20170805 17:05:14.786" starttime="20170805 17:05:14.786"></status>
</kw>
<kw name="Delete All Sessions" library="RequestsLibrary.RequestsKeywords">
<doc>Removes all the session objects</doc>
<msg timestamp="20170805 17:05:14.787" level="INFO">Delete All Sessions</msg>
<status status="PASS" endtime="20170805 17:05:14.787" starttime="20170805 17:05:14.787"></status>
</kw>
<msg timestamp="20170805 17:05:14.787" level="INFO">${resp} = &lt;Response [404]&gt;</msg>
<status status="PASS" endtime="20170805 17:05:14.787" starttime="20170805 17:05:14.408"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Be Equal As Strings</arg>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${resp.status_code}</arg>
<arg>${HTTP_OK}</arg>
</arguments>
<msg timestamp="20170805 17:05:14.788" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20170805 17:05:14.788" level="FAIL">404 != 200</msg>
<status status="FAIL" endtime="20170805 17:05:14.789" starttime="20170805 17:05:14.788"></status>
</kw>
<msg timestamp="20170805 17:05:14.789" level="INFO">${status} = False</msg>
<status status="PASS" endtime="20170805 17:05:14.789" starttime="20170805 17:05:14.787"></status>
</kw>
<kw name="Return From Keyword If" library="BuiltIn">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == '${False}'</arg>
</arguments>
<msg timestamp="20170805 17:05:14.789" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" endtime="20170805 17:05:14.789" starttime="20170805 17:05:14.789"></status>
</kw>
<status status="PASS" endtime="20170805 17:05:14.789" starttime="20170805 17:05:14.408"></status>
</kw>
<status status="PASS" endtime="20170805 17:05:14.790" starttime="20170805 17:05:14.394"></status>
</kw>
<status status="PASS" endtime="20170805 17:05:14.790" starttime="20170805 17:05:14.392"></status>
</kw>
<status status="PASS" endtime="20170805 17:05:14.790" starttime="20170805 17:05:14.391"></status>
</kw>
<kw type="foritem" name="${method} = ('OS FFDC', 'OS FFDC Files')">
<kw name="Execute Keyword Method" library="openbmc_ffdc_methods">
<doc>Call into BMC method keywords. Don't let one</doc>
<arguments>
<arg>${method[0]}</arg>
<arg>${method[1]}</arg>
<arg>@{ffdc_function_list}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>List Should Contain Value</arg>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${ret_values}</var>
</assign>
<kw name="List Should Contain Value" library="Collections">
<doc>Fails if the ``value`` is not found from ``list``.</doc>
<arguments>
<arg>${ffdc_function_list}</arg>
<arg>${description}</arg>
</arguments>
<status status="PASS" endtime="20170805 17:05:14.792" starttime="20170805 17:05:14.792"></status>
</kw>
<msg timestamp="20170805 17:05:14.792" level="INFO">${status} = PASS</msg>
<msg timestamp="20170805 17:05:14.793" level="INFO">${ret_values} = None</msg>
<status status="PASS" endtime="20170805 17:05:14.793" starttime="20170805 17:05:14.791"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' != 'PASS'</arg>
<arg>Return from Keyword</arg>
</arguments>
<status status="PASS" endtime="20170805 17:05:14.794" starttime="20170805 17:05:14.793"></status>
</kw>
<kw name="Run Key" library="gen_robot_keyword">
<doc>Run the given keyword, return the status and the keyword return values.</doc>
<arguments>
<arg>${keyword_name}</arg>
<arg>ignore=1</arg>
</arguments>
<kw name="OS FFDC Files" library="openbmc_ffdc_methods">
<doc>Get the command list and iterate</doc>
<kw name="Return From Keyword If" library="BuiltIn">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${OS_HOST}' == '${EMPTY}'</arg>
<arg>No OS Host Provided</arg>
</arguments>
<msg timestamp="20170805 17:05:14.809" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" endtime="20170805 17:05:14.809" starttime="20170805 17:05:14.808"></status>
</kw>
<status status="PASS" endtime="20170805 17:05:14.809" starttime="20170805 17:05:14.807"></status>
</kw>
<status status="PASS" endtime="20170805 17:05:14.809" starttime="20170805 17:05:14.794"></status>
</kw>
<status status="PASS" endtime="20170805 17:05:14.809" starttime="20170805 17:05:14.790"></status>
</kw>
<status status="PASS" endtime="20170805 17:05:14.809" starttime="20170805 17:05:14.790"></status>
</kw>
<status status="PASS" endtime="20170805 17:05:14.809" starttime="20170805 17:05:07.531"></status>
</kw>
<status status="PASS" endtime="20170805 17:05:14.809" starttime="20170805 17:05:07.527"></status>
</kw>
<status status="PASS" endtime="20170805 17:05:14.809" starttime="20170805 17:05:07.527"></status>
</kw>
<status status="PASS" endtime="20170805 17:05:14.810" starttime="20170805 17:05:07.527"></status>
</kw>
<kw name="Run Key U" library="gen_robot_keyword">
<doc>Run keyword unconditionally (i.e. without regard to global test_mode</doc>
<arguments>
<arg>SSHLibrary.Close All Connections</arg>
</arguments>
<kw name="Close All Connections" library="SSHLibrary">
<doc>Closes all open connections.</doc>
<status status="PASS" endtime="20170805 17:05:14.859" starttime="20170805 17:05:14.816"></status>
</kw>
<status status="PASS" endtime="20170805 17:05:14.859" starttime="20170805 17:05:14.810"></status>
</kw>
<status status="PASS" endtime="20170805 17:05:14.859" starttime="20170805 17:05:07.525"></status>
</kw>
<status status="PASS" endtime="20170805 17:05:14.859" starttime="20170805 17:05:03.558"></status>
</kw>
<status status="PASS" endtime="20170805 17:05:14.859" starttime="20170805 17:05:03.558"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}'=='True'</arg>
<arg>Recover Quiesced Host</arg>
</arguments>
<status status="PASS" endtime="20170805 17:05:14.861" starttime="20170805 17:05:14.860"></status>
</kw>
<kw name="Log Test Case Status" library="openbmc_ffdc_methods">
<doc>Test case execution result history.</doc>
<kw name="Get Variable Value" library="BuiltIn">
<doc>Returns variable value or ``default`` if the variable does not exist.</doc>
<arguments>
<arg>${FFDC_DIR_PATH_STYLE}</arg>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${FFDC_DIR_PATH_STYLE}</var>
</assign>
<msg timestamp="20170805 17:05:14.862" level="INFO">${FFDC_DIR_PATH_STYLE} = </msg>
<status status="PASS" endtime="20170805 17:05:14.862" starttime="20170805 17:05:14.862"></status>
</kw>
<kw name="Get Variable Value" library="BuiltIn">
<doc>Returns variable value or ``default`` if the variable does not exist.</doc>
<arguments>
<arg>${FFDC_DIR_PATH}</arg>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${FFDC_DIR_PATH}</var>
</assign>
<msg timestamp="20170805 17:05:14.863" level="INFO">${FFDC_DIR_PATH} = /home/fspcibld/logs/20170805170506599770_UpdateBmc/20170805170506599770_InitiateCodeUpdateBMC/</msg>
<status status="PASS" endtime="20170805 17:05:14.863" starttime="20170805 17:05:14.863"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${FFDC_DIR_PATH}' == '${EMPTY}'</arg>
<arg>Set FFDC Defaults</arg>
</arguments>
<status status="PASS" endtime="20170805 17:05:14.864" starttime="20170805 17:05:14.863"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${FFDC_DIR_PATH_STYLE}' == '${1}'</arg>
<arg>Run Keywords</arg>
<arg>Set Global Variable</arg>
<arg>${FFDC_LOG_PATH}</arg>
<arg>${FFDC_DIR_PATH}</arg>
<arg>AND</arg>
<arg>Set Global Variable</arg>
<arg>${TEST_HISTORY}</arg>
<arg>${FFDC_DIR_PATH}test_history.txt</arg>
</arguments>
<status status="PASS" endtime="20170805 17:05:14.864" starttime="20170805 17:05:14.864"></status>
</kw>
<kw name="Create Directory" library="OperatingSystem">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>${FFDC_LOG_PATH}</arg>
</arguments>
<msg timestamp="20170805 17:05:14.865" html="yes" level="INFO">Directory '&lt;a href="file:///home/fspcibld/logs"&gt;/home/fspcibld/logs&lt;/a&gt;' already exists.</msg>
<status status="PASS" endtime="20170805 17:05:14.865" starttime="20170805 17:05:14.865"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>OperatingSystem.File Should Exist</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<assign>
<var>${exist}</var>
</assign>
<kw name="File Should Exist" library="OperatingSystem">
<doc>Fails unless the given ``path`` points to an existing file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
</arguments>
<msg timestamp="20170805 17:05:14.866" html="yes" level="INFO">File '&lt;a href="file:///home/fspcibld/logs/test_history.txt"&gt;/home/fspcibld/logs/test_history.txt&lt;/a&gt;' exists.</msg>
<status status="PASS" endtime="20170805 17:05:14.866" starttime="20170805 17:05:14.866"></status>
</kw>
<msg timestamp="20170805 17:05:14.866" level="INFO">${exist} = True</msg>
<status status="PASS" endtime="20170805 17:05:14.866" starttime="20170805 17:05:14.865"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${exist}' == '${False}'</arg>
<arg>Create File</arg>
<arg>${TEST_HISTORY}</arg>
</arguments>
<status status="PASS" endtime="20170805 17:05:14.867" starttime="20170805 17:05:14.867"></status>
</kw>
<kw name="Rpvars" library="gen_robot_print">
<arguments>
<arg>TEST_HISTORY</arg>
</arguments>
<status status="PASS" endtime="20170805 17:05:14.868" starttime="20170805 17:05:14.867"></status>
</kw>
<kw name="Get Current Time Stamp" library="openbmc_ffdc_utils">
<doc>Get the current time stamp data</doc>
<assign>
<var>${cur_time}</var>
</assign>
<kw name="Get Current Date" library="DateTime">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=%Y-%m-%d %H:%M:%S:%f</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20170805 17:05:14.869" level="INFO">${cur_time} = 2017-08-05 17:05:14:868880</msg>
<status status="PASS" endtime="20170805 17:05:14.869" starttime="20170805 17:05:14.869"></status>
</kw>
<kw name="Get Strip String" library="openbmc_ffdc_list">
<doc>########################################################################</doc>
<arguments>
<arg>${cur_time}</arg>
</arguments>
<assign>
<var>${cur_time}</var>
</assign>
<msg timestamp="20170805 17:05:14.870" level="INFO">${cur_time} = 20170805170514868880</msg>
<status status="PASS" endtime="20170805 17:05:14.870" starttime="20170805 17:05:14.869"></status>
</kw>
<msg timestamp="20170805 17:05:14.870" level="INFO">${cur_time} = 20170805170514868880</msg>
<status status="PASS" endtime="20170805 17:05:14.870" starttime="20170805 17:05:14.868"></status>
</kw>
<kw name="Append To File" library="OperatingSystem">
<doc>Appends the given content to the specified file.</doc>
<arguments>
<arg>${TEST_HISTORY}</arg>
<arg>${cur_time}:${SUITE_NAME}:${TEST_NAME}:${TEST_STATUS}${\n}</arg>
</arguments>
<msg timestamp="20170805 17:05:14.871" html="yes" level="INFO">Appended to file '&lt;a href="file:///home/fspcibld/logs/test_history.txt"&gt;/home/fspcibld/logs/test_history.txt&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170805 17:05:14.871" starttime="20170805 17:05:14.870"></status>
</kw>
<status status="PASS" endtime="20170805 17:05:14.871" starttime="20170805 17:05:14.861"></status>
</kw>
<status status="PASS" endtime="20170805 17:05:14.871" starttime="20170805 17:05:03.299"></status>
</kw>
<status status="PASS" endtime="20170805 17:05:14.871" starttime="20170805 17:05:03.292"></status>
</kw>
<doc>Initiate a code update on the BMC.</doc>
<tags>
<tag>Initiate_Code_Update_BMC</tag>
</tags>
<status status="FAIL" endtime="20170805 17:05:14.872" critical="yes" starttime="20170805 17:00:50.510">'Verify error: update: --no-flash --ignore-mount --no-save-files --no-restore-files --no-clean-saved-files
ERROR: Image image-bmc too big for mtd0.
' does not contain 'to apply'</status>
</test>
<doc>Trigger code update to a target BMC.
Execution Method :
python -m robot -v OPENBMC_HOST:&lt;hostname&gt;
-v FILE_PATH:&lt;path/*all.tar&gt; update_bmc.robot

Code update method BMC using REST
Update work flow sequence:
- User input BMC File existence check
- Ping Test and REST authentication
- Set Host Power host setting Policy to RESTORE_LAST_STATE
On reboot this policy would ensure the BMC comes
online and stays at HOST_POWERED_OFF state.
- Issue poweroff
- Prune archived journal logs
- Prepare for Update
- Wait for BMC to come online clean
- Wait for BMC_READY state
- Apply preserve BMC Network setting
- SCP image to BMC
- Activate the flash image
- Warm Reset BMC to activate code
- Wait for BMC to come online time out 30 minutes
- Version check post update
- Identify REST url post update</doc>
<status status="FAIL" endtime="20170805 17:05:14.873" starttime="20170805 17:00:49.604"></status>
</suite>
<statistics>
<total>
<stat fail="1" pass="0">Critical Tests</stat>
<stat fail="1" pass="0">All Tests</stat>
</total>
<tag>
<stat fail="1" pass="0">Initiate_Code_Update_BMC</stat>
</tag>
<suite>
<stat fail="1" id="s1" name="Update Bmc" pass="0">Update Bmc</stat>
</suite>
</statistics>
<errors>
<msg timestamp="20170805 17:01:51.745" level="WARN">Retrying (Retry(total=2, connect=None, read=None, redirect=None, status=None)) after connection broken by 'ConnectTimeoutError(&lt;urllib3.connection.VerifiedHTTPSConnection object at 0x3fff82a3e910&gt;, 'Connection to 9.3.86.161 timed out. (connect timeout=20.0)')': /login</msg>
<msg timestamp="20170805 17:02:11.967" level="WARN">Retrying (Retry(total=1, connect=None, read=None, redirect=None, status=None)) after connection broken by 'ConnectTimeoutError(&lt;urllib3.connection.VerifiedHTTPSConnection object at 0x3fff82a3e390&gt;, 'Connection to 9.3.86.161 timed out. (connect timeout=20.0)')': /login</msg>
</errors>
</robot>
